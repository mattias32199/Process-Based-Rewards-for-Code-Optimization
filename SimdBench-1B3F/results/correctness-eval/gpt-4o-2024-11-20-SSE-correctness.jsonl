{"task_id": "SimdBench_0_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_0_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_0_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy3_cki35.cpp:42:30: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'conditional_move_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i result_vec = _mm_blendv_epi8(dst_vec, src_vec, mask_vec);\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_0_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppb9xsnji.cpp:54:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   54 |         v_result = _mm_div_epi32(v_result, v_seven);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpweep301l.cpp:44:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   44 |         v_result = _mm_div_epi32(v_result, v_seven);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps28xgvan.cpp:54:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   54 |         v_result = _mm_div_epi32(v_result, v_seven); // Divide by 7\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5enr92ay.cpp:45:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   45 |         v_result = _mm_div_epi32(v_result, v_seven);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpa1wzjra1.cpp:45:18: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   45 |         result = _mm_div_epi32(result, v_seven);\n      |                  ^~~~~~~~~~~~~\n      |                  _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_2_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfyzlztcx.cpp:46:20: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   46 |         left_vec = _mm_shuffle_epi8(left_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                    ^\n[REDACTED]/tmpfyzlztcx.cpp:47:21: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   47 |         right_vec = _mm_shuffle_epi8(right_vec, _mm_set_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6kqrd14j.cpp:47:20: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   47 |         left_vec = _mm_shuffle_epi8(left_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                    ^\n[REDACTED]/tmp6kqrd14j.cpp:48:21: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   48 |         right_vec = _mm_shuffle_epi8(right_vec, _mm_set_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnqxquhpv.cpp:42:20: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   42 |         left_vec = _mm_shuffle_epi8(left_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                    ^\n[REDACTED]/tmpnqxquhpv.cpp:43:21: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   43 |         right_vec = _mm_shuffle_epi8(right_vec, _mm_set_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpv_ekbp2s.cpp:43:21: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   43 |         start_vec = _mm_shuffle_epi8(start_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                     ^\n[REDACTED]/tmpv_ekbp2s.cpp:44:19: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   44 |         end_vec = _mm_shuffle_epi8(end_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoe24a8c2.cpp:40:21: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   40 |         start_vec = _mm_shuffle_epi8(start_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                     ^\n[REDACTED]/tmpoe24a8c2.cpp:43:19: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   43 |         end_vec = _mm_shuffle_epi8(end_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_7_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8i8odfa3.cpp:51:11: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   51 |     sum = _mm_hadd_ps(sum, sum);\n      |           ^\n[REDACTED]/tmp8i8odfa3.cpp:52:11: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   52 |     sum = _mm_hadd_ps(sum, sum);\n      |           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_7_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_e4vps0p.cpp:39:30: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   39 |         __m128i result_vec = _mm_srai_epi64(scalar_added_vec, 1); // Divide by 2 (round-toward-zero)\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnz87yyrh.cpp:36:26: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   36 |         __m128i result = _mm_srai_epi64(_mm_add_epi64(sum_with_scalar, _mm_and_si128(sum_with_scalar, _mm_set1_epi64x(1))), 1); // Divide by 2 (round-toward-zero)\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzokfz03e.cpp:40:26: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   40 |         __m128i result = _mm_srai_epi64(_mm_add_epi64(sum_with_scalar, _mm_and_si128(sum_with_scalar, _mm_set1_epi64x(1))), 1); // Divide by 2 (round-toward-zero)\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph2nz0crx.cpp:40:26: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   40 |         __m128i result = _mm_srai_epi64(_mm_add_epi64(sum_with_scalar, divisor), 1); // Divide by 2 (round-toward-zero)\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmwdqmut8.cpp:40:26: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   40 |         __m128i result = _mm_srai_epi64(_mm_add_epi64(sum_with_scalar, divisor), 1); // Divide by 2 (round-toward-zero)\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqavwvbaf.cpp:45:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   45 |         min_vec = _mm_min_epi32(min_vec, even_vec);  // Compare and store minimum values\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcd9lgsm4.cpp:44:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]\n   44 | }\n      | ^\n[REDACTED]/tmpcd9lgsm4.cpp:42:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   42 |         min_vec = _mm_min_epi32(min_vec,filtered); // Update min\n      |                   ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnlt_aeeh.cpp:45:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   45 |         min_vec = _mm_min_epi32(min_vec, masked_vec); // Compute minimum\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpi7xdfpzo.cpp:45:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   45 |         min_vec = _mm_min_epi32(min_vec, filtered); // Update minimum\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmjbbjras.cpp:47:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   47 |         min_val = _mm_min_epi32(min_val, masked_vec); // Update min_val with the minimum values\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_12_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2g9j6oua.cpp:42:49: error: use of undeclared identifier '_mm_castsi128_si128'\n   42 |         __m128i logical_shifted = _mm_srl_epi32(_mm_castsi128_si128(src_vec), shift_vec);\n      |                                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6uylqrep.cpp:42:49: error: use of undeclared identifier '_mm_castsi128_si128'\n   42 |         __m128i logical_shifted = _mm_srl_epi32(_mm_castsi128_si128(src_vec), shift_vec);\n      |                                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8hjrq4k2.cpp:42:47: error: use of undeclared identifier '_mm_castsi128_si128'\n   42 |         __m128i logical_shift = _mm_srl_epi32(_mm_castsi128_si128(src_vec), shift_vec);\n      |                                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8qfb55z6.cpp:42:49: error: use of undeclared identifier '_mm_castsi128_si128'\n   42 |         __m128i logical_shifted = _mm_srl_epi32(_mm_castsi128_si128(src_vec), shift_vec);\n      |                                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoxxiphj8.cpp:47:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'matrix_sum_simd' that is compiled without support for 'ssse3'\n   47 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n[REDACTED]/tmpoxxiphj8.cpp:48:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'matrix_sum_simd' that is compiled without support for 'ssse3'\n   48 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp42x6yb1h.cpp:47:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'matrix_sum_simd' that is compiled without support for 'ssse3'\n   47 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n[REDACTED]/tmp42x6yb1h.cpp:48:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'matrix_sum_simd' that is compiled without support for 'ssse3'\n   48 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprrudm27b.cpp:45:22: error: always_inline function '_mm_max_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   45 |         max_values = _mm_max_epi8(values, max_values);          // Update max values\n      |                      ^\n[REDACTED]/tmprrudm27b.cpp:46:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   46 |         max_indices = _mm_blendv_epi8(max_indices, current_indices, cmp_mask); // Update indices where new max is found\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps7bypze9.cpp:45:22: error: always_inline function '_mm_max_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   45 |         max_values = _mm_max_epi8(values, max_values);          // Update max_values\n      |                      ^\n[REDACTED]/tmps7bypze9.cpp:46:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   46 |         max_indices = _mm_blendv_epi8(max_indices, current_indices, cmp_mask); // Update max_indices where cmp_mask is true\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptwj6c29v.cpp:46:22: error: always_inline function '_mm_max_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   46 |         max_values = _mm_max_epi8(max_values, values);\n      |                      ^\n[REDACTED]/tmptwj6c29v.cpp:49:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   49 |         max_indices = _mm_blendv_epi8(max_indices, current_indices, mask);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphriadijt.cpp:46:22: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   46 |         max_values = _mm_blendv_epi8(max_values, values, mask);\n      |                      ^\n[REDACTED]/tmphriadijt.cpp:47:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   47 |         max_indices = _mm_blendv_epi8(max_indices, current_indices, mask);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjfisk07n.cpp:43:22: error: always_inline function '_mm_max_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   43 |         max_values = _mm_max_epi8(values, max_values);          // Update max values\n      |                      ^\n[REDACTED]/tmpjfisk07n.cpp:44:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   44 |         max_indices = _mm_blendv_epi8(max_indices, current_indices, cmp_mask); // Update indices where new max found\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp85opub3b.cpp:43:26: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'population_count_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i count4 = _mm_mullo_epi32(count3, _mm_set1_epi32(0x01010101));\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2l958dfk.cpp:38:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   38 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); // Round to nearest integer\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpavu5j0vs.cpp:38:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   38 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); // Round to nearest integer\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpupmolfgm.cpp:38:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   38 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); // Round to nearest integer\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9urzypo7.cpp:42:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   42 |         __m128 rounded = _mm_round_ps(result, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb8se_dtn.cpp:37:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   37 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); // Round to nearest integer\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphvmx8j4e.cpp:61:33: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   61 |         __m128 rounded_result = _mm_ceil_ps(mul_result);\n      |                                 ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd_3_891p.cpp:56:33: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   56 |         __m128 rounded_result = _mm_ceil_ps(mul_result);\n      |                                 ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpic0h0c2b.cpp:57:28: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   57 |         __m128 v_rounded = _mm_ceil_ps(v_mul);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvfh5a1fo.cpp:54:18: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   54 |         result = _mm_ceil_ps(result);\n      |                  ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp51l_lqex.cpp:46:29: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   46 |         __m128 v_ceil_mul = _mm_ceil_ps(v_mul);\n      |                             ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkbai_l56.cpp:52:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   52 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpkbai_l56.cpp:53:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   53 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0c1m405_.cpp:46:19: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'matrix_mul_round_int_simd' that is compiled without support for 'sse3'\n   46 |             sum = _mm_hadd_pd(sum, sum);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3665xpgf.cpp:52:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   52 |             col0 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(col0, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp3665xpgf.cpp:53:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   53 |             col1 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(col1, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp3665xpgf.cpp:54:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   54 |             col2 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(col2, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp3665xpgf.cpp:55:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   55 |             col3 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(col3, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n4 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps28v4_qd.cpp:55:42: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   55 |             col0 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(col0, quarter), _MM_FROUND_TO_NEAREST_INT), quarter), half);\n      |                                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmps28v4_qd.cpp:56:42: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   56 |             col1 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(col1, quarter), _MM_FROUND_TO_NEAREST_INT), quarter), half);\n      |                                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmps28v4_qd.cpp:57:42: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   57 |             col2 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(col2, quarter), _MM_FROUND_TO_NEAREST_INT), quarter), half);\n      |                                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmps28v4_qd.cpp:58:42: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   58 |             col3 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(col3, quarter), _MM_FROUND_TO_NEAREST_INT), quarter), half);\n      |                                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n4 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj03w0ac7.cpp:44:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |             row0 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(row0, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpj03w0ac7.cpp:45:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   45 |             row1 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(row1, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpj03w0ac7.cpp:46:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   46 |             row2 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(row2, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpj03w0ac7.cpp:47:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   47 |             row3 = _mm_mul_ps(_mm_round_ps(_mm_div_ps(row3, quarter), _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC), quarter);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n4 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpigm0of8a.cpp:44:82: error: use of undeclared identifier '_MM_FROUND_NEAREST_INT'\n   44 |             row0 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(row0, quarter), _MM_FROUND_NEAREST_INT), quarter), half);\n      |                                                                                  ^\n[REDACTED]/tmpigm0of8a.cpp:45:82: error: use of undeclared identifier '_MM_FROUND_NEAREST_INT'\n   45 |             row1 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(row1, quarter), _MM_FROUND_NEAREST_INT), quarter), half);\n      |                                                                                  ^\n[REDACTED]/tmpigm0of8a.cpp:46:82: error: use of undeclared identifier '_MM_FROUND_NEAREST_INT'\n   46 |             row2 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(row2, quarter), _MM_FROUND_NEAREST_INT), quarter), half);\n      |                                                                                  ^\n[REDACTED]/tmpigm0of8a.cpp:47:82: error: use of undeclared identifier '_MM_FROUND_NEAREST_INT'\n   47 |             row3 = _mm_add_ps(_mm_mul_ps(_mm_round_ps(_mm_div_ps(row3, quarter), _MM_FROUND_NEAREST_INT), quarter), half);\n      |                                                                                  ^\n4 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "runtime failed: double free or corruption (!prev)\n"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp40u6_j2f.cpp:44:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |         __m128 rounded = _mm_round_ps(result, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC); // Round towards zero\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpn1vb2l25.cpp:44:33: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |         __m128 rounded_result = _mm_round_ps(sub_result, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n      |                                 ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxueoszbt.cpp:44:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |         __m128 rounded = _mm_round_ps(result, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC); // Round towards zero\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbr4ywoyi.cpp:47:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   47 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpbr4ywoyi.cpp:48:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   48 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqpqy2acn.cpp:43:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   43 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpqpqy2acn.cpp:44:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   44 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgo54mc7k.cpp:43:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   43 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpgo54mc7k.cpp:44:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   44 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfs0431kn.cpp:43:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   43 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpfs0431kn.cpp:44:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   44 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjcl7g7vj.cpp:38:27: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   38 |         __m128i div_vec = _mm_div_epi16(src_vec, base_vec);     // Divide src by base (integer division)\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpi6b6i6jy.cpp:40:27: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   40 |         __m128i div_vec = _mm_div_epi16(src_vec, base_vec);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkqdx0ea4.cpp:41:27: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   41 |         __m128i div_vec = _mm_div_epi16(src_vec, base_vec);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpftdurnzt.cpp:38:27: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   38 |         __m128i div_vec = _mm_div_epi16(src_vec, base_vec);     // Divide src by base\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphgi123iw.cpp:38:27: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   38 |         __m128i div_vec = _mm_div_epi16(src_vec, base_vec);     // Divide src by base\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_33_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_33_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0ddeb766.cpp:38:30: error: always_inline function '_mm_mullo_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   38 |         __m128i mul_result = _mm_mullo_epi64(vec_x, scalar); // Multiply x[i] by a\n      |                              ^\n[REDACTED]/tmp0ddeb766.cpp:39:25: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   39 |         __m128i abs_y = _mm_abs_epi64(vec_y);               // Take absolute value of y[i]\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpftikji0a.cpp:38:30: error: always_inline function '_mm_mullo_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   38 |         __m128i mul_result = _mm_mullo_epi64(vec_x, scalar);\n      |                              ^\n[REDACTED]/tmpftikji0a.cpp:44:25: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   44 |         __m128i abs_y = _mm_abs_epi64(vec_y);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnj5bglsh.cpp:38:30: error: always_inline function '_mm_mullo_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   38 |         __m128i mul_result = _mm_mullo_epi64(vec_x, scalar);\n      |                              ^\n[REDACTED]/tmpnj5bglsh.cpp:44:25: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   44 |         __m128i abs_y = _mm_abs_epi64(vec_y);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkxnh600q.cpp:38:30: error: always_inline function '_mm_mullo_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   38 |         __m128i mul_result = _mm_mullo_epi64(vec_x, scalar);\n      |                              ^\n[REDACTED]/tmpkxnh600q.cpp:44:25: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   44 |         __m128i abs_y = _mm_abs_epi64(vec_y);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy65lqm9t.cpp:37:30: error: always_inline function '_mm_mullo_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   37 |         __m128i mul_result = _mm_mullo_epi64(vec_x, scalar); // Multiply x by scalar a\n      |                              ^\n[REDACTED]/tmpy65lqm9t.cpp:38:25: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   38 |         __m128i abs_y = _mm_abs_epi64(vec_y);               // Compute absolute value of y\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdjq3g0s8.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpdjq3g0s8.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2prr3xle.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmp2prr3xle.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpokojjtq5.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpokojjtq5.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptpyrbcl2.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmptpyrbcl2.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr1w8hqk3.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpr1w8hqk3.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9xiiej0h.cpp:54:17: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'sse4.1'\n   54 |         count = _mm_mullo_epi32(count, mask4);\n      |                 ^\n[REDACTED]/tmp9xiiej0h.cpp:58:26: error: always_inline function '_mm_packus_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'sse4.1'\n   58 |         __m128i result = _mm_packus_epi32(count, count);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpt412d2ur.cpp:50:17: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'sse4.1'\n   50 |         count = _mm_mullo_epi32(count, mask4);\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdu1w94j2.cpp:48:64: error: expected ';' at end of declaration\n   48 |         __m128i sum1 = _mm_add_epi8(sum, _mm_srli_epi32(sum,8))\n      |                                                                ^\n      |                                                                ;\n1 error generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3oihzpjf.cpp:52:17: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'sse4.1'\n   52 |         count = _mm_mullo_epi32(count, mask4);\n      |                 ^\n[REDACTED]/tmp3oihzpjf.cpp:56:43: error: always_inline function '_mm_packus_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'sse4.1'\n   56 |         __m128i result = _mm_packus_epi16(_mm_packus_epi32(count, _mm_setzero_si128()), _mm_setzero_si128());\n      |                                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpq59uo6on.cpp:42:23: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   42 |         __m128i mod = _mm_rem_epi32(vecA, three); // Compute A % 3\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvi1km91c.cpp:42:23: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   42 |         __m128i mod = _mm_rem_epi32(vecA, three); // Compute A % 3\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpaa8cpcsf.cpp:42:23: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   42 |         __m128i mod = _mm_rem_epi32(vecA, three); // Compute A % 3\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf2a2x2t7.cpp:42:23: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   42 |         __m128i rem = _mm_rem_epi32(vecA, three); // Compute A % 3\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_fmunwvd.cpp:43:62: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   43 |         __m128i vecMod = _mm_sub_epi32(vecA, _mm_mullo_epi32(_mm_div_epi32(vecA, three), three));\n      |                                                              ^~~~~~~~~~~~~\n      |                                                              _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqf_vlgku.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmpqf_vlgku.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmpqf_vlgku.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmpqf_vlgku.cpp:48:13: error: always_inline function '_mm_sllv_epi32' requires target feature 'avx2', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'avx2'\n   48 |             _mm_sllv_epi32(src_vec, rotate_mask), // src << rotate_bits\n      |             ^\n[REDACTED]/tmpqf_vlgku.cpp:49:13: error: always_inline function '_mm_srlv_epi32' requires target feature 'avx2', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'avx2'\n   49 |             _mm_srlv_epi32(src_vec, _mm_sub_epi32(_mm_set1_epi32(32), rotate_mask)) // src >> (32 - rotate_bits)\n      |             ^\n[REDACTED]/tmpqf_vlgku.cpp:54:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i result = _mm_blendv_epi8(negated, rotated_left, condition); // Select based on condition\n      |                          ^\n1 warning and 3 errors generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvjm2r_jb.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmpvjm2r_jb.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmpvjm2r_jb.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmpvjm2r_jb.cpp:50:13: error: always_inline function '_mm_sllv_epi32' requires target feature 'avx2', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'avx2'\n   50 |             _mm_sllv_epi32(src_vec, rotate_mask),\n      |             ^\n[REDACTED]/tmpvjm2r_jb.cpp:51:13: error: always_inline function '_mm_srlv_epi32' requires target feature 'avx2', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'avx2'\n   51 |             _mm_srlv_epi32(src_vec, _mm_sub_epi32(_mm_set1_epi32(32), rotate_mask))\n      |             ^\n[REDACTED]/tmpvjm2r_jb.cpp:58:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   58 |         __m128i result = _mm_blendv_epi8(negated, rotated_left, condition);\n      |                          ^\n1 warning and 3 errors generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpp835wptk.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmpp835wptk.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmpp835wptk.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmpp835wptk.cpp:57:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   57 |         __m128i result = _mm_blendv_epi8(negated, rotated, condition);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5tdjj7np.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmp5tdjj7np.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmp5tdjj7np.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmp5tdjj7np.cpp:55:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   55 |         __m128i result = _mm_blendv_epi8(negated, rotated, condition); // Blend based on condition\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpyu7ht73k.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmpyu7ht73k.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmpyu7ht73k.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmpyu7ht73k.cpp:54:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i result = _mm_blendv_epi8(negated, rotated, condition); // Blend based on condition\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0y5ujkga.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp0y5ujkga.cpp:45:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   45 |         __m128 rounded = _mm_round_ps(div, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7u1t37w6.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp7u1t37w6.cpp:42:22: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   42 |         vecRounded = _mm_round_ps(vecDiv, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); // Round to nearest integer\n      |                      ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1bqr81du.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp1bqr81du.cpp:38:22: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   38 |         vecRounded = _mm_round_ps(vecDiv, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); // Round to nearest integer\n      |                      ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjo7r3fav.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmpjo7r3fav.cpp:46:29: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   46 |         __m128 vecRounded = _mm_round_ps(vecDiv, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                             ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0o2tt2t3.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp0o2tt2t3.cpp:46:29: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   46 |         __m128 vecRounded = _mm_round_ps(vecDiv, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                             ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_53_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpepwzb8cd.cpp:38:28: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   38 |         __m128i vecB_low = _mm_cvtepi16_epi32(vecA);\n      |                            ^\n[REDACTED]/tmpepwzb8cd.cpp:41:29: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   41 |         __m128i vecB_high = _mm_cvtepi16_epi32(_mm_srli_si128(vecA, 8));\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_55_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_55_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_59_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc0362ph1.cpp:55:32: error: use of undeclared identifier '_mm_abs_pd'; did you mean '_mm_abs_ph'?\n   55 |         __m128d abs_diff_vec = _mm_abs_pd(diff_vec); // Take absolute value\n      |                                ^~~~~~~~~~\n      |                                _mm_abs_ph\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlfp16intrin.h:322:49: note: '_mm_abs_ph' declared here\n  322 | static __inline__ __m128h __DEFAULT_FN_ATTRS128 _mm_abs_ph(__m128h __A) {\n      |                                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb08lj8qp.cpp:55:32: error: use of undeclared identifier '_mm_abs_pd'; did you mean '_mm_abs_ph'?\n   55 |         __m128d abs_diff_vec = _mm_abs_pd(diff_vec); // Absolute difference\n      |                                ^~~~~~~~~~\n      |                                _mm_abs_ph\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlfp16intrin.h:322:49: note: '_mm_abs_ph' declared here\n  322 | static __inline__ __m128h __DEFAULT_FN_ATTRS128 _mm_abs_ph(__m128h __A) {\n      |                                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_64_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_64_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_64_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_66_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj9dy8e57.cpp:53:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   53 |         max_vec = _mm_max_epi32(max_vec, current_vec); // Compute max\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8qg0vvr9.cpp:50:22: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   50 |         max_vector = _mm_max_epi32(max_vector, current_vector);\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1xatp1sz.cpp:50:22: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   50 |         max_vector = _mm_max_epi32(max_vector, current_vector);\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0fbdbezr.cpp:51:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   51 |         max_vec = _mm_max_epi32(max_vec, current_vec); // Compute the rolling maximum\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpucvs2wc_.cpp:49:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   49 |         max_vec = _mm_max_epi32(max_vec, current_vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_68_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_69_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_c8zju9j.cpp:69:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   69 |         max_vec = _mm_max_epi32(max_vec, len_vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoecfmd6r.cpp:60:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   60 |         max_vec = _mm_max_epi32(max_vec, length_vec); // Update max_vec\n      |                   ^\n[REDACTED]/tmpoecfmd6r.cpp:61:21: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   61 |         index_vec = _mm_blendv_epi8(index_vec, current_indices, cmp_mask); // Update index_vec\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqg7hgnse.cpp:57:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   57 |         max_lengths = _mm_max_epi32(max_lengths, lengths);\n      |                       ^\n[REDACTED]/tmpqg7hgnse.cpp:60:19: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   60 |         indices = _mm_blendv_epi8(indices, new_indices, mask);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjd1i140z.cpp:58:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   58 |         max_lengths = _mm_max_epi32(max_lengths, lengths);\n      |                       ^\n[REDACTED]/tmpjd1i140z.cpp:59:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   59 |         max_indices = _mm_blendv_epi8(max_indices, indices, cmp_mask);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_thttrzj.cpp:47:57: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   47 |         __m128i mod = _mm_sub_epi64(va, _mm_mullo_epi64(_mm_div_epi64(va, vb), vb));\n      |                                                         ^~~~~~~~~~~~~\n      |                                                         _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppvooww6p.cpp:46:57: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   46 |         __m128i mod = _mm_sub_epi64(va, _mm_mullo_epi64(_mm_div_epi64(va, vb), vb));\n      |                                                         ^~~~~~~~~~~~~\n      |                                                         _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpn3sxuox5.cpp:47:57: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   47 |         __m128i mod = _mm_sub_epi64(va, _mm_mullo_epi64(_mm_div_epi64(va, vb), vb));\n      |                                                         ^~~~~~~~~~~~~\n      |                                                         _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5mo73z47.cpp:46:57: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   46 |         __m128i mod = _mm_sub_epi64(va, _mm_mullo_epi64(_mm_div_epi64(va, vb), vb));\n      |                                                         ^~~~~~~~~~~~~\n      |                                                         _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph5j0ekrs.cpp:47:57: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   47 |         __m128i mod = _mm_sub_epi64(va, _mm_mullo_epi64(_mm_div_epi64(va, vb), vb));\n      |                                                         ^~~~~~~~~~~~~\n      |                                                         _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_71_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_72_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_72_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7eh_wg45.cpp:39:30: error: use of undeclared identifier '_mm_rem_epi64'\n   39 |         __m128i remainders = _mm_rem_epi64(n_vec, divisors);\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3x0zcib8.cpp:40:22: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   40 |         result_vec = _mm_div_epi64(n_vec, divisor_vec);\n      |                      ^~~~~~~~~~~~~\n      |                      _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n[REDACTED]/tmp3x0zcib8.cpp:41:13: error: use of undeclared identifier '_mm_cmp_epi64'\n   41 |         if (_mm_cmp_epi64(result_vec,zero_vec))return i;\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdzv5t6i6.cpp:37:23: error: use of undeclared identifier '_mm_rem_epi64'\n   37 |         __m128i rem = _mm_rem_epi64(n_vec, divisor);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp32sgqd6g.cpp:38:23: error: use of undeclared identifier '_mm_rem_epi64'\n   38 |         __m128i rem = _mm_rem_epi64(n_vec, divisor);\n      |                       ^\n[REDACTED]/tmp32sgqd6g.cpp:39:23: error: use of undeclared identifier '_mm_cmp_epi64'\n   39 |         __m128i cmp = _mm_cmp_epi64(rem, _mm_setzero_si128());\n      |                       ^\n[REDACTED]/tmp32sgqd6g.cpp:40:35: error: too few arguments provided to function-like macro invocation\n   40 |         if (_mm_test_all_zeros(cmp)) return divisor;\n      |                                   ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1185:9: note: macro '_mm_test_all_zeros' defined here\n 1185 | #define _mm_test_all_zeros(M, V) _mm_testz_si128((M), (V))\n      |         ^\n[REDACTED]/tmp32sgqd6g.cpp:40:13: error: use of undeclared identifier '_mm_test_all_zeros'\n   40 |         if (_mm_test_all_zeros(cmp)) return divisor;\n      |             ^\n[REDACTED]/tmp32sgqd6g.cpp:40:45: error: cannot initialize return object of type 'uint64_t' (aka 'unsigned long') with an lvalue of type '__m128i' (vector of 2 'long long' values)\n   40 |         if (_mm_test_all_zeros(cmp)) return divisor;\n      |                                             ^~~~~~~\n5 errors generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkdwuy9tz.cpp:25:1: error: expected unqualified-id\n   25 | ```c\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpua_c4m3o.cpp:67:31: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   67 |             __m128i mod_vec = _mm_rem_epi32(n_vec, factors);\n      |                               ^~~~~~~~~~~~~\n      |                               _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpua_c4m3o.cpp:79:28: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   79 |                     factors.push_back(factor);\n      |                     ~~~~~~~^~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps081o9g7.cpp:66:31: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   66 |             __m128i rem_vec = _mm_rem_epi32(n_vec, div_vec);\n      |                               ^~~~~~~~~~~~~\n      |                               _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2rsusvbf.cpp:71:33: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   71 |             __m128i remainder = _mm_rem_epi32(n_vec, current_divisors);\n      |                                 ^~~~~~~~~~~~~\n      |                                 _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpews0a1w6.cpp:55:29: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   55 |         __m128i remainder = _mm_rem_epi32(n_vec, divisor); // Compute n % divisor for all lanes\n      |                             ^~~~~~~~~~~~~\n      |                             _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpews0a1w6.cpp:64:27: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   64 |                 int div = _mm_extract_epi32(divisor, i);\n      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqke4leqo.cpp:68:71: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   68 |             __m128i mod_result = _mm_sub_epi32(n_vec, _mm_mullo_epi32(_mm_div_epi32(n_vec, current_divisors), current_divisors));\n      |                                                                       ^~~~~~~~~~~~~\n      |                                                                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzyp3kl6y.cpp:44:27: error: use of undeclared identifier '_mm_rem_epi64'\n   44 |         __m128i vec_rem = _mm_rem_epi64(vec_n, vec_i);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmxxqh6uv.cpp:45:24: error: use of undeclared identifier '_mm_rem_epi64'\n   45 |         __m128i rem1 = _mm_rem_epi64(vec_n, vec_i);\n      |                        ^\n[REDACTED]/tmpmxxqh6uv.cpp:46:24: error: use of undeclared identifier '_mm_rem_epi64'\n   46 |         __m128i rem2 = _mm_rem_epi64(vec_n, vec_i2);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpas7x5gaq.cpp:45:24: error: use of undeclared identifier '_mm_rem_epi64'\n   45 |         __m128i rem1 = _mm_rem_epi64(vec_n, vec_i);\n      |                        ^\n[REDACTED]/tmpas7x5gaq.cpp:46:24: error: use of undeclared identifier '_mm_rem_epi64'\n   46 |         __m128i rem2 = _mm_rem_epi64(vec_n, vec_i2);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpotu8nnl2.cpp:43:27: error: use of undeclared identifier '_mm_rem_epi64'\n   43 |         __m128i vec_rem = _mm_rem_epi64(vec_n, vec_i);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpt6a2oqvy.cpp:42:27: error: use of undeclared identifier '_mm_rem_epi64'\n   42 |         __m128i vec_rem = _mm_rem_epi64(vec_n, vec_i);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_77_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpq_c1x3sk.cpp:46:25: error: argument to '__builtin_ia32_vec_set_v16qi' must be a constant integer\n   46 |                 div11 = _mm_insert_epi8(div11, i + j, j);\n      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:923:13: note: expanded from macro '_mm_insert_epi8'\n  923 |   ((__m128i)__builtin_ia32_vec_set_v16qi((__v16qi)(__m128i)(X), (int)(I),      \\\n      |             ^\n  924 |                                          (int)(N)))\n      |                                          ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgl_cz0ph.cpp:56:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'fizz_buzz_simd' that is compiled without support for 'popcnt'\n   56 |             count += _mm_popcnt_u32(mask);\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphsl7k6kt.cpp:49:25: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   49 |         __m128i mod11 = _mm_rem_epi32(numbers, eleven);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmphsl7k6kt.cpp:50:25: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   50 |         __m128i mod13 = _mm_rem_epi32(numbers, thirteen);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "runtime failed: free(): invalid pointer\n"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_82_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_82_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_82_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_82_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_82_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd24z37zb.cpp:55:33: error: use of undeclared identifier '_mm_rem_epi64'\n   55 |         __m128i remainder_vec = _mm_rem_epi64(x_vec, base_vec); // Compute remainder\n      |                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpokxcph2v.cpp:56:33: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   56 |         __m128i remainder_vec = _mm_rem_epi32(x_vec, base_vec);\n      |                                 ^~~~~~~~~~~~~\n      |                                 _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb7ad0mho.cpp:61:27: error: use of undeclared identifier '_mm_rem_epi64'\n   61 |         __m128i mod_vec = _mm_rem_epi64(x_vec, base_vec); // SIMD modulo operation\n      |                           ^\n[REDACTED]/tmpb7ad0mho.cpp:68:27: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   68 |         __m128i div_vec = _mm_div_epi64(x_vec, base_vec); // SIMD division operation\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbool8kke.cpp:57:30: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   57 |         __m128i div_result = _mm_div_epi64(x_vec, base_vec);\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmjdbvbzq.cpp:55:27: error: use of undeclared identifier '_mm_rem_epi64'\n   55 |         __m128i rem_vec = _mm_rem_epi64(x_vec, base_vec); // Compute remainder\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjfkakdsi.cpp:50:20: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   50 |         backward = _mm_shuffle_epi8(backward, _mm_set_epi8(\n      |                    ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpt1ebna4x.cpp:51:38: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   51 |         __m128i reversed_end_chunk = _mm_shuffle_epi8(end_chunk, _mm_set_epi8(\n      |                                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd4e3gb4i.cpp:49:21: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   49 |         end_chunk = _mm_shuffle_epi8(end_chunk, _mm_set_epi8(\n      |                     ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpa31tgz_l.cpp:51:19: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   51 |         end_vec = _mm_shuffle_epi8(end_vec, _mm_set_epi8(\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxcypc3vu.cpp:53:19: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   53 |         end_vec = _mm_shuffle_epi8(end_vec, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpekzl207q.cpp:50:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'decode_shift_simd' that is compiled without support for 'sse4.1'\n   50 |         __m128i result = _mm_blendv_epi8(shifted, adjusted, mask); // Select wrapped or original\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu48ilzxl.cpp:50:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'decode_shift_simd' that is compiled without support for 'sse4.1'\n   50 |         __m128i result = _mm_blendv_epi8(wrapped, shifted, mask); // Blend wrapped and shifted values\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnm12xuld.cpp:50:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'decode_shift_simd' that is compiled without support for 'sse4.1'\n   50 |         __m128i result = _mm_blendv_epi8(shifted, wrapped, mask); // Select wrapped or shifted value\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpn6hh8k4_.cpp:50:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   50 |         int opening_count = _mm_popcnt_u32(_mm_movemask_epi8(is_opening));\n      |                             ^\n[REDACTED]/tmpn6hh8k4_.cpp:51:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   51 |         int closing_count = _mm_popcnt_u32(_mm_movemask_epi8(is_closing));\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprio0zx8v.cpp:50:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   50 |         int opening_count = _mm_popcnt_u32(_mm_movemask_epi8(is_opening));\n      |                             ^\n[REDACTED]/tmprio0zx8v.cpp:51:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   51 |         int closing_count = _mm_popcnt_u32(_mm_movemask_epi8(is_closing));\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_90_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp70zy_eb2.cpp:58:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   58 |         int opening_count = _mm_popcnt_u32(_mm_movemask_epi8(is_opening));\n      |                             ^\n[REDACTED]/tmp70zy_eb2.cpp:59:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   59 |         int closing_count = _mm_popcnt_u32(_mm_movemask_epi8(is_closing));\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpko38tcme.cpp:55:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   55 |         int opening_count = _mm_popcnt_u32(_mm_movemask_epi8(is_opening));\n      |                             ^\n[REDACTED]/tmpko38tcme.cpp:56:29: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   56 |         int closing_count = _mm_popcnt_u32(_mm_movemask_epi8(is_closing));\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_91_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_91_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_91_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjsi6aban.cpp:29:1: error: expected unqualified-id\n   29 | ```cpp\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpi4b643_0.cpp:29:1: error: expected unqualified-id\n   29 | ```cpp\n      | ^\n[REDACTED]/tmpi4b643_0.cpp:43:27045: warning: missing terminating ' character [-Winvalid-pp-token]\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpp15vrx7h.cpp:44:29: error: no matching function for call to '_mm_cmpeq_epi8'\n   44 |             __m128i match = _mm_cmpeq_epi8(chunk, vowel_set1[j]);\n      |                             ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3023:46: note: candidate function not viable: no known conversion from 'long long' to '__m128i' (vector of 2 'long long' values) for 2nd argument\n 3023 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpeq_epi8(__m128i __a,\n      |                                              ^\n 3024 |                                                             __m128i __b) {\n      |                                                             ~~~~~~~~~~~\n[REDACTED]/tmpp15vrx7h.cpp:50:19: error: member reference base type 'const char[11]' is not a structure or union\n   50 |         if (vowels.find(s[i]) != std::string::npos) {\n      |             ~~~~~~^~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmes_zjly.cpp:29:1: error: expected unqualified-id\n   29 | ```cpp\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwew4xa9x.cpp:46:13: error: use of undeclared identifier '_mm_cmpge_epi8'; did you mean '_mm_cmpgt_epi8'?\n   46 |             _mm_cmpge_epi8(chunk, ascii_A), // chunk >= 'A'\n      |             ^~~~~~~~~~~~~~\n      |             _mm_cmpgt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3078:46: note: '_mm_cmpgt_epi8' declared here\n 3078 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpwew4xa9x.cpp:47:13: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   47 |             _mm_cmple_epi8(chunk, ascii_Z)  // chunk <= 'Z'\n      |             ^~~~~~~~~~~~~~\n      |             _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_93_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6dr7yo4n.cpp:61:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   61 |         min_val = _mm_min_epi32(min_val, even_values);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp94d0xgk3.cpp:79:28: error: use of undeclared identifier '_mm_cmpge_epi32'; did you mean '_mm_cmpgt_epi32'?\n   79 |         __m128i cmp_mask = _mm_cmpge_epi32(value_vec, key_vec);\n      |                            ^~~~~~~~~~~~~~~\n      |                            _mm_cmpgt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3120:46: note: '_mm_cmpgt_epi32' declared here\n 3120 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi32(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf7ryuimf.cpp:81:28: error: use of undeclared identifier '_mm_cmpge_epi32'; did you mean '_mm_cmpgt_epi32'?\n   81 |         __m128i cmp_mask = _mm_cmpge_epi32(value_vec, key_vec);\n      |                            ^~~~~~~~~~~~~~~\n      |                            _mm_cmpgt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3120:46: note: '_mm_cmpgt_epi32' declared here\n 3120 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi32(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph119k4a1.cpp:86:26: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'search_simd' that is compiled without support for 'sse4.1'\n   86 |         max_result_vec = _mm_max_epi32(max_result_vec, valid_keys);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9mfrixmu.cpp:61:13: error: use of undeclared identifier '_mm_movemask_epi32'; did you mean '_mm_movemask_epi8'?\n   61 |         if (_mm_movemask_epi32(cmp)!=0)continue;\n      |             ^~~~~~~~~~~~~~~~~~\n      |             _mm_movemask_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4204:42: note: '_mm_movemask_epi8' declared here\n 4204 | static __inline__ int __DEFAULT_FN_ATTRS _mm_movemask_epi8(__m128i __a) {\n      |                                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcqto8vm6.cpp:77:28: error: use of undeclared identifier '_mm_cmpge_epi32'; did you mean '_mm_cmpgt_epi32'?\n   77 |         __m128i cmp_mask = _mm_cmpge_epi32(value_vec, key_vec); // Compare values >= keys\n      |                            ^~~~~~~~~~~~~~~\n      |                            _mm_cmpgt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3120:46: note: '_mm_cmpgt_epi32' declared here\n 3120 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi32(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppt4j04qp.cpp:49:17: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   49 |         right = _mm_shuffle_epi8(right, _mm_set_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_96_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplokupw5j.cpp:64:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   64 |     __m128i temp = _mm_hadd_epi32(sum_vec, sum_vec);\n      |                    ^\n[REDACTED]/tmplokupw5j.cpp:65:12: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   65 |     temp = _mm_hadd_epi32(temp, temp);\n      |            ^\n2 errors generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsv33s24d.cpp:49:17: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   49 |         right = _mm_shuffle_epi8(right, _mm_set_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                 ^\n[REDACTED]/tmpsv33s24d.cpp:68:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   68 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n[REDACTED]/tmpsv33s24d.cpp:69:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   69 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n3 errors generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqga2l6ke.cpp:44:34: error: C-style cast from vector '__m128i' (vector of 2 'long long' values) to scalar 'int' of different size\n   44 |         __m128i reversed_right = _mm_shuffle_epi32(right, shuffle_mask);\n      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:57: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |                                                         ^~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzxr6rh38.cpp:44:17: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'smallest_change_simd' that is compiled without support for 'ssse3'\n   44 |         right = _mm_shuffle_epi8(right, _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbttvxekc.cpp:44:17: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'smallest_change_simd' that is compiled without support for 'ssse3'\n   44 |         right = _mm_shuffle_epi8(right, _mm_set_epi8(0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15));\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo8mli34l.cpp:44:17: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'smallest_change_simd' that is compiled without support for 'ssse3'\n   44 |         right = _mm_shuffle_epi8(right, _mm_set_epi8(0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15));\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0opyt88l.cpp:45:23: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i cmp = _mm_cmpeq_epi64(current, xval);\n      |                       ^\n[REDACTED]/tmp0opyt88l.cpp:48:34: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.2'\n   48 |         __m128i overflow_check = _mm_cmpgt_epi64(current, xval);\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0w54t71a.cpp:47:23: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   47 |         __m128i cmp = _mm_cmpeq_epi64(current_power, x_val);\n      |                       ^\n[REDACTED]/tmp0w54t71a.cpp:51:15: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.2'\n   51 |         cmp = _mm_cmpgt_epi64(current_power, x_val);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpq4vg67it.cpp:45:23: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i cmp = _mm_cmpeq_epi64(power, xval); // Compare power with x\n      |                       ^\n[REDACTED]/tmpq4vg67it.cpp:48:34: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.2'\n   48 |         __m128i overflow_check = _mm_cmpgt_epi64(power, xval); // Check if power > x\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6reuj9re.cpp:45:23: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i cmp = _mm_cmpeq_epi64(result, xval); // Compare result with x\n      |                       ^\n[REDACTED]/tmp6reuj9re.cpp:47:34: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.2'\n   47 |         __m128i overflow_check = _mm_cmpgt_epi64(result, xval); // Check overflow\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqcn00acw.cpp:47:23: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   47 |         __m128i cmp = _mm_cmpeq_epi64(current, x_val);\n      |                       ^\n[REDACTED]/tmpqcn00acw.cpp:53:15: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.2'\n   53 |         cmp = _mm_cmpgt_epi64(current, x_val);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjckoffi0.cpp:47:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   47 |             count += _mm_popcnt_u32(_mm_movemask_epi8(cmp_result));\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp265v51jn.cpp:52:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   52 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp453p81xz.cpp:52:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   52 |             count += _mm_popcnt_u32(_mm_movemask_epi8(cmp));\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_l0gqb4i.cpp:49:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   49 |             count += _mm_popcnt_u32(_mm_movemask_epi8(cmp_result));\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8rqpy3ep.cpp:46:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   46 |             count += _mm_popcnt_u32(_mm_movemask_epi8(cmp));\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpyupulv1x.cpp:43:27: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   43 |         __m128i vec_div = _mm_div_epi32(vec_length, vec_i);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp91b7fdik.cpp:43:27: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   43 |         __m128i vec_rem = _mm_rem_epi32(vec_length, vec_i);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpezu1qi_u.cpp:43:27: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   43 |         __m128i vec_rem = _mm_rem_epi32(vec_length, vec_i);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0m9ktf3a.cpp:43:33: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   43 |         __m128i remainder_vec = _mm_rem_epi32(len_vec, divisor_vec);\n      |                                 ^~~~~~~~~~~~~\n      |                                 _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8qi9opf5.cpp:45:33: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   45 |         __m128i remainder_vec = _mm_rem_epi32(len_vec, divisor_vec);\n      |                                 ^~~~~~~~~~~~~\n      |                                 _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpklr7pfj4.cpp:41:46: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [-Wformat]\n   41 |     snprintf(numStr, sizeof(numStr), \"%llu\", N);\n      |                                       ~~~~   ^\n      |                                       %lu\n[REDACTED]/tmpklr7pfj4.cpp:63:14: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   63 |     sumVec = _mm_hadd_epi32(sumVec, sumVec);\n      |              ^\n[REDACTED]/tmpklr7pfj4.cpp:64:14: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   64 |     sumVec = _mm_hadd_epi32(sumVec, sumVec);\n      |              ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnxr_7etp.cpp:41:46: warning: format specifies type 'unsigned long long' but the argument has type 'uint64_t' (aka 'unsigned long') [-Wformat]\n   41 |     snprintf(buffer, sizeof(buffer), \"%llu\", N);\n      |                                       ~~~~   ^\n      |                                       %lu\n[REDACTED]/tmpnxr_7etp.cpp:53:26: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   53 |     __m128i sum_vector = _mm_hadd_epi16(digit_vector, digit_vector);\n      |                          ^\n[REDACTED]/tmpnxr_7etp.cpp:54:18: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   54 |     sum_vector = _mm_hadd_epi16(sum_vector, sum_vector);\n      |                  ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgtdaiyso.cpp:62:27: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   62 |         __m128i vec_sum = _mm_hadd_epi32(vec_digits, vec_digits);\n      |                           ^\n[REDACTED]/tmpgtdaiyso.cpp:63:19: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   63 |         vec_sum = _mm_hadd_epi32(vec_sum, vec_sum);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc03trdc9.cpp:39:28: error: no matching function for call to '_mm_add_epi32'\n   39 |         __m128i filtered = _mm_add_epi32(mask,lst);\n      |                            ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2058:46: note: candidate function not viable: no known conversion from 'std::vector<int>' to '__m128i' (vector of 2 'long long' values) for 2nd argument\n 2058 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_add_epi32(__m128i __a,\n      |                                              ^\n 2059 |                                                            __m128i __b) {\n      |                                                            ~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpn93j746u.cpp:43:12: error: use of undeclared identifier '_mm_sum_epi32'\n   43 |     return _mm_sum_epi32(sum);\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_105_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxit__0we.cpp:62:19: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   62 |         rotated = _mm_blendv_epi8(rotated, wrapped, needs_wrap);\n      |                   ^\n[REDACTED]/tmpxit__0we.cpp:65:31: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   65 |         __m128i final_chunk = _mm_blendv_epi8(chunk, rotated, is_alpha);\n      |                               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0a_t7eae.cpp:56:35: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'encode_simd' that is compiled without support for 'ssse3'\n   56 |         __m128i replaced_vowels = _mm_shuffle_epi8(vowel_replacements, vowel_mask);\n      |                                   ^\n[REDACTED]/tmp0a_t7eae.cpp:59:31: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encode_simd' that is compiled without support for 'sse4.1'\n   59 |         __m128i final_chunk = _mm_blendv_epi8(swapped_case, replaced_vowels, vowel_mask);\n      |                               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpa795sgwe.cpp:56:33: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encode_simd' that is compiled without support for 'sse4.1'\n   56 |         __m128i encoded_chunk = _mm_blendv_epi8(toggled_case, shifted_vowels, is_vowel);\n      |                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_107_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdl402i54.cpp:66:48: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   66 |                 __m128i mask = _mm_cmpeq_epi32(_mm_rem_epi32(vec_j, vec_i), vec_mod);\n      |                                                ^~~~~~~~~~~~~\n      |                                                _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1uc0u0sr.cpp:61:34: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   61 |             __m128i remainders = _mm_rem_epi32(numbers, divisor);\n      |                                  ^~~~~~~~~~~~~\n      |                                  _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwcno7ghs.cpp:63:31: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'count_up_to_simd' that is compiled without support for 'sse4.1'\n   63 |                 __m128i mod = _mm_mullo_epi32(vec_i, vec_j);\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpv1yci1da.cpp:66:52: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   66 |                 __m128i vec_mask = _mm_cmpeq_epi32(_mm_rem_epi32(vec_j, vec_i), _mm_setzero_si128());\n      |                                                    ^~~~~~~~~~~~~\n      |                                                    _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpw_9r9o6e.cpp:44:15: error: assigning to 'int' from incompatible type '__m128i' (vector of 2 'long long' values)\n   44 |         count += _mm_popcnt_epi8(mask);\n      |               ^  ~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpz2_aqjav.cpp:42:15: error: assigning to 'int' from incompatible type '__m128i' (vector of 2 'long long' values)\n   42 |         count += _mm_popcnt_epi8(result);\n      |               ^  ~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpurc7dbi4.cpp:45:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_upper_simd' that is compiled without support for 'popcnt'\n   45 |         count += _mm_popcnt_u32(_mm_movemask_epi8(cmp));\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplm3d_v74.cpp:45:15: error: assigning to 'int' from incompatible type '__m128i' (vector of 2 'long long' values)\n   45 |         count += _mm_popcnt_epi8(matches);\n      |               ^  ~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwvehhjku.cpp:40:61: error: expected ';' after expression\n   40 |         _mm_storeu_si128((__m128i*)&result[i],current_level)\n      |                                                             ^\n      |                                                             ;\n[REDACTED]/tmpwvehhjku.cpp:41:33: error: expected ';' after expression\n   41 |         current_level+=increment\n      |                                 ^\n      |                                 ;\n2 errors generated.\n"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo8uky0ew.cpp:63:58: error: expected ';' after expression\n   63 |             factorials = _mm_mullo_epi32(factorials,temp)\n      |                                                          ^\n      |                                                          ;\n1 error generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpx31qslzt.cpp:65:22: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   65 |         factorials = _mm_rem_epi32(factorials, mod_val); // Apply modulo 10,000 to factorials\n      |                      ^~~~~~~~~~~~~\n      |                      _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1plx1trj.cpp:61:25: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   61 |             factorial = _mm_rem_epi32(factorial, mod_val);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmp1plx1trj.cpp:67:38: error: use of undeclared identifier 'current'\n   67 |             sum = _mm_add_epi32(sum, current);\n      |                                      ^\n2 errors generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphuh0b6q2.cpp:68:56: error: expected ';' after expression\n   68 |             factorial = _mm_and_si128(factorial,modulo)\n      |                                                        ^\n      |                                                        ;\n1 error generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdsk0iqgo.cpp:66:25: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   66 |             factorial = _mm_rem_epi32(factorial, mod_val); // Apply modulo\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1lha8ju8.cpp:47:23: error: use of undeclared identifier 'reverse_number'\n   47 |             (i + 3 == reverse_number(i + 3)) ? 1 : 0,\n      |                       ^\n[REDACTED]/tmp1lha8ju8.cpp:48:23: error: use of undeclared identifier 'reverse_number'\n   48 |             (i + 2 == reverse_number(i + 2)) ? 1 : 0,\n      |                       ^\n[REDACTED]/tmp1lha8ju8.cpp:49:23: error: use of undeclared identifier 'reverse_number'\n   49 |             (i + 1 == reverse_number(i + 1)) ? 1 : 0,\n      |                       ^\n[REDACTED]/tmp1lha8ju8.cpp:50:19: error: use of undeclared identifier 'reverse_number'\n   50 |             (i == reverse_number(i)) ? 1 : 0\n      |                   ^\n4 errors generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9bxy89gq.cpp:59:23: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   59 |             int num = _mm_extract_epi32(numbers, j);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmp9bxy89gq.cpp:61:24: error: argument to '__builtin_ia32_vec_set_v4si' must be a constant integer\n   61 |                 mask = _mm_insert_epi32(mask, 1, j); // Mark as palindrome\n      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbhf9_4an.cpp:56:23: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   56 |             int num = _mm_extract_epi32(numbers, j);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_113_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg88euaga.cpp:63:29: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   63 |             __m128i mod10 = _mm_rem_epi32(abs_vec, _mm_set1_epi32(10));\n      |                             ^~~~~~~~~~~~~\n      |                             _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpg88euaga.cpp:65:23: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   65 |             abs_vec = _mm_div_epi32(abs_vec, _mm_set1_epi32(10));\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsqv2bjvv.cpp:62:27: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   62 |             __m128i mod = _mm_rem_epi32(abs_vec, _mm_set1_epi32(10));\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpsqv2bjvv.cpp:64:23: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   64 |             abs_vec = _mm_div_epi32(abs_vec, _mm_set1_epi32(10));\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmp9m58oz.cpp:61:27: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   61 |             __m128i mod = _mm_rem_epi32(abs_vec, _mm_set1_epi32(10));\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpmp9m58oz.cpp:63:23: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   63 |             abs_vec = _mm_div_epi32(abs_vec, _mm_set1_epi32(10));\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpl8_spqp9.cpp:61:29: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   61 |             __m128i digit = _mm_rem_epi32(abs_vec, _mm_set1_epi32(10));\n      |                             ^~~~~~~~~~~~~\n      |                             _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpl8_spqp9.cpp:63:23: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   63 |             abs_vec = _mm_div_epi32(abs_vec, _mm_set1_epi32(10));\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprz1b0nwo.cpp:59:30: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   59 |             __m128i digits = _mm_rem_epi32(abs_nums, _mm_set1_epi32(10));\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmprz1b0nwo.cpp:61:24: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   61 |             abs_nums = _mm_div_epi32(abs_nums, _mm_set1_epi32(10));\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_vp0egae.cpp:57:14: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'myexchange_simd' that is compiled without support for 'sse4.1'\n   57 |         if (!_mm_test_all_zeros(odd_mask, odd_mask)) {\n      |              ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1185:34: note: expanded from macro '_mm_test_all_zeros'\n 1185 | #define _mm_test_all_zeros(M, V) _mm_testz_si128((M), (V))\n      |                                  ^\n[REDACTED]/tmp_vp0egae.cpp:72:13: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'myexchange_simd' that is compiled without support for 'sse4.1'\n   72 |         if (_mm_test_all_zeros(odd_mask, odd_mask)) {\n      |             ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1185:34: note: expanded from macro '_mm_test_all_zeros'\n 1185 | #define _mm_test_all_zeros(M, V) _mm_testz_si128((M), (V))\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgrizd84b.cpp:85:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   85 |             odd_count += _mm_popcnt_u32(_mm_movemask_epi8(odd_mask));\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu0p_5ckb.cpp:91:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   91 |             odd_count += _mm_popcnt_u32(_mm_movemask_epi8(odd_mask));\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy8d76yau.cpp:74:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   74 |             odd_count += _mm_popcnt_u32(_mm_movemask_epi8(odd_flags));\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf75b58ky.cpp:49:19: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   49 |         min_sum = _mm_min_epi64(min_sum, current_sum);\n      |                   ^\n[REDACTED]/tmpf75b58ky.cpp:53:24: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'sse4.2'\n   53 |         __m128i mask = _mm_cmpgt_epi64(current_sum, zero);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptnv_du_f.cpp:60:27: warning: variable length arrays in C++ are a Clang extension [-Wvla-cxx-extension]\n   60 |     int64_t min_sum_array[simd_width];\n      |                           ^~~~~~~~~~\n[REDACTED]/tmptnv_du_f.cpp:60:27: note: read of non-const variable 'simd_width' is not allowed in a constant expression\n[REDACTED]/tmptnv_du_f.cpp:42:12: note: declared here\n   42 |     size_t simd_width = 2; // SSE2 processes two 64-bit integers at a time\n      |            ^\n[REDACTED]/tmptnv_du_f.cpp:51:19: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   51 |         min_sum = _mm_min_epi64(min_sum, current_sum);\n      |                   ^\n[REDACTED]/tmptnv_du_f.cpp:55:24: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'sse4.2'\n   55 |         __m128i mask = _mm_cmpgt_epi64(current_sum, zero);\n      |                        ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp56t8ljdq.cpp:51:22: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   51 |         global_min = _mm_min_epi64(global_min, current_min);\n      |                      ^\n[REDACTED]/tmp56t8ljdq.cpp:55:24: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'sse4.2'\n   55 |         __m128i mask = _mm_cmpgt_epi64(current_min, zero);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5k3xomx3.cpp:51:23: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   51 |         current_min = _mm_min_epi64(current_min, current_sum);\n      |                       ^\n[REDACTED]/tmp5k3xomx3.cpp:52:23: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   52 |         current_sum = _mm_min_epi64(current_sum, _mm_setzero_si128());\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpn_bvkque.cpp:51:22: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   51 |         global_min = _mm_min_epi64(global_min, current_min);\n      |                      ^\n[REDACTED]/tmpn_bvkque.cpp:55:24: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'sse4.2'\n   55 |         __m128i mask = _mm_cmpgt_epi64(current_min, zero);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_119_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_119_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_119_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_119_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_119_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpx6fmpv50.cpp:43:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   43 |         __m128i abs_data = _mm_abs_epi32(data); // Take absolute value\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpulani4fx.cpp:42:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i abs_vec = _mm_abs_epi32(vec); // Get absolute values\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbnh3669a.cpp:42:30: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i abs_values = _mm_abs_epi32(values);\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwoz6w08j.cpp:47:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   47 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n[REDACTED]/tmpwoz6w08j.cpp:56:27: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   56 |         __m128i sum_vec = _mm_hadd_epi32(filtered, zero);\n      |                           ^\n[REDACTED]/tmpwoz6w08j.cpp:57:19: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   57 |         sum_vec = _mm_hadd_epi32(sum_vec, zero);\n      |                   ^\n3 errors generated.\n"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5_zsmlcp.cpp:51:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   51 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvyyp_fuk.cpp:49:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   49 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf3lqno78.cpp:50:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   50 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n[REDACTED]/tmpf3lqno78.cpp:54:25: error: always_inline function '_mm_sign_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   54 |         __m128i signs = _mm_sign_epi32(_mm_set1_epi32(1), vec);\n      |                         ^\n[REDACTED]/tmpf3lqno78.cpp:55:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   55 |         product_signs = _mm_mullo_epi32(product_signs, signs);\n      |                         ^\n3 errors generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp49p8ixy5.cpp:48:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   48 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n[REDACTED]/tmp49p8ixy5.cpp:56:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   56 |         product_signs = _mm_mullo_epi32(product_signs, sign_values);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6m8m2_zu.cpp:48:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   48 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n[REDACTED]/tmp6m8m2_zu.cpp:54:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   54 |         product_signs = _mm_mullo_epi32(product_signs, signs);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjnjw6ruj.cpp:98:35: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   98 |                         min_val = _mm_min_epi32(min_val, current_val);\n      |                                   ^\n[REDACTED]/tmpjnjw6ruj.cpp:120:26: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n  120 |             global_min = _mm_min_epi32(global_min, current_val);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbca74vv4.cpp:90:33: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   90 |                     minValues = _mm_min_epi32(minValues, combined);\n      |                                 ^\n[REDACTED]/tmpbca74vv4.cpp:96:33: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   96 |                     minValues = _mm_min_epi32(minValues, combined);\n      |                                 ^\n[REDACTED]/tmpbca74vv4.cpp:102:33: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n  102 |                     minValues = _mm_min_epi32(minValues, combined);\n      |                                 ^\n[REDACTED]/tmpbca74vv4.cpp:108:33: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n  108 |                     minValues = _mm_min_epi32(minValues, combined);\n      |                                 ^\n4 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr9pmi7a8.cpp:92:46: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   92 |                             currentCellVec = _mm_min_epi32(currentCellVec, sumVec);\n      |                                              ^\n[REDACTED]/tmpr9pmi7a8.cpp:104:26: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n  104 |             minPathVec = _mm_min_epi32(minPathVec, pathVec);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvyq96m9c.cpp:74:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   74 |         product = _mm_mullo_epi32(product, odd_digits_lo);\n      |                   ^\n[REDACTED]/tmpvyq96m9c.cpp:75:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   75 |         product = _mm_mullo_epi32(product, odd_digits_hi);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo96_s9u7.cpp:65:13: error: argument to '__builtin_ia32_vec_ext_v8hi' must be a constant integer\n   65 |         if (_mm_extract_epi16(vec_is_odd, i) != 0) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4161:25: note: expanded from macro '_mm_extract_epi16'\n 4161 |   ((int)(unsigned short)__builtin_ia32_vec_ext_v8hi((__v8hi)(__m128i)(a),      \\\n      |                         ^\n 4162 |                                                     (int)(imm)))\n      |                                                     ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg_j_9yjs.cpp:51:19: error: no matching function for call to '_mm_set_epi64x'\n   51 |     __m128i vec = _mm_set_epi64x(digits[4] | (digits[5] << 8) | (digits[6] << 16) | (digits[7] << 24) );\n      |                   ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3426:46: note: candidate function not viable: requires 2 arguments, but 1 was provided\n 3426 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi64x(long long __q1,\n      |                                              ^              ~~~~~~~~~~~~~~~\n 3427 |                                                             long long __q0) {\n      |                                                             ~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppr0msv8z.cpp:32:1: error: expected unqualified-id\n   32 | ```c\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdqa0cvdh.cpp:38:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   38 |         __m128 ceil_vec = _mm_ceil_ps(vec); // Apply ceiling\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpdqa0cvdh.cpp:58:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   58 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:58:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   58 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:59:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   59 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:59:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   59 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:60:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   60 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:60:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   60 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:61:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   61 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:61:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   61 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:62:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   62 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:62:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   62 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpdqa0cvdh.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpdqa0cvdh.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbf08hldu.cpp:43:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         __m128 ceil_vec = _mm_ceil_ps(vec);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpbf08hldu.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:75:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   75 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:75:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   75 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:76:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   76 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:76:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   76 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:77:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   77 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:77:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   77 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpbf08hldu.cpp:78:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   78 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpbf08hldu.cpp:78:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   78 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpz71l3b9o.cpp:38:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   38 |         __m128 ceil_vec = _mm_ceil_ps(vec); // Apply ceiling to each element\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpz71l3b9o.cpp:58:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   58 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:58:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   58 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:59:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   59 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:59:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   59 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:60:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   60 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:60:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   60 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:61:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   61 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:61:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   61 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:62:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   62 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:62:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   62 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpz71l3b9o.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpz71l3b9o.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2bkplcrm.cpp:41:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   41 |         __m128 ceil_vec = _mm_ceil_ps(vec);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp2bkplcrm.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp2bkplcrm.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmp2bkplcrm.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpiyftvcby.cpp:38:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   38 |         __m128 ceil_vec = _mm_ceil_ps(vec); // Apply ceiling to each element\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpiyftvcby.cpp:58:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   58 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:58:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   58 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:59:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   59 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:59:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   59 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:60:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   60 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:60:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   60 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:61:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   61 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:61:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   61 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:62:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   62 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:62:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   62 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpiyftvcby.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpiyftvcby.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvf2iu5os.cpp:46:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   46 |         if (cmp) result = i;\n      |             ^~~\n1 error generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpto5aps_e.cpp:51:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   51 |         max_neg = _mm_max_epi32(max_neg, neg_values);\n      |                   ^\n[REDACTED]/tmpto5aps_e.cpp:56:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   56 |         min_pos = _mm_min_epi32(min_pos, pos_values);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9xoidj4u.cpp:53:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   53 |         largest_neg = _mm_max_epi32(largest_neg, neg_values);\n      |                       ^\n[REDACTED]/tmp9xoidj4u.cpp:57:24: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   57 |         smallest_pos = _mm_min_epi32(smallest_pos, pos_values);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3_y7ny44.cpp:54:28: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   54 |         largest_negative = _mm_max_epi32(largest_negative, negative_values);\n      |                            ^\n[REDACTED]/tmp3_y7ny44.cpp:55:29: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   55 |         smallest_positive = _mm_min_epi32(smallest_positive, positive_values);\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4wcyg8zf.cpp:52:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   52 |         largest_neg = _mm_max_epi32(largest_neg, neg_values);\n      |                       ^\n[REDACTED]/tmp4wcyg8zf.cpp:57:24: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   57 |         smallest_pos = _mm_min_epi32(smallest_pos, pos_values);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdccs1rcn.cpp:52:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   52 |         max_neg = _mm_max_epi32(max_neg, neg_values);\n      |                   ^\n[REDACTED]/tmpdccs1rcn.cpp:57:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   57 |         min_pos = _mm_min_epi32(min_pos, pos_values);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpigbu6qnv.cpp:44:45: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   44 |         __m128i mod3_mask = _mm_cmpeq_epi32(_mm_rem_epi32(indices, _mm_set1_epi32(3)), _mm_setzero_si128());\n      |                                             ^~~~~~~~~~~~~\n      |                                             _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpigbu6qnv.cpp:46:29: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   46 |             _mm_cmpeq_epi32(_mm_rem_epi32(indices, _mm_set1_epi32(4)), _mm_setzero_si128()),\n      |                             ^~~~~~~~~~~~~\n      |                             _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpz3tfbqh3.cpp:49:24: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   49 |         __m128i mod3 = _mm_rem_epi32(indices, three); // indices % 3\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpz3tfbqh3.cpp:50:24: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   50 |         __m128i mod4 = _mm_rem_epi32(indices, four);  // indices % 4\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4shyu9gy.cpp:47:24: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   47 |         __m128i mod3 = _mm_rem_epi32(indices, three);\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmp4shyu9gy.cpp:48:24: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   48 |         __m128i mod4 = _mm_rem_epi32(indices, four);\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfistzdmg.cpp:47:31: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   47 |         __m128i mod3_result = _mm_rem_epi32(indices, mod3); // indices % 3\n      |                               ^~~~~~~~~~~~~\n      |                               _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpfistzdmg.cpp:52:31: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   52 |         __m128i mod4_result = _mm_rem_epi32(indices, mod4); // indices % 4\n      |                               ^~~~~~~~~~~~~\n      |                               _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2916a06y.cpp:46:45: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   46 |         __m128i mod3_mask = _mm_cmpeq_epi32(_mm_rem_epi32(indices, _mm_set1_epi32(3)), _mm_setzero_si128());\n      |                                             ^~~~~~~~~~~~~\n      |                                             _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmp2916a06y.cpp:47:73: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   47 |         __m128i mod4_mask = _mm_andnot_si128(mod3_mask, _mm_cmpeq_epi32(_mm_rem_epi32(indices, _mm_set1_epi32(4)), _mm_setzero_si128()));\n      |                                                                         ^~~~~~~~~~~~~\n      |                                                                         _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu7bu9ngc.cpp:59:67: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   59 |         __m128i lastDigit = _mm_sub_epi32(absVec, _mm_mullo_epi32(_mm_div_epi32(absVec, ten), ten));\n      |                                                                   ^~~~~~~~~~~~~\n      |                                                                   _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpu7bu9ngc.cpp:65:26: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   65 |             firstDigit = _mm_div_epi32(firstDigit, ten);\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4cl6zcam.cpp:52:31: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   52 |         __m128i first_digit = _mm_div_epi32(abs_vec, _mm_set1_epi32(1000000000)); // Divide by 10^9 (assuming max 10 digits)\n      |                               ^~~~~~~~~~~~~\n      |                               _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp4cl6zcam.cpp:53:30: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   53 |         __m128i last_digit = _mm_rem_epi32(abs_vec, _mm_set1_epi32(10)); // Modulo 10\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6r59n646.cpp:59:39: error: use of undeclared identifier 'odd'\n   59 |             if (num > 10 && num%10%2==odd)\n      |                                       ^\n[REDACTED]/tmp6r59n646.cpp:60:9: error: expected statement\n   60 |         }\n      |         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkvzg9qtu.cpp:53:29: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   53 |             __m128i div10 = _mm_div_epi32(firstDigit,ten)\n      |                             ^~~~~~~~~~~~~\n      |                             _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpkvzg9qtu.cpp:53:58: error: expected ';' at end of declaration\n   53 |             __m128i div10 = _mm_div_epi32(firstDigit,ten)\n      |                                                          ^\n      |                                                          ;\n2 errors generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvz4a5b75.cpp:78:29: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'get_max_triples_simd' that is compiled without support for 'sse4.1'\n   78 |         __m128i i_squared = _mm_mullo_epi32(i_vec, i_vec);\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmploj40ccf.cpp:91:30: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   91 |         __m128i remainders = _mm_rem_epi32(values, mod3);\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmploj40ccf.cpp:94:23: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   94 |             int rem = _mm_extract_epi32(remainders, j);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplg29jp9w.cpp:87:26: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'get_max_triples_simd' that is compiled without support for 'sse4.1'\n   87 |         __m128i idx_sq = _mm_mullo_epi32(idx, idx); // idx * idx\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd0p0schd.cpp:80:29: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'get_max_triples_simd' that is compiled without support for 'sse4.1'\n   80 |         __m128i i_squared = _mm_mullo_epi32(i_vec, i_vec);\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdj2yfpt5.cpp:90:18: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'get_max_triples_simd' that is compiled without support for 'sse4.1'\n   90 |         result = _mm_mullo_epi32(idx, idx);  // idx * idx\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps3jg34dc.cpp:46:27: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   46 |     __m128i mod_results = _mm_rem_epi32(n_vec, vec);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxmv0133q.cpp:46:27: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   46 |     __m128i mod_results = _mm_rem_epi32(n_vec, vec);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpe93yx_i6.cpp:36:17: error: C-style cast from vector '__m128' (vector of 4 'float' values) to scalar 'int' of different size\n   36 |     int limit = (int)_mm_sqrt_ss(_mm_set_ss((float)n));\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpe93yx_i6.cpp:43:26: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   43 |     __m128i mod_result = _mm_rem_epi32(n_vec, vec);\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg4aj7mfn.cpp:38:18: error: C-style cast from vector '__m128' (vector of 4 'float' values) to scalar 'int' of different size\n   38 |     int sqrt_n = (int)_mm_sqrt_ss(_mm_set_ss((float)n));\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpg4aj7mfn.cpp:41:13: error: redefinition of 'vec'\n   41 |     __m128i vec = _mm_set_epi32(2, 3, 4, 5);\n      |             ^\n[REDACTED]/tmpg4aj7mfn.cpp:40:13: note: previous definition is here\n   40 |     __m128i vec = _mm_set_epi32(2, 3, 4, 5);\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0nobuu_l.cpp:45:28: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   45 |         __m128 truncated = _mm_floor_ps(input);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:140:25: note: expanded from macro '_mm_floor_ps'\n  140 | #define _mm_floor_ps(X) _mm_round_ps((X), _MM_FROUND_FLOOR)\n      |                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp0nobuu_l.cpp:51:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i squared = _mm_mullo_epi32(integers, integers);\n      |                           ^\n[REDACTED]/tmp0nobuu_l.cpp:54:23: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'ssse3'\n   54 |         __m128i sum = _mm_hadd_epi32(valid_squares, zero_int);\n      |                       ^\n[REDACTED]/tmp0nobuu_l.cpp:55:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'ssse3'\n   55 |         sum = _mm_hadd_epi32(sum, zero_int);\n      |               ^\n4 errors generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0_vbn3u5.cpp:46:73: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   46 |         __m128 mask_odd = _mm_and_ps(_mm_cmpeq_ps(_mm_sub_ps(vec_float, _mm_floor_ps(vec_float)), _mm_set1_ps(1.0f)), mask_integer); // Odd mask\n      |                                                                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:140:25: note: expanded from macro '_mm_floor_ps'\n  140 | #define _mm_floor_ps(X) _mm_round_ps((X), _MM_FROUND_FLOOR)\n      |                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjsklhn6z.cpp:44:35: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |         __m128 truncated_values = _mm_floor_ps(values);\n      |                                   ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:140:25: note: expanded from macro '_mm_floor_ps'\n  140 | #define _mm_floor_ps(X) _mm_round_ps((X), _MM_FROUND_FLOOR)\n      |                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpjsklhn6z.cpp:53:34: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   53 |         __m128i squared_values = _mm_mullo_epi32(int_values, int_values);\n      |                                  ^\n[REDACTED]/tmpjsklhn6z.cpp:56:23: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'ssse3'\n   56 |         __m128i sum = _mm_hadd_epi32(masked_squares, zero_int);\n      |                       ^\n[REDACTED]/tmpjsklhn6z.cpp:57:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'ssse3'\n   57 |         sum = _mm_hadd_epi32(sum, zero_int);\n      |               ^\n4 errors generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuxwfxivh.cpp:52:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i squared = _mm_mullo_epi32(int_values, int_values);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4c2ez4sd.cpp:40:32: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   40 |         __m128i abs_diff_vec = _mm_abs_epi32(diff_vec);\n      |                                ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkdlgs2fm.cpp:42:32: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i abs_diff_vec = _mm_abs_epi32(diff_vec);\n      |                                ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpliqzoq01.cpp:40:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   40 |         __m128i abs_diff = _mm_abs_epi32(diff);                  // Compute absolute difference\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgo7xlhwj.cpp:42:32: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i abs_diff_vec = _mm_abs_epi32(diff_vec);\n      |                                ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9_hcabcp.cpp:40:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   40 |         __m128i abs_diff = _mm_abs_epi32(diff);\n      |                            ^\n1 error generated.\n"}

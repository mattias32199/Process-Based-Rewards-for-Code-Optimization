{"task_id": "SimdBench_0", "passed": true, "result": "passed"}
{"task_id": "SimdBench_0", "passed": true, "result": "passed"}
{"task_id": "SimdBench_0", "passed": true, "result": "passed"}
{"task_id": "SimdBench_0", "passed": true, "result": "passed"}
{"task_id": "SimdBench_0", "passed": true, "result": "passed"}
{"task_id": "SimdBench_1", "passed": true, "result": "passed"}
{"task_id": "SimdBench_1", "passed": true, "result": "passed"}
{"task_id": "SimdBench_1", "passed": true, "result": "passed"}
{"task_id": "SimdBench_1", "passed": true, "result": "passed"}
{"task_id": "SimdBench_1", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2", "passed": true, "result": "passed"}
{"task_id": "SimdBench_2", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3", "passed": true, "result": "passed"}
{"task_id": "SimdBench_3", "passed": true, "result": "passed"}
{"task_id": "SimdBench_4", "passed": true, "result": "passed"}
{"task_id": "SimdBench_4", "passed": true, "result": "passed"}
{"task_id": "SimdBench_4", "passed": true, "result": "passed"}
{"task_id": "SimdBench_4", "passed": true, "result": "passed"}
{"task_id": "SimdBench_4", "passed": true, "result": "passed"}
{"task_id": "SimdBench_5", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6", "passed": true, "result": "passed"}
{"task_id": "SimdBench_6", "passed": true, "result": "passed"}
{"task_id": "SimdBench_6", "passed": true, "result": "passed"}
{"task_id": "SimdBench_6", "passed": true, "result": "passed"}
{"task_id": "SimdBench_6", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10", "passed": true, "result": "passed"}
{"task_id": "SimdBench_11", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_11", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_11", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_11", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_11", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_12", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12", "passed": true, "result": "passed"}
{"task_id": "SimdBench_13", "passed": true, "result": "passed"}
{"task_id": "SimdBench_13", "passed": true, "result": "passed"}
{"task_id": "SimdBench_13", "passed": true, "result": "passed"}
{"task_id": "SimdBench_13", "passed": true, "result": "passed"}
{"task_id": "SimdBench_13", "passed": true, "result": "passed"}
{"task_id": "SimdBench_14", "passed": true, "result": "passed"}
{"task_id": "SimdBench_14", "passed": true, "result": "passed"}
{"task_id": "SimdBench_14", "passed": true, "result": "passed"}
{"task_id": "SimdBench_14", "passed": true, "result": "passed"}
{"task_id": "SimdBench_14", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17", "passed": true, "result": "passed"}
{"task_id": "SimdBench_18", "passed": true, "result": "passed"}
{"task_id": "SimdBench_18", "passed": true, "result": "passed"}
{"task_id": "SimdBench_18", "passed": true, "result": "passed"}
{"task_id": "SimdBench_18", "passed": true, "result": "passed"}
{"task_id": "SimdBench_18", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20", "passed": true, "result": "passed"}
{"task_id": "SimdBench_21", "passed": true, "result": "passed"}
{"task_id": "SimdBench_21", "passed": true, "result": "passed"}
{"task_id": "SimdBench_21", "passed": true, "result": "passed"}
{"task_id": "SimdBench_21", "passed": true, "result": "passed"}
{"task_id": "SimdBench_21", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23", "passed": true, "result": "passed"}
{"task_id": "SimdBench_24", "passed": true, "result": "passed"}
{"task_id": "SimdBench_24", "passed": true, "result": "passed"}
{"task_id": "SimdBench_24", "passed": true, "result": "passed"}
{"task_id": "SimdBench_24", "passed": true, "result": "passed"}
{"task_id": "SimdBench_24", "passed": true, "result": "passed"}
{"task_id": "SimdBench_25", "passed": true, "result": "passed"}
{"task_id": "SimdBench_25", "passed": true, "result": "passed"}
{"task_id": "SimdBench_25", "passed": true, "result": "passed"}
{"task_id": "SimdBench_25", "passed": true, "result": "passed"}
{"task_id": "SimdBench_25", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30", "passed": true, "result": "passed"}
{"task_id": "SimdBench_31", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_32", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33", "passed": true, "result": "passed"}
{"task_id": "SimdBench_34", "passed": true, "result": "passed"}
{"task_id": "SimdBench_34", "passed": true, "result": "passed"}
{"task_id": "SimdBench_34", "passed": true, "result": "passed"}
{"task_id": "SimdBench_34", "passed": true, "result": "passed"}
{"task_id": "SimdBench_34", "passed": true, "result": "passed"}
{"task_id": "SimdBench_35", "passed": false, "result": "compilation failed: [REDACTED]/tmpk86v8jzc.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpk86v8jzc.cpp:20:3: note: previous definition is here\n   20 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35", "passed": false, "result": "compilation failed: [REDACTED]/tmplth_4i5j.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmplth_4i5j.cpp:20:3: note: previous definition is here\n   20 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35", "passed": false, "result": "compilation failed: [REDACTED]/tmplxjr5bb9.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmplxjr5bb9.cpp:20:3: note: previous definition is here\n   20 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35", "passed": false, "result": "compilation failed: [REDACTED]/tmp24c2y50c.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmp24c2y50c.cpp:20:3: note: previous definition is here\n   20 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35", "passed": false, "result": "compilation failed: [REDACTED]/tmpeeei1f95.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpeeei1f95.cpp:20:3: note: previous definition is here\n   20 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_36", "passed": true, "result": "passed"}
{"task_id": "SimdBench_36", "passed": true, "result": "passed"}
{"task_id": "SimdBench_36", "passed": true, "result": "passed"}
{"task_id": "SimdBench_36", "passed": true, "result": "passed"}
{"task_id": "SimdBench_36", "passed": true, "result": "passed"}
{"task_id": "SimdBench_37", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38", "passed": true, "result": "passed"}
{"task_id": "SimdBench_38", "passed": true, "result": "passed"}
{"task_id": "SimdBench_38", "passed": true, "result": "passed"}
{"task_id": "SimdBench_38", "passed": true, "result": "passed"}
{"task_id": "SimdBench_38", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40", "passed": true, "result": "passed"}
{"task_id": "SimdBench_41", "passed": true, "result": "passed"}
{"task_id": "SimdBench_41", "passed": true, "result": "passed"}
{"task_id": "SimdBench_41", "passed": true, "result": "passed"}
{"task_id": "SimdBench_41", "passed": true, "result": "passed"}
{"task_id": "SimdBench_41", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43", "passed": true, "result": "passed"}
{"task_id": "SimdBench_44", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45", "passed": true, "result": "passed"}
{"task_id": "SimdBench_45", "passed": true, "result": "passed"}
{"task_id": "SimdBench_45", "passed": true, "result": "passed"}
{"task_id": "SimdBench_45", "passed": true, "result": "passed"}
{"task_id": "SimdBench_45", "passed": true, "result": "passed"}
{"task_id": "SimdBench_46", "passed": true, "result": "passed"}
{"task_id": "SimdBench_46", "passed": true, "result": "passed"}
{"task_id": "SimdBench_46", "passed": true, "result": "passed"}
{"task_id": "SimdBench_46", "passed": true, "result": "passed"}
{"task_id": "SimdBench_46", "passed": true, "result": "passed"}
{"task_id": "SimdBench_47", "passed": true, "result": "passed"}
{"task_id": "SimdBench_47", "passed": true, "result": "passed"}
{"task_id": "SimdBench_47", "passed": true, "result": "passed"}
{"task_id": "SimdBench_47", "passed": true, "result": "passed"}
{"task_id": "SimdBench_47", "passed": true, "result": "passed"}
{"task_id": "SimdBench_48", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_48", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_48", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_48", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_48", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50", "passed": true, "result": "passed"}
{"task_id": "SimdBench_50", "passed": true, "result": "passed"}
{"task_id": "SimdBench_50", "passed": true, "result": "passed"}
{"task_id": "SimdBench_50", "passed": true, "result": "passed"}
{"task_id": "SimdBench_50", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51", "passed": true, "result": "passed"}
{"task_id": "SimdBench_52", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_53", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53", "passed": true, "result": "passed"}
{"task_id": "SimdBench_53", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57", "passed": true, "result": "passed"}
{"task_id": "SimdBench_58", "passed": true, "result": "passed"}
{"task_id": "SimdBench_58", "passed": true, "result": "passed"}
{"task_id": "SimdBench_58", "passed": true, "result": "passed"}
{"task_id": "SimdBench_58", "passed": true, "result": "passed"}
{"task_id": "SimdBench_58", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59", "passed": true, "result": "passed"}
{"task_id": "SimdBench_60", "passed": true, "result": "passed"}
{"task_id": "SimdBench_60", "passed": true, "result": "passed"}
{"task_id": "SimdBench_60", "passed": true, "result": "passed"}
{"task_id": "SimdBench_60", "passed": true, "result": "passed"}
{"task_id": "SimdBench_60", "passed": true, "result": "passed"}
{"task_id": "SimdBench_61", "passed": true, "result": "passed"}
{"task_id": "SimdBench_61", "passed": true, "result": "passed"}
{"task_id": "SimdBench_61", "passed": true, "result": "passed"}
{"task_id": "SimdBench_61", "passed": true, "result": "passed"}
{"task_id": "SimdBench_61", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62", "passed": true, "result": "passed"}
{"task_id": "SimdBench_63", "passed": true, "result": "passed"}
{"task_id": "SimdBench_63", "passed": true, "result": "passed"}
{"task_id": "SimdBench_63", "passed": true, "result": "passed"}
{"task_id": "SimdBench_63", "passed": true, "result": "passed"}
{"task_id": "SimdBench_63", "passed": true, "result": "passed"}
{"task_id": "SimdBench_64", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_65", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66", "passed": true, "result": "passed"}
{"task_id": "SimdBench_66", "passed": true, "result": "passed"}
{"task_id": "SimdBench_67", "passed": true, "result": "passed"}
{"task_id": "SimdBench_67", "passed": true, "result": "passed"}
{"task_id": "SimdBench_67", "passed": true, "result": "passed"}
{"task_id": "SimdBench_67", "passed": true, "result": "passed"}
{"task_id": "SimdBench_67", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68", "passed": true, "result": "passed"}
{"task_id": "SimdBench_69", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_69", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_69", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_69", "passed": false, "result": "compilation failed: [REDACTED]/tmpmp3mgyd5.cpp:61:21: error: no viable conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'std::string' (aka 'basic_string<char>')\n   61 |         std::string res_simd = longest_simd(strings);\n      |                     ^          ~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:547:7: note: candidate constructor not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'const basic_string<char> &' for 1st argument\n  547 |       basic_string(const basic_string& __str)\n      |       ^            ~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: candidate constructor template not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'const char *' for 1st argument\n  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n      |       ^            ~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:677:7: note: candidate constructor not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'basic_string<char> &&' for 1st argument\n  677 |       basic_string(basic_string&& __str) noexcept\n      |       ^            ~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:706:7: note: candidate constructor not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'initializer_list<char>' for 1st argument\n  706 |       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n      |       ^            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:535:7: note: explicit constructor is not a candidate\n  535 |       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n      |       ^\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:795:2: note: explicit constructor is not a candidate\n  795 |         basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\n      |         ^\n1 error generated.\n"}
{"task_id": "SimdBench_69", "passed": false, "result": "compilation failed: [REDACTED]/tmph2daxwah.cpp:62:21: error: no viable conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'std::string' (aka 'basic_string<char>')\n   62 |         std::string res_simd = longest_simd(strings);\n      |                     ^          ~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:547:7: note: candidate constructor not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'const basic_string<char> &' for 1st argument\n  547 |       basic_string(const basic_string& __str)\n      |       ^            ~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: candidate constructor template not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'const char *' for 1st argument\n  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n      |       ^            ~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:677:7: note: candidate constructor not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'basic_string<char> &&' for 1st argument\n  677 |       basic_string(basic_string&& __str) noexcept\n      |       ^            ~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:706:7: note: candidate constructor not viable: no known conversion from 'std::optional<std::string>' (aka 'optional<basic_string<char>>') to 'initializer_list<char>' for 1st argument\n  706 |       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n      |       ^            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:535:7: note: explicit constructor is not a candidate\n  535 |       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n      |       ^\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:795:2: note: explicit constructor is not a candidate\n  795 |         basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\n      |         ^\n1 error generated.\n"}
{"task_id": "SimdBench_70", "passed": true, "result": "passed"}
{"task_id": "SimdBench_70", "passed": true, "result": "passed"}
{"task_id": "SimdBench_70", "passed": true, "result": "passed"}
{"task_id": "SimdBench_70", "passed": true, "result": "passed"}
{"task_id": "SimdBench_70", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_72", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72", "passed": true, "result": "passed"}
{"task_id": "SimdBench_73", "passed": true, "result": "passed"}
{"task_id": "SimdBench_73", "passed": true, "result": "passed"}
{"task_id": "SimdBench_73", "passed": true, "result": "passed"}
{"task_id": "SimdBench_73", "passed": true, "result": "passed"}
{"task_id": "SimdBench_73", "passed": true, "result": "passed"}
{"task_id": "SimdBench_74", "passed": true, "result": "passed"}
{"task_id": "SimdBench_74", "passed": true, "result": "passed"}
{"task_id": "SimdBench_74", "passed": true, "result": "passed"}
{"task_id": "SimdBench_74", "passed": true, "result": "passed"}
{"task_id": "SimdBench_74", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77", "passed": true, "result": "passed"}
{"task_id": "SimdBench_78", "passed": true, "result": "passed"}
{"task_id": "SimdBench_78", "passed": true, "result": "passed"}
{"task_id": "SimdBench_78", "passed": true, "result": "passed"}
{"task_id": "SimdBench_78", "passed": true, "result": "passed"}
{"task_id": "SimdBench_78", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79", "passed": false, "result": "compilation failed: [REDACTED]/tmp1kpeie11.cpp:28:18: error: no member named 'max_element_simd' in namespace 'std'; did you mean 'max_element'?\n   28 |     return *std::max_element_simd(l.begin(), l.end());\n      |             ~~~~~^~~~~~~~~~~~~~~~\n      |                  max_element\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5730:5: note: 'max_element' declared here\n 5730 |     max_element(_ForwardIterator __first, _ForwardIterator __last)\n      |     ^\n1 error generated.\n"}
{"task_id": "SimdBench_79", "passed": false, "result": "compilation failed: [REDACTED]/tmpr3a7ft1q.cpp:28:18: error: no member named 'max_element_simd' in namespace 'std'; did you mean 'max_element'?\n   28 |     return *std::max_element_simd(l.begin(), l.end());\n      |             ~~~~~^~~~~~~~~~~~~~~~\n      |                  max_element\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5730:5: note: 'max_element' declared here\n 5730 |     max_element(_ForwardIterator __first, _ForwardIterator __last)\n      |     ^\n1 error generated.\n"}
{"task_id": "SimdBench_79", "passed": false, "result": "compilation failed: [REDACTED]/tmp5x_zh547.cpp:28:18: error: no member named 'max_element_simd' in namespace 'std'; did you mean 'max_element'?\n   28 |     return *std::max_element_simd(l.begin(), l.end());\n      |             ~~~~~^~~~~~~~~~~~~~~~\n      |                  max_element\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5730:5: note: 'max_element' declared here\n 5730 |     max_element(_ForwardIterator __first, _ForwardIterator __last)\n      |     ^\n1 error generated.\n"}
{"task_id": "SimdBench_79", "passed": false, "result": "compilation failed: [REDACTED]/tmp9qrf_f0x.cpp:28:18: error: no member named 'max_element_simd' in namespace 'std'; did you mean 'max_element'?\n   28 |     return *std::max_element_simd(l.begin(), l.end());\n      |             ~~~~~^~~~~~~~~~~~~~~~\n      |                  max_element\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5730:5: note: 'max_element' declared here\n 5730 |     max_element(_ForwardIterator __first, _ForwardIterator __last)\n      |     ^\n1 error generated.\n"}
{"task_id": "SimdBench_79", "passed": false, "result": "compilation failed: [REDACTED]/tmpovyiwxa8.cpp:28:18: error: no member named 'max_element_simd' in namespace 'std'; did you mean 'max_element'?\n   28 |     return *std::max_element_simd(l.begin(), l.end());\n      |             ~~~~~^~~~~~~~~~~~~~~~\n      |                  max_element\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5730:5: note: 'max_element' declared here\n 5730 |     max_element(_ForwardIterator __first, _ForwardIterator __last)\n      |     ^\n1 error generated.\n"}
{"task_id": "SimdBench_80", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_80", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80", "passed": true, "result": "passed"}
{"task_id": "SimdBench_81", "passed": true, "result": "passed"}
{"task_id": "SimdBench_81", "passed": true, "result": "passed"}
{"task_id": "SimdBench_81", "passed": true, "result": "passed"}
{"task_id": "SimdBench_81", "passed": true, "result": "passed"}
{"task_id": "SimdBench_81", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84", "passed": true, "result": "passed"}
{"task_id": "SimdBench_85", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_86", "passed": true, "result": "passed"}
{"task_id": "SimdBench_86", "passed": true, "result": "passed"}
{"task_id": "SimdBench_86", "passed": true, "result": "passed"}
{"task_id": "SimdBench_86", "passed": true, "result": "passed"}
{"task_id": "SimdBench_86", "passed": true, "result": "passed"}
{"task_id": "SimdBench_87", "passed": true, "result": "passed"}
{"task_id": "SimdBench_87", "passed": true, "result": "passed"}
{"task_id": "SimdBench_87", "passed": true, "result": "passed"}
{"task_id": "SimdBench_87", "passed": true, "result": "passed"}
{"task_id": "SimdBench_87", "passed": true, "result": "passed"}
{"task_id": "SimdBench_88", "passed": true, "result": "passed"}
{"task_id": "SimdBench_88", "passed": true, "result": "passed"}
{"task_id": "SimdBench_88", "passed": true, "result": "passed"}
{"task_id": "SimdBench_88", "passed": true, "result": "passed"}
{"task_id": "SimdBench_88", "passed": true, "result": "passed"}
{"task_id": "SimdBench_89", "passed": true, "result": "passed"}
{"task_id": "SimdBench_89", "passed": true, "result": "passed"}
{"task_id": "SimdBench_89", "passed": true, "result": "passed"}
{"task_id": "SimdBench_89", "passed": true, "result": "passed"}
{"task_id": "SimdBench_89", "passed": true, "result": "passed"}
{"task_id": "SimdBench_90", "passed": true, "result": "passed"}
{"task_id": "SimdBench_90", "passed": true, "result": "passed"}
{"task_id": "SimdBench_90", "passed": true, "result": "passed"}
{"task_id": "SimdBench_90", "passed": true, "result": "passed"}
{"task_id": "SimdBench_90", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91", "passed": true, "result": "passed"}
{"task_id": "SimdBench_92", "passed": true, "result": "passed"}
{"task_id": "SimdBench_92", "passed": true, "result": "passed"}
{"task_id": "SimdBench_92", "passed": true, "result": "passed"}
{"task_id": "SimdBench_92", "passed": true, "result": "passed"}
{"task_id": "SimdBench_92", "passed": true, "result": "passed"}
{"task_id": "SimdBench_93", "passed": true, "result": "passed"}
{"task_id": "SimdBench_93", "passed": true, "result": "passed"}
{"task_id": "SimdBench_93", "passed": true, "result": "passed"}
{"task_id": "SimdBench_93", "passed": true, "result": "passed"}
{"task_id": "SimdBench_93", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94", "passed": true, "result": "passed"}
{"task_id": "SimdBench_95", "passed": true, "result": "passed"}
{"task_id": "SimdBench_95", "passed": true, "result": "passed"}
{"task_id": "SimdBench_95", "passed": true, "result": "passed"}
{"task_id": "SimdBench_95", "passed": true, "result": "passed"}
{"task_id": "SimdBench_95", "passed": true, "result": "passed"}
{"task_id": "SimdBench_96", "passed": true, "result": "passed"}
{"task_id": "SimdBench_96", "passed": true, "result": "passed"}
{"task_id": "SimdBench_96", "passed": true, "result": "passed"}
{"task_id": "SimdBench_96", "passed": true, "result": "passed"}
{"task_id": "SimdBench_96", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99", "passed": true, "result": "passed"}
{"task_id": "SimdBench_100", "passed": true, "result": "passed"}
{"task_id": "SimdBench_100", "passed": true, "result": "passed"}
{"task_id": "SimdBench_100", "passed": true, "result": "passed"}
{"task_id": "SimdBench_100", "passed": true, "result": "passed"}
{"task_id": "SimdBench_100", "passed": true, "result": "passed"}
{"task_id": "SimdBench_101", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_102", "passed": true, "result": "passed"}
{"task_id": "SimdBench_102", "passed": true, "result": "passed"}
{"task_id": "SimdBench_102", "passed": true, "result": "passed"}
{"task_id": "SimdBench_102", "passed": true, "result": "passed"}
{"task_id": "SimdBench_102", "passed": true, "result": "passed"}
{"task_id": "SimdBench_103", "passed": true, "result": "passed"}
{"task_id": "SimdBench_103", "passed": true, "result": "passed"}
{"task_id": "SimdBench_103", "passed": true, "result": "passed"}
{"task_id": "SimdBench_103", "passed": true, "result": "passed"}
{"task_id": "SimdBench_103", "passed": true, "result": "passed"}
{"task_id": "SimdBench_104", "passed": true, "result": "passed"}
{"task_id": "SimdBench_104", "passed": true, "result": "passed"}
{"task_id": "SimdBench_104", "passed": true, "result": "passed"}
{"task_id": "SimdBench_104", "passed": true, "result": "passed"}
{"task_id": "SimdBench_104", "passed": true, "result": "passed"}
{"task_id": "SimdBench_105", "passed": true, "result": "passed"}
{"task_id": "SimdBench_105", "passed": true, "result": "passed"}
{"task_id": "SimdBench_105", "passed": true, "result": "passed"}
{"task_id": "SimdBench_105", "passed": true, "result": "passed"}
{"task_id": "SimdBench_105", "passed": true, "result": "passed"}
{"task_id": "SimdBench_106", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_107", "passed": true, "result": "passed"}
{"task_id": "SimdBench_107", "passed": true, "result": "passed"}
{"task_id": "SimdBench_107", "passed": true, "result": "passed"}
{"task_id": "SimdBench_107", "passed": true, "result": "passed"}
{"task_id": "SimdBench_107", "passed": true, "result": "passed"}
{"task_id": "SimdBench_108", "passed": true, "result": "passed"}
{"task_id": "SimdBench_108", "passed": true, "result": "passed"}
{"task_id": "SimdBench_108", "passed": true, "result": "passed"}
{"task_id": "SimdBench_108", "passed": true, "result": "passed"}
{"task_id": "SimdBench_108", "passed": true, "result": "passed"}
{"task_id": "SimdBench_109", "passed": true, "result": "passed"}
{"task_id": "SimdBench_109", "passed": true, "result": "passed"}
{"task_id": "SimdBench_109", "passed": true, "result": "passed"}
{"task_id": "SimdBench_109", "passed": true, "result": "passed"}
{"task_id": "SimdBench_109", "passed": true, "result": "passed"}
{"task_id": "SimdBench_110", "passed": true, "result": "passed"}
{"task_id": "SimdBench_110", "passed": true, "result": "passed"}
{"task_id": "SimdBench_110", "passed": true, "result": "passed"}
{"task_id": "SimdBench_110", "passed": true, "result": "passed"}
{"task_id": "SimdBench_110", "passed": true, "result": "passed"}
{"task_id": "SimdBench_111", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111", "passed": true, "result": "passed"}
{"task_id": "SimdBench_111", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_112", "passed": true, "result": "passed"}
{"task_id": "SimdBench_112", "passed": true, "result": "passed"}
{"task_id": "SimdBench_112", "passed": true, "result": "passed"}
{"task_id": "SimdBench_112", "passed": true, "result": "passed"}
{"task_id": "SimdBench_112", "passed": true, "result": "passed"}
{"task_id": "SimdBench_113", "passed": true, "result": "passed"}
{"task_id": "SimdBench_113", "passed": true, "result": "passed"}
{"task_id": "SimdBench_113", "passed": true, "result": "passed"}
{"task_id": "SimdBench_113", "passed": true, "result": "passed"}
{"task_id": "SimdBench_113", "passed": true, "result": "passed"}
{"task_id": "SimdBench_114", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_114", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_114", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_114", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_114", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115", "passed": true, "result": "passed"}
{"task_id": "SimdBench_115", "passed": true, "result": "passed"}
{"task_id": "SimdBench_115", "passed": true, "result": "passed"}
{"task_id": "SimdBench_115", "passed": true, "result": "passed"}
{"task_id": "SimdBench_115", "passed": true, "result": "passed"}
{"task_id": "SimdBench_116", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116", "passed": true, "result": "passed"}
{"task_id": "SimdBench_116", "passed": true, "result": "passed"}
{"task_id": "SimdBench_117", "passed": true, "result": "passed"}
{"task_id": "SimdBench_117", "passed": true, "result": "passed"}
{"task_id": "SimdBench_117", "passed": true, "result": "passed"}
{"task_id": "SimdBench_117", "passed": true, "result": "passed"}
{"task_id": "SimdBench_117", "passed": true, "result": "passed"}
{"task_id": "SimdBench_118", "passed": true, "result": "passed"}
{"task_id": "SimdBench_118", "passed": true, "result": "passed"}
{"task_id": "SimdBench_118", "passed": true, "result": "passed"}
{"task_id": "SimdBench_118", "passed": true, "result": "passed"}
{"task_id": "SimdBench_118", "passed": true, "result": "passed"}
{"task_id": "SimdBench_119", "passed": true, "result": "passed"}
{"task_id": "SimdBench_119", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119", "passed": true, "result": "passed"}
{"task_id": "SimdBench_119", "passed": true, "result": "passed"}
{"task_id": "SimdBench_120", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121", "passed": true, "result": "passed"}
{"task_id": "SimdBench_121", "passed": true, "result": "passed"}
{"task_id": "SimdBench_121", "passed": true, "result": "passed"}
{"task_id": "SimdBench_121", "passed": true, "result": "passed"}
{"task_id": "SimdBench_121", "passed": true, "result": "passed"}
{"task_id": "SimdBench_122", "passed": true, "result": "passed"}
{"task_id": "SimdBench_122", "passed": true, "result": "passed"}
{"task_id": "SimdBench_122", "passed": true, "result": "passed"}
{"task_id": "SimdBench_122", "passed": true, "result": "passed"}
{"task_id": "SimdBench_122", "passed": true, "result": "passed"}
{"task_id": "SimdBench_123", "passed": true, "result": "passed"}
{"task_id": "SimdBench_123", "passed": true, "result": "passed"}
{"task_id": "SimdBench_123", "passed": true, "result": "passed"}
{"task_id": "SimdBench_123", "passed": true, "result": "passed"}
{"task_id": "SimdBench_123", "passed": true, "result": "passed"}
{"task_id": "SimdBench_124", "passed": false, "result": "compilation failed: [REDACTED]/tmpnhp8qnkw.cpp:59:1: error: expected unqualified-id\n   59 | ```cpp\n      | ^\n[REDACTED]/tmpnhp8qnkw.cpp:83:1: error: expected '(' after 'for'\n   83 | bool humaneval_check() {\n      | ^\n[REDACTED]/tmpnhp8qnkw.cpp:132:2: error: expected '}'\n  132 | }\n      |  ^\n[REDACTED]/tmpnhp8qnkw.cpp:77:25: note: to match this '{'\n   77 |     while (!pq.empty()) {\n      |                         ^\n[REDACTED]/tmpnhp8qnkw.cpp:132:2: error: expected '}'\n  132 | }\n      |  ^\n[REDACTED]/tmpnhp8qnkw.cpp:65:81: note: to match this '{'\n   65 | std::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n      |                                                                                 ^\n4 errors generated.\n"}
{"task_id": "SimdBench_124", "passed": false, "result": "compilation failed: [REDACTED]/tmp2wos9o13.cpp:96:20: error: no matching member function for call to 'push'\n   96 |                 pq.push({{-newPath[0], nx, ny}});\n      |                 ~~~^~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_queue.h:738:7: note: candidate function not viable: cannot convert initializer list argument to 'const value_type' (aka 'const std::tuple<std::vector<int>, int, int>')\n  738 |       push(const value_type& __x)\n      |       ^    ~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_queue.h:746:7: note: candidate function not viable: cannot convert initializer list argument to 'value_type' (aka 'std::tuple<std::vector<int>, int, int>')\n  746 |       push(value_type&& __x)\n      |       ^    ~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_124", "passed": false, "result": "timed out"}
{"task_id": "SimdBench_124", "passed": false, "result": "compilation failed: [REDACTED]/tmpumpjlnjo.cpp:59:1: error: expected unqualified-id\n   59 | ```cpp\n      | ^\n[REDACTED]/tmpumpjlnjo.cpp:83:24: error: function definition is not allowed here\n   83 | bool humaneval_check() {\n      |                        ^\n[REDACTED]/tmpumpjlnjo.cpp:99:1: error: expected ';' in 'for' statement specifier\n   99 | bool correctness_check(int iterations) {\n      | ^\n[REDACTED]/tmpumpjlnjo.cpp:99:6: error: a function type is not allowed here\n   99 | bool correctness_check(int iterations) {\n      | ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpumpjlnjo.cpp:99:40: error: expected ';' in 'for' statement specifier\n   99 | bool correctness_check(int iterations) {\n      |                                        ^\n[REDACTED]/tmpumpjlnjo.cpp:132:2: error: expected expression\n  132 | }\n      |  ^\n[REDACTED]/tmpumpjlnjo.cpp:132:2: error: expected ')'\n[REDACTED]/tmpumpjlnjo.cpp:82:13: note: to match this '('\n   82 |         for (\n      |             ^\n[REDACTED]/tmpumpjlnjo.cpp:132:2: error: expected expression\n  132 | }\n      |  ^\n[REDACTED]/tmpumpjlnjo.cpp:132:2: error: expected '}'\n[REDACTED]/tmpumpjlnjo.cpp:77:25: note: to match this '{'\n   77 |     while (!pq.empty()) {\n      |                         ^\n[REDACTED]/tmpumpjlnjo.cpp:132:2: error: expected '}'\n  132 | }\n      |  ^\n[REDACTED]/tmpumpjlnjo.cpp:65:81: note: to match this '{'\n   65 | std::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n      |                                                                                 ^\n10 errors generated.\n"}
{"task_id": "SimdBench_124", "passed": true, "result": "passed"}
{"task_id": "SimdBench_125", "passed": true, "result": "passed"}
{"task_id": "SimdBench_125", "passed": true, "result": "passed"}
{"task_id": "SimdBench_125", "passed": true, "result": "passed"}
{"task_id": "SimdBench_125", "passed": true, "result": "passed"}
{"task_id": "SimdBench_125", "passed": true, "result": "passed"}
{"task_id": "SimdBench_126", "passed": true, "result": "passed"}
{"task_id": "SimdBench_126", "passed": true, "result": "passed"}
{"task_id": "SimdBench_126", "passed": true, "result": "passed"}
{"task_id": "SimdBench_126", "passed": true, "result": "passed"}
{"task_id": "SimdBench_126", "passed": true, "result": "passed"}
{"task_id": "SimdBench_127", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_128", "passed": true, "result": "passed"}
{"task_id": "SimdBench_128", "passed": true, "result": "passed"}
{"task_id": "SimdBench_128", "passed": true, "result": "passed"}
{"task_id": "SimdBench_128", "passed": true, "result": "passed"}
{"task_id": "SimdBench_128", "passed": true, "result": "passed"}
{"task_id": "SimdBench_129", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_130", "passed": true, "result": "passed"}
{"task_id": "SimdBench_130", "passed": true, "result": "passed"}
{"task_id": "SimdBench_130", "passed": true, "result": "passed"}
{"task_id": "SimdBench_130", "passed": true, "result": "passed"}
{"task_id": "SimdBench_130", "passed": true, "result": "passed"}
{"task_id": "SimdBench_131", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_131", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_131", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_131", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_131", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_132", "passed": true, "result": "passed"}
{"task_id": "SimdBench_132", "passed": true, "result": "passed"}
{"task_id": "SimdBench_132", "passed": true, "result": "passed"}
{"task_id": "SimdBench_132", "passed": true, "result": "passed"}
{"task_id": "SimdBench_132", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_133", "passed": true, "result": "passed"}
{"task_id": "SimdBench_133", "passed": true, "result": "passed"}
{"task_id": "SimdBench_133", "passed": true, "result": "passed"}
{"task_id": "SimdBench_133", "passed": true, "result": "passed"}
{"task_id": "SimdBench_133", "passed": true, "result": "passed"}
{"task_id": "SimdBench_134", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_134", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_134", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_134", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_134", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_135", "passed": true, "result": "passed"}
{"task_id": "SimdBench_135", "passed": true, "result": "passed"}
{"task_id": "SimdBench_135", "passed": true, "result": "passed"}
{"task_id": "SimdBench_135", "passed": true, "result": "passed"}
{"task_id": "SimdBench_135", "passed": true, "result": "passed"}

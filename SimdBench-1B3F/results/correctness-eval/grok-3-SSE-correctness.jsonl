{"task_id": "SimdBench_0_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc79gfsh2.cpp:35:29: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'conditional_move_simd' that is compiled without support for 'sse4.2'\n   35 |         __m128i mask_bool = _mm_cmpgt_epi64(mask_vec, zero);\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb4azg_rh.cpp:34:33: error: '__builtin_ia32_vec_set_v2di' needs target feature sse4.1\n   34 |         if (mask[i]) mask_vec = _mm_insert_epi64(mask_vec, -1LL, 0);\n      |                                 ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:986:13: note: expanded from macro '_mm_insert_epi64'\n  986 |   ((__m128i)__builtin_ia32_vec_set_v2di((__v2di)(__m128i)(X), (long long)(I),  \\\n      |             ^\n[REDACTED]/tmpb4azg_rh.cpp:35:55: error: '__builtin_ia32_vec_set_v2di' needs target feature sse4.1\n   35 |         if (i + 1 < length && mask[i + 1]) mask_vec = _mm_insert_epi64(mask_vec, -1LL, 1);\n      |                                                       ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:986:13: note: expanded from macro '_mm_insert_epi64'\n  986 |   ((__m128i)__builtin_ia32_vec_set_v2di((__v2di)(__m128i)(X), (long long)(I),  \\\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwfoit59w.cpp:35:29: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'conditional_move_simd' that is compiled without support for 'sse4.2'\n   35 |         __m128i mask_bool = _mm_cmpgt_epi64(mask_vec, zero);\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp188s3wlk.cpp:53:26: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   53 |         __m128i result = _mm_div_epi32(sum, seven_vec);\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6qon5v72.cpp:47:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   47 |         v_result = _mm_div_epi32(v_result, v_seven);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzrofxrtn.cpp:47:18: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   47 |         result = _mm_div_epi32(result, seven_vec);\n      |                  ^~~~~~~~~~~~~\n      |                  _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplmpdjmfh.cpp:47:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   47 |         v_result = _mm_div_epi32(v_result, v_seven);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf8896b7g.cpp:47:18: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   47 |         result = _mm_div_epi32(result, seven_vec);\n      |                  ^~~~~~~~~~~~~\n      |                  _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc6re8ev4.cpp:45:27: error: '__builtin_ia32_blendps' needs target feature sse4.1\n   45 |         __m128 gathered = _mm_blend_ps(_mm_blend_ps(val0, val1, 0x02), _mm_blend_ps(val2, val3, 0x08), 0x0C);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:413:12: note: expanded from macro '_mm_blend_ps'\n  413 |   ((__m128)__builtin_ia32_blendps((__v4sf)(__m128)(V1), (__v4sf)(__m128)(V2),  \\\n      |            ^\n[REDACTED]/tmpc6re8ev4.cpp:45:40: error: '__builtin_ia32_blendps' needs target feature sse4.1\n   45 |         __m128 gathered = _mm_blend_ps(_mm_blend_ps(val0, val1, 0x02), _mm_blend_ps(val2, val3, 0x08), 0x0C);\n      |                                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:413:12: note: expanded from macro '_mm_blend_ps'\n  413 |   ((__m128)__builtin_ia32_blendps((__v4sf)(__m128)(V1), (__v4sf)(__m128)(V2),  \\\n      |            ^\n[REDACTED]/tmpc6re8ev4.cpp:45:72: error: '__builtin_ia32_blendps' needs target feature sse4.1\n   45 |         __m128 gathered = _mm_blend_ps(_mm_blend_ps(val0, val1, 0x02), _mm_blend_ps(val2, val3, 0x08), 0x0C);\n      |                                                                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:413:12: note: expanded from macro '_mm_blend_ps'\n  413 |   ((__m128)__builtin_ia32_blendps((__v4sf)(__m128)(V1), (__v4sf)(__m128)(V2),  \\\n      |            ^\n3 errors generated.\n"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_7_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_8_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc94eqva6.cpp:42:30: error: always_inline function '_mm_blendv_pd' requires target feature 'sse4.1', but would be inlined into function 'conditional_scale_simd' that is compiled without support for 'sse4.1'\n   42 |             __m128d result = _mm_blendv_pd(src_vec, scaled, mask);\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_8_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_8_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxe07isgf.cpp:42:26: error: always_inline function '_mm_blendv_pd' requires target feature 'sse4.1', but would be inlined into function 'conditional_scale_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128d result = _mm_blendv_pd(v_src, scaled, mask);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr7b27daw.cpp:42:26: error: always_inline function '_mm_blendv_pd' requires target feature 'sse4.1', but would be inlined into function 'conditional_scale_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128d result = _mm_blendv_pd(src_vec, scaled, mask);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpi8qfkx8c.cpp:38:15: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   38 |         sum = _mm_srai_epi64(sum, 1);\n      |               ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6u3w4q1f.cpp:38:15: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   38 |         sum = _mm_srai_epi64(sum, 1);\n      |               ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvjsyjagz.cpp:38:15: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   38 |         sum = _mm_srai_epi64(sum, 1);\n      |               ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg25kbmip.cpp:36:15: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   36 |         sum = _mm_srai_epi64(sum, 1);\n      |               ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7ztr2b65.cpp:38:15: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   38 |         sum = _mm_srai_epi64(sum, 1);\n      |               ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2mrtlp8e.cpp:42:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   42 |         min_vec = _mm_min_epi32(min_vec, even_vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph3ja8nbw.cpp:59:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   59 |         min_vec = _mm_min_epi32(min_vec, even_vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpe28xx5_e.cpp:40:19: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   40 |         min_vec = _mm_min_epu32(min_vec, vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpp9p_jysv.cpp:42:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   42 |         min_vec = _mm_min_epi32(min_vec, vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8w2ceiok.cpp:42:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   42 |         min_vec = _mm_min_epi32(min_vec, vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_12_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_12_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_14_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp63cn4423.cpp:44:14: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   44 |         if (!_mm_testz_si128(mask, mask)) {\n      |              ^\n[REDACTED]/tmp63cn4423.cpp:45:23: error: always_inline function '_mm_max_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   45 |             max_val = _mm_max_epi8(data, max_val);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgsq2fiio.cpp:44:20: error: always_inline function '_mm_max_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   44 |         max_vals = _mm_max_epi8(data, max_vals);\n      |                    ^\n[REDACTED]/tmpgsq2fiio.cpp:45:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   45 |         max_indices = _mm_blendv_epi8(max_indices, indices, mask);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_14_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9a_67p2g.cpp:39:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'vector_blend_simd' that is compiled without support for 'sse4.1'\n   39 |         __m128i result = _mm_blendv_epi8(vsrc2, vsrc1, cond);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_15_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo9ddd2cr.cpp:37:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   37 |         counts[0] = _mm_popcnt_u32(_mm_cvtsi128_si32(v));\n      |                     ^\n[REDACTED]/tmpo9ddd2cr.cpp:38:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   38 |         counts[1] = _mm_popcnt_u32(_mm_cvtsi128_si32(_mm_srli_si128(v, 4)));\n      |                     ^\n[REDACTED]/tmpo9ddd2cr.cpp:39:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   39 |         counts[2] = _mm_popcnt_u32(_mm_cvtsi128_si32(_mm_srli_si128(v, 8)));\n      |                     ^\n[REDACTED]/tmpo9ddd2cr.cpp:40:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   40 |         counts[3] = _mm_popcnt_u32(_mm_cvtsi128_si32(_mm_srli_si128(v, 12)));\n      |                     ^\n[REDACTED]/tmpo9ddd2cr.cpp:44:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   44 |         dst[i] = _mm_popcnt_u32(src[i]);\n      |                  ^\n5 errors generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2pd2m0_r.cpp:40:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   40 |         dst[i] = _mm_popcnt_u32(v0);\n      |                  ^\n[REDACTED]/tmp2pd2m0_r.cpp:41:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   41 |         dst[i + 1] = _mm_popcnt_u32(v1);\n      |                      ^\n[REDACTED]/tmp2pd2m0_r.cpp:42:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   42 |         dst[i + 2] = _mm_popcnt_u32(v2);\n      |                      ^\n[REDACTED]/tmp2pd2m0_r.cpp:43:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   43 |         dst[i + 3] = _mm_popcnt_u32(v3);\n      |                      ^\n[REDACTED]/tmp2pd2m0_r.cpp:46:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   46 |         dst[i] = _mm_popcnt_u32(src[i]);\n      |                  ^\n5 errors generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_j6uz262.cpp:42:29: error: use of undeclared identifier '_mm_popcnt_u32_epi16'; did you mean '_mm_popcnt_epi16'?\n   42 |         __m128i popcnt_lo = _mm_popcnt_u32_epi16(lo16);\n      |                             ^~~~~~~~~~~~~~~~~~~~\n      |                             _mm_popcnt_epi16\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlbitalgintrin.h:50:1: note: '_mm_popcnt_epi16' declared here\n   50 | _mm_popcnt_epi16(__m128i __A)\n      | ^\n[REDACTED]/tmp_j6uz262.cpp:43:29: error: use of undeclared identifier '_mm_popcnt_u32_epi16'; did you mean '_mm_popcnt_epi16'?\n   43 |         __m128i popcnt_hi = _mm_popcnt_u32_epi16(hi16);\n      |                             ^~~~~~~~~~~~~~~~~~~~\n      |                             _mm_popcnt_epi16\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlbitalgintrin.h:50:1: note: '_mm_popcnt_epi16' declared here\n   50 | _mm_popcnt_epi16(__m128i __A)\n      | ^\n2 errors generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7bfzg040.cpp:37:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   37 |         counts[0] = _mm_popcnt_u32(_mm_extract_epi32(vec, 0));\n      |                     ^\n[REDACTED]/tmp7bfzg040.cpp:38:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   38 |         counts[1] = _mm_popcnt_u32(_mm_extract_epi32(vec, 1));\n      |                     ^\n[REDACTED]/tmp7bfzg040.cpp:39:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   39 |         counts[2] = _mm_popcnt_u32(_mm_extract_epi32(vec, 2));\n      |                     ^\n[REDACTED]/tmp7bfzg040.cpp:40:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   40 |         counts[3] = _mm_popcnt_u32(_mm_extract_epi32(vec, 3));\n      |                     ^\n[REDACTED]/tmp7bfzg040.cpp:44:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'population_count_simd' that is compiled without support for 'popcnt'\n   44 |         dst[i] = _mm_popcnt_u32(src[i]);\n      |                  ^\n5 errors generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_19_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu28jxn93.cpp:35:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   35 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpaly22m2v.cpp:35:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   35 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7w46dqvv.cpp:35:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   35 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwxx76f86.cpp:34:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   34 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplr4w45mj.cpp:35:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   35 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp93vt829z.cpp:47:18: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   47 |         result = _mm_ceil_ps(result);\n      |                  ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp93vt829z.cpp:56:24: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'vector_mul_round_up_simd' that is compiled without support for 'sse4.1'\n   56 |         __m128 final = _mm_blendv_ps(neg_one, result, mask);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxoes5bj_.cpp:47:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   47 |         __m128 rounded = _mm_ceil_ps(mul);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpxoes5bj_.cpp:49:25: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'vector_mul_round_up_simd' that is compiled without support for 'sse4.1'\n   49 |         __m128 result = _mm_blendv_ps(neg_one, rounded, cond1);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3wq87m2f.cpp:47:18: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   47 |         result = _mm_ceil_ps(result);\n      |                  ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp3wq87m2f.cpp:50:36: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'vector_mul_round_up_simd' that is compiled without support for 'sse4.1'\n   50 |             _mm_storeu_ps(&dst[i], _mm_blendv_ps(neg_one, result, cond1));\n      |                                    ^\n2 errors generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxxsspp95.cpp:57:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   57 |         __m128 rounded = _mm_ceil_ps(mul);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpxxsspp95.cpp:60:25: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'vector_mul_round_up_simd' that is compiled without support for 'sse4.1'\n   60 |         __m128 result = _mm_blendv_ps(neg_one, rounded, mask);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjxbk2nky.cpp:47:18: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   47 |         result = _mm_ceil_ps(result);\n      |                  ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_22_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_22_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjqk7ubqs.cpp:58:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   58 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpjqk7ubqs.cpp:59:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   59 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_23_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpyp9fpi6k.cpp:58:23: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   58 |         __m128 temp = _mm_hadd_ps(sum, sum);\n      |                       ^\n[REDACTED]/tmpyp9fpi6k.cpp:59:16: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   59 |         temp = _mm_hadd_ps(temp, temp);\n      |                ^\n2 errors generated.\n"}
{"task_id": "SimdBench_23_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp96vx_50a.cpp:57:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   57 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmp96vx_50a.cpp:58:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   58 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_23_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzjx3n6by.cpp:58:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   58 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpzjx3n6by.cpp:59:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   59 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_23_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsuqgjjvs.cpp:58:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   58 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpsuqgjjvs.cpp:59:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   59 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpazs5ye59.cpp:50:65: error: argument to '__builtin_ia32_shufps' must be a constant integer\n   50 |                         dst[(j + k) * rows + i] = _mm_cvtss_f32(_mm_shuffle_ps(val, val, k));\n      |                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/xmmintrin.h:2618:12: note: expanded from macro '_mm_shuffle_ps'\n 2618 |   ((__m128)__builtin_ia32_shufps((__v4sf)(__m128)(a), (__v4sf)(__m128)(b), \\\n      |            ^\n 2619 |                                  (int)(mask)))\n      |                                  ~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpz6yx65vx.cpp:49:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   49 |             row0 = _mm_round_ps(row0, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpz6yx65vx.cpp:50:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   50 |             row1 = _mm_round_ps(row1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpz6yx65vx.cpp:51:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   51 |             row2 = _mm_round_ps(row2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpz6yx65vx.cpp:52:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   52 |             row3 = _mm_round_ps(row3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n4 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9e2v8c_j.cpp:44:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |             row0 = _mm_round_ps(row0, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp9e2v8c_j.cpp:48:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   48 |             row1 = _mm_round_ps(row1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp9e2v8c_j.cpp:52:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   52 |             row2 = _mm_round_ps(row2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp9e2v8c_j.cpp:56:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   56 |             row3 = _mm_round_ps(row3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n4 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpe9ea81d8.cpp:44:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |             row0 = _mm_round_ps(row0, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpe9ea81d8.cpp:48:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   48 |             row1 = _mm_round_ps(row1, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpe9ea81d8.cpp:52:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   52 |             row2 = _mm_round_ps(row2, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpe9ea81d8.cpp:56:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   56 |             row3 = _mm_round_ps(row3, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n4 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbm6zua6s.cpp:44:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   44 |             row0 = _mm_round_ps(row0, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpbm6zua6s.cpp:48:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   48 |             row1 = _mm_round_ps(row1, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpbm6zua6s.cpp:52:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   52 |             row2 = _mm_round_ps(row2, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpbm6zua6s.cpp:56:20: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   56 |             row3 = _mm_round_ps(row3, _MM_FROUND_TO_NEAREST_INT);\n      |                    ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n4 errors generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplog2wvs6.cpp:43:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         __m128 rounded = _mm_round_ps(sub, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1282cfve.cpp:43:18: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         result = _mm_round_ps(result, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n      |                  ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqeynlgg1.cpp:43:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         __m128 rounded = _mm_round_ps(sub, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwd5x6lfx.cpp:43:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         __m128 rounded = _mm_round_ps(sub, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_26_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnbxazd15.cpp:37:25: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   37 |         __m128i v_div = _mm_div_epi16(v_src, v_base);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp78v5q9m7.cpp:37:30: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   37 |         __m128i div_result = _mm_div_epi16(src_vec, base_vec);\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnlrm3fne.cpp:37:25: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   37 |         __m128i v_div = _mm_div_epi16(v_src, v_base);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc6mcwcw7.cpp:37:23: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   37 |         __m128i div = _mm_div_epi16(src_vec, base_vec);\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf3xtzn44.cpp:39:25: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   39 |         __m128i v_div = _mm_div_epi16(v_src, v_base);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7grm0ryo.cpp:43:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_4d_equal_count_simd' that is compiled without support for 'popcnt'\n   43 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwc497u6h.cpp:43:24: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_4d_equal_count_simd' that is compiled without support for 'popcnt'\n   43 |         equal_count += _mm_popcnt_u32(mask);\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxw3a2k6e.cpp:43:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_4d_equal_count_simd' that is compiled without support for 'popcnt'\n   43 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbglwj9fl.cpp:42:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_4d_equal_count_simd' that is compiled without support for 'popcnt'\n   42 |         count += _mm_popcnt_u32(_mm_movemask_epi8(cmp));\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkj3pwi89.cpp:43:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_4d_equal_count_simd' that is compiled without support for 'popcnt'\n   43 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp400qfjq3.cpp:39:23: error: always_inline function '_mm_max_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   39 |         __m128i abs = _mm_max_epi64(sub, _mm_sub_epi64(zero, sub));\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkkjg4xo_.cpp:36:23: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   36 |         __m128i abs = _mm_abs_epi64(mul);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprwnlwnmo.cpp:35:23: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   35 |         __m128i abs = _mm_abs_epi64(prod);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprscm1let.cpp:36:23: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   36 |         __m128i abs = _mm_abs_epi64(prod);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_41avwfo.cpp:35:23: error: always_inline function '_mm_abs_epi64' requires target feature 'avx512vl', but would be inlined into function 'axm_abs_simd' that is compiled without support for 'avx512vl'\n   35 |         __m128i abs = _mm_abs_epi64(mul);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppfcwk28l.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmppfcwk28l.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppc85ezul.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmppc85ezul.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcpvxvl7j.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpcpvxvl7j.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsxzv4ria.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpsxzv4ria.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnsa_74z4.cpp:51:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   51 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpnsa_74z4.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_38_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_39_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_39_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptk4i14rt.cpp:42:25: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i a_low = _mm_cvtepi8_epi16(a);\n      |                         ^\n[REDACTED]/tmptk4i14rt.cpp:43:26: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i a_high = _mm_cvtepi8_epi16(_mm_srli_si128(a, 8));\n      |                          ^\n[REDACTED]/tmptk4i14rt.cpp:44:25: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i b_low = _mm_cvtepi8_epi16(b);\n      |                         ^\n[REDACTED]/tmptk4i14rt.cpp:45:26: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i b_high = _mm_cvtepi8_epi16(_mm_srli_si128(b, 8));\n      |                          ^\n4 errors generated.\n"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpz4z9ekp1.cpp:41:25: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   41 |         __m128i a_low = _mm_cvtepi8_epi16(a);\n      |                         ^\n[REDACTED]/tmpz4z9ekp1.cpp:42:26: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i a_high = _mm_cvtepi8_epi16(_mm_srli_si128(a, 8));\n      |                          ^\n[REDACTED]/tmpz4z9ekp1.cpp:43:25: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i b_low = _mm_cvtepi8_epi16(b);\n      |                         ^\n[REDACTED]/tmpz4z9ekp1.cpp:44:26: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i b_high = _mm_cvtepi8_epi16(_mm_srli_si128(b, 8));\n      |                          ^\n[REDACTED]/tmpz4z9ekp1.cpp:51:40: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   51 |         sum_sq = _mm_add_epi32(sum_sq, _mm_cvtepi16_epi32(sq_a_low));\n      |                                        ^\n[REDACTED]/tmpz4z9ekp1.cpp:52:40: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   52 |         sum_sq = _mm_add_epi32(sum_sq, _mm_cvtepi16_epi32(_mm_srli_si128(sq_a_low, 8)));\n      |                                        ^\n[REDACTED]/tmpz4z9ekp1.cpp:53:40: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   53 |         sum_sq = _mm_add_epi32(sum_sq, _mm_cvtepi16_epi32(sq_a_high));\n      |                                        ^\n[REDACTED]/tmpz4z9ekp1.cpp:54:40: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   54 |         sum_sq = _mm_add_epi32(sum_sq, _mm_cvtepi16_epi32(_mm_srli_si128(sq_a_high, 8)));\n      |                                        ^\n[REDACTED]/tmpz4z9ekp1.cpp:56:44: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   56 |         sum_prod = _mm_add_epi32(sum_prod, _mm_cvtepi16_epi32(prod_low));\n      |                                            ^\n[REDACTED]/tmpz4z9ekp1.cpp:57:44: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   57 |         sum_prod = _mm_add_epi32(sum_prod, _mm_cvtepi16_epi32(_mm_srli_si128(prod_low, 8)));\n      |                                            ^\n[REDACTED]/tmpz4z9ekp1.cpp:58:44: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   58 |         sum_prod = _mm_add_epi32(sum_prod, _mm_cvtepi16_epi32(prod_high));\n      |                                            ^\n[REDACTED]/tmpz4z9ekp1.cpp:59:44: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   59 |         sum_prod = _mm_add_epi32(sum_prod, _mm_cvtepi16_epi32(_mm_srli_si128(prod_high, 8)));\n      |                                            ^\n12 errors generated.\n"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpp99m1rfu.cpp:42:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i a_lo = _mm_cvtepi8_epi16(a);\n      |                        ^\n[REDACTED]/tmpp99m1rfu.cpp:43:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i a_hi = _mm_cvtepi8_epi16(_mm_srli_si128(a, 8));\n      |                        ^\n[REDACTED]/tmpp99m1rfu.cpp:44:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i b_lo = _mm_cvtepi8_epi16(b);\n      |                        ^\n[REDACTED]/tmpp99m1rfu.cpp:45:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i b_hi = _mm_cvtepi8_epi16(_mm_srli_si128(b, 8));\n      |                        ^\n4 errors generated.\n"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplwd33ilb.cpp:42:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i a_lo = _mm_cvtepi8_epi16(a);\n      |                        ^\n[REDACTED]/tmplwd33ilb.cpp:43:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i a_hi = _mm_cvtepi8_epi16(_mm_srli_si128(a, 8));\n      |                        ^\n[REDACTED]/tmplwd33ilb.cpp:44:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i b_lo = _mm_cvtepi8_epi16(b);\n      |                        ^\n[REDACTED]/tmplwd33ilb.cpp:45:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i b_hi = _mm_cvtepi8_epi16(_mm_srli_si128(b, 8));\n      |                        ^\n[REDACTED]/tmplwd33ilb.cpp:55:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   55 |             _mm_cvtepi16_epi32(sq_a_lo),\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:56:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   56 |             _mm_cvtepi16_epi32(_mm_srli_si128(sq_a_lo, 8))));\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:58:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   58 |             _mm_cvtepi16_epi32(sq_a_hi),\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:59:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   59 |             _mm_cvtepi16_epi32(_mm_srli_si128(sq_a_hi, 8))));\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:61:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   61 |             _mm_cvtepi16_epi32(sq_b_lo),\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:62:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   62 |             _mm_cvtepi16_epi32(_mm_srli_si128(sq_b_lo, 8))));\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:64:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   64 |             _mm_cvtepi16_epi32(sq_b_hi),\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:65:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   65 |             _mm_cvtepi16_epi32(_mm_srli_si128(sq_b_hi, 8))));\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:67:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   67 |             _mm_cvtepi16_epi32(prod_lo),\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:68:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   68 |             _mm_cvtepi16_epi32(_mm_srli_si128(prod_lo, 8))));\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:70:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   70 |             _mm_cvtepi16_epi32(prod_hi),\n      |             ^\n[REDACTED]/tmplwd33ilb.cpp:71:13: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   71 |             _mm_cvtepi16_epi32(_mm_srli_si128(prod_hi, 8))));\n      |             ^\n16 errors generated.\n"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpysdwqnpg.cpp:42:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i a_lo = _mm_cvtepi8_epi16(a);\n      |                        ^\n[REDACTED]/tmpysdwqnpg.cpp:43:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i a_hi = _mm_cvtepi8_epi16(_mm_srli_si128(a, 8));\n      |                        ^\n[REDACTED]/tmpysdwqnpg.cpp:44:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i b_lo = _mm_cvtepi8_epi16(b);\n      |                        ^\n[REDACTED]/tmpysdwqnpg.cpp:45:24: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'squarediff_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i b_hi = _mm_cvtepi8_epi16(_mm_srli_si128(b, 8));\n      |                        ^\n4 errors generated.\n"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_42_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplhvu8iro.cpp:50:22: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_multi_select_simd' that is compiled without support for 'sse4.1'\n   50 |         __m128i c1 = _mm_cvtepi8_epi32(_mm_loadu_si32(&cond1[i]));\n      |                      ^\n[REDACTED]/tmplhvu8iro.cpp:51:22: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_multi_select_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i c2 = _mm_cvtepi8_epi32(_mm_loadu_si32(&cond2[i]));\n      |                      ^\n2 errors generated.\n"}
{"task_id": "SimdBench_45_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2d94qcql.cpp:54:30: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_multi_select_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i cond1_mask = _mm_cvtepi8_epi32(_mm_loadu_si32(c1));\n      |                              ^\n[REDACTED]/tmp2d94qcql.cpp:55:30: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_multi_select_simd' that is compiled without support for 'sse4.1'\n   55 |         __m128i cond2_mask = _mm_cvtepi8_epi32(_mm_loadu_si32(c2));\n      |                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd8fjv_a9.cpp:54:30: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_multi_select_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i cond1_mask = _mm_cvtepi8_epi32(_mm_loadu_si32(c1));\n      |                              ^\n[REDACTED]/tmpd8fjv_a9.cpp:55:30: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'tensor_multi_select_simd' that is compiled without support for 'sse4.1'\n   55 |         __m128i cond2_mask = _mm_cvtepi8_epi32(_mm_loadu_si32(c2));\n      |                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpao2foyur.cpp:51:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   51 |         uint8_t count0 = _mm_popcnt_u32(a0);\n      |                          ^\n[REDACTED]/tmpao2foyur.cpp:52:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   52 |         uint8_t count1 = _mm_popcnt_u32(a1);\n      |                          ^\n[REDACTED]/tmpao2foyur.cpp:53:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   53 |         uint8_t count2 = _mm_popcnt_u32(a2);\n      |                          ^\n[REDACTED]/tmpao2foyur.cpp:54:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   54 |         uint8_t count3 = _mm_popcnt_u32(a3);\n      |                          ^\n[REDACTED]/tmpao2foyur.cpp:65:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   65 |         out[i] = _mm_popcnt_u32(A[i]);\n      |                  ^\n5 errors generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr8dxxqdj.cpp:51:25: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   51 |             counts[j] = _mm_popcnt_u32(val[j]);\n      |                         ^\n[REDACTED]/tmpr8dxxqdj.cpp:60:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   60 |         out[i] = _mm_popcnt_u32(A[i]);\n      |                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprmbutg4m.cpp:51:25: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   51 |             counts[j] = _mm_popcnt_u32(vals[j]);\n      |                         ^\n[REDACTED]/tmprmbutg4m.cpp:63:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   63 |         out[i] = _mm_popcnt_u32(A[i]);\n      |                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7jzcl1xf.cpp:51:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   51 |         uint8_t count0 = _mm_popcnt_u32(a0);\n      |                          ^\n[REDACTED]/tmp7jzcl1xf.cpp:52:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   52 |         uint8_t count1 = _mm_popcnt_u32(a1);\n      |                          ^\n[REDACTED]/tmp7jzcl1xf.cpp:53:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   53 |         uint8_t count2 = _mm_popcnt_u32(a2);\n      |                          ^\n[REDACTED]/tmp7jzcl1xf.cpp:54:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   54 |         uint8_t count3 = _mm_popcnt_u32(a3);\n      |                          ^\n[REDACTED]/tmp7jzcl1xf.cpp:65:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'popcnt'\n   65 |         out[i] = _mm_popcnt_u32(A[i]);\n      |                  ^\n5 errors generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9zpsw14f.cpp:40:23: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   40 |         __m128i mod = _mm_rem_epi32(a, three);\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6xc6xoyd.cpp:44:30: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   44 |         __m128i div_result = _mm_div_epi32(a, three);\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwbt0a9sh.cpp:44:30: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   44 |         __m128i mod_result = _mm_rem_epi32(vec_a, vec_three);\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5n_a0ohu.cpp:45:23: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   45 |         __m128i mod = _mm_rem_epi32(vec_a, three);\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvxh4pxmf.cpp:41:23: error: use of undeclared identifier '_mm_rem_epu32'\n   41 |         __m128i mod = _mm_rem_epu32(vec_a, three);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpthlq8epx.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmpthlq8epx.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmpthlq8epx.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmpthlq8epx.cpp:53:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   53 |         __m128i result = _mm_blendv_epi8(negated, rotated, cond);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptuwyolsi.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmptuwyolsi.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmptuwyolsi.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmptuwyolsi.cpp:57:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   57 |         __m128i result = _mm_blendv_epi8(negated, rotated, cond);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_cxs58pa.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmp_cxs58pa.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmp_cxs58pa.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmp_cxs58pa.cpp:56:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   56 |         __m128i result = _mm_blendv_epi8(negated, rotated, cond);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxt1q8rew.cpp:48:84: error: use of undeclared identifier '_mm_abs_ps'; did you mean '_mm_abs_ph'?\n   48 |         __m128 eq_zero = _mm_andnot_ps(_mm_or_ps(gt_eps, lt_neg_eps), _mm_cmple_ps(_mm_abs_ps(diff), eps));\n      |                                                                                    ^~~~~~~~~~\n      |                                                                                    _mm_abs_ph\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlfp16intrin.h:322:49: note: '_mm_abs_ph' declared here\n  322 | static __inline__ __m128h __DEFAULT_FN_ATTRS128 _mm_abs_ph(__m128h __A) {\n      |                                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_51_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_51_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_51_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpv_s0j4p9.cpp:33:24: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   33 |         __m128i b_lo = _mm_cvtepi16_epi32(a);\n      |                        ^\n[REDACTED]/tmpv_s0j4p9.cpp:35:24: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i b_hi = _mm_cvtepi16_epi32(a_hi);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_54_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_54_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4rmro8bi.cpp:53:29: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'conditional_normalize_simd' that is compiled without support for 'sse4.1'\n   53 |         __m128 result_vec = _mm_blendv_ps(a_vec, norm_vec, ctrl_mask);\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpq1n7g314.cpp:60:25: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'conditional_normalize_simd' that is compiled without support for 'sse4.1'\n   60 |         __m128 result = _mm_blendv_ps(a, norm, mask);\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphotqtol8.cpp:53:25: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'conditional_normalize_simd' that is compiled without support for 'sse4.1'\n   53 |         __m128 result = _mm_blendv_ps(a, norm, mask);\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_55_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqeqoayif.cpp:27:1: error: expected unqualified-id\n   27 | <xaiArtifact artifact_id=\"4d2df200-e816-4c36-abe0-d754b6cad5cc\" artifact_version_id=\"09af5a7a-f188-4f4e-986c-7417ac1579e4\" title=\"int_to_float_sqrt_simd.c\" contentType=\"text/x-csrc\">\n      | ^\n[REDACTED]/tmpqeqoayif.cpp:46:1: error: expected unqualified-id\n   46 | </xaiArtifact>\n      | ^\n[REDACTED]/tmpqeqoayif.cpp:69:17: error: use of undeclared identifier 'correctness_check'\n   69 |     bool pass = correctness_check(ITERATIONS);\n      |                 ^\n3 errors generated.\n"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_57_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvmhhzj46.cpp:49:51: error: argument to '__builtin_ia32_pslldqi128_byteshift' must be a constant integer\n   49 |                 cond_vec = _mm_or_si128(cond_vec, _mm_slli_si128(one, j*4));\n      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2686:13: note: expanded from macro '_mm_slli_si128'\n 2686 |   ((__m128i)__builtin_ia32_pslldqi128_byteshift((__v2di)(__m128i)(a),          \\\n      |             ^\n 2687 |                                                 (int)(imm)))\n      |                                                 ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_59_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj9xkthhk.cpp:60:20: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'indexed_sum_simd' that is compiled without support for 'sse3'\n   60 |     __m128d hsum = _mm_hadd_pd(sum, sum);\n      |                    ^\n1 error generated.\n"}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0trpcbhe.cpp:70:28: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'simple_conv2d_simd' that is compiled without support for 'sse3'\n   70 |             __m128d hsum = _mm_hadd_pd(sum, sum);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp99qi5wc5.cpp:69:19: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'simple_conv2d_simd' that is compiled without support for 'sse3'\n   69 |             sum = _mm_hadd_pd(sum, sum);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "runtime failed: corrupted size vs. prev_size\n"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6wpyy1cf.cpp:57:11: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'mean_absolute_deviation_simd' that is compiled without support for 'sse3'\n   57 |     sum = _mm_hadd_pd(sum, sum);\n      |           ^\n[REDACTED]/tmp6wpyy1cf.cpp:82:11: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'mean_absolute_deviation_simd' that is compiled without support for 'sse3'\n   82 |     sum = _mm_hadd_pd(sum, sum);\n      |           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_64_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_65_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkh28gff2.cpp:68:22: error: cannot cast from type '__m128i' (vector of 2 'long long' values) to pointer type '__m128i *'\n   68 |     _mm_storeu_si128((__m128i*)prod, prods);\n      |                      ^~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpukxj895a.cpp:52:26: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i vec_lo = _mm_cvtepi16_epi32(vec);\n      |                          ^\n[REDACTED]/tmpukxj895a.cpp:53:26: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   53 |         __m128i vec_hi = _mm_cvtepi16_epi32(_mm_srli_si128(vec, 8));\n      |                          ^\n[REDACTED]/tmpukxj895a.cpp:60:27: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   60 |         __m128i prod_lo = _mm_cvtepi16_epi32(vec);\n      |                           ^\n[REDACTED]/tmpukxj895a.cpp:61:27: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   61 |         __m128i prod_hi = _mm_cvtepi16_epi32(_mm_srli_si128(vec, 8));\n      |                           ^\n[REDACTED]/tmpukxj895a.cpp:63:20: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   63 |         prod_vec = _mm_mullo_epi32(prod_vec, prod_lo);\n      |                    ^\n[REDACTED]/tmpukxj895a.cpp:64:20: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   64 |         prod_vec = _mm_mullo_epi32(prod_vec, prod_hi);\n      |                    ^\n[REDACTED]/tmpukxj895a.cpp:68:24: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   68 |     __m128i sum_hadd = _mm_hadd_epi32(sum_vec, sum_vec);\n      |                        ^\n[REDACTED]/tmpukxj895a.cpp:69:16: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   69 |     sum_hadd = _mm_hadd_epi32(sum_hadd, sum_hadd);\n      |                ^\n[REDACTED]/tmpukxj895a.cpp:73:25: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   73 |     __m128i prod_hadd = _mm_hadd_epi32(prod_vec, prod_vec);\n      |                         ^\n[REDACTED]/tmpukxj895a.cpp:74:17: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   74 |     prod_hadd = _mm_hadd_epi32(prod_hadd, prod_hadd);\n      |                 ^\n10 errors generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfj5a44bb.cpp:58:41: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   58 |         __m128i vec_lo = _mm_slli_epi32(_mm_cvtepi16_epi32(vec), 16);\n      |                                         ^\n[REDACTED]/tmpfj5a44bb.cpp:59:41: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   59 |         __m128i vec_hi = _mm_slli_epi32(_mm_cvtepi16_epi32(_mm_srli_si128(vec, 8)), 16);\n      |                                         ^\n[REDACTED]/tmpfj5a44bb.cpp:61:21: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   61 |         prod_vec1 = _mm_mullo_epi32(prod_vec1, vec_lo);\n      |                     ^\n[REDACTED]/tmpfj5a44bb.cpp:62:21: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   62 |         prod_vec2 = _mm_mullo_epi32(prod_vec2, vec_hi);\n      |                     ^\n4 errors generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7jaikf4j.cpp:59:26: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   59 |         __m128i vec_lo = _mm_cvtepi16_epi32(vec);\n      |                          ^\n[REDACTED]/tmp7jaikf4j.cpp:60:26: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   60 |         __m128i vec_hi = _mm_cvtepi16_epi32(_mm_srli_si128(vec, 8));\n      |                          ^\n[REDACTED]/tmp7jaikf4j.cpp:61:43: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   61 |         __m128i prod_lo = _mm_mullo_epi32(_mm_cvtepi16_epi32(prod_vec), vec_lo);\n      |                                           ^\n[REDACTED]/tmp7jaikf4j.cpp:61:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   61 |         __m128i prod_lo = _mm_mullo_epi32(_mm_cvtepi16_epi32(prod_vec), vec_lo);\n      |                           ^\n[REDACTED]/tmp7jaikf4j.cpp:62:43: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   62 |         __m128i prod_hi = _mm_mullo_epi32(_mm_cvtepi16_epi32(_mm_srli_si128(prod_vec, 8)), vec_hi);\n      |                                           ^\n[REDACTED]/tmp7jaikf4j.cpp:62:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   62 |         __m128i prod_hi = _mm_mullo_epi32(_mm_cvtepi16_epi32(_mm_srli_si128(prod_vec, 8)), vec_hi);\n      |                           ^\n[REDACTED]/tmp7jaikf4j.cpp:67:24: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   67 |     __m128i sum_hadd = _mm_hadd_epi16(sum_vec, sum_vec);\n      |                        ^\n[REDACTED]/tmp7jaikf4j.cpp:68:16: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   68 |     sum_hadd = _mm_hadd_epi16(sum_hadd, sum_hadd);\n      |                ^\n[REDACTED]/tmp7jaikf4j.cpp:69:16: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   69 |     sum_hadd = _mm_hadd_epi16(sum_hadd, sum_hadd);\n      |                ^\n9 errors generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpds_k_s2z.cpp:50:19: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   50 |         max_vec = _mm_max_epu32(curr_vec, max_vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_u0ypn4s.cpp:49:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   49 |         current_max = _mm_max_epu32(data, current_max);\n      |                       ^\n[REDACTED]/tmp_u0ypn4s.cpp:54:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   54 |         current_max = _mm_max_epu32(current_max, shuffle1);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmponsv09us.cpp:49:19: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   49 |         max_vec = _mm_max_epu32(curr_vec, max_vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdt0paqxr.cpp:48:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   48 |         current_max = _mm_max_epu32(data, current_max);\n      |                       ^\n[REDACTED]/tmpdt0paqxr.cpp:52:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   52 |         current_max = _mm_max_epu32(current_max, shuffle1);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoeye28cc.cpp:49:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   49 |         current_max = _mm_max_epu32(data, current_max);\n      |                       ^\n[REDACTED]/tmpoeye28cc.cpp:54:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   54 |         current_max = _mm_max_epu32(current_max, shuffle1);\n      |                       ^\n[REDACTED]/tmpoeye28cc.cpp:56:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   56 |         current_max = _mm_max_epu32(current_max, shuffle2);\n      |                       ^\n[REDACTED]/tmpoeye28cc.cpp:58:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   58 |         current_max = _mm_max_epu32(current_max, shuffle3);\n      |                       ^\n4 errors generated.\n"}
{"task_id": "SimdBench_68_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_68_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_69_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpw1xpjf1t.cpp:65:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   65 |         max_lengths = _mm_max_epu32(len_vec, max_lengths);\n      |                       ^\n[REDACTED]/tmpw1xpjf1t.cpp:66:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   66 |         max_indices = _mm_blendv_epi8(max_indices, idx_vec, cmp);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpp3arwo48.cpp:53:27: error: '__builtin_ia32_vec_set_v4si' needs target feature sse4.1\n   53 |                 max_len = _mm_insert_epi32(max_len, strings[i].length(), 0);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n[REDACTED]/tmpp3arwo48.cpp:57:27: error: '__builtin_ia32_vec_set_v4si' needs target feature sse4.1\n   57 |                 max_len = _mm_insert_epi32(max_len, strings[i + 1].length(), 1);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n[REDACTED]/tmpp3arwo48.cpp:61:27: error: '__builtin_ia32_vec_set_v4si' needs target feature sse4.1\n   61 |                 max_len = _mm_insert_epi32(max_len, strings[i + 2].length(), 2);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n[REDACTED]/tmpp3arwo48.cpp:65:27: error: '__builtin_ia32_vec_set_v4si' needs target feature sse4.1\n   65 |                 max_len = _mm_insert_epi32(max_len, strings[i + 3].length(), 3);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n4 errors generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy4cjmfww.cpp:48:28: error: no matching function for call to 'min'\n   48 |         size_t remaining = std::min(4, n - 1 - i);\n      |                            ^~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/algorithmfwd.h:420:5: note: candidate template ignored: deduced conflicting types for parameter '_Tp' ('int' vs. 'size_t' (aka 'unsigned long'))\n  420 |     min(const _Tp&, const _Tp&);\n      |     ^\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5785:5: note: candidate template ignored: could not match 'initializer_list<_Tp>' against 'int'\n 5785 |     min(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5775:5: note: candidate function template not viable: requires single argument '__l', but 2 arguments were provided\n 5775 |     min(initializer_list<_Tp> __l)\n      |     ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/algorithmfwd.h:425:5: note: candidate function template not viable: requires 3 arguments, but 2 were provided\n  425 |     min(const _Tp&, const _Tp&, _Compare);\n      |     ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxy6myaa3.cpp:40:24: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'largest_divisor_simd' that is compiled without support for 'sse4.1'\n   40 |         __m128i mask = _mm_cmpeq_epi64(remainders, zero);\n      |                        ^\n[REDACTED]/tmpxy6myaa3.cpp:44:22: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'largest_divisor_simd' that is compiled without support for 'sse4.1'\n   44 |             result = _mm_max_epu32(result, masked_divisors);\n      |                      ^\n2 errors generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphfu_gd5s.cpp:43:30: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'largest_divisor_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i is_divisor = _mm_cmpeq_epi64(remainders, zero);\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmygwy2qz.cpp:40:27: error: use of undeclared identifier '_mm_div_epu64'; did you mean '_mm_min_epu64'?\n   40 |         __m128i vec_div = _mm_div_epu64(vec_n, vec_curr);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epu64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3260:1: note: '_mm_min_epu64' declared here\n 3260 | _mm_min_epu64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp20m_vx2u.cpp:41:27: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'largest_divisor_simd' that is compiled without support for 'sse4.1'\n   41 |         __m128i vec_cmp = _mm_cmpeq_epi64(vec_rem, vec_zero);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdb98yr16.cpp:68:31: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   68 |                 int divisor = _mm_extract_epi32(divisors, i);\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzm6n0l7p.cpp:67:32: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   67 |             __m128i vec_quot = _mm_div_epi32(vec_n, vec_i);\n      |                                ^~~~~~~~~~~~~\n      |                                _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy7svrrpg.cpp:71:30: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   71 |                 int curr_i = _mm_extract_epi32(vec_i, j);\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpa8h1ns37.cpp:67:33: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   67 |             __m128i quotients = _mm_div_epi32(n_vec, current_divisors);\n      |                                 ^~~~~~~~~~~~~\n      |                                 _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplyfzwxn7.cpp:41:27: error: use of undeclared identifier '_mm_div_epu64'; did you mean '_mm_min_epu64'?\n   41 |         __m128i vec_div = _mm_div_epu64(vec_n, vec_i);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epu64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3260:1: note: '_mm_min_epu64' declared here\n 3260 | _mm_min_epu64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9od2ng64.cpp:43:22: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_prime_simd' that is compiled without support for 'sse4.1'\n   43 |         vec_result = _mm_cmpeq_epi64(_mm_and_si128(vec_n, vec_i), _mm_setzero_si128());\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7c5gyxd1.cpp:43:22: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   43 |         vec_result = _mm_div_epi64(vec_n, vec_i);\n      |                      ^~~~~~~~~~~~~\n      |                      _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n[REDACTED]/tmp7c5gyxd1.cpp:44:48: error: use of undeclared identifier '_mm_mul_epi64'\n   44 |         __m128i vec_rem = _mm_sub_epi64(vec_n, _mm_mul_epi64(vec_result, vec_i));\n      |                                                ^\n2 errors generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf9frlnza.cpp:47:30: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   47 |             int32_t curr_i = _mm_extract_epi32(vec_i, j);\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpk3sj6h4s.cpp:42:24: error: use of undeclared identifier '_mm_div_epu64'; did you mean '_mm_min_epu64'?\n   42 |         __m128i quot = _mm_div_epu64(vec_n, vec_i);\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_min_epu64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3260:1: note: '_mm_min_epu64' declared here\n 3260 | _mm_min_epu64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_77_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu0wger7m.cpp:38:1: error: expected unqualified-id\n   38 | <xaiArtifact artifact_id=\"95bb8bd2-fd60-421d-b26e-27c18ddf0df9\" artifact_version_id=\"6cf3ed94-c4ea-4175-8554-6542ff09500a\" title=\"solve_simd.cpp\" contentType=\"text/x-c++src\">\n      | ^\n[REDACTED]/tmpu0wger7m.cpp:116:1: error: expected unqualified-id\n  116 | </xaiArtifact>\n      | ^\n[REDACTED]/tmpu0wger7m.cpp:141:32: error: use of undeclared identifier 'solve_simd'\n  141 |         std::string res_simd = solve_simd(s);\n      |                                ^\n[REDACTED]/tmpu0wger7m.cpp:151:17: error: use of undeclared identifier 'humaneval_check'\n  151 |     bool pass = humaneval_check() && correctness_check(ITERATIONS);\n      |                 ^\n4 errors generated.\n"}
{"task_id": "SimdBench_77_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp52qypeqk.cpp:75:13: error: use of undeclared identifier '_mm_cmpge_epi8'; did you mean '_mm_cmpgt_epi8'?\n   75 |             _mm_cmpge_epi8(input, lower_bound),\n      |             ^~~~~~~~~~~~~~\n      |             _mm_cmpgt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3078:46: note: '_mm_cmpgt_epi8' declared here\n 3078 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmp52qypeqk.cpp:76:13: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   76 |             _mm_cmple_epi8(input, upper_bound)\n      |             ^~~~~~~~~~~~~~\n      |             _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmp52qypeqk.cpp:81:13: error: use of undeclared identifier '_mm_cmpge_epi8'; did you mean '_mm_cmpgt_epi8'?\n   81 |             _mm_cmpge_epi8(input, lower_bound_cap),\n      |             ^~~~~~~~~~~~~~\n      |             _mm_cmpgt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3078:46: note: '_mm_cmpgt_epi8' declared here\n 3078 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmp52qypeqk.cpp:82:13: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   82 |             _mm_cmple_epi8(input, upper_bound_cap)\n      |             ^~~~~~~~~~~~~~\n      |             _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n4 errors generated.\n"}
{"task_id": "SimdBench_77_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_78_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppueuerrj.cpp:86:33: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   86 |                 result[i + j] = _mm_extract_epi32(blended, j);\n      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvlvipdxk.cpp:68:27: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'sort_third_simd' that is compiled without support for 'sse4.1'\n   68 |         __m128i blended = _mm_blendv_epi8(existing, sorted_vals, mask);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0hjaeqzg.cpp:49:25: error: use of undeclared identifier '_mm_srem_epi32'\n   49 |         __m128i rem11 = _mm_srem_epi32(indices, div11);\n      |                         ^\n[REDACTED]/tmp0hjaeqzg.cpp:50:25: error: use of undeclared identifier '_mm_srem_epi32'\n   50 |         __m128i rem13 = _mm_srem_epi32(indices, div13);\n      |                         ^\n[REDACTED]/tmp0hjaeqzg.cpp:60:17: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   60 |             if (_mm_extract_epi32(div_mask, j)) {\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvt3dxmmx.cpp:51:25: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   51 |         __m128i div11 = _mm_div_epu32(indices, eleven);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpvt3dxmmx.cpp:52:25: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   52 |         __m128i div13 = _mm_div_epu32(indices, thirteen);\n      |                         ^~~~~~~~~~~~~\n      |                         _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpvt3dxmmx.cpp:65:19: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   65 |             num = _mm_div_epu32(num, ten);\n      |                   ^~~~~~~~~~~~~\n      |                   _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n3 errors generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4jyk_bn1.cpp:55:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'fizz_buzz_simd' that is compiled without support for 'popcnt'\n   55 |                 count += _mm_popcnt_u32(mask);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf_jzqpr6.cpp:50:29: error: argument to '__builtin_ia32_vec_set_v4si' must be a constant integer\n   50 |                 divisible = _mm_insert_epi32(divisible, 1, j);\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n[REDACTED]/tmpf_jzqpr6.cpp:65:17: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   65 |             if (_mm_extract_epi32(divisible, j)) {\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmpf_jzqpr6.cpp:70:33: error: argument to '__builtin_ia32_vec_set_v16qi' must be a constant integer\n   70 |                         chars = _mm_insert_epi8(chars, str[j][k + m], m);\n      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:923:13: note: expanded from macro '_mm_insert_epi8'\n  923 |   ((__m128i)__builtin_ia32_vec_set_v16qi((__v16qi)(__m128i)(X), (int)(I),      \\\n      |             ^\n  924 |                                          (int)(N)))\n      |                                          ~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5drqay0y.cpp:72:13: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'sort_even_simd' that is compiled without support for 'sse4.1'\n   72 |         v = _mm_blendv_ps(vmax, vmin, mask);\n      |             ^\n[REDACTED]/tmp5drqay0y.cpp:79:13: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'sort_even_simd' that is compiled without support for 'sse4.1'\n   79 |         v = _mm_blendv_ps(vmax, vmin, mask);\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_83_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_83_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_84_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo1ctxfo7.cpp:65:30: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   65 |         __m128i div_result = _mm_div_epu32(x_vec, base_vec);\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp67zovcuq.cpp:58:17: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   58 |         x_vec = _mm_div_epu32(x_vec, base_vec);\n      |                 ^~~~~~~~~~~~~\n      |                 _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6f0x_x95.cpp:47:23: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   47 |         __m128i rev = _mm_shuffle_epi8(right, _mm_setr_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph3m5kbxv.cpp:47:29: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   47 |         __m128i right_rev = _mm_shuffle_epi8(right, _mm_setr_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpq0it01_k.cpp:47:34: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   47 |         __m128i right_reversed = _mm_shuffle_epi8(right, _mm_setr_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdjz18ikz.cpp:47:28: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   47 |         __m128i reversed = _mm_shuffle_epi8(right, _mm_setr_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4w21x86l.cpp:56:17: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   56 |         right = _mm_shuffle_epi8(right, shuffle_mask);\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp85ksa9my.cpp:61:23: error: use of undeclared identifier '_mm_div_epu8'; did you mean '_mm_min_epu8'?\n   61 |         __m128i div = _mm_div_epu8(modded, mod_mask);\n      |                       ^~~~~~~~~~~~\n      |                       _mm_min_epu8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2316:46: note: '_mm_min_epu8' declared here\n 2316 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu8(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpclecvyru.cpp:58:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   58 |         count += _mm_popcnt_u32(open_mask);\n      |                  ^\n[REDACTED]/tmpclecvyru.cpp:59:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   59 |         count -= _mm_popcnt_u32(close_mask);\n      |                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmujyjhyj.cpp:59:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   59 |         count += _mm_popcnt_u32(lt_bits);\n      |                  ^\n[REDACTED]/tmpmujyjhyj.cpp:61:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   61 |         count -= _mm_popcnt_u32(gt_bits);\n      |                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpps978rv7.cpp:60:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   60 |             count += _mm_popcnt_u32(open_mask);\n      |                      ^\n[REDACTED]/tmpps978rv7.cpp:61:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   61 |             count -= _mm_popcnt_u32(close_mask);\n      |                      ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps318aiq_.cpp:61:30: error: use of undeclared identifier '_popcnt_u32'\n   61 |             int open_count = _popcnt_u32(open_mask);\n      |                              ^\n[REDACTED]/tmps318aiq_.cpp:62:31: error: use of undeclared identifier '_popcnt_u32'\n   62 |             int close_count = _popcnt_u32(close_mask);\n      |                               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmx_qqj4b.cpp:54:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   54 |         int open_count = _mm_popcnt_u32(open_mask);\n      |                          ^\n[REDACTED]/tmpmx_qqj4b.cpp:55:27: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   55 |         int close_count = _mm_popcnt_u32(close_mask);\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2d19subz.cpp:65:60: error: argument to '__builtin_ia32_psrldqi128_byteshift' must be a constant integer\n   65 |                 sum = _mm_add_epi32(sum, _mm_cvtepi8_epi32(_mm_srli_si128(values, j)));\n      |                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2895:13: note: expanded from macro '_mm_srli_si128'\n 2895 |   ((__m128i)__builtin_ia32_psrldqi128_byteshift((__v2di)(__m128i)(a),          \\\n      |             ^\n 2896 |                                                 (int)(imm)))\n      |                                                 ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoiirv1ka.cpp:55:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   55 |         int open_count = _mm_popcnt_u32(open_mask);\n      |                          ^\n[REDACTED]/tmpoiirv1ka.cpp:57:27: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   57 |         int close_count = _mm_popcnt_u32(close_mask);\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_91_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_91_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuufhy2i9.cpp:67:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'vowels_count_simd' that is compiled without support for 'popcnt'\n   67 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpyt56dkud.cpp:68:24: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'vowels_count_simd' that is compiled without support for 'popcnt'\n   68 |         vowel_count += _mm_popcnt_u32(mask);\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3_iprv6s.cpp:78:24: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'vowels_count_simd' that is compiled without support for 'popcnt'\n   78 |         vowel_count += _mm_popcnt_u32(_mm_movemask_epi8(vowels));\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvo1ogsdz.cpp:69:24: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'vowels_count_simd' that is compiled without support for 'popcnt'\n   69 |         vowel_count += _mm_popcnt_u32(mask);\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuz6t9d86.cpp:68:24: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'vowels_count_simd' that is compiled without support for 'popcnt'\n   68 |         vowel_count += _mm_popcnt_u32(mask);\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_93_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjvavgvij.cpp:51:24: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   51 |         __m128i le_Z = _mm_cmple_epi8(chars, upper_bound);\n      |                        ^~~~~~~~~~~~~~\n      |                        _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_94_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpetx15w75.cpp:54:27: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i new_min = _mm_min_epu32(values, min_val);\n      |                           ^\n[REDACTED]/tmpetx15w75.cpp:58:19: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   58 |         min_val = _mm_blendv_epi8(min_val, new_min, update_mask);\n      |                   ^\n[REDACTED]/tmpetx15w75.cpp:59:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   59 |         min_indices = _mm_blendv_epi8(min_indices, _mm_add_epi32(indices, _mm_set1_epi32(i)), cmp);\n      |                       ^\n3 errors generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptpklaj3k.cpp:56:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   56 |         min_val = _mm_min_epi32(masked_vals, min_val);\n      |                   ^\n[REDACTED]/tmptpklaj3k.cpp:77:15: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   77 |     min_val = _mm_min_epi32(masked_vals, min_val);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpx1gcklo0.cpp:57:28: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   57 |         __m128i curr_min = _mm_min_epu32(vals, min_val);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcup_2eqk.cpp:61:19: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   61 |         min_val = _mm_min_epu32(masked_values, min_val);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5yi81t66.cpp:98:24: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   98 |         __m128i sum1 = _mm_hadd_epi32(vec, vec);\n      |                        ^\n[REDACTED]/tmp5yi81t66.cpp:99:24: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   99 |         __m128i sum2 = _mm_hadd_epi32(sum1, sum1);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvfda371t.cpp:98:27: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   98 |         __m128i sum_vec = _mm_hadd_epi32(vec, vec);\n      |                           ^\n[REDACTED]/tmpvfda371t.cpp:99:19: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   99 |         sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdhl6t44_.cpp:46:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   46 |     __m128i temp = _mm_hadd_epi32(sum, sum);\n      |                    ^\n[REDACTED]/tmpdhl6t44_.cpp:47:12: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   47 |     temp = _mm_hadd_epi32(temp, temp);\n      |            ^\n2 errors generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpivgqqe0p.cpp:73:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   73 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n[REDACTED]/tmpivgqqe0p.cpp:74:15: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   74 |     sum_vec = _mm_hadd_epi32(sum_vec, sum_vec);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcuzdf4vf.cpp:50:20: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'smallest_change_simd' that is compiled without support for 'popcnt'\n   50 |         changes += _mm_popcnt_u32(~mask & 0xF);\n      |                    ^\n1 error generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjti51h1a.cpp:53:20: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'smallest_change_simd' that is compiled without support for 'popcnt'\n   53 |         changes += _mm_popcnt_u32(~mask & 0xF);\n      |                    ^\n1 error generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuz209qg2.cpp:43:23: error: argument to '__builtin_ia32_vec_set_v4si' must be a constant integer\n   43 |             lengths = _mm_insert_epi32(lengths, len, j);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n[REDACTED]/tmpuz209qg2.cpp:55:23: error: argument to '__builtin_ia32_vec_set_v4si' must be a constant integer\n   55 |             lengths = _mm_insert_epi32(lengths, len, j);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsy0gvxzj.cpp:61:19: error: use of undeclared identifier '_mm_cmple_epu32'\n   61 |     __m128i cmp = _mm_cmple_epu32(sum1_vec, sum2_vec);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_2v6_h7g.cpp:44:23: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i cmp = _mm_cmpeq_epi64(result, vec_x);\n      |                       ^\n[REDACTED]/tmp_2v6_h7g.cpp:47:18: error: always_inline function '_mm_mullo_epi64' requires target feature 'avx512vl', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'avx512vl'\n   47 |         result = _mm_mullo_epi64(result, vec_n);\n      |                  ^\n[REDACTED]/tmp_2v6_h7g.cpp:49:34: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.2'\n   49 |         __m128i overflow_check = _mm_cmpgt_epi64(result, vec_x);\n      |                                  ^\n[REDACTED]/tmp_2v6_h7g.cpp:50:68: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   50 |         if (_mm_movemask_epi8(overflow_check) || _mm_movemask_epi8(_mm_cmpeq_epi64(result, zero))) {\n      |                                                                    ^\n4 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp17xul8lo.cpp:58:29: error: use of undeclared identifier '_mm_div_epu64'; did you mean '_mm_min_epu64'?\n   58 |         __m128i div_check = _mm_div_epu64(vec_x, vec_result);\n      |                             ^~~~~~~~~~~~~\n      |                             _mm_min_epu64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3260:1: note: '_mm_min_epu64' declared here\n 3260 | _mm_min_epu64 (__m128i __A, __m128i __B) {\n      | ^\n[REDACTED]/tmp17xul8lo.cpp:59:29: error: use of undeclared identifier '_mm_rem_epu64'\n   59 |         __m128i rem_check = _mm_rem_epu64(vec_x, vec_result);\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp42eggoqs.cpp:45:31: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   45 |         if (_mm_movemask_epi8(_mm_cmpeq_epi64(vec_result, vec_x))) {\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjvmi03pi.cpp:43:31: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i vec_compare = _mm_cmpeq_epi64(vec_result, vec_x);\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgui_b4u5.cpp:44:22: error: always_inline function '_mm_mullo_epi64' requires target feature 'avx512vl', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'avx512vl'\n   44 |         vec_result = _mm_mullo_epi64(vec_result, vec_n);\n      |                      ^\n[REDACTED]/tmpgui_b4u5.cpp:45:23: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i cmp = _mm_cmpeq_epi64(vec_result, vec_x);\n      |                       ^\n[REDACTED]/tmpgui_b4u5.cpp:49:31: error: always_inline function '_mm_cmpgt_epi64' requires target feature 'sse4.2', but would be inlined into function 'is_simple_power_simd' that is compiled without support for 'sse4.2'\n   49 |         if (_mm_movemask_epi8(_mm_cmpgt_epi64(vec_result, vec_x)) != 0) {\n      |                               ^\n3 errors generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8gayjuvr.cpp:58:18: error: use of undeclared identifier '_popcnt_u32'\n   58 |         count += _popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9xksbe79.cpp:56:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   56 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp84kyvd_p.cpp:49:43: error: argument to '__builtin_ia32_vec_ext_v16qi' must be a constant integer\n   49 |             __m128i prime = _mm_set1_epi8(_mm_extract_epi8(primes, j));\n      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n 1030 |                                                     (int)(N)))\n      |                                                     ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpibeqjfok.cpp:56:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   56 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu44zvgar.cpp:34:26: error: no matching function for call to '_mm_setr_epi8'\n   34 |     __m128i prime_mask = _mm_setr_epi8(\n      |                          ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3772:1: note: candidate function not viable: requires 16 arguments, but 32 were provided\n 3772 | _mm_setr_epi8(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5,\n      | ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 3773 |               char __b6, char __b7, char __b8, char __b9, char __b10,\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 3774 |               char __b11, char __b12, char __b13, char __b14, char __b15) {\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpu44zvgar.cpp:62:18: error: use of undeclared identifier '_popcnt_u32'\n   62 |         count += _popcnt_u32(mask);\n      |                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjo2ksocv.cpp:42:26: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   42 |     __m128i remainders = _mm_div_epu32(len_vec, divisors); // Integer division\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdn8kmdgj.cpp:51:29: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   51 |         __m128i quotients = _mm_div_epu32(len_vec, divisors);\n      |                             ^~~~~~~~~~~~~\n      |                             _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxxziv5r2.cpp:52:30: error: use of undeclared identifier '_mm_rem_epu32'\n   52 |         __m128i remainders = _mm_rem_epu32(len_vec, divisors);\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptcrc2aek.cpp:28:1: error: expected unqualified-id\n   28 | <xaiArtifact artifact_id=\"714ed3b1-deae-4706-9edc-39af1268573b\" artifact_version_id=\"11780896-04bd-456c-a086-5b724f6c4b6e\" title=\"prime_length_simd.cpp\" contentType=\"text/x-c++src\">\n      | ^\n[REDACTED]/tmptcrc2aek.cpp:62:1: error: expected unqualified-id\n   62 | </xaiArtifact>\n      | ^\n[REDACTED]/tmptcrc2aek.cpp:92:25: error: use of undeclared identifier 'prime_length_simd'; did you mean 'prime_length'?\n   92 |         auto res_simd = prime_length_simd(s);\n      |                         ^~~~~~~~~~~~~~~~~\n      |                         prime_length\n[REDACTED]/tmptcrc2aek.cpp:20:6: note: 'prime_length' declared here\n   20 | bool prime_length(const std::string & str){\n      |      ^\n[REDACTED]/tmptcrc2aek.cpp:103:17: error: use of undeclared identifier 'humaneval_check'\n  103 |     bool pass = humaneval_check() && correctness_check(ITERATIONS);\n      |                 ^\n4 errors generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpa8bazcei.cpp:40:26: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   40 |     __m128i remainders = _mm_div_epu32(len_vec, divisors);\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzivwk09m.cpp:63:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   63 |     __m128i sum1 = _mm_hadd_epi32(sum, sum);\n      |                    ^\n[REDACTED]/tmpzivwk09m.cpp:64:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   64 |     __m128i sum2 = _mm_hadd_epi32(sum1, sum1);\n      |                    ^\n2 errors generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp90p7stbs.cpp:47:18: error: argument to '__builtin_ia32_vec_set_v4si' must be a constant integer\n   47 |         digits = _mm_insert_epi32(digits, digit, digit_count);\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpe47c09fx.cpp:49:15: error: use of undeclared identifier '_mm_div_epu64'; did you mean '_mm_min_epu64'?\n   49 |         vec = _mm_div_epu64(vec, ten);\n      |               ^~~~~~~~~~~~~\n      |               _mm_min_epu64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3260:1: note: '_mm_min_epu64' declared here\n 3260 | _mm_min_epu64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpte617xnk.cpp:47:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'add_simd' that is compiled without support for 'ssse3'\n   47 |     __m128i temp = _mm_hadd_epi32(sum, sum);\n      |                    ^\n[REDACTED]/tmpte617xnk.cpp:48:12: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'add_simd' that is compiled without support for 'ssse3'\n   48 |     temp = _mm_hadd_epi32(temp, temp);\n      |            ^\n2 errors generated.\n"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuezcscmb.cpp:64:17: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   64 |         final = _mm_blendv_epi8(chars, final, is_lower);\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0nk51r1l.cpp:51:13: error: use of undeclared identifier '_mm_cmpge_epu8'\n   51 |             _mm_cmpge_epu8(chars, a_lower),\n      |             ^\n[REDACTED]/tmp0nk51r1l.cpp:52:13: error: use of undeclared identifier '_mm_cmple_epu8'\n   52 |             _mm_cmple_epu8(chars, z_lower)\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoqelepa6.cpp:56:64: error: use of undeclared identifier '_mm_div_epu8'; did you mean '_mm_min_epu8'?\n   56 |         __m128i modded = _mm_sub_epi8(shifted, _mm_mullo_epi16(_mm_div_epu8(shifted, mod), mod));\n      |                                                                ^~~~~~~~~~~~\n      |                                                                _mm_min_epu8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2316:46: note: '_mm_min_epu8' declared here\n 2316 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu8(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0mckma7m.cpp:62:19: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   62 |         shifted = _mm_blendv_epi8(shifted, wrapped, wrap_mask);\n      |                   ^\n[REDACTED]/tmp0mckma7m.cpp:65:25: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   65 |         __m128i final = _mm_blendv_epi8(chars, shifted, is_lower);\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmzpsz4dt.cpp:59:31: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encode_simd' that is compiled without support for 'sse4.1'\n   59 |         __m128i case_result = _mm_blendv_epi8(input, case_swap, \n      |                               ^\n[REDACTED]/tmpmzpsz4dt.cpp:86:32: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encode_simd' that is compiled without support for 'sse4.1'\n   86 |         __m128i final_result = _mm_blendv_epi8(case_result, vowel_shift, vowel_mask);\n      |                                ^\n2 errors generated.\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_106_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_107_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcd707jd9.cpp:78:17: error: use of undeclared identifier '_mm_cmpge_epi8'; did you mean '_mm_cmpgt_epi8'?\n   78 |                 _mm_cmpge_epi8(key_chunk, lower_a),\n      |                 ^~~~~~~~~~~~~~\n      |                 _mm_cmpgt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3078:46: note: '_mm_cmpgt_epi8' declared here\n 3078 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpcd707jd9.cpp:79:17: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   79 |                 _mm_cmple_epi8(key_chunk, lower_z)\n      |                 ^~~~~~~~~~~~~~\n      |                 _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpcd707jd9.cpp:83:17: error: use of undeclared identifier '_mm_cmpge_epi8'; did you mean '_mm_cmpgt_epi8'?\n   83 |                 _mm_cmpge_epi8(key_chunk, upper_A),\n      |                 ^~~~~~~~~~~~~~\n      |                 _mm_cmpgt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3078:46: note: '_mm_cmpgt_epi8' declared here\n 3078 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpcd707jd9.cpp:84:17: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   84 |                 _mm_cmple_epi8(key_chunk, upper_Z)\n      |                 ^~~~~~~~~~~~~~\n      |                 _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpcd707jd9.cpp:103:17: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n  103 |             if (is_upper) {\n      |                 ^~~~~~~~\n[REDACTED]/tmpcd707jd9.cpp:106:24: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n  106 |             } else if (is_lower) {\n      |                        ^~~~~~~~\n6 errors generated.\n"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu83wpan0.cpp:90:17: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   90 |             if (is_upper) {\n      |                 ^~~~~~~~\n[REDACTED]/tmpu83wpan0.cpp:92:24: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   92 |             } else if (is_lower) {\n      |                        ^~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9ltl10tf.cpp:76:17: error: use of undeclared identifier '_mm_cmpge_epu8'\n   76 |                 _mm_cmpge_epu8(chars, lower_a),\n      |                 ^\n[REDACTED]/tmp9ltl10tf.cpp:77:17: error: use of undeclared identifier '_mm_cmple_epu8'\n   77 |                 _mm_cmple_epu8(chars, lower_z)\n      |                 ^\n[REDACTED]/tmp9ltl10tf.cpp:80:17: error: use of undeclared identifier '_mm_cmpge_epu8'\n   80 |                 _mm_cmpge_epu8(chars, upper_A),\n      |                 ^\n[REDACTED]/tmp9ltl10tf.cpp:81:17: error: use of undeclared identifier '_mm_cmple_epu8'\n   81 |                 _mm_cmple_epu8(chars, upper_Z)\n      |                 ^\n[REDACTED]/tmp9ltl10tf.cpp:97:17: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   97 |             if (is_upper) {\n      |                 ^~~~~~~~\n5 errors generated.\n"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpum4yozmf.cpp:78:34: error: use of undeclared identifier '_mm_cmpge_epu8'\n   78 |             __m128i ge_lower_a = _mm_cmpge_epu8(chars, lower_a);\n      |                                  ^\n[REDACTED]/tmpum4yozmf.cpp:79:34: error: use of undeclared identifier '_mm_cmple_epu8'\n   79 |             __m128i le_lower_z = _mm_cmple_epu8(chars, lower_z);\n      |                                  ^\n[REDACTED]/tmpum4yozmf.cpp:83:34: error: use of undeclared identifier '_mm_cmpge_epu8'\n   83 |             __m128i ge_upper_A = _mm_cmpge_epu8(chars, upper_A);\n      |                                  ^\n[REDACTED]/tmpum4yozmf.cpp:84:34: error: use of undeclared identifier '_mm_cmple_epu8'\n   84 |             __m128i le_upper_Z = _mm_cmple_epu8(chars, upper_Z);\n      |                                  ^\n4 errors generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj45alp2k.cpp:43:1: error: expected unqualified-id\n   43 | <xaiArtifact artifact_id=\"a4669b0b-884f-4dcf-8f1a-7d762a6f5751\" artifact_version_id=\"f9b068f9-ab35-4c19-94a8-8e031722a2a8\" title=\"count_up_to_simd.cpp\" contentType=\"text/x-c++src\">\n      | ^\n[REDACTED]/tmpj45alp2k.cpp:92:1: error: expected unqualified-id\n   92 | </xaiArtifact>\n      | ^\n[REDACTED]/tmpj45alp2k.cpp:114:40: error: use of undeclared identifier 'count_up_to_simd'; did you mean 'count_up_to'?\n  114 |         std::vector<int> result_simd = count_up_to_simd(n);\n      |                                        ^~~~~~~~~~~~~~~~\n      |                                        count_up_to\n[REDACTED]/tmpj45alp2k.cpp:20:18: note: 'count_up_to' declared here\n   20 | std::vector<int> count_up_to(int n) {\n      |                  ^\n[REDACTED]/tmpj45alp2k.cpp:125:17: error: use of undeclared identifier 'humaneval_check'\n  125 |     bool pass = humaneval_check() && correctness_check(ITERATIONS);\n      |                 ^\n4 errors generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_yckti1k.cpp:65:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_upper_simd' that is compiled without support for 'popcnt'\n   65 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpz26wobxm.cpp:69:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_upper_simd' that is compiled without support for 'popcnt'\n   69 |         count += _mm_popcnt_u32(mask) / 2; // Divide by 2 as we only count even indices\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp38corifa.cpp:73:24: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_upper_simd' that is compiled without support for 'popcnt'\n   73 |         count += (16 - _mm_popcnt_u32(_mm_movemask_epi8(cmp))) / 255;\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprgnw9ji9.cpp:70:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_upper_simd' that is compiled without support for 'popcnt'\n   70 |         count += _mm_popcnt_u32(mask);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpozy0azl4.cpp:43:46: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'make_a_pile_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i levels = _mm_add_epi32(base, _mm_mullo_epi32(indices, increment));\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_110_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_110_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpn25b3_wp.cpp:51:24: error: no matching function for call to '_mm_set_epi64x'\n   51 |         __m128i nums = _mm_set_epi64x(i + 2, i, i + 3, i + 1);\n      |                        ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3426:46: note: candidate function not viable: requires 2 arguments, but 4 were provided\n 3426 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi64x(long long __q1,\n      |                                              ^              ~~~~~~~~~~~~~~~\n 3427 |                                                             long long __q0) {\n      |                                                             ~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_76x90vs.cpp:51:24: error: no matching function for call to '_mm_set_epi64x'\n   51 |         __m128i nums = _mm_set_epi64x(i + 2, i, i + 3, i + 1);\n      |                        ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3426:46: note: candidate function not viable: requires 2 arguments, but 4 were provided\n 3426 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi64x(long long __q1,\n      |                                              ^              ~~~~~~~~~~~~~~~\n 3427 |                                                             long long __q0) {\n      |                                                             ~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpv4ga8d98.cpp:51:24: error: no matching function for call to '_mm_set_epi64x'\n   51 |         __m128i nums = _mm_set_epi64x(i + 2, i, i + 3, i + 1);\n      |                        ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3426:46: note: candidate function not viable: requires 2 arguments, but 4 were provided\n 3426 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi64x(long long __q1,\n      |                                              ^              ~~~~~~~~~~~~~~~\n 3427 |                                                             long long __q0) {\n      |                                                             ~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphii4zv0t.cpp:54:19: error: use of undeclared identifier '_mm_div_epu64'; did you mean '_mm_min_epu64'?\n   54 |     __m128i avg = _mm_div_epu64(sum, count);\n      |                   ^~~~~~~~~~~~~\n      |                   _mm_min_epu64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3260:1: note: '_mm_min_epu64' declared here\n 3260 | _mm_min_epu64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpthgi19kc.cpp:67:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   67 |         vec_sum = _mm_mullo_epi32(vec_idx, vec_sum);\n      |                   ^\n[REDACTED]/tmpthgi19kc.cpp:75:50: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   75 |             vec_fact = _mm_mullo_epi32(vec_fact, _mm_blendv_epi8(j_vec, one, mask));\n      |                                                  ^\n[REDACTED]/tmpthgi19kc.cpp:75:24: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   75 |             vec_fact = _mm_mullo_epi32(vec_fact, _mm_blendv_epi8(j_vec, one, mask));\n      |                        ^\n[REDACTED]/tmpthgi19kc.cpp:76:24: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   76 |             vec_fact = _mm_min_epi32(vec_fact, mod); // Prevent overflow\n      |                        ^\n[REDACTED]/tmpthgi19kc.cpp:77:38: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   77 |             vec_mod = _mm_srai_epi32(_mm_mullo_epi32(vec_fact, _mm_set1_epi32(10000)), 16);\n      |                                      ^\n[REDACTED]/tmpthgi19kc.cpp:78:48: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   78 |             vec_fact = _mm_sub_epi32(vec_fact, _mm_mullo_epi32(vec_mod, mod));\n      |                                                ^\n[REDACTED]/tmpthgi19kc.cpp:82:15: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   82 |         vec = _mm_blendv_epi8(vec_sum, vec_fact, vec_mask);\n      |               ^\n7 errors generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp18og4h3u.cpp:82:64: error: argument to '__builtin_ia32_pshufd' must be a constant integer\n   82 |             temp[k] = (i + k + 1) % 2 == 0 ? _mm_cvtsi128_si32(_mm_shuffle_epi32(vec_res, k)) % 10000 : _mm_cvtsi128_si32(_mm_shuffle_epi32(vec_sum, k));\n      |                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:13: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |             ^                                           ~~~~~~~~~~\n[REDACTED]/tmp18og4h3u.cpp:82:123: error: argument to '__builtin_ia32_pshufd' must be a constant integer\n   82 |             temp[k] = (i + k + 1) % 2 == 0 ? _mm_cvtsi128_si32(_mm_shuffle_epi32(vec_res, k)) % 10000 : _mm_cvtsi128_si32(_mm_shuffle_epi32(vec_sum, k));\n      |                                                                                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:13: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |             ^                                           ~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7mmria4z.cpp:85:17: error: use of undeclared identifier '_mm_rem_epu32'\n   85 |         final = _mm_rem_epu32(final, ten_thousand);\n      |                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3v6ot38h.cpp:73:26: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   73 |             vec_result = _mm_mullo_epi32(vec_result, _mm_and_si128(vec, even_mask));\n      |                          ^\n[REDACTED]/tmp3v6ot38h.cpp:74:23: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   74 |             vec_mod = _mm_mullo_epi32(vec_result, _mm_set1_epi32(171)); // Approx inverse of 10000\n      |                       ^\n[REDACTED]/tmp3v6ot38h.cpp:75:23: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   75 |             vec_mod = _mm_mullo_epi32(vec_mod, mod);\n      |                       ^\n[REDACTED]/tmp3v6ot38h.cpp:81:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   81 |         vec_sum = _mm_mullo_epi32(vec_i, vec_sum);\n      |                   ^\n[REDACTED]/tmp3v6ot38h.cpp:83:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   83 |         vec_mod = _mm_mullo_epi32(vec_sum, _mm_set1_epi32(171));\n      |                   ^\n[REDACTED]/tmp3v6ot38h.cpp:84:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   84 |         vec_mod = _mm_mullo_epi32(vec_mod, mod);\n      |                   ^\n[REDACTED]/tmp3v6ot38h.cpp:88:22: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   88 |         vec_result = _mm_blendv_epi8(vec_sum, vec_result, even_mask);\n      |                      ^\n7 errors generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0qqsuiww.cpp:76:52: error: use of undeclared identifier '_mm_cmple_epi32'; did you mean '_mm_cmplt_epi32'?\n   76 |             sum = _mm_add_epi32(sum, _mm_and_si128(_mm_cmple_epi32(j_vec, idx), one));\n      |                                                    ^~~~~~~~~~~~~~~\n      |                                                    _mm_cmplt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3180:46: note: '_mm_cmplt_epi32' declared here\n 3180 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi32(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3q4extzr.cpp:59:24: error: use of undeclared identifier '_mm_cmple_epu32'\n   59 |         __m128i mask = _mm_cmple_epu32(vec_i, vec_n);\n      |                        ^\n[REDACTED]/tmp3q4extzr.cpp:68:29: error: use of undeclared identifier '_mm_mod_epu32'\n   68 |             __m128i digit = _mm_mod_epu32(vec_temp, vec_ten);\n      |                             ^\n[REDACTED]/tmp3q4extzr.cpp:69:27: error: use of undeclared identifier '_mm_mullo_epu32'; did you mean '_mm_mullo_epi32'?\n   69 |             vec_reverse = _mm_mullo_epu32(vec_reverse, vec_ten);\n      |                           ^~~~~~~~~~~~~~~\n      |                           _mm_mullo_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:539:46: note: '_mm_mullo_epi32' declared here\n  539 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_mullo_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp3q4extzr.cpp:70:27: error: use of undeclared identifier '_mm_add_epu32'; did you mean '_mm_add_epi32'?\n   70 |             vec_reverse = _mm_add_epu32(vec_reverse, digit);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_add_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2058:46: note: '_mm_add_epi32' declared here\n 2058 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_add_epi32(__m128i __a,\n      |                                              ^\n[REDACTED]/tmp3q4extzr.cpp:71:24: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   71 |             vec_temp = _mm_div_epu32(vec_temp, vec_ten);\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp3q4extzr.cpp:78:27: error: use of undeclared identifier '_mm_mod_epu32'\n   78 |         __m128i is_even = _mm_mod_epu32(vec_i, _mm_set1_epi32(2));\n      |                           ^\n6 errors generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqsl2m946.cpp:51:30: error: use of undeclared identifier '_mm_cmple_epu32'\n   51 |         __m128i valid_mask = _mm_cmple_epu32(indices, vec_n);\n      |                              ^\n[REDACTED]/tmpqsl2m946.cpp:55:35: error: use of undeclared identifier '_mm_cmplt_epu32'; did you mean '_mm_cmplt_epi32'?\n   55 |         __m128i is_single_digit = _mm_cmplt_epu32(indices, vec_ten);\n      |                                   ^~~~~~~~~~~~~~~\n      |                                   _mm_cmplt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3180:46: note: '_mm_cmplt_epi32' declared here\n 3180 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi32(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpqsl2m946.cpp:56:24: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   56 |         __m128i tens = _mm_div_epu32(indices, vec_ten);\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n3 errors generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp11rwllws.cpp:51:30: error: use of undeclared identifier '_mm_cmple_epu32'\n   51 |         __m128i mask_valid = _mm_cmple_epu32(numbers, _mm_set1_epi32(n));\n      |                              ^\n[REDACTED]/tmp11rwllws.cpp:59:30: error: use of undeclared identifier '_mm_rem_epu32'\n   59 |             __m128i digits = _mm_rem_epu32(temp, vec_ten);\n      |                              ^\n[REDACTED]/tmp11rwllws.cpp:62:20: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   62 |             temp = _mm_div_epu32(temp, vec_ten);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp11rwllws.cpp:72:43: error: use of undeclared identifier '_mm_rem_epu32'\n   72 |         __m128i is_even = _mm_cmpeq_epi32(_mm_rem_epu32(numbers, _mm_set1_epi32(2)), vec_zero);\n      |                                           ^\n4 errors generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplvyppobb.cpp:61:34: error: use of undeclared identifier '_mm_cmple_epu32'\n   61 |             __m128i valid_mask = _mm_cmple_epu32(nums, _mm_set1_epi32(end));\n      |                                  ^\n[REDACTED]/tmplvyppobb.cpp:64:28: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   64 |             __m128i tens = _mm_div_epu32(nums, ten);\n      |                            ^~~~~~~~~~~~~\n      |                            _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnuff567_.cpp:84:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_nums_simd' that is compiled without support for 'popcnt'\n   84 |         count += _mm_popcnt_u32(mask_bits);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppujoqro5.cpp:64:26: error: argument to '__builtin_ia32_vec_set_v4si' must be a constant integer\n   64 |             sum_digits = _mm_insert_epi32(sum_digits, digit_sum, num);\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2vol6yd8.cpp:72:23: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   72 |             abs_vec = _mm_div_epi32(abs_vec, _mm_set1_epi32(10));\n      |                       ^~~~~~~~~~~~~\n      |                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1omipra5.cpp:47:19: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'move_one_ball_simd' that is compiled without support for 'sse4.1'\n   47 |         min_val = _mm_min_epu32(vals, min_val);\n      |                   ^\n[REDACTED]/tmp1omipra5.cpp:48:19: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'move_one_ball_simd' that is compiled without support for 'sse4.1'\n   48 |         min_idx = _mm_blendv_epi8(min_idx, curr_idx, cmp);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfgeoq065.cpp:47:17: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   47 |         odd1 += _mm_popcnt_u32(_mm_movemask_ps(_mm_castsi128_ps(cmp)));\n      |                 ^\n[REDACTED]/tmpfgeoq065.cpp:60:17: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   60 |         odd2 += _mm_popcnt_u32(_mm_movemask_ps(_mm_castsi128_ps(cmp)));\n      |                 ^\n2 errors generated.\n"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5ds133pg.cpp:58:17: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   58 |         odd1 += _mm_popcnt_u32(mask1);\n      |                 ^\n[REDACTED]/tmp5ds133pg.cpp:59:17: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   59 |         odd2 += _mm_popcnt_u32(mask2);\n      |                 ^\n2 errors generated.\n"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpexatxkiz.cpp:46:23: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   46 |         odd_count1 += _mm_popcnt_u32(_mm_movemask_epi8(odd_mask));\n      |                       ^\n[REDACTED]/tmpexatxkiz.cpp:59:24: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   59 |         even_count2 += _mm_popcnt_u32(_mm_movemask_epi8(even_mask)) >> 2;\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpiswsn1d0.cpp:55:17: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   55 |         odd1 += _mm_popcnt_u32(_mm_movemask_ps(_mm_castsi128_ps(cmp1)));\n      |                 ^\n[REDACTED]/tmpiswsn1d0.cpp:56:17: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'myexchange_simd' that is compiled without support for 'popcnt'\n   56 |         odd2 += _mm_popcnt_u32(_mm_movemask_ps(_mm_castsi128_ps(cmp2)));\n      |                 ^\n2 errors generated.\n"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjk_2n20t.cpp:46:51: error: use of undeclared identifier '_popcnt_u32'\n   46 |         odd1 += _mm_movemask_epi8(cmp) == 0 ? 0 : _popcnt_u32(_mm_movemask_epi8(cmp)) / 4;\n      |                                                   ^\n[REDACTED]/tmpjk_2n20t.cpp:60:51: error: use of undeclared identifier '_popcnt_u32'\n   60 |         odd2 += _mm_movemask_epi8(cmp) == 0 ? 0 : _popcnt_u32(_mm_movemask_epi8(cmp)) / 4;\n      |                                                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpthhzh_ye.cpp:79:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   79 |             odd_count += _mm_popcnt_u32(mask_bits);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo412qa4l.cpp:83:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   83 |             odd_count += _mm_popcnt_u32(mask);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr04d3mvy.cpp:80:39: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   80 |                 odd_count += (odd_mask.m128i_u8[j] & 1);\n      |                               ~~~~~~~~^~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_bkzfx7w.cpp:82:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   82 |             odd_count += _mm_popcnt_u32(mask);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1xn5h6uw.cpp:80:39: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   80 |                 odd_count += (odd_mask.m128i_u8[k] & 1);\n      |                               ~~~~~~~~^~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkt1wiyc4.cpp:49:19: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   49 |         min_sum = _mm_min_epi64(min_sum, curr_sum);\n      |                   ^\n[REDACTED]/tmpkt1wiyc4.cpp:56:19: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   56 |         min_sum = _mm_min_epi64(min_sum, single1);\n      |                   ^\n[REDACTED]/tmpkt1wiyc4.cpp:57:19: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   57 |         min_sum = _mm_min_epi64(min_sum, single2);\n      |                   ^\n3 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps03mqx2x.cpp:54:20: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   54 |         min_sums = _mm_min_epi64(min_sums, curr_sums);\n      |                    ^\n[REDACTED]/tmps03mqx2x.cpp:57:21: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   57 |         curr_sums = _mm_min_epi64(curr_sums, neg_vals);\n      |                     ^\n[REDACTED]/tmps03mqx2x.cpp:58:20: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   58 |         min_sums = _mm_min_epi64(min_sums, neg_vals);\n      |                    ^\n3 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbhrq00gi.cpp:49:19: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   49 |         min_sum = _mm_min_epi64(min_sum, curr_sum);\n      |                   ^\n[REDACTED]/tmpbhrq00gi.cpp:52:20: error: always_inline function '_mm_max_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   52 |         curr_sum = _mm_max_epi64(curr_sum, _mm_setzero_si128());\n      |                    ^\n2 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1rygj0wq.cpp:45:31: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'sse4.1'\n   45 |                 min_sum_vec = _mm_min_epi32(min_sum_vec, current_sum_vec);\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpl351qgu6.cpp:47:27: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'sse4.1'\n   47 |             min_sum_vec = _mm_min_epi32(min_sum_vec, prefix_sum);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_f3xhymw.cpp:40:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   40 |         __m128i abs_data = _mm_abs_epi32(data);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpedtpi5c8.cpp:49:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   49 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n[REDACTED]/tmpedtpi5c8.cpp:56:21: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   56 |         sign_prod = _mm_mullo_epi32(sign_prod, signs);\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpm05ncudo.cpp:49:23: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   49 |         __m128i abs = _mm_abs_epi32(vec);\n      |                       ^\n[REDACTED]/tmpm05ncudo.cpp:60:21: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   60 |         sign_prod = _mm_mullo_epi32(sign_prod, signs);\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoy72hg9i.cpp:57:21: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   57 |         sign_prod = _mm_mullo_epi32(sign_prod, signs);\n      |                     ^\n1 error generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3ihbenjk.cpp:57:21: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   57 |         sign_prod = _mm_mullo_epi32(sign_prod, sign);\n      |                     ^\n1 error generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphlaxbh3c.cpp:92:24: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'operator()' that is compiled without support for 'sse4.1'\n   92 |             min_vals = _mm_min_epu32(min_vals, _mm_and_si128(cmp, p1));\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcnxtmgmd.cpp:105:10: error: no member named 'function' in namespace 'std'\n  105 |     std::function<void(int, int, int, std::vector<int>&)> explore = [&](int x, int y, int step, std::vector<int>& path) {\n      |     ~~~~~^\n[REDACTED]/tmpcnxtmgmd.cpp:105:27: error: expected '(' for function-style cast or type construction\n  105 |     std::function<void(int, int, int, std::vector<int>&)> explore = [&](int x, int y, int step, std::vector<int>& path) {\n      |                        ~~~^\n[REDACTED]/tmpcnxtmgmd.cpp:105:32: error: expected '(' for function-style cast or type construction\n  105 |     std::function<void(int, int, int, std::vector<int>&)> explore = [&](int x, int y, int step, std::vector<int>& path) {\n      |                             ~~~^\n[REDACTED]/tmpcnxtmgmd.cpp:105:37: error: expected '(' for function-style cast or type construction\n  105 |     std::function<void(int, int, int, std::vector<int>&)> explore = [&](int x, int y, int step, std::vector<int>& path) {\n      |                                  ~~~^\n[REDACTED]/tmpcnxtmgmd.cpp:105:55: error: expected '(' for function-style cast or type construction\n  105 |     std::function<void(int, int, int, std::vector<int>&)> explore = [&](int x, int y, int step, std::vector<int>& path) {\n      |                                       ~~~~~~~~~~~~~~~~^\n[REDACTED]/tmpcnxtmgmd.cpp:105:56: error: expected expression\n  105 |     std::function<void(int, int, int, std::vector<int>&)> explore = [&](int x, int y, int step, std::vector<int>& path) {\n      |                                                        ^\n[REDACTED]/tmpcnxtmgmd.cpp:105:59: error: use of undeclared identifier 'explore'\n  105 |     std::function<void(int, int, int, std::vector<int>&)> explore = [&](int x, int y, int step, std::vector<int>& path) {\n      |                                                           ^\n[REDACTED]/tmpcnxtmgmd.cpp:142:17: error: use of undeclared identifier 'explore'\n  142 |                 explore(new_x[i], new_y[i], step + 1, path);\n      |                 ^\n[REDACTED]/tmpcnxtmgmd.cpp:151:13: error: use of undeclared identifier 'explore'\n  151 |             explore(i, j, 0, path);\n      |             ^\n9 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuzkax_z4.cpp:86:18: error: no member named 'function' in namespace 'std'\n   86 |             std::function<void(int, int, int)> dfs = [&](int i, int j, int step) {\n      |             ~~~~~^\n[REDACTED]/tmpuzkax_z4.cpp:86:35: error: expected '(' for function-style cast or type construction\n   86 |             std::function<void(int, int, int)> dfs = [&](int i, int j, int step) {\n      |                                ~~~^\n[REDACTED]/tmpuzkax_z4.cpp:86:40: error: expected '(' for function-style cast or type construction\n   86 |             std::function<void(int, int, int)> dfs = [&](int i, int j, int step) {\n      |                                     ~~~^\n[REDACTED]/tmpuzkax_z4.cpp:86:45: error: expected '(' for function-style cast or type construction\n   86 |             std::function<void(int, int, int)> dfs = [&](int i, int j, int step) {\n      |                                          ~~~^\n[REDACTED]/tmpuzkax_z4.cpp:86:48: error: use of undeclared identifier 'dfs'\n   86 |             std::function<void(int, int, int)> dfs = [&](int i, int j, int step) {\n      |                                                ^\n[REDACTED]/tmpuzkax_z4.cpp:122:25: error: use of undeclared identifier 'dfs'\n  122 |                         dfs(ni, nj, step + 1);\n      |                         ^\n[REDACTED]/tmpuzkax_z4.cpp:127:13: error: use of undeclared identifier 'dfs'\n  127 |             dfs(start_i, start_j, 1);\n      |             ^\n7 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbvz9dfh_.cpp:70:23: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   70 |             product = _mm_mullo_epi32(product, masked_digits);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd_6sg2r9.cpp:70:23: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   70 |             product = _mm_mullo_epi32(product, masked);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpntuuq0l1.cpp:67:30: error: use of undeclared identifier '_mm_cmpeq_si128'\n   67 |         __m128i odd_digits = _mm_cmpeq_si128(mod2, odd_mask);\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4kh_v776.cpp:77:32: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   77 |         __m128i valid_digits = _mm_blendv_epi8(result, odd_digits, is_odd);\n      |                                ^\n1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmtynnxgt.cpp:41:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   41 |         __m128 ceil_vec = _mm_ceil_ps(vec);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpmtynnxgt.cpp:47:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   47 |         __m128i sqr_vec = _mm_mullo_epi32(int_vec, int_vec);\n      |                           ^\n[REDACTED]/tmpmtynnxgt.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:75:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   75 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:75:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   75 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:76:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   76 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:76:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   76 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:77:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   77 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:77:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   77 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:78:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   78 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:78:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   78 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:79:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   79 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:79:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   79 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpmtynnxgt.cpp:80:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   80 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpmtynnxgt.cpp:80:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   80 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 2 errors generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9ndq9k7y.cpp:41:44: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   41 |         __m128i ceil_vec = _mm_cvtps_epi32(_mm_ceil_ps(vec));\n      |                                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp9ndq9k7y.cpp:43:22: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i sq = _mm_mullo_epi32(ceil_vec, ceil_vec);\n      |                      ^\n[REDACTED]/tmp9ndq9k7y.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:75:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   75 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:75:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   75 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:76:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   76 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:76:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   76 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp9ndq9k7y.cpp:77:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   77 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmp9ndq9k7y.cpp:77:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   77 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 2 errors generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg69h1uep.cpp:39:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   39 |         int_vec = _mm_mullo_epi32(int_vec, int_vec);\n      |                   ^\n[REDACTED]/tmpg69h1uep.cpp:56:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   56 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:56:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   56 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:57:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   57 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:57:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   57 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:58:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   58 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:58:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   58 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:59:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   59 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:59:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   59 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:60:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   60 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:60:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   60 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:61:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   61 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:61:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   61 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:62:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   62 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:62:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   62 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpg69h1uep.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpg69h1uep.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp448i0ifc.cpp:40:44: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   40 |         __m128i ceil_vec = _mm_cvtps_epi32(_mm_ceil_ps(vec));\n      |                                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp448i0ifc.cpp:42:26: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i square = _mm_mullo_epi32(ceil_vec, ceil_vec);\n      |                          ^\n[REDACTED]/tmp448i0ifc.cpp:55:21: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   55 |     __m128i sum_h = _mm_hadd_epi32(sum, zero);\n      |                     ^\n[REDACTED]/tmp448i0ifc.cpp:56:13: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   56 |     sum_h = _mm_hadd_epi32(sum_h, zero);\n      |             ^\n[REDACTED]/tmp448i0ifc.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp448i0ifc.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmp448i0ifc.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 4 errors generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7s5s8usf.cpp:45:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   45 |         __m128 ceil_vec = _mm_ceil_ps(vec);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp7s5s8usf.cpp:51:26: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i sq_vec = _mm_mullo_epi32(int_vec, int_vec);\n      |                          ^\n[REDACTED]/tmp7s5s8usf.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:75:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   75 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:75:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   75 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:76:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   76 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:76:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   76 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:77:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   77 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:77:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   77 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:78:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   78 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:78:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   78 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:79:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   79 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:79:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   79 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:80:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   80 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:80:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   80 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:81:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   81 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:81:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   81 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:82:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   82 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:82:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   82 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmp7s5s8usf.cpp:83:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   83 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmp7s5s8usf.cpp:83:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   83 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 2 errors generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpex3cxq47.cpp:49:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   49 |             max_neg = _mm_max_epu32(max_neg, neg_vec);\n      |                       ^\n[REDACTED]/tmpex3cxq47.cpp:61:27: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   61 |                 min_pos = _mm_min_epu32(min_pos, pos_vec);\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptljlbxep.cpp:47:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   47 |             max_neg = _mm_max_epi32(max_neg, masked_neg);\n      |                       ^\n[REDACTED]/tmptljlbxep.cpp:53:23: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   53 |             min_pos = _mm_min_epi32(min_pos, _mm_or_si128(masked_pos, _mm_andnot_si128(pos_mask, _mm_set1_epi32(INT_MAX))));\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxvxsrmkj.cpp:46:23: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   46 |             max_neg = _mm_max_epu32(max_neg, neg_values);\n      |                       ^\n[REDACTED]/tmpxvxsrmkj.cpp:51:33: error: always_inline function '_mm_min_epu32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   51 |             min_pos = min_pos ? _mm_min_epu32(min_pos, pos_values) : pos_values;\n      |                                 ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprsayedzu.cpp:49:27: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   49 |                 max_neg = _mm_max_epi32(max_neg, vec);\n      |                           ^\n[REDACTED]/tmprsayedzu.cpp:60:27: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   60 |                 min_pos = _mm_min_epi32(min_pos, vec);\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg99t13lp.cpp:49:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   49 |         max_neg = _mm_max_epi32(max_neg, neg_vals);\n      |                   ^\n[REDACTED]/tmpg99t13lp.cpp:50:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   50 |         min_pos = _mm_min_epi32(min_pos, pos_vals);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_130_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgf2qkvkp.cpp:51:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i squared = _mm_mullo_epi32(data, data);\n      |                           ^\n[REDACTED]/tmpgf2qkvkp.cpp:63:41: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   63 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(data, data), data);\n      |                                         ^\n[REDACTED]/tmpgf2qkvkp.cpp:63:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   63 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(data, data), data);\n      |                         ^\n3 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9mtz4t1a.cpp:53:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   53 |         __m128i squared = _mm_mullo_epi32(data, data);\n      |                           ^\n[REDACTED]/tmp9mtz4t1a.cpp:59:41: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   59 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(data, data), data);\n      |                                         ^\n[REDACTED]/tmp9mtz4t1a.cpp:59:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   59 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(data, data), data);\n      |                         ^\n3 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6smf0q6j.cpp:50:24: error: use of undeclared identifier '_mm_rem_epu32'\n   50 |         __m128i mod3 = _mm_rem_epu32(indices, three);\n      |                        ^\n[REDACTED]/tmp6smf0q6j.cpp:54:24: error: use of undeclared identifier '_mm_rem_epu32'\n   54 |         __m128i mod4 = _mm_rem_epu32(indices, four);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwegq0l_r.cpp:54:30: error: use of undeclared identifier '_mm_srem_epi32'\n   54 |         __m128i last_digit = _mm_srem_epi32(abs_vec, div_10);\n      |                              ^\n[REDACTED]/tmpwegq0l_r.cpp:59:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   59 |             temp = _mm_div_epi32(temp, div_10);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf7mc6ede.cpp:71:32: error: invalid suffix 'mediatly' on integer constant\n   71 |             if (first_digit & 1mediatly a single number in the input vector that is greater than 10 and both first and last digits are odd (1, 3, 5, 7, 9).\n      |                                ^\n[REDACTED]/tmpf7mc6ede.cpp:157:2: error: expected '}'\n  157 | }\n      |  ^\n[REDACTED]/tmpf7mc6ede.cpp:67:23: note: to match this '{'\n   67 |         if (num > 10) {\n      |                       ^\n[REDACTED]/tmpf7mc6ede.cpp:157:2: error: expected '}'\n  157 | }\n      |  ^\n[REDACTED]/tmpf7mc6ede.cpp:65:34: note: to match this '{'\n   65 |     for (; i < nums.size(); i++) {\n      |                                  ^\n[REDACTED]/tmpf7mc6ede.cpp:157:2: error: expected '}'\n  157 | }\n      |  ^\n[REDACTED]/tmpf7mc6ede.cpp:34:55: note: to match this '{'\n   34 | int specialFilter_simd(const std::vector<int> & nums) {\n      |                                                       ^\n4 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpeae3rtqz.cpp:53:17: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   53 |             if (_mm_extract_epi32(gt_ten, j)) {\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnwi_49u1.cpp:63:27: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   63 |             first_digit = _mm_div_epu32(first_digit, div);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpnwi_49u1.cpp:67:30: error: use of undeclared identifier '_mm_mod_epu32'\n   67 |         __m128i last_digit = _mm_mod_epu32(abs_vec, div);\n      |                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf855jdeg.cpp:53:17: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   53 |             if (_mm_extract_epi32(gt_ten, j)) {\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc4ko_bs3.cpp:88:27: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'get_max_triples_simd' that is compiled without support for 'sse4.1'\n   88 |                     rem = _mm_cmpeq_epi64(rem, _mm_setzero_si128());\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph971d790.cpp:88:31: error: use of undeclared identifier '_mm_rem_epu64'\n   88 |                 __m128i mod = _mm_rem_epu64(sum, three);\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpm0mxmhrd.cpp:85:31: error: use of undeclared identifier '_mm_div_epu64'; did you mean '_mm_min_epu64'?\n   85 |                 __m128i rem = _mm_div_epu64(sum, three);\n      |                               ^~~~~~~~~~~~~\n      |                               _mm_min_epu64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3260:1: note: '_mm_min_epu64' declared here\n 3260 | _mm_min_epu64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphb2gz_6k.cpp:85:31: error: use of undeclared identifier '_mm_rem_epu64'\n   85 |                 __m128i mod = _mm_rem_epu64(sum, three);\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo0d03a78.cpp:85:49: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   85 |                 __m128i rem = _mm_set_epi64x(sum.m128i_i64[1] % 3, sum.m128i_i64[0] % 3);\n      |                                              ~~~^~~~~~~~~~\n[REDACTED]/tmpo0d03a78.cpp:85:71: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   85 |                 __m128i rem = _mm_set_epi64x(sum.m128i_i64[1] % 3, sum.m128i_i64[0] % 3);\n      |                                                                    ~~~^~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdslhg3r8.cpp:48:22: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'x_or_y_simd' that is compiled without support for 'sse4.1'\n   48 |     __m128i result = _mm_blendv_epi8(y_vec, x_vec, is_prime);\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7svzlcys.cpp:53:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'x_or_y_simd' that is compiled without support for 'sse4.1'\n   53 |         __m128i product = _mm_mullo_epi32(div_result, i_vec);\n      |                           ^\n[REDACTED]/tmp7svzlcys.cpp:64:14: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'x_or_y_simd' that is compiled without support for 'sse4.1'\n   64 |     result = _mm_blendv_epi8(y_vec, x_vec, is_prime);\n      |              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0u1u1_ir.cpp:43:27: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   43 |         __m128i vec_div = _mm_div_epi32(vec_n, vec_i);\n      |                           ^~~~~~~~~~~~~\n      |                           _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp0u1u1_ir.cpp:52:31: error: no matching function for call to '_mm_max_epu32'\n   52 |         if (_mm_extract_epi32(_mm_max_epu32(vec_i), 0) * _mm_extract_epi32(_mm_max_epu32(vec_i), 0) > n) {\n      |                               ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:55: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |                                                       ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:792:46: note: candidate function not viable: requires 2 arguments, but 1 was provided\n  792 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_max_epu32(__m128i __V1,\n      |                                              ^             ~~~~~~~~~~~~~\n  793 |                                                            __m128i __V2) {\n      |                                                            ~~~~~~~~~~~~\n[REDACTED]/tmp0u1u1_ir.cpp:52:76: error: no matching function for call to '_mm_max_epu32'\n   52 |         if (_mm_extract_epi32(_mm_max_epu32(vec_i), 0) * _mm_extract_epi32(_mm_max_epu32(vec_i), 0) > n) {\n      |                                                                            ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:55: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |                                                       ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:792:46: note: candidate function not viable: requires 2 arguments, but 1 was provided\n  792 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_max_epu32(__m128i __V1,\n      |                                              ^             ~~~~~~~~~~~~~\n  793 |                                                            __m128i __V2) {\n      |                                                            ~~~~~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6jhcn85e.cpp:47:19: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   47 |         vec_div = _mm_div_epi32(vec_n, vec_i);\n      |                   ^~~~~~~~~~~~~\n      |                   _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp6jhcn85e.cpp:53:12: error: use of undeclared identifier 'i'\n   53 |     for (; i <= n / 2; ++i) {\n      |            ^\n[REDACTED]/tmp6jhcn85e.cpp:53:26: error: use of undeclared identifier 'i'\n   53 |     for (; i <= n / 2; ++i) {\n      |                          ^\n[REDACTED]/tmp6jhcn85e.cpp:54:17: error: use of undeclared identifier 'i'\n   54 |         if (n % i == 0) return y;\n      |                 ^\n4 errors generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpko3kk5gz.cpp:39:28: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   39 |         __m128 vec_floor = _mm_floor_ps(vec);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:140:25: note: expanded from macro '_mm_floor_ps'\n  140 | #define _mm_floor_ps(X) _mm_round_ps((X), _MM_FROUND_FLOOR)\n      |                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpko3kk5gz.cpp:56:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   56 |         __m128i squared = _mm_mullo_epi32(int_vec, int_vec);\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp23baq62f.cpp:44:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i squared = _mm_mullo_epi32(vec_i, vec_i);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpea1y3xox.cpp:42:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i squares = _mm_mullo_epi32(ivec, ivec);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpl467q2y7.cpp:41:28: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   41 |         __m128 floor_vec = _mm_floor_ps(vec);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:140:25: note: expanded from macro '_mm_floor_ps'\n  140 | #define _mm_floor_ps(X) _mm_round_ps((X), _MM_FROUND_FLOOR)\n      |                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_iazwv7y.cpp:42:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i squared = _mm_mullo_epi32(vec_int, vec_int);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr93vuml0.cpp:42:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i abs_diff = _mm_abs_epi32(diff);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8i6bd1f9.cpp:41:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   41 |         __m128i abs_diff = _mm_abs_epi32(diff);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2zqksqez.cpp:42:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i abs_diff = _mm_abs_epi32(diff);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcdsdy52i.cpp:42:28: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'compare_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i abs_diff = _mm_abs_epi32(diff);\n      |                            ^\n1 error generated.\n"}

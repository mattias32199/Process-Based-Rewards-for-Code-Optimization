{"task_id": "SimdBench_0_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpp9d0wxc8.cpp:45:19: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'conditional_move_simd' that is compiled without support for 'sse4.1'\n   45 |         dst_vec = _mm_blendv_epi8(dst_vec, src_vec, cond);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf3uklms8.cpp:37:28: error: no matching function for call to '_mm_set_epi8'\n   37 |         __m128i mask_vec = _mm_set_epi8(\n      |                            ^~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3563:1: note: candidate function not viable: requires 16 arguments, but 17 were provided\n 3563 | _mm_set_epi8(char __b15, char __b14, char __b13, char __b12, char __b11,\n      | ^            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 3564 |              char __b10, char __b9, char __b8, char __b7, char __b6, char __b5,\n      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 3565 |              char __b4, char __b3, char __b2, char __b1, char __b0) {\n      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_0_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7_cz569n.cpp:43:19: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'conditional_move_simd' that is compiled without support for 'sse4.1'\n   43 |         dst_vec = _mm_blendv_epi8(dst_vec, src_vec, cond_mask);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0it_p9yw.cpp:48:26: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   48 |         __m128i result = _mm_div_epi32(sum, divisor); // Assuming a custom intrinsic for division\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp00rfy27t.cpp:49:28: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   49 |         __m128i v_result = _mm_div_epi32(v_sum, v_seven); // Assuming a custom div function\n      |                            ^~~~~~~~~~~~~\n      |                            _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7t_k1w5u.cpp:48:26: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   48 |         __m128i result = _mm_div_epi32(sum, div_const); // Assuming a custom or intrinsic div function\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4ubf0enl.cpp:40:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'load_modify_store_simd' that is compiled without support for 'sse4.1'\n   40 |         __m128i vec_mul = _mm_mullo_epi32(vec_src, scale_vec);\n      |                           ^\n[REDACTED]/tmp4ubf0enl.cpp:43:47: error: always_inline function '_mm_cvtepi32_epi64' requires target feature 'sse4.1', but would be inlined into function 'load_modify_store_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i tmp2 = _mm_sll_epi32(vec_mul, _mm_cvtepi32_epi64(shift_left));\n      |                                               ^\n[REDACTED]/tmp4ubf0enl.cpp:45:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'load_modify_store_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i tmp_mul = _mm_mullo_epi32(tmp1, tmp2);\n      |                           ^\n[REDACTED]/tmp4ubf0enl.cpp:48:40: error: always_inline function '_mm_cvtepi32_epi64' requires target feature 'sse4.1', but would be inlined into function 'load_modify_store_simd' that is compiled without support for 'sse4.1'\n   48 |         result = _mm_sra_epi32(result, _mm_cvtepi32_epi64(div_const));\n      |                                        ^\n4 errors generated.\n"}
{"task_id": "SimdBench_1_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6lhmlmy5.cpp:48:26: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   48 |         __m128i result = _mm_div_epi32(sum, seven_vec); // Assuming a custom intrinsic for division\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_2_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_7j7lf02.cpp:39:48: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   39 |         src_vec = _mm_set_ps(src[(int)indices_f.m128_f32[3]], \n      |                                       ~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp_7j7lf02.cpp:40:48: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   40 |                              src[(int)indices_f.m128_f32[2]], \n      |                                       ~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp_7j7lf02.cpp:41:48: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   41 |                              src[(int)indices_f.m128_f32[1]], \n      |                                       ~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp_7j7lf02.cpp:42:48: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   42 |                              src[(int)indices_f.m128_f32[0]]);\n      |                                       ~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp_7j7lf02.cpp:49:56: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   49 |         _mm_storeu_ps((float *)(src + (size_t)indices_f.m128_f32[0]), dst_vec);\n      |                                               ~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp_7j7lf02.cpp:50:56: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   50 |         _mm_storeu_ps((float *)(src + (size_t)indices_f.m128_f32[1]), dst_vec);\n      |                                               ~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp_7j7lf02.cpp:51:56: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   51 |         _mm_storeu_ps((float *)(src + (size_t)indices_f.m128_f32[2]), dst_vec);\n      |                                               ~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp_7j7lf02.cpp:52:56: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   52 |         _mm_storeu_ps((float *)(src + (size_t)indices_f.m128_f32[3]), dst_vec);\n      |                                               ~~~~~~~~~^~~~~~~~~\n8 errors generated.\n"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjtdtjc79.cpp:57:25: error: read-only variable is not assignable\n   57 |         src[indices[i]] = src[i]; // Scatter\n      |         ~~~~~~~~~~~~~~~ ^\n1 error generated.\n"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcpfqkzov.cpp:44:9: error: no matching function for call to '_mm_stream_si32'\n   44 |         _mm_stream_si32((int *)(dst + _mm_extract_epi32(indices_vec_i, 0)), _mm_cvtps_epi32(_mm_shuffle_ps(src_vec, src_vec, _MM_SHUFFLE(0, 0, 0, 0))));\n      |         ^~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3986:5: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'int' for 2nd argument\n 3986 |     _mm_stream_si32(void *__p, int __a) {\n      |     ^                          ~~~~~~~\n[REDACTED]/tmpcpfqkzov.cpp:45:9: error: no matching function for call to '_mm_stream_si32'\n   45 |         _mm_stream_si32((int *)(dst + _mm_extract_epi32(indices_vec_i, 1)), _mm_cvtps_epi32(_mm_shuffle_ps(src_vec, src_vec, _MM_SHUFFLE(1, 1, 1, 1))));\n      |         ^~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3986:5: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'int' for 2nd argument\n 3986 |     _mm_stream_si32(void *__p, int __a) {\n      |     ^                          ~~~~~~~\n[REDACTED]/tmpcpfqkzov.cpp:46:9: error: no matching function for call to '_mm_stream_si32'\n   46 |         _mm_stream_si32((int *)(dst + _mm_extract_epi32(indices_vec_i, 2)), _mm_cvtps_epi32(_mm_shuffle_ps(src_vec, src_vec, _MM_SHUFFLE(2, 2, 2, 2))));\n      |         ^~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3986:5: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'int' for 2nd argument\n 3986 |     _mm_stream_si32(void *__p, int __a) {\n      |     ^                          ~~~~~~~\n[REDACTED]/tmpcpfqkzov.cpp:47:9: error: no matching function for call to '_mm_stream_si32'\n   47 |         _mm_stream_si32((int *)(dst + _mm_extract_epi32(indices_vec_i, 3)), _mm_cvtps_epi32(_mm_shuffle_ps(src_vec, src_vec, _MM_SHUFFLE(3, 3, 3, 3))));\n      |         ^~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3986:5: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'int' for 2nd argument\n 3986 |     _mm_stream_si32(void *__p, int __a) {\n      |     ^                          ~~~~~~~\n4 errors generated.\n"}
{"task_id": "SimdBench_3_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj634zlqe.cpp:39:51: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   39 |         src_vec = _mm_loadu_ps(src + (int)(idx_vec.m128_f32[0])); // Simplified gather\n      |                                            ~~~~~~~^~~~~~~~~\n[REDACTED]/tmpj634zlqe.cpp:44:45: error: member reference base type '__m128' (vector of 4 'float' values) is not a structure or union\n   44 |         _mm_stream_ps(dst + (size_t)(idx_vec.m128_f32[0]), dst_vec); // Simplified scatter\n      |                                      ~~~~~~~^~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwm57um0e.cpp:41:32: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   41 |         __m128i swapped_left = _mm_shuffle_epi8(right, shuffle_mask);\n      |                                ^\n[REDACTED]/tmpwm57um0e.cpp:42:33: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i swapped_right = _mm_shuffle_epi8(left, shuffle_mask);\n      |                                 ^\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmput1x9zuw.cpp:43:33: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   43 |         __m128i reversed_left = _mm_shuffle_epi8(right, shuffle_mask);\n      |                                 ^\n[REDACTED]/tmput1x9zuw.cpp:44:34: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   44 |         __m128i reversed_right = _mm_shuffle_epi8(left, shuffle_mask);\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsx4ta2xl.cpp:44:33: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   44 |         __m128i reversed_left = _mm_shuffle_epi8(right, shuffle_mask);\n      |                                 ^\n[REDACTED]/tmpsx4ta2xl.cpp:45:34: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'range_reverse_simd' that is compiled without support for 'ssse3'\n   45 |         __m128i reversed_right = _mm_shuffle_epi8(left, shuffle_mask);\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_4_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_5_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptl01snrl.cpp:45:40: error: argument to '__builtin_ia32_pshufd' must be a constant integer\n   45 |                     __m128i col_data = _mm_shuffle_epi32(row_data, _MM_SHUFFLE(l, l, l, l));\n      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:13: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |             ^                                           ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_6_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzngpt0p4.cpp:44:20: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   44 |     __m128 sum_h = _mm_hadd_ps(sum, sum);\n      |                    ^\n[REDACTED]/tmpzngpt0p4.cpp:45:13: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   45 |     sum_h = _mm_hadd_ps(sum_h, sum_h);\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuqx4aomm.cpp:46:11: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   46 |     sum = _mm_hadd_ps(sum, sum);\n      |           ^\n[REDACTED]/tmpuqx4aomm.cpp:47:11: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   47 |     sum = _mm_hadd_ps(sum, sum);\n      |           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_7_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5e3v1k03.cpp:46:11: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   46 |     sum = _mm_hadd_ps(sum, sum);\n      |           ^\n[REDACTED]/tmp5e3v1k03.cpp:47:11: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'diagonal_sum_3d_simd' that is compiled without support for 'sse3'\n   47 |     sum = _mm_hadd_ps(sum, sum);\n      |           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_8_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_8_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_9_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "runtime failed: double free or corruption (!prev)\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0q_7guqi.cpp:37:26: error: always_inline function '_mm_sra_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   37 |         __m128i result = _mm_sra_epi64(sum_scalar, _mm_set1_epi64x(1));\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpobqza_4v.cpp:34:27: error: always_inline function '_mm_srai_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   34 |         __m128i vresult = _mm_srai_epi64(vsum, 1);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_10_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpys5_obqk.cpp:36:30: error: always_inline function '_mm_sra_epi64' requires target feature 'avx512vl', but would be inlined into function 'vector_vector_add_simd' that is compiled without support for 'avx512vl'\n   36 |         __m128i div_result = _mm_sra_epi64(sum_scalar, _mm_set1_epi64x(1));\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdf8jtrs4.cpp:44:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   44 |         min_val = _mm_min_epi32(min_val, even);\n      |                   ^\n[REDACTED]/tmpdf8jtrs4.cpp:54:21: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   54 |     __m128i min_h = _mm_min_epi32(min_val, _mm_shuffle_epi32(min_val, 1));\n      |                     ^\n[REDACTED]/tmpdf8jtrs4.cpp:55:22: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   55 |     __m128i min_lh = _mm_min_epi32(min_h, _mm_shuffle_epi32(min_h, 2));\n      |                      ^\n3 errors generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6hf3hm3z.cpp:42:28: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i curr_min = _mm_min_epi32(even_vec, min_val);\n      |                            ^\n[REDACTED]/tmp6hf3hm3z.cpp:48:15: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   48 |     min_val = _mm_min_epi32(min_val, shuf);\n      |               ^\n[REDACTED]/tmp6hf3hm3z.cpp:50:15: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   50 |     min_val = _mm_min_epi32(min_val, shuf);\n      |               ^\n3 errors generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphhv1swx8.cpp:42:28: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i curr_min = _mm_min_epi32(even_vec, min_val);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpicpph8f2.cpp:42:28: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i curr_min = _mm_min_epi32(even_vec, min_val);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_11_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0i49u9vp.cpp:44:31: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'vector_even_min_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i current_min = _mm_min_epi32(candidate, min_val);\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_12_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_13_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpq584ouci.cpp:45:23: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'argmax_simd' that is compiled without support for 'sse4.1'\n   45 |         current_idx = _mm_blendv_epi8(current_idx, _mm_add_epi32(current_idx, idx_step), mask);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc66uzx8i.cpp:49:25: error: argument to '__builtin_ia32_vec_ext_v16qi' must be a constant integer\n   49 |             max_value = _mm_extract_epi8(cur_max, __builtin_ctz(mask_val));\n      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n 1030 |                                                     (int)(N)))\n      |                                                     ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpiw276o0u.cpp:49:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   49 |         __m128i mask_lo = _mm_movemask_epi8(cmp_lo);\n      |                 ^         ~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpiw276o0u.cpp:50:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   50 |         __m128i mask_hi = _mm_movemask_epi8(cmp_hi);\n      |                 ^         ~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpiw276o0u.cpp:52:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   52 |         if (mask_lo) {\n      |             ^~~~~~~\n[REDACTED]/tmpiw276o0u.cpp:54:72: error: no matching function for call to '_mm_set1_epi32'\n   54 |             current_index = _mm_add_epi32(current_index, _mm_and_si128(_mm_set1_epi32(mask_lo), index_step));\n      |                                                                        ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3618:46: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'int' for 1st argument\n 3618 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set1_epi32(int __i) {\n      |                                              ^              ~~~~~~~\n[REDACTED]/tmpiw276o0u.cpp:57:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   57 |         if (mask_hi) {\n      |             ^~~~~~~\n[REDACTED]/tmpiw276o0u.cpp:59:72: error: no matching function for call to '_mm_set1_epi32'\n   59 |             current_index = _mm_add_epi32(current_index, _mm_and_si128(_mm_set1_epi32(mask_hi), index_step));\n      |                                                                        ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3618:46: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'int' for 1st argument\n 3618 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set1_epi32(int __i) {\n      |                                              ^              ~~~~~~~\n6 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj30x9tw8.cpp:49:23: error: argument to '__builtin_ia32_vec_ext_v16qi' must be a constant integer\n   49 |             int val = _mm_extract_epi8(current_max, j);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n 1030 |                                                     (int)(N)))\n      |                                                     ~~~~~~~~\n[REDACTED]/tmpj30x9tw8.cpp:52:27: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   52 |                 max_idx = _mm_extract_epi32(current_idx, j / 4) + (j % 4);\n      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_14_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsq3mefwz.cpp:46:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   46 |         __m128i mask = _mm_movemask_epi8(cmp);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpsq3mefwz.cpp:48:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   48 |         if (mask) {\n      |             ^~~~\n[REDACTED]/tmpsq3mefwz.cpp:49:38: error: cannot initialize a parameter of type 'unsigned int' with an lvalue of type '__m128i' (vector of 2 'long long' values)\n   49 |             int lane = __builtin_ctz(mask);\n      |                                      ^~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_15_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb4oie3dv.cpp:33:27: error: no matching function for call to '_mm_set_epi32'\n   33 |         __m128i indices = _mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                           ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_15_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbqzxvgf5.cpp:35:27: error: no matching function for call to '_mm_set_epi32'\n   35 |         __m128i indices = _mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                           ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_15_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu1hvzelz.cpp:33:27: error: no matching function for call to '_mm_set_epi32'\n   33 |         __m128i indices = _mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                           ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_15_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmhit2wbo.cpp:37:27: error: no matching function for call to '_mm_set_epi32'\n   37 |         __m128i indices = _mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                           ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_15_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpl49005yq.cpp:33:23: error: no matching function for call to '_mm_set_epi32'\n   33 |         __m128i idx = _mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                       ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmp8fvof6.cpp:45:13: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'population_count_simd' that is compiled without support for 'sse4.1'\n   45 |         v = _mm_mullo_epi32(v, count3);\n      |             ^\n1 error generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwcmsocne.cpp:42:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   42 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n[REDACTED]/tmpwcmsocne.cpp:44:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   44 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n[REDACTED]/tmpwcmsocne.cpp:47:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   47 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n[REDACTED]/tmpwcmsocne.cpp:49:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   49 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n[REDACTED]/tmpwcmsocne.cpp:52:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   52 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n[REDACTED]/tmpwcmsocne.cpp:54:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   54 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n[REDACTED]/tmpwcmsocne.cpp:57:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   57 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n[REDACTED]/tmpwcmsocne.cpp:59:37: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   59 |         count = _mm_add_epi8(count, _mm_shuffle_epi8(counts1, _mm_and_si128(v, ones)));\n      |                                     ^\n8 errors generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpm9thbmj1.cpp:56:13: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'population_count_simd' that is compiled without support for 'ssse3'\n   56 |         v = _mm_shuffle_epi8(count4, v);\n      |             ^\n[REDACTED]/tmpm9thbmj1.cpp:59:45: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'population_count_simd' that is compiled without support for 'sse4.1'\n   59 |         _mm_storeu_si128((__m128i*)&dst[i], _mm_cvtepi8_epi32(v));\n      |                                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_16_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_17_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_17_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_17_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_17_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_17_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_18_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_19_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpad0uy6l7.cpp:33:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   33 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkh4p6xdy.cpp:33:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   33 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 error generated.\n"}
{"task_id": "SimdBench_20_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp17gqv9hi.cpp:33:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   33 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp17gqv9hi.cpp:43:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         __m128 rounded = _mm_round_ps(sum, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n2 errors generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp43ehskbn.cpp:48:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   48 |             __m128 ceil_res = _mm_ceil_ps(mul_res);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmp43ehskbn.cpp:50:26: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'vector_mul_round_up_simd' that is compiled without support for 'sse4.1'\n   50 |             __m128 res = _mm_blendv_ps(vmin, ceil_res, cond);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzld36h4x.cpp:48:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   48 |             __m128 ceil_res = _mm_ceil_ps(mul_res);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpzld36h4x.cpp:52:26: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'vector_mul_round_up_simd' that is compiled without support for 'sse4.1'\n   52 |             __m128 res = _mm_blendv_ps(vmin, ceil_res, _mm_castsi128_ps(mask));\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppwf7b3b_.cpp:47:44: error: use of undeclared identifier '_mm_rem_epu32'\n   47 |         __m128i mod_res = _mm_andnot_si128(_mm_rem_epu32(indices_int, vTwo), _mm_set1_epi32(-1));\n      |                                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_21_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpa5ffzvax.cpp:42:31: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   42 |             __m128 ceil_val = _mm_ceil_ps(mul);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpa5ffzvax.cpp:43:29: error: always_inline function '_mm_blendv_ps' requires target feature 'sse4.1', but would be inlined into function 'vector_mul_round_up_simd' that is compiled without support for 'sse4.1'\n   43 |             __m128 result = _mm_blendv_ps(vminusone, ceil_val, cond1);\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_22_SSE", "passed": false, "result": "runtime failed: double free or corruption (!prev)\n"}
{"task_id": "SimdBench_22_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_22_SSE", "passed": false, "result": "runtime failed: double free or corruption (!prev)\n"}
{"task_id": "SimdBench_22_SSE", "passed": false, "result": "runtime failed: free(): invalid next size (normal)\n"}
{"task_id": "SimdBench_22_SSE", "passed": false, "result": "runtime failed: double free or corruption (!prev)\n"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_23_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxo0h26v2.cpp:57:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   57 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpxo0h26v2.cpp:58:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_normalize_rows_simd' that is compiled without support for 'sse3'\n   58 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_23_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6rlqnmi2.cpp:55:32: error: '__builtin_ia32_roundpd' needs target feature sse4.1\n   55 |             __m128d rounded1 = _mm_round_pd(sum1, _MM_FROUND_TO_NEAREST_INT);\n      |                                ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:315:13: note: expanded from macro '_mm_round_pd'\n  315 |   ((__m128d)__builtin_ia32_roundpd((__v2df)(__m128d)(X), (M)))\n      |             ^\n[REDACTED]/tmp6rlqnmi2.cpp:56:32: error: '__builtin_ia32_roundpd' needs target feature sse4.1\n   56 |             __m128d rounded2 = _mm_round_pd(sum2, _MM_FROUND_TO_NEAREST_INT);\n      |                                ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:315:13: note: expanded from macro '_mm_round_pd'\n  315 |   ((__m128d)__builtin_ia32_roundpd((__v2df)(__m128d)(X), (M)))\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptdd4d2z1.cpp:53:31: error: '__builtin_ia32_roundpd' needs target feature sse4.1\n   53 |             __m128d rounded = _mm_round_pd(result, _MM_FROUND_TO_NEAREST_INT);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:315:13: note: expanded from macro '_mm_round_pd'\n  315 |   ((__m128d)__builtin_ia32_roundpd((__v2df)(__m128d)(X), (M)))\n      |             ^\n1 error generated.\n"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphqi9r3if.cpp:47:20: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'matrix_mul_round_int_simd' that is compiled without support for 'sse3'\n   47 |             sum0 = _mm_hadd_pd(sum0, sum1);\n      |                    ^\n[REDACTED]/tmphqi9r3if.cpp:49:31: error: '__builtin_ia32_roundpd' needs target feature sse4.1\n   49 |             __m128d rounded = _mm_round_pd(sum0, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:315:13: note: expanded from macro '_mm_round_pd'\n  315 |   ((__m128d)__builtin_ia32_roundpd((__v2df)(__m128d)(X), (M)))\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_24_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph1zvavb4.cpp:76:14: error: use of undeclared identifier 'j'\n   76 |         for (j = 0; j < cols; ++j) {\n      |              ^\n[REDACTED]/tmph1zvavb4.cpp:76:21: error: use of undeclared identifier 'j'\n   76 |         for (j = 0; j < cols; ++j) {\n      |                     ^\n[REDACTED]/tmph1zvavb4.cpp:76:33: error: use of undeclared identifier 'j'\n   76 |         for (j = 0; j < cols; ++j) {\n      |                                 ^\n[REDACTED]/tmph1zvavb4.cpp:77:18: error: use of undeclared identifier 'i'\n   77 |             for (i = 0; i < rows; ++i) {\n      |                  ^\n[REDACTED]/tmph1zvavb4.cpp:77:25: error: use of undeclared identifier 'i'\n   77 |             for (i = 0; i < rows; ++i) {\n      |                         ^\n[REDACTED]/tmph1zvavb4.cpp:77:37: error: use of undeclared identifier 'i'\n   77 |             for (i = 0; i < rows; ++i) {\n      |                                     ^\n[REDACTED]/tmph1zvavb4.cpp:78:21: error: use of undeclared identifier 'j'\n   78 |                 dst[j * rows + i] = roundf(src[i * cols + j] * 4.0f) / 4.0f;\n      |                     ^\n[REDACTED]/tmph1zvavb4.cpp:78:32: error: use of undeclared identifier 'i'\n   78 |                 dst[j * rows + i] = roundf(src[i * cols + j] * 4.0f) / 4.0f;\n      |                                ^\n[REDACTED]/tmph1zvavb4.cpp:78:48: error: use of undeclared identifier 'i'\n   78 |                 dst[j * rows + i] = roundf(src[i * cols + j] * 4.0f) / 4.0f;\n      |                                                ^\n[REDACTED]/tmph1zvavb4.cpp:78:59: error: use of undeclared identifier 'j'\n   78 |                 dst[j * rows + i] = roundf(src[i * cols + j] * 4.0f) / 4.0f;\n      |                                                           ^\n10 errors generated.\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_25_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_26_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_26_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_27_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmxlli6rz.cpp:38:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   38 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n[REDACTED]/tmpmxlli6rz.cpp:39:15: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'matrix_vector_mul_simd' that is compiled without support for 'sse3'\n   39 |         sum = _mm_hadd_ps(sum, sum);\n      |               ^\n2 errors generated.\n"}
{"task_id": "SimdBench_28_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_29_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7w7nrkol.cpp:47:32: error: use of undeclared identifier '_mm_subs_epi32'; did you mean '_mm_sub_epi32'?\n   47 |                 __m128i diff = _mm_subs_epi32(vec, shifted);\n      |                                ^~~~~~~~~~~~~~\n      |                                _mm_sub_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2481:46: note: '_mm_sub_epi32' declared here\n 2481 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi32(__m128i __a,\n      |                                              ^\n[REDACTED]/tmp7w7nrkol.cpp:54:32: error: use of undeclared identifier '_mm_subs_epi32'; did you mean '_mm_sub_epi32'?\n   54 |                 __m128i diff = _mm_subs_epi32(shifted, vec);\n      |                                ^~~~~~~~~~~~~~\n      |                                _mm_sub_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2481:46: note: '_mm_sub_epi32' declared here\n 2481 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi32(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj0fxlwqr.cpp:55:30: error: use of undeclared identifier '_mm_cmple_epi32'; did you mean '_mm_cmplt_epi32'?\n   55 |                 cmp_result = _mm_cmple_epi32(shifted_prev, current);\n      |                              ^~~~~~~~~~~~~~~\n      |                              _mm_cmplt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3180:46: note: '_mm_cmplt_epi32' declared here\n 3180 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi32(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpj0fxlwqr.cpp:57:30: error: use of undeclared identifier '_mm_cmpge_epi32'; did you mean '_mm_cmpgt_epi32'?\n   57 |                 cmp_result = _mm_cmpge_epi32(shifted_prev, current);\n      |                              ^~~~~~~~~~~~~~~\n      |                              _mm_cmpgt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3120:46: note: '_mm_cmpgt_epi32' declared here\n 3120 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpgt_epi32(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_30_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0lti45ba.cpp:39:42: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   39 |         __m128i vdiv = _mm_cvtepi8_epi16(_mm_div_epi16(vabs, vbase)); // div (approximation)\n      |                                          ^~~~~~~~~~~~~\n      |                                          _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpaguja01n.cpp:43:45: error: use of undeclared identifier '_mm_mulhi_epi32'\n   43 |         __m128i vresult_hi = _mm_srai_epi32(_mm_mulhi_epi32(vquotient, _mm_set1_epi32(0x10000 / base)), 16);\n      |                                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_31_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2mburp4k.cpp:38:29: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'nearest_multiple_simd' that is compiled without support for 'sse4.1'\n   38 |         __m128i vquotient = _mm_cvtepi16_epi32(vsrc); // Extend to 32-bit for division\n      |                             ^\n[REDACTED]/tmp2mburp4k.cpp:42:42: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'nearest_multiple_simd' that is compiled without support for 'sse4.1'\n   42 |         __m128i vresult = _mm_srai_epi32(_mm_mullo_epi32(vquotient, _mm_set1_epi32(0x10000 / base)), 16);\n      |                                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_32_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy5z9h6kh.cpp:40:33: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   40 |         count += 16 - ((__m64)eq.m128i_u64[0] >> 4);\n      |                               ~~^~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpubtn4rrs.cpp:43:17: error: argument value 8 is outside the valid range [0, 7] [-Wargument-outside-range]\n   43 |                 _mm_extract_epi16(sum, 8) + _mm_extract_epi16(sum, 12);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4161:25: note: expanded from macro '_mm_extract_epi16'\n 4161 |   ((int)(unsigned short)__builtin_ia32_vec_ext_v8hi((__v8hi)(__m128i)(a),      \\\n      |                         ^\n 4162 |                                                     (int)(imm)))\n      |                                                     ~~~~~~~~~~\n[REDACTED]/tmpubtn4rrs.cpp:43:45: error: argument value 12 is outside the valid range [0, 7] [-Wargument-outside-range]\n   43 |                 _mm_extract_epi16(sum, 8) + _mm_extract_epi16(sum, 12);\n      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4161:25: note: expanded from macro '_mm_extract_epi16'\n 4161 |   ((int)(unsigned short)__builtin_ia32_vec_ext_v8hi((__v8hi)(__m128i)(a),      \\\n      |                         ^\n 4162 |                                                     (int)(imm)))\n      |                                                     ~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_33_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_33_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6vgheene.cpp:38:23: error: use of undeclared identifier '_mm_mul_epi64'\n   38 |         __m128i mul = _mm_mul_epi64(vx, va);\n      |                       ^\n[REDACTED]/tmp6vgheene.cpp:39:25: error: use of undeclared identifier '_mm_subs_epi64'; did you mean '_mm_sub_epi64'?\n   39 |         __m128i abs_y = _mm_subs_epi64(_mm_xor_si128(vy, zero), _mm_and_si128(vy, zero));\n      |                         ^~~~~~~~~~~~~~\n      |                         _mm_sub_epi64\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2516:46: note: '_mm_sub_epi64' declared here\n 2516 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi64(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1kqx8v1z.cpp:42:25: error: use of undeclared identifier '_mm_subs_epi32'; did you mean '_mm_sub_epi32'?\n   42 |         __m128i abs_y = _mm_subs_epi32(_mm_xor_si128(vy, vy), _mm_and_si128(vy, zero));\n      |                         ^~~~~~~~~~~~~~\n      |                         _mm_sub_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2481:46: note: '_mm_sub_epi32' declared here\n 2481 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi32(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpe6wdr_36.cpp:38:22: error: use of undeclared identifier '_mm_mul_epi64'\n   38 |         __m128i ax = _mm_mul_epi64(va, vx);\n      |                      ^\n[REDACTED]/tmpe6wdr_36.cpp:47:26: error: use of undeclared identifier '_mm_packsswb_epi16'\n   47 |         __m128i result = _mm_packsswb_epi16(res_lo, res_hi);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp41kz2sm1.cpp:38:23: error: use of undeclared identifier '_mm_mul_epi64'\n   38 |         __m128i mul = _mm_mul_epi64(vx, va);\n      |                       ^\n[REDACTED]/tmp41kz2sm1.cpp:45:23: error: use of undeclared identifier '_mm_packs_epi64'\n   45 |         __m128i res = _mm_packs_epi64(res_lo, res_hi);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_34_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3yk5jfyd.cpp:38:23: error: use of undeclared identifier '_mm_mul_epi64'\n   38 |         __m128i mul = _mm_mul_epi64(vx, va);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzmrsgkaq.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpzmrsgkaq.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwvw87gf2.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpwvw87gf2.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu8qitjyu.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpu8qitjyu.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnpb5aw03.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmpnpb5aw03.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_35_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3ocxtnw8.cpp:47:3: error: typedef redefinition with different types ('struct MinMaxPair' vs 'struct MinMaxPair')\n   47 | } MinMaxPair;\n      |   ^\n[REDACTED]/tmp3ocxtnw8.cpp:23:3: note: previous definition is here\n   23 | } MinMaxPair;\n      |   ^\n1 error generated.\n"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb5r36bmt.cpp:49:31: error: '__builtin_ia32_palignr128' needs target feature ssse3\n   49 |             __m128i shifted = _mm_alignr_epi8(current, current, 4); // Shift right by one element\n      |                               ^\n/usr/lib/llvm-18/lib/clang/18/include/tmmintrin.h:157:13: note: expanded from macro '_mm_alignr_epi8'\n  157 |   ((__m128i)__builtin_ia32_palignr128((__v16qi)(__m128i)(a), \\\n      |             ^\n1 error generated.\n"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_36_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_37_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_38_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_39_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_39_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp17b4pfqa.cpp:45:18: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'matrix_row_norm_compare_simd' that is compiled without support for 'sse3'\n   45 |             v1 = _mm_hadd_pd(v1, v1);\n      |                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_39_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5w755h8p.cpp:51:20: error: use of undeclared identifier '_mm_extract_double'; did you mean '_mm_extract_si64'?\n   51 |         row_sum += _mm_extract_double(sum, 0) + _mm_extract_double(sum, 1);\n      |                    ^~~~~~~~~~~~~~~~~~\n      |                    _mm_extract_si64\n/usr/lib/llvm-18/lib/clang/18/include/ammintrin.h:70:1: note: '_mm_extract_si64' declared here\n   70 | _mm_extract_si64(__m128i __x, __m128i __y)\n      | ^\n[REDACTED]/tmp5w755h8p.cpp:51:44: error: cannot initialize a parameter of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   51 |         row_sum += _mm_extract_double(sum, 0) + _mm_extract_double(sum, 1);\n      |                                            ^\n/usr/lib/llvm-18/lib/clang/18/include/ammintrin.h:70:39: note: passing argument to parameter '__y' here\n   70 | _mm_extract_si64(__m128i __x, __m128i __y)\n      |                                       ^\n[REDACTED]/tmp5w755h8p.cpp:51:49: error: use of undeclared identifier '_mm_extract_double'; did you mean '_mm_extract_si64'?\n   51 |         row_sum += _mm_extract_double(sum, 0) + _mm_extract_double(sum, 1);\n      |                                                 ^~~~~~~~~~~~~~~~~~\n      |                                                 _mm_extract_si64\n/usr/lib/llvm-18/lib/clang/18/include/ammintrin.h:70:1: note: '_mm_extract_si64' declared here\n   70 | _mm_extract_si64(__m128i __x, __m128i __y)\n      | ^\n[REDACTED]/tmp5w755h8p.cpp:51:73: error: cannot initialize a parameter of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   51 |         row_sum += _mm_extract_double(sum, 0) + _mm_extract_double(sum, 1);\n      |                                                                         ^\n/usr/lib/llvm-18/lib/clang/18/include/ammintrin.h:70:39: note: passing argument to parameter '__y' here\n   70 | _mm_extract_si64(__m128i __x, __m128i __y)\n      |                                       ^\n4 errors generated.\n"}
{"task_id": "SimdBench_39_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_39_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzgt0drry.cpp:52:24: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'matrix_row_norm_compare_simd' that is compiled without support for 'sse3'\n   52 |         __m128d hsum = _mm_hadd_pd(sum, sum);\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_40_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_41_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_42_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp06c8wsow.cpp:35:45: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_clear_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i not_b = _mm_andnot_si128(b, _mm_cmpeq_epi64(xmm_zero, xmm_zero));\n      |                                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_42_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpib96n7o7.cpp:35:45: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_clear_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i not_b = _mm_andnot_si128(b, _mm_cmpeq_epi64(zero, zero));\n      |                                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_42_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpthhdqx5f.cpp:35:42: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_clear_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i not_b = _mm_xor_si128(b, _mm_cmpeq_epi64(zero, zero));\n      |                                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_42_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_42_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxkczqrma.cpp:35:42: error: always_inline function '_mm_cmpeq_epi64' requires target feature 'sse4.1', but would be inlined into function 'tensor_bit_clear_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i not_b = _mm_xor_si128(b, _mm_cmpeq_epi64(zero, zero));\n      |                                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_43_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8h4xxong.cpp:50:26: error: always_inline function '_mm_sign_epi8' requires target feature 'ssse3', but would be inlined into function 'tensor_three_valued_logic_simd' that is compiled without support for 'ssse3'\n   50 |         __m128i sign_a = _mm_sign_epi8(a, neg_mask);\n      |                          ^\n[REDACTED]/tmp8h4xxong.cpp:51:26: error: always_inline function '_mm_sign_epi8' requires target feature 'ssse3', but would be inlined into function 'tensor_three_valued_logic_simd' that is compiled without support for 'ssse3'\n   51 |         __m128i sign_b = _mm_sign_epi8(b, neg_mask);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_43_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_43_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_44_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_45_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptmy2nutj.cpp:50:59: error: always_inline function '_mm_cvtepi32_epi16' requires target feature 'avx512vl', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'avx512vl'\n   50 |         __m128i packed = _mm_packs_epi16(_mm_packus_epi16(_mm_cvtepi32_epi16(count), _mm_cvtepi32_epi16(_mm_srli_si128(count, 8))), _mm_setzero_si128());\n      |                                                           ^\n[REDACTED]/tmptmy2nutj.cpp:50:86: error: always_inline function '_mm_cvtepi32_epi16' requires target feature 'avx512vl', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'avx512vl'\n   50 |         __m128i packed = _mm_packs_epi16(_mm_packus_epi16(_mm_cvtepi32_epi16(count), _mm_cvtepi32_epi16(_mm_srli_si128(count, 8))), _mm_setzero_si128());\n      |                                                                                      ^\n2 errors generated.\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_46_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd1ra4odq.cpp:52:15: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'tensor_bit_count_simd' that is compiled without support for 'ssse3'\n   52 |         cnt = _mm_shuffle_epi8(cnt, count_mask);\n      |               ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpxgeip_e1.cpp:43:27: error: always_inline function '_mm_andnot_epi32' requires target feature 'avx512vl', but would be inlined into function 'matrix_conditional_abs_simd' that is compiled without support for 'avx512vl'\n   43 |         __m128i abs_val = _mm_andnot_epi32(_mm_cmplt_epi32(vec, zero), vec);\n      |                           ^\n[REDACTED]/tmpxgeip_e1.cpp:44:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_abs_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i result = _mm_blendv_epi8(vec, abs_val, div_by_3);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpv68flfr3.cpp:44:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'matrix_conditional_abs_simd' that is compiled without support for 'ssse3'\n   44 |         __m128i abs_vec = _mm_abs_epi32(vec); // Compute absolute values\n      |                           ^\n[REDACTED]/tmpv68flfr3.cpp:45:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_abs_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i result = _mm_blendv_epi8(vec, abs_vec, cond); // Select based on condition\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5c7downw.cpp:37:27: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'matrix_conditional_abs_simd' that is compiled without support for 'ssse3'\n   37 |         __m128i abs_vec = _mm_abs_epi32(vec);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp40125hbp.cpp:42:45: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   42 |         __m128i div_three = _mm_cmpeq_epi32(_mm_rem_epi32(vec, three), zero);\n      |                                             ^~~~~~~~~~~~~\n      |                                             _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_47_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkphle14x.cpp:41:87: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   41 |         __m128i rem = _mm_srai_epi32(_mm_and_si128(_mm_sub_epi32(vec, _mm_mullo_epi32(_mm_div_epi32(vec, three), three)), 31);\n      |                                                                                       ^~~~~~~~~~~~~\n      |                                                                                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpkphle14x.cpp:41:38: error: no matching function for call to '_mm_and_si128'\n   41 |         __m128i rem = _mm_srai_epi32(_mm_and_si128(_mm_sub_epi32(vec, _mm_mullo_epi32(_mm_div_epi32(vec, three), three)), 31);\n      |                                      ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2611:46: note: candidate function not viable: no known conversion from 'int' to '__m128i' (vector of 2 'long long' values) for 2nd argument\n 2611 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_and_si128(__m128i __a,\n      |                                              ^\n 2612 |                                                            __m128i __b) {\n      |                                                            ~~~~~~~~~~~\n[REDACTED]/tmpkphle14x.cpp:41:126: error: expected ')'\n   41 |         __m128i rem = _mm_srai_epi32(_mm_and_si128(_mm_sub_epi32(vec, _mm_mullo_epi32(_mm_div_epi32(vec, three), three)), 31);\n      |                                                                                                                              ^\n[REDACTED]/tmpkphle14x.cpp:41:37: note: to match this '('\n   41 |         __m128i rem = _mm_srai_epi32(_mm_and_si128(_mm_sub_epi32(vec, _mm_mullo_epi32(_mm_div_epi32(vec, three), three)), 31);\n      |                                     ^\n3 errors generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgdl09x7o.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmpgdl09x7o.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmpgdl09x7o.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmpgdl09x7o.cpp:48:13: error: use of undeclared identifier '_mm_bsrli_epi128'\n   48 |             _mm_bsrli_epi128(v_src, rotate_bits),\n      |             ^\n[REDACTED]/tmpgdl09x7o.cpp:49:13: error: use of undeclared identifier '_mm_bslli_epi128'\n   49 |             _mm_bslli_epi128(v_src, 32 - rotate_bits)\n      |             ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp776cr0yp.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmp776cr0yp.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmp776cr0yp.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmp776cr0yp.cpp:54:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i result = _mm_blendv_epi8(negated, rotated, condition);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps42zo_m6.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmps42zo_m6.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmps42zo_m6.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmps42zo_m6.cpp:56:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   56 |         __m128i result = _mm_blendv_epi8(negated, rotated, condition);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph_pjq9lq.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmph_pjq9lq.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmph_pjq9lq.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmph_pjq9lq.cpp:58:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   58 |         __m128i result = _mm_blendv_epi8(negated, rotated, condition);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_48_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_lg65hh0.cpp:24:17: warning: & has lower precedence than ==; == will be evaluated first [-Wparentheses]\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^~~~~~~~~~~~\n[REDACTED]/tmp_lg65hh0.cpp:24:17: note: place parentheses around the '==' expression to silence this warning\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^           \n      |                   (         )\n[REDACTED]/tmp_lg65hh0.cpp:24:17: note: place parentheses around the & expression to evaluate it first\n   24 |         if (val & 0xf == 0xf) {\n      |                 ^\n      |             (        )\n[REDACTED]/tmp_lg65hh0.cpp:55:26: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'matrix_conditional_bit_rotate_simd' that is compiled without support for 'sse4.1'\n   55 |         __m128i result = _mm_blendv_epi8(negated, rotated, cond);\n      |                          ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_49_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1rok8v0m.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) B[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp1rok8v0m.cpp:34:38: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   34 |     const __m128 max_f = _mm_set1_ps(INT32_MAX);\n      |                          ~~~~~~~~~~~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp1rok8v0m.cpp:51:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   51 |         if (val > INT32_MAX) {\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp1rok8v0m.cpp:44:18: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'float_to_int_saturate_simd' that is compiled without support for 'sse4.1'\n   44 |         result = _mm_max_epi32(result, min_i);\n      |                  ^\n[REDACTED]/tmp1rok8v0m.cpp:45:18: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'float_to_int_saturate_simd' that is compiled without support for 'sse4.1'\n   45 |         result = _mm_min_epi32(result, max_i);\n      |                  ^\n3 warnings and 2 errors generated.\n"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpm4bev6bu.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) B[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmpm4bev6bu.cpp:34:38: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   34 |     const __m128 max_f = _mm_set1_ps(INT32_MAX);\n      |                          ~~~~~~~~~~~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmpm4bev6bu.cpp:52:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   52 |         if (val > INT32_MAX) {\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmpm4bev6bu.cpp:45:29: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'float_to_int_saturate_simd' that is compiled without support for 'sse4.1'\n   45 |         __m128i saturated = _mm_max_epi32(converted, min_i);\n      |                             ^\n[REDACTED]/tmpm4bev6bu.cpp:46:21: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'float_to_int_saturate_simd' that is compiled without support for 'sse4.1'\n   46 |         saturated = _mm_min_epi32(saturated, max_i);\n      |                     ^\n3 warnings and 2 errors generated.\n"}
{"task_id": "SimdBench_50_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_51_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvjrlabu5.cpp:35:28: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'int_to_float_scaled_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i v_scaled = _mm_mullo_epi32(v_int, v_scale);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_51_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpipe5t903.cpp:34:28: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'int_to_float_scaled_simd' that is compiled without support for 'sse4.1'\n   34 |         __m128i v_scaled = _mm_mullo_epi32(v_int, v_scale);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_51_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpos2_v9b4.cpp:34:28: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'int_to_float_scaled_simd' that is compiled without support for 'sse4.1'\n   34 |         __m128i v_scaled = _mm_mullo_epi32(v_int, v_scale);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_51_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph5d5781j.cpp:35:28: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'int_to_float_scaled_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i v_scaled = _mm_mullo_epi32(v_int, v_scale);\n      |                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_51_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb8xem_sn.cpp:31:40: error: always_inline function '_mm_cvtepi8_epi32' requires target feature 'sse4.1', but would be inlined into function 'int_to_float_scaled_simd' that is compiled without support for 'sse4.1'\n   31 |     __m128 v_scale_f = _mm_cvtepi32_ps(_mm_cvtepi8_epi32(v_scale));\n      |                                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfzgjifcm.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmpfzgjifcm.cpp:39:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   39 |         __m128 rounded = _mm_round_ps(div, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5_nzx6tp.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp5_nzx6tp.cpp:41:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   41 |         __m128 rounded = _mm_round_ps(div, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_w4s4h75.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmp_w4s4h75.cpp:41:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   41 |         __m128 rounded = _mm_round_ps(result, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_52_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuil39f6_.cpp:23:19: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]\n   23 |         if (val > INT32_MAX) C[i] = INT32_MAX;\n      |                 ~ ^~~~~~~~~\n/usr/include/stdint.h:112:22: note: expanded from macro 'INT32_MAX'\n  112 | # define INT32_MAX              (2147483647)\n      |                                  ^~~~~~~~~~\n[REDACTED]/tmpuil39f6_.cpp:42:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   42 |         __m128 rounded = _mm_round_ps(div, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_53_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6eo07jdt.cpp:33:23: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   33 |         __m128i low = _mm_cvtepi16_epi32(_mm_loadu_si128((__m128i const *)(A + i)));\n      |                       ^\n[REDACTED]/tmp6eo07jdt.cpp:34:24: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   34 |         __m128i high = _mm_cvtepi16_epi32(_mm_loadu_si128((__m128i const *)(A + i + 4)));\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5e4kgim9.cpp:35:33: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i converted_low = _mm_cvtepi16_epi32(data);\n      |                                 ^\n[REDACTED]/tmp5e4kgim9.cpp:36:34: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   36 |         __m128i converted_high = _mm_cvtepi16_epi32(_mm_unpackhi_epi64(data, data));\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqlp8z4ao.cpp:33:23: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   33 |         __m128i low = _mm_cvtepi16_epi32(_mm_loadu_si128((__m128i const*)(A + i)));\n      |                       ^\n[REDACTED]/tmpqlp8z4ao.cpp:34:24: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   34 |         __m128i high = _mm_cvtepi16_epi32(_mm_loadu_si128((__m128i const*)(A + i + 4)));\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpobmyrhn9.cpp:34:25: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   34 |         __m128i v_low = _mm_cvtepi16_epi32(_mm_loadu_si128((__m128i const *)(A + i)));\n      |                         ^\n[REDACTED]/tmpobmyrhn9.cpp:35:26: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i v_high = _mm_cvtepi16_epi32(_mm_loadu_si128((__m128i const *)(A + i + 4)));\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_54_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprn8p0j9g.cpp:36:33: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   36 |         __m128i converted_low = _mm_cvtepi16_epi32(low);\n      |                                 ^\n[REDACTED]/tmprn8p0j9g.cpp:37:34: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'int16_to_int32_simd' that is compiled without support for 'sse4.1'\n   37 |         __m128i converted_high = _mm_cvtepi16_epi32(high);\n      |                                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_55_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_55_SSE", "passed": false, "result": "runtime failed: Fatal glibc error: malloc.c:2599 (sysmalloc): assertion failed: (old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\n"}
{"task_id": "SimdBench_56_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpos1e1xdp.cpp:49:16: error: no member named 'sqrtf' in namespace 'std'; did you mean simply 'sqrtf'?\n   49 |         B[i] = std::sqrtf(fval);\n      |                ^~~~~~~~~~\n      |                sqrtf\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:1: note: 'sqrtf' declared here\n  143 | __MATHCALL (sqrt,, (_Mdouble_ __x));\n      | ^\n/usr/include/math.h:287:3: note: expanded from macro '__MATHCALL'\n  287 |   __MATHDECL (_Mdouble_,function,suffix, args)\n      |   ^\n/usr/include/math.h:289:3: note: expanded from macro '__MATHDECL'\n  289 |   __MATHDECL_1(type, function,suffix, args); \\\n      |   ^\n/usr/include/math.h:299:3: note: expanded from macro '__MATHDECL_1'\n  299 |   __MATHDECL_1_IMPL(type, function, suffix, args)\n      |   ^\n/usr/include/math.h:297:15: note: expanded from macro '__MATHDECL_1_IMPL'\n  297 |   extern type __MATH_PRECNAME(function,suffix) args __THROW\n      |               ^\n/usr/include/math.h:326:34: note: expanded from macro '__MATH_PRECNAME'\n  326 | # define __MATH_PRECNAME(name,r) name##f##r\n      |                                  ^\n<scratch space>:185:1: note: expanded from here\n  185 | sqrtf\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_56_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_56_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_56_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_56_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_57_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_57_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_57_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_57_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_57_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd17ayrq4.cpp:58:42: error: use of undeclared identifier '_mm_castsi128_epi32'\n   58 |         __m128 vf_diff = _mm_cvtepi32_ps(_mm_castsi128_epi32(vdiff));\n      |                                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_58_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp__y5b09_.cpp:35:25: error: always_inline function '_mm_cvtepu32_epi64' requires target feature 'sse4.1', but would be inlined into function 'widening_uint_simd' that is compiled without support for 'sse4.1'\n   35 |         __m128i low64 = _mm_cvtepu32_epi64(low); // Extend low 4x32-bit to 2x64-bit\n      |                         ^\n[REDACTED]/tmp__y5b09_.cpp:36:26: error: always_inline function '_mm_cvtepu32_epi64' requires target feature 'sse4.1', but would be inlined into function 'widening_uint_simd' that is compiled without support for 'sse4.1'\n   36 |         __m128i high64 = _mm_cvtepu32_epi64(_mm_shuffle_epi32(low, _MM_SHUFFLE(3, 2, 3, 2))); // Extend high 4x32-bit to 2x64-bit\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptqjs8_6t.cpp:38:23: error: always_inline function '_mm_cvtepi32_epi64' requires target feature 'sse4.1', but would be inlined into function 'widening_uint_simd' that is compiled without support for 'sse4.1'\n   38 |         __m128i low = _mm_cvtepi32_epi64(src_vec);\n      |                       ^\n[REDACTED]/tmptqjs8_6t.cpp:39:24: error: always_inline function '_mm_cvtepi32_epi64' requires target feature 'sse4.1', but would be inlined into function 'widening_uint_simd' that is compiled without support for 'sse4.1'\n   39 |         __m128i high = _mm_cvtepi32_epi64(_mm_and_si128(src_vec, high_bits));\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_59_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0xp77p0i.cpp:36:28: error: always_inline function '_mm_cvtepu32_epi64' requires target feature 'sse4.1', but would be inlined into function 'widening_uint_simd' that is compiled without support for 'sse4.1'\n   36 |         __m128i low_part = _mm_cvtepu32_epi64(src_vec);\n      |                            ^\n[REDACTED]/tmp0xp77p0i.cpp:37:29: error: always_inline function '_mm_cvtepu32_epi64' requires target feature 'sse4.1', but would be inlined into function 'widening_uint_simd' that is compiled without support for 'sse4.1'\n   37 |         __m128i high_part = _mm_cvtepu32_epi64(_mm_shuffle_epi32(src_vec, _MM_SHUFFLE(3, 2, 1, 0)));\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpoo50dm6x.cpp:46:11: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'indexed_sum_simd' that is compiled without support for 'sse3'\n   46 |     sum = _mm_hadd_pd(sum, sum);\n      |           ^\n1 error generated.\n"}
{"task_id": "SimdBench_60_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "runtime failed: malloc(): corrupted top size\n"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplvb6_ojx.cpp:65:19: error: always_inline function '_mm_hadd_pd' requires target feature 'sse3', but would be inlined into function 'simple_conv2d_simd' that is compiled without support for 'sse3'\n   65 |             sum = _mm_hadd_pd(sum, sum);\n      |                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_61_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_62_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_63_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_64_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp21x3gl2j.cpp:57:16: error: no matching member function for call to 'insert'\n   57 |         result.insert(result.end(), &result[result.size()], 8);\n      |         ~~~~~~~^~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1437:7: note: candidate function not viable: no known conversion from 'value_type *' (aka 'int *') to 'size_type' (aka 'unsigned long') for 2nd argument; remove &\n 1437 |       insert(const_iterator __position, size_type __n, const value_type& __x)\n      |       ^                                 ~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1482:2: note: candidate template ignored: deduced conflicting types for parameter '_InputIterator' ('value_type *' (aka 'int *') vs. 'int')\n 1482 |         insert(const_iterator __position, _InputIterator __first,\n      |         ^\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1362:7: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 1362 |       insert(const_iterator __position, const value_type& __x);\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1393:7: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 1393 |       insert(const_iterator __position, value_type&& __x)\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1411:7: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 1411 |       insert(const_iterator __position, initializer_list<value_type> __l)\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmp21x3gl2j.cpp:59:16: error: no matching member function for call to 'insert'\n   59 |         result.insert(result.end(), &result[result.size()], 8);\n      |         ~~~~~~~^~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1437:7: note: candidate function not viable: no known conversion from 'value_type *' (aka 'int *') to 'size_type' (aka 'unsigned long') for 2nd argument; remove &\n 1437 |       insert(const_iterator __position, size_type __n, const value_type& __x)\n      |       ^                                 ~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1482:2: note: candidate template ignored: deduced conflicting types for parameter '_InputIterator' ('value_type *' (aka 'int *') vs. 'int')\n 1482 |         insert(const_iterator __position, _InputIterator __first,\n      |         ^\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1362:7: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 1362 |       insert(const_iterator __position, const value_type& __x);\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1393:7: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 1393 |       insert(const_iterator __position, value_type&& __x)\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1411:7: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 1411 |       insert(const_iterator __position, initializer_list<value_type> __l)\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_65_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprvmqag62.cpp:57:30: error: use of undeclared identifier '_mm_load1_epi32'\n   57 |         __m128i delimiters = _mm_load1_epi32(&delimeter);\n      |                              ^\n[REDACTED]/tmprvmqag62.cpp:55:23: error: argument value 5 is outside the valid range [0, 3] [-Wargument-outside-range]\n   55 |         interleaved = _mm_insert_epi32(interleaved, _mm_extract_epi32(vec, 0), 5);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_65_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_pcbhc2_.cpp:57:29: error: '__builtin_ia32_vec_set_v4si' needs target feature sse4.1\n   57 |         __m128i low_delim = _mm_insert_epi32(low, delimeter, 2);\n      |                             ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n[REDACTED]/tmp_pcbhc2_.cpp:58:30: error: '__builtin_ia32_vec_set_v4si' needs target feature sse4.1\n   58 |         __m128i high_delim = _mm_insert_epi32(high, delimeter, 2);\n      |                              ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5qrj8lgh.cpp:58:12: error: use of undeclared identifier '_mm_hmul_epi32'; did you mean '_mm_mul_epi32'?\n   58 |     prod = _mm_hmul_epi32(prod, prod);\n      |            ^~~~~~~~~~~~~~\n      |            _mm_mul_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:558:46: note: '_mm_mul_epi32' declared here\n  558 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_mul_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp5qrj8lgh.cpp:59:12: error: use of undeclared identifier '_mm_hmul_epi32'; did you mean '_mm_mul_epi32'?\n   59 |     prod = _mm_hmul_epi32(prod, prod);\n      |            ^~~~~~~~~~~~~~\n      |            _mm_mul_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:558:46: note: '_mm_mul_epi32' declared here\n  558 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_mul_epi32(__m128i __V1,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9ita_t0o.cpp:45:48: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   45 |         sum = _mm_add_epi32(sum, _mm_add_epi32(_mm_cvtepi16_epi32(lo), _mm_cvtepi16_epi32(hi)));\n      |                                                ^\n[REDACTED]/tmp9ita_t0o.cpp:45:72: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   45 |         sum = _mm_add_epi32(sum, _mm_add_epi32(_mm_cvtepi16_epi32(lo), _mm_cvtepi16_epi32(hi)));\n      |                                                                        ^\n[REDACTED]/tmp9ita_t0o.cpp:48:43: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   48 |         __m128i prod_lo = _mm_mullo_epi32(_mm_cvtepi16_epi32(lo), _mm_shuffle_epi32(product, _MM_SHUFFLE(0,0,0,0)));\n      |                                           ^\n[REDACTED]/tmp9ita_t0o.cpp:48:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   48 |         __m128i prod_lo = _mm_mullo_epi32(_mm_cvtepi16_epi32(lo), _mm_shuffle_epi32(product, _MM_SHUFFLE(0,0,0,0)));\n      |                           ^\n[REDACTED]/tmp9ita_t0o.cpp:49:43: error: always_inline function '_mm_cvtepi16_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   49 |         __m128i prod_hi = _mm_mullo_epi32(_mm_cvtepi16_epi32(hi), _mm_shuffle_epi32(product, _MM_SHUFFLE(1,1,1,1)));\n      |                                           ^\n[REDACTED]/tmp9ita_t0o.cpp:49:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   49 |         __m128i prod_hi = _mm_mullo_epi32(_mm_cvtepi16_epi32(hi), _mm_shuffle_epi32(product, _MM_SHUFFLE(1,1,1,1)));\n      |                           ^\n[REDACTED]/tmp9ita_t0o.cpp:54:22: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   54 |     __m128i sum_h1 = _mm_hadd_epi32(sum, sum);\n      |                      ^\n[REDACTED]/tmp9ita_t0o.cpp:55:22: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   55 |     __m128i sum_h2 = _mm_hadd_epi32(sum_h1, sum_h1);\n      |                      ^\n[REDACTED]/tmp9ita_t0o.cpp:59:23: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   59 |     __m128i prod_h1 = _mm_hadd_epi32(product, product);\n      |                       ^\n[REDACTED]/tmp9ita_t0o.cpp:60:23: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   60 |     __m128i prod_h2 = _mm_hadd_epi32(prod_h1, prod_h1);\n      |                       ^\n10 errors generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpi7p1udpi.cpp:55:22: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   55 |     __m128i sum_h1 = _mm_hadd_epi16(sum, sum);\n      |                      ^\n[REDACTED]/tmpi7p1udpi.cpp:56:22: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   56 |     __m128i sum_h2 = _mm_hadd_epi16(sum_h1, sum_h1);\n      |                      ^\n[REDACTED]/tmpi7p1udpi.cpp:60:23: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   60 |     __m128i prod_h1 = _mm_hadd_epi16(prod, prod);\n      |                       ^\n[REDACTED]/tmpi7p1udpi.cpp:61:23: error: always_inline function '_mm_hadd_epi16' requires target feature 'ssse3', but would be inlined into function 'sum_product_simd' that is compiled without support for 'ssse3'\n   61 |     __m128i prod_h2 = _mm_hadd_epi16(prod_h1, prod_h1);\n      |                       ^\n4 errors generated.\n"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_66_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu4sl543c.cpp:48:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   48 |         __m128i lo_prod = _mm_mullo_epi32(product, lo);\n      |                           ^\n[REDACTED]/tmpu4sl543c.cpp:49:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   49 |         __m128i hi_prod = _mm_mullo_epi32(product, hi);\n      |                           ^\n[REDACTED]/tmpu4sl543c.cpp:52:19: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_product_simd' that is compiled without support for 'sse4.1'\n   52 |         product = _mm_mullo_epi32(lo_prod, hi_prod);\n      |                   ^\n3 errors generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp52bkdbd0.cpp:49:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   49 |         current_max = _mm_max_epi32(current_max, new_val);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpotvvdm4a.cpp:46:20: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   46 |         temp_max = _mm_max_epi32(data, current_max);\n      |                    ^\n[REDACTED]/tmpotvvdm4a.cpp:47:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   47 |         current_max = _mm_max_epi32(temp_max, current_max);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpyfqvdtbi.cpp:47:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   47 |         current_max = _mm_max_epi32(current_max, new_val);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7hswzr2i.cpp:48:20: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   48 |         temp_max = _mm_max_epi32(current_max, data);\n      |                    ^\n[REDACTED]/tmp7hswzr2i.cpp:49:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   49 |         current_max = _mm_max_epi32(current_max, temp_max);\n      |                       ^\n2 errors generated.\n"}
{"task_id": "SimdBench_67_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4hsf1ej8.cpp:48:20: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'rolling_max_simd' that is compiled without support for 'sse4.1'\n   48 |         temp_max = _mm_max_epi32(vec, current_max);\n      |                    ^\n1 error generated.\n"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_68_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpirr4u8iu.cpp:49:27: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   49 |         current_lengths = _mm_max_epi32(lengths, zero);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1p50syh8.cpp:48:53: error: cannot take the address of an rvalue of type 'size_type' (aka 'unsigned long')\n   48 |         __m128i lengths = _mm_loadu_si128((__m128i*)&strings[i].length());\n      |                                                     ^~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsv2ws0t6.cpp:45:53: error: cannot take the address of an rvalue of type 'size_type' (aka 'unsigned long')\n   45 |         __m128i lengths = _mm_loadu_si128((__m128i*)&strings[i].length());\n      |                                                     ^~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp62432oge.cpp:46:55: error: cannot take the address of an rvalue of type 'size_type' (aka 'unsigned long')\n   46 |         __m128i v_lengths = _mm_loadu_si128((__m128i*)&strings[i].length());\n      |                                                       ^~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_69_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfha381kj.cpp:51:23: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'longest_simd' that is compiled without support for 'sse4.1'\n   51 |         max_lengths = _mm_max_epi32(max_lengths, current_lengths);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg0016ram.cpp:39:25: error: use of undeclared identifier '_mm_subs_epi64'; did you mean '_mm_sub_epi64'?\n   39 |         __m128i vtemp = _mm_subs_epi64(va, vb);\n      |                         ^~~~~~~~~~~~~~\n      |                         _mm_sub_epi64\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2516:46: note: '_mm_sub_epi64' declared here\n 2516 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi64(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpt670c8ap.cpp:44:23: error: use of undeclared identifier '_mm_subs_epu64'\n   44 |         __m128i sub = _mm_subs_epu64(va, vb);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcwdd3dx2.cpp:45:23: error: use of undeclared identifier '_mm_subs_epu64'\n   45 |         __m128i tmp = _mm_subs_epu64(tmp_a, tmp_b);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpilbj4dqa.cpp:44:23: error: use of undeclared identifier '_mm_subs_epu64'\n   44 |         __m128i sub = _mm_subs_epu64(va, vb);\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_70_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr7xhh5zc.cpp:40:88: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   40 |         vb = _mm_sub_epi64(va, _mm_mullo_epi32(vb, _mm_cvtsi64_si128(_mm_cvtsi128_si64(_mm_div_epu32(va, vb)))));\n      |                                                                                        ^~~~~~~~~~~~~\n      |                                                                                        _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5xjfmngo.cpp:50:32: error: argument to '__builtin_ia32_shufps' must be a constant integer\n   50 |             __m128 broadcast = _mm_shuffle_ps(vec, vec, _MM_SHUFFLE(j,j,j,j));\n      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/xmmintrin.h:2618:12: note: expanded from macro '_mm_shuffle_ps'\n 2618 |   ((__m128)__builtin_ia32_shufps((__v4sf)(__m128)(a), (__v4sf)(__m128)(b), \\\n      |            ^\n 2619 |                                  (int)(mask)))\n      |                                  ~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_71_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_71_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_71_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_72_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_72_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmz0kigeb.cpp:38:44: error: use of undeclared identifier '_mm_rem_epu32'\n   38 |         __m128i v_mod = _mm_cvtepi32_epi64(_mm_rem_epu32(_mm_cvtsi64_si128(n), _mm_cvtsi64_si128(i)));\n      |                                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp45upxhqq.cpp:36:44: error: use of undeclared identifier '_mm_rem_epu32'\n   36 |         __m128i v_mod = _mm_cvtepi32_epi64(_mm_rem_epu32(_mm_cvtepi64_epi32(v_n), _mm_cvtepi64_epi32(v_i)));\n      |                                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4ewsh4ew.cpp:38:44: error: use of undeclared identifier '_mm_rem_epu32'\n   38 |         __m128i v_mod = _mm_cvtepi32_epi64(_mm_rem_epu32(_mm_cvtsi64_si128(i), _mm_cvtsi64_si128(n)));\n      |                                            ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5ajvcu1s.cpp:38:43: error: use of undeclared identifier '_mm_rem_epu64'\n   38 |         __m128i v_mod = _mm_cvtsi128_si64(_mm_rem_epu64(v_n, v_i));\n      |                                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_73_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmph65xkfpn.cpp:38:43: error: use of undeclared identifier '_mm_rem_epu64'\n   38 |         __m128i v_mod = _mm_cvtsi128_si64(_mm_rem_epu64(v_n, _mm_set1_epi64x(i)));\n      |                                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp73_masap.cpp:76:24: error: use of undeclared identifier '_mm_rem_epu32'\n   76 |         __m128i vrem = _mm_rem_epu32(vn, vi); // Hypothetical SIMD remainder\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdl8nt95c.cpp:53:67: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   53 |         while (_mm_cvtsi128_si32(_mm_andnot_si128(_mm_cmpeq_epi32(_mm_div_epi32(vdiv, vrem), vzero), vzero)) == 0) {\n      |                                                                   ^~~~~~~~~~~~~\n      |                                                                   _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpv2zf09qb.cpp:65:30: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   65 |         __m128i v_quotient = _mm_div_epi32(v_n, v_divisor); // Hypothetical intrinsic for division\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpv2zf09qb.cpp:72:27: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   72 |             int divisor = _mm_extract_epi32(v_divisor, index);\n      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmpv2zf09qb.cpp:74:19: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   74 |             v_n = _mm_div_epi32(v_n, _mm_set1_epi32(divisor)); // Update n\n      |                   ^~~~~~~~~~~~~\n      |                   _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpv2zf09qb.cpp:78:52: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   78 |             if (_mm_cmpgt_epi32(v_divisor, v_limit).m128i_u32[0]) {\n      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n4 errors generated.\n"}
{"task_id": "SimdBench_74_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_75_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmvef9kam.cpp:42:43: error: use of undeclared identifier '_mm_rem_epu32'\n   42 |         __m128i rem1 = _mm_cvtepi32_epi64(_mm_rem_epu32(v_n, _mm_shuffle_epi32(v_i, _MM_SHUFFLE(0,0,0,0))));\n      |                                           ^\n[REDACTED]/tmpmvef9kam.cpp:43:43: error: use of undeclared identifier '_mm_rem_epu32'\n   43 |         __m128i rem2 = _mm_cvtepi32_epi64(_mm_rem_epu32(v_n, _mm_shuffle_epi32(v_i, _MM_SHUFFLE(1,1,1,1))));\n      |                                           ^\n[REDACTED]/tmpmvef9kam.cpp:44:43: error: use of undeclared identifier '_mm_rem_epu32'\n   44 |         __m128i rem3 = _mm_cvtepi32_epi64(_mm_rem_epu32(v_n, _mm_shuffle_epi32(v_i, _MM_SHUFFLE(2,2,2,2))));\n      |                                           ^\n[REDACTED]/tmpmvef9kam.cpp:45:43: error: use of undeclared identifier '_mm_rem_epu32'\n   45 |         __m128i rem4 = _mm_cvtepi32_epi64(_mm_rem_epu32(v_n, _mm_shuffle_epi32(v_i, _MM_SHUFFLE(3,3,3,3))));\n      |                                           ^\n4 errors generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf37sw2o0.cpp:41:25: error: use of undeclared identifier '_mm_rem_epu64'\n   41 |         __m128i vrem1 = _mm_rem_epu64(vn, vi); // Hypothetical intrinsic for remainder\n      |                         ^\n[REDACTED]/tmpf37sw2o0.cpp:42:25: error: use of undeclared identifier '_mm_rem_epu64'\n   42 |         __m128i vrem2 = _mm_rem_epu64(vn, _mm_add_epi64(vi, _mm_set_epi64x(2, 2))); \n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpw097ow7g.cpp:42:55: error: use of undeclared identifier '_mm_rem_epu32'\n   42 |         __m128i v_mod = _mm_and_si128(_mm_cmpeq_epi32(_mm_rem_epu32(v_n, v_i), v_zero), _mm_cmpgt_epi32(v_i, v_one));\n      |                                                       ^\n[REDACTED]/tmpw097ow7g.cpp:43:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   43 |         __m128i mask = _mm_movemask_epi8(v_mod);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpw097ow7g.cpp:44:12: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   44 |         if(mask != 0) return false;\n      |            ^~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg20_wx2c.cpp:41:25: error: use of undeclared identifier '_mm_rem_epu64'\n   41 |         __m128i v_mod = _mm_rem_epu64(v_n, v_i);\n      |                         ^\n[REDACTED]/tmpg20_wx2c.cpp:48:17: error: use of undeclared identifier '_mm_rem_epu64'\n   48 |         v_mod = _mm_rem_epu64(v_n, v_i);\n      |                 ^\n2 errors generated.\n"}
{"task_id": "SimdBench_76_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp82nw25ne.cpp:41:24: error: use of undeclared identifier '_mm_rem_epu32'\n   41 |         __m128i rem1 = _mm_rem_epu32(v_n, v_i); // Hypothetical intrinsic for remainder\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphhcaifa0.cpp:49:17: warning: variable length arrays in C++ are a Clang extension [-Wvla-cxx-extension]\n   49 |     char result[len + 1];\n      |                 ^~~~~~~\n[REDACTED]/tmphhcaifa0.cpp:49:17: note: initializer of 'len' is not a constant expression\n[REDACTED]/tmphhcaifa0.cpp:48:15: note: declared here\n   48 |     const int len = s.length();\n      |               ^\n[REDACTED]/tmphhcaifa0.cpp:65:14: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'solve_simd' that is compiled without support for 'sse4.1'\n   65 |         if (!_mm_testz_si128(is_letter, is_letter)){\n      |              ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9qu09xc1.cpp:84:32: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'solve_simd' that is compiled without support for 'sse4.1'\n   84 |         __m128i swapped_case = _mm_blendv_epi8(to_lower, to_upper, is_lower);\n      |                                ^\n1 error generated.\n"}
{"task_id": "SimdBench_77_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpk6famdvb.cpp:63:73: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   63 |         __m128i is_upper = _mm_and_si128(_mm_cmpgt_epi8(data, upper_a), _mm_cmple_epi8(data, upper_z));\n      |                                                                         ^~~~~~~~~~~~~~\n      |                                                                         _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpk6famdvb.cpp:64:73: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   64 |         __m128i is_lower = _mm_and_si128(_mm_cmpgt_epi8(data, lower_a), _mm_cmple_epi8(data, lower_z));\n      |                                                                         ^~~~~~~~~~~~~~\n      |                                                                         _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_78_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_79_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_79_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpia3_f47f.cpp:42:24: error: use of undeclared identifier '_mm_rem_epu32'\n   42 |         __m128i rem1 = _mm_rem_epu32(vi, divisors[0]);\n      |                        ^\n[REDACTED]/tmpia3_f47f.cpp:43:24: error: use of undeclared identifier '_mm_rem_epu32'\n   43 |         __m128i rem2 = _mm_rem_epu32(vi, divisors[1]);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb44rofwu.cpp:48:26: error: use of undeclared identifier '_mm_rem_epu32'\n   48 |         __m128i rem_11 = _mm_rem_epu32(nums, divisor_11);\n      |                          ^\n[REDACTED]/tmpb44rofwu.cpp:49:26: error: use of undeclared identifier '_mm_rem_epu32'\n   49 |         __m128i rem_13 = _mm_rem_epu32(nums, divisor_13);\n      |                          ^\n[REDACTED]/tmpb44rofwu.cpp:58:27: error: argument to '__builtin_ia32_pshufd' must be a constant integer\n   58 |             __m128i num = _mm_shuffle_epi32(selected, _MM_SHUFFLE(j,j,j,j));\n      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:13: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |             ^                                           ~~~~~~~~~~\n[REDACTED]/tmpb44rofwu.cpp:59:48: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   59 |             __m128i digits = _mm_set1_epi32(num.m128i_i32[0]);\n      |                                             ~~~^~~~~~~~~~\n[REDACTED]/tmpb44rofwu.cpp:64:55: error: use of undeclared identifier '_mm_rem_epu8'\n   64 |                 __m128i remainder = _mm_cvtepu8_epi16(_mm_rem_epu8(digits, tens));\n      |                                                       ^\n[REDACTED]/tmpb44rofwu.cpp:67:26: error: use of undeclared identifier '_mm_div_epu8'; did you mean '_mm_min_epu8'?\n   67 |                 digits = _mm_div_epu8(digits, tens);\n      |                          ^~~~~~~~~~~~\n      |                          _mm_min_epu8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2316:46: note: '_mm_min_epu8' declared here\n 2316 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu8(__m128i __a,\n      |                                              ^\n6 errors generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpojs92g0d.cpp:50:26: error: use of undeclared identifier '_mm_rem_epu32'\n   50 |         __m128i rem_11 = _mm_rem_epu32(nums, divisor_11);\n      |                          ^\n[REDACTED]/tmpojs92g0d.cpp:51:26: error: use of undeclared identifier '_mm_rem_epu32'\n   51 |         __m128i rem_13 = _mm_rem_epu32(nums, divisor_13);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpz0mdc_tx.cpp:53:40: error: use of undeclared identifier '_mm_rem_epu32'\n   53 |         __m128i rem_11 = _mm_and_si128(_mm_rem_epu32(v, mod_11), mask);\n      |                                        ^\n[REDACTED]/tmpz0mdc_tx.cpp:54:40: error: use of undeclared identifier '_mm_rem_epu32'\n   54 |         __m128i rem_13 = _mm_and_si128(_mm_rem_epu32(v, mod_13), mask);\n      |                                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_80_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmo8vjn4l.cpp:46:24: error: no matching function for call to '_mm_set_epi32'\n   46 |         __m128i nums = _mm_set_epi32(i+15, i+14, i+13, i+12, i+11, i+10, i+9, i+8, i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                        ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 16 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpmo8vjn4l.cpp:47:26: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   47 |         __m128i rem_11 = _mm_rem_epi32(nums, divisor_11);\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n[REDACTED]/tmpmo8vjn4l.cpp:48:26: error: use of undeclared identifier '_mm_rem_epi32'; did you mean '_mm_rot_epi32'?\n   48 |         __m128i rem_13 = _mm_rem_epi32(nums, divisor_13);\n      |                          ^~~~~~~~~~~~~\n      |                          _mm_rot_epi32\n/usr/lib/llvm-18/lib/clang/18/include/xopintrin.h:216:1: note: '_mm_rot_epi32' declared here\n  216 | _mm_rot_epi32(__m128i __A, __m128i __B)\n      | ^\n3 errors generated.\n"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_81_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_81_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_82_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_83_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_83_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_83_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_84_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfu7qqj7i.cpp:45:23: error: argument to '__builtin_ia32_vec_set_v4si' must be a constant integer\n   45 |                 v_j = _mm_insert_epi32(v_j, l[k], k - j);\n      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:955:13: note: expanded from macro '_mm_insert_epi32'\n  955 |   ((__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I),        \\\n      |             ^\n  956 |                                         (int)(N)))\n      |                                         ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_84_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_84_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpqsqolqpb.cpp:58:39: error: use of undeclared identifier '_mm_div_epi16'; did you mean '_mm_min_epi16'?\n   58 |         __m128i quot = _mm_srli_epi16(_mm_div_epi16(n, rem), 4);\n      |                                       ^~~~~~~~~~~~~\n      |                                       _mm_min_epi16\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2297:46: note: '_mm_min_epi16' declared here\n 2297 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi16(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpqsqolqpb.cpp:60:18: error: argument to '__builtin_ia32_vec_set_v16qi' must be a constant integer\n   60 |         digits = _mm_insert_epi8(digits, _mm_extract_epi8(digit, 0), count++);\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:923:13: note: expanded from macro '_mm_insert_epi8'\n  923 |   ((__m128i)__builtin_ia32_vec_set_v16qi((__v16qi)(__m128i)(X), (int)(I),      \\\n      |             ^\n  924 |                                          (int)(N)))\n      |                                          ~~~~~~~~\n[REDACTED]/tmpqsqolqpb.cpp:65:39: error: argument to '__builtin_ia32_vec_ext_v16qi' must be a constant integer\n   65 |         result[count - i - 1] = '0' + _mm_extract_epi8(digits, i);\n      |                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n 1030 |                                                     (int)(N)))\n      |                                                     ~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4jlhhp3l.cpp:69:37: error: '__builtin_ia32_vec_ext_v16qi' needs target feature sse4.1\n   69 |         digits[digits.size() - 1] = _mm_extract_epi8(vrem, 0);\n      |                                     ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpx8ua85cq.cpp:65:30: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   65 |         __m128i div_result = _mm_div_epu32(vx, vbase); // Hypothetical intrinsic for SIMD division\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpx8ua85cq.cpp:71:53: error: argument to '__builtin_ia32_pslldqi128_byteshift' must be a constant integer\n   71 |         remainder_vec = _mm_or_si128(remainder_vec, _mm_slli_si128(remainder, count));\n      |                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2686:13: note: expanded from macro '_mm_slli_si128'\n 2686 |   ((__m128i)__builtin_ia32_pslldqi128_byteshift((__v2di)(__m128i)(a),          \\\n      |             ^\n 2687 |                                                 (int)(imm)))\n      |                                                 ~~~~~~~~~~\n[REDACTED]/tmpx8ua85cq.cpp:76:29: error: argument to '__builtin_ia32_pshufd' must be a constant integer\n   76 |         __m128i digit_val = _mm_shuffle_epi32(remainder_vec, _MM_SHUFFLE(i,i,i,i));\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:13: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |             ^                                           ~~~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1cqc7olf.cpp:60:30: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   60 |         __m128i div_result = _mm_div_epu32(vx, vbase); // Simulated division\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp1cqc7olf.cpp:65:37: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   65 |         if(_mm_cmpeq_epi32(vx, zero).m128i_u32[0]) break;\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_85_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnj6400la.cpp:64:30: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   64 |         __m128i div_result = _mm_div_epi32(vx, vbase); // Simulated division\n      |                              ^~~~~~~~~~~~~\n      |                              _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7dakfyce.cpp:46:13: warning: logical not is only applied to the left hand side of this comparison [-Wlogical-not-parentheses]\n   46 |         if (!_mm_movemask_epi8(cmp) == 0xFFFF) {\n      |             ^                       ~~\n[REDACTED]/tmp7dakfyce.cpp:46:13: note: add parentheses after the '!' to evaluate the comparison first\n   46 |         if (!_mm_movemask_epi8(cmp) == 0xFFFF) {\n      |             ^                                \n      |              (                               )\n[REDACTED]/tmp7dakfyce.cpp:46:13: note: add parentheses around left hand side expression to silence this warning\n   46 |         if (!_mm_movemask_epi8(cmp) == 0xFFFF) {\n      |             ^\n      |             (                      )\n[REDACTED]/tmp7dakfyce.cpp:46:37: warning: result of comparison of constant 65535 with expression of type 'bool' is always false [-Wtautological-constant-out-of-range-compare]\n   46 |         if (!_mm_movemask_epi8(cmp) == 0xFFFF) {\n      |             ~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~\n[REDACTED]/tmp7dakfyce.cpp:43:34: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'is_palindrome_simd' that is compiled without support for 'ssse3'\n   43 |         __m128i reversed_right = _mm_shuffle_epi8(right, _mm_set_epi8(\n      |                                  ^\n2 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpg3incwpu.cpp:45:43: error: use of undeclared identifier '_mm_reverse_epi8'; did you mean '_mm_movemask_epi8'?\n   45 |         __m128i eq = _mm_cmpeq_epi8(left, _mm_reverse_epi8(right));\n      |                                           ^~~~~~~~~~~~~~~~\n      |                                           _mm_movemask_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4204:42: note: '_mm_movemask_epi8' declared here\n 4204 | static __inline__ int __DEFAULT_FN_ATTRS _mm_movemask_epi8(__m128i __a) {\n      |                                          ^\n[REDACTED]/tmpg3incwpu.cpp:45:22: error: no matching function for call to '_mm_cmpeq_epi8'\n   45 |         __m128i eq = _mm_cmpeq_epi8(left, _mm_reverse_epi8(right));\n      |                      ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3023:46: note: candidate function not viable: no known conversion from 'int' to '__m128i' (vector of 2 'long long' values) for 2nd argument\n 3023 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmpeq_epi8(__m128i __a,\n      |                                              ^\n 3024 |                                                             __m128i __b) {\n      |                                                             ~~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_86_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_87_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj2wrvc91.cpp:59:38: error: argument to '__builtin_ia32_vec_ext_v16qi' must be a constant integer\n   59 |             out += static_cast<char>(_mm_extract_epi8(result, j - i));\n      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n 1030 |                                                     (int)(N)))\n      |                                                     ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpq6tnm6c4.cpp:41:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   41 |         __m128i mask = _mm_movemask_epi8(cmp);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpq6tnm6c4.cpp:42:13: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   42 |         if (mask != 0xFFFF) {\n      |             ^~~~~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_88_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp262t5q9o.cpp:39:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   39 |         __m128i mask = _mm_movemask_epi8(cmp);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmp262t5q9o.cpp:40:13: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   40 |         if (mask != 0xFFFF) {\n      |             ^~~~~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpl37tbplx.cpp:46:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   46 |         int open_count = _mm_popcnt_u32(_mm_movemask_epi8(less));\n      |                          ^\n[REDACTED]/tmpl37tbplx.cpp:47:27: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   47 |         int close_count = _mm_popcnt_u32(_mm_movemask_epi8(greater));\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0xqbv4u_.cpp:47:20: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   47 |         int open = _mm_popcnt_u32(_mm_movemask_epi8(less));\n      |                    ^\n[REDACTED]/tmp0xqbv4u_.cpp:48:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   48 |         int close = _mm_popcnt_u32(_mm_movemask_epi8(great));\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkdur6tym.cpp:44:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   44 |         int open_count = _mm_popcnt_u32(_mm_movemask_epi8(less));\n      |                          ^\n[REDACTED]/tmpkdur6tym.cpp:45:27: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   45 |         int close_count = _mm_popcnt_u32(_mm_movemask_epi8(greater));\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpplcl3mcx.cpp:44:20: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   44 |         int open = _mm_popcnt_u32(_mm_movemask_epi8(less));\n      |                    ^\n[REDACTED]/tmpplcl3mcx.cpp:45:21: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   45 |         int close = _mm_popcnt_u32(_mm_movemask_epi8(greater));\n      |                     ^\n2 errors generated.\n"}
{"task_id": "SimdBench_89_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6ty00qdl.cpp:59:14: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'sse4.1'\n   59 |         if (!_mm_testz_si128(negative_check, negative_check)) {\n      |              ^\n1 error generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpmds3lgcl.cpp:51:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   51 |         int count_open = _mm_popcnt_u32(_mm_movemask_epi8(eq_open));\n      |                          ^\n[REDACTED]/tmpmds3lgcl.cpp:52:27: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   52 |         int count_close = _mm_popcnt_u32(_mm_movemask_epi8(eq_close));\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf1c677hn.cpp:61:20: error: argument to '__builtin_ia32_psrldqi128_byteshift' must be a constant integer\n   61 |             mask = _mm_srli_si128(mask, simd_width - chunk_size);\n      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2895:13: note: expanded from macro '_mm_srli_si128'\n 2895 |   ((__m128i)__builtin_ia32_psrldqi128_byteshift((__v2di)(__m128i)(a),          \\\n      |             ^\n 2896 |                                                 (int)(imm)))\n      |                                                 ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpf4mbgjz2.cpp:56:14: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'sse4.1'\n   56 |         if (!_mm_testz_si128(negative_check, negative_check)) {\n      |              ^\n1 error generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd1yypr1_.cpp:65:26: error: argument to '__builtin_ia32_psrldqi128_byteshift' must be a constant integer\n   65 |             valid_mask = _mm_srli_si128(valid_mask, simd_width - chunk_size);\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2895:13: note: expanded from macro '_mm_srli_si128'\n 2895 |   ((__m128i)__builtin_ia32_psrldqi128_byteshift((__v2di)(__m128i)(a),          \\\n      |             ^\n 2896 |                                                 (int)(imm)))\n      |                                                 ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_90_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5avjqsj1.cpp:45:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   45 |         int count_open = _mm_popcnt_u32(_mm_movemask_epi8(eq_open));\n      |                          ^\n[REDACTED]/tmp5avjqsj1.cpp:46:27: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'correct_bracketing_simd' that is compiled without support for 'popcnt'\n   46 |         int count_close = _mm_popcnt_u32(_mm_movemask_epi8(eq_close));\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_91_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_91_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpi54pjaeq.cpp:44:27: error: no matching function for call to '_mm_set_epi8'\n   44 |     __m128i vowels_mask = _mm_set_epi8(\n      |                           ^~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3563:1: note: candidate function not viable: requires 16 arguments, but 18 were provided\n 3563 | _mm_set_epi8(char __b15, char __b14, char __b13, char __b12, char __b11,\n      | ^            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 3564 |              char __b10, char __b9, char __b8, char __b7, char __b6, char __b5,\n      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 3565 |              char __b4, char __b3, char __b2, char __b1, char __b0) {\n      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpot4la9fq.cpp:55:98: error: use of undeclared identifier '_SIDD_FULL_MASK'\n   55 |         __m128i cmp = _mm_cmpestrm(data, 16, vowels, 10, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_FULL_MASK | _SIDD_NEGATIVE_POLARITY);\n      |                                                                                                  ^\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcpz7vyxg.cpp:45:27: error: '__builtin_ia32_pcmpestrm128' needs target feature sse4.2\n   45 |         __m128i cmp_res = _mm_cmpestrm(vowels, 10, lower, 16, _SIDD_CMP_EQUAL_ANY | _SIDD_BIT_MASK | _SIDD_NEGATIVE_POLARITY);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1721:13: note: expanded from macro '_mm_cmpestrm'\n 1721 |   ((__m128i)__builtin_ia32_pcmpestrm128((__v16qi)(__m128i)(A), (int)(LA),      \\\n      |             ^\n1 error generated.\n"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_92_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1a4vxnl1.cpp:48:130: error: expected ')'\n   48 |         __m128i cmp = _mm_cmpestrm(vowels, 10, chunk, 16, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_FULL_MASK | _SIDD_NEGATE zero);\n      |                                                                                                                                  ^\n[REDACTED]/tmp1a4vxnl1.cpp:48:23: note: to match this '('\n   48 |         __m128i cmp = _mm_cmpestrm(vowels, 10, chunk, 16, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_FULL_MASK | _SIDD_NEGATE zero);\n      |                       ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1723:46: note: expanded from macro '_mm_cmpestrm'\n 1723 |                                         (int)(M)))\n      |                                              ^\n[REDACTED]/tmp1a4vxnl1.cpp:48:99: error: use of undeclared identifier '_SIDD_FULL_MASK'\n   48 |         __m128i cmp = _mm_cmpestrm(vowels, 10, chunk, 16, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_FULL_MASK | _SIDD_NEGATE zero);\n      |                                                                                                   ^\n[REDACTED]/tmp1a4vxnl1.cpp:48:117: error: use of undeclared identifier '_SIDD_NEGATE'\n   48 |         __m128i cmp = _mm_cmpestrm(vowels, 10, chunk, 16, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_FULL_MASK | _SIDD_NEGATE zero);\n      |                                                                                                                     ^\n3 errors generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpuj0n5igi.cpp:43:28: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   43 |         __m128i le_upper = _mm_cmple_epi8(data, upper_bound);\n      |                            ^~~~~~~~~~~~~~\n      |                            _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy34mdpxf.cpp:49:77: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   49 |         __m128i is_upper = _mm_and_si128(_mm_cmpgt_epi8(data, lower_bound), _mm_cmple_epi8(data, upper_bound));\n      |                                                                             ^~~~~~~~~~~~~~\n      |                                                                             _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps8y8og81.cpp:42:77: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   42 |         __m128i is_upper = _mm_and_si128(_mm_cmpgt_epi8(data, lower_bound), _mm_cmple_epi8(data, upper_bound));\n      |                                                                             ^~~~~~~~~~~~~~\n      |                                                                             _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_93_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3rho5x0c.cpp:43:77: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   43 |         __m128i is_upper = _mm_and_si128(_mm_cmpgt_epi8(data, lower_bound), _mm_cmple_epi8(data, upper_bound));\n      |                                                                             ^~~~~~~~~~~~~~\n      |                                                                             _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpho50ysyc.cpp:60:19: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   60 |         int val = _mm_extract_epi32(min_val, i);\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmpho50ysyc.cpp:63:28: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   63 |             smallest_idx = _mm_extract_epi32(min_idx, i);\n      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp92gis7pp.cpp:64:13: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   64 |         if (_mm_extract_epi32(min_val, i) < scalar_min) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmp92gis7pp.cpp:65:26: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   65 |             scalar_min = _mm_extract_epi32(min_val, i);\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmp92gis7pp.cpp:66:26: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   66 |             scalar_idx = _mm_extract_epi32(min_idx, i);\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwxkw107a.cpp:50:35: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   50 |         __m128i current_min_val = _mm_min_epi32(_mm_and_si128(cmp_res, vec), min_val);\n      |                                   ^\n[REDACTED]/tmpwxkw107a.cpp:51:35: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i current_min_idx = _mm_blendv_epi8(min_idx, _mm_set_epi32(i+3, i+2, i+1, i), _mm_cmpeq_epi32(current_min_val, min_val));\n      |                                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphegeuis4.cpp:50:27: error: no matching function for call to '_mm_set_epi32'\n   50 |         __m128i indices = _mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                           ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmphegeuis4.cpp:59:19: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   59 |         int val = _mm_extract_epi32(min_val, i);\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmphegeuis4.cpp:60:19: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   60 |         int idx = _mm_extract_epi32(min_idx, i);\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_94_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp45w8p8bl.cpp:49:35: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   49 |         __m128i current_min_val = _mm_min_epi32(valid_vals, min_val);\n      |                                   ^\n[REDACTED]/tmp45w8p8bl.cpp:50:35: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'pluck_simd' that is compiled without support for 'sse4.1'\n   50 |         __m128i current_min_idx = _mm_blendv_epi8(min_idx, valid_indices, _mm_cmpeq_epi32(current_min_val, valid_vals));\n      |                                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvpm0lb0s.cpp:57:27: error: argument to '__builtin_ia32_pshufd' must be a constant integer\n   57 |             __m128i val = _mm_shuffle_epi32(vals, _MM_SHUFFLE(j,j,j,j));\n      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:13: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |             ^                                           ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp13xf0_gr.cpp:53:35: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'search_simd' that is compiled without support for 'sse4.1'\n   53 |         freqs = _mm_shuffle_epi32(_mm_blendv_epi8(old_freqs, inc, _mm_cmpeq_epi32(idxs, mask)), _MM_SHUFFLE(3, 2, 1, 0));\n      |                                   ^\n1 error generated.\n"}
{"task_id": "SimdBench_95_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu7cdx4l2.cpp:61:48: error: argument to '__builtin_ia32_pshufd' must be a constant integer\n   61 |             __m128i index = _mm_cvtepi32_epi64(_mm_shuffle_epi32(gather_indices, _MM_SHUFFLE(j, j, j, j)));\n      |                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:4240:13: note: expanded from macro '_mm_shuffle_epi32'\n 4240 |   ((__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm)))\n      |             ^                                           ~~~~~~~~~~\n[REDACTED]/tmpu7cdx4l2.cpp:62:17: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   62 |             if (_mm_extract_epi32(mask, j)) {\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwxsgpyiy.cpp:43:43: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   43 |         if (_mm_movemask_epi8(cmp) != mask.m128i_i32[0]) {\n      |                                       ~~~~^~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2sw_3jx1.cpp:60:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   60 |     __m128i sums = _mm_hadd_epi32(sum_vec, sum_vec);\n      |                    ^\n[REDACTED]/tmp2sw_3jx1.cpp:61:12: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   61 |     sums = _mm_hadd_epi32(sums, sums);\n      |            ^\n2 errors generated.\n"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_96_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_96_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpw96_pkqq.cpp:61:11: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   61 |     sum = _mm_hadd_epi32(sum, sum);\n      |           ^\n[REDACTED]/tmpw96_pkqq.cpp:62:11: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'will_it_fly_simd' that is compiled without support for 'ssse3'\n   62 |     sum = _mm_hadd_epi32(sum, sum);\n      |           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp11crs1cj.cpp:44:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   44 |         __m128i mask = _mm_movemask_epi8(cmp);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmp11crs1cj.cpp:47:39: error: cannot initialize a parameter of type 'unsigned int' with an rvalue of type '__m128i' (vector of 2 'long long' values)\n   47 |         changes += __builtin_popcount(~mask);\n      |                                       ^~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1kfs5wko.cpp:44:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   44 |         __m128i mask = _mm_movemask_epi8(cmp);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmp1kfs5wko.cpp:47:21: error: no matching function for call to '_mm_popcnt_u32'\n   47 |         int count = _mm_popcnt_u32(~mask);\n      |                     ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/popcntintrin.h:33:1: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'unsigned int' for 1st argument\n   33 | _mm_popcnt_u32(unsigned int __A)\n      | ^              ~~~~~~~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_97_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_98_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_98_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_98_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr9jnf7y7.cpp:48:12: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   48 |     while (_mm_cmpgt_epi64(current, vzero)) {\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpr9jnf7y7.cpp:51:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   51 |         if (_mm_cmpeq_epi64(current, vx)) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpr9jnf7y7.cpp:54:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   54 |         if (_mm_cmpgt_epi64(current, vx)) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpujp7hj_9.cpp:48:12: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   48 |     while (_mm_cmpgt_epi64(current, vzero)) {\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpujp7hj_9.cpp:51:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   51 |         if (_mm_cmpeq_epi64(current, vx)) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpujp7hj_9.cpp:54:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   54 |         if (_mm_cmpgt_epi64(current, vx)) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjwo64u94.cpp:47:60: error: too few arguments provided to function-like macro invocation\n   47 |     while (_mm_cmpgt_epi64(current, vx)._mm_extract_epi64(0) == 0 && !result) {\n      |                                                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1077:9: note: macro '_mm_extract_epi64' defined here\n 1077 | #define _mm_extract_epi64(X, N)                                                \\\n      |         ^\n[REDACTED]/tmpjwo64u94.cpp:47:40: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   47 |     while (_mm_cmpgt_epi64(current, vx)._mm_extract_epi64(0) == 0 && !result) {\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpjwo64u94.cpp:49:63: error: too few arguments provided to function-like macro invocation\n   49 |         result = _mm_cmpeq_epi64(next, vx)._mm_extract_epi64(0) != 0;\n      |                                                               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1077:9: note: macro '_mm_extract_epi64' defined here\n 1077 | #define _mm_extract_epi64(X, N)                                                \\\n      |         ^\n[REDACTED]/tmpjwo64u94.cpp:49:43: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   49 |         result = _mm_cmpeq_epi64(next, vx)._mm_extract_epi64(0) != 0;\n      |                  ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n4 errors generated.\n"}
{"task_id": "SimdBench_99_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpywoijoyv.cpp:47:12: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   47 |     while (_mm_cmpgt_epi64(current, vzero)) {\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpywoijoyv.cpp:50:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   50 |         if (_mm_cmpeq_epi64(current, vx)) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpywoijoyv.cpp:53:13: error: value of type '__m128i' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   53 |         if (_mm_cmpgt_epi64(current, vx)) {\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "runtime failed: "}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp269n0aee.cpp:47:23: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'hex_key_simd' that is compiled without support for 'popcnt'\n   47 |         count += 16 - _mm_popcnt_u32(_mm_movemask_epi8(_mm_cmpeq_epi8(masked, zeros)));\n      |                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpb5ptkk_o.cpp:50:29: error: always_inline function '_mm_sign_epi8' requires target feature 'ssse3', but would be inlined into function 'hex_key_simd' that is compiled without support for 'ssse3'\n   50 |         __m128i sign_bits = _mm_sign_epi8(cmp_mask, compared);\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_100_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpzc9f2wy6.cpp:41:28: error: '__builtin_ia32_palignr128' needs target feature ssse3\n   41 |         __m128i shifted1 = _mm_alignr_epi8(chunk, chunk, 1);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/tmmintrin.h:157:13: note: expanded from macro '_mm_alignr_epi8'\n  157 |   ((__m128i)__builtin_ia32_palignr128((__v16qi)(__m128i)(a), \\\n      |             ^\n[REDACTED]/tmpzc9f2wy6.cpp:42:28: error: '__builtin_ia32_palignr128' needs target feature ssse3\n   42 |         __m128i shifted2 = _mm_alignr_epi8(chunk, chunk, 2);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/tmmintrin.h:157:13: note: expanded from macro '_mm_alignr_epi8'\n  157 |   ((__m128i)__builtin_ia32_palignr128((__v16qi)(__m128i)(a), \\\n      |             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpguo5w1vj.cpp:41:28: error: '__builtin_ia32_palignr128' needs target feature ssse3\n   41 |         __m128i shifted1 = _mm_alignr_epi8(chunk, chunk, 1);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/tmmintrin.h:157:13: note: expanded from macro '_mm_alignr_epi8'\n  157 |   ((__m128i)__builtin_ia32_palignr128((__v16qi)(__m128i)(a), \\\n      |             ^\n[REDACTED]/tmpguo5w1vj.cpp:42:28: error: '__builtin_ia32_palignr128' needs target feature ssse3\n   42 |         __m128i shifted2 = _mm_alignr_epi8(chunk, chunk, 2);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/tmmintrin.h:157:13: note: expanded from macro '_mm_alignr_epi8'\n  157 |   ((__m128i)__builtin_ia32_palignr128((__v16qi)(__m128i)(a), \\\n      |             ^\n[REDACTED]/tmpguo5w1vj.cpp:50:14: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'is_happy_simd' that is compiled without support for 'sse4.1'\n   50 |         if (!_mm_test_all_zeros(cmp1, vzero)) {\n      |              ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1185:34: note: expanded from macro '_mm_test_all_zeros'\n 1185 | #define _mm_test_all_zeros(M, V) _mm_testz_si128((M), (V))\n      |                                  ^\n3 errors generated.\n"}
{"task_id": "SimdBench_101_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1oxy4763.cpp:47:25: error: use of undeclared identifier '_mm_rem_epu32'\n   47 |         __m128i vrem1 = _mm_rem_epu32(_mm_mullo_epi32(vi, _mm_set1_epi32(n)), vi);\n      |                         ^\n[REDACTED]/tmp1oxy4763.cpp:48:25: error: use of undeclared identifier '_mm_rem_epu32'\n   48 |         __m128i vrem2 = _mm_rem_epu32(_mm_mullo_epi32(_mm_add_epi32(vi, vstep), _mm_set1_epi32(n)), _mm_add_epi32(vi, vstep));\n      |                         ^\n2 errors generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj4ybld1x.cpp:33:39: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   33 |     __m128i quot = _mm_cvtepi32_epi64(_mm_div_epi32(num, divisor));\n      |                                       ^~~~~~~~~~~~~\n      |                                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_wzzvex7.cpp:33:39: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   33 |     __m128i quot = _mm_cvtepi32_epi64(_mm_div_epi32(num, divisor));\n      |                                       ^~~~~~~~~~~~~\n      |                                       _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpamxhonwg.cpp:33:24: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   33 |     __m128i quotient = _mm_div_epi32(num, divisor);\n      |                        ^~~~~~~~~~~~~\n      |                        _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_102_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5zmxphx3.cpp:34:20: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   34 |     __m128i quot = _mm_div_epi32(num, div);\n      |                    ^~~~~~~~~~~~~\n      |                    _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpztmjhhs4.cpp:47:55: error: use of undeclared identifier '_mm_div_epu8'; did you mean '_mm_min_epu8'?\n   47 |         __m128i vRem = _mm_cvtepi8_epi16(_mm_sub_epi8(_mm_div_epu8(vN, vTen), _mm_mullo_epi8(_mm_div_epu8(vN, vTen), vTen)));\n      |                                                       ^~~~~~~~~~~~\n      |                                                       _mm_min_epu8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2316:46: note: '_mm_min_epu8' declared here\n 2316 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpztmjhhs4.cpp:47:94: error: use of undeclared identifier '_mm_div_epu8'; did you mean '_mm_min_epu8'?\n   47 |         __m128i vRem = _mm_cvtepi8_epi16(_mm_sub_epi8(_mm_div_epu8(vN, vTen), _mm_mullo_epi8(_mm_div_epu8(vN, vTen), vTen)));\n      |                                                                                              ^~~~~~~~~~~~\n      |                                                                                              _mm_min_epu8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2316:46: note: '_mm_min_epu8' declared here\n 2316 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpztmjhhs4.cpp:47:79: error: use of undeclared identifier '_mm_mullo_epi8'\n   47 |         __m128i vRem = _mm_cvtepi8_epi16(_mm_sub_epi8(_mm_div_epu8(vN, vTen), _mm_mullo_epi8(_mm_div_epu8(vN, vTen), vTen)));\n      |                                                                               ^\n[REDACTED]/tmpztmjhhs4.cpp:48:14: error: use of undeclared identifier '_mm_div_epu8'; did you mean '_mm_min_epu8'?\n   48 |         vN = _mm_div_epu8(vN, vTen);\n      |              ^~~~~~~~~~~~\n      |              _mm_min_epu8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2316:46: note: '_mm_min_epu8' declared here\n 2316 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu8(__m128i __a,\n      |                                              ^\n4 errors generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4fyun3vg.cpp:43:62: error: always_inline function '_mm_cvtepi64_epi32' requires target feature 'avx512vl', but would be inlined into function 'solve_simd' that is compiled without support for 'avx512vl'\n   43 |         __m128i remainder = _mm_cvtepi32_epi64(_mm_and_si128(_mm_cvtepi64_epi32(vN), _mm_set1_epi32(9)));\n      |                                                              ^\n[REDACTED]/tmp4fyun3vg.cpp:43:29: error: always_inline function '_mm_cvtepi32_epi64' requires target feature 'sse4.1', but would be inlined into function 'solve_simd' that is compiled without support for 'sse4.1'\n   43 |         __m128i remainder = _mm_cvtepi32_epi64(_mm_and_si128(_mm_cvtepi64_epi32(vN), _mm_set1_epi32(9)));\n      |                             ^\n2 errors generated.\n"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_103_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr8q_dgw0.cpp:47:26: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   47 |         __m128i sum_lo = _mm_shuffle_epi8(digits, lo);\n      |                          ^\n[REDACTED]/tmpr8q_dgw0.cpp:48:26: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'solve_simd' that is compiled without support for 'ssse3'\n   48 |         __m128i sum_hi = _mm_shuffle_epi8(digits, hi);\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkrpx69vz.cpp:53:26: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'add_simd' that is compiled without support for 'ssse3'\n   53 |     __m128i vsum_final = _mm_hadd_epi32(vsum_all, vsum_all);\n      |                          ^\n1 error generated.\n"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3p_8ueq1.cpp:61:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'add_simd' that is compiled without support for 'ssse3'\n   61 |     __m128i sum1 = _mm_hadd_epi32(total, total);\n      |                    ^\n[REDACTED]/tmp3p_8ueq1.cpp:62:20: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'add_simd' that is compiled without support for 'ssse3'\n   62 |     __m128i sum2 = _mm_hadd_epi32(sum1, sum1);\n      |                    ^\n2 errors generated.\n"}
{"task_id": "SimdBench_104_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps4wyzasp.cpp:52:25: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   52 |         shifted_lower = _mm_blendv_epi8(shifted_lower, wrap_lower, _mm_cmplt_epi8(shifted_lower, lower_a));\n      |                         ^\n[REDACTED]/tmps4wyzasp.cpp:58:25: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   58 |         shifted_upper = _mm_blendv_epi8(shifted_upper, wrap_upper, _mm_cmplt_epi8(shifted_upper, lower_A));\n      |                         ^\n[REDACTED]/tmps4wyzasp.cpp:61:29: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   61 |         __m128i encrypted = _mm_blendv_epi8(shifted_lower, shifted_upper, is_upper);\n      |                             ^\n[REDACTED]/tmps4wyzasp.cpp:62:21: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encrypt_simd' that is compiled without support for 'sse4.1'\n   62 |         encrypted = _mm_blendv_epi8(data, encrypted, _mm_or_si128(is_lower, is_upper));\n      |                     ^\n4 errors generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpia3joa04.cpp:49:72: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   49 |         __m128i isLower = _mm_and_si128(_mm_cmpgt_epi8(input, lowerA), _mm_cmple_epi8(input, lowerZ));\n      |                                                                        ^~~~~~~~~~~~~~\n      |                                                                        _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpia3joa04.cpp:50:72: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   50 |         __m128i isUpper = _mm_and_si128(_mm_cmpgt_epi8(input, upperA), _mm_cmple_epi8(input, upperZ));\n      |                                                                        ^~~~~~~~~~~~~~\n      |                                                                        _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9zxprlxw.cpp:62:16: error: argument to '__builtin_ia32_pslldqi128_byteshift' must be a constant integer\n   62 |         mask = _mm_slli_si128(mask, 16 - bytes_to_store);\n      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2686:13: note: expanded from macro '_mm_slli_si128'\n 2686 |   ((__m128i)__builtin_ia32_pslldqi128_byteshift((__v2di)(__m128i)(a),          \\\n      |             ^\n 2687 |                                                 (int)(imm)))\n      |                                                 ~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_105_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpol33ww91.cpp:49:73: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   49 |         __m128i is_lower = _mm_and_si128(_mm_cmpgt_epi8(data, lower_a), _mm_cmple_epi8(data, lower_z));\n      |                                                                         ^~~~~~~~~~~~~~\n      |                                                                         _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpol33ww91.cpp:50:73: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   50 |         __m128i is_upper = _mm_and_si128(_mm_cmpgt_epi8(data, upper_a), _mm_cmple_epi8(data, upper_z));\n      |                                                                         ^~~~~~~~~~~~~~\n      |                                                                         _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpklgjzpzl.cpp:52:89: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   52 |         __m128i lower_mask = _mm_and_si128(_mm_cmpgt_epi8(vec, _mm_set1_epi8('a' - 1)), _mm_cmple_epi8(vec, _mm_set1_epi8('z')));\n      |                                                                                         ^~~~~~~~~~~~~~\n      |                                                                                         _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmpklgjzpzl.cpp:53:89: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   53 |         __m128i upper_mask = _mm_and_si128(_mm_cmpgt_epi8(vec, _mm_set1_epi8('A' - 1)), _mm_cmple_epi8(vec, _mm_set1_epi8('Z')));\n      |                                                                                         ^~~~~~~~~~~~~~\n      |                                                                                         _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6eolj1rq.cpp:55:16: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encode_simd' that is compiled without support for 'sse4.1'\n   55 |         data = _mm_blendv_epi8(swap_case, data, is_upper);\n      |                ^\n[REDACTED]/tmp6eolj1rq.cpp:67:20: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encode_simd' that is compiled without support for 'sse4.1'\n   67 |             data = _mm_blendv_epi8(data, replace, vowel_mask);\n      |                    ^\n2 errors generated.\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpwa5hly39.cpp:39:9: warning: array designators are a C99 extension [-Wc99-designator]\n   39 |         ['a'] = 'c', ['A'] = 'C',\n      |         ^~~~~\n[REDACTED]/tmpwa5hly39.cpp:63:35: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'encode_simd' that is compiled without support for 'ssse3'\n   63 |         __m128i replaced_vowels = _mm_shuffle_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i*>(vowel_map)), swapped_case);\n      |                                   ^\n[REDACTED]/tmpwa5hly39.cpp:64:70: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'encode_simd' that is compiled without support for 'ssse3'\n   64 |         __m128i non_vowel_mask = _mm_cmpeq_epi8(_mm_setzero_si128(), _mm_shuffle_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i*>(vowel_map)), data));\n      |                                                                      ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp7jocuiky.cpp:40:9: warning: array designators are a C99 extension [-Wc99-designator]\n   40 |         ['a'] = 'c', ['A'] = 'C',\n      |         ^~~~~\n[REDACTED]/tmp7jocuiky.cpp:76:35: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'encode_simd' that is compiled without support for 'ssse3'\n   76 |         __m128i replaced_vowels = _mm_shuffle_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i*>(vowel_map)), chunk);\n      |                                   ^\n1 warning and 1 error generated.\n"}
{"task_id": "SimdBench_106_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4fexdhi_.cpp:39:9: warning: array designators are a C99 extension [-Wc99-designator]\n   39 |         ['a'] = 'c', ['e'] = 'g', ['i'] = 'k', ['o'] = 'q', ['u'] = 'w',\n      |         ^~~~~\n[REDACTED]/tmp4fexdhi_.cpp:58:35: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'encode_simd' that is compiled without support for 'ssse3'\n   58 |         __m128i replaced_vowels = _mm_shuffle_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i*>(vowel_map)), vec);\n      |                                   ^\n[REDACTED]/tmp4fexdhi_.cpp:60:24: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'encode_simd' that is compiled without support for 'sse4.1'\n   60 |         swapped_case = _mm_blendv_epi8(swapped_case, replaced_vowels, non_vowel_mask);\n      |                        ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_107_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpx0zul091.cpp:63:21: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   63 |             __m128i all_lower = _mm_movemask_epi8(cmp_lower);\n      |                     ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpx0zul091.cpp:64:21: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   64 |             __m128i all_upper = _mm_movemask_epi8(cmp_upper);\n      |                     ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpx0zul091.cpp:66:16: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   66 |             if(all_lower == 0xFFFF){\n      |                ^~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpx0zul091.cpp:76:21: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   76 |             else if(all_upper == 0xFFFF){\n      |                     ^~~~~~~~~~~~~~~~~~~\n4 errors generated.\n"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_107_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8ichltqe.cpp:67:80: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   67 |             __m128i is_lower = _mm_and_si128(_mm_cmpgt_epi8(data, lower_mask), _mm_cmple_epi8(data, upper_mask));\n      |                                                                                ^~~~~~~~~~~~~~\n      |                                                                                _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n[REDACTED]/tmp8ichltqe.cpp:68:80: error: use of undeclared identifier '_mm_cmple_epi8'; did you mean '_mm_cmplt_epi8'?\n   68 |             __m128i is_upper = _mm_and_si128(_mm_cmpgt_epi8(data, Upper_mask), _mm_cmple_epi8(data, Lower_mask));\n      |                                                                                ^~~~~~~~~~~~~~\n      |                                                                                _mm_cmplt_epi8\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3140:46: note: '_mm_cmplt_epi8' declared here\n 3140 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi8(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp5ia6fnsc.cpp:52:5: error: no matching function for call to '_mm_setzero_si128'\n   52 |     _mm_setzero_si128(sieve);\n      |     ^~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3787:46: note: candidate function not viable: requires 0 arguments, but 1 was provided\n 3787 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_setzero_si128(void) {\n      |                                              ^\n[REDACTED]/tmp5ia6fnsc.cpp:56:12: warning: logical not is only applied to the left hand side of this bitwise operator [-Wlogical-not-parentheses]\n   56 |         if(!((unsigned int*)sieve)[i/32] & (1 << (i % 32))){\n      |            ^                             ~\n[REDACTED]/tmp5ia6fnsc.cpp:56:12: note: add parentheses after the '!' to evaluate the bitwise operator first\n   56 |         if(!((unsigned int*)sieve)[i/32] & (1 << (i % 32))){\n      |            ^                                              \n      |             (                                             )\n[REDACTED]/tmp5ia6fnsc.cpp:56:12: note: add parentheses around left hand side expression to silence this warning\n   56 |         if(!((unsigned int*)sieve)[i/32] & (1 << (i % 32))){\n      |            ^\n      |            (                            )\n[REDACTED]/tmp5ia6fnsc.cpp:65:12: warning: logical not is only applied to the left hand side of this bitwise operator [-Wlogical-not-parentheses]\n   65 |         if(!((unsigned int*)sieve)[i/32] & (1 << (i % 32))){\n      |            ^                             ~\n[REDACTED]/tmp5ia6fnsc.cpp:65:12: note: add parentheses after the '!' to evaluate the bitwise operator first\n   65 |         if(!((unsigned int*)sieve)[i/32] & (1 << (i % 32))){\n      |            ^                                              \n      |             (                                             )\n[REDACTED]/tmp5ia6fnsc.cpp:65:12: note: add parentheses around left hand side expression to silence this warning\n   65 |         if(!((unsigned int*)sieve)[i/32] & (1 << (i % 32))){\n      |            ^\n      |            (                            )\n2 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0rolmi3y.cpp:53:5: error: no matching function for call to '_mm_setzero_si128'\n   53 |     _mm_setzero_si128(sieve);\n      |     ^~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3787:46: note: candidate function not viable: requires 0 arguments, but 1 was provided\n 3787 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_setzero_si128(void) {\n      |                                              ^\n[REDACTED]/tmp0rolmi3y.cpp:57:14: error: argument to '__builtin_ia32_vec_ext_v16qi' must be a constant integer\n   57 |         if (!_mm_extract_epi8(_mm_load_si128((__m128i*)&sieve[i / 8]), i % 8)) {\n      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n 1030 |                                                     (int)(N)))\n      |                                                     ~~~~~~~~\n[REDACTED]/tmp0rolmi3y.cpp:72:15: error: argument to '__builtin_ia32_vec_ext_v16qi' must be a constant integer\n   72 |         if (!(_mm_extract_epi8(_mm_load_si128((__m128i*)&sieve[byteIndex]), bitIndex))) {\n      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1029:24: note: expanded from macro '_mm_extract_epi8'\n 1029 |   ((int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X),     \\\n      |                        ^\n 1030 |                                                     (int)(N)))\n      |                                                     ~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp22_oo4jt.cpp:57:26: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   57 |         if(!((sieve[i/32].m128i_u8[i%32] >> (i % 8)) & 1)){\n      |               ~~~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp22_oo4jt.cpp:59:28: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   59 |                 sieve[j/32].m128i_u8[j%32] |= 1 << (j % 8);\n      |                 ~~~~~~~~~~~^~~~~~~~~\n[REDACTED]/tmp22_oo4jt.cpp:66:26: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   66 |         if(!((sieve[i/32].m128i_u8[i%32] >> (i % 8)) & 1)){\n      |               ~~~~~~~~~~~^~~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_108_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkkwfiwhb.cpp:51:16: error: use of undeclared identifier 'align'\n   51 |     __declspec(align(16)) char sieve[size];\n      |                ^\n[REDACTED]/tmpkkwfiwhb.cpp:51:26: error: expected ';' after expression\n   51 |     __declspec(align(16)) char sieve[size];\n      |                          ^\n      |                          ;\n[REDACTED]/tmpkkwfiwhb.cpp:51:38: warning: variable length arrays in C++ are a Clang extension [-Wvla-cxx-extension]\n   51 |     __declspec(align(16)) char sieve[size];\n      |                                      ^~~~\n[REDACTED]/tmpkkwfiwhb.cpp:51:38: note: initializer of 'size' is not a constant expression\n[REDACTED]/tmpkkwfiwhb.cpp:50:15: note: declared here\n   50 |     const int size = n;\n      |               ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9qgv0ai9.cpp:47:96: error: use of undeclared identifier '_SIDD_FULL_PRECISION'\n   47 |         __m128i res = _mm_cmpestrm(vowels, 2, mask, 2, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_FULL_PRECISION | _SIDD_NEGATIVE_POLARITY);\n      |                                                                                                ^\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpto_itoj0.cpp:43:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   43 |         __m128i bit_count = _mm_popcnt_u32(_mm_movemask_epi8(cmp_result));\n      |                 ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9l74tq1u.cpp:43:28: error: '__builtin_ia32_pcmpestrm128' needs target feature sse4.2\n   43 |         __m128i is_vowel = _mm_cmpestrm(vowels, 8, chunk, 16, _SIDD_CMP_EQUAL_ANY | _SIDD_BIT_MASK | _SIDD_NEGATIVE_POLARITY);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1721:13: note: expanded from macro '_mm_cmpestrm'\n 1721 |   ((__m128i)__builtin_ia32_pcmpestrm128((__v16qi)(__m128i)(A), (int)(LA),      \\\n      |             ^\n[REDACTED]/tmp9l74tq1u.cpp:47:26: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_upper_simd' that is compiled without support for 'popcnt'\n   47 |         int temp_count = _mm_popcnt_u32(_mm_movemask_epi8(even_indices));\n      |                          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_109_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpowjkf2ox.cpp:43:103: error: use of undeclared identifier '_SIDD_FULL_PRECSIMD'\n   43 |         __m128i cmp = _mm_cmpestrm(even_data, 16, vowels, 10, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_FULL_PRECSIMD);\n      |                                                                                                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplx83a6zq.cpp:44:39: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'make_a_pile_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i v_val = _mm_add_epi32(_mm_mullo_epi32(v_two, v_idx), v_n);\n      |                                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6f51m06_.cpp:49:40: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'make_a_pile_simd' that is compiled without support for 'sse4.1'\n   49 |         __m128i values = _mm_add_epi32(_mm_mullo_epi32(indices, v_two), v_n);\n      |                                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpy3ljsdwx.cpp:44:39: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'make_a_pile_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i v_val = _mm_add_epi32(_mm_mullo_epi32(v_two, v_idx), v_n);\n      |                                       ^\n1 error generated.\n"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "runtime failed: double free or corruption (out)\n"}
{"task_id": "SimdBench_110_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprk9s98el.cpp:48:21: error: always_inline function '_mm_sra_epi64' requires target feature 'avx512vl', but would be inlined into function 'rounded_avg_simd' that is compiled without support for 'avx512vl'\n   48 |     __m128i v_avg = _mm_sra_epi64(_mm_add_epi64(v_sum, _mm_srli_epi64(v_count, 1)), _mm_set1_epi64x(1));\n      |                     ^\n1 error generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmps0_p4frl.cpp:50:13: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   50 |     v_avg = _mm_div_epi64(v_avg, v_count); // This is a placeholder as there's no direct div instruction\n      |             ^~~~~~~~~~~~~\n      |             _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr6wa10fv.cpp:49:34: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   49 |     __m128i vavg = _mm_sra_epi64(_mm_div_epi64(vsum, vcount), _mm_set1_epi64x(1));\n      |                                  ^~~~~~~~~~~~~\n      |                                  _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n1 error generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpu33m8v04.cpp:45:35: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'rounded_avg_simd' that is compiled without support for 'sse4.1'\n   45 |     __m128i v_sum = _mm_add_epi64(_mm_mullo_epi32(v_n, _mm_set1_epi64x(2)), _mm_mullo_epi32(v_m, _mm_set1_epi64x(2)));\n      |                                   ^\n[REDACTED]/tmpu33m8v04.cpp:45:77: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'rounded_avg_simd' that is compiled without support for 'sse4.1'\n   45 |     __m128i v_sum = _mm_add_epi64(_mm_mullo_epi32(v_n, _mm_set1_epi64x(2)), _mm_mullo_epi32(v_m, _mm_set1_epi64x(2)));\n      |                                                                             ^\n[REDACTED]/tmpu33m8v04.cpp:47:21: error: always_inline function '_mm_sra_epi64' requires target feature 'avx512vl', but would be inlined into function 'rounded_avg_simd' that is compiled without support for 'avx512vl'\n   47 |     __m128i v_avg = _mm_sra_epi64(_mm_add_epi64(v_sum, _mm_slli_epi64(v_count, 1)), _mm_set1_epi64x(2));\n      |                     ^\n3 errors generated.\n"}
{"task_id": "SimdBench_111_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpc_oxdv4t.cpp:48:22: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'rounded_avg_simd' that is compiled without support for 'sse4.1'\n   48 |     __m128i vtotal = _mm_mullo_epi32(vsum, vone);\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpembjo440.cpp:79:29: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   79 |             factorial_vec = _mm_mullo_epi32(factorial_vec, j_vec);\n      |                             ^\n1 error generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpw78w5cs0.cpp:73:20: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   73 |             fact = _mm_mullo_epi32(fact, _mm_or_si128(mask, two));\n      |                    ^\n[REDACTED]/tmpw78w5cs0.cpp:77:16: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   77 |         fact = _mm_mullo_epi32(fact, _mm_set1_epi32(i%2 == 0 ? i : 1));\n      |                ^\n2 errors generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvofwxxmi.cpp:73:22: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   73 |             v_fact = _mm_mullo_epi32(v_fact, v_j);\n      |                      ^\n[REDACTED]/tmpvofwxxmi.cpp:78:17: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   78 |         v_res = _mm_mullo_epi32(v_res, _mm_set_epi32(1, 1, 1, 1));\n      |                 ^\n2 errors generated.\n"}
{"task_id": "SimdBench_112_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1ymi7pm9.cpp:72:24: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'func_simd' that is compiled without support for 'sse4.1'\n   72 |             vec_fact = _mm_mullo_epi32(vec_fact, vec_j);\n      |                        ^\n1 error generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpiyaqunpa.cpp:50:19: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'even_odd_palindrome_simd' that is compiled without support for 'ssse3'\n   50 |         rev_num = _mm_shuffle_epi8(num, _mm_set_epi8(0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 3, 2, 1, 0, 0xF, 0xF));\n      |                   ^\n[REDACTED]/tmpiyaqunpa.cpp:61:17: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'even_odd_palindrome_simd' that is compiled without support for 'popcnt'\n   61 |         even += _mm_popcnt_u32(_mm_movemask_epi8(_mm_cmpgt_epi32(even_check, zero)));\n      |                 ^\n[REDACTED]/tmpiyaqunpa.cpp:62:16: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'even_odd_palindrome_simd' that is compiled without support for 'popcnt'\n   62 |         odd += _mm_popcnt_u32(_mm_movemask_epi8(_mm_cmpgt_epi32(odd_check, zero)));\n      |                ^\n3 errors generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8i6kblpr.cpp:46:25: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'even_odd_palindrome_simd' that is compiled without support for 'ssse3'\n   46 |         __m128i rev_v = _mm_shuffle_epi8(v, _mm_set_epi8(15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0));\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkmzwc09v.cpp:46:25: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'even_odd_palindrome_simd' that is compiled without support for 'ssse3'\n   46 |         __m128i rev_v = _mm_shuffle_epi8(v, mask);\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpjg05d4wb.cpp:50:83: error: too few arguments provided to function-like macro invocation\n   50 |         __m128i even_mask = _mm_and_si128(is_palindrome, _mm_cmpestrm(v, two, 0x10));\n      |                                                                                   ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1720:9: note: macro '_mm_cmpestrm' defined here\n 1720 | #define _mm_cmpestrm(A, LA, B, LB, M)                                          \\\n      |         ^\n[REDACTED]/tmpjg05d4wb.cpp:50:58: error: use of undeclared identifier '_mm_cmpestrm'\n   50 |         __m128i even_mask = _mm_and_si128(is_palindrome, _mm_cmpestrm(v, two, 0x10));\n      |                                                          ^\n[REDACTED]/tmpjg05d4wb.cpp:52:48: error: use of undeclared identifier '_mm_countbits_epi128'\n   52 |         count_even = _mm_add_epi32(count_even, _mm_countbits_epi128(even_mask));\n      |                                                ^\n[REDACTED]/tmpjg05d4wb.cpp:53:46: error: use of undeclared identifier '_mm_countbits_epi128'\n   53 |         count_odd = _mm_add_epi32(count_odd, _mm_countbits_epi128(odd_mask));\n      |                                              ^\n4 errors generated.\n"}
{"task_id": "SimdBench_113_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpsmqwdnkt.cpp:45:25: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'even_odd_palindrome_simd' that is compiled without support for 'ssse3'\n   45 |         __m128i rev_v = _mm_shuffle_epi8(v, mask);\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpe1s66ibd.cpp:70:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   70 |         __m128i mask = _mm_movemask_epi8(cmp);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpe1s66ibd.cpp:71:18: error: no matching function for call to '_mm_popcnt_u32'\n   71 |         count += _mm_popcnt_u32(mask);\n      |                  ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/popcntintrin.h:33:1: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'unsigned int' for 1st argument\n   33 | _mm_popcnt_u32(unsigned int __A)\n      | ^              ~~~~~~~~~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8zu7ma5f.cpp:62:33: error: always_inline function '_mm_cvtepi32_epi64' requires target feature 'sse4.1', but would be inlined into function 'count_nums_simd' that is compiled without support for 'sse4.1'\n   62 |             __m128i remainder = _mm_cvtepi32_epi64(_mm_and_si128(_mm_sub_epi32(temp, _mm_setzero_si128()), _mm_cmplt_epi32(temp, tens)));\n      |                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgu3e35fa.cpp:93:75: error: invalid operands to binary expression ('typename __gnu_cxx::__promote_2<int, double>::__type' (aka 'double') and 'int')\n   93 |             sum -= 2 * (n[i] / std::pow(10, floor(log10(std::abs(n[i])))) % 10);\n      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~\n1 error generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp52ii1xs3.cpp:61:26: error: always_inline function '_mm_cvtepi32_epi8' requires target feature 'avx512vl', but would be inlined into function 'count_nums_simd' that is compiled without support for 'avx512vl'\n   61 |         __m128i digits = _mm_cvtepi32_epi8(abs_vec);\n      |                          ^\n[REDACTED]/tmp52ii1xs3.cpp:73:18: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'count_nums_simd' that is compiled without support for 'popcnt'\n   73 |         count += _mm_popcnt_u32(_mm_movemask_epi8(cmp));\n      |                  ^\n2 errors generated.\n"}
{"task_id": "SimdBench_114_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4xftbv0g.cpp:66:44: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   66 |         __m128i digit1 = _mm_cvtepi32_epi8(_mm_div_epu32(mod1, thousands));\n      |                                            ^~~~~~~~~~~~~\n      |                                            _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp4xftbv0g.cpp:69:44: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   69 |         __m128i digit2 = _mm_cvtepi32_epi8(_mm_div_epu32(mod2, hundreds));\n      |                                            ^~~~~~~~~~~~~\n      |                                            _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp4xftbv0g.cpp:72:44: error: use of undeclared identifier '_mm_div_epu32'; did you mean '_mm_min_epu32'?\n   72 |         __m128i digit3 = _mm_cvtepi32_epi8(_mm_div_epu32(mod3, tens));\n      |                                            ^~~~~~~~~~~~~\n      |                                            _mm_min_epu32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:774:46: note: '_mm_min_epu32' declared here\n  774 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epu32(__m128i __V1,\n      |                                              ^\n3 errors generated.\n"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_115_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_115_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_115_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_116_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpohrfni0d.cpp:65:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   65 |             count += _mm_popcnt_u32(_mm_movemask_epi8(cmp));\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpbfitrkqx.cpp:84:22: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   84 |             count += _mm_popcnt_u32(_mm_movemask_epi8(mask));\n      |                      ^\n1 error generated.\n"}
{"task_id": "SimdBench_117_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4fy0h2na.cpp:86:30: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'odd_count_simd' that is compiled without support for 'popcnt'\n   86 |             int temp_count = _mm_popcnt_u32(_mm_movemask_epi8(mask));\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpdtavah2w.cpp:42:12: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   42 |     vmin = _mm_min_epi64(current_min, vmin);\n      |            ^\n[REDACTED]/tmpdtavah2w.cpp:46:23: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   46 |         current_min = _mm_min_epi64(current, _mm_add_epi64(current_min, current));\n      |                       ^\n[REDACTED]/tmpdtavah2w.cpp:47:16: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   47 |         vmin = _mm_min_epi64(vmin, current_min);\n      |                ^\n3 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprqih4mg4.cpp:51:28: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   51 |         __m128i curr_min = _mm_min_epi64(_mm_add_epi64(vec, prev_min), vec);\n      |                            ^\n[REDACTED]/tmprqih4mg4.cpp:53:22: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   53 |         min_global = _mm_min_epi64(min_global, curr_min);\n      |                      ^\n[REDACTED]/tmprqih4mg4.cpp:58:19: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   58 |     __m128i res = _mm_min_epi64(min_global, min_curr);\n      |                   ^\n3 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkdmzzqju.cpp:57:36: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   57 |         __m128i new_curr_min_vec = _mm_min_epi64(vec, curr_min_vec);\n      |                                    ^\n1 error generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmppbqv0967.cpp:46:23: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   46 |         current_min = _mm_min_epi64(temp_sum, val);\n      |                       ^\n[REDACTED]/tmppbqv0967.cpp:47:22: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   47 |         global_min = _mm_min_epi64(global_min, current_min);\n      |                      ^\n2 errors generated.\n"}
{"task_id": "SimdBench_118_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpotaf75ql.cpp:62:27: error: always_inline function '_mm_min_epi64' requires target feature 'avx512vl', but would be inlined into function 'minSubArraySum_simd' that is compiled without support for 'avx512vl'\n   62 |         __m128i min_vec = _mm_min_epi64(vec, curr_min_vec);\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpumy0sn21.cpp:46:25: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'max_fill_simd' that is compiled without support for 'popcnt'\n   46 |             int count = _mm_popcnt_u32(_mm_movemask_epi8(mask));\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpr2_y5whw.cpp:45:25: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'max_fill_simd' that is compiled without support for 'popcnt'\n   45 |             int count = _mm_popcnt_u32(_mm_movemask_epi8(mask));\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_119_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpniq5_udf.cpp:45:42: error: no matching function for call to '_mm_set_epi32'\n   45 |         __m128i idx_mask = _mm_and_si128(_mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i+0), mask_even_idx);\n      |                                          ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp9e3i_4y5.cpp:47:46: error: use of undeclared identifier '_mm_rem_epu16'\n   47 |         __m128i even_mask = _mm_andnot_si128(_mm_rem_epu16(indices, two), ones);\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_120_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2biu3oqw.cpp:43:27: error: no matching function for call to '_mm_set_epi32'\n   43 |         __m128i indices = _mm_set_epi32(i+7, i+6, i+5, i+4, i+3, i+2, i+1, i);\n      |                           ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3474:46: note: candidate function not viable: requires 4 arguments, but 8 were provided\n 3474 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set_epi32(int __i3, int __i2,\n      |                                              ^             ~~~~~~~~~~~~~~~~~~~\n 3475 |                                                            int __i1, int __i0) {\n      |                                                            ~~~~~~~~~~~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpeuf5kql3.cpp:42:49: error: always_inline function '_mm_abs_epi32' requires target feature 'ssse3', but would be inlined into function 'add_elements_simd' that is compiled without support for 'ssse3'\n   42 |         __m128i vcond = _mm_cmpgt_epi32(vlimit, _mm_abs_epi32(vdata));\n      |                                                 ^\n1 error generated.\n"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpllwt7fxm.cpp:43:25: error: use of undeclared identifier '_mm_cmple_epi32'; did you mean '_mm_cmplt_epi32'?\n   43 |         __m128i v_cmp = _mm_cmple_epi32(v_data, v_threshold);\n      |                         ^~~~~~~~~~~~~~~\n      |                         _mm_cmplt_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3180:46: note: '_mm_cmplt_epi32' declared here\n 3180 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi32(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_121_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_122_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpynt_7nde.cpp:44:25: error: always_inline function '_mm_sign_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   44 |         __m128i signs = _mm_sign_epi32(data, _mm_set1_epi32(1));\n      |                         ^\n[REDACTED]/tmpynt_7nde.cpp:47:24: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   47 |         product_sign = _mm_mullo_epi32(product_sign, signs);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp8a2g3l05.cpp:53:25: error: always_inline function '_mm_sign_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   53 |         __m128i signs = _mm_sign_epi32(one, vec);\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpo8ggy4_3.cpp:56:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   56 |         __m128i mask = _mm_movemask_epi8(cmp_zero);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmpo8ggy4_3.cpp:57:12: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   57 |         if(mask != 0){\n      |            ^~~~~~~~~\n2 errors generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp4tunj23v.cpp:57:17: error: cannot initialize a variable of type '__m128i' (vector of 2 'long long' values) with an rvalue of type 'int'\n   57 |         __m128i mask = _mm_movemask_epi8(cmp);\n      |                 ^      ~~~~~~~~~~~~~~~~~~~~~~\n[REDACTED]/tmp4tunj23v.cpp:58:13: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   58 |         if (mask != 0xFFFFFFFF) {\n      |             ^~~~~~~~~~~~~~~~~~\n[REDACTED]/tmp4tunj23v.cpp:60:60: error: argument value 4 is outside the valid range [0, 3] [-Wargument-outside-range]\n   60 |             product_sign *= _mm_extract_epi32(signs, 1) * !_mm_extract_epi32(cmp, 4);\n      |                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmp4tunj23v.cpp:61:60: error: argument value 8 is outside the valid range [0, 3] [-Wargument-outside-range]\n   61 |             product_sign *= _mm_extract_epi32(signs, 2) * !_mm_extract_epi32(cmp, 8);\n      |                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n[REDACTED]/tmp4tunj23v.cpp:62:60: error: argument value 12 is outside the valid range [0, 3] [-Wargument-outside-range]\n   62 |             product_sign *= _mm_extract_epi32(signs, 3) * !_mm_extract_epi32(cmp, 12);\n      |                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n5 errors generated.\n"}
{"task_id": "SimdBench_123_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkwj3ht0_.cpp:48:25: error: always_inline function '_mm_sign_epi32' requires target feature 'ssse3', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'ssse3'\n   48 |         __m128i signs = _mm_sign_epi32(ones, vec);\n      |                         ^\n[REDACTED]/tmpkwj3ht0_.cpp:50:24: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'prod_signs_simd' that is compiled without support for 'sse4.1'\n   50 |         product_sign = _mm_mullo_epi32(product_sign, signs);\n      |                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmptsnp9wze.cpp:101:10: error: no member named 'function' in namespace 'std'\n  101 |     std::function<void(int, int, std::vector<int>&)> dfs = [&](int x, int y, std::vector<int>& path) {\n      |     ~~~~~^\n[REDACTED]/tmptsnp9wze.cpp:101:27: error: expected '(' for function-style cast or type construction\n  101 |     std::function<void(int, int, std::vector<int>&)> dfs = [&](int x, int y, std::vector<int>& path) {\n      |                        ~~~^\n[REDACTED]/tmptsnp9wze.cpp:101:32: error: expected '(' for function-style cast or type construction\n  101 |     std::function<void(int, int, std::vector<int>&)> dfs = [&](int x, int y, std::vector<int>& path) {\n      |                             ~~~^\n[REDACTED]/tmptsnp9wze.cpp:101:50: error: expected '(' for function-style cast or type construction\n  101 |     std::function<void(int, int, std::vector<int>&)> dfs = [&](int x, int y, std::vector<int>& path) {\n      |                                  ~~~~~~~~~~~~~~~~^\n[REDACTED]/tmptsnp9wze.cpp:101:51: error: expected expression\n  101 |     std::function<void(int, int, std::vector<int>&)> dfs = [&](int x, int y, std::vector<int>& path) {\n      |                                                   ^\n[REDACTED]/tmptsnp9wze.cpp:101:54: error: use of undeclared identifier 'dfs'\n  101 |     std::function<void(int, int, std::vector<int>&)> dfs = [&](int x, int y, std::vector<int>& path) {\n      |                                                      ^\n[REDACTED]/tmptsnp9wze.cpp:112:17: error: use of undeclared identifier 'dfs'\n  112 |                 dfs(nx, ny, path);\n      |                 ^\n[REDACTED]/tmptsnp9wze.cpp:118:5: error: use of undeclared identifier 'dfs'\n  118 |     dfs(start_x, start_y, current_path);\n      |     ^\n8 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2d22fkyo.cpp:85:28: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   85 |             __m128i mins = _mm_min_epi32(values, _mm_shuffle_epi32(values, _MM_SHUFFLE(1, 0, 3, 2)));\n      |                            ^\n[REDACTED]/tmp2d22fkyo.cpp:86:20: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   86 |             mins = _mm_min_epi32(mins, _mm_shuffle_epi32(mins, _MM_SHUFFLE(2, 3, 0, 1)));\n      |                    ^\n2 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3j8azhgo.cpp:104:10: error: no member named 'function' in namespace 'std'\n  104 |     std::function<void(int, int, int)> dfs = [&](int x, int y, int steps) {\n      |     ~~~~~^\n[REDACTED]/tmp3j8azhgo.cpp:104:27: error: expected '(' for function-style cast or type construction\n  104 |     std::function<void(int, int, int)> dfs = [&](int x, int y, int steps) {\n      |                        ~~~^\n[REDACTED]/tmp3j8azhgo.cpp:104:32: error: expected '(' for function-style cast or type construction\n  104 |     std::function<void(int, int, int)> dfs = [&](int x, int y, int steps) {\n      |                             ~~~^\n[REDACTED]/tmp3j8azhgo.cpp:104:37: error: expected '(' for function-style cast or type construction\n  104 |     std::function<void(int, int, int)> dfs = [&](int x, int y, int steps) {\n      |                                  ~~~^\n[REDACTED]/tmp3j8azhgo.cpp:104:40: error: use of undeclared identifier 'dfs'\n  104 |     std::function<void(int, int, int)> dfs = [&](int x, int y, int steps) {\n      |                                        ^\n[REDACTED]/tmp3j8azhgo.cpp:119:17: error: use of undeclared identifier 'dfs'\n  119 |                 dfs(nx, ny, steps + 1);\n      |                 ^\n[REDACTED]/tmp3j8azhgo.cpp:126:5: error: use of undeclared identifier 'dfs'\n  126 |     dfs(start_x, start_y, 0);\n      |     ^\n7 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpumvo9qb0.cpp:80:28: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   80 |             __m128i mins = _mm_min_epi32(vals, _mm_shuffle_epi32(vals, 1));\n      |                            ^\n[REDACTED]/tmpumvo9qb0.cpp:81:20: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'minPath_simd' that is compiled without support for 'sse4.1'\n   81 |             mins = _mm_min_epi32(mins, _mm_shuffle_epi32(mins, 2));\n      |                    ^\n2 errors generated.\n"}
{"task_id": "SimdBench_124_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp0kyt7qan.cpp:47:40: warning: implicit conversion from 'const int' to 'char' changes value from -1431655766 to -86 [-Wconstant-conversion]\n   47 |     __m128i v_odd_mask = _mm_set1_epi8(odd_mask);\n      |                          ~~~~~~~~~~~~~ ^~~~~~~~\n[REDACTED]/tmp0kyt7qan.cpp:54:23: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'digits_simd' that is compiled without support for 'ssse3'\n   54 |     __m128i prod_lo = _mm_shuffle_epi8(odd_digits, _mm_set_epi8(0,1,2,3,4,5,6,7,-1,-1,-1,-1,-1,-1,-1,-1));\n      |                       ^\n[REDACTED]/tmp0kyt7qan.cpp:55:23: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'digits_simd' that is compiled without support for 'ssse3'\n   55 |     __m128i prod_hi = _mm_shuffle_epi8(odd_digits, _mm_set_epi8(-1,-1,-1,-1,-1,-1,-1,-1,8,9,10,11,12,13,14,15));\n      |                       ^\n1 warning and 2 errors generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpaq0zuod0.cpp:48:28: error: C-style cast from vector '__m128i' (vector of 2 'long long' values) to scalar 'int' of different size\n   48 |         __m128i v_is_odd = _mm_cmpestrm(v_digit, _mm_set_epi64x(0, 1), v_mask_even, _mm_set_epi64x(0, 9), _SIDD_CMP_EQUAL_ANY | _SIDD_BIT_MASK);\n      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1721:64: note: expanded from macro '_mm_cmpestrm'\n 1721 |   ((__m128i)__builtin_ia32_pcmpestrm128((__v16qi)(__m128i)(A), (int)(LA),      \\\n      |                                                                ^~~~~~~~~\n[REDACTED]/tmpaq0zuod0.cpp:48:28: error: C-style cast from vector '__m128i' (vector of 2 'long long' values) to scalar 'int' of different size\n   48 |         __m128i v_is_odd = _mm_cmpestrm(v_digit, _mm_set_epi64x(0, 1), v_mask_even, _mm_set_epi64x(0, 9), _SIDD_CMP_EQUAL_ANY | _SIDD_BIT_MASK);\n      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1722:64: note: expanded from macro '_mm_cmpestrm'\n 1722 |                                         (__v16qi)(__m128i)(B), (int)(LB),      \\\n      |                                                                ^~~~~~~~~\n[REDACTED]/tmpaq0zuod0.cpp:53:15: error: use of undeclared identifier '_mm_div_epi64'; did you mean '_mm_min_epi64'?\n   53 |         v_n = _mm_div_epi64(v_n, _mm_set_epi64x(0, 10));\n      |               ^~~~~~~~~~~~~\n      |               _mm_min_epi64\n/usr/lib/llvm-18/lib/clang/18/include/avx512vlintrin.h:3194:1: note: '_mm_min_epi64' declared here\n 3194 | _mm_min_epi64 (__m128i __A, __m128i __B) {\n      | ^\n3 errors generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpff0ny4v2.cpp:51:35: error: always_inline function '_mm_shuffle_epi8' requires target feature 'ssse3', but would be inlined into function 'digits_simd' that is compiled without support for 'ssse3'\n   51 |         __m128i current_product = _mm_shuffle_epi8(digit, select_odd);\n      |                                   ^\n[REDACTED]/tmpff0ny4v2.cpp:52:44: error: always_inline function '_mm_cvtepi8_epi16' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   52 |         product = _mm_mullo_epi16(product, _mm_cvtepi8_epi16(current_product));\n      |                                            ^\n2 errors generated.\n"}
{"task_id": "SimdBench_125_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp6asiqxgh.cpp:49:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   49 |         current_product = _mm_mullo_epi32(current_product, _mm_shuffle_epi32(digit, _MM_SHUFFLE(0, 0, 0, 0)));\n      |                           ^\n[REDACTED]/tmp6asiqxgh.cpp:60:10: error: always_inline function '_mm_testz_si128' requires target feature 'sse4.1', but would be inlined into function 'digits_simd' that is compiled without support for 'sse4.1'\n   60 |     if (!_mm_testz_si128(even_flag, even_flag)) return 0;\n      |          ^\n2 errors generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpt6mbyh0h.cpp:42:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   42 |         __m128 ceil_vec = _mm_ceil_ps(vec);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpt6mbyh0h.cpp:61:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   61 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:61:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   61 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:62:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   62 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:62:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   62 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpt6mbyh0h.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpt6mbyh0h.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkbv3tumq.cpp:43:26: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         __m128 v_floor = _mm_floor_ps(v_data);\n      |                          ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:140:25: note: expanded from macro '_mm_floor_ps'\n  140 | #define _mm_floor_ps(X) _mm_round_ps((X), _MM_FROUND_FLOOR)\n      |                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpkbv3tumq.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:75:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   75 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:75:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   75 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpkbv3tumq.cpp:76:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   76 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpkbv3tumq.cpp:76:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   76 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvq_exhir.cpp:41:28: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   41 |         __m128 v_ceiling = _mm_ceil_ps(v_data);\n      |                            ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpvq_exhir.cpp:57:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   57 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:57:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   57 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:58:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   58 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:58:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   58 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:59:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   59 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:59:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   59 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:60:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   60 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:60:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   60 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:61:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   61 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:61:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   61 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:62:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   62 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:62:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   62 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvq_exhir.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvq_exhir.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpfb4776pl.cpp:42:15: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   42 |         vec = _mm_floor_ps(vec);    // Floor the result to get ceiling effect\n      |               ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:140:25: note: expanded from macro '_mm_floor_ps'\n  140 | #define _mm_floor_ps(X) _mm_round_ps((X), _MM_FROUND_FLOOR)\n      |                         ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpfb4776pl.cpp:61:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   61 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:61:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   61 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:62:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   62 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:62:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   62 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:63:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   63 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:63:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   63 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:64:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   64 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:64:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   64 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:65:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   65 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:65:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   65 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:66:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   66 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:66:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   66 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:67:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   67 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:67:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   67 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:68:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   68 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:68:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   68 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:69:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   69 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:69:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   69 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:70:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   70 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:70:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   70 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpfb4776pl.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpfb4776pl.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 1 error generated.\n"}
{"task_id": "SimdBench_126_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpvmdy5lh0.cpp:43:27: error: '__builtin_ia32_roundps' needs target feature sse4.1\n   43 |         __m128 ceil_vec = _mm_ceil_ps(vec);\n      |                           ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:56:24: note: expanded from macro '_mm_ceil_ps'\n   56 | #define _mm_ceil_ps(X) _mm_round_ps((X), _MM_FROUND_CEIL)\n      |                        ^\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:240:12: note: expanded from macro '_mm_round_ps'\n  240 |   ((__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M)))\n      |            ^\n[REDACTED]/tmpvmdy5lh0.cpp:47:31: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   47 |         __m128i squared_vec = _mm_mullo_epi32(int_vec, int_vec);\n      |                               ^\n[REDACTED]/tmpvmdy5lh0.cpp:71:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   71 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:71:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   71 |     pass = pass && fabs(sum_squares_simd({1,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:72:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   72 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:72:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   72 |     pass = pass && fabs(sum_squares_simd({1.0,2,3}) - 14) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:73:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   73 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:73:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   73 |     pass = pass && fabs(sum_squares_simd({1,3,5,7}) - 84) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:74:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   74 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:74:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   74 |     pass = pass && fabs(sum_squares_simd({1.4,4.2,0}) - 29) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:75:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   75 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:75:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   75 |     pass = pass && fabs(sum_squares_simd({-2.4,1,1}) - 6) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:76:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   76 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:76:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   76 |     pass = pass && fabs(sum_squares_simd({100,1,15,2}) - 10230) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:77:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   77 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:77:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   77 |     pass = pass && fabs(sum_squares_simd({10000,10000}) - 200000000) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:78:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   78 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:78:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   78 |     pass = pass && fabs(sum_squares_simd({-1.4,4.6,6.3}) - 75) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:79:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   79 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:79:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   79 |     pass = pass && fabs(sum_squares_simd({-1.4,17.9,18.9,19.9}) - 1086) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:80:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   80 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:80:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   80 |     pass = pass && fabs(sum_squares_simd({0}) - 0) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:81:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   81 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:81:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   81 |     pass = pass && fabs(sum_squares_simd({-1}) - 1) < 1e-6;\n      |                    ^~~~\n[REDACTED]/tmpvmdy5lh0.cpp:82:20: warning: taking the absolute value of unsigned type 'uint64_t' (aka 'unsigned long') has no effect [-Wabsolute-value]\n   82 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^\n[REDACTED]/tmpvmdy5lh0.cpp:82:20: note: remove the call to 'fabs' since unsigned values cannot be negative\n   82 |     pass = pass && fabs(sum_squares_simd({-1,1,0}) - 2) < 1e-6;\n      |                    ^~~~\n12 warnings and 2 errors generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp37ir1sc1.cpp:48:29: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'can_arrange_simd' that is compiled without support for 'sse4.1'\n   48 |         __m128i max_index = _mm_max_epu32(mask, vresult);\n      |                             ^\n[REDACTED]/tmp37ir1sc1.cpp:51:27: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'can_arrange_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i new_max = _mm_max_epi32(current, vmax);\n      |                           ^\n2 errors generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgo79z34i.cpp:53:31: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'int' in initializer list [-Wc++11-narrowing]\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                               ^\n[REDACTED]/tmpgo79z34i.cpp:53:31: note: insert an explicit cast to silence this issue\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                               ^\n      |                               static_cast<int>( )\n[REDACTED]/tmpgo79z34i.cpp:53:34: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'int' in initializer list [-Wc++11-narrowing]\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                                  ^~~\n[REDACTED]/tmpgo79z34i.cpp:53:34: note: insert an explicit cast to silence this issue\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                                  ^~~\n      |                                  static_cast<int>( )\n[REDACTED]/tmpgo79z34i.cpp:53:39: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'int' in initializer list [-Wc++11-narrowing]\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                                       ^~~\n[REDACTED]/tmpgo79z34i.cpp:53:39: note: insert an explicit cast to silence this issue\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                                       ^~~\n      |                                       static_cast<int>( )\n[REDACTED]/tmpgo79z34i.cpp:53:44: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'int' in initializer list [-Wc++11-narrowing]\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                                            ^~~\n[REDACTED]/tmpgo79z34i.cpp:53:44: note: insert an explicit cast to silence this issue\n   53 |             int indices[4] = {i, i+1, i+2, i+3};\n      |                                            ^~~\n      |                                            static_cast<int>( )\n4 errors generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphpwd1ghy.cpp:48:31: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'can_arrange_simd' that is compiled without support for 'sse4.1'\n   48 |         __m128i max_idx_cmp = _mm_max_epu32(idx_cmp, max_index);\n      |                               ^\n1 error generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmposw_lpo3.cpp:52:41: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'can_arrange_simd' that is compiled without support for 'sse4.1'\n   52 |             int idx = _mm_cvtsi128_si32(_mm_max_epi32(masked_indices, _mm_set1_epi32(-1)));\n      |                                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_127_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpto178xlf.cpp:44:31: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'can_arrange_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i current_max = _mm_max_epu32(mask, max_index);\n      |                               ^\n[REDACTED]/tmpto178xlf.cpp:50:19: error: always_inline function '_mm_max_epu32' requires target feature 'sse4.1', but would be inlined into function 'can_arrange_simd' that is compiled without support for 'sse4.1'\n   50 |     __m128i res = _mm_max_epu32(max_index, _mm_set1_epi32(-1));\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpby99ugpb.cpp:51:35: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i current_max_neg = _mm_max_epi32(vec, max_neg);\n      |                                   ^\n[REDACTED]/tmpby99ugpb.cpp:52:35: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i current_min_pos = _mm_min_epi32(vec, min_pos);\n      |                                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp1ktcxj12.cpp:56:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   56 |         max_neg = _mm_max_epi32(max_neg, negs);\n      |                   ^\n[REDACTED]/tmp1ktcxj12.cpp:59:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   59 |         min_pos = _mm_min_epi32(min_pos, poss);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_y9kd3sa.cpp:50:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   50 |         max_neg = _mm_max_epi32(max_neg, neg_vals);\n      |                   ^\n[REDACTED]/tmp_y9kd3sa.cpp:51:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   51 |         min_pos = _mm_min_epi32(min_pos, pos_vals);\n      |                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpk9reweot.cpp:51:32: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i curr_max_neg = _mm_max_epi32(vec, max_neg);\n      |                                ^\n[REDACTED]/tmpk9reweot.cpp:52:32: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i curr_min_pos = _mm_min_epi32(vec, min_pos);\n      |                                ^\n[REDACTED]/tmpk9reweot.cpp:57:19: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   57 |         max_neg = _mm_max_epi32(max_neg, curr_max_neg);\n      |                   ^\n[REDACTED]/tmpk9reweot.cpp:58:19: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   58 |         min_pos = _mm_min_epi32(min_pos, curr_min_pos);\n      |                   ^\n4 errors generated.\n"}
{"task_id": "SimdBench_128_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmprqewwuxv.cpp:49:35: error: always_inline function '_mm_max_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   49 |         __m128i current_max_neg = _mm_max_epi32(vec, max_neg);\n      |                                   ^\n[REDACTED]/tmprqewwuxv.cpp:50:35: error: always_inline function '_mm_min_epi32' requires target feature 'sse4.1', but would be inlined into function 'largest_smallest_integers_simd' that is compiled without support for 'sse4.1'\n   50 |         __m128i current_min_pos = _mm_min_epi32(vec, min_pos);\n      |                                   ^\n2 errors generated.\n"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpkkrv4pio.cpp:48:17: error: use of undeclared identifier '_mm_mul_epi64'\n   48 |         vcurr = _mm_mul_epi64(vcurr, _mm_set_epi64x(i, i));\n      |                 ^\n[REDACTED]/tmpkkrv4pio.cpp:49:17: error: use of undeclared identifier '_mm_mul_epi64'\n   49 |         vprod = _mm_mul_epi64(vprod, vcurr);\n      |                 ^\n[REDACTED]/tmpkkrv4pio.cpp:50:19: error: use of undeclared identifier '_mm_mul_epi64'\n   50 |         vresult = _mm_mul_epi64(vresult, vprod);\n      |                   ^\n3 errors generated.\n"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_129_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpaat2auh6.cpp:48:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   48 |         __m128i squared = _mm_mullo_epi32(vec, vec);\n      |                           ^\n[REDACTED]/tmpaat2auh6.cpp:49:15: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   49 |         vec = _mm_blendv_epi8(vec, squared, mod3_mask);\n      |               ^\n[REDACTED]/tmpaat2auh6.cpp:54:41: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(vec, vec), vec);\n      |                                         ^\n[REDACTED]/tmpaat2auh6.cpp:54:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   54 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(vec, vec), vec);\n      |                         ^\n[REDACTED]/tmpaat2auh6.cpp:55:15: error: always_inline function '_mm_blendv_epi8' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   55 |         vec = _mm_blendv_epi8(vec, cubed, mod4_mask);\n      |               ^\n[REDACTED]/tmpaat2auh6.cpp:61:21: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   61 |     __m128i vsum1 = _mm_hadd_epi32(vsum, vsum);\n      |                     ^\n[REDACTED]/tmpaat2auh6.cpp:62:21: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   62 |     __m128i vsum2 = _mm_hadd_epi32(vsum1, vsum1);\n      |                     ^\n7 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_8x4oouv.cpp:45:54: error: use of undeclared identifier '_mm_rem_epu32'\n   45 |         __m128i mod3 = _mm_and_si128(_mm_cmpeq_epi32(_mm_rem_epu32(indices, v3), _mm_setzero_si128()), _mm_set1_epi32(1));\n      |                                                      ^\n[REDACTED]/tmp_8x4oouv.cpp:46:72: error: use of undeclared identifier '_mm_rem_epu32'\n   46 |         __m128i mod4_not_mod3 = _mm_andnot_si128(mod3, _mm_cmpeq_epi32(_mm_rem_epu32(indices, v4), _mm_setzero_si128()));\n      |                                                                        ^\n2 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpnien4ske.cpp:46:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   46 |         __m128i squared = _mm_mullo_epi32(vec, vec);\n      |                           ^\n[REDACTED]/tmpnien4ske.cpp:51:46: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i cubed = _mm_mullo_epi32(vec, _mm_mullo_epi32(vec, vec));\n      |                                              ^\n[REDACTED]/tmpnien4ske.cpp:51:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   51 |         __m128i cubed = _mm_mullo_epi32(vec, _mm_mullo_epi32(vec, vec));\n      |                         ^\n[REDACTED]/tmpnien4ske.cpp:58:23: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   58 |     __m128i vsum_h1 = _mm_hadd_epi32(vsum, vsum);\n      |                       ^\n[REDACTED]/tmpnien4ske.cpp:59:23: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   59 |     __m128i vsum_h2 = _mm_hadd_epi32(vsum_h1, vsum_h1);\n      |                       ^\n5 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpagkr25ve.cpp:46:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   46 |         __m128i squared = _mm_mullo_epi32(vec, vec);\n      |                           ^\n[REDACTED]/tmpagkr25ve.cpp:52:41: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(vec, vec), vec);\n      |                                         ^\n[REDACTED]/tmpagkr25ve.cpp:52:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(vec, vec), vec);\n      |                         ^\n[REDACTED]/tmpagkr25ve.cpp:59:21: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   59 |     __m128i vsum1 = _mm_hadd_epi32(vsum, vsum);\n      |                     ^\n[REDACTED]/tmpagkr25ve.cpp:60:21: error: always_inline function '_mm_hadd_epi32' requires target feature 'ssse3', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'ssse3'\n   60 |     __m128i vsum2 = _mm_hadd_epi32(vsum1, vsum1);\n      |                     ^\n5 errors generated.\n"}
{"task_id": "SimdBench_130_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpn4cjzw_3.cpp:46:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   46 |         __m128i squared = _mm_mullo_epi32(vec, vec);\n      |                           ^\n[REDACTED]/tmpn4cjzw_3.cpp:52:41: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(vec, vec), vec);\n      |                                         ^\n[REDACTED]/tmpn4cjzw_3.cpp:52:25: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'sum_squares_simd' that is compiled without support for 'sse4.1'\n   52 |         __m128i cubed = _mm_mullo_epi32(_mm_mullo_epi32(vec, vec), vec);\n      |                         ^\n3 errors generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_131_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_131_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmplpm88e_t.cpp:63:25: error: use of undeclared identifier '_mm_subs_epu32'\n   63 |         v_first_digit = _mm_subs_epu32(_mm_srli_epi32(v_first_digit, 27), _mm_setzero_si128());\n      |                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_131_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpgq45llxx.cpp:50:18: error: argument to '__builtin_ia32_vec_ext_v4si' must be a constant integer\n   50 |             if (!_mm_extract_epi32(mask, j)) {\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:1055:9: note: expanded from macro '_mm_extract_epi32'\n 1055 |   ((int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N)))\n      |         ^                                                 ~~~~~~~~\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_cdfl43r.cpp:83:27: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   83 |         uint32_t m0 = (mod.m128i_u32[0]) % MOD_COUNT;\n      |                        ~~~^~~~~~~~~~\n[REDACTED]/tmp_cdfl43r.cpp:84:27: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   84 |         uint32_t m1 = (mod.m128i_u32[1]) % MOD_COUNT;\n      |                        ~~~^~~~~~~~~~\n[REDACTED]/tmp_cdfl43r.cpp:85:27: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   85 |         uint32_t m2 = (mod.m128i_u32[2]) % MOD_COUNT;\n      |                        ~~~^~~~~~~~~~\n[REDACTED]/tmp_cdfl43r.cpp:86:27: error: member reference base type '__m128i' (vector of 2 'long long' values) is not a structure or union\n   86 |         uint32_t m3 = (mod.m128i_u32[3]) % MOD_COUNT;\n      |                        ~~~^~~~~~~~~~\n4 errors generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp_mmws7sl.cpp:97:30: error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'get_max_triples_simd' that is compiled without support for 'popcnt'\n   97 |                     count += _mm_popcnt_u32(_mm_movemask_epi8(matches));\n      |                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpj0to_off.cpp:80:27: error: always_inline function '_mm_cvtepi32_epi64' requires target feature 'sse4.1', but would be inlined into function 'get_max_triples_simd' that is compiled without support for 'sse4.1'\n   80 |             __m128i mod = _mm_cvtepi32_epi64(_mm_and_si128(_mm_sub_epi32(vec, ones), three));\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp33lpi0qf.cpp:79:92: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   79 |         __m128i vrem = _mm_cvtsi128_si32(_mm_and_si128(_mm_sub_epi32(vval, _mm_mullo_epi32(_mm_div_epi32(vval, vthree), vthree), vone));\n      |                                                                                            ^~~~~~~~~~~~~\n      |                                                                                            _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp33lpi0qf.cpp:79:56: error: no matching function for call to '_mm_sub_epi32'\n   79 |         __m128i vrem = _mm_cvtsi128_si32(_mm_and_si128(_mm_sub_epi32(vval, _mm_mullo_epi32(_mm_div_epi32(vval, vthree), vthree), vone));\n      |                                                        ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2481:46: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 2481 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi32(__m128i __a,\n      |                                              ^             ~~~~~~~~~~~~\n 2482 |                                                            __m128i __b) {\n      |                                                            ~~~~~~~~~~~\n[REDACTED]/tmp33lpi0qf.cpp:79:42: error: no matching function for call to '_mm_and_si128'\n   79 |         __m128i vrem = _mm_cvtsi128_si32(_mm_and_si128(_mm_sub_epi32(vval, _mm_mullo_epi32(_mm_div_epi32(vval, vthree), vthree), vone));\n      |                                          ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2611:46: note: candidate function not viable: requires 2 arguments, but 1 was provided\n 2611 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_and_si128(__m128i __a,\n      |                                              ^             ~~~~~~~~~~~~\n 2612 |                                                            __m128i __b) {\n      |                                                            ~~~~~~~~~~~\n[REDACTED]/tmp33lpi0qf.cpp:79:136: error: expected ')'\n   79 |         __m128i vrem = _mm_cvtsi128_si32(_mm_and_si128(_mm_sub_epi32(vval, _mm_mullo_epi32(_mm_div_epi32(vval, vthree), vthree), vone));\n      |                                                                                                                                        ^\n[REDACTED]/tmp33lpi0qf.cpp:79:41: note: to match this '('\n   79 |         __m128i vrem = _mm_cvtsi128_si32(_mm_and_si128(_mm_sub_epi32(vval, _mm_mullo_epi32(_mm_div_epi32(vval, vthree), vthree), vone));\n      |                                         ^\n[REDACTED]/tmp33lpi0qf.cpp:80:15: error: array subscript is not an integer\n   80 |         counts[vrem]++;\n      |               ^~~~~\n5 errors generated.\n"}
{"task_id": "SimdBench_132_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp2swzf804.cpp:43:62: error: use of undeclared identifier '_mm_subs_epi32'; did you mean '_mm_sub_epi32'?\n   43 |         __m128i remainder = _mm_cvtepi32_epi64(_mm_and_si128(_mm_subs_epi32(_mm_mullo_epi32(v_n, v_i), _mm_mullo_epi32(v_i, v_i)), _mm_cmpeq_epi32(v_n, _mm_mullo_epi32(v_i, v_i))));\n      |                                                              ^~~~~~~~~~~~~~\n      |                                                              _mm_sub_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2481:46: note: '_mm_sub_epi32' declared here\n 2481 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi32(__m128i __a,\n      |                                              ^\n1 error generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmphsflmtyn.cpp:38:23: error: use of undeclared identifier '_sqrt'\n   38 |     int limit = (int)(_sqrt((double)n)) + 1;\n      |                       ^\n[REDACTED]/tmphsflmtyn.cpp:42:47: error: use of undeclared identifier '_mm_rem_epu32'\n   42 |         __m128i remainder = _mm_cvtsi128_si32(_mm_rem_epu32(v_n, v_i));\n      |                                               ^\n[REDACTED]/tmphsflmtyn.cpp:43:46: error: no matching function for call to '_mm_set1_epi32'\n   43 |         __m128i cmp_result = _mm_cmpeq_epi32(_mm_set1_epi32(remainder), v_zero);\n      |                                              ^~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3618:46: note: candidate function not viable: no known conversion from '__m128i' (vector of 2 'long long' values) to 'int' for 1st argument\n 3618 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_set1_epi32(int __i) {\n      |                                              ^              ~~~~~~~\n3 errors generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpd2965rau.cpp:42:101: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   42 |         __m128i remainder = _mm_cvtepi32_epi64(_mm_and_si128(_mm_subs_epi32(vn, _mm_mullo_epi32(vi, _mm_div_epi32(vn, vi))), _mm_cmpeq_epi32(vi, vi)));\n      |                                                                                                     ^~~~~~~~~~~~~\n      |                                                                                                     _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpd2965rau.cpp:42:62: error: use of undeclared identifier '_mm_subs_epi32'; did you mean '_mm_sub_epi32'?\n   42 |         __m128i remainder = _mm_cvtepi32_epi64(_mm_and_si128(_mm_subs_epi32(vn, _mm_mullo_epi32(vi, _mm_div_epi32(vn, vi))), _mm_cmpeq_epi32(vi, vi)));\n      |                                                              ^~~~~~~~~~~~~~\n      |                                                              _mm_sub_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2481:46: note: '_mm_sub_epi32' declared here\n 2481 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi32(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp30qv0cha.cpp:46:168: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   46 |         __m128i rem = _mm_cvtsi128_si32(_mm_subs_epu32(_mm_setzero_si128(), _mm_and_si128(_mm_cmplt_epi32(_mm_setzero_si128(), _mm_sub_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))), v_one)));\n      |                                                                                                                                                                        ^~~~~~~~~~~~~\n      |                                                                                                                                                                        _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmp30qv0cha.cpp:46:91: error: no matching function for call to '_mm_cmplt_epi32'\n   46 |         __m128i rem = _mm_cvtsi128_si32(_mm_subs_epu32(_mm_setzero_si128(), _mm_and_si128(_mm_cmplt_epi32(_mm_setzero_si128(), _mm_sub_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))), v_one)));\n      |                                                                                           ^~~~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:3180:46: note: candidate function not viable: requires 2 arguments, but 3 were provided\n 3180 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_cmplt_epi32(__m128i __a,\n      |                                              ^               ~~~~~~~~~~~~\n 3181 |                                                              __m128i __b) {\n      |                                                              ~~~~~~~~~~~\n[REDACTED]/tmp30qv0cha.cpp:46:77: error: no matching function for call to '_mm_and_si128'\n   46 |         __m128i rem = _mm_cvtsi128_si32(_mm_subs_epu32(_mm_setzero_si128(), _mm_and_si128(_mm_cmplt_epi32(_mm_setzero_si128(), _mm_sub_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))), v_one)));\n      |                                                                             ^~~~~~~~~~~~~\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2611:46: note: candidate function not viable: requires 2 arguments, but 1 was provided\n 2611 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_and_si128(__m128i __a,\n      |                                              ^             ~~~~~~~~~~~~\n 2612 |                                                            __m128i __b) {\n      |                                                            ~~~~~~~~~~~\n[REDACTED]/tmp30qv0cha.cpp:46:41: error: use of undeclared identifier '_mm_subs_epu32'\n   46 |         __m128i rem = _mm_cvtsi128_si32(_mm_subs_epu32(_mm_setzero_si128(), _mm_and_si128(_mm_cmplt_epi32(_mm_setzero_si128(), _mm_sub_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))), v_one)));\n      |                                         ^\n[REDACTED]/tmp30qv0cha.cpp:46:203: error: expected ')'\n   46 |         __m128i rem = _mm_cvtsi128_si32(_mm_subs_epu32(_mm_setzero_si128(), _mm_and_si128(_mm_cmplt_epi32(_mm_setzero_si128(), _mm_sub_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))), v_one)));\n      |                                                                                                                                                                                                           ^\n[REDACTED]/tmp30qv0cha.cpp:46:40: note: to match this '('\n   46 |         __m128i rem = _mm_cvtsi128_si32(_mm_subs_epu32(_mm_setzero_si128(), _mm_and_si128(_mm_cmplt_epi32(_mm_setzero_si128(), _mm_sub_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))), v_one)));\n      |                                        ^\n[REDACTED]/tmp30qv0cha.cpp:47:12: error: value of type '__attribute__((__vector_size__(2 * sizeof(long long)))) long long' (vector of 2 'long long' values) is not contextually convertible to 'bool'\n   47 |         if(rem == 0){\n      |            ^~~~~~~~\n6 errors generated.\n"}
{"task_id": "SimdBench_133_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcn3_4ooy.cpp:43:89: error: use of undeclared identifier '_mm_div_epi32'; did you mean '_mm_min_epi32'?\n   43 |         __m128i remainder = _mm_cvtepi32_epi64(_mm_subs_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))));\n      |                                                                                         ^~~~~~~~~~~~~\n      |                                                                                         _mm_min_epi32\n/usr/lib/llvm-18/lib/clang/18/include/smmintrin.h:738:46: note: '_mm_min_epi32' declared here\n  738 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_min_epi32(__m128i __V1,\n      |                                              ^\n[REDACTED]/tmpcn3_4ooy.cpp:43:48: error: use of undeclared identifier '_mm_subs_epi32'; did you mean '_mm_sub_epi32'?\n   43 |         __m128i remainder = _mm_cvtepi32_epi64(_mm_subs_epi32(v_n, _mm_mullo_epi32(v_i, _mm_div_epi32(v_n, v_i))));\n      |                                                ^~~~~~~~~~~~~~\n      |                                                _mm_sub_epi32\n/usr/lib/llvm-18/lib/clang/18/include/emmintrin.h:2481:46: note: '_mm_sub_epi32' declared here\n 2481 | static __inline__ __m128i __DEFAULT_FN_ATTRS _mm_sub_epi32(__m128i __a,\n      |                                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmp3m7i8tcy.cpp:53:42: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse3'\n   53 |         sum += _mm_cvtss_f32(_mm_hadd_ps(_mm_hadd_ps(doubled_diff, doubled_diff), zero)); // Horizontal add and accumulate\n      |                                          ^\n[REDACTED]/tmp3m7i8tcy.cpp:53:30: error: always_inline function '_mm_hadd_ps' requires target feature 'sse3', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse3'\n   53 |         sum += _mm_cvtss_f32(_mm_hadd_ps(_mm_hadd_ps(doubled_diff, doubled_diff), zero)); // Horizontal add and accumulate\n      |                              ^\n2 errors generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpi2vprexi.cpp:44:27: error: always_inline function '_mm_mullo_epi32' requires target feature 'sse4.1', but would be inlined into function 'double_the_difference_simd' that is compiled without support for 'sse4.1'\n   44 |         __m128i squared = _mm_mullo_epi32(vi, vi); // Square the values\n      |                           ^\n1 error generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "compilation failed: [REDACTED]/tmpcylwlgp6.cpp:49:57: error: use of undeclared identifier '_mm_trunc_ps'\n   49 |         __m128 is_odd_mask = _mm_andnot_ps(_mm_cmpeq_ps(_mm_trunc_ps(diff), zero), mask);\n      |                                                         ^\n1 error generated.\n"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_134_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "no intrinsic in code"}
{"task_id": "SimdBench_135_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_135_SSE", "passed": true, "result": "passed"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "logical bug"}
{"task_id": "SimdBench_135_SSE", "passed": false, "result": "logical bug"}

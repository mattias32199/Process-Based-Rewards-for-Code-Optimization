{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    float *temp = (float*)malloc(length * sizeof(float));\n    \n    for(size_t i = 0; i < length; i++) {\n        temp[i] = src[indices[i]];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[indices[i]] = src[i];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[i] = temp[i];\n    }\n    \n    free(temp);\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    float *temp = (float*)malloc(length * sizeof(float));\n    \n    for(size_t i = 0; i < length; i++) {\n        temp[i] = src[indices[i]];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[indices[i]] = src[i];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[i] = temp[i];\n    }\n    \n    free(temp);\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    float *temp = (float*)malloc(length * sizeof(float));\n    \n    for(size_t i = 0; i < length; i++) {\n        temp[i] = src[indices[i]];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[indices[i]] = src[i];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[i] = temp[i];\n    }\n    \n    free(temp);\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    float *temp = (float*)malloc(length * sizeof(float));\n    \n    for(size_t i = 0; i < length; i++) {\n        temp[i] = src[indices[i]];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[indices[i]] = src[i];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[i] = temp[i];\n    }\n    \n    free(temp);\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    float *temp = (float*)malloc(length * sizeof(float));\n    \n    for(size_t i = 0; i < length; i++) {\n        temp[i] = src[indices[i]];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[indices[i]] = src[i];\n    }\n    \n    for(size_t i = 0; i < length; i++) {\n        dst[i] = temp[i];\n    }\n    \n    free(temp);\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < slice_size; i++) {\n        slice[i] = tensor[offset + i];\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; i++) {\n        for (size_t j = 0; j < dim2; j++) {\n            size_t slice_pos = i * dim2 + j;\n            size_t tensor_pos = (i * dim2 * dim3) + (j * dim3) + slice_idx;\n            slice[slice_pos] = tensor[tensor_pos];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < slice_size; i++) {\n        slice[i] = tensor[offset + i];\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < slice_size; i++) {\n        slice[i] = tensor[offset + i];\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < slice_size; i++) {\n        slice[i] = tensor[offset + i];\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = i; bi < i + block_size && bi < rows; bi++) {\n                for (size_t bj = j; bj < j + block_size && bj < cols; bj++) {\n                    dst[bj * rows + bi] = src[bi * cols + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            size_t max_i = (i + block_size < rows) ? i + block_size : rows;\n            size_t max_j = (j + block_size < cols) ? j + block_size : cols;\n            \n            for (size_t bi = i; bi < max_i; bi++) {\n                for (size_t bj = j; bj < max_j; bj++) {\n                    dst[bj * rows + bi] = src[bi * cols + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            size_t max_i = (i + block_size < rows) ? i + block_size : rows;\n            size_t max_j = (j + block_size < cols) ? j + block_size : cols;\n            \n            for (size_t bi = i; bi < max_i; bi++) {\n                for (size_t bj = j; bj < max_j; bj++) {\n                    dst[bj * rows + bi] = src[bi * cols + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = i; bi < i + block_size && bi < rows; bi++) {\n                for (size_t bj = j; bj < j + block_size && bj < cols; bj++) {\n                    dst[bj * rows + bi] = src[bi * cols + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = i; bi < i + block_size && bi < rows; bi++) {\n                for (size_t bj = j; bj < j + block_size && bj < cols; bj++) {\n                    dst[bj * rows + bi] = src[bi * cols + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; i++) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; i++) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; i++) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; i++) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; i++) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total = rows * cols;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = src[i] > threshold ? src[i] * scale : src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total = rows * cols;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = src[i] > threshold ? src[i] * scale : src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total = rows * cols;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = src[i] > threshold ? src[i] * scale : src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total = rows * cols;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = src[i] > threshold ? src[i] * scale : src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total = rows * cols;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = src[i] > threshold ? src[i] * scale : src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t src_row = indices[i];\n        for (size_t j = 0; j < cols; j++) {\n            dst[i * cols + j] = src[src_row * cols + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            dst[i * cols + j] = src[indices[i] * cols + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t src_row = indices[i];\n        for (size_t j = 0; j < cols; j++) {\n            dst[i * cols + j] = src[src_row * cols + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t src_row = indices[i];\n        for (size_t j = 0; j < cols; j++) {\n            dst[i * cols + j] = src[src_row * cols + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t src_row = indices[i];\n        for (size_t j = 0; j < cols; j++) {\n            dst[i * cols + j] = src[src_row * cols + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    \n    int min = src[0];\n    for (size_t i = 0; i < length; i += 2) {\n        if (src[i] < min) {\n            min = src[i];\n        }\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    \n    int min = src[0];\n    for (size_t i = 0; i < length; i += 2) {\n        if (src[i] < min) {\n            min = src[i];\n        }\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    \n    int min = src[0];\n    for (size_t i = 0; i < length; i += 2) {\n        if (src[i] < min) {\n            min = src[i];\n        }\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    \n    int min = src[0];\n    for (size_t i = 0; i < length; i += 2) {\n        if (src[i] < min) {\n            min = src[i];\n        }\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    \n    int min = src[0];\n    for (size_t i = 0; i < length; i += 2) {\n        if (src[i] < min) {\n            min = src[i];\n        }\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic = src[i] >> shift;\n        int logical = (int)((unsigned int)src[i] >> shift);\n        dst[i] = arithmetic + logical;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic = src[i] >> shift;\n        int logical = (int)((unsigned int)src[i] >> shift);\n        dst[i] = arithmetic + logical;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic = src[i] >> shift;\n        int logical = (int)((unsigned int)src[i] >> shift);\n        dst[i] = arithmetic + logical;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic = src[i] >> shift;\n        int logical = (int)((unsigned int)src[i] >> shift);\n        dst[i] = arithmetic + logical;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic = src[i] >> shift;\n        int logical = (int)((unsigned int)src[i] >> shift);\n        dst[i] = arithmetic + logical;\n    }\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    size_t total = rows * cols;\n    for (size_t i = 0; i < total; i++) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    size_t total = rows * cols;\n    for(size_t i = 0; i < total; i++) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    size_t total = rows * cols;\n    for(size_t i = 0; i < total; i++) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    size_t total = rows * cols;\n    for (size_t i = 0; i < total; i++) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    size_t total = rows * cols;\n    for(size_t i = 0; i < total; i++) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n    \n    size_t max_idx = 0;\n    int8_t max_val = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            max_idx = i;\n        }\n    }\n    \n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n    \n    size_t max_idx = 0;\n    int8_t max_val = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            max_idx = i;\n        }\n    }\n    \n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n    \n    size_t max_idx = 0;\n    int8_t max_val = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            max_idx = i;\n        }\n    }\n    \n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n    \n    size_t max_idx = 0;\n    int8_t max_val = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            max_idx = i;\n        }\n    }\n    \n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n    \n    size_t max_idx = 0;\n    int8_t max_val = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            max_idx = i;\n        }\n    }\n    \n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        uint32_t n = src[i];\n        n = n - ((n >> 1) & 0x55555555);\n        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n        n = (n + (n >> 4)) & 0x0F0F0F0F;\n        n = n + (n >> 8);\n        n = n + (n >> 16);\n        dst[i] = n & 0x3F;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        uint32_t n = src[i];\n        n = n - ((n >> 1) & 0x55555555);\n        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n        n = (n + (n >> 4)) & 0x0F0F0F0F;\n        n = n + (n >> 8);\n        n = n + (n >> 16);\n        dst[i] = n & 0x3F;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t n = src[i];\n        n = n - ((n >> 1) & 0x55555555);\n        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n        n = (n + (n >> 4)) & 0x0F0F0F0F;\n        n = n + (n >> 8);\n        n = n + (n >> 16);\n        dst[i] = n & 0x3F;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        uint32_t n = src[i];\n        n = n - ((n >> 1) & 0x55555555);\n        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n        n = (n + (n >> 4)) & 0x0F0F0F0F;\n        n = n + (n >> 8);\n        n = n + (n >> 16);\n        dst[i] = n & 0x3F;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t n = src[i];\n        n = n - ((n >> 1) & 0x55555555);\n        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n        n = (n + (n >> 4)) & 0x0F0F0F0F;\n        n = n + (n >> 8);\n        n = n + (n >> 16);\n        dst[i] = n & 0x3F;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                double a = A[i * n + k];\n                double b = B[k * p + j];\n                if (a >= -100.0 && a <= 100.0 && b >= -100.0 && b <= 100.0) {\n                    sum += a * b;\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                double a = A[i * n + k];\n                double b = B[k * p + j];\n                if (a >= -100.0 && a <= 100.0 && b >= -100.0 && b <= 100.0) {\n                    sum += a * b;\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                double a = A[i * n + k];\n                double b = B[k * p + j];\n                if (a >= -100.0 && a <= 100.0 && b >= -100.0 && b <= 100.0) {\n                    sum += a * b;\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                double a = A[i * n + k];\n                double b = B[k * p + j];\n                if (a >= -100.0 && a <= 100.0 && b >= -100.0 && b <= 100.0) {\n                    sum += a * b;\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                double a = A[i * n + k];\n                double b = B[k * p + j];\n                if (a >= -100.0 && a <= 100.0 && b >= -100.0 && b <= 100.0) {\n                    sum += a * b;\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for(size_t i = 0; i < total_size; i++) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabsf(src1[i] - src2[i]) <= 50.0f) {\n            dst[i] = ceilf(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabsf(src1[i] - src2[i]) <= 50.0f) {\n            dst[i] = ceilf(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabsf(src1[i] - src2[i]) <= 50.0f) {\n            dst[i] = ceilf(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabsf(src1[i] - src2[i]) <= 50.0f) {\n            dst[i] = ceilf(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabsf(src1[i] - src2[i]) <= 50.0f) {\n            dst[i] = ceilf(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; i++) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t size = m * n;\n    for (size_t i = 0; i < size; i++) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t size = m * n;\n    for (size_t i = 0; i < size; i++) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; i++) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t size = m * n;\n    for (size_t i = 0; i < size; i++) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float norm = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            norm += mat[i*n + j] * mat[i*n + j];\n        }\n        norm = sqrtf(norm);\n        for (size_t j = 0; j < n; j++) {\n            mat[i*n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float norm = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            norm += mat[i*n + j] * mat[i*n + j];\n        }\n        norm = sqrtf(norm);\n        for (size_t j = 0; j < n; j++) {\n            mat[i*n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float norm = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            norm += mat[i*n + j] * mat[i*n + j];\n        }\n        norm = sqrtf(norm);\n        if (norm != 0.0f) {\n            for (size_t j = 0; j < n; j++) {\n                mat[i*n + j] /= norm;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float norm = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            norm += mat[i*n + j] * mat[i*n + j];\n        }\n        norm = sqrtf(norm);\n        for (size_t j = 0; j < n; j++) {\n            mat[i*n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float norm = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            norm += mat[i*n + j] * mat[i*n + j];\n        }\n        norm = sqrtf(norm);\n        for (size_t j = 0; j < n; j++) {\n            mat[i*n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            float val = src[i * cols + j];\n            val = roundf(val * 4) / 4;\n            dst[j * rows + i] = val;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            float val = src[i * cols + j];\n            val = roundf(val * 4) / 4;\n            dst[j * rows + i] = val;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            float val = src[i * cols + j];\n            val = roundf(val * 4) / 4;\n            dst[j * rows + i] = val;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            float val = src[i * cols + j];\n            val = roundf(val * 4) / 4;\n            dst[j * rows + i] = val;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            float val = src[i * cols + j];\n            val = roundf(val * 4) / 4;\n            dst[j * rows + i] = val;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    \n    for (size_t i = 0; i < total_size; i++) {\n        float diff = tensor1[i] - tensor2[i];\n        if (diff > 0) {\n            dst[i] = floorf(diff);\n        } else {\n            dst[i] = ceilf(diff);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        float diff = tensor1[i] - tensor2[i];\n        if (diff > 0) {\n            dst[i] = floorf(diff);\n        } else {\n            dst[i] = ceilf(diff);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        float diff = tensor1[i] - tensor2[i];\n        if (diff > 0) {\n            dst[i] = floorf(diff);\n        } else {\n            dst[i] = ceilf(diff);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```cpp\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        float diff = tensor1[i] - tensor2[i];\n        dst[i] = diff > 0 ? floor(diff) : ceil(diff);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        float diff = tensor1[i] - tensor2[i];\n        if (diff > 0) {\n            dst[i] = floorf(diff);\n        } else {\n            dst[i] = ceilf(diff);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total = m * n;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total = m * n;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total = m * n;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total = m * n;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total = m * n;\n    for (size_t i = 0; i < total; i++) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        dst[i] = 0;\n        for (size_t j = 0; j < n; j++) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        dst[i] = 0;\n        for (size_t j = 0; j < n; j++) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        dst[i] = 0;\n        for (size_t j = 0; j < n; j++) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        dst[i] = 0;\n        for (size_t j = 0; j < n; j++) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total = m * n;\n    \n    for (size_t i = 0; i < total; i++) {\n        sum += mat[i];\n    }\n    \n    return sum / total;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total = m * n;\n    \n    for(size_t i = 0; i < total; i++) {\n        sum += mat[i];\n    }\n    \n    return sum / total;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total = m * n;\n    \n    for(size_t i = 0; i < total; i++) {\n        sum += mat[i];\n    }\n    \n    return sum / total;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total = m * n;\n    \n    for (size_t i = 0; i < total; i++) {\n        sum += mat[i];\n    }\n    \n    return sum / total;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total = m * n;\n    \n    for (size_t i = 0; i < total; i++) {\n        sum += mat[i];\n    }\n    \n    return sum / total;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols - 1; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] > matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] < matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols - 1; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] > matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] < matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols - 1; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] > matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] < matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols - 1; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] > matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] < matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols - 1; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] > matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] < matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (src[i] < 0) {\n            dst[i] = ((src[i] - base + 1) / base) * base;\n        } else {\n            dst[i] = (src[i] / base) * base;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (src[i] < 0) {\n            dst[i] = ((src[i] - base + 1) / base) * base;\n        } else {\n            dst[i] = (src[i] / base) * base;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t matches = 0;\n        for (size_t j = 0; j < cols; j++) {\n            if (matrix[i * cols + j] == vector[j]) {\n                matches++;\n            } else {\n                break;\n            }\n        }\n        if (matches == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t matches = 0;\n        for (size_t j = 0; j < cols; j++) {\n            if (matrix[i * cols + j] == vector[j]) {\n                matches++;\n            } else {\n                break;\n            }\n        }\n        if (matches == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t matches = 0;\n        for (size_t j = 0; j < cols; j++) {\n            if (matrix[i * cols + j] == vector[j]) {\n                matches++;\n            }\n        }\n        if (matches == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        bool match = true;\n        for (size_t j = 0; j < cols; j++) {\n            if (matrix[i * cols + j] != vector[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t matches = 0;\n        for (size_t j = 0; j < cols; j++) {\n            if (matrix[i * cols + j] == vector[j]) {\n                matches++;\n            }\n        }\n        if (matches == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_size = dims[0] * dims[1] * dims[2] * dims[3];\n    \n    for(size_t i = 0; i < total_size; i++) {\n        if(A[i] == B[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_size = dims[0] * dims[1] * dims[2] * dims[3];\n    \n    for(size_t i = 0; i < total_size; i++) {\n        if(A[i] == B[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_size = dims[0] * dims[1] * dims[2] * dims[3];\n    \n    for(size_t i = 0; i < total_size; i++) {\n        if(A[i] == B[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_size = dims[0] * dims[1] * dims[2] * dims[3];\n    \n    for(size_t i = 0; i < total_size; i++) {\n        if(A[i] == B[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_size = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    \n    for(size_t i = 0; i < total_size; i++) {\n        if(A[i] == B[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t ax = a * x[i];\n        int64_t abs_y = y[i] >= 0 ? y[i] : -y[i];\n        y[i] = ax - abs_y;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t ax = a * x[i];\n        int64_t abs_y = y[i] >= 0 ? y[i] : -y[i];\n        y[i] = ax - abs_y;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t abs_y = y[i] >= 0 ? y[i] : -y[i];\n        y[i] = a * x[i] - abs_y;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```cpp\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t ax = a * x[i];\n        int64_t abs_y = y[i] >= 0 ? y[i] : -y[i];\n        y[i] = ax - abs_y;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t ax = a * x[i];\n        int64_t abs_y = y[i] >= 0 ? y[i] : -y[i];\n        y[i] = ax - abs_y;\n    }\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for(size_t i = 1; i < length; i++) {\n        if(vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if(vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for(size_t i = 1; i < length; i++) {\n        if(vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if(vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for(size_t i = 1; i < length; i++) {\n        if(vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if(vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for(size_t i = 1; i < length; i++) {\n        if(vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if(vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for(size_t i = 1; i < length; i++) {\n        if(vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if(vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0 || matrix == NULL) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0 || matrix == NULL) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0 || matrix == NULL) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0 || matrix == NULL) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0 || matrix == NULL) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; bi++) {\n                for (size_t bj = 0; bj < block_size; bj++) {\n                    if (matrix[(i + bi) * cols + (j + bj)] != \n                        matrix[bi * cols + bj]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; bi++) {\n                for (size_t bj = 0; bj < block_size; bj++) {\n                    if (matrix[(i + bi) * cols + (j + bj)] != \n                        matrix[bi * cols + bj]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; bi++) {\n                for (size_t bj = 0; bj < block_size; bj++) {\n                    if (matrix[(i + bi) * cols + (j + bj)] != \n                        matrix[bi * cols + bj]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; bi++) {\n                for (size_t bj = 0; bj < block_size; bj++) {\n                    if (matrix[(i + bi) * cols + (j + bj)] != \n                        matrix[bi * cols + bj]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; bi++) {\n                for (size_t bj = 0; bj < block_size; bj++) {\n                    if (matrix[(i + bi) * cols + (j + bj)] != \n                        matrix[bi * cols + bj]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || !length || !block_size || block_size > length) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    for (size_t block = 1; block < num_blocks; block++) {\n        for (size_t i = 0; i < block_size; i++) {\n            if (fabs(vec[i] - vec[block * block_size + i]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || tolerance < 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks <= 1) {\n        return false;\n    }\n\n    for (size_t block = 1; block < num_blocks; block++) {\n        for (size_t i = 0; i < block_size; i++) {\n            if (fabs(vec[i] - vec[block * block_size + i]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks <= 1) {\n        return false;\n    }\n\n    for (size_t block = 1; block < num_blocks; block++) {\n        for (size_t i = 0; i < block_size; i++) {\n            if (fabs(vec[i] - vec[block * block_size + i]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks <= 1) {\n        return false;\n    }\n\n    for (size_t block = 1; block < num_blocks; block++) {\n        for (size_t i = 0; i < block_size; i++) {\n            if (fabs(vec[i] - vec[block * block_size + i]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks <= 1) {\n        return false;\n    }\n\n    for (size_t block = 1; block < num_blocks; block++) {\n        for (size_t i = 0; i < block_size; i++) {\n            if (fabs(vec[i] - vec[block * block_size + i]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; j++) {\n            double val = matrix[i * cols + j];\n            sum += val * val;\n        }\n        result[i] = (sqrt(sum) > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; j++) {\n            double val = matrix[i * cols + j];\n            sum += val * val;\n        }\n        result[i] = (sqrt(sum) > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; j++) {\n            double val = matrix[i * cols + j];\n            sum += val * val;\n        }\n        result[i] = (sqrt(sum) > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; j++) {\n            double val = matrix[i * cols + j];\n            sum += val * val;\n        }\n        result[i] = (sqrt(sum) > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; j++) {\n            double val = matrix[i * cols + j];\n            sum += val * val;\n        }\n        result[i] = (sqrt(sum) > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```c\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n    \n    for(size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i] + (int64_t)B[i] * B[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n    \n    return sum_squares - 2 * sum_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```cpp\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sumSquares = 0;\n    int64_t sumProducts = 0;\n    \n    for(size_t i = 0; i < length; i++) {\n        sumSquares += (int64_t)A[i] * A[i] + (int64_t)B[i] * B[i];\n        sumProducts += (int64_t)A[i] * B[i];\n    }\n    \n    return sumSquares - 2 * sumProducts;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```c\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n    \n    for(size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i] + (int64_t)B[i] * B[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n    \n    return sum_squares - 2 * sum_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```cpp\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n    \n    for(size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i] + (int64_t)B[i] * B[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n    \n    return sum_squares - 2 * sum_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```cpp\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n    \n    for(size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i] + (int64_t)B[i] * B[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n    \n    return sum_squares - 2 * sum_products;\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        C[i] = A[i] & (~B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        C[i] = A[i] & (~B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        C[i] = A[i] & (~B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        C[i] = A[i] & (~B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        C[i] = A[i] & (~B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        }\n        else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        }\n        else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        }\n        else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        }\n        else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        }\n        else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        }\n        else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        }\n        else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        }\n        else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        }\n        else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        }\n        else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    \n    for(size_t i = 0; i < length; i++) {\n        if(i < mid) {\n            C[i] = A[i] ^ B[i];\n        }\n        else if(i == mid) {\n            C[i] = A[i];\n        }\n        else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    \n    for(size_t i = 0; i < length; i++) {\n        if(i < mid) {\n            C[i] = A[i] ^ B[i];\n        }\n        else if(i == mid) {\n            C[i] = A[i];\n        }\n        else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    \n    for(size_t i = 0; i < mid; i++) {\n        C[i] = A[i] ^ B[i];\n    }\n    \n    C[mid] = A[mid];\n    \n    for(size_t i = mid + 1; i < length; i++) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    \n    for(size_t i = 0; i < length; i++) {\n        if(i < mid) {\n            C[i] = A[i] ^ B[i];\n        }\n        else if(i == mid) {\n            C[i] = A[i];\n        }\n        else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    \n    for(size_t i = 0; i < length; i++) {\n        if(i < mid) {\n            C[i] = A[i] ^ B[i];\n        }\n        else if(i == mid) {\n            C[i] = A[i];\n        }\n        else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        if (cond1[i]) {\n            out[i] = cond2[i] ? A[i] : B[i];\n        } else {\n            out[i] = cond2[i] ? C[i] : D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        if (cond1[i]) {\n            out[i] = cond2[i] ? A[i] : B[i];\n        } else {\n            out[i] = cond2[i] ? C[i] : D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        if (cond1[i]) {\n            out[i] = cond2[i] ? A[i] : B[i];\n        } else {\n            out[i] = cond2[i] ? C[i] : D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        if (cond1[i]) {\n            out[i] = cond2[i] ? A[i] : B[i];\n        } else {\n            out[i] = cond2[i] ? C[i] : D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        if (cond1[i]) {\n            out[i] = cond2[i] ? A[i] : B[i];\n        } else {\n            out[i] = cond2[i] ? C[i] : D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    \n    for (size_t i = 0; i < total_size; i++) {\n        uint32_t num = A[i];\n        uint8_t count = 0;\n        \n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        \n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        uint32_t num = A[i];\n        uint8_t count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        uint32_t num = A[i];\n        uint8_t count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i++) {\n        uint32_t n = A[i];\n        uint8_t count = 0;\n        while (n) {\n            count += n & 1;\n            n >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    \n    for (size_t i = 0; i < total_size; i++) {\n        uint32_t num = A[i];\n        uint8_t count = 0;\n        \n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        \n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    for(size_t i = 0; i < size; i++) {\n        if(A[i] % 3 == 0) {\n            B[i] = A[i] < 0 ? -A[i] : A[i];\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] % 3 == 0) {\n            B[i] = A[i] < 0 ? -A[i] : A[i];\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] % 3 == 0) {\n            B[i] = A[i] < 0 ? -A[i] : A[i];\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    for(size_t i = 0; i < size; i++) {\n        if(A[i] % 3 == 0) {\n            B[i] = A[i] < 0 ? -A[i] : A[i];\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] % 3 == 0) {\n            B[i] = A[i] < 0 ? -A[i] : A[i];\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        if((src[i] & 0xF) == 0xF) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        if((src[i] & 0xF) == 0xF) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if ((src[i] & 0xF) == 0xF) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if ((src[i] & 0xF) == 0xF) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if ((src[i] & 0xF) == 0xF) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = epsilon < 0 ? -epsilon : epsilon;\n    for (size_t i = 0; i < length; i++) {\n        float diff = A[i] - B[i];\n        if (diff > abs_epsilon) {\n            out[i] = 1;\n        }\n        else if (diff < -abs_epsilon) {\n            out[i] = -1;\n        }\n        else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = epsilon < 0 ? -epsilon : epsilon;\n    for (size_t i = 0; i < length; i++) {\n        float diff = A[i] - B[i];\n        if (diff > abs_epsilon) {\n            out[i] = 1;\n        }\n        else if (diff < -abs_epsilon) {\n            out[i] = -1;\n        }\n        else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = epsilon < 0 ? -epsilon : epsilon;\n    for (size_t i = 0; i < length; i++) {\n        float diff = A[i] - B[i];\n        if (diff > abs_epsilon) {\n            out[i] = 1;\n        } else if (diff < -abs_epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = epsilon >= 0 ? epsilon : -epsilon;\n    for (size_t i = 0; i < length; i++) {\n        float diff = A[i] - B[i];\n        if (diff > abs_epsilon) {\n            out[i] = 1;\n        }\n        else if (diff < -abs_epsilon) {\n            out[i] = -1;\n        }\n        else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = epsilon < 0 ? -epsilon : epsilon;\n    for (size_t i = 0; i < length; i++) {\n        float diff = A[i] - B[i];\n        if (diff > abs_epsilon) {\n            out[i] = 1;\n        } else if (diff < -abs_epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        }\n        else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        }\n        else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        }\n        else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        }\n        else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        }\n        else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        }\n        else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        }\n        else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        }\n        else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        }\n        else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        }\n        else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)(1 << scale);\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (float)A[i] / scale_f;\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)(1 << scale);\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (float)A[i] / scale_f;\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)(1 << scale);\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (float)A[i] / scale_f;\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)scale;\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (float)A[i] * scale_f;\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)(1 << scale);\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (float)A[i] / scale_f;\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        float result = A[i] / B[i];\n        if (result > INT32_MAX) {\n            C[i] = INT32_MAX;\n        }\n        else if (result < INT32_MIN) {\n            C[i] = INT32_MIN;\n        }\n        else {\n            C[i] = (int32_t)roundf(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        float result = A[i] / B[i];\n        if (result > INT32_MAX) {\n            C[i] = INT32_MAX;\n        }\n        else if (result < INT32_MIN) {\n            C[i] = INT32_MIN;\n        }\n        else {\n            C[i] = (int32_t)roundf(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        float result = A[i] / B[i];\n        if (result > INT32_MAX) {\n            C[i] = INT32_MAX;\n        }\n        else if (result < INT32_MIN) {\n            C[i] = INT32_MIN;\n        }\n        else {\n            C[i] = (int32_t)roundf(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        float result = A[i] / B[i];\n        if (result > INT32_MAX) {\n            C[i] = INT32_MAX;\n        }\n        else if (result < INT32_MIN) {\n            C[i] = INT32_MIN;\n        }\n        else {\n            C[i] = (int32_t)roundf(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        float result = A[i] / B[i];\n        if (result > INT32_MAX) {\n            C[i] = INT32_MAX;\n        }\n        else if (result < INT32_MIN) {\n            C[i] = INT32_MIN;\n        }\n        else {\n            C[i] = (int32_t)roundf(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        }\n        else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        }\n        else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        }\n        else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        }\n        else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        }\n        else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        }\n        else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        }\n        else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        }\n        else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        }\n        else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        }\n        else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    for(size_t i = 0; i < size; i++) {\n        if(control[i] > 0) {\n            float val = (A[i] - min_val) / range;\n            if(val < 0.0f) {\n                B[i] = 0.0f;\n            }\n            else if(val > 1.0f) {\n                B[i] = 1.0f;\n            }\n            else {\n                B[i] = val;\n            }\n        }\n        else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    for (size_t i = 0; i < size; i++) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / range;\n            if (val < 0.0f) {\n                B[i] = 0.0f;\n            } else if (val > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = val;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    for (size_t i = 0; i < size; i++) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / range;\n            if (val < 0.0f) {\n                B[i] = 0.0f;\n            } else if (val > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = val;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    for (size_t i = 0; i < size; i++) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / range;\n            if (val < 0.0f) {\n                B[i] = 0.0f;\n            } else if (val > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = val;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    for(size_t i = 0; i < size; i++) {\n        if(control[i] > 0) {\n            float val = (A[i] - min_val) / range;\n            if(val < 0.0f) {\n                B[i] = 0.0f;\n            }\n            else if(val > 1.0f) {\n                B[i] = 1.0f;\n            }\n            else {\n                B[i] = val;\n            }\n        }\n        else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        float val = (float)((A[i] >> 16) & 0xFFFF);\n        B[i] = sqrtf(val);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        float val = (float)((A[i] >> 16) & 0xFFFF);\n        B[i] = sqrtf(val);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        float val = (float)((A[i] >> 16) & 0xFFFF);\n        B[i] = sqrtf(val);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        float val = (float)((A[i] >> 16) & 0xFFFF);\n        B[i] = sqrtf(val);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for(size_t i = 0; i < size; i++) {\n        float val = (float)((A[i] >> 16) & 0xFFFF);\n        B[i] = sqrtf(val);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    union {\n        uint32_t u;\n        float f;\n    } converter;\n    \n    for(size_t i = 0; i < size; i++) {\n        converter.u = A[i];\n        B[i] = converter.f;\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    union {\n        uint32_t u;\n        float f;\n    } converter;\n    \n    for(size_t i = 0; i < size; i++) {\n        converter.u = A[i];\n        B[i] = converter.f;\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    memcpy(B, A, size * sizeof(uint32_t));\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    memcpy(B, A, size * sizeof(uint32_t));\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    memcpy(B, A, size * sizeof(uint32_t));\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for(size_t i = 1; i < size; i++) {\n        diff[i] = cond[i] ? (float)(A[i] - A[i-1]) : 0.0f;\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for(size_t i = 1; i < size; i++) {\n        diff[i] = cond[i] ? (float)(A[i] - A[i-1]) : 0.0f;\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for(size_t i = 1; i < size; i++) {\n        diff[i] = cond[i] ? (float)(A[i] - A[i-1]) : 0.0f;\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; i++) {\n        diff[i] = cond[i] ? (float)(A[i] - A[i-1]) : 0.0f;\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for(size_t i = 1; i < size; i++) {\n        diff[i] = cond[i] ? (float)(A[i] - A[i-1]) : 0.0f;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i]) | 0xFFFFFFFF00000000ULL;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i]) | 0xFFFFFFFF00000000ULL;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)0xFFFFFFFF << 32) | src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i]) | 0xFFFFFFFF00000000ULL;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for(size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)0xFFFFFFFF << 32) | src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; i++) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; i++) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; i++) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; i++) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; i++) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\nvoid simple_conv2d(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    \n    for(size_t i = 0; i < output_size; i++) {\n        for(size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            \n            for(size_t k = 0; k < kernel_size; k++) {\n                for(size_t l = 0; l < kernel_size; l++) {\n                    sum += input[(i + k) * input_size + (j + l)] * \n                           kernel[k * kernel_size + l];\n                }\n            }\n            \n            // ReLU activation\n            output[i * output_size + j] = sum > 0 ? sum : 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\nvoid simple_conv2d(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    \n    for(size_t i = 0; i < output_size; i++) {\n        for(size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            \n            for(size_t k = 0; k < kernel_size; k++) {\n                for(size_t l = 0; l < kernel_size; l++) {\n                    sum += input[(i + k) * input_size + (j + l)] * \n                           kernel[k * kernel_size + l];\n                }\n            }\n            \n            // ReLU activation\n            output[i * output_size + j] = sum > 0 ? sum : 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\nvoid simple_conv2d(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    \n    for(size_t i = 0; i < output_size; i++) {\n        for(size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            \n            for(size_t k = 0; k < kernel_size; k++) {\n                for(size_t l = 0; l < kernel_size; l++) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n                    sum += input[input_idx] * kernel[kernel_idx];\n                }\n            }\n            \n            // ReLU activation\n            output[i * output_size + j] = sum > 0 ? sum : 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\nvoid simple_conv2d(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    \n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            \n            for (size_t k = 0; k < kernel_size; k++) {\n                for (size_t l = 0; l < kernel_size; l++) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n                    sum += input[input_idx] * kernel[kernel_idx];\n                }\n            }\n            \n            // ReLU activation\n            output[i * output_size + j] = sum > 0 ? sum : 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\nvoid simple_conv2d(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    \n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            \n            for (size_t k = 0; k < kernel_size; k++) {\n                for (size_t l = 0; l < kernel_size; l++) {\n                    sum += input[(i + k) * input_size + (j + l)] * \n                           kernel[k * kernel_size + l];\n                }\n            }\n            \n            // ReLU activation\n            output[i * output_size + j] = sum > 0.0 ? sum : 0.0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    for(size_t i = 0; i < numbers.size(); i++) {\n        for(size_t j = i + 1; j < numbers.size(); j++) {\n            if(std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    if (numbers.empty()) {\n        return 0.0;\n    }\n\n    double sum = 0.0;\n    for (double num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n\n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    if (numbers.empty()) {\n        return 0.0;\n    }\n    \n    double sum = 0.0;\n    for (double num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n    \n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    \n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    if (numbers.empty()) {\n        return 0.0;\n    }\n\n    double sum = 0.0;\n    for (double num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n\n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    if (numbers.empty()) {\n        return 0.0;\n    }\n\n    double sum = 0.0;\n    for (double num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n\n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    if (numbers.empty()) {\n        return 0.0;\n    }\n\n    double sum = 0.0;\n    for (double num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n\n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n    \n    std::vector<int> result;\n    result.reserve(numbers.size() * 2 - 1);\n    \n    for (size_t i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers.back());\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n    \n    std::vector<int> result;\n    result.reserve(2 * numbers.size() - 1);\n    \n    for (size_t i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers.back());\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n    \n    std::vector<int> result;\n    result.reserve(2 * numbers.size() - 1);\n    \n    for (size_t i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers.back());\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n    \n    std::vector<int> result;\n    result.reserve(2 * numbers.size() - 1);\n    \n    for (size_t i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers.back());\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n    \n    std::vector<int> result;\n    result.reserve(numbers.size() * 2 - 1);\n    \n    for (size_t i = 0; i < numbers.size() - 1; i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.push_back(numbers.back());\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    std::vector<int64_t> result(2);\n    result[0] = 0;\n    result[1] = 1;\n    \n    for(const auto& num : numbers) {\n        result[0] += num;\n        result[1] *= num;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n    \n    for(const auto& num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n    \n    for(const auto& num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    std::vector<int64_t> result(2);\n    result[0] = 0;\n    result[1] = 1;\n    \n    for(const auto& num : numbers) {\n        result[0] += num;\n        result[1] *= num;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    std::vector<int64_t> result(2);\n    result[0] = 0;\n    result[1] = 1;\n    \n    for(const auto& num : numbers) {\n        result[0] += num;\n        result[1] *= num;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    if (numbers.empty()) {\n        return result;\n    }\n    \n    int max = numbers[0];\n    result.push_back(max);\n    \n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    if (numbers.empty()) {\n        return result;\n    }\n    \n    int max = numbers[0];\n    result.push_back(max);\n    \n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    if (numbers.empty()) {\n        return result;\n    }\n    \n    int current_max = numbers[0];\n    result.push_back(current_max);\n    \n    for (size_t i = 1; i < numbers.size(); i++) {\n        current_max = std::max(current_max, numbers[i]);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    if (numbers.empty()) {\n        return result;\n    }\n    \n    int max = numbers[0];\n    result.push_back(max);\n    \n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    if (numbers.empty()) {\n        return result;\n    }\n    \n    int current_max = numbers[0];\n    result.push_back(current_max);\n    \n    for (size_t i = 1; i < numbers.size(); i++) {\n        current_max = std::max(current_max, numbers[i]);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for(int i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for(int i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b) {\n    std::string result = \"\";\n    for(int i = 0; i < a.length(); i++) {\n        if(a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for(int i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b) {\n    std::string result = \"\";\n    for(int i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\nstd::string longest(const std::vector<std::string>& strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n    \n    return *std::max_element(strings.begin(), strings.end(), \n        [](const std::string& a, const std::string& b) {\n            return a.length() < b.length();\n        });\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\nstd::string longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n    \n    return *std::max_element(strings.begin(), strings.end(), \n        [](const std::string& a, const std::string& b) {\n            return a.length() < b.length();\n        });\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\nstd::string longest(const std::vector<std::string> & strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    \n    return *std::max_element(strings.begin(), strings.end(), \n        [](const std::string& a, const std::string& b) {\n            return a.length() < b.length();\n        });\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\nstd::string longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n    \n    return *std::max_element(strings.begin(), strings.end(), \n        [](const std::string& a, const std::string& b) {\n            return a.length() < b.length();\n        });\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\nstd::string longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n    \n    return *std::max_element(strings.begin(), strings.end(), \n        [](const std::string& a, const std::string& b) {\n            return a.length() < b.length();\n        });\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\nstd::vector<float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float num1 = numbers[0];\n    float num2 = numbers[1];\n    \n    for(size_t i = 1; i < numbers.size() - 1; i++) {\n        float diff = numbers[i+1] - numbers[i];\n        if(diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i];\n            num2 = numbers[i+1];\n        }\n    }\n    \n    return {num1, num2};\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\nstd::vector<float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float num1 = numbers[0];\n    float num2 = numbers[1];\n    \n    for(size_t i = 1; i < numbers.size() - 1; i++) {\n        float diff = numbers[i+1] - numbers[i];\n        if(diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i];\n            num2 = numbers[i+1];\n        }\n    }\n    \n    return {num1, num2};\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\nstd::vector<float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float num1 = numbers[0];\n    float num2 = numbers[1];\n    \n    for(size_t i = 1; i < numbers.size() - 1; i++) {\n        float diff = numbers[i+1] - numbers[i];\n        if(diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i];\n            num2 = numbers[i+1];\n        }\n    }\n    \n    return {num1, num2};\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\nstd::vector<float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float num1 = numbers[0];\n    float num2 = numbers[1];\n    \n    for(size_t i = 1; i < numbers.size() - 1; i++) {\n        float diff = numbers[i+1] - numbers[i];\n        if(diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i];\n            num2 = numbers[i+1];\n        }\n    }\n    \n    return {num1, num2};\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\nstd::vector<float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float num1 = numbers[0];\n    float num2 = numbers[1];\n    \n    for(size_t i = 1; i < numbers.size()-1; i++) {\n        float diff = numbers[i+1] - numbers[i];\n        if(diff < min_diff) {\n            min_diff = diff;\n            num1 = numbers[i];\n            num2 = numbers[i+1];\n        }\n    }\n    \n    return {num1, num2};\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    \n    if (range == 0) {\n        std::fill(numbers.begin(), numbers.end(), 0);\n        return numbers;\n    }\n    \n    for (float& num : numbers) {\n        num = (num - min) / range;\n    }\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    \n    for(float& num : numbers) {\n        num = (num - min) / range;\n    }\n    \n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    \n    for(float& num : numbers) {\n        num = (num - min) / range;\n    }\n    \n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    \n    for(float& num : numbers) {\n        num = (num - min) / range;\n    }\n    \n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    \n    for(float& num : numbers) {\n        num = (num - min) / range;\n    }\n    \n    return numbers;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n/2; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n/2; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n/2; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n/2; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n/2; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    \n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    \n    if (n > 1) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    \n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    \n    if (n > 1) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    \n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    \n    if (n > 1) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    \n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    \n    if (n > 1) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    \n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    \n    if (n > 1) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l){\n    std::vector<float> result;\n    for(float num : l){\n        if(num > 0){\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l){\n    std::vector<float> result;\n    for(float num : l){\n        if(num > 0){\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\nstd::string solve(const std::string & s) {\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(size_t i = 0; i < result.length(); i++) {\n        if(isalpha(result[i])) {\n            hasLetter = true;\n            result[i] = isupper(result[i]) ? tolower(result[i]) : toupper(result[i]);\n        }\n    }\n    \n    if(!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\nstd::string solve(const std::string & s) {\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(size_t i = 0; i < result.length(); i++) {\n        if(isalpha(result[i])) {\n            hasLetter = true;\n            result[i] = islower(result[i]) ? toupper(result[i]) : tolower(result[i]);\n        }\n    }\n    \n    if(!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\nstd::string solve(const std::string & s) {\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(size_t i = 0; i < result.length(); i++) {\n        if(isalpha(result[i])) {\n            hasLetter = true;\n            result[i] = islower(result[i]) ? toupper(result[i]) : tolower(result[i]);\n        }\n    }\n    \n    if(!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\nstd::string solve(const std::string & s) {\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(size_t i = 0; i < result.length(); i++) {\n        if(isalpha(result[i])) {\n            hasLetter = true;\n            result[i] = islower(result[i]) ? toupper(result[i]) : tolower(result[i]);\n        }\n    }\n    \n    if(!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\nstd::string solve(const std::string & s) {\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(size_t i = 0; i < result.length(); i++) {\n        if(isalpha(result[i])) {\n            hasLetter = true;\n            result[i] = islower(result[i]) ? toupper(result[i]) : tolower(result[i]);\n        }\n    }\n    \n    if(!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> thirds;\n    std::vector<int> thirds_idx;\n    \n    for(int i = 0; i < l.size(); i++) {\n        if(i % 3 == 0) {\n            thirds.push_back(l[i]);\n            thirds_idx.push_back(i);\n        }\n    }\n    \n    std::sort(thirds.begin(), thirds.end());\n    \n    for(int i = 0; i < thirds.size(); i++) {\n        l[thirds_idx[i]] = thirds[i];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> thirds;\n    std::vector<int> thirds_idx;\n    \n    for(int i = 0; i < l.size(); i++) {\n        if(i % 3 == 0) {\n            thirds.push_back(l[i]);\n            thirds_idx.push_back(i);\n        }\n    }\n    \n    std::sort(thirds.begin(), thirds.end());\n    \n    for(int i = 0; i < thirds.size(); i++) {\n        l[thirds_idx[i]] = thirds[i];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> thirds;\n    std::vector<int> thirds_idx;\n    \n    for(int i = 0; i < l.size(); i++) {\n        if(i % 3 == 0) {\n            thirds.push_back(l[i]);\n            thirds_idx.push_back(i);\n        }\n    }\n    \n    std::sort(thirds.begin(), thirds.end());\n    \n    for(int i = 0; i < thirds.size(); i++) {\n        l[thirds_idx[i]] = thirds[i];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> thirds;\n    std::vector<int> indices;\n    \n    for(int i = 0; i < l.size(); i++) {\n        if(i % 3 == 0) {\n            thirds.push_back(l[i]);\n            indices.push_back(i);\n        }\n    }\n    \n    std::sort(thirds.begin(), thirds.end());\n    \n    for(int i = 0; i < indices.size(); i++) {\n        l[indices[i]] = thirds[i];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> thirds;\n    for(int i = 0; i < l.size(); i++) {\n        if(i % 3 == 0) {\n            thirds.push_back(l[i]);\n        }\n    }\n    \n    std::sort(thirds.begin(), thirds.end());\n    \n    int j = 0;\n    for(int i = 0; i < l.size(); i++) {\n        if(i % 3 == 0) {\n            l[i] = thirds[j++];\n        }\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l) {\n    float max = l[0];\n    for(float num : l) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l) {\n    float max = l[0];\n    for(float num : l) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l) {\n    float max = l[0];\n    for(float num : l) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l) {\n    float max = l[0];\n    for(float num : l) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l) {\n    float max = l[0];\n    for(float num : l) {\n        if(num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint fizz_buzz(int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while(num > 0) {\n                if(num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint fizz_buzz(int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while(num > 0) {\n                if(num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint fizz_buzz(int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while(num > 0) {\n                if(num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint fizz_buzz(int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while(num > 0) {\n                if(num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint fizz_buzz(int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while(num > 0) {\n                if(num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even_values;\n    for (int i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n    \n    std::sort(even_values.begin(), even_values.end());\n    \n    int even_index = 0;\n    for (int i = 0; i < l.size(); i += 2) {\n        l[i] = even_values[even_index++];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even_values;\n    for (int i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n    \n    std::sort(even_values.begin(), even_values.end());\n    \n    int even_index = 0;\n    for (int i = 0; i < l.size(); i += 2) {\n        l[i] = even_values[even_index++];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even;\n    for (int i = 0; i < l.size(); i += 2) {\n        even.push_back(l[i]);\n    }\n    \n    std::sort(even.begin(), even.end());\n    \n    int evenIndex = 0;\n    for (int i = 0; i < l.size(); i += 2) {\n        l[i] = even[evenIndex++];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even;\n    for (int i = 0; i < l.size(); i += 2) {\n        even.push_back(l[i]);\n    }\n    \n    std::sort(even.begin(), even.end());\n    \n    int evenIndex = 0;\n    for (int i = 0; i < l.size(); i += 2) {\n        l[i] = even[evenIndex++];\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even;\n    for (int i = 0; i < l.size(); i += 2) {\n        even.push_back(l[i]);\n    }\n    std::sort(even.begin(), even.end());\n    \n    int evenIndex = 0;\n    for (int i = 0; i < l.size(); i += 2) {\n        l[i] = even[evenIndex++];\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l) {\n    if (l.size() < 3) return false;\n    \n    for (int i = 0; i < l.size()-2; i++) {\n        for (int j = i+1; j < l.size()-1; j++) {\n            for (int k = j+1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l) {\n    if (l.size() < 3) return false;\n    \n    for (int i = 0; i < l.size()-2; i++) {\n        for (int j = i+1; j < l.size()-1; j++) {\n            for (int k = j+1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l) {\n    if (l.size() < 3) return false;\n    \n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l) {\n    if (l.size() < 3) return false;\n    \n    for (int i = 0; i < l.size()-2; i++) {\n        for (int j = i+1; j < l.size()-1; j++) {\n            for (int k = j+1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l) {\n    if (l.size() < 3) return false;\n    \n    for (int i = 0; i < l.size() - 2; i++) {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l) {\n    for(int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l) {\n    for(int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l) {\n    for(int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l) {\n    for(int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l) {\n    for(int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l) {\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = i + 1; j < l.size(); j++) {\n            if(l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l) {\n    for(size_t i = 0; i < l.size(); i++) {\n        for(size_t j = i + 1; j < l.size(); j++) {\n            if(l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base) {\n    if (x == 0) return \"0\";\n    std::string result;\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base) {\n    if (x == 0) return \"0\";\n    std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base) {\n    if (x == 0) return \"0\";\n    \n    std::string result;\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base) {\n    if (x == 0) return \"0\";\n    std::string result;\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base) {\n    if (x == 0) return \"0\";\n    std::string result;\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int>l, int t) {\n    for(int num : l) {\n        if(num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int>l, int t) {\n    for(int num : l) {\n        if(num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int>l, int t) {\n    for(int x : l) {\n        if(x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int>l, int t) {\n    for(int num : l) {\n        if(num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int>l, int t) {\n    for(int num : l) {\n        if(num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for (char c : brackets) {\n        if (c == '<') {\n            count++;\n        } else {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '<') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '<') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for (char c : brackets) {\n        if (c == '<') {\n            count++;\n        } else {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '<') count++;\n        else count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '(') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '(') count++;\n        else count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '(') {\n            count++;\n        }\n        else if(c == ')') {\n            count--;\n        }\n        if(count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '(') {\n            count++;\n        }\n        else if(c == ')') {\n            count--;\n        }\n        if(count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for(char c : brackets) {\n        if(c == '(') {\n            count++;\n        }\n        else if(c == ')') {\n            count--;\n        }\n        if(count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\nstd::vector<float> derivative(std::vector<float> xs) {\n    if (xs.size() <= 1) {\n        return std::vector<float>();\n    }\n    \n    std::vector<float> result(xs.size() - 1);\n    for (size_t i = 1; i < xs.size(); i++) {\n        result[i-1] = xs[i] * i;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\nstd::vector<float> derivative(std::vector<float> xs) {\n    if (xs.size() <= 1) {\n        return std::vector<float>();\n    }\n    \n    std::vector<float> result(xs.size() - 1);\n    for (size_t i = 1; i < xs.size(); i++) {\n        result[i-1] = xs[i] * i;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\nstd::vector<float> derivative(std::vector<float> xs) {\n    if (xs.size() <= 1) {\n        return {};\n    }\n    std::vector<float> result(xs.size() - 1);\n    for (size_t i = 1; i < xs.size(); i++) {\n        result[i-1] = xs[i] * i;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\nstd::vector<float> derivative(std::vector<float> xs) {\n    if (xs.size() <= 1) {\n        return {};\n    }\n    \n    std::vector<float> result(xs.size() - 1);\n    for (size_t i = 1; i < xs.size(); i++) {\n        result[i-1] = xs[i] * i;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\nstd::vector<float> derivative(std::vector<float> xs) {\n    if (xs.size() <= 1) {\n        return {};\n    }\n    std::vector<float> result(xs.size() - 1);\n    for (size_t i = 1; i < xs.size(); i++) {\n        result[i-1] = xs[i] * i;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || \n           (c == 'y' && i == s.length()-1)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n        else if(c == 'y' && i == s.length()-1) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n        else if(c == 'y' && i == s.length()-1) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || \n           (c == 'y' && i == s.length()-1)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || \n           (c == 'y' && i == s.length()-1)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s) {\n    int sum = 0;\n    for(char c : s) {\n        if(isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s) {\n    int sum = 0;\n    for(char c : s) {\n        if(isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s) {\n    int sum = 0;\n    for(char c : s) {\n        if(isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s) {\n    int sum = 0;\n    for(char c : s) {\n        if(isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s) {\n    int sum = 0;\n    for(char c : s) {\n        if(isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    \n    int smallest_even = -1;\n    int smallest_idx = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_idx = i;\n            }\n        }\n    }\n    \n    if (smallest_even == -1) {\n        return {};\n    }\n    \n    return {smallest_even, smallest_idx};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    \n    int minEven = -1;\n    int minIndex = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (minEven == -1 || arr[i] < minEven) {\n                minEven = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n    \n    if (minEven == -1) {\n        return {};\n    }\n    \n    return {minEven, minIndex};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    \n    int minEven = -1;\n    int minIndex = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (minEven == -1 || arr[i] < minEven) {\n                minEven = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n    \n    if (minEven == -1) {\n        return {};\n    }\n    \n    return {minEven, minIndex};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr) {\n    if (arr.empty()) return {};\n    \n    int minEven = -1;\n    int minIndex = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (minEven == -1 || arr[i] < minEven) {\n                minEven = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n    \n    if (minEven == -1) return {};\n    \n    return {minEven, minIndex};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    \n    int min_even = -1;\n    int min_idx = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (min_even == -1 || arr[i] < min_even) {\n                min_even = arr[i];\n                min_idx = i;\n            }\n        }\n    }\n    \n    if (min_even == -1) {\n        return {};\n    }\n    \n    return {min_even, min_idx};\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> freq;\n    for(int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for(auto pair : freq) {\n        if(pair.second >= pair.first && pair.first > result) {\n            result = pair.first;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> freq;\n    for(int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for(auto pair : freq) {\n        if(pair.second >= pair.first && pair.first > result) {\n            result = pair.first;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for (auto pair : freq) {\n        if (pair.second >= pair.first && pair.first > result) {\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> freq;\n    for(int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for(auto pair : freq) {\n        if(pair.second >= pair.first && pair.first > result) {\n            result = pair.first;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> freq;\n    for(int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for(auto pair : freq) {\n        if(pair.second >= pair.first && pair.first > result) {\n            result = pair.first;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = 0;\n    int n = q.size();\n    \n    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(q[i] != q[n-1-i]) {\n            return false;\n        }\n    }\n    \n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = 0;\n    int n = q.size();\n    \n    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(q[i] != q[n-1-i]) return false;\n    }\n    \n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = 0;\n    int n = q.size();\n    \n    // Check if sum exceeds weight\n    for(int i = 0; i < n; i++) {\n        sum += q[i];\n    }\n    if(sum > w) return false;\n    \n    // Check if palindrome\n    for(int i = 0; i < n/2; i++) {\n        if(q[i] != q[n-1-i]) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = 0;\n    int n = q.size();\n    \n    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(q[i] != q[n-1-i]) {\n            return false;\n        }\n    }\n    \n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = 0;\n    int n = q.size();\n    \n    for(int i = 0; i < n; i++) {\n        sum += q[i];\n        if(q[i] != q[n-1-i]) {\n            return false;\n        }\n    }\n    \n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    \n    for(int i = 0; i < n/2; i++) {\n        if(arr[i] != arr[n-1-i]) {\n            changes++;\n        }\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr) {\n    int changes = 0;\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr) {\n    int changes = 0;\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr) {\n    int changes = 0;\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    \n    for(int i = 0; i < n/2; i++) {\n        if(arr[i] != arr[n-1-i]) {\n            changes++;\n        }\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    \n    for(const auto& str : lst1) {\n        sum1 += str.length();\n    }\n    \n    for(const auto& str : lst2) {\n        sum2 += str.length();\n    }\n    \n    return sum2 < sum1 ? lst2 : lst1;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    \n    for(const auto& str : lst1) {\n        count1 += str.length();\n    }\n    \n    for(const auto& str : lst2) {\n        count2 += str.length();\n    }\n    \n    return (count2 < count1) ? lst2 : lst1;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    int sum1 = 0;\n    int sum2 = 0;\n    \n    for(const auto& str : lst1) {\n        sum1 += str.length();\n    }\n    \n    for(const auto& str : lst2) {\n        sum2 += str.length();\n    }\n    \n    if(sum2 < sum1) {\n        return lst2;\n    }\n    return lst1;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    int count1 = 0;\n    int count2 = 0;\n    \n    for(const auto& str : lst1) {\n        count1 += str.length();\n    }\n    \n    for(const auto& str : lst2) {\n        count2 += str.length();\n    }\n    \n    if(count2 < count1) {\n        return lst2;\n    }\n    return lst1;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    \n    for(const auto& str : lst1) {\n        sum1 += str.length();\n    }\n    \n    for(const auto& str : lst2) {\n        sum2 += str.length();\n    }\n    \n    return sum2 < sum1 ? lst2 : lst1;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    \n    uint64_t power = n;\n    while (power <= x) {\n        if (power == x) {\n            return true;\n        }\n        if (power > UINT64_MAX / n) {\n            break;\n        }\n        power *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (x == 0 || n == 0 || n == 1) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    uint64_t power = n;\n    while (power <= x) {\n        if (power == x) {\n            return true;\n        }\n        if (power > UINT64_MAX / n) {\n            break;\n        }\n        power *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (x == 0 || n == 1 || n == 0) return false;\n    if (x == 1) return true;\n    \n    uint64_t power = n;\n    while (power <= x) {\n        if (power == x) return true;\n        if (power > UINT64_MAX / n) break;\n        power *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (x == 0 || n == 0 || n == 1) return false;\n    if (x == 1) return true;\n    \n    uint64_t power = n;\n    while (power <= x) {\n        if (power == x) return true;\n        if (power > UINT64_MAX / n) break;\n        power *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (x == 0 || n == 0 || n == 1) return false;\n    if (x == 1) return true;\n    \n    uint64_t power = n;\n    while (power <= x) {\n        if (power == x) return true;\n        if (power > UINT64_MAX / n) break;\n        power *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\nint hex_key(const std::string & num) {\n    int count = 0;\n    for(char c : num) {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\nint hex_key(const std::string & num) {\n    int count = 0;\n    for(char c : num) {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\nint hex_key(const std::string & num) {\n    int count = 0;\n    for(char c : num) {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\nint hex_key(const std::string & num) {\n    int count = 0;\n    for(char c : num) {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\nint hex_key(const std::string & num) {\n    int count = 0;\n    for(char c : num) {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str) {\n    int len = str.length();\n    if (len == 1) return false;\n    for (int i = 2; i <= len/2; i++) {\n        if (len % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str) {\n    int len = str.length();\n    if (len <= 1) return false;\n    for (int i = 2; i <= len/2; i++) {\n        if (len % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str) {\n    int len = str.length();\n    if (len == 1) return false;\n    for (int i = 2; i <= len/2; i++) {\n        if (len % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str) {\n    int len = str.length();\n    if (len == 1) return false;\n    for (int i = 2; i <= len/2; i++) {\n        if (len % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str) {\n    int len = str.length();\n    if (len == 1) return false;\n    for (int i = 2; i <= len/2; i++) {\n        if (len % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    if (sum == 0) return \"0\";\n    \n    std::string binary;\n    while (sum > 0) {\n        binary = ((sum & 1) ? \"1\" : \"0\") + binary;\n        sum >>= 1;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    if (sum == 0) return \"0\";\n    \n    std::string binary;\n    while (sum > 0) {\n        binary = (sum % 2 ? \"1\" : \"0\") + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    if (sum == 0) return \"0\";\n    \n    std::string binary;\n    while (sum > 0) {\n        binary = (sum % 2 ? \"1\" : \"0\") + binary;\n        sum /= 2;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    if (sum == 0) return \"0\";\n    \n    std::string binary;\n    while (sum > 0) {\n        binary = ((sum & 1) ? \"1\" : \"0\") + binary;\n        sum >>= 1;\n    }\n    return binary;\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    if (sum == 0) return \"0\";\n    \n    std::string binary;\n    while (sum > 0) {\n        binary = ((sum & 1) ? \"1\" : \"0\") + binary;\n        sum >>= 1;\n    }\n    return binary;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            char shifted = ((c - base + 4) % 26) + base;\n            result += shifted;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            int shift = ((c - base + 2) * 2) % 26;\n            result += base + shift;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for(char c : s) {\n        if(isalpha(c)) {\n            int shift = ((c - 'a' + 2) * 2) % 26;\n            result += 'a' + shift;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for(char c : s) {\n        int shift = ((c - 'a' + 2) * 2) % 26;\n        result += 'a' + shift;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            int shift = ((c - base + 4) % 26);\n            result += base + shift;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\nstd::string encode(const std::string & message) {\n    std::string result = message;\n    std::string vowels = \"aeiouAEIOU\";\n    \n    for (char& c : result) {\n        if (std::islower(c)) {\n            c = std::toupper(c);\n        } else if (std::isupper(c)) {\n            c = std::tolower(c);\n        }\n        \n        size_t pos = vowels.find(c);\n        if (pos != std::string::npos) {\n            char base = (pos < 5) ? 'a' : 'A';\n            char offset = (pos < 5) ? pos : pos - 5;\n            c = base + ((offset + 2) % 5);\n            if (pos >= 5) {\n                c = std::toupper(c);\n            }\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\nstd::string encode(const std::string & message) {\n    std::string result;\n    std::string vowels = \"aeiouAEIOU\";\n    \n    for (char c : message) {\n        if (vowels.find(c) != std::string::npos) {\n            char newChar = (c >= 'a' && c <= 'z') ? \n                          toupper(c + 2) : tolower(c + 2);\n            result += newChar;\n        }\n        else if (isalpha(c)) {\n            result += isupper(c) ? tolower(c) : toupper(c);\n        }\n        else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\nstd::string encode(const std::string & message) {\n    std::string result = message;\n    std::string vowels = \"aeiouAEIOU\";\n    \n    for(char& c : result) {\n        if(std::islower(c)) {\n            c = std::toupper(c);\n        }\n        else if(std::isupper(c)) {\n            c = std::tolower(c);\n        }\n        \n        size_t pos = vowels.find(c);\n        if(pos != std::string::npos) {\n            char base = (pos < 5) ? 'a' : 'A';\n            char offset = (c - base + 2) % 26;\n            c = base + offset;\n            if(pos >= 5) {\n                c = std::toupper(c);\n            }\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\nstd::string encode(const std::string & message) {\n    std::string result = message;\n    std::string vowels = \"aeiouAEIOU\";\n    \n    for(char& c : result) {\n        if(std::islower(c)) {\n            c = std::toupper(c);\n        }\n        else if(std::isupper(c)) {\n            c = std::tolower(c);\n        }\n        \n        if(vowels.find(c) != std::string::npos) {\n            char base = std::isupper(c) ? 'A' : 'a';\n            int vowelIndex = (c - base) % 26;\n            c = base + ((vowelIndex + 2) % 26);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\nstd::string encode(const std::string & message) {\n    std::string result = message;\n    std::string vowels = \"aeiouAEIOU\";\n    \n    for(char& c : result) {\n        if(std::islower(c)) {\n            c = std::toupper(c);\n        }\n        else if(std::isupper(c)) {\n            c = std::tolower(c);\n        }\n        \n        if(vowels.find(c) != std::string::npos) {\n            char base = std::isupper(c) ? 'A' : 'a';\n            int pos = (c - base + 2) % 26;\n            c = base + pos;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool isLower = true;\n    bool isUpper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        \n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n            if (islower(c)) {\n                isUpper = false;\n            }\n            if (isupper(c)) {\n                isLower = false;\n            }\n        }\n    }\n\n    return isLower || isUpper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool isLower = true;\n    bool isUpper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        \n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n            if (islower(c)) {\n                isUpper = false;\n            }\n            if (isupper(c)) {\n                isLower = false;\n            }\n        }\n    }\n\n    return isLower || isUpper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    \n    bool isLower = true;\n    bool isUpper = true;\n    \n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        \n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n            if (islower(c)) {\n                isUpper = false;\n            }\n            if (isupper(c)) {\n                isLower = false;\n            }\n        }\n    }\n    \n    return isLower || isUpper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    \n    bool isLower = true;\n    bool isUpper = true;\n    \n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        \n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n            if (islower(c)) {\n                isUpper = false;\n            }\n            if (isupper(c)) {\n                isLower = false;\n            }\n        }\n    }\n    \n    return isLower || isUpper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    \n    bool isLower = true;\n    bool isUpper = true;\n    \n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        \n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n            if (islower(c)) {\n                isUpper = false;\n            }\n            if (isupper(c)) {\n                isLower = false;\n            }\n        }\n    }\n    \n    return isLower || isUpper;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n    \n    std::vector<bool> isPrime(n, true);\n    std::vector<int> primes;\n    \n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) {\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n    \n    std::vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    std::vector<int> result;\n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n) {\n    if (n <= 2) return {};\n    \n    std::vector<bool> isPrime(n, true);\n    std::vector<int> result;\n    \n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n    \n    std::vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    std::vector<int> result;\n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n) {\n    if (n <= 2) return {};\n    \n    std::vector<bool> isPrime(n, true);\n    std::vector<int> result;\n    \n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i += 2) {\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i += 2) {\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    int current = n;\n    for(int i = 0; i < n; i++){\n        result.push_back(current);\n        current += 2;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    int current = n;\n    for(int i = 0; i < n; i++){\n        result.push_back(current);\n        current += 2;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> result;\n    int current = n;\n    for(int i = 0; i < n; i++) {\n        result.push_back(current);\n        current += 2;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    int current = n;\n    for(int i = 0; i < n; i++){\n        result.push_back(current);\n        current += 2;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    int current = n;\n    for(int i = 0; i < n; i++){\n        result.push_back(current);\n        current += 2;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    \n    int64_t sum = 0;\n    int64_t count = m - n + 1;\n    \n    for (int64_t i = n; i <= m; i++) {\n        sum += i;\n    }\n    \n    int64_t avg = sum / count;\n    \n    if (avg == 0) return \"0\";\n    \n    std::string binary;\n    while (avg > 0) {\n        binary = (avg % 2 ? \"1\" : \"0\") + binary;\n        avg /= 2;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    \n    int64_t sum = ((m - n + 1) * (n + m)) / 2;\n    int64_t avg = sum / (m - n + 1);\n    \n    if (avg == 0) return \"0\";\n    \n    std::string binary;\n    while (avg > 0) {\n        binary = (avg % 2 ? \"1\" : \"0\") + binary;\n        avg /= 2;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    \n    int64_t sum = 0;\n    int64_t count = m - n + 1;\n    \n    for (int64_t i = n; i <= m; i++) {\n        sum += i;\n    }\n    \n    int64_t avg = sum / count;\n    \n    if (avg == 0) return \"0\";\n    \n    std::string binary;\n    while (avg > 0) {\n        binary = (avg % 2 ? \"1\" : \"0\") + binary;\n        avg /= 2;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    \n    int64_t count = m - n + 1;\n    int64_t sum = ((m + n) * count) / 2;\n    int64_t avg = sum / count;\n    \n    if (avg == 0) return \"0\";\n    \n    std::string binary;\n    while (avg > 0) {\n        binary = (avg % 2 ? \"1\" : \"0\") + binary;\n        avg /= 2;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    \n    int64_t sum = 0;\n    int64_t count = m - n + 1;\n    \n    for (int64_t i = n; i <= m; i++) {\n        sum += i;\n    }\n    \n    int64_t avg = sum / count;\n    \n    if (avg == 0) return \"0\";\n    \n    std::string binary;\n    while (avg > 0) {\n        binary = (avg % 2 ? \"1\" : \"0\") + binary;\n        avg /= 2;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    int fact = 1;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            fact = (fact * i) % 10000;\n            result[i-1] = fact;\n        } else {\n            result[i-1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    int factorial = 1;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            factorial = (factorial * i) % 10000;\n            result[i-1] = factorial;\n        } else {\n            result[i-1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    int factorial = 1;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            factorial = (factorial * i) % 10000;\n            result[i-1] = factorial;\n        } else {\n            result[i-1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    int factorial = 1;\n    int sum = 0;\n    \n    for(int i = 1; i <= n; i++) {\n        factorial = (factorial * i) % 10000;\n        sum += i;\n        \n        if(i % 2 == 0) {\n            result[i-1] = factorial;\n        } else {\n            result[i-1] = sum;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    int factorial = 1;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            factorial = (factorial * i) % 10000;\n            result[i-1] = factorial;\n        } else {\n            result[i-1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n) {\n    std::vector<int> result(2, 0);\n    \n    for (int i = 1; i <= n; i++) {\n        std::string num = std::to_string(i);\n        bool isPalindrome = true;\n        \n        for (int j = 0; j < num.length()/2; j++) {\n            if (num[j] != num[num.length()-1-j]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        \n        if (isPalindrome) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n) {\n    std::vector<int> result(2, 0);\n    \n    for (int i = 1; i <= n; i++) {\n        std::string num = std::to_string(i);\n        int len = num.length();\n        bool isPalindrome = true;\n        \n        for (int j = 0; j < len/2; j++) {\n            if (num[j] != num[len-1-j]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        \n        if (isPalindrome) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n) {\n    std::vector<int> result(2, 0);\n    \n    for (int i = 1; i <= n; i++) {\n        std::string num = std::to_string(i);\n        bool isPalindrome = true;\n        \n        int left = 0;\n        int right = num.length() - 1;\n        \n        while (left < right) {\n            if (num[left] != num[right]) {\n                isPalindrome = false;\n                break;\n            }\n            left++;\n            right--;\n        }\n        \n        if (isPalindrome) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n) {\n    std::vector<int> result(2, 0);\n    \n    for (int i = 1; i <= n; i++) {\n        std::string num = std::to_string(i);\n        bool isPalindrome = true;\n        \n        for (int j = 0; j < num.length()/2; j++) {\n            if (num[j] != num[num.length()-1-j]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        \n        if (isPalindrome) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n) {\n    std::vector<int> result(2, 0);\n    \n    for (int i = 1; i <= n; i++) {\n        std::string num = std::to_string(i);\n        bool isPalindrome = true;\n        \n        int left = 0;\n        int right = num.length() - 1;\n        \n        while (left < right) {\n            if (num[left] != num[right]) {\n                isPalindrome = false;\n                break;\n            }\n            left++;\n            right--;\n        }\n        \n        if (isPalindrome) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for(int num : n) {\n        int sum = 0;\n        bool first = true;\n        while(num != 0) {\n            int digit = num % 10;\n            if(first && num < 0) {\n                digit = -digit;\n                first = false;\n            }\n            sum += digit;\n            num /= 10;\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for(int num : n) {\n        int sum = 0;\n        bool first = true;\n        while(num != 0) {\n            int digit = num % 10;\n            if(first && num < 0) {\n                digit = -digit;\n                first = false;\n            }\n            sum += digit;\n            num /= 10;\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for(int num : n) {\n        int sum = 0;\n        bool first = true;\n        while(num != 0) {\n            int digit = num % 10;\n            if(first && num < 0) {\n                digit = -digit;\n                first = false;\n            }\n            sum += digit;\n            num /= 10;\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for(int num : n) {\n        int sum = 0;\n        bool first = true;\n        while(num != 0) {\n            int digit = num % 10;\n            if(first && num < 0) {\n                digit = -digit;\n                first = false;\n            }\n            sum += digit;\n            num /= 10;\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        bool first = true;\n        while (num != 0) {\n            int digit = num % 10;\n            if (first && num < 0) {\n                digit = -digit;\n                first = false;\n            }\n            sum += digit;\n            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int n = arr.size();\n    int minIndex = 0;\n    \n    // Find index of minimum element\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    // Check if elements are sorted after rotation\n    for (int i = 1; i < n; i++) {\n        int curr = arr[(minIndex + i) % n];\n        int prev = arr[(minIndex + i - 1) % n];\n        if (curr < prev) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int n = arr.size();\n    int minIndex = 0;\n    \n    // Find index of minimum element\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    // Check if elements are sorted after rotating to minimum\n    for (int i = 1; i < n; i++) {\n        int curr = (minIndex + i) % n;\n        int prev = (minIndex + i - 1) % n;\n        if (arr[curr] < arr[prev]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int n = arr.size();\n    int minIndex = 0;\n    \n    // Find index of minimum element\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    // Check if elements are sorted after rotation\n    for (int i = 1; i < n; i++) {\n        int curr = (minIndex + i) % n;\n        int prev = (minIndex + i - 1) % n;\n        if (arr[curr] < arr[prev]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int n = arr.size();\n    int minIndex = 0;\n    \n    // Find index of minimum element\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    // Check if elements are sorted after rotation\n    for (int i = 1; i < n; i++) {\n        int curr = arr[(minIndex + i) % n];\n        int prev = arr[(minIndex + i - 1) % n];\n        if (curr < prev) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr) {\n    if(arr.empty()) return true;\n    \n    int n = arr.size();\n    int minIndex = 0;\n    \n    // Find index of minimum element\n    for(int i = 1; i < n; i++) {\n        if(arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    // Check if elements are sorted after rotation from min index\n    for(int i = 1; i < n; i++) {\n        int curr = arr[(minIndex + i) % n];\n        int prev = arr[(minIndex + i - 1) % n];\n        if(curr < prev) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    int odd_count = 0;\n    int even_available = 0;\n    \n    for(int num : lst1) {\n        if(num % 2 == 1) {\n            odd_count++;\n        }\n    }\n    \n    for(int num : lst2) {\n        if(num % 2 == 0) {\n            even_available++;\n        }\n    }\n    \n    if(even_available >= odd_count) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    int odd_count = 0;\n    int even_available = 0;\n    \n    for(int num : lst1) {\n        if(num % 2 == 1) {\n            odd_count++;\n        }\n    }\n    \n    for(int num : lst2) {\n        if(num % 2 == 0) {\n            even_available++;\n        }\n    }\n    \n    if(even_available >= odd_count) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    int odd_count = 0;\n    int even_available = 0;\n    \n    for(int num : lst1) {\n        if(num % 2 == 1) {\n            odd_count++;\n        }\n    }\n    \n    for(int num : lst2) {\n        if(num % 2 == 0) {\n            even_available++;\n        }\n    }\n    \n    return (even_available >= odd_count) ? \"YES\" : \"NO\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    int odd_count = 0;\n    int even_available = 0;\n    \n    for(int num : lst1) {\n        if(num % 2 == 1) {\n            odd_count++;\n        }\n    }\n    \n    for(int num : lst2) {\n        if(num % 2 == 0) {\n            even_available++;\n        }\n    }\n    \n    if(even_available >= odd_count) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    int odd_count = 0;\n    int even_available = 0;\n    \n    for(int num : lst1) {\n        if(num % 2 == 1) {\n            odd_count++;\n        }\n    }\n    \n    for(int num : lst2) {\n        if(num % 2 == 0) {\n            even_available++;\n        }\n    }\n    \n    if(even_available >= odd_count) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    \n    for(int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for(char c : lst[i]) {\n            if((c - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        std::string s = \"the number of odd elements \" + std::to_string(count) + \n                       \"n the str\" + std::to_string(count) + \"ng \" + \n                       std::to_string(count) + \" of the \" + \n                       std::to_string(count) + \"nput.\";\n        result.push_back(s);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    \n    for(int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for(char c : lst[i]) {\n            if((c - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        \n        std::string base = \"the number of odd elements \";\n        base += std::to_string(count);\n        base += \"n the str\";\n        base += std::to_string(count);\n        base += \"ng \";\n        base += std::to_string(count);\n        base += \" of the \";\n        base += std::to_string(count);\n        base += \"nput.\";\n        \n        result.push_back(base);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    \n    for(int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for(char c : lst[i]) {\n            if((c - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        \n        std::string s = \"the number of odd elements \" + std::to_string(count) + \n                       \"n the str\" + std::to_string(count) + \"ng \" + \n                       std::to_string(count) + \" of the \" + \n                       std::to_string(count) + \"nput.\";\n                       \n        result.push_back(s);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    \n    for(int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for(char c : lst[i]) {\n            if((c - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        \n        std::string s = \"the number of odd elements \" + std::to_string(count) + \n                       \"n the str\" + std::to_string(count) + \"ng \" + \n                       std::to_string(count) + \" of the \" + \n                       std::to_string(count) + \"nput.\";\n                       \n        result.push_back(s);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for(int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for(char c : lst[i]) {\n            if((c - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        std::string s = \"the number of odd elements \" + std::to_string(count) + \"n the str\" + \n                       std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + \n                       std::to_string(count) + \"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t minSum = nums[0];\n    int64_t currSum = nums[0];\n    \n    for(size_t i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t minSum = nums[0];\n    int64_t currSum = nums[0];\n    \n    for(size_t i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t minSum = nums[0];\n    int64_t currSum = nums[0];\n    \n    for(size_t i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t minSum = nums[0];\n    int64_t currSum = nums[0];\n    \n    for(size_t i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t minSum = nums[0];\n    int64_t currSum = nums[0];\n    \n    for(size_t i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> >& grid, int capacity) {\n    if (grid.empty() || grid[0].empty()) {\n        return 0;\n    }\n    \n    int rows = grid.size();\n    int cols = grid[0].size();\n    \n    std::vector<int> water_units(rows, 0);\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            water_units[i] += grid[i][j];\n        }\n    }\n    \n    int trips = 0;\n    bool has_water = true;\n    \n    while (has_water) {\n        has_water = false;\n        for (int i = 0; i < rows; i++) {\n            if (water_units[i] > 0) {\n                has_water = true;\n                water_units[i] = std::max(0, water_units[i] - capacity);\n            }\n        }\n        if (has_water) {\n            trips++;\n        }\n    }\n    \n    return trips;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid, int capacity) {\n    if (grid.empty() || grid[0].empty()) {\n        return 0;\n    }\n    \n    int rows = grid.size();\n    int cols = grid[0].size();\n    \n    std::vector<int> water_per_well;\n    \n    for (int i = 0; i < rows; i++) {\n        int count = 0;\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                count++;\n            }\n        }\n        water_per_well.push_back(count);\n    }\n    \n    int total_trips = 0;\n    \n    for (int water : water_per_well) {\n        total_trips += (water + capacity - 1) / capacity;\n    }\n    \n    return total_trips;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid, int capacity) {\n    if (grid.empty() || grid[0].empty()) {\n        return 0;\n    }\n    \n    int rows = grid.size();\n    int cols = grid[0].size();\n    \n    std::vector<int> water_per_well;\n    \n    for (int i = 0; i < rows; i++) {\n        int count = 0;\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                count++;\n            }\n        }\n        water_per_well.push_back(count);\n    }\n    \n    int total_trips = 0;\n    bool has_water = true;\n    \n    while (has_water) {\n        has_water = false;\n        for (int i = 0; i < rows; i++) {\n            if (water_per_well[i] > 0) {\n                has_water = true;\n                water_per_well[i] = std::max(0, water_per_well[i] - capacity);\n            }\n        }\n        if (has_water) {\n            total_trips++;\n        }\n    }\n    \n    return total_trips;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid, int capacity) {\n    if (grid.empty() || grid[0].empty()) {\n        return 0;\n    }\n    \n    int rows = grid.size();\n    int cols = grid[0].size();\n    \n    std::vector<int> water_per_well;\n    \n    for (int i = 0; i < rows; i++) {\n        int count = 0;\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                count++;\n            }\n        }\n        water_per_well.push_back(count);\n    }\n    \n    int total_trips = 0;\n    \n    for (int water : water_per_well) {\n        total_trips += (water + capacity - 1) / capacity;\n    }\n    \n    return total_trips;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> >& grid, int capacity) {\n    if (grid.empty() || grid[0].empty()) {\n        return 0;\n    }\n    \n    int rows = grid.size();\n    int cols = grid[0].size();\n    \n    std::vector<int> water_per_well;\n    \n    for (int i = 0; i < rows; i++) {\n        int count = 0;\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                count++;\n            }\n        }\n        water_per_well.push_back(count);\n    }\n    \n    int total_fills = 0;\n    bool has_water = true;\n    \n    while (has_water) {\n        has_water = false;\n        for (int i = 0; i < rows; i++) {\n            if (water_per_well[i] > 0) {\n                has_water = true;\n                int units = std::min(capacity, water_per_well[i]);\n                water_per_well[i] -= units;\n                total_fills++;\n            }\n        }\n    }\n    \n    return total_fills;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for(size_t i = 0; i < lst.size(); i += 2) {\n        if(lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for(size_t i = 0; i < lst.size(); i += 2) {\n        if(lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for(size_t i = 0; i < lst.size(); i += 2) {\n        if(lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for(size_t i = 0; i < lst.size(); i += 2) {\n        if(lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for(size_t i = 0; i < lst.size(); i += 2) {\n        if(lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst) {\n    if (lst.empty()) return true;\n    \n    std::map<int,int> counts;\n    for (int i = 0; i < lst.size(); i++) {\n        counts[lst[i]]++;\n        if (counts[lst[i]] > 2) return false;\n    }\n    \n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i-1]) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst) {\n    if (lst.empty()) return true;\n    \n    std::unordered_map<int, int> count;\n    \n    for (int i = 0; i < lst.size(); i++) {\n        count[lst[i]]++;\n        if (count[lst[i]] > 2) return false;\n        if (i > 0 && lst[i] < lst[i-1]) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst) {\n    if (lst.empty()) return true;\n    \n    std::unordered_map<int,int> counts;\n    for (int num : lst) {\n        counts[num]++;\n        if (counts[num] > 2) return false;\n    }\n    \n    for (int i = 0; i < lst.size()-1; i++) {\n        if (lst[i] >= lst[i+1]) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst) {\n    if (lst.empty()) return true;\n    \n    std::unordered_map<int, int> count;\n    \n    // Check for duplicates\n    for (int num : lst) {\n        count[num]++;\n        if (count[num] > 2) return false;\n    }\n    \n    // Check if sorted\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i-1]) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst) {\n    if (lst.empty()) return true;\n    \n    std::unordered_map<int, int> counts;\n    \n    for (int i = 0; i < lst.size(); i++) {\n        counts[lst[i]]++;\n        if (counts[lst[i]] > 2) return false;\n        if (i > 0 && lst[i] < lst[i-1]) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int sum = 0;\n    int sign = 1;\n    \n    for(int num : arr) {\n        sum += abs(num);\n        if(num == 0) sign = 0;\n        else if(num < 0) sign *= -1;\n    }\n    \n    return sum * sign;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int sum = 0;\n    int sign = 1;\n    \n    for(int num : arr) {\n        sum += abs(num);\n        if(num == 0) {\n            sign = 0;\n        }\n        else if(num < 0) {\n            sign *= -1;\n        }\n    }\n    \n    return sum * sign;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int sign = 1;\n    int sum = 0;\n    \n    for(int num : arr) {\n        if(num == 0) return 0;\n        sum += abs(num);\n        sign *= (num > 0) ? 1 : -1;\n    }\n    \n    return sum * sign;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int sign = 1;\n    int sum = 0;\n    \n    for(int num : arr) {\n        if(num == 0) return 0;\n        sum += abs(num);\n        sign *= (num > 0) ? 1 : -1;\n    }\n    \n    return sign * sum;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int sign = 1;\n    int sum = 0;\n    \n    for(int num : arr) {\n        if(num == 0) return 0;\n        sum += abs(num);\n        sign *= (num > 0) ? 1 : -1;\n    }\n    \n    return sign * sum;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    std::vector<int> result;\n    std::vector<int> curr_path;\n    std::vector<int> min_path;\n    \n    // Directions for moving: up, right, down, left\n    int dx[] = {-1, 0, 1, 0};\n    int dy[] = {0, 1, 0, -1};\n    \n    // DFS function to find all possible paths\n    std::function<void(int,int)> dfs = [&](int x, int y) {\n        curr_path.push_back(grid[x][y]);\n        \n        if(curr_path.size() == k) {\n            if(min_path.empty() || curr_path < min_path) {\n                min_path = curr_path;\n            }\n        } else {\n            // Try all 4 directions\n            for(int i = 0; i < 4; i++) {\n                int new_x = x + dx[i];\n                int new_y = y + dy[i];\n                \n                // Check if new position is within grid\n                if(new_x >= 0 && new_x < n && new_y >= 0 && new_y < n) {\n                    dfs(new_x, new_y);\n                }\n            }\n        }\n        \n        curr_path.pop_back();\n    };\n    \n    // Try starting from each cell\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dfs(i, j);\n        }\n    }\n    \n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    std::vector<int> result;\n    std::vector<int> curr_path;\n    std::vector<int> min_path;\n    \n    // Directions for moving: up, right, down, left\n    int dx[] = {-1, 0, 1, 0};\n    int dy[] = {0, 1, 0, -1};\n    \n    // DFS function to explore all possible paths\n    std::function<void(int,int)> dfs = [&](int x, int y) {\n        curr_path.push_back(grid[x][y]);\n        \n        if (curr_path.size() == k) {\n            if (min_path.empty() || curr_path < min_path) {\n                min_path = curr_path;\n            }\n        } else {\n            // Try all 4 directions\n            for (int i = 0; i < 4; i++) {\n                int new_x = x + dx[i];\n                int new_y = y + dy[i];\n                \n                if (new_x >= 0 && new_x < n && new_y >= 0 && new_y < n) {\n                    dfs(new_x, new_y);\n                }\n            }\n        }\n        \n        curr_path.pop_back();\n    };\n    \n    // Try starting from each cell\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dfs(i, j);\n        }\n    }\n    \n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    std::vector<int> result;\n    std::vector<int> curr_path;\n    std::vector<int> min_path;\n    \n    // Directions for moving: up, right, down, left\n    int dx[] = {-1, 0, 1, 0};\n    int dy[] = {0, 1, 0, -1};\n    \n    // DFS function to explore all possible paths\n    std::function<void(int,int)> dfs = [&](int x, int y) {\n        curr_path.push_back(grid[x][y]);\n        \n        if (curr_path.size() == k) {\n            if (min_path.empty() || curr_path < min_path) {\n                min_path = curr_path;\n            }\n        } else {\n            for (int i = 0; i < 4; i++) {\n                int new_x = x + dx[i];\n                int new_y = y + dy[i];\n                \n                if (new_x >= 0 && new_x < n && new_y >= 0 && new_y < n) {\n                    dfs(new_x, new_y);\n                }\n            }\n        }\n        \n        curr_path.pop_back();\n    };\n    \n    // Try starting from each cell\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dfs(i, j);\n        }\n    }\n    \n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    std::vector<int> result;\n    std::vector<int> curr_path;\n    std::vector<int> min_path;\n    \n    // Helper function to check if cell is valid\n    auto isValid = [&](int r, int c) {\n        return r >= 0 && r < n && c >= 0 && c < n;\n    };\n    \n    // Directions: up, right, down, left\n    std::vector<std::pair<int,int>> dirs = {{-1,0}, {0,1}, {1,0}, {0,-1}};\n    \n    // DFS function to try all possible paths\n    std::function<void(int,int)> dfs = [&](int r, int c) {\n        curr_path.push_back(grid[r][c]);\n        \n        if (curr_path.size() == k) {\n            if (min_path.empty() || curr_path < min_path) {\n                min_path = curr_path;\n            }\n        } else {\n            for (auto& dir : dirs) {\n                int new_r = r + dir.first;\n                int new_c = c + dir.second;\n                if (isValid(new_r, new_c)) {\n                    dfs(new_r, new_c);\n                }\n            }\n        }\n        \n        curr_path.pop_back();\n    };\n    \n    // Try starting from each cell\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dfs(i, j);\n        }\n    }\n    \n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    std::vector<int> result;\n    std::vector<int> current;\n    std::vector<int> best;\n    \n    // Directions for moving up, right, down, left\n    int dx[] = {-1, 0, 1, 0};\n    int dy[] = {0, 1, 0, -1};\n    \n    // DFS function to try all possible paths\n    std::function<void(int,int)> dfs = [&](int x, int y) {\n        current.push_back(grid[x][y]);\n        \n        if(current.size() == k) {\n            if(best.empty() || current < best) {\n                best = current;\n            }\n        } else {\n            // Try all 4 directions\n            for(int i = 0; i < 4; i++) {\n                int newX = x + dx[i];\n                int newY = y + dy[i];\n                \n                // Check if new position is within grid\n                if(newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    dfs(newX, newY);\n                }\n            }\n        }\n        \n        current.pop_back();\n    };\n    \n    // Try starting from each cell\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dfs(i, j);\n        }\n    }\n    \n    return best;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    bool hasOdd = false;\n    \n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    \n    return hasOdd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    bool hasOdd = false;\n    \n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    \n    return hasOdd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    bool hasOdd = false;\n    \n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    \n    return hasOdd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    bool hasOdd = false;\n    \n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    \n    return hasOdd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    bool hasOdd = false;\n    \n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    \n    return hasOdd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for(float num : lst) {\n        int64_t ceil_num = std::ceil(num);\n        sum += ceil_num * ceil_num;\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for(float num : lst) {\n        int ceiling = ceil(num);\n        sum += (uint64_t)(ceiling * ceiling);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for(float num : lst) {\n        int ceiling = ceil(num);\n        sum += (uint64_t)(ceiling * ceiling);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for(float num : lst) {\n        int ceiling = ceil(num);\n        sum += (uint64_t)(ceiling * ceiling);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for(float num : lst) {\n        int ceiling = ceil(num);\n        sum += (uint64_t)(ceiling * ceiling);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr){\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr) {\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < arr[i-1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr) {\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < arr[i-1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr){\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr) {\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < arr[i-1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_neg = 0;\n    int smallest_pos = 0;\n    \n    for(int num : lst) {\n        if(num < 0) {\n            largest_neg = std::max(largest_neg, num);\n            if(largest_neg == 0) largest_neg = num;\n        }\n        if(num > 0) {\n            smallest_pos = std::min(smallest_pos, num);\n            if(smallest_pos == 0) smallest_pos = num;\n        }\n    }\n    \n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_neg = 0;\n    int smallest_pos = 0;\n    \n    for (int num : lst) {\n        if (num < 0) {\n            largest_neg = std::max(largest_neg, num);\n            if (largest_neg == 0) largest_neg = num;\n        }\n        if (num > 0) {\n            smallest_pos = std::min(smallest_pos, num);\n            if (smallest_pos == 0) smallest_pos = num;\n        }\n    }\n    \n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_neg = 0;\n    int smallest_pos = 0;\n    bool found_neg = false;\n    bool found_pos = false;\n    \n    for(int num : lst) {\n        if(num < 0) {\n            if(!found_neg || num > largest_neg) {\n                largest_neg = num;\n            }\n            found_neg = true;\n        }\n        else if(num > 0) {\n            if(!found_pos || num < smallest_pos) {\n                smallest_pos = num;\n            }\n            found_pos = true;\n        }\n    }\n    \n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_neg = 0;\n    int smallest_pos = 0;\n    \n    for(int num : lst) {\n        if(num < 0) {\n            largest_neg = std::max(largest_neg, num);\n            if(largest_neg == 0) largest_neg = num;\n        }\n        if(num > 0) {\n            smallest_pos = std::min(smallest_pos, num);\n            if(smallest_pos == 0) smallest_pos = num;\n        }\n    }\n    \n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_neg = 0;\n    int smallest_pos = 0;\n    \n    for(int num : lst) {\n        if(num < 0) {\n            largest_neg = std::max(largest_neg, num);\n            if(largest_neg == 0) largest_neg = num;\n        }\n        if(num > 0) {\n            smallest_pos = std::min(smallest_pos, num);\n            if(smallest_pos == 0) smallest_pos = num;\n        }\n    }\n    \n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n    \n    for (uint64_t i = 1; i <= n; i++) {\n        factorial *= i;\n        result *= factorial;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```c\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n    \n    for (uint64_t i = 1; i <= n; i++) {\n        factorial *= i;\n        result *= factorial;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n    \n    for (uint64_t i = 1; i <= n; i++) {\n        factorial *= i;\n        result *= factorial;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n    \n    for(uint64_t i = 1; i <= n; i++) {\n        factorial *= i;\n        result *= factorial;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n    \n    for (uint64_t i = 1; i <= n; i++) {\n        factorial *= i;\n        result *= factorial;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int>& nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num <= 10) continue;\n        \n        int n = abs(num);\n        int lastDigit = n % 10;\n        \n        while (n >= 10) {\n            n /= 10;\n        }\n        int firstDigit = n;\n        \n        if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int>& nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num <= 10) continue;\n        \n        int n = abs(num);\n        int lastDigit = n % 10;\n        \n        while (n >= 10) {\n            n /= 10;\n        }\n        int firstDigit = n;\n        \n        if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int>& nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num <= 10) continue;\n        \n        int n = abs(num);\n        int lastDigit = n % 10;\n        \n        while (n >= 10) {\n            n /= 10;\n        }\n        int firstDigit = n;\n        \n        if ((firstDigit % 2 == 1) && (lastDigit % 2 == 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int>& nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num <= 10) continue;\n        \n        int n = abs(num);\n        int lastDigit = n % 10;\n        \n        while (n >= 10) {\n            n /= 10;\n        }\n        int firstDigit = n;\n        \n        if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int>& nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num <= 10) continue;\n        \n        int n = abs(num);\n        int lastDigit = n % 10;\n        \n        while (n >= 10) {\n            n /= 10;\n        }\n        int firstDigit = n;\n        \n        if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\nuint64_t get_max_triples(uint64_t n) {\n    uint64_t count = 0;\n    vector<uint64_t> a(n);\n    \n    for(uint64_t i = 0; i < n; i++) {\n        a[i] = (i+1) * (i+1) - (i+1) + 1;\n    }\n    \n    for(uint64_t i = 0; i < n-2; i++) {\n        for(uint64_t j = i+1; j < n-1; j++) {\n            for(uint64_t k = j+1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\nuint64_t get_max_triples(uint64_t n) {\n    uint64_t count = 0;\n    vector<uint64_t> a(n);\n    \n    for(uint64_t i = 0; i < n; i++) {\n        a[i] = (i+1) * (i+1) - (i+1) + 1;\n    }\n    \n    for(uint64_t i = 0; i < n-2; i++) {\n        for(uint64_t j = i+1; j < n-1; j++) {\n            for(uint64_t k = j+1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\nuint64_t get_max_triples(uint64_t n) {\n    uint64_t count = 0;\n    vector<uint64_t> a(n);\n    \n    for(uint64_t i = 0; i < n; i++) {\n        a[i] = (i+1) * (i+1) - (i+1) + 1;\n    }\n    \n    for(uint64_t i = 0; i < n-2; i++) {\n        for(uint64_t j = i+1; j < n-1; j++) {\n            for(uint64_t k = j+1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\nuint64_t get_max_triples(uint64_t n) {\n    vector<uint64_t> a(n);\n    for(uint64_t i = 0; i < n; i++) {\n        a[i] = (i+1) * (i+1) - (i+1) + 1;\n    }\n    \n    uint64_t count = 0;\n    for(uint64_t i = 0; i < n-2; i++) {\n        for(uint64_t j = i+1; j < n-1; j++) {\n            for(uint64_t k = j+1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\nuint64_t get_max_triples(uint64_t n) {\n    vector<uint64_t> a(n);\n    for(uint64_t i = 0; i < n; i++) {\n        a[i] = (i+1) * (i+1) - (i+1) + 1;\n    }\n    \n    uint64_t count = 0;\n    for(uint64_t i = 0; i < n-2; i++) {\n        for(uint64_t j = i+1; j < n-1; j++) {\n            for(uint64_t k = j+1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y) {\n    if (n <= 1) return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y) {\n    if (n <= 1) return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y) {\n    if (n <= 1) return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y) {\n    if (n <= 1) return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y) {\n    if (n <= 1) return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for(float num : lst) {\n        if(num >= 0 && floor(num) == num && (int)num % 2 == 1) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num > 0 && floor(num) == num && (int)num % 2 == 1) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num > 0 && floor(num) == num && (int)num % 2 == 1) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num > 0 && floor(num) == num && (int)num % 2 == 1) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num > 0 && floor(num) == num && (static_cast<int>(num) % 2 == 1)) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for(size_t i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for(size_t i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for(size_t i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for(size_t i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for(size_t i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}

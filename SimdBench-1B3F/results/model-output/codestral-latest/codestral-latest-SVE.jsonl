{"task_id": "SimdBench_0_SVE", "completion": "```c\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svbool_t mask_vec = svld1sb_z(pg, &mask[i]);\n        svint64_t src_vec = svld1_gather_s64index_s64(pg, &src[i], mask_vec);\n        svst1_gather_s64index_s64(pg, &dst[i], mask_vec, src_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svbool_t mask_vec = svld1sb_s32(pg, mask + i);\n        svint64_t src_vec = svld1_s64(pg, src + i);\n        svst1_s64(pg, dst + i, svsel_s64(mask_vec, src_vec, svld1_s64(pg, dst + i)));\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svbool_t mask_vec = svld1sb_z(pg, &mask[i]);\n        svint64_t src_vec = svld1_gather_s64index_s64(pg, &src[i], mask_vec);\n        svst1_gather_s64index_s64(pg, &dst[i], mask_vec, src_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svbool_t mask_vec = svld1sb_s64(pg, mask + i);\n        svint64_t src_vec = svld1_s64(pg, src + i);\n        svst1_s64(pg, dst + i, svsel_s64(mask_vec, src_vec, svdup_s64(0)));\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t mask_pred = svld1sb(pg, mask + i);\n        svint64_t src_vec = svld1(pg, src + i);\n        svst1(pg, dst + i, svsel(mask_pred, src_vec, svld1(pg, dst + i)));\n    }\n\n    for (; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl = svcntw();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svint32_t vec_src = svld1(pg, &src[i]);\n\n        svint32_t tmp1 = svlsr_n_z(pg, svmul_n_z(pg, vec_src, scale), 3);\n        svint32_t tmp2 = svlsl_n_z(pg, svmul_n_z(pg, vec_src, scale), 3);\n\n        svint32_t result = svdiv_n_z(pg, svadd_z(pg, svmul_n_z(pg, vec_src, scale), svmul_z(pg, tmp1, tmp2)), 7);\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t v_src = svld1(pg, &src[i]);\n        svint32_t v_tmp1 = svlsr(svmul_x(pg, v_src, svdup_s32(scale)), 3);\n        svint32_t v_tmp2 = svlsl(svmul_x(pg, v_src, svdup_s32(scale)), 3);\n        svint32_t v_result = svdiv_x(pg, svadd_x(pg, svmul_x(pg, v_src, svdup_s32(scale)), svmul_x(pg, v_tmp1, v_tmp2)), svdup_s32(7));\n        svst1(pg, &dst[i], v_result);\n    }\n\n    for (; i < length; ++i) {\n        int tmp1 = (src[i] * scale) >> 3;\n        int tmp2 = (src[i] * scale) << 3;\n        dst[i] = (src[i] * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t v_src = svld1(pg, &src[i]);\n        svint32_t v_tmp1 = svlsr(svmul_x(pg, v_src, svdup_s32(scale)), 3);\n        svint32_t v_tmp2 = svlsl(svmul_x(pg, v_src, svdup_s32(scale)), 3);\n        svint32_t v_result = svdiv_x(pg, svadd_x(pg, svmul_x(pg, v_src, svdup_s32(scale)), svmul_x(pg, v_tmp1, v_tmp2)), svdup_s32(7));\n        svst1(pg, &dst[i], v_result);\n    }\n\n    for (; i < length; ++i) {\n        int tmp1 = (src[i] * scale) >> 3;\n        int tmp2 = (src[i] * scale) << 3;\n        dst[i] = (src[i] * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t vec_src = svld1(pg, &src[i]);\n        svint32_t vec_tmp1 = svlsr(svptrue_b32(), svmul(svptrue_b32(), vec_src, svdup_n_s32(scale)), 3);\n        svint32_t vec_tmp2 = svlsl(svptrue_b32(), svmul(svptrue_b32(), vec_src, svdup_n_s32(scale)), 3);\n        svint32_t vec_result = svdiv(svptrue_b32(), svadd(svptrue_b32(), svmul(svptrue_b32(), vec_src, svdup_n_s32(scale)), svmul(svptrue_b32(), vec_tmp1, vec_tmp2)), svdup_n_s32(7));\n        svst1(pg, &dst[i], vec_result);\n    }\n\n    for (; i < length; ++i) {\n        int tmp1 = (src[i] * scale) >> 3;\n        int tmp2 = (src[i] * scale) << 3;\n        dst[i] = (src[i] * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t vec_src = svld1(pg, &src[i]);\n        svint32_t vec_tmp1 = svlsr(svptrue_b32(), svmul_n_s32_z(pg, vec_src, scale), 3);\n        svint32_t vec_tmp2 = svlsl(svptrue_b32(), svmul_n_s32_z(pg, vec_src, scale), 3);\n        svint32_t vec_result = svdiv_n_s32_z(pg, svadd_n_s32_z(pg, svmul_n_s32_z(pg, vec_src, scale), svmul_n_s32_z(pg, vec_tmp1, vec_tmp2)), 7);\n        svst1(pg, &dst[i], vec_result);\n    }\n\n    for (; i < length; ++i) {\n        int tmp1 = (src[i] * scale) >> 3;\n        int tmp2 = (src[i] * scale) << 3;\n        dst[i] = (src[i] * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        svbool_t pg = svptrue_b64();\n        svfloat64_t vec = svld1_gather_s64(pg, src + r * cols + stride);\n        svst1_gather_s64(pg, dst + r, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        svbool_t pg = svwhilelt_b64(r, 1);\n        svfloat64_t vec = svld1_gather_f64(pg, src + r * cols + stride);\n        svst1_f64(pg, dst + r, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        svbool_t pg = svptrue_b64();\n        svfloat64_t vec = svld1_gather_s64(pg, src + r * cols + stride);\n        svst1_gather_s64(pg, dst + r, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        svbool_t pg = svptrue_b64();\n        svfloat64_t vec = svld1(pg, &src[r * cols + stride]);\n        svst1(pg, &dst[r], vec);\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        svbool_t pg = svptrue_b64();\n        svfloat64_t vec = svld1_gather_s64(pg, src + r * cols + stride);\n        svst1_gather_s64(pg, dst + r, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t idx = svld1_u32(pg, &indices[i]);\n        svfloat32_t src_vals = svld1_gather_u32index_f32(pg, src, idx);\n        svst1_scatter_u32index_f32(pg, dst, idx, src_vals);\n    }\n    for (; i < length; ++i) {\n        dst[indices[i]] = src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t idx = svld1_s32(pg, &indices[i]);\n        svfloat32_t src_vals = svld1_gather_s32index_f32(pg, src, idx);\n        svst1_scatter_s32index_f32(pg, dst, idx, src_vals);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        svint32_t idx = svld1_s32(pg, &indices[i]);\n        svfloat32_t src_vals = svld1_gather_s32index_f32(pg, src, idx);\n        svst1_scatter_s32index_f32(pg, dst, idx, src_vals);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t idx = svld1_u32(pg, &indices[i]);\n        svfloat32_t src_vals = svld1_gather_u32index_f32(pg, src, idx);\n        svst1_scatter_u32index_f32(pg, dst, idx, src_vals);\n    }\n    for (; i < length; ++i) {\n        dst[indices[i]] = src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t idx = svld1_s32(pg, &indices[i]);\n        svfloat32_t src_vals = svld1_gather_s32index_f32(pg, src, idx);\n        svst1_scatter_s32index_f32(pg, dst, idx, src_vals);\n    }\n\n    if (i < length) {\n        svbool_t pg_tail = svwhilelt_b32(i, length);\n        svint32_t idx_tail = svld1_s32(pg_tail, &indices[i]);\n        svfloat32_t src_vals_tail = svld1_gather_s32index_f32(pg_tail, src, idx_tail);\n        svst1_scatter_s32index_f32(pg_tail, dst, idx_tail, src_vals_tail);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t idx = svld1_u32(pg, &indices[i]);\n        svfloat32_t src_vals = svld1_gather_s32index_f32(pg, src, idx);\n        svst1_scatter_s32index_f32(pg, dst, idx, src_vals);\n    }\n    for (; i < length; ++i) {\n        dst[indices[i]] = src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t length = end - start + 1;\n    uint64_t vl = svcntw();\n\n    while (length > 0) {\n        uint64_t chunk_size = svminuw_u64(length, vl);\n        svbool_t pg = svwhilelt_b16(chunk_size, chunk_size);\n\n        svint16_t vec = svld1(pg, &arr[start]);\n        svst1(pg, &arr[end], vec);\n\n        start += chunk_size;\n        end -= chunk_size;\n        length -= chunk_size;\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t len = end - start + 1;\n    if (len == 0) return;\n\n    int16_t *left = arr + start;\n    int16_t *right = arr + end;\n\n    while (left < right) {\n        svbool_t pg = svwhilelt_b16(left, right);\n        svint16_t vl = svld1_s16(pg, left);\n        svint16_t vr = svld1_s16(pg, right);\n\n        svst1_s16(pg, left, vr);\n        svst1_s16(pg, right, vl);\n\n        left = svptrue_b16() ? left + svcntb() : left;\n        right = svptrue_b16() ? right - svcntb() : right;\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t len = end - start + 1;\n    uint64_t vl = svcntb();\n\n    while (len > 0) {\n        uint64_t n = svmin(len, vl);\n        svbool_t pg = svwhilelt_b16(n, n);\n\n        svint16_t vec = svld1(pg, &arr[start]);\n        svst1(pg, &arr[end], vec);\n\n        start++;\n        end--;\n        len -= 2;\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t len = end - start + 1;\n    if (len == 0) return;\n\n    int16_t *left = arr + start;\n    int16_t *right = arr + end;\n\n    while (left < right) {\n        svbool_t pg = svwhilelt_b16(left, right);\n        svint16_t vl = svld1_s16(pg, left);\n        svint16_t vr = svld1_s16(pg, right);\n\n        svst1_s16(pg, left, vr);\n        svst1_s16(pg, right, vl);\n\n        left = svptrue_b16() ? left + svcntb() : left;\n        right = svptrue_b16() ? right - svcntb() : right;\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t i = start;\n    uint64_t j = end;\n    svbool_t pg = svptrue_b16();\n\n    while (i < j) {\n        svint16_t vec_i = svld1(pg, &arr[i]);\n        svint16_t vec_j = svld1(pg, &arr[j]);\n\n        svst1(pg, &arr[i], vec_j);\n        svst1(pg, &arr[j], vec_i);\n\n        i += svcntb();\n        j -= svcntb();\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    const uint8_t *src = tensor + slice_idx * slice_size;\n    uint8_t *dst = slice;\n\n    for (size_t i = 0; i < slice_size; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, slice_size);\n        svuint8_t vec = svld1b(pg, src + i);\n        svst1b(pg, dst + i, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n    const uint8_t *src = tensor + offset;\n    uint8_t *dst = slice;\n\n    size_t vl = svcntb();\n    for (size_t i = 0; i < slice_size; i += vl) {\n        svbool_t pg = svwhilelt_b8(i, slice_size);\n        svuint8_t vec = svld1_u8(pg, src + i);\n        svst1_u8(pg, dst + i, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    const uint8_t *src = tensor + slice_idx * slice_size;\n    uint8_t *dst = slice;\n\n    for (size_t i = 0; i < slice_size; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, slice_size);\n        svuint8_t vec = svld1_u8(pg, src + i);\n        svst1_u8(pg, dst + i, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    const uint8_t *src = tensor + slice_idx * slice_size;\n    uint8_t *dst = slice;\n\n    for (size_t i = 0; i < slice_size; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, slice_size);\n        svuint8_t vec = svld1_u8(pg, src + i);\n        svst1_u8(pg, dst + i, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n    const uint8_t *src = tensor + offset;\n    uint8_t *dst = slice;\n\n    size_t vl = svcntb();\n    for (size_t i = 0; i < slice_size; i += vl) {\n        svbool_t pg = svwhilelt_b8(i, slice_size);\n        svuint8_t vec = svld1_u8(pg, src + i);\n        svst1_u8(pg, dst + i, vec);\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < i + block_size && ii < rows; ++ii) {\n                for (size_t jj = j; jj < j + block_size && jj < cols; ++jj) {\n                    size_t vl = svcntw();\n                    svbool_t pg = svwhilelt_b16(jj, cols);\n                    svint16_t vec = svld1(pg, &src[ii * cols + jj]);\n                    svst1(pg, &dst[jj * rows + ii], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; ++bi) {\n                for (size_t bj = 0; bj < block_size; bj += svcntw()) {\n                    size_t vl = svcntw();\n                    svbool_t pg = svwhilelt_b16(bj, block_size);\n                    svint16_t vec = svld1(pg, &src[(i + bi) * cols + j + bj]);\n                    svst1(pg, &dst[(j + bj) * rows + i + bi], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; ++bi) {\n                for (size_t bj = 0; bj < block_size; bj += svcntw()) {\n                    size_t vl = svcntw();\n                    svbool_t pg = svwhilelt_b16(bj, block_size);\n                    svint16_t vec = svld1(pg, &src[(i + bi) * cols + j + bj]);\n                    svst1(pg, &dst[(j + bj) * rows + i + bi], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < i + block_size && ii < rows; ++ii) {\n                for (size_t jj = j; jj < j + block_size && jj < cols; ++jj) {\n                    size_t src_idx = ii * cols + jj;\n                    size_t dst_idx = jj * rows + ii;\n                    dst[dst_idx] = src[src_idx];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < i + block_size && ii < rows; ++ii) {\n                for (size_t jj = j; jj < j + block_size && jj < cols; ++jj) {\n                    size_t src_index = ii * cols + jj;\n                    size_t dst_index = jj * rows + ii;\n                    dst[dst_index] = src[src_index];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    float sum = 0.0f;\n    size_t stride = dim * dim;\n    size_t i = 0;\n\n    for (; i <= dim - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, dim);\n        svfloat32_t vec = svld1(pg, &array[i * (stride + dim + 1)]);\n        sum += svaddv(pg, vec);\n    }\n\n    for (; i < dim; ++i) {\n        sum += array[i * (stride + dim + 1)];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    float sum = 0.0f;\n    size_t stride = dim * dim;\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < dim; i += vl) {\n        size_t current_vl = svmin_vl((dim - i), vl);\n        svbool_t pg = svwhilelt_b32_u32(i, current_vl);\n\n        svfloat32_t vec = svld1(pg, &array[i * stride + i * dim + i]);\n        sum += svaddv(pg, vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    float sum = 0.0f;\n    size_t stride = dim * dim;\n    size_t i = 0;\n\n    for (; i <= dim - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, dim);\n        svfloat32_t vec = svld1(pg, &array[i * (stride + dim + 1)]);\n        sum += svaddv(pg, vec);\n    }\n\n    for (; i < dim; ++i) {\n        sum += array[i * (stride + dim + 1)];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    float sum = 0.0f;\n    size_t stride = dim * dim;\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < dim; i += vl) {\n        size_t current_vl = svmin_vl(dim - i, vl);\n        svbool_t pg = svwhilelt_b32(i, current_vl);\n\n        svfloat32_t vec = svld1(pg, &array[i * stride + i * dim + i]);\n        sum += svaddv(pg, vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    float sum = 0.0f;\n    size_t stride = dim * dim;\n    size_t i = 0;\n\n    svbool_t pg = svwhilelt_b32(i, dim);\n    while (svptest_any(svptrue_b32(), pg)) {\n        size_t index = i * (stride + dim + 1);\n        svfloat32_t vec = svld1(pg, &array[index]);\n        sum += svaddv(pg, vec);\n        i += svcntp_b32(pg, pg);\n        pg = svwhilelt_b32(i, dim);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t num_elements = rows * cols;\n    size_t i = 0;\n\n    svbool_t pg = svptrue_b64();\n\n    for (; i <= num_elements - svcntd(); i += svcntd()) {\n        svfloat64_t src_vec = svld1(pg, &src[i]);\n        svfloat64_t threshold_vec = svdup_f64(threshold);\n        svfloat64_t scale_vec = svdup_f64(scale);\n\n        svbool_t mask = svcmpgt(pg, src_vec, threshold_vec);\n        svfloat64_t scaled_vec = svmul_x(pg, src_vec, scale_vec);\n        svfloat64_t result_vec = svsel(mask, scaled_vec, src_vec);\n\n        svst1(pg, &dst[i], result_vec);\n    }\n\n    for (; i < num_elements; ++i) {\n        dst[i] = (src[i] > threshold) ? src[i] * scale : src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double *src_row = src + i * cols;\n        double *dst_row = dst + i * cols;\n\n        size_t j = 0;\n        for (; j <= cols - svcntd(); j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, cols);\n            svfloat64_t v_src = svld1(pg, src_row + j);\n            svbool_t pg_gt = svcmpgt(pg, v_src, svdup_f64(pg, threshold));\n            svfloat64_t v_scaled = svmul(pg_gt, v_src, svdup_f64(pg_gt, scale));\n            svfloat64_t v_result = svsel(pg_gt, v_scaled, v_src);\n            svst1(pg, dst_row + j, v_result);\n        }\n\n        for (; j < cols; ++j) {\n            if (src_row[j] > threshold) {\n                dst_row[j] = src_row[j] * scale;\n            } else {\n                dst_row[j] = src_row[j];\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total_elements = rows * cols;\n    size_t i = 0;\n\n    svbool_t pg = svptrue_b64();\n\n    while (i <= total_elements - svcntd()) {\n        svfloat64_t src_vec = svld1(pg, &src[i]);\n        svbool_t mask = svcmpgt(pg, src_vec, svdup_f64(pg, threshold));\n        svfloat64_t scaled_vec = svmul(pg, src_vec, svdup_f64(pg, scale));\n        svfloat64_t result_vec = svsel(pg, scaled_vec, src_vec, mask);\n        svst1(pg, &dst[i], result_vec);\n        i += svcntd();\n    }\n\n    if (i < total_elements) {\n        svbool_t pg_tail = svwhilelt_b64(i, total_elements);\n        svfloat64_t src_vec = svld1(pg_tail, &src[i]);\n        svbool_t mask = svcmpgt(pg_tail, src_vec, svdup_f64(pg_tail, threshold));\n        svfloat64_t scaled_vec = svmul(pg_tail, src_vec, svdup_f64(pg_tail, scale));\n        svfloat64_t result_vec = svsel(pg_tail, scaled_vec, src_vec, mask);\n        svst1(pg_tail, &dst[i], result_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            size_t vl = svcntd();\n            svbool_t pg = svwhilelt_b64(j, cols - j);\n            svfloat64_t v_src = svld1_gather_u64(pg, src + i * cols + j);\n            svfloat64_t v_threshold = svdup_f64(threshold);\n            svbool_t pg_gt = svcmpgt(pg, v_src, v_threshold);\n            svfloat64_t v_scale = svdup_f64(scale);\n            svfloat64_t v_scaled = svmul_f64_z(pg_gt, v_src, v_scale);\n            svfloat64_t v_result = svsel_f64(pg_gt, v_scaled, v_src);\n            svst1_gather_u64(pg, dst + i * cols + j, v_result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double *src_row = src + i * cols;\n        double *dst_row = dst + i * cols;\n        size_t j = 0;\n\n        for (; j + svcntd() <= cols; j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, cols);\n            svfloat64_t src_vec = svld1(pg, src_row + j);\n            svbool_t pg_gt = svcmpgt(pg, src_vec, svdup_f64(pg, threshold));\n            svfloat64_t scaled_vec = svmul_f64_z(pg, pg_gt, src_vec, svdup_f64(pg, scale));\n            svfloat64_t result_vec = svsel_f64(pg, scaled_vec, src_vec);\n            svst1(pg, dst_row + j, result_vec);\n        }\n\n        for (; j < cols; ++j) {\n            if (src_row[j] > threshold) {\n                dst_row[j] = src_row[j] * scale;\n            } else {\n                dst_row[j] = src_row[j];\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row_index = indices[i] * cols;\n        size_t dst_row_index = i * cols;\n        const double *src_row = src + src_row_index;\n        double *dst_row = dst + dst_row_index;\n\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, cols - j);\n            svfloat64_t vec = svld1(pg, src_row + j);\n            svst1(pg, dst_row + j, vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row_index = indices[i] * cols;\n        size_t dst_row_index = i * cols;\n\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, cols - j);\n            svfloat64_t vec = svld1_gather_index_f64(pg, src + src_row_index, svindex_u64(j, 1));\n            svst1_f64(pg, dst + dst_row_index + j, vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row_index = indices[i] * cols;\n        size_t dst_row_index = i * cols;\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, cols - j);\n            svfloat64_t vec = svld1_gather_index_f64(pg, src + src_row_index, j);\n            svst1_scatter_index_f64(pg, dst + dst_row_index, j, vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row = indices[i];\n        const double *src_row_ptr = src + src_row * cols;\n        double *dst_row_ptr = dst + i * cols;\n\n        size_t j = 0;\n        for (; j <= cols - svcntd(); j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, cols);\n            svfloat64_t vec = svld1(pg, src_row_ptr + j);\n            svst1(pg, dst_row_ptr + j, vec);\n        }\n\n        for (; j < cols; ++j) {\n            dst_row_ptr[j] = src_row_ptr[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row = indices[i];\n        const double *src_row_ptr = src + src_row * cols;\n        double *dst_row_ptr = dst + i * cols;\n\n        size_t j = 0;\n        for (; j <= cols - svcntd(); j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, cols);\n            svfloat64_t vec = svld1(pg, src_row_ptr + j);\n            svst1(pg, dst_row_ptr + j, vec);\n        }\n\n        for (; j < cols; ++j) {\n            dst_row_ptr[j] = src_row_ptr[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b64(i, length);\n\n    while (svptest_any(svptrue_b64(), pg)) {\n        svint64_t v_src1 = svld1(pg, src1 + i);\n        svint64_t v_src2 = svld1(pg, src2 + i);\n        svint64_t v_result = svadd_x(pg, v_src1, v_src2);\n        v_result = svadd_x(pg, v_result, scalar);\n        v_result = svasr_x(pg, v_result, 1);\n        svst1(pg, dst + i, v_result);\n\n        i += svcntp_b64(pg, pg);\n        pg = svwhilelt_b64(i, length);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n    svint64_t scalar_vec = svdup_s64(scalar);\n    svint64_t two_vec = svdup_s64(2);\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svint64_t vec1 = svld1(pg, src1 + i);\n        svint64_t vec2 = svld1(pg, src2 + i);\n        svint64_t result = svadd_x(pg, vec1, vec2);\n        result = svadd_x(pg, result, scalar_vec);\n        result = svdiv_x(pg, result, two_vec);\n        svst1(pg, dst + i, result);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b64(i, length);\n        svint64_t vec1 = svld1(pg, src1 + i);\n        svint64_t vec2 = svld1(pg, src2 + i);\n        svint64_t result = svadd_x(pg, vec1, vec2);\n        result = svadd_x(pg, result, scalar_vec);\n        result = svdiv_x(pg, result, two_vec);\n        svst1(pg, dst + i, result);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svint64_t v_src1 = svld1(pg, src1 + i);\n        svint64_t v_src2 = svld1(pg, src2 + i);\n        svint64_t v_result = svadd_x(pg, v_src1, v_src2);\n        v_result = svadd_x(pg, v_result, svdup_s64(scalar));\n        v_result = svasr_x(pg, v_result, svdup_s64(1));\n        svst1(pg, dst + i, v_result);\n    }\n\n    if (i < length) {\n        svbool_t pg_tail = svwhilelt_b64(i, length);\n        svint64_t v_src1 = svld1(pg_tail, src1 + i);\n        svint64_t v_src2 = svld1(pg_tail, src2 + i);\n        svint64_t v_result = svadd_x(pg_tail, v_src1, v_src2);\n        v_result = svadd_x(pg_tail, v_result, svdup_s64(scalar));\n        v_result = svasr_x(pg_tail, v_result, svdup_s64(1));\n        svst1(pg_tail, dst + i, v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svint64_t v_src1 = svld1(pg, src1 + i);\n        svint64_t v_src2 = svld1(pg, src2 + i);\n        svint64_t v_result = svadd_x(pg, svadd_x(pg, v_src1, v_src2), scalar);\n        v_result = svasr_x(pg, v_result, 1);\n        svst1(pg, dst + i, v_result);\n    }\n\n    if (i < length) {\n        svbool_t pg_tail = svwhilelt_b64(i, length);\n        svint64_t v_src1 = svld1(pg_tail, src1 + i);\n        svint64_t v_src2 = svld1(pg_tail, src2 + i);\n        svint64_t v_result = svadd_x(pg_tail, svadd_x(pg_tail, v_src1, v_src2), scalar);\n        v_result = svasr_x(pg_tail, v_result, 1);\n        svst1(pg_tail, dst + i, v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svint64_t v_src1 = svld1(pg, src1 + i);\n        svint64_t v_src2 = svld1(pg, src2 + i);\n        svint64_t v_result = svadd_x(pg, v_src1, v_src2);\n        v_result = svadd_x(pg, v_result, scalar);\n        v_result = svasr_x(pg, v_result, 1);\n        svst1(pg, dst + i, v_result);\n    }\n\n    if (i < length) {\n        svbool_t pg_tail = svwhilelt_b64(i, length);\n        svint64_t v_src1 = svld1(pg_tail, src1 + i);\n        svint64_t v_src2 = svld1(pg_tail, src2 + i);\n        svint64_t v_result = svadd_x(pg_tail, v_src1, v_src2);\n        v_result = svadd_x(pg_tail, v_result, scalar);\n        v_result = svasr_x(pg_tail, v_result, 1);\n        svst1(pg_tail, dst + i, v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int32_t min_val = INT32_MAX;\n    svbool_t pg = svptrue_b32();\n    size_t i = 0;\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t vec = svld1(pg, src + i);\n        svbool_t even_mask = svptrue_b32() & svcmpeq(svptrue_b32(), svand_n_u32(svptrue_b32(), vec, 1), 0);\n        svint32_t even_elements = svsel(even_mask, vec, svdup_n_s32(INT32_MAX));\n        min_val = svminv(pg, svmin(pg, svdup_n_s32(min_val), even_elements));\n    }\n\n    for (; i < length; i += 2) {\n        if (src[i] < min_val) {\n            min_val = src[i];\n        }\n    }\n\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int min_val = INT_MAX;\n    svbool_t pg = svptrue_b32();\n    svint32_t min_vec = svdup_s32(min_val);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t vec = svld1(pg, src + i);\n        svbool_t even_mask = svptrue_b32() & svcmpge(svptrue_b32(), svand_n_u32(svptrue_b32(), vec, 1), svdup_n_u32(0));\n\n        svint32_t even_vec = svsel_s32(even_mask, vec, svdup_s32(INT_MAX));\n        min_vec = svmin_s32(min_vec, even_vec);\n    }\n\n    min_val = svminv_s32(svptrue_b32(), min_vec);\n\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int32_t min_val = INT32_MAX;\n    svbool_t pg = svptrue_b32();\n    size_t i = 0;\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint32_t vec = svld1(pg, src + i);\n        svbool_t even_mask = svptrue_b32() & svcmpge(svptrue_b32(), svindex_u32(i, 1), svdup_u32(1));\n        svint32_t even_elements = svsel(even_mask, vec, svdup_s32(INT32_MAX));\n        min_val = svminv(pg, svmin(pg, svdup_s32(min_val), even_elements));\n    }\n\n    if (i < length) {\n        svbool_t pg_tail = svwhilelt_b32(i, length);\n        svint32_t vec = svld1(pg_tail, src + i);\n        svbool_t even_mask = svptrue_b32() & svcmpge(svptrue_b32(), svindex_u32(i, 1), svdup_u32(1));\n        svint32_t even_elements = svsel(even_mask, vec, svdup_s32(INT32_MAX));\n        min_val = svminv(pg_tail, svmin(pg_tail, svdup_s32(min_val), even_elements));\n    }\n\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int32_t min_val = INT32_MAX;\n    svbool_t pg = svptrue_b32();\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svint32_t vec = svld1(pg, src + i);\n        svbool_t even_mask = svptrue_b32() & svcmpge(svindex_s32(0, 1), svdup_s32(0));\n\n        svint32_t even_elements = svsel(svptrue_b32(), vec, svdup_s32(INT32_MAX));\n        min_val = svminv(svptrue_b32(), svmin(svptrue_b32(), svdup_s32(min_val), even_elements));\n    }\n\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t min_val = svdup_n_s32(SV_INT32_MAX);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t vec = svld1(pg, src + i);\n        svbool_t even_pg = svptrue_b32() & svcmpge_n_s32(svcntw(), 2);\n\n        svint32_t even_vec = svsel_s32(even_pg, vec, svdup_n_s32(SV_INT32_MAX));\n        min_val = svmin_s32_z(pg, min_val, even_vec);\n    }\n\n    return svminv_s32(pg, min_val);\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    const int *src_end = src + length;\n    while (src < src_end) {\n        svbool_t pg = svwhilelt_b32(src, src_end);\n        svint32_t vec_src = svld1(pg, src);\n        svint32_t vec_arith_shift = svasr(pg, vec_src, shift);\n        svuint32_t vec_logical_shift = svlsr(pg, svreinterpret_u32(pg, vec_src), shift);\n        svint32_t vec_result = svadd(pg, vec_arith_shift, svreinterpret_s32(pg, vec_logical_shift));\n        svst1(pg, dst, vec_result);\n        src += svcntp_b32(pg, pg);\n        dst += svcntp_b32(pg, pg);\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svint32_t vec_src = svld1(pg, &src[i]);\n\n        svint32_t arith_shifted = svasr(pg, vec_src, shift);\n\n        svuint32_t vec_src_uint = svreinterpret_u32(vec_src);\n        svuint32_t log_shifted = svlsr(pg, vec_src_uint, shift);\n        svint32_t log_shifted_int = svreinterpret_s32(log_shifted);\n\n        svint32_t result = svadd(pg, arith_shifted, log_shifted_int);\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    const int *src_end = src + length;\n    while (src < src_end) {\n        svbool_t pg = svwhilelt_b32(src, src_end);\n        svint32_t v_src = svld1(pg, src);\n\n        svint32_t v_arith_shift = svasr_n_s32(pg, v_src, shift);\n\n        svuint32_t v_src_uint = svreinterpret_u32(v_src);\n        svuint32_t v_logical_shift = svlsr_n_u32(pg, v_src_uint, shift);\n        svint32_t v_logical_shift_int = svreinterpret_s32(v_logical_shift);\n\n        svint32_t v_result = svadd_s32(pg, v_arith_shift, v_logical_shift_int);\n\n        svst1(pg, dst, v_result);\n\n        src += svcntw();\n        dst += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    const int *src_end = src + length;\n    while (src < src_end) {\n        svbool_t pg = svwhilelt_b32(src, src_end);\n        svint32_t vec_src = svld1(pg, src);\n        svint32_t vec_arith_shift = svasr_n_s32(pg, vec_src, shift);\n        svuint32_t vec_logical_shift = svlsr_n_u32(pg, svreinterpret_u32(pg, vec_src), shift);\n        svint32_t vec_result = svadd_s32(pg, vec_arith_shift, svreinterpret_s32(pg, vec_logical_shift));\n        svst1(pg, dst, vec_result);\n        src += svcntp_b32(pg, pg);\n        dst += svcntp_b32(pg, pg);\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    const int *src_end = src + length;\n    while (src < src_end) {\n        svbool_t pg = svwhilelt_b32(src, src_end);\n        svint32_t src_vec = svld1(pg, src);\n\n        svint32_t arith_shifted = svasr_n_s32(pg, src_vec, shift);\n\n        svuint32_t src_vec_uint = svreinterpret_u32(src_vec);\n        svuint32_t logic_shifted = svlsr_n_u32(pg, src_vec_uint, shift);\n        svint32_t logic_shifted_int = svreinterpret_s32(logic_shifted);\n\n        svint32_t result = svadd_s32(pg, arith_shifted, logic_shifted_int);\n\n        svst1(pg, dst, result);\n\n        src += svcntp_b32(pg, pg);\n        dst += svcntp_b32(pg, pg);\n    }\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t n = rows * cols;\n    int64_t sum = 0;\n    const int *ptr = matrix;\n\n    while (n > 0) {\n        svbool_t pg = svwhilelt_b32(0, n);\n        svint32_t vec = svld1(pg, ptr);\n        svint64_t vec_sum = svaddv(pg, vec);\n        sum += svaddv(pg, vec_sum);\n        ptr += svcntw();\n        n -= svcntw();\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t num_elements = rows * cols;\n    const int *ptr = matrix;\n    int64_t sum = 0;\n\n    for (size_t i = 0; i < num_elements; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, num_elements);\n        svint32_t vec = svld1(pg, ptr + i);\n        sum += svaddv(pg, vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t num_elements = rows * cols;\n    const int *ptr = matrix;\n    int64_t sum = 0;\n\n    for (size_t i = 0; i < num_elements; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, num_elements);\n        svint32_t vec = svld1(pg, ptr + i);\n        sum += svaddv(pg, vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t n = rows * cols;\n    int64_t sum = 0;\n    const int *ptr = matrix;\n\n    while (n > 0) {\n        svbool_t pg = svwhilelt_b32(0, n);\n        svint32_t vec = svld1(pg, ptr);\n        svint64_t vec_sum = svaddv(pg, vec);\n        sum += svaddv(pg, vec_sum);\n        ptr += svcntp_b32(pg, pg);\n        n -= svcntp_b32(pg, pg);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t n = rows * cols;\n    int64_t sum = 0;\n    const int *ptr = matrix;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, ptr + i);\n        sum += svaddv(pg, vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t max_index = 0;\n    int8_t max_value = src[0];\n    size_t i = 0;\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec = svld1b(pg, src + i);\n        svint8_t max_vec = svdupb_s8(max_value);\n        svbool_t cmp = svcmpgt_b8(pg, vec, max_vec);\n\n        if (svptest_any(svptrue_b8(), cmp)) {\n            size_t index = i + svindex_first(cmp);\n            max_value = src[index];\n            max_index = index;\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t max_index = 0;\n    int8_t max_value = src[0];\n    size_t i = 0;\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec = svld1_s8(pg, src + i);\n        svint8_t max_vec = svdup_s8(max_value);\n        svbool_t cmp = svcmpge_s8(pg, vec, max_vec);\n\n        if (svptest_any(svptrue_b8(), cmp)) {\n            size_t index = svindex_s8(i, pg);\n            max_index = svaddv_s8(index, cmp);\n            max_value = svmaxv_s8(vec, cmp);\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t max_index = 0;\n    int8_t max_value = src[0];\n    size_t i = 0;\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec = svld1_s8(pg, src + i);\n        svint8_t max_vec = svdup_s8(max_value);\n        svbool_t cmp = svcmpge_s8(pg, vec, max_vec);\n\n        if (svptest_any(svptrue_b8(), cmp)) {\n            size_t index = svindex_s8(i, pg);\n            max_index = svaddv_s8(svptrue_b8(), index, cmp);\n            max_value = svmaxv_s8(cmp, vec);\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t max_index = 0;\n    int8_t max_value = src[0];\n    size_t i = 0;\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec = svld1b(pg, src + i);\n        svint8_t max_vec = svdupb_s8(max_value);\n        svbool_t cmp = svcmpgt_b8(pg, vec, max_vec);\n\n        if (svptest_any(svptrue_b8(), cmp)) {\n            size_t index = svindex_b8(i, cmp);\n            max_index = index;\n            max_value = svgetb_s8(vec, index);\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t max_index = 0;\n    int8_t max_value = src[0];\n    size_t i = 0;\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t v_src = svld1b(pg, src + i);\n        svint8_t v_max = svdupb_s8(max_value);\n        svbool_t pg_max = svcmpgt_b8(pg, v_src, v_max);\n\n        if (svptest_any(pg_max, pg_max)) {\n            size_t index = i + svindex_u8(pg_max, 0);\n            max_value = src[index];\n            max_index = index;\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t v_src1 = svld1(pg, src1 + i);\n        svuint16_t v_src2 = svld1(pg, src2 + i);\n        svuint16_t v_index = svindex_u16(i, 1);\n        svbool_t pg_mask = svcmpne_n_u16_z(pg, svand_x(pg, v_index, mask), 0);\n        svuint16_t v_dst = svsel(pg_mask, v_src1, v_src2);\n        svst1(pg, dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t v_src1 = svld1(pg, src1 + i);\n        svuint16_t v_src2 = svld1(pg, src2 + i);\n        svuint16_t v_index = svindex_u16(i, 1);\n        svbool_t pg_mask = svcmpne_n_u16_z(pg, svand_x(pg, v_index, mask), 0);\n        svuint16_t v_dst = svsel(pg_mask, v_src1, v_src2);\n        svst1(pg, dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t v_src1 = svld1(pg, &src1[i]);\n        svuint16_t v_src2 = svld1(pg, &src2[i]);\n        svuint16_t v_index = svindex_u16(i, 1);\n        svbool_t pg_mask = svcmpne_n_u16_z(pg, svand_n_u16_z(pg, v_index, mask), 0);\n        svuint16_t v_dst = svsel_u16(pg_mask, v_src1, v_src2);\n        svst1(pg, &dst[i], v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t v_src1 = svld1(pg, src1 + i);\n        svuint16_t v_src2 = svld1(pg, src2 + i);\n        svuint16_t v_index = svindex_u16(i, 1);\n        svbool_t pg_mask = svcmpne_n_u16_z(pg, svand_x(pg, v_index, svdup_n_u16(mask)), 0);\n        svuint16_t v_dst = svsel_u16(pg_mask, v_src1, v_src2);\n        svst1(pg, dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t v_src1 = svld1(pg, src1 + i);\n        svuint16_t v_src2 = svld1(pg, src2 + i);\n        svuint16_t v_index = svindex_u16(i, 1);\n        svbool_t pg_mask = svand_n_u16_z(pg, svptrue_b16(), v_index, mask);\n        svuint16_t v_dst = svsel_u16(pg_mask, v_src1, v_src2);\n        svst1(pg, dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec = svld1_u32(svptrue_b32(), src + i);\n        svuint32_t popcount = svcnt_u32(svptrue_b32(), vec);\n        svst1_u32(svptrue_b32(), dst + i, popcount);\n    }\n    for (; i < length; ++i) {\n        dst[i] = __builtin_popcount(src[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec = svld1(svptrue_b32(), src + i);\n        svuint32_t popcount = svcnt_u32(svptrue_b32(), vec);\n        svst1(svptrue_b32(), dst + i, popcount);\n    }\n    for (; i < length; ++i) {\n        dst[i] = __builtin_popcount(src[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec_src = svld1(svptrue_b32(), src + i);\n        svuint32_t vec_popcnt = svcnt(svptrue_b32(), vec_src);\n        svst1(svptrue_b32(), dst + i, vec_popcnt);\n    }\n    for (; i < length; ++i) {\n        dst[i] = __builtin_popcount(src[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec = svld1(svptrue_b32(), src + i);\n        svuint32_t popcount = svcnt_u32(svptrue_b32(), vec);\n        svst1(svptrue_b32(), dst + i, popcount);\n    }\n    for (; i < length; ++i) {\n        dst[i] = __builtin_popcount(src[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec = svld1(svptrue_b32(), src + i);\n        svuint32_t popcount = svcnt_u32(svptrue_b32(), vec);\n        svst1(svptrue_b32(), dst + i, popcount);\n    }\n    for (; i < length; ++i) {\n        dst[i] = __builtin_popcount(src[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint16_t v_src1 = svld1_u16(svptrue_b16(), src1 + i);\n        svuint16_t v_src2 = svld1_u16(svptrue_b16(), src2 + i);\n        svuint16_t v_dst = svqadd_u16(v_src1, v_src2);\n        svst1_u16(svptrue_b16(), dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (src1[i] + src2[i] > UINT16_MAX) ? UINT16_MAX : src1[i] + src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint16_t v_src1 = svld1_u16(svptrue_b16(), src1 + i);\n        svuint16_t v_src2 = svld1_u16(svptrue_b16(), src2 + i);\n        svuint16_t v_dst = svqadd_u16(v_src1, v_src2);\n        svst1_u16(svptrue_b16(), dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (src1[i] + src2[i] > UINT16_MAX) ? UINT16_MAX : src1[i] + src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint16_t v_src1 = svld1_u16(svptrue_b16(), src1 + i);\n        svuint16_t v_src2 = svld1_u16(svptrue_b16(), src2 + i);\n        svuint16_t v_dst = svqadd_u16(v_src1, v_src2);\n        svst1_u16(svptrue_b16(), dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = (src1[i] > UINT16_MAX - src2[i]) ? UINT16_MAX : src1[i] + src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint16_t v_src1 = svld1_u16(svptrue_b16(), src1 + i);\n        svuint16_t v_src2 = svld1_u16(svptrue_b16(), src2 + i);\n        svuint16_t v_dst = svqadd_u16(v_src1, v_src2);\n        svst1_u16(svptrue_b16(), dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = svqadd_n_u16(src1[i], src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint16_t v_src1 = svld1_u16(svptrue_b16(), src1 + i);\n        svuint16_t v_src2 = svld1_u16(svptrue_b16(), src2 + i);\n        svuint16_t v_dst = svqadd_u16(v_src1, v_src2);\n        svst1_u16(svptrue_b16(), dst + i, v_dst);\n    }\n    for (; i < length; ++i) {\n        dst[i] = svqadd_u16(svdup_u16(src1[i]), svdup_u16(src2[i]));\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t lower_bound = svdup_f64(-100.0);\n    svfloat64_t upper_bound = svdup_f64(100.0);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t acc = svdup_f64(0.0);\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svfloat64_t a = svld1_f64(pg, &A[i * n + k]);\n                svfloat64_t b = svld1_f64(pg, &B[k * p + j]);\n\n                svbool_t in_range_a = svcmpge_f64(pg, a, lower_bound) & svcmple_f64(pg, a, upper_bound);\n                svbool_t in_range_b = svcmpge_f64(pg, b, lower_bound) & svcmple_f64(pg, b, upper_bound);\n\n                svbool_t in_range = in_range_a & in_range_b;\n\n                a = svsel_f64(in_range, a, svdup_f64(0.0));\n                b = svsel_f64(in_range, b, svdup_f64(0.0));\n\n                acc = svmla_f64_m(pg, acc, a, b);\n            }\n            svst1_f64(pg, &C[i * p + j], acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svbool_t pg = svwhilelt_b64(k, n);\n                svfloat64_t a = svld1_f64(pg, &A[i * n + k]);\n                svfloat64_t b = svld1_f64(pg, &B[k * p + j]);\n                svbool_t in_range = svand_z(pg, svcmplt_z(pg, a, svdup_f64(100.0)), svcmpge_z(pg, a, svdup_f64(-100.0)));\n                in_range = svand_z(pg, in_range, svand_z(pg, svcmplt_z(pg, b, svdup_f64(100.0)), svcmpge_z(pg, b, svdup_f64(-100.0))));\n                svfloat64_t prod = svmul_z(pg, a, b);\n                sum = svadd_z(pg, sum, prod);\n            }\n            svst1_f64(svptrue_b64(), &C[i * p + j], sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t lower_bound = svdup_f64(-100.0);\n    svfloat64_t upper_bound = svdup_f64(100.0);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t acc = svdup_f64(0.0);\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svfloat64_t a = svld1_f64(pg, &A[i * n + k]);\n                svfloat64_t b = svld1_f64(pg, &B[k * p + j]);\n\n                svbool_t in_range_a = svcmpge_f64(pg, a, lower_bound) & svcmple_f64(pg, a, upper_bound);\n                svbool_t in_range_b = svcmpge_f64(pg, b, lower_bound) & svcmple_f64(pg, b, upper_bound);\n\n                svbool_t in_range = in_range_a & in_range_b;\n\n                a = svsel_f64(in_range, a, svdup_f64(0.0));\n                b = svsel_f64(in_range, b, svdup_f64(0.0));\n\n                acc = svmla_f64_m(pg, acc, a, b);\n            }\n            svst1_f64(pg, &C[i * p + j], acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            svbool_t pg = svptrue_b64();\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svfloat64_t vec_a = svld1(pg, &A[i * n + k]);\n                svfloat64_t vec_b = svld1(pg, &B[k * p + j]);\n                svbool_t in_range_a = svcmpge(pg, vec_a, svdup_f64(-100.0)) & svcmple(pg, vec_a, svdup_f64(100.0));\n                svbool_t in_range_b = svcmpge(pg, vec_b, svdup_f64(-100.0)) & svcmple(pg, vec_b, svdup_f64(100.0));\n                svbool_t in_range = in_range_a & in_range_b;\n                svfloat64_t prod = svmul_z(pg, in_range, vec_a, vec_b);\n                sum += svaddv(pg, prod);\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t c = svdup_f64(0.0);\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svbool_t pg = svwhilelt_b64(k, n);\n                svfloat64_t a = svld1_f64(pg, &A[i * n + k]);\n                svfloat64_t b = svld1_f64(pg, &B[k * p + j]);\n                svbool_t pg_in_range = svand_b_z(pg, svcmpeq_b64(svabs_f64_z(pg, a), svdup_f64(100.0)));\n                pg_in_range = svand_b_z(pg_in_range, svcmpeq_b64(svabs_f64_z(pg, b), svdup_f64(100.0)));\n                c = svadd_f64_z(pg_in_range, c, svmul_f64_z(pg_in_range, a, b));\n            }\n            C[i * p + j] = svaddv_f64(svptrue_b64(), c);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, total_elements);\n        svint64_t vec_a = svld1(pg, &A[i]);\n        svint64_t vec_b = svld1(pg, &B[i]);\n        svint64_t vec_c = svadd_x(pg, vec_a, vec_b);\n        svst1(pg, &C[i], vec_c);\n    }\n\n    for (; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, total_elements);\n        svint64_t vec_a = svld1(pg, &A[i]);\n        svint64_t vec_b = svld1(pg, &B[i]);\n        svint64_t vec_c = svadd_x(pg, vec_a, vec_b);\n        svst1(pg, &C[i], vec_c);\n    }\n\n    for (; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, total_elements);\n        svint64_t vec_a = svld1(pg, &A[i]);\n        svint64_t vec_b = svld1(pg, &B[i]);\n        svint64_t vec_c = svadd_x(pg, vec_a, vec_b);\n        svst1(pg, &C[i], vec_c);\n    }\n\n    for (; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntd(); i += svcntd()) {\n        svint64_t vec_a = svld1(svptrue_b64(), A + i);\n        svint64_t vec_b = svld1(svptrue_b64(), B + i);\n        svint64_t vec_c = svadd_z(svptrue_b64(), vec_a, vec_b);\n        svst1(svptrue_b64(), C + i, vec_c);\n    }\n\n    for (; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, total_elements);\n        svint64_t vec_a = svld1(pg, &A[i]);\n        svint64_t vec_b = svld1(pg, &B[i]);\n        svint64_t vec_c = svadd_x(pg, vec_a, vec_b);\n        svst1(pg, &C[i], vec_c);\n    }\n\n    for (; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n        svfloat32_t v_sum = svadd_z(pg, v_src1, v_src2);\n        svfloat32_t v_rounded = svrintn_z(pg, v_sum);\n        svst1(pg, &dst[i], v_rounded);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n        svfloat32_t v_sum = svadd_z(pg, v_src1, v_src2);\n        svfloat32_t v_rounded = svrintn_z(pg, v_sum);\n        svst1(pg, &dst[i], v_rounded);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t v_src1 = svld1(svptrue_b32(), src1 + i);\n        svfloat32_t v_src2 = svld1(svptrue_b32(), src2 + i);\n        svfloat32_t v_sum = svadd_z(svptrue_b32(), v_src1, v_src2);\n        svfloat32_t v_rounded = svrintn_z(svptrue_b32(), v_sum);\n        svst1(svptrue_b32(), dst + i, v_rounded);\n    }\n\n    for (; i < length; ++i) {\n        dst[i] = nearbyintf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t v1 = svld1(pg, src1 + i);\n        svfloat32_t v2 = svld1(pg, src2 + i);\n        svfloat32_t vsum = svadd_z(pg, v1, v2);\n        svfloat32_t vround = svrintn_z(pg, vsum);\n        svst1(pg, dst + i, vround);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        svfloat32_t v1 = svld1(pg, src1 + i);\n        svfloat32_t v2 = svld1(pg, src2 + i);\n        svfloat32_t vsum = svadd_z(pg, v1, v2);\n        svfloat32_t vround = svrintn_z(pg, vsum);\n        svst1(pg, dst + i, vround);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t v_src1 = svld1(svptrue_b32(), src1 + i);\n        svfloat32_t v_src2 = svld1(svptrue_b32(), src2 + i);\n        svfloat32_t v_sum = svadd_z(svptrue_b32(), v_src1, v_src2);\n        svfloat32_t v_rounded = svrintn_z(svptrue_b32(), v_sum);\n        svst1(svptrue_b32(), dst + i, v_rounded);\n    }\n\n    for (; i < length; ++i) {\n        dst[i] = nearbyintf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t v1 = svld1(pg, &src1[i]);\n        svfloat32_t v2 = svld1(pg, &src2[i]);\n        svfloat32_t vsum = svadd_z(pg, v1, v2);\n        svfloat32_t vround = svrintn_z(pg, vsum);\n        svst1(pg, &dst[i], vround);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        svfloat32_t v1 = svld1(pg, &src1[i]);\n        svfloat32_t v2 = svld1(pg, &src2[i]);\n        svfloat32_t vsum = svadd_z(pg, v1, v2);\n        svfloat32_t vround = svrintn_z(pg, vsum);\n        svst1(pg, &dst[i], vround);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    const float threshold = 50.0f;\n    const float neg_one = -1.0f;\n    const float one = 1.0f;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n\n        svfloat32_t v_diff = svabs_f32_z(pg, svsub_f32_z(pg, v_src1, v_src2));\n        svbool_t pg_cond = svcmplt_n_f32(pg, v_diff, threshold);\n\n        svuint32_t v_idx = svindex_u32(i, 1);\n        svbool_t pg_multiple_of_two = svcmpeq_n_u32(svand_u32_z(pg, v_idx, 1), 0);\n\n        svbool_t pg_final = svand_b_z(pg, pg_cond, pg_multiple_of_two);\n\n        svfloat32_t v_mul = svmul_f32_z(pg, v_src1, v_src2);\n        svfloat32_t v_rounded = svrintp_f32_z(pg, v_mul);\n\n        svfloat32_t v_result = svsel_f32(svptrue_b32(), v_rounded, svdup_f32(neg_one));\n\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    const float threshold = 50.0f;\n    const float neg_one = -1.0f;\n    const float one = 1.0f;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n\n        svfloat32_t v_diff = svabs_f32_z(pg, svsub_f32_z(pg, v_src1, v_src2));\n        svbool_t pg_cond = svcmplt_n_f32(pg, v_diff, threshold);\n\n        svuint32_t v_idx = svindex_u32(i, svcntw());\n        svbool_t pg_multiple_of_2 = svcmpeq_n_u32(svand_u32_z(pg, v_idx, 1), 0);\n\n        svbool_t pg_final = svand_b_z(pg, pg_cond, pg_multiple_of_2);\n\n        svfloat32_t v_mul = svmul_f32_z(pg, v_src1, v_src2);\n        svfloat32_t v_rounded = svrintp_f32_z(pg, v_mul);\n\n        svfloat32_t v_result = svsel_f32(svptrue_b32(), v_rounded, svdup_f32(neg_one));\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    const float threshold = 50.0f;\n    const float neg_one = -1.0f;\n    const float one = 1.0f;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n\n        svfloat32_t v_diff = svabs_f32_z(pg, svsub_f32_z(pg, v_src1, v_src2));\n        svbool_t pg_cond = svcmplt_n_f32(pg, v_diff, threshold);\n\n        svuint32_t v_indices = svindex_u32(i, pg);\n        svbool_t pg_even = svcmpeq_n_u32(svand_u32_z(pg, v_indices, 1), 0);\n\n        svbool_t pg_final = svand_b_z(pg, pg_cond, pg_even);\n\n        svfloat32_t v_mul = svmul_f32_z(pg_final, v_src1, v_src2);\n        svfloat32_t v_round_up = svrintp_f32_z(pg_final, v_mul);\n\n        svfloat32_t v_result = svsel_f32(svptrue_b32(), v_round_up, svdup_f32(neg_one));\n\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    const float threshold = 50.0f;\n    const float neg_one = -1.0f;\n    const float one = 1.0f;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n\n        svfloat32_t v_diff = svabs_f32_z(pg, svsub_f32_z(pg, v_src1, v_src2));\n        svbool_t pg_cond = svcmplt_n_f32(pg, v_diff, threshold);\n\n        svuint32_t v_indices = svindex_u32(i, 1);\n        svbool_t pg_even = svcmpeq_n_u32(svand_u32_z(pg, v_indices, 1), 0);\n\n        svbool_t pg_final = svand_b_z(pg, pg_cond, pg_even);\n\n        svfloat32_t v_mul = svmul_f32_z(pg, v_src1, v_src2);\n        svfloat32_t v_rounded = svrintp_f32_z(pg, v_mul);\n\n        svfloat32_t v_result = svsel_f32(svptrue_b32(), v_rounded, svdup_f32(neg_one));\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    const float threshold = 50.0f;\n    const float neg_one = -1.0f;\n    const float one = 1.0f;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n\n        svfloat32_t v_diff = svabs_f32_z(pg, svsub_f32_z(pg, v_src1, v_src2));\n        svbool_t pg_threshold = svcmplt_n_f32(pg, v_diff, threshold);\n\n        svuint32_t v_indices = svindex_u32(i, pg);\n        svbool_t pg_even = svcmpeq_n_u32(svand_u32_z(pg, v_indices, 1), 0);\n\n        svbool_t pg_valid = svand_b_z(pg, pg_threshold, pg_even);\n\n        svfloat32_t v_mul = svmul_f32_z(pg_valid, v_src1, v_src2);\n        svfloat32_t v_rounded = svrintp_f32_z(pg_valid, v_mul);\n\n        svfloat32_t v_result = svsel_f32(svptrue_b32(), v_rounded, svdup_f32(neg_one));\n\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t num_elements = m * n;\n    size_t i = 0;\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t vec_scalar = svdup_f64_z(pg, scalar);\n\n    for (; i <= num_elements - svcntd(); i += svcntd()) {\n        svfloat64_t vec_mat = svld1_f64(pg, &mat[i]);\n        svfloat64_t vec_result = svmul_f64_z(pg, vec_mat, vec_scalar);\n        svst1_f64(pg, &dst[i], vec_result);\n    }\n\n    for (; i < num_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t num_elements = m * n;\n    size_t i = 0;\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t vec_scalar = svdup_f64_z(pg, scalar);\n\n    for (; i <= num_elements - svcntd(); i += svcntd()) {\n        svfloat64_t vec_mat = svld1_f64(pg, &mat[i]);\n        svfloat64_t vec_result = svmul_f64_z(pg, vec_mat, vec_scalar);\n        svst1_f64(pg, &dst[i], vec_result);\n    }\n\n    for (; i < num_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t size = m * n;\n    size_t i = 0;\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t scalar_vec = svdup_f64_z(pg, scalar);\n\n    for (; i <= size - svcntd(); i += svcntd()) {\n        svfloat64_t mat_vec = svld1_f64(pg, &mat[i]);\n        svfloat64_t result_vec = svmul_f64_z(pg, mat_vec, scalar_vec);\n        svst1_f64(pg, &dst[i], result_vec);\n    }\n\n    for (; i < size; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t num_elements = m * n;\n    size_t i = 0;\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t vec_scalar = svdup_f64_z(pg, scalar);\n\n    for (; i <= num_elements - svcntd(); i += svcntd()) {\n        svfloat64_t vec_mat = svld1_f64(pg, mat + i);\n        svfloat64_t vec_result = svmul_f64_z(pg, vec_mat, vec_scalar);\n        svst1_f64(pg, dst + i, vec_result);\n    }\n\n    for (; i < num_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t i = 0;\n    size_t num_elements = m * n;\n    svbool_t pg = svptrue_b64();\n\n    svfloat64_t scalar_vec = svdup_f64_z(pg, scalar);\n\n    for (; i <= num_elements - svcntd(); i += svcntd()) {\n        svfloat64_t mat_vec = svld1_f64(pg, &mat[i]);\n        svfloat64_t result_vec = svmul_f64_z(pg, mat_vec, scalar_vec);\n        svst1_f64(pg, &dst[i], result_vec);\n    }\n\n    for (; i < num_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float* row = mat + i * n;\n        svfloat32_t sum_squares = svdup_f32(0.0f);\n        svbool_t pg = svwhilelt_b32(0, n);\n\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg_j = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1_f32(pg_j, row + j);\n            sum_squares = svadd_f32_z(pg_j, sum_squares, svmul_f32_z(pg_j, vec, vec));\n        }\n\n        float row_sum = svaddv_f32(pg, sum_squares);\n        float norm = sqrtf(row_sum);\n\n        svfloat32_t inv_norm = svdup_f32(1.0f / norm);\n\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg_j = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1_f32(pg_j, row + j);\n            vec = svmul_f32_z(pg_j, vec, inv_norm);\n            svst1_f32(pg_j, row + j, vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float* row = mat + i * n;\n        svfloat32_t sum_of_squares = svdup_f32(0.0f);\n        svbool_t pg = svwhilelt_b32(0, n);\n\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1(pg, row + j);\n            sum_of_squares = svmla_f32_z(pg, sum_of_squares, vec, vec);\n        }\n\n        float row_sum = svaddv_f32(svptrue_b32(), sum_of_squares);\n        float norm = sqrtf(row_sum);\n\n        svfloat32_t norm_vec = svdup_f32(norm);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1(pg, row + j);\n            vec = svdiv_f32_z(pg, vec, norm_vec);\n            svst1(pg, row + j, vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float* row = mat + i * n;\n        float32xn_t vec_row = svld1_f32(svptrue_b32(), row);\n        float32xn_t vec_sq = svmul_xn_f32(svptrue_b32(), vec_row, vec_row);\n        float sum_sq = svaddv_f32(svptrue_b32(), vec_sq);\n        float norm = sqrtf(sum_sq);\n        float32xn_t vec_norm = svdup_n_f32(norm);\n        float32xn_t vec_normalized = svdiv_xn_f32(svptrue_b32(), vec_row, vec_norm);\n        svst1_f32(svptrue_b32(), row, vec_normalized);\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float* row = mat + i * n;\n        svfloat32_t sum_squares = svdup_f32(0.0f);\n        svbool_t pg = svwhilelt_b32(0, n);\n\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg_j = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1_f32(pg_j, row + j);\n            sum_squares = svadd_f32_z(pg_j, sum_squares, svmul_f32_z(pg_j, vec, vec));\n        }\n\n        float row_sum = svaddv_f32(pg, sum_squares);\n        float norm = sqrtf(row_sum);\n\n        svfloat32_t inv_norm = svdup_f32(1.0f / norm);\n\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg_j = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1_f32(pg_j, row + j);\n            vec = svmul_f32_z(pg_j, vec, inv_norm);\n            svst1_f32(pg_j, row + j, vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float* row = mat + i * n;\n        svfloat32_t sum_squares = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1(pg, row + j);\n            sum_squares = svadd_f32_z(pg, sum_squares, svmul_f32_z(pg, vec, vec));\n        }\n        float sum = svaddv_f32(svptrue_b32(), sum_squares);\n        float norm = sqrtf(sum);\n        svfloat32_t inv_norm = svdup_f32(1.0f / norm);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t vec = svld1(pg, row + j);\n            vec = svmul_f32_z(pg, vec, inv_norm);\n            svst1(pg, row + j, vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t acc = svdup_f64(0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a = svld1_f64(svptrue_b64(), &mat1[i * n + k]);\n                svfloat64_t b = svld1_f64(svptrue_b64(), &mat2[k * p + j]);\n                acc = svmla_f64_z(svptrue_b64(), acc, a, b);\n            }\n            svfloat64_t rounded = svrintn_f64_z(svptrue_b64(), acc);\n            svst1_f64(svptrue_b64(), &dst[i * p + j], rounded);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t acc = svdup_f64(0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a = svld1_f64(svptrue_b64(), &mat1[i * n + k]);\n                svfloat64_t b = svld1_f64(svptrue_b64(), &mat2[k * p + j]);\n                acc = svmla_f64_z(svptrue_b64(), acc, a, b);\n            }\n            svfloat64_t rounded = svrintn_f64_z(svptrue_b64(), acc);\n            svst1_f64(svptrue_b64(), &dst[i * p + j], rounded);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t acc = svdup_f64(0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a = svld1_f64(svptrue_b64(), &mat1[i * n + k]);\n                svfloat64_t b = svld1_f64(svptrue_b64(), &mat2[k * p + j]);\n                acc = svmla_f64_z(svptrue_b64(), acc, a, b);\n            }\n            svfloat64_t rounded = svrintn_f64_z(svptrue_b64(), acc);\n            svst1_f64(svptrue_b64(), &dst[i * p + j], rounded);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t acc = svdup_f64(0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a = svld1_f64(svptrue_b64(), &mat1[i * n + k]);\n                svfloat64_t b = svld1_f64(svptrue_b64(), &mat2[k * p + j]);\n                acc = svmla_f64_z(svptrue_b64(), acc, a, b);\n            }\n            svfloat64_t rounded = svrintn_f64_z(svptrue_b64(), acc);\n            svst1_f64(svptrue_b64(), &dst[i * p + j], rounded);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t acc = svdup_f64(0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a = svld1_f64(svptrue_b64(), &mat1[i * n + k]);\n                svfloat64_t b = svld1_f64(svptrue_b64(), &mat2[k * p + j]);\n                acc = svmla_f64_z(svptrue_b64(), acc, a, b);\n            }\n            svfloat64_t rounded = svrintn_f64_z(svptrue_b64(), acc);\n            svst1_f64(svptrue_b64(), &dst[i * p + j], rounded);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntw()) {\n            size_t vl = svcntw();\n            svfloat32_t vec = svld1(svptrue_b32(), &src[i * cols + j]);\n            vec = svmul_x(svptrue_b32(), vec, 4.0f);\n            vec = svrintz(svptrue_b32(), vec);\n            vec = svmul_x(svptrue_b32(), vec, 0.25f);\n            svst1(svptrue_b32(), &dst[j * rows + i], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svfloat32_t vec = svld1(pg, &src[i * cols + j]);\n            vec = svmul_x(pg, vec, 4.0f);\n            vec = svrintz(pg, vec);\n            vec = svmul_x(pg, vec, 0.25f);\n            svst1(pg, &dst[j * rows + i], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svfloat32_t vec = svld1(pg, &src[i * cols + j]);\n            vec = svmul_n_f32(vec, 4.0f);\n            vec = svrintz_f32(vec);\n            vec = svmul_n_f32(vec, 0.25f);\n            svst1(pg, &dst[j * rows + i], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svfloat32_t vec = svld1(pg, &src[i * cols + j]);\n            vec = svrnda(vec, 2);\n            svst1(pg, &dst[j * rows + i], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svfloat32_t vec = svld1(pg, &src[i * cols + j]);\n            vec = svmul_x(pg, vec, svdup_f32(4.0f));\n            vec = svrintz(pg, vec);\n            vec = svmul_x(pg, vec, svdup_f32(0.25f));\n            svst1(pg, &dst[j * rows + i], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svfloat32_t v1 = svld1(svptrue_b32(), tensor1 + i);\n        svfloat32_t v2 = svld1(svptrue_b32(), tensor2 + i);\n        svfloat32_t v_sub = svsub(v1, v2);\n        svfloat32_t v_round = svrintz(v_sub);\n        svst1(svptrue_b32(), dst + i, v_round);\n    }\n\n    for (; i < total_elements; ++i) {\n        dst[i] = rintf(tensor1[i] - tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t size = dim1 * dim2 * dim3;\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t v1 = svld1(pg, &tensor1[i]);\n        svfloat32_t v2 = svld1(pg, &tensor2[i]);\n        svfloat32_t v_sub = svsub(pg, v1, v2);\n        svfloat32_t v_round = svrintz(pg, v_sub);\n        svst1(pg, &dst[i], v_round);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t v1 = svld1_f32(svptrue_b32(), tensor1 + i);\n        svfloat32_t v2 = svld1_f32(svptrue_b32(), tensor2 + i);\n        svfloat32_t v_sub = svsub_f32_z(svptrue_b32(), v1, v2);\n        svfloat32_t v_round = svrintz_f32_z(svptrue_b32(), v_sub);\n        svst1_f32(svptrue_b32(), dst + i, v_round);\n    }\n\n    for (; i < size; ++i) {\n        dst[i] = rintf(tensor1[i] - tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svfloat32_t v1 = svld1(svptrue_b32(), tensor1 + i);\n        svfloat32_t v2 = svld1(svptrue_b32(), tensor2 + i);\n        svfloat32_t v_sub = svsub(v1, v2);\n        svfloat32_t v_round = svrintz(v_sub);\n        svst1(svptrue_b32(), dst + i, v_round);\n    }\n\n    for (; i < total_elements; ++i) {\n        dst[i] = rintf(tensor1[i] - tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t v1 = svld1_f32(svptrue_b32(), tensor1 + i);\n        svfloat32_t v2 = svld1_f32(svptrue_b32(), tensor2 + i);\n        svfloat32_t v_sub = svsub_f32_z(svptrue_b32(), v1, v2);\n        svfloat32_t v_round = svrintz_f32_z(svptrue_b32(), v_sub);\n        svst1_f32(svptrue_b32(), dst + i, v_round);\n    }\n\n    for (; i < size; ++i) {\n        dst[i] = rintf(tensor1[i] - tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j += svcntd()) {\n            svbool_t pg = svwhilelt_b64(j, n);\n            svfloat64_t vec1 = svld1(pg, &mat1[i * n + j]);\n            svfloat64_t vec2 = svld1(pg, &mat2[i * n + j]);\n            svfloat64_t result = svmul_x(pg, vec1, vec2);\n            svst1(pg, &dst[i * n + j], result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i;\n    for (i = 0; i < m * n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, m * n);\n        svfloat64_t v1 = svld1_gather_s64(pg, mat1 + i);\n        svfloat64_t v2 = svld1_gather_s64(pg, mat2 + i);\n        svfloat64_t v3 = svmul_x(pg, v1, v2);\n        svst1_gather_s64(pg, dst + i, v3);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i;\n    for (i = 0; i < m * n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, m * n);\n        svfloat64_t v1 = svld1_gather_s64(pg, mat1 + i);\n        svfloat64_t v2 = svld1_gather_s64(pg, mat2 + i);\n        svfloat64_t v3 = svmul_s64_z(pg, v1, v2);\n        svst1_gather_s64(pg, dst + i, v3);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i;\n    for (i = 0; i < m * n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, m * n);\n        svfloat64_t v1 = svld1(pg, &mat1[i]);\n        svfloat64_t v2 = svld1(pg, &mat2[i]);\n        svfloat64_t v3 = svmul_x(pg, v1, v2);\n        svst1(pg, &dst[i], v3);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i;\n    for (i = 0; i < m * n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, m * n);\n        svfloat64_t v1 = svld1(pg, &mat1[i]);\n        svfloat64_t v2 = svld1(pg, &mat2[i]);\n        svfloat64_t v3 = svmul_x(pg, v1, v2);\n        svst1(pg, &dst[i], v3);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t sum = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t a = svld1(pg, &mat[i * n + j]);\n            svfloat32_t b = svld1(pg, &vec[j]);\n            sum = svmad_x(pg, a, b, sum);\n        }\n        svfloat32_t result = svaddv(pg, sum);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        const float* row = mat + i * n;\n        svfloat32_t acc = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t a = svld1_f32(pg, row + j);\n            svfloat32_t b = svld1_f32(pg, vec + j);\n            acc = svmla_f32_m(pg, acc, a, b);\n        }\n        dst[i] = svaddv_f32(svptrue_b32(), acc);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t acc = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t a = svld1_f32(pg, &mat[i * n + j]);\n            svfloat32_t b = svld1_f32(pg, &vec[j]);\n            acc = svmla_f32_z(pg, acc, a, b);\n        }\n        svfloat32_t sum = svaddv_f32(svptrue_b32(), acc);\n        dst[i] = svget_f32(svptrue_b32(), sum, 0);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t sum = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; ++j) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t a = svld1_f32(pg, &mat[i * n + j]);\n            svfloat32_t b = svld1_f32(pg, &vec[j]);\n            sum = svmla_f32_z(pg, sum, a, b);\n        }\n        svst1_f32(svptrue_b32(), &dst[i], sum);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t sum = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, n);\n            svfloat32_t a = svld1_f32(pg, &mat[i * n + j]);\n            svfloat32_t b = svld1_f32(pg, &vec[j]);\n            sum = svmla_f32_x(pg, sum, a, b);\n        }\n        dst[i] = svaddv_f32(svptrue_b32(), sum);\n    }\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n    size_t i = 0;\n\n    while (i < total_elements) {\n        svbool_t pg = svwhilelt_b64(i, total_elements);\n        svfloat64_t vec = svld1_gather_s64(pg, mat + i, i);\n        sum += svaddv_s64(pg, vec);\n        i += svcntd();\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t num_elements = m * n;\n    double sum = 0.0;\n\n    for (size_t i = 0; i < num_elements; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, num_elements);\n        svfloat64_t vec = svld1(pg, &mat[i]);\n        sum += svaddv(pg, vec);\n    }\n\n    return sum / num_elements;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n    size_t i = 0;\n\n    while (i < total_elements) {\n        svbool_t pg = svwhilelt_b64(i, total_elements);\n        svfloat64_t vec = svld1_gather_s64(pg, mat + i);\n        sum += svaddv_s64(pg, vec);\n        i += svcntd();\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t num_elements = m * n;\n    double sum = 0.0;\n\n    for (size_t i = 0; i < num_elements; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, num_elements);\n        svfloat64_t vec = svld1(pg, &mat[i]);\n        sum += svaddv(pg, vec);\n    }\n\n    return sum / num_elements;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t num_elements = m * n;\n    double sum = 0.0;\n\n    for (size_t i = 0; i < num_elements; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, num_elements);\n        svfloat64_t vec = svld1_f64(pg, mat + i);\n        sum += svaddv_f64(pg, vec);\n    }\n\n    return sum / num_elements;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool ascending = directions[i];\n        bool sorted = true;\n        size_t j = 0;\n\n        while (j < cols) {\n            size_t vl = svcntw();\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svint32_t vec = svld1(pg, row + j);\n\n            svint32_t vec_next = svld1(pg, row + j + 1);\n            svbool_t cmp = ascending ? svcmplt_s32(pg, vec, vec_next) : svcmpgt_s32(pg, vec, vec_next);\n\n            if (!svptest_any(svptrue_b32(), cmp)) {\n                sorted = false;\n                break;\n            }\n\n            j += vl;\n        }\n\n        if (!sorted) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```cpp\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool direction = directions[i];\n        svbool_t pg = svptrue_b32();\n        svint32_t vec1 = svld1(pg, row);\n        svint32_t vec2 = svld1(pg, row + 1);\n\n        for (size_t j = 1; j < cols; ++j) {\n            svbool_t cmp = direction ? svcmplt(pg, vec1, vec2) : svcmpgt(pg, vec1, vec2);\n            if (!svall(cmp)) {\n                return false;\n            }\n            vec1 = vec2;\n            vec2 = svld1(pg, row + j + 1);\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool ascending = directions[i];\n        bool sorted = true;\n\n        for (size_t j = 0; j < cols - 1; ++j) {\n            svbool_t pg = svwhilelt_b32(j, cols - 1);\n            svint32_t vec1 = svld1(pg, row + j);\n            svint32_t vec2 = svld1(pg, row + j + 1);\n\n            svbool_t cmp = ascending ? svcmplt(pg, vec1, vec2) : svcmpgt(pg, vec1, vec2);\n            sorted &= svaddv(pg, cmp, 0) == svcntp_b32(pg, svptrue_b32());\n\n            if (!sorted) {\n                break;\n            }\n        }\n\n        if (!sorted) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool ascending = directions[i];\n        bool sorted = true;\n\n        for (size_t j = 0; j < cols - 1; ++j) {\n            svbool_t pg = svwhilelt_b32(j, cols - 1);\n            svint32_t vec1 = svld1(pg, row + j);\n            svint32_t vec2 = svld1(pg, row + j + 1);\n\n            svbool_t cmp = ascending ? svcmplt(pg, vec1, vec2) : svcmpgt(pg, vec1, vec2);\n            sorted = sorted && svaddv(pg, cmp, 0) == (cols - 1 - j);\n\n            if (!sorted) break;\n        }\n\n        if (!sorted) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool ascending = directions[i];\n        bool sorted = true;\n\n        for (size_t j = 0; j < cols - 1; ++j) {\n            svbool_t pg = svwhilelt_b32(j, cols - 1);\n            svint32_t vec1 = svld1(pg, row + j);\n            svint32_t vec2 = svld1(pg, row + j + 1);\n\n            svbool_t cmp = ascending ? svcmplt(pg, vec1, vec2) : svcmpgt(pg, vec1, vec2);\n            sorted = sorted && svaddv(pg, cmp, 0) == (cols - 1 - j);\n\n            if (!sorted) break;\n        }\n\n        if (!sorted) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n    svint16_t base_vec = svdup_n_s16(base);\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint16_t src_vec = svld1_s16(pg, src + i);\n        svint16_t quotient = svdiv_s16(src_vec, base_vec);\n        svint16_t result = svmul_s16(quotient, base_vec);\n        svst1_s16(pg, dst + i, result);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b16(i, length);\n        svint16_t src_vec = svld1_s16(pg, src + i);\n        svint16_t quotient = svdiv_s16(src_vec, base_vec);\n        svint16_t result = svmul_s16(quotient, base_vec);\n        svst1_s16(pg, dst + i, result);\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n    svint16_t vbase = svdup_n_s16(base);\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint16_t vsrc = svld1_s16(pg, src + i);\n        svint16_t vresult = svmul_n_s16(svdiv_n_s16(vsrc, base), base);\n        svst1_s16(pg, dst + i, vresult);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b16(i, length);\n        svint16_t vsrc = svld1_s16(pg, src + i);\n        svint16_t vresult = svmul_n_s16(svdiv_n_s16(vsrc, base), base);\n        svst1_s16(pg, dst + i, vresult);\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n    svint16_t base_vec = svdup_n_s16(base);\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint16_t src_vec = svld1_s16(pg, src + i);\n        svint16_t quotient = svdiv_s16(pg, src_vec, base_vec);\n        svint16_t result = svmul_s16(pg, quotient, base_vec);\n        svst1_s16(pg, dst + i, result);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b16(i, length);\n        svint16_t src_vec = svld1_s16(pg, src + i);\n        svint16_t quotient = svdiv_s16(pg, src_vec, base_vec);\n        svint16_t result = svmul_s16(pg, quotient, base_vec);\n        svst1_s16(pg, dst + i, result);\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n    svint16_t vbase = svdup_n_s16(base);\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint16_t vsrc = svld1_s16(pg, src + i);\n        svint16_t vresult = svmul_n_s16(svdiv_n_s16(vsrc, base), base);\n        svst1_s16(pg, dst + i, vresult);\n    }\n\n    for (; i < length; ++i) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n    svint16_t vbase = svdup_n_s16(base);\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svint16_t vsrc = svld1_s16(pg, src + i);\n        svint16_t vresult = svmul_n_s16(svdiv_n_s16(vsrc, base), base);\n        svst1_s16(pg, dst + i, vresult);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b16(i, length);\n        svint16_t vsrc = svld1_s16(pg, src + i);\n        svint16_t vresult = svmul_n_s16(svdiv_n_s16(vsrc, base), base);\n        svst1_s16(pg, dst + i, vresult);\n    }\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1_f64(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t row = svld1_f64(pg, matrix + i * cols);\n        svbool_t match = svcmpeq_f64(pg, row, vec);\n        if (svptest_any(svptrue_b64(), match)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t vec = svld1(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t row = svld1(pg, matrix + i * cols);\n        svbool_t match = svcmpeq(pg, row, vec);\n        if (svcntp_b64(pg, match) == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1_f64(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t row = svld1_f64(pg, matrix + i * cols);\n        svbool_t match = svcmpeq_f64(pg, row, vec);\n        if (svcntp_b64(svptrue_b64(), match) == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t vec = svld1(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t row = svld1(pg, matrix + i * cols);\n        svbool_t match = svcmpeq(pg, row, vec);\n        if (svcntp_b64(pg, match) == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1_f64(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t row = svld1_f64(pg, matrix + i * cols);\n        svbool_t match = svcmpeq_f64(pg, row, vec);\n        if (svcntp_b64(svptrue_b64(), match) == cols) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    for (size_t i = 0; i < total_elements; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, total_elements);\n        svuint8_t vec_A = svld1_u8(pg, A + i);\n        svuint8_t vec_B = svld1_u8(pg, B + i);\n        svbool_t eq_mask = svcmpeq(pg, vec_A, vec_B);\n        count += svcntp_b8(svptrue_b8(), eq_mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    for (size_t i = 0; i < total_elements; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, total_elements);\n        svuint8_t vec_A = svld1_u8(pg, A + i);\n        svuint8_t vec_B = svld1_u8(pg, B + i);\n        svbool_t eq_mask = svcmpeq(pg, vec_A, vec_B);\n        count += svcntp_b8(svptrue_b8(), eq_mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    for (size_t i = 0; i < total_elements; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, total_elements);\n        svuint8_t vec_a = svld1_u8(pg, A + i);\n        svuint8_t vec_b = svld1_u8(pg, B + i);\n        svbool_t eq_mask = svcmpeq_n_u8(pg, vec_a, vec_b);\n        count += svcntp_b8(svptrue_b8(), eq_mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    for (size_t i = 0; i < total_elements; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, total_elements);\n        svuint8_t vec_a = svld1_u8(pg, A + i);\n        svuint8_t vec_b = svld1_u8(pg, B + i);\n        svbool_t eq_mask = svcmpeq(pg, vec_a, vec_b);\n        count += svcntp_b8(svptrue_b8(), eq_mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    for (size_t i = 0; i < total_elements; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, total_elements);\n        svuint8_t vec_a = svld1_u8(pg, A + i);\n        svuint8_t vec_b = svld1_u8(pg, B + i);\n        svbool_t eq_mask = svcmpeq(pg, vec_a, vec_b);\n        count += svcntp_b8(svptrue_b8(), eq_mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t vec_x = svld1(pg, &x[i]);\n        svint64_t vec_y = svld1(pg, &y[i]);\n        vec_y = svsub(pg, svmul_n(pg, vec_x, a), svabs(pg, vec_y));\n        svst1(pg, &y[i], vec_y);\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n    svint64_t va = svdup_s64(a);\n\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svint64_t vx = svld1_s64(pg, x + i);\n        svint64_t vy = svld1_s64(pg, y + i);\n\n        svint64_t result = svsub_s64_z(pg, svabs_s64_z(pg, vy), svmul_s64_z(pg, va, vx));\n\n        svst1_s64(pg, y + i, result);\n    }\n\n    for (; i < length; ++i) {\n        y[i] = abs(y[i]) - a * x[i];\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n    svint64_t va = svdup_s64(a);\n\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svint64_t vx = svld1_s64(pg, x + i);\n        svint64_t vy = svld1_s64(pg, y + i);\n\n        svint64_t result = svsub_s64_z(pg, svabs_s64_z(pg, vy), svmul_s64_z(pg, va, vx));\n\n        svst1_s64(pg, y + i, result);\n    }\n\n    for (; i < length; ++i) {\n        y[i] = abs(y[i]) - a * x[i];\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t vec_x = svld1(pg, &x[i]);\n        svint64_t vec_y = svld1(pg, &y[i]);\n        vec_y = svsub(pg, svmul_n(pg, vec_x, a), svabs(pg, vec_y));\n        svst1(pg, &y[i], vec_y);\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b64();\n    svint64_t va = svdup_s64(a);\n\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svint64_t vx = svld1(pg, x + i);\n        svint64_t vy = svld1(pg, y + i);\n\n        vx = svmul_x(pg, vx, va);\n        vy = svabs_s64(pg, vy);\n        vy = svsub_x(pg, vx, vy);\n\n        svst1(pg, y + i, vy);\n    }\n\n    for (; i < length; ++i) {\n        y[i] = a * x[i] - llabs(y[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    svint16_t min_vec = svdup_s16(SV_INT16_MAX);\n    svint16_t max_vec = svdup_s16(SV_INT16_MIN);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svint16_t current_vec = svld1_s16(pg, vec + i);\n        min_vec = svmin_s16_z(pg, min_vec, current_vec);\n        max_vec = svmax_s16_z(pg, max_vec, current_vec);\n    }\n\n    result.min_num = svminv_s16(svptrue_b16(), min_vec);\n    result.max_num = svmaxv_s16(svptrue_b16(), max_vec);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    svint16_t min_vec = svdup_s16(SV_INT16_MAX);\n    svint16_t max_vec = svdup_s16(SV_INT16_MIN);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svint16_t current_vec = svld1_s16(pg, vec + i);\n        min_vec = svmin_s16_z(pg, min_vec, current_vec);\n        max_vec = svmax_s16_z(pg, max_vec, current_vec);\n    }\n\n    result.min_num = svminv_s16(svptrue_b16(), min_vec);\n    result.max_num = svmaxv_s16(svptrue_b16(), max_vec);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    svint16_t min_vec = svdup_s16(SV_INT16_MAX);\n    svint16_t max_vec = svdup_s16(SV_INT16_MIN);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svint16_t current_vec = svld1_s16(pg, vec + i);\n        min_vec = svmin_s16_z(pg, min_vec, current_vec);\n        max_vec = svmax_s16_z(pg, max_vec, current_vec);\n    }\n\n    result.min_num = svminv_s16(svptrue_b16(), min_vec);\n    result.max_num = svmaxv_s16(svptrue_b16(), max_vec);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    svint16_t min_vec = svdup_s16(SV_INT16_MAX);\n    svint16_t max_vec = svdup_s16(SV_INT16_MIN);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svint16_t current_vec = svld1_s16(pg, vec + i);\n        min_vec = svmin_s16_z(pg, min_vec, current_vec);\n        max_vec = svmax_s16_z(pg, max_vec, current_vec);\n    }\n\n    result.min_num = svminv_s16(svptrue_b16(), min_vec);\n    result.max_num = svmaxv_s16(svptrue_b16(), max_vec);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    svint16_t min_vec = svdup_s16(SV_INT16_MAX);\n    svint16_t max_vec = svdup_s16(SV_INT16_MIN);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svint16_t current_vec = svld1_s16(pg, vec + i);\n        min_vec = svmin_s16_z(pg, min_vec, current_vec);\n        max_vec = svmax_s16_z(pg, max_vec, current_vec);\n    }\n\n    result.min_num = svminv_s16(svptrue_b16(), min_vec);\n    result.max_num = svmaxv_s16(svptrue_b16(), max_vec);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        svbool_t pg = svwhilelt_b32(0, cols);\n        svint32_t vec = svld1(pg, row);\n        svint32_t vec_shifted = svld1(pg, row + 1);\n\n        svbool_t increasing = svcmplt(pg, vec, vec_shifted);\n\n        if (!svptest_any(svptrue_b32(), increasing)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        svbool_t pg = svwhilelt_b32(0, cols);\n        svint32_t vec = svld1(pg, row);\n        svint32_t vec_next = svld1(pg, row + 1);\n\n        svbool_t increasing = svcmplt(pg, vec, vec_next);\n        if (!svptest_any(svptrue_b32(), increasing)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        svbool_t pg = svwhilelt_b32(0, cols);\n\n        for (size_t j = 1; j < cols; j += svcntw()) {\n            svint32_t vec1 = svld1(pg, row + j - 1);\n            svint32_t vec2 = svld1(pg, row + j);\n            svbool_t cmp = svcmplt(pg, vec1, vec2);\n\n            if (!svall(cmp)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        svbool_t pg = svwhilelt_b32(0, cols);\n\n        for (size_t j = 1; j < cols; ++j) {\n            svint32_t vec1 = svld1(pg, row + j - 1);\n            svint32_t vec2 = svld1(pg, row + j);\n            svbool_t cmp = svcmpgt(pg, vec2, vec1);\n\n            if (!svptest_any(pg, cmp)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        svbool_t pg = svptrue_b32();\n        svint32_t vec = svld1(pg, row);\n        svint32_t vec_shifted = svld1(pg, row + 1);\n\n        for (size_t j = 1; j < cols; ++j) {\n            svbool_t cmp = svcmplt(pg, vec, vec_shifted);\n            if (!svptest_any(svptrue_b32(), cmp)) {\n                return false;\n            }\n            vec = vec_shifted;\n            vec_shifted = svld1(pg, row + j + 1);\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || block_size > rows || block_size > cols || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    const int* first_block = matrix;\n    size_t num_blocks_row = cols / block_size;\n    size_t num_blocks_col = rows / block_size;\n\n    for (size_t block_row = 0; block_row < num_blocks_col; ++block_row) {\n        for (size_t block_col = 0; block_col < num_blocks_row; ++block_col) {\n            const int* current_block = matrix + block_row * block_size * cols + block_col * block_size;\n\n            for (size_t i = 0; i < block_size; ++i) {\n                svbool_t pg = svptrue_b32();\n                svint32_t first_block_vec = svld1(pg, first_block + i * block_size);\n                svint32_t current_block_vec = svld1(pg, current_block + i * block_size);\n\n                if (!svcmpne(pg, first_block_vec, current_block_vec)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || block_size > rows || block_size > cols || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t block_elements = block_size * block_size;\n\n    svbool_t pg = svptrue_b32();\n\n    for (size_t i = 0; i < num_blocks_row; ++i) {\n        for (size_t j = 0; j < num_blocks_col; ++j) {\n            const int* block = matrix + i * block_size * cols + j * block_size;\n            for (size_t k = 0; k < block_size; ++k) {\n                svint32_t first_block = svld1(pg, &block[k * cols]);\n                for (size_t l = 1; l < block_size; ++l) {\n                    svint32_t current_block = svld1(pg, &block[l * cols + k * block_size]);\n                    if (!svcmpne(pg, first_block, current_block)) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    const int* first_block = matrix;\n    size_t num_blocks_row = cols / block_size;\n    size_t num_blocks_col = rows / block_size;\n\n    for (size_t block_row = 0; block_row < num_blocks_col; ++block_row) {\n        for (size_t block_col = 0; block_col < num_blocks_row; ++block_col) {\n            const int* current_block = matrix + (block_row * block_size * cols) + (block_col * block_size);\n\n            for (size_t i = 0; i < block_size; ++i) {\n                svbool_t pg = svwhilelt_b32(0, block_size);\n                svint32_t first_block_vec = svld1(pg, first_block + i * block_size);\n                svint32_t current_block_vec = svld1(pg, current_block + i * block_size);\n\n                if (!svcmpne(pg, first_block_vec, current_block_vec)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    const int* first_block = matrix;\n    size_t num_blocks_row = cols / block_size;\n    size_t num_blocks_col = rows / block_size;\n\n    for (size_t block_row = 0; block_row < num_blocks_col; ++block_row) {\n        for (size_t block_col = 0; block_col < num_blocks_row; ++block_col) {\n            const int* current_block = matrix + (block_row * block_size * cols) + (block_col * block_size);\n\n            for (size_t i = 0; i < block_size; ++i) {\n                svbool_t pg = svwhilelt_b32(0, block_size);\n                svint32_t first_block_vec = svld1(pg, first_block + i * block_size);\n                svint32_t current_block_vec = svld1(pg, current_block + i * block_size);\n                svbool_t cmp = svcmpeq(pg, first_block_vec, current_block_vec);\n\n                if (!svptest_any(svptrue_b32(), cmp)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || block_size > rows || block_size > cols || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    const int* first_block = matrix;\n    size_t num_blocks_row = cols / block_size;\n    size_t num_blocks_col = rows / block_size;\n\n    for (size_t block_row = 0; block_row < num_blocks_col; ++block_row) {\n        for (size_t block_col = 0; block_col < num_blocks_row; ++block_col) {\n            const int* current_block = matrix + (block_row * block_size * cols) + (block_col * block_size);\n\n            for (size_t i = 0; i < block_size; ++i) {\n                svbool_t pg = svwhilelt_b32(0, block_size);\n                svint32_t first_block_vec = svld1(pg, first_block + i * block_size);\n                svint32_t current_block_vec = svld1(pg, current_block + i * block_size);\n\n                if (!svcmpne(pg, first_block_vec, current_block_vec)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t tolerance_vec = svdup_f64(tolerance);\n\n    svfloat64_t first_block = svld1_f64(pg, vec);\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        svfloat64_t current_block = svld1_f64(pg, vec + i * block_size);\n\n        svbool_t cmp = svcmpeq_f64(pg, svabs_f64(svsub_f64(current_block, first_block)), tolerance_vec);\n\n        if (!svptest_any(svptrue_b64(), cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t tol = svdup_f64(tolerance);\n    svfloat64_t first_block = svld1_f64(pg, vec);\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        svfloat64_t current_block = svld1_f64(pg, vec + i * block_size);\n        svbool_t cmp = svcmpeq_f64(pg, svabs_f64(svsub_f64(pg, first_block, current_block)), tol);\n        if (!svptest_any(svptrue_b64(), cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t tol = svdup_f64(tolerance);\n    svfloat64_t first_block = svld1_f64(pg, vec);\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        svfloat64_t current_block = svld1_f64(pg, vec + i * block_size);\n        svbool_t cmp = svcmpeq_f64(svabs_f64(svsub_f64(first_block, current_block)), tol);\n        if (!svptest_any(svptrue_b64(), cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t tol = svdup_f64(tolerance);\n    svfloat64_t first_block = svld1_f64(pg, vec);\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        svfloat64_t current_block = svld1_f64(pg, vec + i * block_size);\n        svbool_t cmp = svcmpeq_f64(pg, svabs_f64(svsub_f64(pg, first_block, current_block)), tol);\n        if (!svptest_any(svptrue_b64(), cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t tolerance_vec = svdup_f64(tolerance);\n\n    svfloat64_t first_block = svld1_f64(pg, vec);\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        svfloat64_t current_block = svld1_f64(pg, vec + i * block_size);\n\n        svbool_t cmp = svcmpeq_f64(pg, svabs_f64(svsub_f64(current_block, first_block)), tolerance_vec);\n\n        if (!svptest_any(svptrue_b64(), cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double* row = matrix + i * cols;\n        svbool_t pg = svwhilelt_b64(0, cols);\n        svfloat64_t vec = svld1(pg, row);\n        svfloat64_t squared = svmul_x(pg, vec, vec);\n        svfloat64_t sum = svaddv(pg, squared);\n        double norm = svsqrt_x(pg, sum);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double* row = matrix + i * cols;\n        svbool_t pg = svwhilelt_b64(0, cols);\n        svfloat64_t vec_row = svld1(pg, row);\n        svfloat64_t vec_squared = svmul_x(pg, vec_row, vec_row);\n        double sum = svaddv(pg, vec_squared);\n        double norm = sqrt(sum);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double* row = &matrix[i * cols];\n        svfloat64_t row_vec = svld1_f64(svptrue_b64(), row);\n        svfloat64_t row_squared = svmul_f64_z(svptrue_b64(), row_vec, row_vec);\n        svfloat64_t sum = svaddv_f64(svptrue_b64(), row_squared);\n        double norm_squared = svaddv_f64(svptrue_b64(), sum);\n        double norm = sqrt(norm_squared);\n        result[i] = (norm > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double* row = &matrix[i * cols];\n        svfloat64_t row_vec = svld1_f64(svptrue_b64(), row);\n        svfloat64_t squared = svmul_f64_z(svptrue_b64(), row_vec, row_vec);\n        svfloat64_t sum = svaddv_f64(svptrue_b64(), squared);\n        double norm = sqrt(svaddv_f64(svptrue_b64(), sum));\n        result[i] = (norm > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg = svwhilelt_b64(0, cols);\n        svfloat64_t row = svld1_gather_f64(pg, matrix + i * cols, 1);\n        svfloat64_t squared = svmul_f64_x(pg, row, row);\n        svfloat64_t sum = svaddv_f64(pg, squared);\n        svfloat64_t norm = svsqrt_f64_x(pg, sum);\n        svbool_t cmp = svcmpge_f64(pg, norm, svld1rq_f64(pg, thresholds + i));\n        result[i] = svptest_any(svptrue_b64(), cmp);\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1_u32(svptrue_b32(), A + i);\n        svuint32_t vec_B = svld1_u32(svptrue_b32(), B + i);\n        svuint32_t vec_C = svorr_u32_z(svptrue_b32(), vec_A, vec_B);\n        svst1_u32(svptrue_b32(), C + i, vec_C);\n    }\n    for (; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1(svptrue_b32(), A + i);\n        svuint32_t vec_B = svld1(svptrue_b32(), B + i);\n        svuint32_t vec_C = svor_z(svptrue_b32(), vec_A, vec_B);\n        svst1(svptrue_b32(), C + i, vec_C);\n    }\n    for (; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svuint32_t vec_B = svld1(pg, &B[i]);\n        svuint32_t vec_C = svorr_z(pg, vec_A, vec_B);\n        svst1(pg, &C[i], vec_C);\n    }\n\n    for (; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1(svptrue_b32(), A + i);\n        svuint32_t vec_B = svld1(svptrue_b32(), B + i);\n        svuint32_t vec_C = svor_z(svptrue_b32(), vec_A, vec_B);\n        svst1(svptrue_b32(), C + i, vec_C);\n    }\n    for (; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1(svptrue_b32(), A + i);\n        svuint32_t vec_B = svld1(svptrue_b32(), B + i);\n        svuint32_t vec_C = svor_z(svptrue_b32(), vec_A, vec_B);\n        svst1(svptrue_b32(), C + i, vec_C);\n    }\n    for (; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec_a = svld1b(pg, &A[i]);\n        svint8_t vec_b = svld1b(pg, &B[i]);\n\n        svint16_t vec_a_w = svreinterpret_s16(svxtnb_s8(svtrn1b_s8(vec_a, vec_a)));\n        svint16_t vec_b_w = svreinterpret_s16(svxtnb_s8(svtrn1b_s8(vec_b, vec_b)));\n\n        svint16_t vec_a_sq = svmul_n_s16(vec_a_w, vec_a_w);\n        svint16_t vec_prod = svmul_n_s16(vec_a_w, vec_b_w);\n\n        sum_of_squares += svaddv_s16(pg, vec_a_sq);\n        sum_of_products += svaddv_s16(pg, vec_prod);\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t va = svld1b(pg, A + i);\n        svint8_t vb = svld1b(pg, B + i);\n\n        svint16_t va16 = svreinterpret_s16(svxtb_s8(svptrue_b8(), va));\n        svint16_t vb16 = svreinterpret_s16(svxtb_s8(svptrue_b8(), vb));\n\n        svint16_t va_squared = svmul_n_s16(va16, va16);\n        svint16_t va_vb = svmul_n_s16(va16, vb16);\n\n        sum_of_squares += svaddv_s16(svptrue_b16(), va_squared);\n        sum_of_products += svaddv_s16(svptrue_b16(), va_vb);\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec_a = svld1b(pg, &A[i]);\n        svint8_t vec_b = svld1b(pg, &B[i]);\n\n        svint16_t vec_a_w = svmul_n_s16(svunpklo_s8(svunpklo_s8(vec_a)), 1);\n        svint16_t vec_b_w = svmul_n_s16(svunpklo_s8(svunpklo_s8(vec_b)), 1);\n\n        svint16_t vec_a_sq = svmul_n_s16(vec_a_w, vec_a_w);\n        svint16_t vec_prod = svmul_n_s16(vec_a_w, vec_b_w);\n\n        sum_of_squares += svaddv_s16(pg, vec_a_sq);\n        sum_of_products += svaddv_s16(pg, vec_prod);\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec_a = svld1b(pg, A + i);\n        svint8_t vec_b = svld1b(pg, B + i);\n\n        svint16_t vec_a_wide = svmul_n_s16(svunpklo_s16(svunpklo_s8(vec_a)), 1);\n        svint16_t vec_b_wide = svmul_n_s16(svunpklo_s16(svunpklo_s8(vec_b)), 1);\n\n        svint16_t vec_a_squared = svmul_n_s16(vec_a_wide, vec_a_wide);\n        svint16_t vec_product = svmul_n_s16(vec_a_wide, vec_b_wide);\n\n        sum_of_squares += svaddv_s16(pg, vec_a_squared);\n        sum_of_products += svaddv_s16(pg, vec_product);\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec_a = svld1b(pg, &A[i]);\n        svint8_t vec_b = svld1b(pg, &B[i]);\n\n        svint16_t vec_a_w = svreinterpret_s16(svxtb_s8(svundef_s8(), vec_a));\n        svint16_t vec_b_w = svreinterpret_s16(svxtb_s8(svundef_s8(), vec_b));\n\n        svint16_t vec_a_sq = svmul_n_s16(vec_a_w, vec_a_w);\n        svint16_t vec_prod = svmul_n_s16(vec_a_w, vec_b_w);\n\n        sum_of_squares += svaddv_s16(pg, vec_a_sq);\n        sum_of_products += svaddv_s16(pg, vec_prod);\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vec_A = svld1(pg, &A[i]);\n        svuint64_t vec_B = svld1(pg, &B[i]);\n        svuint64_t vec_result = svand_z(pg, vec_A, svnot_z(pg, vec_B));\n        svst1(pg, &C[i], vec_result);\n    }\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vec_A = svld1(pg, &A[i]);\n        svuint64_t vec_B = svld1(pg, &B[i]);\n        svuint64_t vec_C = svand_z(pg, vec_A, svnot_z(pg, vec_B));\n        svst1(pg, &C[i], vec_C);\n    }\n    for (; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vec_A = svld1(pg, &A[i]);\n        svuint64_t vec_B = svld1(pg, &B[i]);\n        svuint64_t vec_C = svand_z(pg, vec_A, svnot_z(pg, vec_B));\n        svst1(pg, &C[i], vec_C);\n    }\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vec_A = svld1(pg, &A[i]);\n        svuint64_t vec_B = svld1(pg, &B[i]);\n        svuint64_t vec_not_B = svnot_z(pg, svptrue_b64(), vec_B);\n        svuint64_t vec_C = svand_z(pg, vec_A, vec_not_B);\n        svst1(pg, &C[i], vec_C);\n    }\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vecA = svld1(pg, &A[i]);\n        svuint64_t vecB = svld1(pg, &B[i]);\n        svuint64_t vecC = svand_x(pg, vecA, svnot_x(pg, vecB));\n        svst1(pg, &C[i], vecC);\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svptrue_b8();\n        svint8_t va = svld1(pg, A + i);\n        svint8_t vb = svld1(pg, B + i);\n\n        svbool_t pg_pos = svcmpgt(pg, va, svdup_s8(0)) & svcmpgt(pg, vb, svdup_s8(0));\n        svbool_t pg_neg = svcmplt(pg, va, svdup_s8(0)) & svcmplt(pg, vb, svdup_s8(0));\n\n        svint8_t vc = svsel(pg_pos, svdup_s8(1), svsel(pg_neg, svdup_s8(-1), svdup_s8(0)));\n\n        svst1(pg, C + i, vc);\n    }\n\n    for (; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t a = svld1b(pg, A + i);\n        svint8_t b = svld1b(pg, B + i);\n\n        svbool_t pg_pos = svcmpgt_n_s8(a, 0) & svcmpgt_n_s8(b, 0);\n        svbool_t pg_neg = svcmplt_n_s8(a, 0) & svcmplt_n_s8(b, 0);\n\n        svint8_t c = svdup_n_s8(0);\n        c = svsel_s8(pg_pos, svdup_n_s8(1), c);\n        c = svsel_s8(pg_neg, svdup_n_s8(-1), c);\n\n        svst1b(pg, C + i, c);\n    }\n\n    for (; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svptrue_b8();\n        svint8_t va = svld1(pg, A + i);\n        svint8_t vb = svld1(pg, B + i);\n\n        svbool_t pg_pos = svcmpgt(pg, va, svdup_s8(0)) & svcmpgt(pg, vb, svdup_s8(0));\n        svbool_t pg_neg = svcmplt(pg, va, svdup_s8(0)) & svcmplt(pg, vb, svdup_s8(0));\n\n        svint8_t vc = svsel(pg_pos, svdup_s8(1), svsel(pg_neg, svdup_s8(-1), svdup_s8(0)));\n\n        svst1(pg, C + i, vc);\n    }\n\n    for (; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svptrue_b8();\n        svint8_t vec_A = svld1(pg, A + i);\n        svint8_t vec_B = svld1(pg, B + i);\n\n        svbool_t pg_pos = svcmpgt(pg, vec_A, svdup_s8(0)) & svcmpgt(pg, vec_B, svdup_s8(0));\n        svbool_t pg_neg = svcmplt(pg, vec_A, svdup_s8(0)) & svcmplt(pg, vec_B, svdup_s8(0));\n\n        svint8_t vec_C = svsel(pg_pos, svdup_s8(1), svsel(pg_neg, svdup_s8(-1), svdup_s8(0)));\n\n        svst1(pg, C + i, vec_C);\n    }\n\n    for (; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec_A = svld1b(pg, A + i);\n        svint8_t vec_B = svld1b(pg, B + i);\n\n        svbool_t pg_pos = svcmpgt(pg, vec_A, svdup_s8(0)) & svcmpgt(pg, vec_B, svdup_s8(0));\n        svbool_t pg_neg = svcmplt(pg, vec_A, svdup_s8(0)) & svcmplt(pg, vec_B, svdup_s8(0));\n\n        svint8_t vec_C = svdup_s8(0);\n        vec_C = svsel_s8(pg_pos, svdup_s8(1), vec_C);\n        vec_C = svsel_s8(pg_neg, svdup_s8(-1), vec_C);\n\n        svst1b(pg, C + i, vec_C);\n    }\n\n    for (; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t i = 0;\n    size_t midpoint = length / 2;\n\n    for (; i <= midpoint - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, midpoint);\n        svuint16_t vec_A = svld1(pg, &A[i]);\n        svuint16_t vec_B = svld1(pg, &B[i]);\n        svuint16_t vec_C = sveor_z(pg, vec_A, vec_B);\n        svst1(pg, &C[i], vec_C);\n    }\n\n    for (; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n\n    for (; i < length; ++i) {\n        C[i] = A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    size_t i = 0;\n\n    for (; i <= midpoint - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, midpoint);\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = svand_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n\n    for (; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n\n    if (length % 2 == 1) {\n        C[midpoint] = A[midpoint];\n    }\n\n    for (i = midpoint + 1; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = svand_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n\n    for (; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    size_t i = 0;\n\n    for (; i <= midpoint - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, midpoint);\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = svand_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n\n    for (; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n\n    if (length % 2 != 0) {\n        C[midpoint] = A[midpoint];\n    }\n\n    for (i = midpoint + 1; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = svand_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n\n    for (; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    size_t i = 0;\n\n    for (; i <= midpoint; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t vec_A = svld1(pg, &A[i]);\n        svuint16_t vec_B = svld1(pg, &B[i]);\n\n        svuint16_t vec_C;\n        if (i < midpoint) {\n            vec_C = sveor_z(pg, vec_A, vec_B);\n        } else {\n            vec_C = vec_A;\n        }\n\n        svst1(pg, &C[i], vec_C);\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    size_t i = 0;\n\n    for (; i <= midpoint - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, midpoint);\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = svand_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n\n    for (; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n\n    if (length % 2 != 0) {\n        C[midpoint] = A[midpoint];\n    }\n\n    for (i = midpoint + 1; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = svand_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n\n    for (; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svbool_t p_cond1 = svld1b(svptrue_b8(), cond1 + i);\n        svbool_t p_cond2 = svld1b(svptrue_b8(), cond2 + i);\n\n        svbool_t p_true_true = svand_z(p_cond1, p_cond2);\n        svbool_t p_true_false = svand_z(p_cond1, svnot_z(p_cond2));\n        svbool_t p_false_true = svand_z(svnot_z(p_cond1), p_cond2);\n        svbool_t p_false_false = svand_z(svnot_z(p_cond1), svnot_z(p_cond2));\n\n        svfloat32_t v_A = svld1(svptrue_b32(), A + i);\n        svfloat32_t v_B = svld1(svptrue_b32(), B + i);\n        svfloat32_t v_C = svld1(svptrue_b32(), C + i);\n        svfloat32_t v_D = svld1(svptrue_b32(), D + i);\n\n        svfloat32_t v_out = svsel(svsel(svsel(svdup_f32(0), v_A, p_true_true), v_B, p_true_false), svsel(v_C, v_D, p_false_false), p_false_true);\n\n        svst1(svptrue_b32(), out + i, v_out);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (cond1[i] && cond2[i]) {\n            out[i] = A[i];\n        } else if (cond1[i] && !cond2[i]) {\n            out[i] = B[i];\n        } else if (!cond1[i] && cond2[i]) {\n            out[i] = C[i];\n        } else {\n            out[i] = D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svbool_t pg_cond1 = svld1b_s32(svptrue_b32(), cond1 + i);\n        svbool_t pg_cond2 = svld1b_s32(svptrue_b32(), cond2 + i);\n\n        svfloat32_t vec_A = svld1(svptrue_b32(), A + i);\n        svfloat32_t vec_B = svld1(svptrue_b32(), B + i);\n        svfloat32_t vec_C = svld1(svptrue_b32(), C + i);\n        svfloat32_t vec_D = svld1(svptrue_b32(), D + i);\n\n        svfloat32_t vec_out = svsel_f32(svsel_f32(svptrue_b32(), vec_A, vec_B), svsel_f32(svptrue_b32(), vec_C, vec_D));\n\n        svst1(svptrue_b32(), out + i, vec_out);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (cond1[i] && cond2[i]) {\n            out[i] = A[i];\n        } else if (cond1[i] && !cond2[i]) {\n            out[i] = B[i];\n        } else if (!cond1[i] && cond2[i]) {\n            out[i] = C[i];\n        } else {\n            out[i] = D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svbool_t p_cond1 = svld1b(svptrue_b8(), cond1 + i);\n        svbool_t p_cond2 = svld1b(svptrue_b8(), cond2 + i);\n\n        svbool_t p_true_true = svand_z(p_cond1, p_cond2);\n        svbool_t p_true_false = svand_z(p_cond1, svnot_z(p_cond2));\n        svbool_t p_false_true = svand_z(svnot_z(p_cond1), p_cond2);\n        svbool_t p_false_false = svand_z(svnot_z(p_cond1), svnot_z(p_cond2));\n\n        svfloat32_t v_A = svld1(svptrue_b32(), A + i);\n        svfloat32_t v_B = svld1(svptrue_b32(), B + i);\n        svfloat32_t v_C = svld1(svptrue_b32(), C + i);\n        svfloat32_t v_D = svld1(svptrue_b32(), D + i);\n\n        svfloat32_t v_out = svsel(svsel(svsel(svdup_f32(0.0f), v_A, p_true_true),\n                                         v_B, p_true_false),\n                                   svsel(v_C, v_D, p_false_true),\n                                   p_false_false);\n\n        svst1(svptrue_b32(), out + i, v_out);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (cond1[i] && cond2[i]) {\n            out[i] = A[i];\n        } else if (cond1[i] && !cond2[i]) {\n            out[i] = B[i];\n        } else if (!cond1[i] && cond2[i]) {\n            out[i] = C[i];\n        } else {\n            out[i] = D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svbool_t p_cond1 = svld1b_s32(svptrue_b32(), cond1 + i);\n        svbool_t p_cond2 = svld1b_s32(svptrue_b32(), cond2 + i);\n\n        svbool_t p_true_true = svand_z(p_cond1, p_cond2);\n        svbool_t p_true_false = svand_z(p_cond1, svnot_z(p_cond2));\n        svbool_t p_false_true = svand_z(svnot_z(p_cond1), p_cond2);\n        svbool_t p_false_false = svand_z(svnot_z(p_cond1), svnot_z(p_cond2));\n\n        svfloat32_t v_A = svld1_f32(svptrue_b32(), A + i);\n        svfloat32_t v_B = svld1_f32(svptrue_b32(), B + i);\n        svfloat32_t v_C = svld1_f32(svptrue_b32(), C + i);\n        svfloat32_t v_D = svld1_f32(svptrue_b32(), D + i);\n\n        svfloat32_t v_out = svsel_f32(p_true_true, v_A, svsel_f32(p_true_false, v_B, svsel_f32(p_false_true, v_C, v_D)));\n\n        svst1_f32(svptrue_b32(), out + i, v_out);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (cond1[i] && cond2[i]) {\n            out[i] = A[i];\n        } else if (cond1[i] && !cond2[i]) {\n            out[i] = B[i];\n        } else if (!cond1[i] && cond2[i]) {\n            out[i] = C[i];\n        } else {\n            out[i] = D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svbool_t p_cond1 = svld1b_s32(svptrue_b32(), cond1 + i);\n        svbool_t p_cond2 = svld1b_s32(svptrue_b32(), cond2 + i);\n\n        svbool_t p_true_true = svand_z(p_cond1, p_cond2);\n        svbool_t p_true_false = svand_z(p_cond1, svnot_z(p_cond2));\n        svbool_t p_false_true = svand_z(svnot_z(p_cond1), p_cond2);\n        svbool_t p_false_false = svand_z(svnot_z(p_cond1), svnot_z(p_cond2));\n\n        svfloat32_t vec_A = svld1(svptrue_b32(), A + i);\n        svfloat32_t vec_B = svld1(svptrue_b32(), B + i);\n        svfloat32_t vec_C = svld1(svptrue_b32(), C + i);\n        svfloat32_t vec_D = svld1(svptrue_b32(), D + i);\n\n        svfloat32_t vec_out = svsel(svsel(svsel(svdup_f32(0.0f), vec_A, p_true_true),\n                                           vec_B, p_true_false),\n                                     svsel(vec_C, vec_D, p_false_false));\n\n        svst1(svptrue_b32(), out + i, vec_out);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (cond1[i] && cond2[i]) {\n            out[i] = A[i];\n        } else if (cond1[i] && !cond2[i]) {\n            out[i] = B[i];\n        } else if (!cond1[i] && cond2[i]) {\n            out[i] = C[i];\n        } else {\n            out[i] = D[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1_u32(svptrue_b32(), &A[i]);\n        svuint8_t vec_count = svcnt_u32(svptrue_b32(), vec_A);\n        svst1_u8(svptrue_b8(), &out[i], vec_count);\n    }\n\n    for (; i < total_elements; ++i) {\n        out[i] = __builtin_popcount(A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        size_t current_vl = svmin_vl(total_elements - i, vl);\n        svuint32_t vec_A = svld1_u32(svptrue_b32(), &A[i]);\n        svuint8_t vec_out = svcnt_u32(svptrue_b32(), vec_A);\n        svst1_u8(svptrue_b8(), &out[i], vec_out);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, total_elements);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svuint8_t vec_out = svcnt_u32(pg, vec_A);\n        svst1(pg, &out[i], vec_out);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1_u32(svptrue_b32(), &A[i]);\n        svuint8_t vec_out = svcnt_u8(svptrue_b8(), svreinterpret_u8(vec_A));\n        svst1_u8(svptrue_b8(), &out[i], vec_out);\n    }\n\n    for (; i < total_elements; ++i) {\n        out[i] = __builtin_popcount(A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svuint32_t vec_A = svld1_u32(svptrue_b32(), &A[i]);\n        svuint8_t vec_out = svcnt_u32(svptrue_b32(), vec_A);\n        svst1_u8(svptrue_b8(), &out[i], vec_out);\n    }\n\n    for (; i < total_elements; ++i) {\n        out[i] = __builtin_popcount(A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svbool_t pg = svptrue_b32();\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t pg_divisible_by_3 = svcmpeq(svptrue_b32(), svdiv_z(svptrue_b32(), vec_A, svdup_s32(3)), svdup_s32(0));\n        svint32_t vec_B = svsel(pg_divisible_by_3, svabs_z(svptrue_b32(), vec_A), vec_A);\n        svst1(pg, &B[i], vec_B);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i = 0;\n\n    for (; i <= total_elements - svcntw(); i += svcntw()) {\n        svbool_t pg = svptrue_b32();\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t pg_divisible_by_3 = svcmpeq(svptrue_b32(), svdiv_z(svptrue_b32(), vec_A, svdup_s32(3)), svdup_s32(0));\n        svint32_t vec_B = svsel(pg_divisible_by_3, svabs_z(svptrue_b32(), vec_A), vec_A);\n        svst1(pg, &B[i], vec_B);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    size_t i = 0;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t cond = svcmpeq(svptrue_b32(), svand_n_z(svptrue_b32(), vec_A, 3), svdup_n_s32(0));\n        svint32_t vec_B = svsel(cond, svabs_z(svptrue_b32(), vec_A), vec_A);\n        svst1(pg, &B[i], vec_B);\n    }\n\n    for (; i < size; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    size_t i = 0;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t cond = svcmpeq_n_z(pg, svptrue_b32(), svmod_n_z(pg, vec_A, 3), 0);\n        svint32_t vec_B = svsel(cond, svabs_z(pg, vec_A), vec_A);\n        svst1(pg, &B[i], vec_B);\n    }\n\n    for (; i < size; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t size = rows * cols;\n    size_t i = 0;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t cond = svcmplt_n_z(pg, svptrue_b32(), vec_A, 0);\n        svint32_t abs_vec_A = svabs_z(pg, vec_A);\n        svint32_t vec_B = svsel_z(pg, cond, abs_vec_A, vec_A);\n        svst1(pg, &B[i], vec_B);\n    }\n\n    for (; i < size; ++i) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    const uint32_t mask = 0xF;\n    const uint32_t all_ones = 0xF;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t vec_src = svld1(pg, &src[i]);\n        svuint32_t low_bits = svand_z(pg, vec_src, svdup_n_u32(mask));\n        svbool_t cond = svcmpeq(pg, low_bits, svdup_n_u32(all_ones));\n\n        svuint32_t rotated = svror_z(pg, vec_src, svdup_n_u32(rotate_bits));\n        svuint32_t negated = svnot_z(pg, vec_src);\n\n        svuint32_t result = svsel(cond, rotated, negated);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    const uint32_t mask = 0xF;\n    const uint32_t all_ones = 0xFFFFFFFF;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t src_vec = svld1(pg, &src[i]);\n\n        svuint32_t low_bits = svand_x(pg, src_vec, mask);\n        svbool_t cond = svcmpeq(pg, low_bits, mask);\n\n        svuint32_t rotated = svror_x(pg, src_vec, rotate_bits);\n        svuint32_t negated = sveor_x(pg, src_vec, all_ones);\n\n        svuint32_t result = svsel(cond, rotated, negated);\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    const uint32_t mask = 0xF;\n    const uint32_t all_ones = 0xFFFFFFFF;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t v_src = svld1(pg, &src[i]);\n        svuint32_t v_low_bits = svand_x(pg, v_src, mask);\n        svbool_t pg_all_ones = svcmpeq(pg, v_low_bits, mask);\n\n        svuint32_t v_rotated = svror_x(pg, v_src, rotate_bits);\n        svuint32_t v_negated = sveor_x(pg, v_src, all_ones);\n\n        svuint32_t v_dst = svsel(pg_all_ones, v_rotated, v_negated);\n        svst1(pg, &dst[i], v_dst);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    const uint32_t mask = 0xF;\n    const uint32_t all_ones = 0xFFFFFFFF;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t v_src = svld1(pg, &src[i]);\n        svuint32_t v_low_bits = svand_x(pg, v_src, svdup_n_u32(mask));\n        svbool_t pg_all_ones = svcmpeq(pg, v_low_bits, svdup_n_u32(mask));\n        svuint32_t v_rotated = svror_x(pg, v_src, svdup_n_u32(rotate_bits));\n        svuint32_t v_negated = sveor_x(pg, v_src, svdup_n_u32(all_ones));\n        svuint32_t v_dst = svsel(pg_all_ones, v_rotated, v_negated);\n        svst1(pg, &dst[i], v_dst);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    const uint32_t mask = 0xF;\n    const uint32_t all_ones = 0xFFFFFFFF;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t src_vec = svld1(pg, &src[i]);\n\n        svuint32_t low_bits = svand_x(pg, src_vec, svdup_n_u32(mask));\n        svbool_t cond = svcmpeq(pg, low_bits, svdup_n_u32(mask));\n\n        svuint32_t rotated = svror_x(pg, src_vec, svdup_n_u32(rotate_bits));\n        svuint32_t negated = sveor_x(pg, src_vec, svdup_n_u32(all_ones));\n\n        svuint32_t result = svsel(cond, rotated, negated);\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b8();\n    svfloat32_t eps = svdup_f32(fabsf(epsilon));\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t a = svld1_f32(pg, A + i);\n        svfloat32_t b = svld1_f32(pg, B + i);\n        svfloat32_t diff = svsub_f32_z(pg, pg, a, b);\n        svbool_t pg_gt = svcmpgt_f32(pg, diff, eps);\n        svbool_t pg_lt = svcmplt_f32(pg, diff, svneg_f32_z(pg, eps));\n        svbool_t pg_eq = svcmpne_f32(pg, diff, diff);\n\n        svint8_t result = svdup_n_s8(0);\n        result = svsel_s8(pg_gt, result, svdup_n_s8(1));\n        result = svsel_s8(pg_lt, result, svdup_n_s8(-1));\n\n        svst1_s8(pg, out + i, result);\n    }\n\n    for (; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > epsilon) {\n            out[i] = 1;\n        } else if (diff < -epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t i = 0;\n    epsilon = fabsf(epsilon);\n    svbool_t pg = svptrue_b8();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t vec_A = svld1(pg, &A[i]);\n        svfloat32_t vec_B = svld1(pg, &B[i]);\n        svfloat32_t diff = svsub(pg, vec_A, vec_B);\n        svfloat32_t abs_diff = svabs(pg, diff);\n\n        svbool_t pg_gt = svcmpgt(pg, abs_diff, svdup_f32(pg, epsilon));\n        svbool_t pg_lt = svcmplt(pg, abs_diff, svdup_f32(pg, epsilon));\n\n        svint8_t vec_out = svdup_s8(pg, 0);\n        vec_out = svsel_s8(pg_gt, svdup_s8(pg, 1), vec_out);\n        vec_out = svsel_s8(pg_lt, svdup_s8(pg, -1), vec_out);\n\n        svst1(pg, &out[i], vec_out);\n    }\n\n    for (; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > epsilon) {\n            out[i] = 1;\n        } else if (diff < -epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t i = 0;\n    epsilon = fabsf(epsilon);\n    svbool_t pg = svptrue_b8();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t vec_A = svld1(pg, A + i);\n        svfloat32_t vec_B = svld1(pg, B + i);\n        svfloat32_t diff = svsub(pg, vec_A, vec_B);\n\n        svbool_t pg_gt = svcmpgt(pg, diff, svdup_f32(epsilon));\n        svbool_t pg_lt = svcmplt(pg, diff, svdup_f32(-epsilon));\n\n        svint8_t vec_out = svdup_s8(0);\n        vec_out = svsel_s8(pg_gt, svdup_s8(1), vec_out);\n        vec_out = svsel_s8(pg_lt, svdup_s8(-1), vec_out);\n\n        svst1(pg, out + i, vec_out);\n    }\n\n    for (; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > epsilon) {\n            out[i] = 1;\n        } else if (diff < -epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t i = 0;\n    epsilon = fabsf(epsilon);\n    svbool_t pg = svptrue_b8();\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t vec_A = svld1(pg, A + i);\n        svfloat32_t vec_B = svld1(pg, B + i);\n        svfloat32_t diff = svsub(pg, vec_A, vec_B);\n\n        svbool_t pg_gt = svcmpgt(pg, diff, svdup_f32(epsilon));\n        svbool_t pg_lt = svcmplt(pg, diff, svdup_f32(-epsilon));\n\n        svint8_t vec_out = svdup_s8(0);\n        vec_out = svsel_s8(pg_gt, svdup_s8(1), vec_out);\n        vec_out = svsel_s8(pg_lt, svdup_s8(-1), vec_out);\n\n        svst1(pg, out + i, vec_out);\n    }\n\n    for (; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > epsilon) {\n            out[i] = 1;\n        } else if (diff < -epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b8();\n    svfloat32_t eps = svdup_f32(epsilon);\n    svfloat32_t neg_eps = svdup_f32(-epsilon);\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svfloat32_t a = svld1_f32(pg, &A[i]);\n        svfloat32_t b = svld1_f32(pg, &B[i]);\n        svfloat32_t diff = svsub_f32_z(pg, a, b);\n\n        svbool_t pg_gt = svcmpgt_f32(pg, diff, eps);\n        svbool_t pg_lt = svcmplt_f32(pg, diff, neg_eps);\n\n        svint8_t result = svdup_n_s8(0);\n        result = svsel_s8(pg_gt, svdup_n_s8(1), result);\n        result = svsel_s8(pg_lt, svdup_n_s8(-1), result);\n\n        svst1_s8(pg, &out[i], result);\n    }\n\n    for (; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > epsilon) {\n            out[i] = 1;\n        } else if (diff < -epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    const int32_t INT32_MAX_VAL = INT32_MAX;\n    const int32_t INT32_MIN_VAL = INT32_MIN;\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t max_val = svdup_f32(INT32_MAX_VAL);\n    svfloat32_t min_val = svdup_f32(INT32_MIN_VAL);\n    svint32_t max_int_val = svdup_s32(INT32_MAX_VAL);\n    svint32_t min_int_val = svdup_s32(INT32_MIN_VAL);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t vec_a = svld1_f32(pg, &A[i]);\n\n        svbool_t pg_max = svcmpgt(pg, vec_a, max_val);\n        svbool_t pg_min = svcmplt(pg, vec_a, min_val);\n\n        svint32_t vec_b = svcvt_s32_f32_z(pg, vec_a);\n        vec_b = svsel_s32(pg_max, max_int_val, vec_b);\n        vec_b = svsel_s32(pg_min, min_int_val, vec_b);\n\n        svst1_s32(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    const int32_t int32_max = INT32_MAX;\n    const int32_t int32_min = INT32_MIN;\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t max_vec = svdup_f32(int32_max);\n    svfloat32_t min_vec = svdup_f32(int32_min);\n    svint32_t int32_max_vec = svdup_s32(int32_max);\n    svint32_t int32_min_vec = svdup_s32(int32_min);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vec_a = svld1_f32(pg, &A[i]);\n\n        svbool_t pg_max = svcmpge_f32(pg, vec_a, max_vec);\n        svbool_t pg_min = svcmplt_f32(pg, vec_a, min_vec);\n\n        svint32_t vec_b = svcvt_s32_f32_z(pg, vec_a);\n        vec_b = svsel_s32(pg_max, int32_max_vec, vec_b);\n        vec_b = svsel_s32(pg_min, int32_min_vec, vec_b);\n\n        svst1_s32(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    const int32_t int32_max = INT32_MAX;\n    const int32_t int32_min = INT32_MIN;\n    const float float_int32_max = (float)INT32_MAX;\n    const float float_int32_min = (float)INT32_MIN;\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vec_a = svld1_f32(pg, &A[i]);\n\n        svbool_t pg_max = svcmpgt_n_f32(pg, vec_a, float_int32_max);\n        svbool_t pg_min = svcmplt_n_f32(pg, vec_a, float_int32_min);\n\n        svint32_t vec_b = svcvt_s32_f32_z(pg, vec_a);\n        vec_b = svsel_s32(pg_max, svdup_n_s32(int32_max), vec_b);\n        vec_b = svsel_s32(pg_min, svdup_n_s32(int32_min), vec_b);\n\n        svst1_s32(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svfloat32_t max_val = svdup_f32(INT32_MAX);\n    svfloat32_t min_val = svdup_f32(INT32_MIN);\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t vec_a = svld1_f32(pg, A + i);\n        svfloat32_t clamped = svmin_f32(svmax_f32(vec_a, min_val), max_val);\n        svint32_t vec_b = svcvt_s32_f32_x(pg, clamped);\n        svst1_s32(pg, B + i, vec_b);\n    }\n\n    for (; i < size; ++i) {\n        float val = A[i];\n        if (val > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (val < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)val;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    const int32_t int32_max = INT32_MAX;\n    const int32_t int32_min = INT32_MIN;\n    const float float_int32_max = (float)INT32_MAX;\n    const float float_int32_min = (float)INT32_MIN;\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vec_a = svld1_f32(pg, &A[i]);\n\n        svbool_t pg_max = svcmpgt_n_f32(pg, vec_a, float_int32_max);\n        svbool_t pg_min = svcmplt_n_f32(pg, vec_a, float_int32_min);\n\n        svint32_t vec_b = svcvt_s32_f32_z(pg, vec_a);\n        vec_b = svsel_s32(pg_max, svdup_n_s32(int32_max), vec_b);\n        vec_b = svsel_s32(pg_min, svdup_n_s32(int32_min), vec_b);\n\n        svst1_s32(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    const float scale_factor = static_cast<float>(scale);\n    size_t i = 0;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svint32_t vec_a = svld1(svptrue_b32(), A + i);\n        svfloat32_t vec_b = svcvt_f32_z(svptrue_b32(), vec_a);\n        vec_b = svmul_z(svptrue_b32(), vec_b, svdup_f32(scale_factor));\n        svst1(svptrue_b32(), B + i, vec_b);\n    }\n\n    for (; i < size; ++i) {\n        B[i] = static_cast<float>(A[i]) * scale_factor;\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, size);\n    svfloat32_t scale_vec = svdup_f32((float)scale);\n\n    while (svptest_any(svptrue_b32(), pg)) {\n        svint32_t vec_a = svld1(pg, &A[i]);\n        svfloat32_t vec_b = svcvt_f32_z(pg, svptrue_b32(), vec_a);\n        vec_b = svmul_z(pg, svptrue_b32(), vec_b, scale_vec);\n        svst1(pg, &B[i], vec_b);\n\n        i += svcntw();\n        pg = svwhilelt_b32(i, size);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    const float scale_factor = (float)scale;\n    size_t i = 0;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svint32_t vec_a = svld1(svptrue_b32(), &A[i]);\n        svfloat32_t vec_b = svcvt_f32_z(svptrue_b32(), vec_a);\n        vec_b = svmul_n_f32_z(svptrue_b32(), vec_b, scale_factor);\n        svst1(svptrue_b32(), &B[i], vec_b);\n    }\n\n    for (; i < size; ++i) {\n        B[i] = (float)A[i] * scale_factor;\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    const float scale_f = static_cast<float>(scale);\n    const svbool_t pg = svptrue_b32();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec_a = svld1(pg, &A[i]);\n        svfloat32_t vec_b = svcvt_f32_z(pg, svmul_n_z(pg, vec_a, scale_f));\n        svst1(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    const float scale_f = static_cast<float>(scale);\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svfloat32_t vec_B = svcvt_f32_z(pg, svptrue_b32(), vec_A);\n        vec_B = svmul_n_f32_z(pg, vec_B, scale_f);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t vec_a = svld1(pg, &A[i]);\n        svfloat32_t vec_b = svld1(pg, &B[i]);\n        svfloat32_t vec_div = svdiv_z(pg, vec_a, vec_b);\n        svint32_t vec_round = svcvt_s32_z(pg, vec_div);\n        svst1(pg, &C[i], vec_round);\n    }\n\n    for (; i < size; ++i) {\n        C[i] = (int32_t)(A[i] / B[i] + 0.5f);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vecA = svld1(pg, &A[i]);\n        svfloat32_t vecB = svld1(pg, &B[i]);\n        svfloat32_t vecC = svdiv_z(pg, vecA, vecB);\n        svint32_t vecD = svcvt_s32_z(pg, vecC);\n        svst1(pg, &C[i], vecD);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vecA = svld1(pg, &A[i]);\n        svfloat32_t vecB = svld1(pg, &B[i]);\n        svfloat32_t vecC = svdiv_z(pg, vecA, vecB);\n        svint32_t vecD = svcvt_s32_z(pg, vecC);\n        svst1(pg, &C[i], vecD);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t i = 0;\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t vec_A = svld1(svptrue_b32(), A + i);\n        svfloat32_t vec_B = svld1(svptrue_b32(), B + i);\n        svfloat32_t vec_div = svdiv_z(svptrue_b32(), vec_A, vec_B);\n        svint32_t vec_round = svcvt_s32_z(svptrue_b32(), vec_div);\n        svst1(svptrue_b32(), C + i, vec_round);\n    }\n    for (; i < size; ++i) {\n        C[i] = (int32_t)(A[i] / B[i] + 0.5f);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vecA = svld1(pg, &A[i]);\n        svfloat32_t vecB = svld1(pg, &B[i]);\n        svfloat32_t vecC = svdiv_z(pg, vecA, vecB);\n        svint32_t vecD = svcvt_s32_z(pg, vecC);\n        svst1(pg, &C[i], vecD);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    const float FLT_MAX_VAL = FLT_MAX;\n    const float NEG_FLT_MAX_VAL = -FLT_MAX;\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, size);\n        svfloat64_t vec_a = svld1_gather_s64(pg, A + i);\n        svfloat32_t vec_b = svcvt_f32_x(pg, vec_a);\n\n        svbool_t pg_gt = svcmpgt_n_f32(pg, vec_b, FLT_MAX_VAL);\n        svbool_t pg_lt = svcmplt_n_f32(pg, vec_b, NEG_FLT_MAX_VAL);\n\n        vec_b = svsel_f32(pg_gt, svdup_n_f32(FLT_MAX_VAL), vec_b);\n        vec_b = svsel_f32(pg_lt, svdup_n_f32(NEG_FLT_MAX_VAL), vec_b);\n\n        svst1_gather_s32(pg, B + i, vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    const float FLT_MAX_VAL = FLT_MAX;\n    const float NEG_FLT_MAX_VAL = -FLT_MAX;\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, size);\n        svfloat64_t vec_a = svld1_gather_s64(pg, A + i);\n        svfloat32_t vec_b = svcvt_f32_x(pg, vec_a);\n\n        svbool_t pg_gt = svcmpgt_n_f32(pg, vec_b, FLT_MAX_VAL);\n        svbool_t pg_lt = svcmplt_n_f32(pg, vec_b, NEG_FLT_MAX_VAL);\n\n        vec_b = svsel_f32(pg_gt, svdup_n_f32(FLT_MAX_VAL), vec_b);\n        vec_b = svsel_f32(pg_lt, svdup_n_f32(NEG_FLT_MAX_VAL), vec_b);\n\n        svst1_gather_s32(pg, B + i, vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    const float FLT_MAX_VAL = FLT_MAX;\n    const float NEG_FLT_MAX_VAL = -FLT_MAX;\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, size);\n        svfloat64_t vec_a = svld1_gather_s64(pg, A + i);\n        svfloat32_t vec_b = svcvt_f32_x(pg, vec_a);\n\n        svbool_t pg_gt = svcmpgt_n_f32(pg, vec_b, FLT_MAX_VAL);\n        svbool_t pg_lt = svcmplt_n_f32(pg, vec_b, NEG_FLT_MAX_VAL);\n\n        vec_b = svsel_f32(pg_gt, svdup_n_f32(FLT_MAX_VAL), vec_b);\n        vec_b = svsel_f32(pg_lt, svdup_n_f32(NEG_FLT_MAX_VAL), vec_b);\n\n        svst1_gather_s32(pg, B + i, vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    const double max_float = FLT_MAX;\n    const double min_float = -FLT_MAX;\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, size);\n        svfloat64_t vec_a = svld1_gather_s64(pg, A + i);\n        svfloat64_t vec_max = svdup_f64(max_float);\n        svfloat64_t vec_min = svdup_f64(min_float);\n\n        vec_a = svmin_f64_x(pg, vec_a, vec_max);\n        vec_a = svmax_f64_x(pg, vec_a, vec_min);\n\n        svfloat32_t vec_b = svcvt_f32_f64_x(pg, vec_a);\n        svst1_gather_s32(pg, B + i, vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    const float FLT_MAX_VAL = FLT_MAX;\n    const float NEG_FLT_MAX_VAL = -FLT_MAX;\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, size);\n        svfloat64_t vec_a = svld1_gather_s64(pg, A + i);\n        svfloat32_t vec_b = svcvt_f32_x(pg, vec_a);\n\n        svbool_t pg_gt = svcmpgt_n_f32(pg, vec_b, FLT_MAX_VAL);\n        svbool_t pg_lt = svcmplt_n_f32(pg, vec_b, NEG_FLT_MAX_VAL);\n\n        vec_b = svsel_f32(pg_gt, svdup_n_f32(FLT_MAX_VAL), vec_b);\n        vec_b = svsel_f32(pg_lt, svdup_n_f32(NEG_FLT_MAX_VAL), vec_b);\n\n        svst1_gather_s32(pg, B + i, vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svint16_t vec_a = svld1_s16(pg, &A[i]);\n        svst1_s32(pg, &B[i], svcvt_s32_s16(vec_a));\n    }\n\n    for (; i < size; ++i) {\n        B[i] = A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svint16_t vec_a = svld1_s16(pg, &A[i]);\n        svst1_s32(pg, &B[i], svcvt_s32_s16(vec_a));\n    }\n\n    for (; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svint16_t vec_a = svld1_s16(pg, &A[i]);\n        svint32_t vec_b = svcvt_s32(pg, vec_a);\n        svst1_s32(pg, &B[i], vec_b);\n    }\n\n    for (; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svint16_t vec_a = svld1_s16(pg, &A[i]);\n        svst1_s32(pg, &B[i], svcvt_s32_m(svptrue_b32(), vec_a));\n    }\n\n    for (; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b16();\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svint16_t vec_a = svld1_s16(pg, A + i);\n        svst1_s32(pg, B + i, svcvt_s32_s16(vec_a));\n    }\n\n    for (; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svfloat32_t min_val_vec = svdup_f32(min_val);\n    svfloat32_t max_val_vec = svdup_f32(max_val);\n    svfloat32_t zero_vec = svdup_f32(0.0f);\n    svfloat32_t one_vec = svdup_f32(1.0f);\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t a_vec = svld1_f32(pg, &A[i]);\n        svint32_t control_vec = svld1_s32(pg, &control[i]);\n\n        svbool_t pg_gt_zero = svcmpgt_n_s32(pg, control_vec, 0);\n        svfloat32_t normalized_vec = svdiv_f32_z(pg, svsub_f32_z(pg, a_vec, min_val_vec), svsub_f32_z(pg, max_val_vec, min_val_vec));\n        normalized_vec = svmax_f32_z(pg, normalized_vec, zero_vec);\n        normalized_vec = svmin_f32_z(pg, normalized_vec, one_vec);\n\n        svfloat32_t result_vec = svsel_f32(pg, normalized_vec, a_vec, pg_gt_zero);\n        svst1_f32(pg, &B[i], result_vec);\n    }\n\n    for (; i < size; ++i) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / (max_val - min_val);\n            val = val < 0.0f ? 0.0f : (val > 1.0f ? 1.0f : val);\n            B[i] = val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    const float range = max_val - min_val;\n    const float zero = 0.0f;\n    const float one = 1.0f;\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svbool_t pg = svptrue_b32();\n        svfloat32_t vA = svld1(pg, &A[i]);\n        svint32_t vControl = svld1(pg, &control[i]);\n\n        svbool_t pg_gt_zero = svcmpgt(pg, vControl, svdup_s32(0));\n        svfloat32_t vNorm = svdiv(svsub(vA, svdup_f32(min_val)), svdup_f32(range));\n        vNorm = svmax(svmin(vNorm, svdup_f32(one)), svdup_f32(zero));\n\n        svfloat32_t vResult = svsel(pg_gt_zero, vNorm, vA);\n        svst1(pg, &B[i], vResult);\n    }\n\n    for (; i < size; ++i) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / range;\n            B[i] = (val < 0.0f) ? 0.0f : (val > 1.0f) ? 1.0f : val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svfloat32_t min_val_vec = svdup_f32(min_val);\n    svfloat32_t max_val_vec = svdup_f32(max_val);\n    svfloat32_t zero_vec = svdup_f32(0.0f);\n    svfloat32_t one_vec = svdup_f32(1.0f);\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t a_vec = svld1_f32(pg, &A[i]);\n        svint32_t control_vec = svld1_s32(pg, &control[i]);\n\n        svbool_t pg_gt_zero = svcmpgt_n_s32(pg, control_vec, 0);\n        svfloat32_t normalized_vec = svdiv_f32_z(pg, svsub_f32_z(pg, a_vec, min_val_vec), svsub_f32_z(pg, max_val_vec, min_val_vec));\n        normalized_vec = svmax_f32_z(pg, normalized_vec, zero_vec);\n        normalized_vec = svmin_f32_z(pg, normalized_vec, one_vec);\n\n        svfloat32_t result_vec = svsel_f32(pg, normalized_vec, a_vec, pg_gt_zero);\n        svst1_f32(pg, &B[i], result_vec);\n    }\n\n    for (; i < size; ++i) {\n        if (control[i] > 0) {\n            float normalized_val = (A[i] - min_val) / (max_val - min_val);\n            normalized_val = fmaxf(0.0f, fminf(1.0f, normalized_val));\n            B[i] = normalized_val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    const float range = max_val - min_val;\n    const svbool_t pg = svptrue_b32();\n\n    for (; i <= size - svcntw(); i += svcntw()) {\n        svfloat32_t a_vec = svld1(pg, &A[i]);\n        svint32_t ctrl_vec = svld1(pg, &control[i]);\n\n        svbool_t pg_gt_zero = svcmpgt(pg, ctrl_vec, svdup_s32(0));\n        svfloat32_t normalized_vec = svdiv_f32_z(pg, svsub_f32_z(pg, a_vec, svdup_f32(min_val)), svdup_f32(range));\n        normalized_vec = svmax_f32_z(pg, normalized_vec, svdup_f32(0.0f));\n        normalized_vec = svmin_f32_z(pg, normalized_vec, svdup_f32(1.0f));\n\n        svfloat32_t result_vec = svsel_f32(pg_gt_zero, normalized_vec, a_vec);\n        svst1(pg, &B[i], result_vec);\n    }\n\n    for (; i < size; ++i) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / range;\n            val = val < 0.0f ? 0.0f : (val > 1.0f ? 1.0f : val);\n            B[i] = val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    const float range = max_val - min_val;\n    const float zero = 0.0f;\n    const float one = 1.0f;\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svfloat32_t a_vec = svld1(pg, &A[i]);\n        svint32_t ctrl_vec = svld1(pg, &control[i]);\n\n        svbool_t pg_gt_zero = svcmpgt(pg, ctrl_vec, 0);\n\n        svfloat32_t normalized_vec = svsub(pg, a_vec, svdup_f32(min_val));\n        normalized_vec = svdiv(pg, normalized_vec, svdup_f32(range));\n        normalized_vec = svmax(pg, normalized_vec, svdup_f32(zero));\n        normalized_vec = svmin(pg, normalized_vec, svdup_f32(one));\n\n        svfloat32_t result_vec = svsel(pg_gt_zero, normalized_vec, a_vec);\n\n        svst1(pg, &B[i], result_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svuint32_t high_bits = svlsr_n_u32_z(pg, vec_A, 16);\n        svfloat32_t vec_B = svcvt_f32_u32_z(pg, high_bits);\n        vec_B = svsqrt_f32_z(pg, vec_B);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svuint32_t high_bits = svlsr_n_u32_z(pg, vec_A, 16);\n        svfloat32_t vec_B = svcvt_f32_z(pg, high_bits);\n        vec_B = svsqrt_f32_z(pg, vec_B);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svuint32_t high_bits = svlsr_z(pg, vec_A, 16);\n        svfloat32_t vec_B = svcvt_f32_z(pg, high_bits);\n        vec_B = svsqrt_z(pg, vec_B);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svuint32_t high_bits = svlsr_n_u32_z(pg, vec_A, 16);\n        svfloat32_t vec_B = svcvt_f32_u32_z(pg, high_bits);\n        vec_B = svsqrt_f32_z(pg, vec_B);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svuint32_t high_bits = svlsr_n_u32_z(pg, vec_A, 16);\n        svfloat32_t vec_B = svcvt_f32_u32_z(pg, high_bits);\n        vec_B = svsqrt_f32_z(pg, vec_B);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svfloat32_t vec_B = svreinterpret_f32(vec_A);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_A = svld1(pg, &A[i]);\n        svfloat32_t vec_B = svreinterpret_f32(vec_A);\n        svst1(pg, &B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_a = svld1(pg, &A[i]);\n        svfloat32_t vec_b = svreinterpret_f32(vec_a);\n        svst1(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_a = svld1(pg, &A[i]);\n        svfloat32_t vec_b = svreinterpret_f32(vec_a);\n        svst1(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t vec_a = svld1(pg, &A[i]);\n        svfloat32_t vec_b = svreinterpret_f32(vec_a);\n        svst1(pg, &B[i], vec_b);\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    // Handle the first element\n    diff[0] = 0.0f;\n    i++;\n\n    // Process the rest of the elements\n    for (; i + svcntb() <= size; i += svcntb()) {\n        svbool_t pg_cond = svld1b_s32(pg, cond + i);\n        svint32_t sv_A = svld1_s32(pg, A + i);\n        svint32_t sv_A_prev = svld1_s32(pg, A + i - 1);\n\n        svint32_t sv_diff_int = svsub_s32_x(pg, sv_A, sv_A_prev);\n        svfloat32_t sv_diff_float = svcvt_f32_s32_x(pg, sv_diff_int);\n\n        svfloat32_t sv_diff = svsel_f32(pg, sv_diff_float, svdup_f32(pg, 0.0f), pg_cond);\n\n        svst1_f32(pg, diff + i, sv_diff);\n    }\n\n    // Handle the remaining elements\n    for (; i < size; i++) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    // Handle the first element\n    diff[0] = 0.0f;\n    i++;\n\n    // Process the rest of the elements\n    for (; i + svcntb() <= size; i += svcntb()) {\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t vec_cond = svld1(pg, &cond[i]);\n\n        svint32_t vec_A_prev = svld1(pg, &A[i - 1]);\n        svint32_t vec_diff_int = svsub(pg, vec_A, vec_A_prev);\n\n        svfloat32_t vec_diff_float = svcvt_f32(pg, vec_diff_int);\n        svfloat32_t vec_diff = svsel(pg, vec_diff_float, svdup_f32(0.0f), vec_cond);\n\n        svst1(pg, &diff[i], vec_diff);\n    }\n\n    // Handle the remaining elements\n    for (; i < size; i++) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    // Handle the first element\n    diff[0] = 0.0f;\n    i++;\n\n    // Process the remaining elements\n    for (; i + svcntb() <= size; i += svcntb()) {\n        svint32_t a_vec = svld1(pg, &A[i]);\n        svbool_t cond_vec = svld1(pg, &cond[i]);\n\n        svint32_t a_prev_vec = svld1(pg, &A[i - 1]);\n        svint32_t diff_int_vec = svsub_z(pg, a_vec, a_prev_vec);\n\n        svfloat32_t diff_float_vec = svcvt_f32_z(pg, diff_int_vec);\n        svfloat32_t result_vec = svsel_f32_z(pg, svdup_f32_z(pg, 0.0f), diff_float_vec, cond_vec);\n\n        svst1(pg, &diff[i], result_vec);\n    }\n\n    // Handle the remaining elements\n    for (; i < size; i++) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b8();\n\n    // Handle the first element\n    diff[0] = 0.0f;\n    i++;\n\n    // Process the rest of the elements\n    for (; i + svcntw() <= size; i += svcntw()) {\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t vec_cond = svld1(pg, &cond[i]);\n\n        svint32_t vec_A_prev = svld1(pg, &A[i - 1]);\n        svint32_t vec_diff_int = svsub_x(pg, vec_A, vec_A_prev);\n\n        svfloat32_t vec_diff_float = svcvt_f32_x(pg, vec_diff_int);\n        svfloat32_t vec_diff = svsel_f32(pg, vec_diff_float, svdup_f32(0.0f), vec_cond);\n\n        svst1(pg, &diff[i], vec_diff);\n    }\n\n    // Handle the remaining elements\n    for (; i < size; i++) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n\n    // Handle the first element\n    diff[0] = 0.0f;\n    i++;\n\n    // Process the rest of the elements\n    for (; i + svcntw() <= size; i += svcntw()) {\n        svint32_t vec_A = svld1(pg, &A[i]);\n        svbool_t vec_cond = svld1(pg, &cond[i]);\n\n        svint32_t vec_A_prev = svld1(pg, &A[i - 1]);\n        svint32_t vec_diff_int = svsub(pg, vec_A, vec_A_prev);\n\n        svfloat32_t vec_diff_float = svcvt_f32(pg, vec_diff_int);\n        svfloat32_t vec_diff = svsel_f32(pg, vec_diff_float, svdup_f32(0.0f), vec_cond);\n\n        svst1(pg, &diff[i], vec_diff);\n    }\n\n    // Handle the remaining elements\n    for (; i < size; i++) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svuint32_t src_vec;\n    svuint64_t dst_vec;\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        src_vec = svld1_u32(pg, src + i);\n        dst_vec = svuzp1_u64(svptrue_b64(), svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, dst + i, dst_vec);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        src_vec = svld1_u32(pg, src + i);\n        dst_vec = svuzp1_u64(svptrue_b64(), svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, dst + i, dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svuint32_t src_vec;\n    svuint64_t dst_vec, ones_vec;\n\n    ones_vec = svdup_n_u64(0xFFFFFFFF00000000);\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        src_vec = svld1_u32(pg, &src[i]);\n        dst_vec = svuzp1_u64(svdup_n_u64(0), src_vec);\n        dst_vec = svadd_u64_z(pg, dst_vec, ones_vec);\n        svst1_u64(pg, &dst[i], dst_vec);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        src_vec = svld1_u32(pg, &src[i]);\n        dst_vec = svuzp1_u64(svdup_n_u64(0), src_vec);\n        dst_vec = svadd_u64_z(pg, dst_vec, ones_vec);\n        svst1_u64(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svuint32_t src_vec;\n    svuint64_t dst_vec;\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        src_vec = svld1_u32(pg, src + i);\n        dst_vec = svuzp1_u64(svptrue_b64(), svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, dst + i, dst_vec);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        src_vec = svld1_u32(pg, src + i);\n        dst_vec = svuzp1_u64(svptrue_b64(), svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, dst + i, dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svuint32_t src_vec;\n    svuint64_t dst_vec;\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        src_vec = svld1_u32(pg, src + i);\n        dst_vec = svuzp1_u64(svptrue_b64(), svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, dst + i, dst_vec);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        src_vec = svld1_u32(pg, src + i);\n        dst_vec = svuzp1_u64(pg, svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, dst + i, dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svptrue_b32();\n    svuint32_t src_vec;\n    svuint64_t dst_vec;\n\n    for (; i <= length - svcntw(); i += svcntw()) {\n        src_vec = svld1_u32(pg, &src[i]);\n        dst_vec = svuzp1_u64(svptrue_b64(), svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, &dst[i], dst_vec);\n    }\n\n    if (i < length) {\n        pg = svwhilelt_b32(i, length);\n        src_vec = svld1_u32(pg, &src[i]);\n        dst_vec = svuzp1_u64(svptrue_b64(), svreinterpret_u64(svdup_n_u32(0xFFFFFFFF)), svreinterpret_u64(src_vec));\n        svst1_u64(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    size_t i = 0;\n\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint16_t idx_vec = svld1_s16(pg, &index[i]);\n        svbool_t valid_idx = svcmpge(svptrue_b16(), idx_vec, 0);\n        valid_idx = svand_z(pg, valid_idx, svcmplt(svptrue_b16(), idx_vec, length));\n        svuint64_t uidx_vec = svreinterpret_u64(svptrue_b16(), idx_vec);\n        svfloat64_t vec_vals = svld1_gather_s64index_f64(pg, vec, uidx_vec);\n        sum += svaddv_f64(pg, vec_vals);\n    }\n\n    for (; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    size_t i = 0;\n\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint16_t idx_vec = svld1_s16(pg, &index[i]);\n        svbool_t valid_idx = svcmpge_s16(pg, idx_vec, 0);\n        valid_idx = svand_b_z(pg, valid_idx, svcmplt_s16(pg, idx_vec, length));\n        svuint64_t uidx_vec = svreinterpret_u64(svadd_s16_z(svptrue_b16(), idx_vec, 0));\n        svfloat64_t vec_vals = svld1_gather_s64index_f64(pg, vec, uidx_vec);\n        sum += svaddv_f64(pg, vec_vals);\n    }\n\n    for (; i < length; ++i) {\n        int16_t idx = index[i];\n        if (idx >= 0 && idx < length) {\n            sum += vec[idx];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    size_t i = 0;\n\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint16_t idx_vec = svld1_s16(pg, &index[i]);\n        svuint64_t uidx_vec = svreinterpret_u64(svadd_x(svptrue_b64(), idx_vec, 0));\n        svbool_t valid_idx = svcmplt_u64(uidx_vec, length);\n        svfloat64_t vec_vals = svld1_gather_s64index_f64(pg, vec, idx_vec);\n        sum += svaddv_f64(valid_idx, vec_vals);\n    }\n\n    for (; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    size_t i = 0;\n\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint16_t idx_vec = svld1_s16(pg, &index[i]);\n        svbool_t pg_valid = svcmpge_s16(pg, idx_vec, 0);\n        pg_valid = svand_z(pg_valid, pg, svcmplt_s16(pg, idx_vec, length));\n\n        svfloat64_t vec_vals = svld1_gather_s64(pg_valid, &vec[0], idx_vec);\n        sum += svaddv_s64(pg_valid, vec_vals);\n    }\n\n    for (; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    size_t i = 0;\n    const size_t vl = svcntd();\n\n    for (; i <= length - vl; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint16_t idx_vec = svld1_s16(pg, &index[i]);\n        svbool_t pg_valid = svcmpge_s16(pg, idx_vec, 0);\n        pg_valid = svand_b_z(pg_valid, svcmplt_s16(pg, idx_vec, length));\n        svuint64_t idx_vec_u64 = svreinterpret_u64(svptrue_b64(), idx_vec);\n        svfloat64_t vec_vals = svld1_gather_s64index_f64(pg_valid, vec, idx_vec_u64);\n        sum += svaddv_f64(pg_valid, vec_vals);\n    }\n\n    for (; i < length; ++i) {\n        int16_t idx = index[i];\n        if (idx >= 0 && idx < length) {\n            sum += vec[idx];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t output_length = output_size * output_size;\n\n    for (size_t i = 0; i < output_length; ++i) {\n        size_t row = i / output_size;\n        size_t col = i % output_size;\n\n        double sum = 0.0;\n\n        for (size_t ki = 0; ki < kernel_size; ++ki) {\n            for (size_t kj = 0; kj < kernel_size; ++kj) {\n                size_t input_row = row + ki;\n                size_t input_col = col + kj;\n                size_t input_index = input_row * input_size + input_col;\n                size_t kernel_index = ki * kernel_size + kj;\n\n                sum += input[input_index] * kernel[kernel_index];\n            }\n        }\n\n        output[i] = sum > 0.0 ? sum : 0.0;\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t output_len = output_size * output_size;\n\n    for (size_t i = 0; i < output_len; ++i) {\n        size_t row = i / output_size;\n        size_t col = i % output_size;\n\n        double sum = 0.0;\n        for (size_t k_row = 0; k_row < kernel_size; ++k_row) {\n            for (size_t k_col = 0; k_col < kernel_size; ++k_col) {\n                size_t input_index = (row + k_row) * input_size + (col + k_col);\n                size_t kernel_index = k_row * kernel_size + k_col;\n                sum += input[input_index] * kernel[kernel_index];\n            }\n        }\n\n        output[i] = sum > 0.0 ? sum : 0.0;\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t output_length = output_size * output_size;\n\n    for (size_t i = 0; i < output_length; ++i) {\n        size_t row = i / output_size;\n        size_t col = i % output_size;\n\n        svbool_t pg = svptrue_b64();\n        svfloat64_t sum = svdup_f64(0.0);\n\n        for (size_t ki = 0; ki < kernel_size; ++ki) {\n            for (size_t kj = 0; kj < kernel_size; ++kj) {\n                size_t input_index = (row + ki) * input_size + (col + kj);\n                size_t kernel_index = ki * kernel_size + kj;\n\n                svfloat64_t input_val = svld1_f64(pg, &input[input_index]);\n                svfloat64_t kernel_val = svld1_f64(pg, &kernel[kernel_index]);\n\n                sum = svmla_f64_x(pg, sum, input_val, kernel_val);\n            }\n        }\n\n        svfloat64_t relu_result = svmax_f64_x(pg, sum, svdup_f64(0.0));\n        svst1_f64(pg, &output[i], relu_result);\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t output_length = output_size * output_size;\n\n    for (size_t i = 0; i < output_length; ++i) {\n        size_t row = i / output_size;\n        size_t col = i % output_size;\n\n        svfloat64_t sum = svdup_f64(0.0);\n\n        for (size_t k_row = 0; k_row < kernel_size; ++k_row) {\n            for (size_t k_col = 0; k_col < kernel_size; ++k_col) {\n                size_t input_index = (row + k_row) * input_size + (col + k_col);\n                size_t kernel_index = k_row * kernel_size + k_col;\n\n                svfloat64_t input_val = svld1_f64(svptrue_b64(), &input[input_index]);\n                svfloat64_t kernel_val = svld1_f64(svptrue_b64(), &kernel[kernel_index]);\n\n                sum = svmla_f64_z(svptrue_b64(), sum, input_val, kernel_val);\n            }\n        }\n\n        svfloat64_t relu_result = svmax_f64_z(svptrue_b64(), sum, svdup_f64(0.0));\n        svst1_f64(svptrue_b64(), &output[i], relu_result);\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t output_length = output_size * output_size;\n\n    for (size_t i = 0; i < output_length; ++i) {\n        size_t row = i / output_size;\n        size_t col = i % output_size;\n\n        double sum = 0.0;\n        for (size_t k_row = 0; k_row < kernel_size; ++k_row) {\n            for (size_t k_col = 0; k_col < kernel_size; ++k_col) {\n                size_t input_index = (row + k_row) * input_size + (col + k_col);\n                size_t kernel_index = k_row * kernel_size + k_col;\n                sum += input[input_index] * kernel[kernel_index];\n            }\n        }\n\n        output[i] = sum > 0.0 ? sum : 0.0; // ReLU activation\n    }\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    const double *data = numbers.data();\n    size_t n = numbers.size();\n    svbool_t pg = svptrue_b64();\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat64_t vi = svld1(pg, &data[i]);\n        for (size_t j = i + 1; j < n; ++j) {\n            svfloat64_t vj = svld1(pg, &data[j]);\n            svfloat64_t diff = svabs_f64_z(pg, svsub_f64_z(pg, vi, vj));\n            svbool_t close = svcmplt_f64(pg, diff, svdup_f64(threshold));\n            if (svptest_any(svptrue_b64(), close)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    const double *data = numbers.data();\n    size_t n = numbers.size();\n    svbool_t pg = svptrue_b64();\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat64_t vi = svld1(pg, data + i);\n        for (size_t j = i + 1; j < n; ++j) {\n            svfloat64_t vj = svld1(pg, data + j);\n            svfloat64_t diff = svabs_f64_z(pg, svsub_f64_z(pg, vi, vj));\n            svbool_t close = svcmplt_f64(pg, diff, svdup_f64(threshold));\n            if (svptest_any(svptrue_b64(), close)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    const double* data = numbers.data();\n    size_t n = numbers.size();\n\n    for (size_t i = 0; i < n; ++i) {\n        svbool_t pg = svwhilelt_b64(i, n);\n        svfloat64_t vec_a = svld1_gather_f64(pg, data + i);\n        svfloat64_t vec_b = svld1_gather_f64(pg, data + i + 1);\n\n        svfloat64_t diff = svabs_f64_x(pg, svsub_f64_x(pg, vec_a, vec_b));\n        svbool_t close_pg = svcmpge_f64(pg, diff, svdup_f64(threshold));\n\n        if (svptest_any(svptrue_b64(), close_pg)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    const double *data = numbers.data();\n    size_t n = numbers.size();\n    svbool_t pg = svwhilelt_b64(0, n);\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat64_t vi = svld1(pg, data + i);\n        for (size_t j = i + 1; j < n; ++j) {\n            svfloat64_t vj = svld1(pg, data + j);\n            svfloat64_t diff = svabs_f64_z(pg, svsub_f64_z(pg, vi, vj));\n            svbool_t close = svcmpge_f64(pg, threshold, diff);\n            if (svptest_any(svptrue_b64(), close)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    const double *data = numbers.data();\n    size_t n = numbers.size();\n\n    svbool_t pg = svptrue_b8();\n    svfloat64_t threshold_vec = svdup_f64(threshold);\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat64_t vec_i = svdup_f64(data[i]);\n        svfloat64_t diff = svabs_f64_z(pg, svsub_f64_z(pg, vec_i, svld1_f64(pg, data + i + 1)));\n        svbool_t close = svcmpge_f64(pg, threshold_vec, diff);\n\n        if (svptest_any(svptrue_b8(), close)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\nbool below_zero_simd(std::vector<int> operations) {\n    int balance = 0;\n    size_t n = operations.size();\n    size_t i = 0;\n\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svint32_t vec = svld1(svptrue_b32(), &operations[i]);\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t running_balance = svadd_x(pg, balance, vec);\n        svbool_t below_zero = svcmplt(pg, running_balance, 0);\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n        balance = svlastb(pg, running_balance, balance);\n    }\n\n    for (; i < n; ++i) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\nbool below_zero_simd(std::vector<int> operations) {\n    size_t n = operations.size();\n    int32_t balance = 0;\n    svbool_t pg = svptrue_b32();\n    svint32_t v_balance = svdup_s32(balance);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svint32_t v_operations = svld1_s32(pg, &operations[i]);\n        v_balance = svadd_s32_z(pg, v_balance, v_operations);\n        svbool_t below_zero = svcmplt_s32(v_balance, 0);\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\nbool below_zero_simd(std::vector<int> operations) {\n    intptr_t n = operations.size();\n    const int* ptr = operations.data();\n    svbool_t pg = svptrue_b32();\n    svint32_t balance = svdup_n_s32(0);\n\n    for (intptr_t i = 0; i < n; i += svcntw()) {\n        svint32_t ops = svld1(pg, ptr + i);\n        balance = svadd_z(pg, balance, ops);\n        svbool_t below_zero = svcmplt(pg, balance, svdup_n_s32(0));\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\nbool below_zero_simd(std::vector<int> operations) {\n    intptr_t n = operations.size();\n    const int* ptr = operations.data();\n    svbool_t pg = svptrue_b32();\n    svint32_t balance = svdup_s32(0);\n\n    for (intptr_t i = 0; i < n; i += svcntw()) {\n        svint32_t ops = svld1_s32(pg, ptr + i);\n        balance = svadd_s32_z(pg, balance, ops);\n        svbool_t below_zero = svcmplt_s32(balance, 0);\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\nbool below_zero_simd(std::vector<int> operations) {\n    intptr_t n = operations.size();\n    const int *ptr = operations.data();\n    svbool_t pg = svptrue_b32();\n    svint32_t balance = svdup_s32(0);\n\n    for (intptr_t i = 0; i < n; i += svcntw()) {\n        svint32_t ops = svld1(pg, ptr + i);\n        balance = svadd_s32_z(pg, balance, ops);\n        svbool_t below_zero = svcmplt_s32(balance, 0);\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) return 0.0;\n\n    double sum = 0.0;\n    svbool_t pg = svptrue_b64();\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t v = svld1_f64(pg, &numbers[i]);\n        vsum = svadd_f64_z(pg, vsum, v);\n    }\n\n    sum = svaddv_f64(pg, vsum);\n\n    double mean = sum / n;\n\n    svfloat64_t vmean = svdup_f64(mean);\n    svfloat64_t vabs_diff_sum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t v = svld1_f64(pg, &numbers[i]);\n        svfloat64_t vdiff = svabs_f64_z(pg, svsub_f64_z(pg, v, vmean));\n        vabs_diff_sum = svadd_f64_z(pg, vabs_diff_sum, vdiff);\n    }\n\n    double abs_diff_sum = svaddv_f64(pg, vabs_diff_sum);\n\n    return abs_diff_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n    svbool_t pg = svptrue_b64();\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, n);\n        svfloat64_t vec = svld1(pg, &numbers[i]);\n        sum += svaddv(pg, vec);\n    }\n\n    double mean = sum / n;\n    double mad_sum = 0.0;\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, n);\n        svfloat64_t vec = svld1(pg, &numbers[i]);\n        svfloat64_t diff = svabs_f64_z(pg, svsub_f64_z(pg, vec, svdup_f64(mean)));\n        mad_sum += svaddv(pg, diff);\n    }\n\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) return 0.0;\n\n    svbool_t pg = svptrue_b8();\n    svfloat64_t sum = svdup_f64(0.0);\n    svfloat64_t mean = svdup_f64(0.0);\n    svfloat64_t mad_sum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t vec = svld1_f64(pg, &numbers[i]);\n        sum = svadd_f64_z(pg, sum, vec);\n    }\n\n    mean = svdiv_f64_z(pg, sum, svdup_f64(n));\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t vec = svld1_f64(pg, &numbers[i]);\n        svfloat64_t diff = svabs_f64_z(pg, svsub_f64_z(pg, vec, mean));\n        mad_sum = svadd_f64_z(pg, mad_sum, diff);\n    }\n\n    double mad = svaddv_f64(pg, mad_sum) / n;\n    return mad;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) return 0.0;\n\n    double sum = 0.0;\n    svbool_t pg = svptrue_b64();\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t v = svld1_f64(pg, &numbers[i]);\n        vsum = svadd_f64_z(pg, vsum, v);\n    }\n\n    sum = svaddv_f64(pg, vsum);\n    double mean = sum / n;\n\n    svfloat64_t vmean = svdup_f64(mean);\n    svfloat64_t vabs_diff_sum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t v = svld1_f64(pg, &numbers[i]);\n        svfloat64_t vdiff = svsub_f64_z(pg, v, vmean);\n        svfloat64_t vabs_diff = svabs_f64_z(pg, vdiff);\n        vabs_diff_sum = svadd_f64_z(pg, vabs_diff_sum, vabs_diff);\n    }\n\n    double abs_diff_sum = svaddv_f64(pg, vabs_diff_sum);\n    return abs_diff_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) return 0.0;\n\n    double sum = 0.0;\n    svbool_t pg = svptrue_b64();\n    svfloat64_t v_sum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t v_numbers = svld1_f64(pg, &numbers[i]);\n        v_sum = svadd_f64_z(pg, v_sum, v_numbers);\n    }\n\n    sum = svaddv_f64(pg, v_sum);\n    double mean = sum / n;\n\n    svfloat64_t v_mean = svdup_f64(mean);\n    svfloat64_t v_mad_sum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t v_numbers = svld1_f64(pg, &numbers[i]);\n        svfloat64_t v_diff = svabs_f64_z(pg, svsub_f64_z(pg, v_numbers, v_mean));\n        v_mad_sum = svadd_f64_z(pg, v_mad_sum, v_diff);\n    }\n\n    double mad_sum = svaddv_f64(pg, v_mad_sum);\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```c++\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec_delim = svdup_s32(delimeter);\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t vec_num = svdup_s32(numbers[i]);\n        svst1_s32(pg, &result[2 * i], vec_num);\n\n        if (i < n - 1) {\n            svst1_s32(pg, &result[2 * i + 1], vec_delim);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec_delim = svdup_s32(delimeter);\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t vec_num = svdup_s32(numbers[i]);\n        svst1_s32(pg, &result[2 * i], vec_num);\n        if (i < n - 1) {\n            svst1_s32(pg, &result[2 * i + 1], vec_delim);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vec_numbers = svld1(pg, numbers.data());\n    svint32_t vec_delimeter = svdup_s32(delimeter);\n\n    svst1(pg, result.data(), vec_numbers);\n    svst1(svptrue_b32(), result.data() + n, vec_delimeter);\n\n    for (size_t i = 1; i < n; ++i) {\n        result[2 * i - 1] = delimeter;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```c++\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec_delim = svdup_s32(delimeter);\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t vec_num = svdup_s32(numbers[i]);\n        svst1_s32(pg, &result[2 * i], vec_num);\n\n        if (i < n - 1) {\n            svst1_s32(pg, &result[2 * i + 1], vec_delim);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec_delim = svdup_s32(delimeter);\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t vec_num = svdup_s32(numbers[i]);\n        svst1_s32(pg, result.data() + 2 * i, vec_num);\n        if (i < n - 1) {\n            svst1_s32(pg, result.data() + 2 * i + 1, vec_delim);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n    size_t n = numbers.size();\n\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, n);\n        svint16_t vec = svld1(pg, &numbers[i]);\n\n        sum += svaddv(pg, vec);\n        product *= svmulv(pg, vec);\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n    size_t n = numbers.size();\n\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, n);\n        svint16_t vec = svld1(pg, &numbers[i]);\n\n        sum += svaddv(pg, vec);\n        product *= svmulv(pg, vec);\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n    size_t n = numbers.size();\n\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, n);\n        svint16_t vec = svld1(pg, &numbers[i]);\n\n        sum += svaddv(pg, vec);\n        product *= svmulv(pg, vec);\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    if (numbers.empty()) {\n        return {sum, product};\n    }\n\n    size_t n = numbers.size();\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < n; i += vl) {\n        size_t current_vl = svmin(vl, n - i);\n        svint16_t vec = svld1(svptrue_b16(), &numbers[i]);\n\n        svbool_t pg = svwhilelt_b16(i, current_vl);\n        sum += svaddv(svptrue_b16(), vec);\n        product *= svmulv(svptrue_b16(), vec);\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n    size_t n = numbers.size();\n\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, n);\n        svint16_t vec = svld1(pg, &numbers[i]);\n\n        sum += svaddv(pg, vec);\n        product *= svmulv(pg, vec);\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    int max_val = numbers[0];\n    result[0] = max_val;\n\n    for (size_t i = 1; i < n; i += svcntw()) {\n        size_t vl = svcntw();\n        svint32_t v_numbers = svld1(svptrue_b32(), &numbers[i]);\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        svint32_t v_max = svdup_s32(max_val);\n        v_max = svmax_s32(v_max, v_numbers);\n        max_val = svmaxv_s32(pg, v_max);\n\n        svst1(pg, &result[i], v_max);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```cpp\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    int32_t max_val = numbers[0];\n    result[0] = max_val;\n\n    for (size_t i = 1; i < n; i += svcntw()) {\n        size_t vl = svcntw();\n        svint32_t vec = svld1(svptrue_b32(), &numbers[i]);\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        svint32_t max_vec = svdup_s32(max_val);\n        max_vec = svmax_s32(max_vec, vec);\n        max_val = svmaxv_s32(pg, max_vec);\n\n        svst1(pg, &result[i], max_vec);\n    }\n\n    for (size_t i = svcntw() * (n / svcntw()); i < n; ++i) {\n        max_val = std::max(max_val, numbers[i]);\n        result[i] = max_val;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    int32_t* input_ptr = numbers.data();\n    int32_t* output_ptr = result.data();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t max_val = svld1(pg, input_ptr);\n    svst1(pg, output_ptr, max_val);\n\n    for (size_t i = 1; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t current_val = svld1(pg, input_ptr + i);\n        max_val = svmax_s32(max_val, current_val);\n        svst1(pg, output_ptr + i, max_val);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    int32_t* input_ptr = numbers.data();\n    int32_t* output_ptr = result.data();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t max_val = svld1(pg, input_ptr);\n    svst1(pg, output_ptr, max_val);\n\n    for (size_t i = 1; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t current_val = svld1(pg, input_ptr + i);\n        max_val = svmax_s32_z(pg, max_val, current_val);\n        svst1(pg, output_ptr + i, max_val);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    svbool_t pg = svptrue_b32();\n    svint32_t max_val = svdup_s32(numbers[0]);\n    result[0] = numbers[0];\n\n    for (size_t i = 1; i < n; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &numbers[i]);\n        max_val = svmax_s32(max_val, vec);\n        svst1_s32(pg, &result[i], max_val);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t len = a.length();\n    std::string result(len, '0');\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t va = svld1_u8(pg, reinterpret_cast<const uint8_t*>(a.data()));\n    svuint8_t vb = svld1_u8(pg, reinterpret_cast<const uint8_t*>(b.data()));\n    svuint8_t vresult = sveor_u8_z(pg, va, vb);\n\n    svst1_u8(pg, reinterpret_cast<uint8_t*>(result.data()), vresult);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t len = a.length();\n    std::string result(len, '0');\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svuint8_t va = svld1_u8(pg, (const uint8_t*)&a[i]);\n        svuint8_t vb = svld1_u8(pg, (const uint8_t*)&b[i]);\n        svuint8_t vres = sveor_u8(va, vb);\n        svst1_u8(pg, (uint8_t*)&result[i], vres);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t len = a.size();\n    std::string result(len, '0');\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, len);\n        svuint8_t va = svld1_u8(pg, reinterpret_cast<const uint8_t*>(a.data()) + i);\n        svuint8_t vb = svld1_u8(pg, reinterpret_cast<const uint8_t*>(b.data()) + i);\n        svuint8_t vres = sveor_u8_z(pg, va, vb);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(result.data()) + i, vres);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t len = a.length();\n    std::string result(len, '0');\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svuint8_t va = svld1b(pg, (const uint8_t*)&a[i]);\n        svuint8_t vb = svld1b(pg, (const uint8_t*)&b[i]);\n        svuint8_t vres = sveor_u8(va, vb);\n        svst1b(pg, (uint8_t*)&result[i], vres);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t len = a.length();\n    std::string result(len, '0');\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svuint8_t va = svld1b(pg, (const uint8_t*)&a[i]);\n        svuint8_t vb = svld1b(pg, (const uint8_t*)&b[i]);\n        svuint8_t vres = sveor_u8(va, vb);\n        svst1b(pg, (uint8_t*)&result[i], vres);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    const size_t n = strings.size();\n    const size_t vl = svcntw();\n\n    for (size_t i = 0; i < n; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svuint32_t lengths = svld1_u32(pg, reinterpret_cast<const uint32_t*>(strings.data() + i));\n\n        svuint32_t max_lengths = svmaxv_u32(pg, lengths);\n        svuint32_t max_indices = svindex_u32(0, 1);\n\n        if (svmaxv_u32(pg, max_lengths) > max_length) {\n            max_length = svmaxv_u32(pg, max_lengths);\n            max_index = svaddv_u32(pg, max_indices);\n        }\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    const size_t vl = svcntw();\n\n    for (size_t i = 0; i < strings.size(); i += vl) {\n        svbool_t pg = svwhilelt_b32(i, strings.size());\n        svuint32_t lengths = svld1(pg, (const uint32_t*)(strings.data() + i), sizeof(std::string));\n\n        svuint32_t max_lengths = svmaxv_u32(max_length, lengths);\n        svbool_t max_pg = svcmpge_u32(max_lengths, max_length);\n\n        if (svptest_any(svptrue_b32(), max_pg)) {\n            max_length = svmaxv_u32(max_length, lengths);\n            max_index = svindex_u32(i, pg);\n        }\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    const size_t n = strings.size();\n    const size_t vl = svcntw();\n\n    for (size_t i = 0; i < n; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svuint32_t lengths = svld1_u32(pg, reinterpret_cast<const uint32_t*>(strings.data() + i));\n\n        svuint32_t max_lengths = svmaxv_u32(pg, lengths);\n        svuint32_t max_indices = svindex_u32(i, 1);\n\n        if (svmaxv_u32(pg, max_lengths) > max_length) {\n            max_length = svmaxv_u32(pg, max_lengths);\n            max_index = svmaxv_u32(pg, max_indices);\n        }\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    const size_t n = strings.size();\n    const size_t vl = svcntw();\n\n    for (size_t i = 0; i < n; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svuint32_t lengths = svld1_u32(pg, reinterpret_cast<const uint32_t*>(strings.data() + i));\n        svuint32_t indices = svindex_u32(i, 1);\n\n        svbool_t cmp = svcmplt_n_u32(pg, lengths, max_length);\n        svuint32_t new_max_length = svmaxv_u32(pg, lengths);\n        svuint32_t new_max_index = svmaxv_u32(pg, indices);\n\n        if (new_max_length > max_length) {\n            max_length = new_max_length;\n            max_index = new_max_index;\n        }\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    const size_t n = strings.size();\n    const size_t vl = svcntw();\n\n    for (size_t i = 0; i < n; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svuint32_t lengths = svld1_u32(pg, reinterpret_cast<const uint32_t*>(strings.data() + i));\n\n        svuint32_t max_lengths = svmaxv_u32(pg, lengths);\n        svuint32_t max_indices = svindex_u32(0, 1);\n\n        if (svmaxv_u32(pg, max_lengths) > max_length) {\n            max_length = svmaxv_u32(pg, max_lengths);\n            max_index = svmaxv_u32(pg, max_indices) + i;\n        }\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n\n    while (svcmpne_n_u64(pg, va, vb)) {\n        svbool_t pg_a_gt_b = svcmpgt_n_u64(pg, va, vb);\n        svuint64_t va_new = svsub_n_u64(pg_a_gt_b, va, vb);\n        svuint64_t vb_new = svsub_n_u64(svnotb_z(pg, pg_a_gt_b), vb, va);\n        va = svsel_u64(pg_a_gt_b, va_new, va);\n        vb = svsel_u64(svnotb_z(pg, pg_a_gt_b), vb_new, vb);\n    }\n\n    return svget_lane_u64(va, 0);\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n\n    while (svcmpne_n_u64(pg, va, vb)) {\n        svbool_t pg_a_gt_b = svcmpgt_n_u64(pg, va, vb);\n        svuint64_t va_new = svsub_n_u64(pg, va, vb, 0);\n        va = svsel_u64(pg_a_gt_b, va_new, va);\n        vb = svsel_u64(pg_a_gt_b, vb, va_new);\n    }\n\n    return svget_lane_u64(va, 0);\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    svuint64_t va = svdup_u64(a);\n    svuint64_t vb = svdup_u64(b);\n    svbool_t pg = svwhilelt_b64_u64(0, 1);\n\n    while (svcmpne(pg, va, vb)) {\n        svbool_t pg_a_gt_b = svcmpgt(pg, va, vb);\n        va = svsel(pg_a_gt_b, svsub(pg, va, vb), va);\n        vb = svsel(pg_a_gt_b, vb, svsub(pg, vb, va));\n    }\n\n    return svget_lane_u64(va, 0);\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n\n    while (svcmpne_n_u64(pg, va, vb)) {\n        svbool_t pg_a_gt_b = svcmpgt_n_u64(pg, va, vb);\n        svuint64_t va_new = svsub_n_u64(pg_a_gt_b, va, vb);\n        svuint64_t vb_new = svsub_n_u64(svnot_z(pg, pg_a_gt_b), vb, va);\n        va = svsel_u64(pg_a_gt_b, va_new, va);\n        vb = svsel_u64(pg_a_gt_b, vb, vb_new);\n    }\n\n    return svget_lane_u64(va, 0);\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a, pg);\n    svuint64_t vb = svdup_n_u64(b, pg);\n\n    while (svcmpne_n_u64(pg, va, vb)) {\n        svbool_t pg_a_gt_b = svcmpgt_n_u64(pg, va, vb);\n        svuint64_t va_new = svsub_n_u64(pg_a_gt_b, va, vb);\n        svuint64_t vb_new = svsub_n_u64(svnot_z(pg, pg_a_gt_b), vb, va);\n        va = svsel_u64(pg_a_gt_b, va_new, va);\n        vb = svsel_u64(pg_a_gt_b, vb, vb_new);\n    }\n\n    return svget_lane_u64(va, 0);\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n#include <limits>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest_a = 0.0f, closest_b = 0.0f;\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t min_diff_vec = svdup_f32(min_diff);\n    svfloat32_t closest_a_vec = svdup_f32(closest_a);\n    svfloat32_t closest_b_vec = svdup_f32(closest_b);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec_a = svld1_f32(pg, &numbers[i]);\n        svfloat32_t vec_b = svld1_f32(pg, &numbers[i + 1]);\n\n        svfloat32_t diff = svabs_f32_x(pg, svsub_f32_x(pg, vec_a, vec_b));\n        svbool_t pg_min_diff = svcmpge_f32(pg, min_diff_vec, diff);\n\n        min_diff_vec = svsel_f32(pg_min_diff, min_diff_vec, diff);\n        closest_a_vec = svsel_f32(pg_min_diff, closest_a_vec, vec_a);\n        closest_b_vec = svsel_f32(pg_min_diff, closest_b_vec, vec_b);\n    }\n\n    min_diff = svminv_f32(pg, min_diff_vec);\n    closest_a = svminv_f32(pg, closest_a_vec);\n    closest_b = svminv_f32(pg, closest_b_vec);\n\n    return {std::min(closest_a, closest_b), std::max(closest_a, closest_b)};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n#include <limits>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest_a = 0.0f, closest_b = 0.0f;\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t min_diff_vec = svdup_f32(min_diff);\n    svfloat32_t closest_a_vec = svdup_f32(closest_a);\n    svfloat32_t closest_b_vec = svdup_f32(closest_b);\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat32_t a_vec = svdup_f32(numbers[i]);\n        svfloat32_t diff_vec = svabs_f32_z(pg, svsub_f32_z(pg, svld1_f32(pg, &numbers[i + 1]), a_vec));\n        svbool_t cmp = svcmplt_f32_z(pg, diff_vec, min_diff_vec);\n        min_diff_vec = svsel_f32(min_diff_vec, diff_vec, cmp);\n        closest_a_vec = svsel_f32(closest_a_vec, a_vec, cmp);\n        closest_b_vec = svsel_f32(closest_b_vec, svld1_f32(pg, &numbers[i + 1]), cmp);\n    }\n\n    min_diff = svaddv_f32(svptrue_b8(), min_diff_vec);\n    closest_a = svaddv_f32(svptrue_b8(), closest_a_vec);\n    closest_b = svaddv_f32(svptrue_b8(), closest_b_vec);\n\n    return {closest_a, closest_b};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n#include <limits>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest_a = 0.0f, closest_b = 0.0f;\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t min_diff_vec = svdup_f32(min_diff);\n    svfloat32_t closest_a_vec = svdup_f32(closest_a);\n    svfloat32_t closest_b_vec = svdup_f32(closest_b);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec_a = svld1_f32(pg, &numbers[i]);\n        svfloat32_t diff_vec = svabs_f32_x(pg, svsub_f32_x(pg, vec_a, svdup_f32(numbers[i])));\n\n        svbool_t cmp = svcmpge_f32(pg, diff_vec, min_diff_vec);\n        min_diff_vec = svsel_f32(cmp, min_diff_vec, diff_vec);\n        closest_a_vec = svsel_f32(cmp, closest_a_vec, svdup_f32(numbers[i]));\n        closest_b_vec = svsel_f32(cmp, closest_b_vec, vec_a);\n    }\n\n    min_diff = svminv_f32(pg, min_diff_vec);\n    closest_a = svminv_f32(pg, closest_a_vec);\n    closest_b = svminv_f32(pg, closest_b_vec);\n\n    return {closest_a, closest_b};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n#include <limits>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest_a = 0.0f, closest_b = 0.0f;\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t min_diff_vec = svdup_f32(min_diff);\n    svfloat32_t closest_a_vec = svdup_f32(closest_a);\n    svfloat32_t closest_b_vec = svdup_f32(closest_b);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec_a = svld1_f32(pg, &numbers[i]);\n        svfloat32_t diff_vec = svabs_f32_x(pg, svsub_f32_x(pg, vec_a, svdup_f32(numbers[i])));\n\n        svbool_t cmp = svcmpge_f32(pg, diff_vec, min_diff_vec);\n        min_diff_vec = svsel_f32(cmp, min_diff_vec, diff_vec);\n        closest_a_vec = svsel_f32(cmp, closest_a_vec, svdup_f32(numbers[i]));\n        closest_b_vec = svsel_f32(cmp, closest_b_vec, vec_a);\n    }\n\n    min_diff = svminv_f32(pg, min_diff_vec);\n    closest_a = svminv_f32(pg, closest_a_vec);\n    closest_b = svminv_f32(pg, closest_b_vec);\n\n    return {closest_a, closest_b};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```c++\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float* data = numbers.data();\n\n    svfloat32_t min_diff = svdup_f32(INFINITY);\n    svfloat32_t closest_pair = svundef_f32();\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat32_t a = svdup_n_f32(data[i]);\n        svfloat32_t b = svld1_f32(svptrue_b32(), data + i + 1);\n        svfloat32_t diff = svabs_f32(svsub_f32(a, b));\n\n        svbool_t pg = svcmpge_f32(svptrue_b32(), min_diff, diff);\n        min_diff = svsel_f32(pg, min_diff, diff);\n        closest_pair = svsel_f32(pg, closest_pair, svcreate2_f32(data[i], data[i + 1]));\n    }\n\n    float closest[2];\n    svst1_f32(svptrue_b32(), closest, closest_pair);\n\n    return {closest[0], closest[1]};\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float* data = numbers.data();\n\n    svfloat32_t v_min = svdup_f32(SV_VL16);\n    svfloat32_t v_max = svdup_f32(SV_VL16);\n\n    for (size_t i = 0; i < n; i += SV_VL16) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t v = svld1_f32(pg, data + i);\n        v_min = svmin_f32_z(pg, v_min, v);\n        v_max = svmax_f32_z(pg, v_max, v);\n    }\n\n    float min_val = svminv_f32(svptrue_b32(), v_min);\n    float max_val = svmaxv_f32(svptrue_b32(), v_max);\n    float scale = 1.0f / (max_val - min_val);\n\n    for (size_t i = 0; i < n; i += SV_VL16) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t v = svld1_f32(pg, data + i);\n        v = svsub_f32_z(pg, v, svdup_f32(min_val));\n        v = svmul_f32_z(pg, v, svdup_f32(scale));\n        svst1_f32(pg, data + i, v);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float* data = numbers.data();\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t v_min = svminv_f32(pg, svld1_f32(pg, data));\n    svfloat32_t v_max = svmaxv_f32(pg, svld1_f32(pg, data));\n\n    float min_val = svminv_f32(pg, v_min);\n    float max_val = svmaxv_f32(pg, v_max);\n    float scale = 1.0f / (max_val - min_val);\n\n    svfloat32_t v_scale = svdup_f32(scale);\n    svfloat32_t v_min_val = svdup_f32(min_val);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t v_data = svld1_f32(pg, data + i);\n        v_data = svsub_f32_z(pg, v_data, v_min_val);\n        v_data = svmul_f32_z(pg, v_data, v_scale);\n        svst1_f32(pg, data + i, v_data);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float* data = numbers.data();\n\n    svfloat32_t min_val = svdup_f32(SV_VL16);\n    svfloat32_t max_val = svdup_f32(SV_VL16);\n\n    for (size_t i = 0; i < n; i += SV_VL16) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1_f32(pg, data + i);\n\n        min_val = svmin_f32_z(pg, min_val, vec);\n        max_val = svmax_f32_z(pg, max_val, vec);\n    }\n\n    float min = svminv_f32(svptrue_b32(), min_val);\n    float max = svmaxv_f32(svptrue_b32(), max_val);\n\n    float scale = 1.0f / (max - min);\n\n    for (size_t i = 0; i < n; i += SV_VL16) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1_f32(pg, data + i);\n\n        vec = svsub_f32_z(pg, vec, svdup_f32(min));\n        vec = svmul_f32_z(pg, vec, svdup_f32(scale));\n\n        svst1_f32(pg, data + i, vec);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float* data = numbers.data();\n\n    svfloat32_t v_min = svdup_f32(SV_VL16);\n    svfloat32_t v_max = svdup_f32(SV_VL16);\n\n    for (size_t i = 0; i < n; i += SV_VL16) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t v_data = svld1_f32(pg, data + i);\n        v_min = svmin_f32_z(pg, v_min, v_data);\n        v_max = svmax_f32_z(pg, v_max, v_data);\n    }\n\n    float min_val = svminv_f32(svptrue_b32(), v_min);\n    float max_val = svmaxv_f32(svptrue_b32(), v_max);\n\n    float scale = 1.0f / (max_val - min_val);\n\n    for (size_t i = 0; i < n; i += SV_VL16) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t v_data = svld1_f32(pg, data + i);\n        v_data = svsub_f32_z(pg, v_data, svdup_f32(min_val));\n        v_data = svmul_f32_z(pg, v_data, svdup_f32(scale));\n        svst1_f32(pg, data + i, v_data);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float* data = numbers.data();\n\n    svfloat32_t min_val = svdup_f32(SV_VL1);\n    svfloat32_t max_val = svdup_f32(SV_VL1);\n\n    for (size_t i = 0; i < n; i += SV_VL1) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1_f32(pg, data + i);\n\n        min_val = svmin_f32_z(pg, min_val, vec);\n        max_val = svmax_f32_z(pg, max_val, vec);\n    }\n\n    float min = svaddv_f32(svptrue_b32(), min_val);\n    float max = svaddv_f32(svptrue_b32(), max_val);\n\n    float scale = 1.0f / (max - min);\n\n    for (size_t i = 0; i < n; i += SV_VL1) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1_f32(pg, data + i);\n\n        vec = svsub_f32_z(pg, vec, svdup_f32(min));\n        vec = svmul_f32_z(pg, vec, svdup_f32(scale));\n\n        svst1_f32(pg, data + i, vec);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n) {\n    uint64_t result = 0;\n    svbool_t pg = svptrue_b64();\n    svuint64_t vec_n = svdup_u64(n);\n    svuint64_t vec_i = svindex_u64(0, 1);\n    svuint64_t vec_1 = svdup_u64(1);\n\n    for (uint64_t i = n / 2; i > 0; i--) {\n        svuint64_t vec_div = svdiv_u64_z(pg, vec_n, vec_i);\n        svuint64_t vec_mul = svmul_u64_z(pg, vec_div, vec_i);\n        svbool_t pg_eq = svcmpeq(pg, vec_mul, vec_n);\n\n        if (svptest_any(pg, pg_eq)) {\n            result = i;\n            break;\n        }\n\n        vec_i = svadd_u64_x(pg, vec_i, vec_1);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n) {\n    uint64_t result = 0;\n    svbool_t pg = svptrue_b64();\n    svuint64_t vec_n = svdup_u64(n);\n    svuint64_t vec_i = svindex_u64(0, 1);\n    svuint64_t vec_1 = svdup_u64(1);\n\n    while (svmaxv_u64(pg, vec_i) < n) {\n        svbool_t pg_div = svcmpeq_u64(pg, svrem_u64(pg, vec_n, vec_i), vec_1);\n        result = svmaxv_u64(pg_div, vec_i);\n        vec_i = svadd_u64_x(pg, vec_i, svdup_u64(1));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n) {\n    uint64_t result = 0;\n    svbool_t pg = svptrue_b64();\n    svuint64_t vec_n = svdup_u64(n);\n    svuint64_t vec_i = svindex_u64(0, 1);\n    svuint64_t vec_1 = svdup_u64(1);\n\n    while (svcntp_b64(pg, vec_i < vec_n)) {\n        svbool_t pg_div = svptrue_b64();\n        pg_div = svand_z(pg_div, vec_n % vec_i == 0);\n        if (svcntp_b64(pg_div, pg_div)) {\n            result = svmaxv_u64(pg_div, vec_i);\n        }\n        vec_i = svadd_z(pg, vec_i, vec_1);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n) {\n    uint64_t result = 0;\n    svbool_t pg = svptrue_b64();\n    svuint64_t vec_n = svdup_u64(n);\n    svuint64_t vec_i = svindex_u64(0, 1);\n    svuint64_t vec_1 = svdup_u64(1);\n\n    while (svcntp_b64(pg, vec_i < vec_n)) {\n        svbool_t pg_div = svptrue_b64();\n        pg_div = svand_z(pg, pg_div, vec_n % vec_i == svdup_u64(0));\n        if (svcntp_b64(pg_div, pg_div)) {\n            result = svmaxv_u64(pg_div, vec_i);\n        }\n        vec_i = svadd_z(pg, vec_i, vec_1);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n) {\n    uint64_t result = 0;\n    svbool_t pg = svptrue_b64();\n    svuint64_t vec_n = svdup_u64(n);\n    svuint64_t vec_i = svindex_u64(0, 1);\n    svuint64_t vec_1 = svdup_u64(1);\n\n    while (svmaxv_u64(pg, vec_i) < n) {\n        svbool_t pg_div = svcmpeq_u64(pg, svrem_u64(pg, vec_n, vec_i), vec_1);\n        result = svmaxv_u64(pg_div, vec_i);\n        vec_i = svadd_u64_x(pg, vec_i, svdup_u64(1));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b8();\n    svint32_t v_n = svdup_s32(n);\n    svint32_t v_i = svdup_s32(2);\n    svint32_t v_one = svdup_s32(1);\n\n    while (svcmpge_s32(pg, v_n, v_one)) {\n        svbool_t pg_div = svcmpge_s32(pg, svdiv_s32(pg, v_n, v_i), v_one);\n        while (svcntp_b8(pg_div, pg)) {\n            factors.push_back(svget_s32(pg_div, v_i));\n            v_n = svmul_s32(pg, v_n, svdiv_s32(pg, v_n, v_i));\n        }\n        v_i = svadd_s32(pg, v_i, v_one);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b8();\n\n    for (int i = 2; i * i <= n; ++i) {\n        svint32_t vec_i = svdup_s32(i);\n        svint32_t vec_n = svdup_s32(n);\n        svbool_t pg_divisible = svcmpeq_n_s32(svptrue_b8(), svdiv_s32_z(pg, vec_n, vec_i), 0);\n\n        while (svcntp_b8(pg_divisible, pg)) {\n            factors.push_back(i);\n            n /= i;\n            vec_n = svdup_s32(n);\n            pg_divisible = svcmpeq_n_s32(svptrue_b8(), svdiv_s32_z(pg, vec_n, vec_i), 0);\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b8();\n\n    for (int i = 2; i * i <= n; ++i) {\n        svint32_t vec_i = svdup_s32(i);\n        svint32_t vec_n = svdup_s32(n);\n        svbool_t pg_divisible = svcmpeq_n_s32(svptrue_b8(), svdiv_s32_z(pg, vec_n, vec_i), 0);\n\n        while (svcntp_b8(pg_divisible, pg)) {\n            factors.push_back(i);\n            n /= i;\n            vec_n = svdup_s32(n);\n            pg_divisible = svcmpeq_n_s32(svptrue_b8(), svdiv_s32_z(pg, vec_n, vec_i), 0);\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b8();\n    svint32_t sv_n = svdup_s32(n);\n    svint32_t sv_i = svdup_s32(2);\n    svint32_t sv_limit = svdup_s32(static_cast<int>(sqrt(n)));\n\n    while (svcmpge_s32(pg, sv_i, sv_limit)) {\n        svbool_t pg_div = svcmpne_s32(pg, sv_n % sv_i, svdup_s32(0));\n        while (svcntp_b8(pg_div, pg)) {\n            factors.push_back(sv_i[0]);\n            sv_n = sv_n / sv_i;\n        }\n        sv_i = sv_i + svdup_s32(1);\n    }\n\n    if (sv_n[0] > 1) {\n        factors.push_back(sv_n[0]);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b8();\n    svint32_t sv_n = svdup_s32(n, pg);\n    svint32_t sv_two = svdup_s32(2, pg);\n\n    while (svcmpeq_s32(pg, sv_n, sv_two)) {\n        factors.push_back(2);\n        sv_n = svdiv_s32(pg, sv_n, sv_two);\n    }\n\n    svint32_t sv_i = sv_two;\n    svint32_t sv_sqrt_n = svsqrt_s32(pg, sv_n);\n\n    while (svcmple_s32(pg, sv_i, sv_sqrt_n)) {\n        while (svcmpeq_s32(pg, svmod_s32(pg, sv_n, sv_i), svdup_s32(0, pg))) {\n            factors.push_back(svget_lane_s32(sv_i, 0));\n            sv_n = svdiv_s32(pg, sv_n, sv_i);\n        }\n        sv_i = svadd_s32(pg, sv_i, sv_two);\n    }\n\n    if (svcmpne_s32(pg, sv_n, sv_two)) {\n        factors.push_back(svget_lane_s32(sv_n, 0));\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    size_t n = l.size();\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < n; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1(pg, &l[i]);\n        svbool_t pg_positive = svcmpgt(pg, vec, svdup_f32(0.0f));\n\n        svfloat32_t positive_vec = svsel(pg_positive, vec, svdup_f32(0.0f));\n\n        for (size_t j = 0; j < vl; ++j) {\n            if (pg_positive[j]) {\n                result.push_back(positive_vec[j]);\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    const float* data = l.data();\n    size_t n = l.size();\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1(pg, data + i);\n        svbool_t mask = svcmpge(vec, svdup_f32(0.0f));\n\n        svfloat32_t positive_vec = svsel(mask, vec, svdup_f32(0.0f));\n\n        for (size_t j = 0; j < svcntw(); ++j) {\n            if (svget_lane(mask, j)) {\n                result.push_back(svget_lane(positive_vec, j));\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    size_t n = l.size();\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1(pg, &l[i]);\n        svbool_t mask = svcmpge(vec, svdup_f32(0.0f));\n        svfloat32_t positive_vec = svsel(mask, vec, svdup_f32(0.0f));\n        float temp[svcntw()];\n        svst1(pg, temp, positive_vec);\n        for (size_t j = 0; j < svcntw() && i + j < n; ++j) {\n            if (temp[j] > 0.0f) {\n                result.push_back(temp[j]);\n            }\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    const float* input = l.data();\n    size_t input_size = l.size();\n\n    for (size_t i = 0; i < input_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, input_size);\n        svfloat32_t vec = svld1(pg, input + i);\n        svbool_t pg_positive = svcmpge(pg, vec, svdup_f32(0.0f));\n\n        if (svcntp_b32(pg_positive, pg_positive)) {\n            svfloat32_t positive_vec = svsel_f32(pg_positive, vec, svdup_f32(0.0f));\n            float temp[svcntw()];\n            svst1(pg_positive, temp, positive_vec);\n            for (int j = 0; j < svcntw(); ++j) {\n                if (temp[j] > 0) {\n                    result.push_back(temp[j]);\n                }\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    std::vector<float> result;\n    const float* input = l.data();\n    size_t size = l.size();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vec = svld1(pg, input + i);\n        svbool_t pg_positive = svcmpge(pg, vec, svdup_f32(0.0f));\n\n        svfloat32_t positive_vec = svsel_f32(pg_positive, vec, svdup_f32(0.0f));\n\n        for (size_t j = 0; j < svcntw(); ++j) {\n            if (pg_positive[j]) {\n                result.push_back(positive_vec[j]);\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    int64_t vl = svcntd();\n    svbool_t pg = svwhilelt_b64(i, n);\n\n    while (svptest_any(svptrue_b64(), pg)) {\n        svint64_t v_i = svadd_x(svindex_s64(0, 1), i);\n        svbool_t pg_div = svcmplt_n_s64(v_i, n);\n        svbool_t pg_mod = svcmpeq_n_s64(svptrue_b64(), svmod_n_s64(v_i, i), 0);\n        svbool_t pg_mod2 = svcmpeq_n_s64(svptrue_b64(), svmod_n_s64(v_i, i + 2), 0);\n\n        if (svptest_any(pg_div & pg_mod) || svptest_any(pg_div & pg_mod2)) {\n            return false;\n        }\n\n        i += vl * 2;\n        pg = svwhilelt_b64(i, n);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    int64_t vl = svcntd();\n    svbool_t pg = svwhilelt_b64(i, n);\n\n    while (svptest_any(svptrue_b64(), pg)) {\n        svint64_t v_i = svadd_x(svindex_s64(0, 1), i);\n        svbool_t pg_div = svcmplt_n(svptrue_b64(), svdiv_x(svptrue_b64(), v_i, n), 1);\n        if (svptest_any(svptrue_b64(), pg_div)) return false;\n\n        i += vl;\n        pg = svwhilelt_b64(i, n);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    int64_t vl = svcntd();\n    svbool_t pg = svwhilelt_b64(i, n);\n\n    while (svptest_any(svptrue_b64(), pg)) {\n        svint64_t v_i = svadd_x(svindex_s64(0, 1), i);\n        svbool_t pg_div = svcmplt_n_s64(v_i, n);\n        svbool_t pg_mod = svcmpeq_n_s64(svptrue_b64(), svmod_n_s64(v_i, i), 0);\n        svbool_t pg_mod2 = svcmpeq_n_s64(svptrue_b64(), svmod_n_s64(v_i, i + 2), 0);\n        pg = svand_z(pg, svand_z(pg_div, svnot_z(svptrue_b64(), svor_z(pg_mod, pg_mod2))));\n\n        if (svptest_any(svptrue_b64(), pg)) return false;\n\n        i += 6;\n        pg = svwhilelt_b64(i, n);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    int64_t vl = svcntd();\n    svbool_t pg = svwhilelt_b64(i, n);\n\n    while (svptest_any(svptrue_b64(), pg)) {\n        svint64_t v_i = svadd_x(svindex_s64(0, 1), i);\n        svbool_t pg_div = svcmplt_n(svptrue_b64(), svptrue_b64(), n % v_i);\n        if (svptest_any(svptrue_b64(), pg_div)) return false;\n\n        i += vl;\n        pg = svwhilelt_b64(i, n);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    int64_t vl = svcntd();\n    svbool_t pg = svwhilelt_b64(i, n);\n\n    while (svptest_any(svptrue_b64(), pg)) {\n        svint64_t v_i = svadd_x(svptrue_s64(), i, 6);\n        svint64_t v_i_plus_2 = svadd_x(svptrue_s64(), i, 2);\n\n        svbool_t pg_div = svcmplt_n_s64_x(pg, n, v_i);\n        svbool_t pg_div_2 = svcmplt_n_s64_x(pg, n, v_i_plus_2);\n\n        if (svptest_any(pg_div, svcmpeq_n_s64_x(pg_div, n % v_i, 0))) return false;\n        if (svptest_any(pg_div_2, svcmpeq_n_s64_x(pg_div_2, n % v_i_plus_2, 0))) return false;\n\n        i += 6;\n        pg = svwhilelt_b64(i, n);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\nstd::string solve_simd(const std::string & s) {\n    const char *input = s.c_str();\n    size_t len = s.length();\n    char *output = new char[len + 1];\n    output[len] = '\\0';\n\n    svbool_t pg = svptrue_b8();\n    svint8_t lower_bound = svdup_s8('a');\n    svint8_t upper_bound = svdup_s8('z');\n    svint8_t case_diff = svdup_s8('a' - 'A');\n\n    bool has_letters = false;\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1(pg, input + i);\n        svbool_t is_lower = svcmplt(vec, upper_bound) & svcmpge(vec, lower_bound);\n        svbool_t is_upper = svcmplt(vec, svdup_s8('Z')) & svcmpge(vec, svdup_s8('A'));\n\n        has_letters |= svptest_any(is_lower | is_upper);\n\n        svint8_t result = svsel(is_lower, svsub(vec, case_diff), vec);\n        result = svsel(is_upper, svadd(result, case_diff), result);\n\n        svst1(pg, output + i, result);\n    }\n\n    if (!has_letters) {\n        for (size_t i = 0; i < len / 2; ++i) {\n            std::swap(output[i], output[len - i - 1]);\n        }\n    }\n\n    std::string result(output);\n    delete[] output;\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    const char *input = s.c_str();\n    size_t len = s.length();\n    char *output = new char[len + 1];\n    output[len] = '\\0';\n\n    svbool_t pg = svptrue_b8();\n    svint8_t lower_bound = svdup_s8('a');\n    svint8_t upper_bound = svdup_s8('z');\n    svint8_t case_diff = svdup_s8('a' - 'A');\n\n    bool has_letters = false;\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, input + i);\n        svbool_t is_lower = svcmplt_s8(vec, upper_bound) & svcmpge_s8(vec, lower_bound);\n        svbool_t is_upper = svcmplt_s8(vec, svadd_s8(upper_bound, case_diff)) & svcmpge_s8(vec, svadd_s8(lower_bound, case_diff));\n\n        svint8_t lower_to_upper = svsub_s8(vec, case_diff);\n        svint8_t upper_to_lower = svadd_s8(vec, case_diff);\n\n        svint8_t result = svsel_s8(is_lower, lower_to_upper, vec);\n        result = svsel_s8(is_upper, upper_to_lower, result);\n\n        svst1_s8(pg, output + i, result);\n\n        has_letters |= svptest_any(svptrue_b8(), is_lower | is_upper);\n    }\n\n    if (!has_letters) {\n        for (size_t i = 0; i < len / 2; ++i) {\n            std::swap(output[i], output[len - i - 1]);\n        }\n    }\n\n    std::string result(output);\n    delete[] output;\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    const char *input = s.c_str();\n    size_t len = s.length();\n    char *output = new char[len + 1];\n    output[len] = '\\0';\n\n    svbool_t pg = svptrue_b8();\n    svint8_t lower_bound = svdup_s8('a');\n    svint8_t upper_bound = svdup_s8('z');\n    svint8_t case_diff = svdup_s8('a' - 'A');\n\n    bool has_letters = false;\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, input + i);\n        svbool_t is_lower = svcmplt_s8(vec, upper_bound) & svcmpge_s8(vec, lower_bound);\n        svbool_t is_upper = svcmplt_s8(vec, svadd_s8(lower_bound, case_diff)) & svcmpge_s8(vec, svsub_s8(upper_bound, case_diff));\n\n        svint8_t reversed_case = sveor_s8(vec, case_diff);\n        svint8_t result = svsel_s8(is_lower | is_upper, reversed_case, vec);\n\n        svst1_s8(pg, output + i, result);\n\n        has_letters |= svptest_any(svptrue_b8(), is_lower | is_upper);\n    }\n\n    if (!has_letters) {\n        for (size_t i = 0; i < len / 2; ++i) {\n            std::swap(output[i], output[len - i - 1]);\n        }\n    }\n\n    std::string result(output);\n    delete[] output;\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    const char* input = s.c_str();\n    size_t len = s.length();\n    char* output = new char[len + 1];\n    output[len] = '\\0';\n\n    svbool_t pg = svptrue_b8();\n    svint8_t lower_bound = svdup_s8('a');\n    svint8_t upper_bound = svdup_s8('z');\n    svint8_t case_diff = svdup_s8('a' - 'A');\n\n    bool has_letters = false;\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, input + i);\n        svbool_t is_lower = svcmplt_s8(pg, vec, upper_bound) & svcmpge_s8(pg, vec, lower_bound);\n        svbool_t is_upper = svcmplt_s8(pg, vec, svdup_s8('Z')) & svcmpge_s8(pg, vec, svdup_s8('A'));\n\n        svint8_t result = vec;\n        result = svsub_s8_x(pg, result, case_diff, is_lower);\n        result = svadd_s8_x(pg, result, case_diff, is_upper);\n\n        svst1_s8(pg, output + i, result);\n\n        has_letters |= svptest_any(svptrue_b8(), is_lower | is_upper);\n    }\n\n    if (!has_letters) {\n        for (size_t i = 0; i < len / 2; ++i) {\n            std::swap(output[i], output[len - i - 1]);\n        }\n    }\n\n    std::string result(output);\n    delete[] output;\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    size_t len = s.length();\n    if (len == 0) return s;\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t vec = svld1_u8(pg, (const uint8_t*)s.data());\n\n    svbool_t is_lower = svcmplt_n_u8(pg, vec, 'a');\n    svbool_t is_upper = svcmplt_n_u8(pg, vec, 'A');\n    svbool_t is_letter = svand_n_u8_z(pg, svsub_n_u8_z(pg, vec, 'a'), 0x20);\n\n    svuint8_t lower_to_upper = svsub_n_u8_z(pg, vec, 0x20);\n    svuint8_t upper_to_lower = svadd_n_u8_z(pg, vec, 0x20);\n\n    svuint8_t result = svsel_u8(is_lower, lower_to_upper, vec);\n    result = svsel_u8(is_upper, upper_to_lower, result);\n\n    bool has_letters = svptest_any(svptrue_b8(), is_letter);\n    if (!has_letters) {\n        svuint8_t reversed = svrev_u8(pg, vec);\n        svst1_u8(pg, (uint8_t*)s.data(), reversed);\n    } else {\n        svst1_u8(pg, (uint8_t*)s.data(), result);\n    }\n\n    return s;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vl = svld1(pg, l.data());\n    svint32_t indices = svindex_s32(0, 1);\n\n    svbool_t pg_third = svcmpeq_n(pg, indices % 3, 0);\n    svint32_t third_elements = svsel(pg, vl, svdup_s32(0));\n\n    svsort_s32(pg_third, third_elements);\n\n    svint32_t sorted_third_elements = svsel(pg_third, third_elements, vl);\n\n    svst1(pg, result.data(), sorted_third_elements);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    // Create a predicate to identify elements at indices divisible by 3\n    svbool_t p = svwhilelt_b32(0, n);\n    svbool_t p_div3 = svptrue_b32();\n    svbool_t p_not_div3 = svptrue_b32();\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svint32_t v = svld1(p, &l[i]);\n        svint32_t v_div3 = svld1(p_div3, &l[i]);\n        svint32_t v_not_div3 = svld1(p_not_div3, &l[i]);\n\n        // Extract elements at indices divisible by 3\n        svbool_t p_div3_mask = svcmpeq(svptrue_b32(), svindex_u32(0, 1), svdup_n_u32(0));\n        svbool_t p_not_div3_mask = svnot_b_z(p_div3_mask, svptrue_b32());\n\n        svint32_t v_div3_extracted = svsel(v_div3, svdup_n_s32(0), p_div3_mask);\n        svint32_t v_not_div3_extracted = svsel(v_not_div3, svdup_n_s32(0), p_not_div3_mask);\n\n        // Sort the extracted elements\n        svint32_t v_div3_sorted = svsort1(v_div3_extracted);\n\n        // Combine sorted and unsorted elements\n        svint32_t v_combined = svsel(v_div3_sorted, v_not_div3_extracted, p_div3_mask);\n\n        // Store the result\n        svst1(p, &result[i], v_combined);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    // Create a predicate to identify elements at indices divisible by 3\n    svbool_t p = svwhilelt_b32(0, n);\n    svbool_t p_div3 = svptrue_b32();\n    svbool_t p_not_div3 = svptrue_b32();\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svint32_t v = svld1(p, &l[i]);\n        svint32_t idx = svindex_s32(i, 1);\n\n        // Create masks for indices divisible by 3 and not divisible by 3\n        p_div3 = svcmpeq(p, svdiv_s32_z(svptrue_b32(), idx, svdup_s32(3)), svdup_s32(0));\n        p_not_div3 = svnot_z(p, p_div3);\n\n        // Copy elements not divisible by 3 directly to the result\n        svst1(p_not_div3, &result[i], svsel_s32(p_not_div3, v, svdup_s32(0)));\n\n        // Extract elements divisible by 3 and sort them\n        svint32_t v_div3 = svsel_s32(p_div3, v, svdup_s32(0));\n        svint32_t sorted_div3 = svsort_s32(svptrue_b32(), v_div3);\n\n        // Merge sorted elements back into the result\n        svst1(p_div3, &result[i], svsel_s32(p_div3, sorted_div3, svdup_s32(0)));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    // Create a predicate to identify elements at indices divisible by 3\n    svbool_t p = svwhilelt_b32(0, n);\n    svbool_t p_div3 = svptrue_b32();\n    p_div3 = svand_z(p, svcmpeq_z(svptrue_b32(), svindex_u32(0, 1), svdup_n_u32(0)), p_div3);\n    p_div3 = svand_z(p, svcmpeq_z(svptrue_b32(), svindex_u32(0, 1), svdup_n_u32(3)), p_div3);\n\n    // Extract elements at indices divisible by 3\n    svint32_t v = svld1(p, l.data());\n    svint32_t v_div3 = svcompact(svptrue_b32(), v);\n\n    // Sort the extracted elements\n    svsort(svptrue_b32(), v_div3);\n\n    // Place sorted elements back into the result vector\n    svst1(p_div3, result.data(), v_div3);\n\n    // Copy elements not divisible by 3 directly\n    svst1(svnot_z(p, p_div3), result.data(), v);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    // Create a predicate to identify elements at indices divisible by 3\n    svbool_t p = svwhilelt_b32(0, n);\n    svbool_t p_div3 = svptrue_b32();\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svuint32_t indices = svindex_u32(i, 1);\n        p_div3 = svcmpeq_n_u32_z(p, svand_u32_z(p, indices, 3), 0);\n        svuint32_t v = svld1_u32(p, &l[i]);\n        svst1_u32(p, &result[i], v);\n    }\n\n    // Extract elements at indices divisible by 3\n    std::vector<int> to_sort;\n    for (size_t i = 0; i < n; i += 3) {\n        to_sort.push_back(l[i]);\n    }\n\n    // Sort the extracted elements\n    std::sort(to_sort.begin(), to_sort.end());\n\n    // Place sorted elements back into the result vector\n    size_t sort_index = 0;\n    for (size_t i = 0; i < n; i += 3) {\n        result[i] = to_sort[sort_index++];\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\nfloat max_element_simd(std::vector<float> l) {\n    const float* data = l.data();\n    size_t n = l.size();\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t v_max = svdup_f32(-INFINITY);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t v_data = svld1_f32(pg, data + i);\n        v_max = svmax_f32_z(pg, v_max, v_data);\n    }\n\n    float max_val = svmaxv_f32(pg, v_max);\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\nfloat max_element_simd(std::vector<float> l) {\n    const float* data = l.data();\n    size_t n = l.size();\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t v_max = svdup_f32(-INFINITY);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t v_data = svld1_f32(pg, data + i);\n        v_max = svmax_f32_z(pg, v_max, v_data);\n    }\n\n    float max_val = svmaxv_f32(pg, v_max);\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\nfloat max_element_simd(std::vector<float> l) {\n    const float* data = l.data();\n    size_t n = l.size();\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t v_max = svdup_f32(-INFINITY);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t v_data = svld1(pg, data + i);\n        v_max = svmax_f32_z(pg, v_max, v_data);\n    }\n\n    return svaddv_f32(svptrue_b32(), v_max);\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\nfloat max_element_simd(std::vector<float> l) {\n    const float* data = l.data();\n    size_t n = l.size();\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t v_max = svdup_f32(-INFINITY);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t v = svld1_f32(pg, data + i);\n        v_max = svmax_f32_z(pg, v_max, v);\n    }\n\n    return svmaxv_f32(svptrue_b32(), v_max);\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\nfloat max_element_simd(std::vector<float> l) {\n    const float* data = l.data();\n    size_t n = l.size();\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t v_max = svdup_f32(-INFINITY);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t v_data = svld1_f32(pg, data + i);\n        v_max = svmax_f32_z(pg, v_max, v_data);\n    }\n\n    float max_val = svmaxv_f32(pg, v_max);\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    int i = 0;\n\n    // Define vector length\n    const int vl = svcntd();\n\n    // Create predicate for divisibility check\n    svbool_t p_div_11 = svptrue_b8();\n    svbool_t p_div_13 = svptrue_b8();\n\n    // Create predicate for digit 7 check\n    svbool_t p_digit_7 = svptrue_b8();\n\n    while (i < n) {\n        // Load vector of integers\n        svint32_t v_i = svadd_x(svindex_s32(0, 1), i);\n\n        // Check divisibility by 11\n        svbool_t p_div_11 = svcmpeq(svptrue_b8(), svmod_x(svptrue_b8(), v_i, 11), 0);\n\n        // Check divisibility by 13\n        svbool_t p_div_13 = svcmpeq(svptrue_b8(), svmod_x(svptrue_b8(), v_i, 13), 0);\n\n        // Combine predicates for divisibility by 11 or 13\n        svbool_t p_div = svorr_z(p_div_11, p_div_13);\n\n        // Check for digit 7 in the numbers\n        svint32_t v_i_div = svsel(p_div, v_i, svdup_s32(0));\n        svbool_t p_digit_7 = svcmpeq(svptrue_b8(), svmod_x(svptrue_b8(), v_i_div, 10), 7);\n\n        // Count the number of 7s\n        count += svaddv(svsel(p_digit_7, svdup_s32(1), svdup_s32(0)));\n\n        // Update index\n        i += vl;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    int i = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_i = svindex_s32(0, 1);\n    svint32_t v_11 = svdup_s32(11);\n    svint32_t v_13 = svdup_s32(13);\n\n    while (i < n) {\n        svint32_t v_n = svadd_s32(v_i, svdup_s32(i));\n        svbool_t pg_div_11 = svcmpeq_s32(pg, svrem_s32(v_n, v_11), svdup_s32(0));\n        svbool_t pg_div_13 = svcmpeq_s32(pg, svrem_s32(v_n, v_13), svdup_s32(0));\n        svbool_t pg_div = svorr_b_z(pg, pg_div_11, pg_div_13);\n\n        svint32_t v_count = svcnt_s32(pg_div, svdup_s32(7));\n        count += svaddv_s32(pg, v_count);\n\n        i += svcntb();\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    int i = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_i = svindex_s32(0, 1);\n    svint32_t v_11 = svdup_s32(11);\n    svint32_t v_13 = svdup_s32(13);\n    svint32_t v_7 = svdup_s32(7);\n\n    while (i < n) {\n        svint32_t v_nums = svadd_s32_z(pg, v_i, svdup_s32(i));\n        svbool_t pg_div_11 = svcmpeq_s32(svptrue_b8(), svrem_s32_z(pg, v_nums, v_11), svdup_s32(0));\n        svbool_t pg_div_13 = svcmpeq_s32(svptrue_b8(), svrem_s32_z(pg, v_nums, v_13), svdup_s32(0));\n        svbool_t pg_div = svorr_b_z(pg, pg_div_11, pg_div_13);\n\n        svint32_t v_count = svcnt_s32(svptrue_b8(), svcmpeq_s32(svptrue_b8(), svrem_s32_z(pg, v_nums, v_7), svdup_s32(0)));\n\n        count += svaddv_s32(svptrue_b8(), v_count);\n\n        i += svcntp_b8(svptrue_b8(), pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    int i = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_i = svindex_s32(0, 1);\n    svint32_t v_11 = svdup_s32(11);\n    svint32_t v_13 = svdup_s32(13);\n    svint32_t v_7 = svdup_s32(7);\n\n    while (i < n) {\n        svint32_t v_n = svadd_s32_z(pg, v_i, i);\n        svbool_t pg_div_11 = svcmpeq_n_s32(svptrue_b8(), svrem_s32_z(pg, v_n, v_11), 0);\n        svbool_t pg_div_13 = svcmpeq_n_s32(svptrue_b8(), svrem_s32_z(pg, v_n, v_13), 0);\n        svbool_t pg_div = svorr_b_z(pg, pg_div_11, pg_div_13);\n\n        svint32_t v_count = svcnt_s32(svptrue_b8(), svcmpeq_n_s32(pg_div, svrem_s32_z(pg_div, v_n, v_7), 0));\n        count += svaddv_s32(pg, v_count);\n\n        i += svcntb();\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    int i = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_i = svindex_s32(i, pg);\n    svint32_t v_n = svdup_s32(n);\n\n    while (svptest_any(svcmplt_s32(pg, v_i, v_n))) {\n        svbool_t pg_div_11 = svcmplt_s32(pg, svrem_s32(v_i, svdup_s32(11)), svdup_s32(1));\n        svbool_t pg_div_13 = svcmplt_s32(pg, svrem_s32(v_i, svdup_s32(13)), svdup_s32(1));\n        svbool_t pg_div = svorr_b_z(pg, pg_div_11, pg_div_13);\n\n        svint32_t v_count = svcnt_s32(pg_div, svdup_s32(7));\n        count += svaddv_s32(pg, v_count);\n\n        i += svcntb();\n        v_i = svindex_s32(i, pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    float* data = l.data();\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t vec = svld1_f32(pg, data);\n\n    svbool_t even_mask = svptrue_b8();\n    for (size_t i = 0; i < n; i += 2) {\n        even_mask = svset_lane_b8(SV_VL1, even_mask, i, false);\n    }\n\n    svfloat32_t even_values = svsel_f32(even_mask, vec, svdup_f32(0.0f));\n    svfloat32_t sorted_even_values = svsort_f32(svptrue_b8(), even_values);\n\n    svfloat32_t result = svsel_f32(even_mask, sorted_even_values, vec);\n\n    svst1_f32(pg, data, result);\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    float* data = l.data();\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t vec = svld1_f32(pg, data);\n\n    svbool_t even_mask = svptrue_b8();\n    for (size_t i = 0; i < n; i += 2) {\n        even_mask = svset_lane_b8(SV_VL1, even_mask, i, false);\n    }\n\n    svfloat32_t even_values = svsel_f32(even_mask, vec, svundef_f32());\n    svfloat32_t sorted_even_values = svsort_f32(even_values);\n\n    svfloat32_t result = svsel_f32(even_mask, sorted_even_values, vec);\n\n    svst1_f32(pg, data, result);\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    float* data = l.data();\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t vec = svld1_f32(pg, data);\n\n    // Extract even-indexed elements\n    svbool_t even_pg = svptrue_b8();\n    svfloat32_t even_vec = svld1_gather_f32(even_pg, data, 2);\n\n    // Sort even-indexed elements\n    svfloat32_t sorted_even_vec = svsort_f32(even_pg, even_vec);\n\n    // Merge sorted even-indexed elements back into the original vector\n    svst1_scatter_f32(even_pg, data, 2, sorted_even_vec);\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    float* data = l.data();\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t vec = svld1_f32(pg, data);\n\n    svbool_t even_pg = svwhilelt_b8(0, n);\n    svbool_t odd_pg = svwhilelt_b8(1, n);\n\n    svfloat32_t even_vals = svld1_gather_f32(pg, data, svindex_u8(0, 2));\n    svfloat32_t sorted_even_vals = svsort_f32(svptrue_b8(), even_vals);\n\n    svfloat32_t result = svsel_f32(odd_pg, vec, sorted_even_vals);\n\n    svst1_f32(pg, data, result);\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    float* data = l.data();\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t vec = svld1_f32(pg, data);\n\n    // Extract even-indexed elements\n    svbool_t even_pg = svptrue_b8();\n    svfloat32_t even_vec = svld1_gather_f32(even_pg, data, 2);\n\n    // Sort even-indexed elements\n    svfloat32_t sorted_even_vec = svsort_f32(even_pg, even_vec);\n\n    // Merge sorted even-indexed elements back into the original vector\n    svst1_scatter_f32(pg, data, sorted_even_vec, 2);\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec_a = svld1(pg, l.data());\n    svint32_t vec_b = svld1(pg, l.data() + 1);\n    svint32_t vec_c = svld1(pg, l.data() + 2);\n\n    for (size_t i = 0; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                svint32_t sum = svadd_x(svadd_x(vec_a, vec_b), vec_c);\n                if (svcntp_b8(svcmpeq(sum, svdup_s32(0)), pg)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec_a = svld1(pg, l.data());\n    svint32_t vec_b = svld1(pg, l.data() + 1);\n    svint32_t vec_c = svld1(pg, l.data() + 2);\n\n    for (size_t i = 0; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                svint32_t sum = svadd_n_s32_x(pg, vec_a, vec_b);\n                sum = svadd_n_s32_x(pg, sum, vec_c);\n                if (svcntp_n_s32(pg, sum, 0) > 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec_a = svld1(pg, l.data());\n    svint32_t vec_b = svld1(pg, l.data() + 1);\n    svint32_t vec_c = svld1(pg, l.data() + 2);\n\n    for (size_t i = 0; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                svint32_t sum = svadd_n_s32_x(pg, svadd_n_s32_x(pg, vec_a, vec_b), vec_c);\n                if (svcntp_n_s32(pg, svcmpeq_n_s32(pg, sum, 0)) > 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec_a = svld1(pg, l.data());\n    svint32_t vec_b = svld1(pg, l.data() + 1);\n    svint32_t vec_c = svld1(pg, l.data() + 2);\n\n    for (size_t i = 0; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                svint32_t sum = svadd_n_s32_x(pg, vec_a, vec_b);\n                sum = svadd_n_s32_x(pg, sum, vec_c);\n                if (svcntp_n_s32(pg, sum, 0) > 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, l.data());\n\n    for (size_t i = 0; i < n - 2; ++i) {\n        svint32_t a = svdup_n_s32(l[i]);\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            svint32_t b = svdup_n_s32(l[j]);\n            svint32_t c = svneg_z(pg, svadd_z(pg, a, b));\n            svbool_t match = svcmpeq(pg, vec, c);\n            if (svcntp_b8(pg, match) > 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &l[i]);\n        vec = svadd_z(pg, vec, svdup_s32(1));\n        svst1(pg, &result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &l[i]);\n        svint32_t incr_vec = svadd_z(pg, vec, svdup_s32(1));\n        svst1(pg, &result[i], incr_vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &l[i]);\n        vec = svadd_z(pg, vec, svdup_s32(1));\n        svst1(pg, &result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &l[i]);\n        vec = svadd_z(pg, vec, svdup_n_s32(1));\n        svst1(pg, &result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &l[i]);\n        vec = svadd_z(pg, vec, svdup_s32(1));\n        svst1(pg, &result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    if (l.size() < 2) return false;\n\n    int32_t* data = l.data();\n    size_t n = l.size();\n\n    for (size_t i = 0; i < n; ++i) {\n        svbool_t pg = svptrue_b32();\n        svint32_t vec_i = svdup_s32(data[i]);\n        svint32_t vec_data = svld1(pg, data + i + 1);\n        svint32_t vec_sum = svadd_s32_z(pg, vec_i, vec_data);\n        svbool_t pg_zero = svcmpeq_s32(pg, vec_sum, 0);\n\n        if (svptest_any(svptrue_b32(), pg_zero)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    if (l.size() < 2) return false;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svload_s32(pg, l.data(), l.size());\n\n    for (size_t i = 0; i < l.size(); ++i) {\n        svint32_t current = svdup_s32(l[i]);\n        svint32_t neg_current = svneg_s32(current);\n        svbool_t cmp = svcmpeq_s32(pg, vec, neg_current);\n\n        if (svcntp_b8(pg, cmp) > 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    if (l.size() < 2) return false;\n\n    int32_t* data = l.data();\n    size_t n = l.size();\n\n    for (size_t i = 0; i < n; ++i) {\n        int32_t a = data[i];\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec_a = svdup_n_s32(a);\n        svint32_t vec_b = svld1_s32(pg, data + i + 1);\n        svint32_t sum = svadd_s32_z(pg, vec_a, vec_b);\n        svbool_t pg_zero = svcmpeq_n_s32(pg, sum, 0);\n\n        if (svptest_any(pg_zero, pg_zero)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    if (l.size() < 2) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svload_s32(pg, l.data(), l.size());\n\n    for (size_t i = 0; i < l.size(); ++i) {\n        svint32_t current = svdup_s32(l[i]);\n        svint32_t neg_current = svneg_s32(current);\n        svbool_t cmp = svcmpeq_s32(pg, vec, neg_current);\n\n        if (svcntp_b32(cmp, pg) > 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    if (l.size() < 2) return false;\n\n    int32_t* data = l.data();\n    size_t n = l.size();\n\n    for (size_t i = 0; i < n; ++i) {\n        int32_t current = data[i];\n        svbool_t pg = svptrue_b32();\n        svint32_t vec_current = svdup_s32(current);\n        svint32_t vec_data = svld1_s32(pg, data + i + 1);\n        svint32_t vec_sum = svadd_s32_z(pg, vec_current, vec_data);\n        svbool_t pg_zero = svcmpeq_s32(pg, vec_sum, 0);\n\n        if (svptest_any(svptrue_b32(), pg_zero)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    std::string result;\n    svbool_t pg = svptrue_b8();\n\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x /= base;\n        result.insert(result.begin(), '0' + remainder);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    std::string result;\n    svbool_t pg = svptrue_b8();\n\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x /= base;\n        result.insert(result.begin(), '0' + remainder);\n    }\n\n    return result.empty() ? \"0\" : result;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    std::string result;\n    svbool_t pg = svptrue_b8();\n\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x /= base;\n        result.insert(result.begin(), '0' + remainder);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    std::string result;\n    svbool_t pg = svptrue_b8();\n    svint8_t base_vec = svdup_s8(base);\n    svint64_t x_vec = svdup_s64(x);\n\n    while (svcmpge_s64(pg, x_vec, svdup_s64(0))) {\n        svint64_t remainder_vec = svdiv_s64(pg, x_vec, base_vec);\n        svint64_t digit_vec = svsub_s64(pg, x_vec, svmul_s64(pg, remainder_vec, base_vec));\n        result += std::to_string(svaddv_s64(pg, digit_vec));\n        x_vec = remainder_vec;\n    }\n\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    std::string result;\n    svbool_t pg = svptrue_b8();\n\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x /= base;\n        result.insert(result.begin(), '0' + remainder);\n    }\n\n    return result.empty() ? \"0\" : result;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b8(i, j);\n        svint8_t vec1 = svld1(pg, &text[i]);\n        svint8_t vec2 = svld1(pg, &text[j]);\n\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        if (!svptest_any(svptrue_b8(), cmp)) return false;\n\n        i += svcntb();\n        j -= svcntb();\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b8(i, j);\n        svint8_t vec1 = svld1(pg, &text[i]);\n        svint8_t vec2 = svld1(pg, &text[j]);\n\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        if (!svptest_any(svptrue_b8(), cmp)) {\n            return false;\n        }\n\n        i += svcntb();\n        j -= svcntb();\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b8(i, j);\n        svint8_t vec1 = svld1(pg, &text[i]);\n        svint8_t vec2 = svld1(pg, &text[j]);\n\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        if (!svptest_any(svptrue_b8(), cmp)) return false;\n\n        i += svcntb();\n        j -= svcntb();\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b8(i, j);\n        svint8_t vec1 = svld1(pg, (const int8_t*)&text[i]);\n        svint8_t vec2 = svld1(pg, (const int8_t*)&text[j]);\n\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        if (!svptest_any(svptrue_b8(), cmp)) {\n            return false;\n        }\n\n        i += svcntb();\n        j -= svcntb();\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b8(i, j);\n        svint8_t vec1 = svld1(pg, &text[i]);\n        svint8_t vec2 = svld1(pg, &text[j]);\n\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        if (!svptest_any(svptrue_b8(), cmp)) return false;\n\n        i += svcntb();\n        j -= svcntb();\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    const char* input = s.c_str();\n    char* output = out.data();\n    size_t n = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t offset = svdup_s8(-5);\n    svint8_t base = svdup_s8('a');\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, input + i);\n        vec = svadd_s8_z(pg, vec, offset);\n        vec = svsub_s8_z(pg, vec, base);\n        vec = svadd_s8_z(pg, svrem_s8_z(pg, vec, svdup_s8(26)), base);\n        svst1_s8(pg, output + i, vec);\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    const char* input = s.c_str();\n    char* output = out.data();\n    size_t n = s.length();\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, n);\n        svint8_t vec = svld1_s8(pg, input + i);\n        svint8_t shifted = svsub_n_s8_x(pg, vec, 5);\n        svint8_t wrapped = svsub_n_s8_x(pg, shifted, svsub_n_s8_x(pg, svdup_n_s8('a'), svdup_n_s8('a')));\n        svint8_t decoded = svadd_n_s8_x(pg, wrapped, svdup_n_s8('a'));\n        svst1_s8(pg, output + i, decoded);\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    const char* input = s.c_str();\n    char* output = out.data();\n    size_t n = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t shift = svdup_s8(-5);\n    svint8_t base = svdup_s8('a');\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, input + i);\n        svint8_t decoded = svadd_s8_z(pg, svsub_s8_z(pg, vec, shift), base);\n        decoded = svadd_s8_z(pg, decoded, svsub_s8_z(pg, svdup_s8(26), svsub_s8_z(pg, svdup_s8(26), svsub_s8_z(pg, decoded, base))));\n        svst1_s8(pg, output + i, decoded);\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    const char* input = s.c_str();\n    char* output = out.data();\n    size_t n = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t offset = svdup_s8(-5);\n    svint8_t a = svdup_s8('a');\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, input + i);\n        svint8_t decoded = svadd_s8_z(pg, svsub_s8_z(pg, vec, offset), a);\n        decoded = svadd_s8_z(pg, svsub_s8_z(pg, decoded, a), a);\n        svst1_s8(pg, output + i, decoded);\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    svbool_t pg = svptrue_b8();\n    svint8_t shift = svdup_s8(-5);\n    svint8_t base = svdup_s8('a');\n\n    for (size_t i = 0; i < s.length(); i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, &s[i]);\n        svint8_t decoded = svadd_s8_z(pg, svsub_s8_z(pg, vec, shift), base);\n        decoded = svadd_s8_z(pg, decoded, svdup_s8(26));\n        decoded = svsub_s8_z(pg, decoded, svdup_s8(26));\n        decoded = svadd_s8_z(pg, decoded, base);\n        svst1_s8(pg, &out[i], decoded);\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\nbool below_threshold_simd(std::vector<int> l, int t) {\n    const int* data = l.data();\n    size_t n = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t threshold = svdup_s32(t);\n    svint32_t vec;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        vec = svld1(pg, data + i);\n        svbool_t cmp = svcmplt_s32(pg, vec, threshold);\n        if (!svptest_any(svptrue_b32(), cmp)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\nbool below_threshold_simd(std::vector<int> l, int t) {\n    const int* data = l.data();\n    size_t n = l.size();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t threshold = svdup_s32(t);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svint32_t vec = svld1(pg, data + i);\n        svbool_t cmp = svcmplt(vec, threshold);\n        if (!svall(cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\nbool below_threshold_simd(std::vector<int> l, int t) {\n    const int* data = l.data();\n    size_t n = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t threshold = svdup_s32(t);\n    svint32_t vec;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        vec = svld1_s32(pg, data + i);\n        svbool_t cmp = svcmplt_s32(pg, vec, threshold);\n        if (!svptest_any(svptrue_b32(), cmp)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\nbool below_threshold_simd(std::vector<int> l, int t) {\n    const int* data = l.data();\n    size_t n = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t threshold = svdup_s32(t);\n    svint32_t vec;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        size_t vl = svcntw();\n        vec = svld1_s32(pg, data + i);\n        svbool_t cmp = svcmplt_s32(pg, vec, threshold);\n        if (!svptest_any(svptrue_b32(), cmp)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\nbool below_threshold_simd(std::vector<int> l, int t) {\n    const int* data = l.data();\n    size_t n = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t threshold = svdup_s32(t);\n    svint32_t vec;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        vec = svld1(pg, data + i);\n        svbool_t cmp = svcmplt_s32(pg, vec, threshold);\n        if (!svptest_any(svptrue_b32(), cmp)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\nbool correct_bracketing_simd(std::string brackets) {\n    const char* data = brackets.c_str();\n    size_t len = brackets.length();\n    int32_t count = 0;\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svint8_t vec = svld1_s8(pg, data + i);\n\n        svbool_t open_pg = svcmpeq(pg, vec, '<');\n        svbool_t close_pg = svcmpeq(pg, vec, '>');\n\n        count += svaddv_s32(svsubv_s32(svaddv_s32(svdup_s32(1), open_pg), svdup_s32(1), close_pg));\n        if (count < 0) {\n            return false;\n        }\n    }\n\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\nbool correct_bracketing_simd(std::string brackets) {\n    const char* data = brackets.c_str();\n    size_t len = brackets.length();\n    int32_t count = 0;\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svint8_t vec = svld1(pg, data + i);\n\n        svbool_t open_pg = svcmpeq(pg, vec, '<');\n        svbool_t close_pg = svcmpeq(pg, vec, '>');\n\n        count += svaddv(svptrue_b32(), svcnt(open_pg));\n        count -= svaddv(svptrue_b32(), svcnt(close_pg));\n\n        if (count < 0) {\n            return false;\n        }\n    }\n\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    const char* data = brackets.c_str();\n    size_t len = brackets.length();\n    int32_t balance = 0;\n\n    for (size_t i = 0; i < len; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svint32_t vec = svld1(pg, (const int32_t*)(data + i));\n\n        svbool_t open_pg = svcmpeq(pg, vec, '<');\n        svbool_t close_pg = svcmpeq(pg, vec, '>');\n\n        balance += svaddv(svsubv(svcntp(open_pg), svcntp(close_pg)));\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\nbool correct_bracketing_simd(std::string brackets) {\n    const char* data = brackets.c_str();\n    size_t len = brackets.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t open_bracket = svdup_s8('<');\n    svint8_t close_bracket = svdup_s8('>');\n\n    svint8_t vec_data = svld1_s8(pg, data);\n    svbool_t open_mask = svcmpeq_s8(pg, vec_data, open_bracket);\n    svbool_t close_mask = svcmpeq_s8(pg, vec_data, close_bracket);\n\n    int open_count = svaddv_s32(pg, svcnt_s8(pg, open_mask));\n    int close_count = svaddv_s32(pg, svcnt_s8(pg, close_mask));\n\n    return open_count == close_count;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\nbool correct_bracketing_simd(std::string brackets) {\n    const char* data = brackets.c_str();\n    size_t len = brackets.length();\n    int32_t count = 0;\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svint8_t vec = svld1(pg, data + i);\n\n        svbool_t open_pg = svcmpeq(pg, vec, '<');\n        svbool_t close_pg = svcmpeq(pg, vec, '>');\n\n        count += svaddv(svptrue_b32(), svcnt_b32(open_pg, svptrue_b32()));\n        count -= svaddv(svptrue_b32(), svcnt_b32(close_pg, svptrue_b32()));\n    }\n\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.size();\n    if (len == 0) return true;\n\n    svbool_t pg = svptrue_b8();\n    svint8_t open_bracket = svdup_s8('(');\n    svint8_t close_bracket = svdup_s8(')');\n\n    int balance = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, &brackets[i]);\n        svbool_t open_mask = svcmpeq_s8(pg, vec, open_bracket);\n        svbool_t close_mask = svcmpeq_s8(pg, vec, close_bracket);\n\n        balance += svaddv_s32(pg, svreinterpret_s32_s8(svdup_s8(1)), open_mask);\n        balance -= svaddv_s32(pg, svreinterpret_s32_s8(svdup_s8(1)), close_mask);\n\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.size();\n    if (len == 0) return true;\n\n    svbool_t pg = svptrue_b8();\n    svint8_t open_bracket = svdup_s8('(');\n    svint8_t close_bracket = svdup_s8(')');\n\n    int balance = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, &brackets[i]);\n        svbool_t open_mask = svcmpeq_s8(pg, vec, open_bracket);\n        svbool_t close_mask = svcmpeq_s8(pg, vec, close_bracket);\n\n        balance += svaddv_s32(pg, svreinterpret_s32_s8(svdup_s8(1)), open_mask);\n        balance -= svaddv_s32(pg, svreinterpret_s32_s8(svdup_s8(1)), close_mask);\n\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.size();\n    if (len == 0) return true;\n\n    svbool_t pg = svptrue_b8();\n    svint8_t open_bracket = svdup_s8('(');\n    svint8_t close_bracket = svdup_s8(')');\n\n    int balance = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, &brackets[i]);\n        svbool_t open_mask = svcmpeq(pg, vec, open_bracket);\n        svbool_t close_mask = svcmpeq(pg, vec, close_bracket);\n\n        balance += svaddv_s32(svptrue_b32(), svcntp_b8(open_mask, pg));\n        balance -= svaddv_s32(svptrue_b32(), svcntp_b8(close_mask, pg));\n\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    svint8_t open_bracket = svdup_s8('(');\n    svint8_t close_bracket = svdup_s8(')');\n\n    int64_t balance = 0;\n    size_t len = brackets.size();\n    size_t i = 0;\n\n    while (i < len) {\n        svint8_t vec = svld1_s8(pg, &brackets[i]);\n        svbool_t open_mask = svcmpeq_s8(pg, vec, open_bracket);\n        svbool_t close_mask = svcmpeq_s8(pg, vec, close_bracket);\n\n        balance += svcntp_s8(open_mask, pg) - svcntp_s8(close_mask, pg);\n\n        if (balance < 0) {\n            return false;\n        }\n\n        i += svcntp_s8(pg, pg);\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.size();\n    if (len == 0) return true;\n\n    svbool_t pg = svwhilelt_b32(0, len);\n    svint32_t open_bracket = svdup_s32('(');\n    svint32_t close_bracket = svdup_s32(')');\n\n    svint32_t vec = svld1(pg, (const int32_t*)brackets.c_str());\n\n    svint32_t open_count = svdup_s32(0);\n    svint32_t close_count = svdup_s32(0);\n\n    for (size_t i = 0; i < len; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svint32_t chunk = svld1(pg, (const int32_t*)(brackets.c_str() + i));\n\n        svbool_t is_open = svcmpeq(pg, chunk, open_bracket);\n        svbool_t is_close = svcmpeq(pg, chunk, close_bracket);\n\n        open_count = svadd_x(pg, open_count, svcntp_b32(is_open, pg));\n        close_count = svadd_x(pg, close_count, svcntp_b32(is_close, pg));\n    }\n\n    int32_t open_sum = svaddv(svptrue_b32(), open_count);\n    int32_t close_sum = svaddv(svptrue_b32(), close_count);\n\n    return open_sum == close_sum;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return {};\n    }\n\n    std::vector<float> result(n - 1);\n    svbool_t pg = svwhilelt_b32(0, n - 1);\n\n    for (size_t i = 1; i < n; ++i) {\n        svfloat32_t v_xs = svld1(pg, &xs[i]);\n        svfloat32_t v_coeff = svdup_f32(i);\n        svfloat32_t v_result = svmul_f32_z(pg, v_xs, v_coeff);\n        svst1(pg, &result[i - 1], v_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return {};\n    }\n\n    std::vector<float> result(n - 1);\n    float* xs_data = xs.data();\n    float* result_data = result.data();\n\n    for (size_t i = 1; i < n; ++i) {\n        svfloat32_t v_xs = svld1(svptrue_b32(), xs_data + i);\n        svfloat32_t v_i = svdup_f32(static_cast<float>(i));\n        svfloat32_t v_result = svmul_f32(v_xs, v_i);\n        svst1(svptrue_b32(), result_data + i - 1, v_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return {};\n    }\n\n    std::vector<float> result(n - 1);\n    svbool_t pg = svwhilelt_b32(0, n - 1);\n    svfloat32_t vxs = svld1(pg, xs.data());\n    svfloat32_t indices = svindex_f32(1, 1);\n\n    svfloat32_t vresult = svmul_f32_z(pg, vxs, indices);\n    svst1(pg, result.data(), vresult);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return {};\n    }\n\n    std::vector<float> result(n - 1);\n    float* xs_data = xs.data();\n    float* result_data = result.data();\n\n    for (size_t i = 1; i < n; ++i) {\n        svfloat32_t v_xs = svld1(svptrue_b32(), xs_data + i);\n        svfloat32_t v_i = svdup_f32(static_cast<float>(i));\n        svfloat32_t v_result = svmul_f32(v_xs, v_i);\n        svst1(svptrue_b32(), result_data + i - 1, v_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return {};\n    }\n\n    std::vector<float> result(n - 1);\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 1; i < n; ++i) {\n        svfloat32_t v = svld1(pg, &xs[i]);\n        svfloat32_t coeff = svdup_f32(static_cast<float>(i));\n        svfloat32_t prod = svmul_f32_z(pg, v, coeff);\n        svst1(pg, &result[i - 1], prod);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    const char* str = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8('a');\n    svint8_t input = svld1(pg, str);\n\n    svbool_t is_vowel = svcmpeq(pg, input, vowels);\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('e')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('i')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('o')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('u')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('A')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('E')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('I')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('O')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('U')));\n\n    if (len > 0 && str[len - 1] == 'y') {\n        is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('y')));\n    }\n\n    int count = svaddv(svdup_s32(0), svcntp(is_vowel));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\nint vowels_count_simd(std::string s) {\n    const char* str = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8('a');\n    svint8_t input = svld1(pg, str);\n\n    svbool_t is_vowel = svcmpeq(pg, input, vowels);\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('e')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('i')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('o')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('u')));\n\n    if (len > 0 && str[len - 1] == 'y') {\n        is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('y')));\n    }\n\n    svuint8_t count = svcntp(is_vowel);\n    return svaddv_u8(count);\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\nint vowels_count_simd(std::string s) {\n    const char* str = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8('a');\n    svint8_t vowels_upper = svdup_s8('A');\n\n    svint8_t count = svdup_s8(0);\n    svint8_t one = svdup_s8(1);\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t chunk = svld1(pg, str + i);\n        svbool_t is_vowel = svcmpeq(pg, chunk, vowels) | svcmpeq(pg, chunk, vowels_upper);\n\n        if (i + svcntb() >= len && str[len - 1] == 'y') {\n            is_vowel = svorrb_z(pg, is_vowel, svcmpeq(pg, chunk, svdup_s8('y')));\n        }\n\n        count = svaddb_m(pg, count, svdup_s8(1), is_vowel);\n    }\n\n    return svaddv(pg, count);\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\nint vowels_count_simd(std::string s) {\n    const char* str = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8('a');\n    svint8_t input = svld1(pg, str);\n\n    svbool_t is_vowel = svcmpeq(pg, input, vowels);\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('e')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('i')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('o')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('u')));\n\n    if (len > 0 && str[len - 1] == 'y') {\n        is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('y')));\n    }\n\n    svuint8_t count = svcntp_b8(is_vowel, pg);\n    return svaddv_u8(pg, count);\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    const char* str = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8('a');\n    svint8_t input = svld1_s8(pg, str);\n\n    svbool_t is_vowel = svcmpeq(pg, input, vowels);\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('e')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('i')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('o')));\n    is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('u')));\n\n    if (len > 0 && str[len - 1] == 'y') {\n        is_vowel = svorr(is_vowel, svcmpeq(pg, input, svdup_s8('y')));\n    }\n\n    int count = svaddv_s32(svdup_s32(0), svcntp_b8(is_vowel, pg));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <string>\n\nint digitSum_simd(std::string s) {\n    const char* str = s.c_str();\n    svbool_t pg = svptrue_b8();\n    svint8_t sum_vec = svdup_s8(0);\n    svint8_t ascii_vec = svdup_s8(0);\n\n    for (size_t i = 0; i < s.length(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, s.length());\n        ascii_vec = svld1b(pg, str + i);\n        svbool_t upper_pg = svcmplt_n_s8(ascii_vec, 'A') & svcmpge_n_s8(ascii_vec, 'Z');\n        sum_vec = svadd_s8_x(pg, sum_vec, svdup_s8(0), ascii_vec);\n    }\n\n    int sum = svaddv_s8(svptrue_b8(), sum_vec);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c++\nint digitSum_simd(std::string s) {\n    const char* str = s.c_str();\n    int sum = 0;\n    size_t len = s.length();\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, len);\n        svint8_t vec = svld1b(pg, str + i);\n\n        svbool_t upper_pg = svcmplt_n_s8(vec, 'A') & svcmpge_n_s8(vec, 'Z');\n        svint8_t upper_vec = svadd_n_s8_x(pg, vec, 0);\n\n        svuint8_t upper_sum = svaddv_u8(pg, upper_vec);\n        sum += svaddv_u8(pg, upper_sum);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <string>\n\nint digitSum_simd(std::string s) {\n    const char* str = s.c_str();\n    svbool_t pg = svptrue_b8();\n    svint8_t sum_vec = svdup_s8(0);\n    svint8_t ascii_vec;\n    svbool_t upper_mask;\n\n    for (size_t i = 0; i < s.length(); i += svcntb()) {\n        ascii_vec = svld1_s8(pg, str + i);\n        upper_mask = svcmplt_n_s8(ascii_vec, 'A');\n        upper_mask = svbic_z(pg, upper_mask, svcmplt_n_s8(ascii_vec, 'Z' + 1));\n        sum_vec = svadd_z(pg, sum_vec, svreinterpret_s8_s8(svaddv_s8(svdup_s8(0), svreinterpret_s8_s8(ascii_vec))));\n    }\n\n    return svaddv_s8(sum_vec);\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <string>\n\nint digitSum_simd(std::string s) {\n    const char* str = s.c_str();\n    svbool_t pg = svptrue_b8();\n    svint8_t sum = svdup_s8(0);\n    svint8_t ascii_values = svdup_s8(0);\n    svint8_t upper_bound = svdup_s8('A');\n    svint8_t lower_bound = svdup_s8('Z');\n\n    for (size_t i = 0; i < s.length(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, s.length());\n        ascii_values = svld1_s8(pg, str + i);\n        svbool_t upper_pg = svcmpge_s8(pg, ascii_values, upper_bound) & svcmple_s8(pg, ascii_values, lower_bound);\n        sum = svadd_s8_z(pg, sum, svreinterpret_s8_s8(svadd_s8_z(upper_pg, svdup_s8(0), ascii_values)));\n    }\n\n    return svaddv_s8(svptrue_b8(), sum);\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c++\nint digitSum_simd(std::string s) {\n    const char* str = s.c_str();\n    int len = s.length();\n    int sum = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint8_t upper_bound = svdup_s8('A');\n    svint8_t lower_bound = svdup_s8('Z');\n\n    for (int i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1(pg, str + i);\n        svbool_t is_upper = svcmple_s8(upper_bound, vec) & svcmple_s8(vec, lower_bound);\n        svint8_t filtered = svsel_s8(is_upper, vec, svdup_s8(0));\n        sum += svaddv_s8(svptrue_b8(), filtered);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svload_s32(pg, arr.data(), arr.size());\n    svint32_t indices = svindex_s32(0, 1);\n\n    svbool_t even_mask = svcmpeq_n_s32_z(pg, svand_s32_z(pg, vec, 1), 0);\n    svint32_t even_values = svsel_s32(even_mask, vec, svdup_n_s32(INT32_MAX));\n    svint32_t even_indices = svsel_s32(even_mask, indices, svdup_n_s32(INT32_MAX));\n\n    int32_t min_value = svminv_s32_z(pg, even_values);\n    if (min_value == INT32_MAX) {\n        return {};\n    }\n\n    svbool_t min_mask = svcmpeq_n_s32_z(pg, even_values, min_value);\n    int32_t min_index = svminv_s32_z(pg, svsel_s32(min_mask, even_indices, svdup_n_s32(INT32_MAX)));\n\n    return {min_value, min_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svload_s32(pg, arr.data());\n    svint32_t indices = svindex_s32(0, 1);\n\n    svbool_t even_mask = svcmpeq_n_s32(svand_s32_z(pg, vec, 1), 0);\n    svint32_t even_values = svsel_s32(even_mask, vec, svdup_s32(SV_INT32_MAX));\n    svint32_t even_indices = svsel_s32(even_mask, indices, svdup_s32(SV_INT32_MAX));\n\n    int min_value = svminv_s32(even_values);\n    if (min_value == SV_INT32_MAX) {\n        return {};\n    }\n\n    svbool_t min_mask = svcmpeq_n_s32(even_values, min_value);\n    int min_index = svminv_s32(svsel_s32(min_mask, even_indices, svdup_s32(SV_INT32_MAX)));\n\n    return {min_value, min_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t indices = svindex_s32(0, 1);\n\n    svbool_t even_mask = svcmpeq(svand(vec, 1), 0);\n    if (!svptest_any(svptrue_b8(), even_mask)) {\n        return {};\n    }\n\n    svint32_t even_values = svsel(even_mask, vec, svdup_s32(SV_INT32_MAX));\n    svint32_t even_indices = svsel(even_mask, indices, svdup_s32(SV_INT32_MAX));\n\n    int min_value = svminv(pg, even_values);\n    svbool_t min_mask = svcmpeq(even_values, min_value);\n    int min_index = svminv(pg, svsel(min_mask, even_indices, svdup_s32(SV_INT32_MAX)));\n\n    return {min_value, min_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svload_s32(pg, arr.data());\n    svint32_t indices = svindex_s32(0, 1);\n\n    svbool_t even_mask = svcmpeq_n_s32(svand_s32_z(pg, vec, 1), 0);\n    svint32_t even_values = svsel_s32(even_mask, vec, svdup_s32(SV_INT32_MAX));\n    svint32_t even_indices = svsel_s32(even_mask, indices, svdup_s32(SV_INT32_MAX));\n\n    int min_value = svminv_s32(even_values);\n    if (min_value == SV_INT32_MAX) {\n        return {};\n    }\n\n    svbool_t min_mask = svcmpeq_n_s32(even_values, min_value);\n    int min_index = svminv_s32(svsel_s32(min_mask, even_indices, svdup_s32(SV_INT32_MAX)));\n\n    return {min_value, min_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svload_s32(pg, arr.data());\n    svint32_t indices = svindex_s32(0, 1);\n\n    svbool_t even_mask = svcmpeq_n_s32(svand_s32_z(pg, vec, 1), 0);\n    svint32_t even_values = svsel_s32(even_mask, vec, svdup_s32(SV_INT32_MAX));\n    svint32_t even_indices = svsel_s32(even_mask, indices, svdup_s32(SV_INT32_MAX));\n\n    int min_value = svminv_s32(even_values);\n    if (min_value == SV_INT32_MAX) {\n        return {};\n    }\n\n    svbool_t min_mask = svcmpeq_n_s32(even_values, min_value);\n    int min_index = svminv_s32(svsel_s32(min_mask, even_indices, svdup_s32(SV_INT32_MAX)));\n\n    return {min_value, min_index};\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    int max_val = *std::max_element(lst.begin(), lst.end());\n    std::vector<int> count(max_val + 1, 0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n\n        for (int j = 0; j < svcntw(); ++j) {\n            int val = svget_lane(vec, j);\n            if (val > 0 && val <= max_val) {\n                count[val]++;\n            }\n        }\n    }\n\n    for (int i = max_val; i > 0; --i) {\n        if (count[i] >= i) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    int max_val = *std::max_element(lst.begin(), lst.end());\n    std::vector<int> count(max_val + 1, 0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n\n        svbool_t pg_nonzero = svcmpge(pg, vec, 0);\n        svst1(pg_nonzero, &count[svptrue_b32()], svaddv(pg_nonzero, vec, svld1(pg_nonzero, &count[svptrue_b32()])));\n    }\n\n    int result = -1;\n    for (int i = 1; i <= max_val; ++i) {\n        if (count[i] >= i) {\n            result = i;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    int max_val = *std::max_element(lst.begin(), lst.end());\n    std::vector<int> count(max_val + 1, 0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n\n        svbool_t pg_positive = svcmpge(pg, vec, 0);\n        svst1(pg_positive, &count[svptrue_b32()], svaddv(pg_positive, vec, svld1(pg_positive, &count[svptrue_b32()])));\n    }\n\n    int result = -1;\n    for (int i = 1; i <= max_val; ++i) {\n        if (count[i] >= i) {\n            result = i;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    int max_val = *std::max_element(lst.begin(), lst.end());\n    std::vector<int> count(max_val + 1, 0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n\n        svuint32_t indices = svindex_u32(i, 1);\n        svst1(pg, &count[0], svadd_z(pg, svld1(pg, &count[0]), svdup_n_u32(1)));\n    }\n\n    int result = -1;\n    for (int i = 1; i <= max_val; ++i) {\n        if (count[i] >= i) {\n            result = i;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    int max_val = *std::max_element(lst.begin(), lst.end());\n    std::vector<int> count(max_val + 1, 0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n\n        svint32_t idx = svindex_s32(i, 1);\n        svbool_t valid = svcmpge(pg, vec, 1);\n\n        while (svptest_any(svptrue_b32(), valid)) {\n            svint32_t val = svadd_z(pg, vec, 0);\n            svst1(pg, &count[svget_lane(val, 0)], val);\n            valid = svptrue_b32();\n        }\n    }\n\n    int result = -1;\n    for (int i = 1; i <= max_val; ++i) {\n        if (count[i] >= i) {\n            result = i;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vec_q = svld1(pg, q.data());\n\n    svint32_t sum = svaddv(pg, vec_q);\n    int total_sum = svaddv(pg, sum);\n\n    if (total_sum > w) {\n        return false;\n    }\n\n    svint32_t rev_vec_q = svrev(pg, vec_q);\n    svbool_t is_palindrome = svcmpeq(pg, vec_q, rev_vec_q);\n\n    return svall(is_palindrome);\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    svbool_t pg = svptrue_b8();\n    svint32_t vq = svload_s32(pg, q.data());\n    svint32_t vq_rev = svrev_s32(pg, vq);\n    svbool_t is_palindrome = svcmpeq_s32(pg, vq, vq_rev);\n    bool balanced = svaddv_s32(pg, is_palindrome);\n    svint32_t sum = svaddv_s32(pg, vq);\n    return balanced && (sum <= w);\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vec_q = svld1(pg, q.data());\n\n    svint32_t sum = svaddv(pg, vec_q);\n    int total_sum = svaddv(pg, sum);\n\n    if (total_sum > w) {\n        return false;\n    }\n\n    svint32_t rev_vec_q = svrev(pg, vec_q);\n    svbool_t is_palindrome = svcmpeq(pg, vec_q, rev_vec_q);\n    bool palindrome = svaddv(pg, is_palindrome) == n;\n\n    return palindrome;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v_q = svld1(pg, q.data());\n\n    svint32_t v_sum = svaddv(pg, v_q);\n    int sum = svaddv(pg, v_sum);\n\n    if (sum > w) {\n        return false;\n    }\n\n    svint32_t v_rev = svrev(pg, v_q);\n    svbool_t is_palindrome = svcmpeq(pg, v_q, v_rev);\n\n    return svaddv(pg, is_palindrome) == n;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v_q = svld1(pg, q.data());\n\n    svint32_t v_sum = svaddv(pg, v_q);\n    int sum = svaddv(pg, v_sum);\n\n    if (sum > w) {\n        return false;\n    }\n\n    svint32_t v_rev_q = svrev(pg, v_q);\n    svbool_t is_palindrome = svcmpeq(pg, v_q, v_rev_q);\n\n    return svaddv(pg, is_palindrome) == n;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < n / 2; ++i) {\n        svint32_t vec1 = svld1(pg, &arr[i]);\n        svint32_t vec2 = svld1(pg, &arr[n - i - 1]);\n\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        changes += svcntp_b8(pg, cmp);\n    }\n\n    return n - changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < n / 2; ++i) {\n        svint32_t v1 = svld1(pg, &arr[i]);\n        svint32_t v2 = svld1(pg, &arr[n - i - 1]);\n\n        svbool_t cmp = svcmpeq(pg, v1, v2);\n        changes += svcntp_b8(svptrue_b8(), svnot_z(pg, cmp));\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < n / 2; ++i) {\n        svint32_t v1 = svld1(pg, &arr[i]);\n        svint32_t v2 = svld1(pg, &arr[n - i - 1]);\n\n        svbool_t cmp = svcmpeq(pg, v1, v2);\n        changes += svcntp_b8(pg, svnot_z(pg, cmp));\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\nint smallest_change_simd(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (int i = 0; i < n / 2; ++i) {\n        svint32_t vec1 = svld1(pg, &arr[i]);\n        svint32_t vec2 = svld1(pg, &arr[n - i - 1]);\n\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        changes += svcntp_b8(svptrue_b8(), svnot_z(pg, cmp));\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < n / 2; ++i) {\n        svint32_t v1 = svld1(pg, &arr[i]);\n        svint32_t v2 = svld1(pg, &arr[n - i - 1]);\n\n        svbool_t cmp = svcmpeq(pg, v1, v2);\n        changes += svcntp_b8(pg, svnot_z(pg, cmp));\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int32_t total1 = 0;\n    int32_t total2 = 0;\n\n    for (const auto& str : lst1) {\n        total1 += str.size();\n    }\n\n    for (const auto& str : lst2) {\n        total2 += str.size();\n    }\n\n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int64_t total1 = 0, total2 = 0;\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < lst1.size(); i += vl) {\n        svbool_t pg = svwhilelt_b64(i, lst1.size());\n        svint64_t lengths = svlen_s64(pg, lst1.data() + i);\n        total1 += svaddv_s64(pg, lengths);\n    }\n\n    for (size_t i = 0; i < lst2.size(); i += vl) {\n        svbool_t pg = svwhilelt_b64(i, lst2.size());\n        svint64_t lengths = svlen_s64(pg, lst2.data() + i);\n        total2 += svaddv_s64(pg, lengths);\n    }\n\n    return total1 < total2 ? lst1 : lst2;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int32_t total1 = 0, total2 = 0;\n    const int32_t *ptr1 = reinterpret_cast<const int32_t*>(lst1.data());\n    const int32_t *ptr2 = reinterpret_cast<const int32_t*>(lst2.data());\n    size_t count1 = lst1.size();\n    size_t count2 = lst2.size();\n\n    for (size_t i = 0; i < count1; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, count1);\n        svint32_t vec1 = svld1(pg, ptr1 + i);\n        total1 += svaddv(pg, vec1);\n    }\n\n    for (size_t i = 0; i < count2; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, count2);\n        svint32_t vec2 = svld1(pg, ptr2 + i);\n        total2 += svaddv(pg, vec2);\n    }\n\n    return total1 < total2 ? lst1 : lst2;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int32_t total1 = 0;\n    int32_t total2 = 0;\n\n    for (const auto& str : lst1) {\n        total1 += str.size();\n    }\n\n    for (const auto& str : lst2) {\n        total2 += str.size();\n    }\n\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int32_t total1 = 0;\n    int32_t total2 = 0;\n\n    for (const auto& str : lst1) {\n        total1 += str.size();\n    }\n\n    for (const auto& str : lst2) {\n        total2 += str.size();\n    }\n\n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    if (x == 1) {\n        return n == 1;\n    }\n\n    uint64_t power = n;\n    while (power <= x) {\n        if (power == x) {\n            return true;\n        }\n        if (power > UINT64_MAX / n) {\n            return false;\n        }\n        power *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 1) return true;\n    if (n == 1) return x == 1;\n    if (n == 0) return x == 1;\n\n    uint64_t current = n;\n    while (current <= x) {\n        if (current == x) return true;\n        if (current > UINT64_MAX / n) break;\n        current *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 1) return true;\n    if (n == 1) return x == 1;\n    if (n == 0) return x == 1;\n\n    uint64_t current = n;\n    while (current <= x) {\n        if (current == x) return true;\n        if (current > UINT64_MAX / n) break;\n        current *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 1) return true;\n    if (n == 1) return x == 1;\n    if (n == 0) return x == 1;\n\n    uint64_t current = n;\n    while (current <= x) {\n        if (current == x) return true;\n        if (current > UINT64_MAX / n) break;\n        current *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    if (x == 1) {\n        return true;\n    }\n    if (n == 0 || x == 0) {\n        return false;\n    }\n\n    uint64_t current = n;\n    while (current <= x) {\n        if (current == x) {\n            return true;\n        }\n        if (current > UINT64_MAX / n) {\n            return false;\n        }\n        current *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    const char* hex_digits = num.c_str();\n    size_t len = num.length();\n\n    // Define the prime hexadecimal digits\n    const char prime_hex_digits[] = {'2', '3', '5', '7', 'B', 'D'};\n    const int num_primes = sizeof(prime_hex_digits) / sizeof(prime_hex_digits[0]);\n\n    // Initialize the count\n    int count = 0;\n\n    // Process the input string in chunks\n    for (size_t i = 0; i < len; i += svcntb()) {\n        // Load a chunk of the input string\n        svbool_t pg = svwhilelt_b8(i, len);\n        svuint8_t chunk = svld1_u8(pg, hex_digits + i);\n\n        // Initialize a mask for prime digits\n        svbool_t prime_mask = svptrue_b8();\n\n        // Compare each character in the chunk with each prime digit\n        for (int j = 0; j < num_primes; ++j) {\n            svuint8_t prime_digit = svdup_n_u8(prime_hex_digits[j]);\n            svbool_t match = svcmpeq(pg, chunk, prime_digit);\n            prime_mask = svand_b_z(pg, prime_mask, match);\n        }\n\n        // Count the number of prime digits in the chunk\n        count += svcntp_b8(svptrue_b8(), prime_mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    const char* hex_digits = num.c_str();\n    size_t len = num.length();\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t prime_digits = svdup_u8(0x2357BD);\n    svuint8_t count = svdup_u8(0);\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, hex_digits + i);\n        svbool_t is_prime = svcmpeq(pg, vec, prime_digits);\n        count = svadd_u8_z(pg, count, svcnt_u8(is_prime, pg));\n    }\n\n    return svaddv_u8(svptrue_b8(), count);\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    const char* hex_digits = num.c_str();\n    size_t len = num.length();\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t prime_digits = svdup_u8(0x2357BD);\n    svuint8_t count = svdup_u8(0);\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, hex_digits + i);\n        svbool_t is_prime = svcmpeq(pg, vec, prime_digits);\n        count = svadd_u8_z(pg, count, svcnt_u8(pg, is_prime));\n    }\n\n    uint8_t result = svaddv_u8(svptrue_b8(), count);\n    return result;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    const char* hex_digits = num.c_str();\n    size_t len = num.length();\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t prime_digits = svdup_u8(0x2357BD);\n    svuint8_t count = svdup_u8(0);\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svuint8_t chunk = svld1_u8(pg, hex_digits + i);\n        svbool_t is_prime = svcmpeq_u8(pg, chunk, prime_digits);\n        count = svadd_u8_z(pg, count, svcnt_u8(pg, is_prime));\n    }\n\n    uint8_t result = svaddv_u8(pg, count);\n    return result;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    const char* hex_digits = num.c_str();\n    size_t len = num.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t prime_digits = svdup_s8(0x02 | 0x03 << 8 | 0x05 << 16 | 0x07 << 24 | 0x0B << 32 | 0x0D << 40);\n    svint8_t hex_to_dec = svdup_s8(0x00 | 0x01 << 8 | 0x02 << 16 | 0x03 << 24 | 0x04 << 32 | 0x05 << 40 | 0x06 << 48 | 0x07 << 56 |\n                                   0x08 << 64 | 0x09 << 72 | 0x0A << 80 | 0x0B << 88 | 0x0C << 96 | 0x0D << 104 | 0x0E << 112 | 0x0F << 120);\n\n    int count = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t hex_chunk = svld1_s8(pg, hex_digits + i);\n        svint8_t dec_chunk = svtbl_s8(hex_to_dec, hex_chunk);\n        svbool_t is_prime = svcmpeq_s8(pg, dec_chunk, prime_digits);\n        count += svcntp_b8(svptrue_b8(), is_prime);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\nbool is_happy_simd(const std::string & s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    const char *data = s.data();\n    size_t len = s.length();\n\n    for (size_t i = 0; i <= len - 3; i += svcntb()) {\n        svbool_t pg = svwhilelt_b32(i, len - 2);\n        svint8_t v1 = svld1(pg, data + i);\n        svint8_t v2 = svld1(pg, data + i + 1);\n        svint8_t v3 = svld1(pg, data + i + 2);\n\n        svbool_t cmp1 = svcmpeq(pg, v1, v2);\n        svbool_t cmp2 = svcmpeq(pg, v1, v3);\n        svbool_t cmp3 = svcmpeq(pg, v2, v3);\n\n        svbool_t result = svorr_z(pg, svorr_z(pg, cmp1, cmp2), cmp3);\n\n        if (svptest_any(svptrue_b8(), result)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\nbool is_happy_simd(const std::string & s) {\n    size_t len = s.length();\n    if (len < 3) {\n        return false;\n    }\n\n    const char *data = s.data();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < len - 2; ++i) {\n        svint8_t v1 = svld1(pg, data + i);\n        svint8_t v2 = svld1(pg, data + i + 1);\n        svint8_t v3 = svld1(pg, data + i + 2);\n\n        svbool_t cmp1 = svcmpeq(pg, v1, v2);\n        svbool_t cmp2 = svcmpeq(pg, v1, v3);\n        svbool_t cmp3 = svcmpeq(pg, v2, v3);\n\n        if (svptest_any(svptrue_b8(), svorr(svorr(cmp1, cmp2), cmp3))) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\nbool is_happy_simd(const std::string & s) {\n    size_t len = s.length();\n    if (len < 3) {\n        return false;\n    }\n\n    const char *data = s.data();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i <= len - 3; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, len - 2);\n        svint8_t v1 = svld1(pg, data + i);\n        svint8_t v2 = svld1(pg, data + i + 1);\n        svint8_t v3 = svld1(pg, data + i + 2);\n\n        svbool_t cmp1 = svcmpeq(pg, v1, v2);\n        svbool_t cmp2 = svcmpeq(pg, v1, v3);\n        svbool_t cmp3 = svcmpeq(pg, v2, v3);\n\n        svbool_t result = svorr_z(pg, svorr_z(pg, cmp1, cmp2), cmp3);\n\n        if (svptest_any(svptrue_b8(), result)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\nbool is_happy_simd(const std::string & s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    const char *data = s.data();\n    size_t len = s.length();\n\n    for (size_t i = 0; i <= len - 3; i++) {\n        svbool_t pg = svptrue_b8();\n        svint8_t v1 = svld1(pg, data + i);\n        svint8_t v2 = svld1(pg, data + i + 1);\n        svint8_t v3 = svld1(pg, data + i + 2);\n\n        svbool_t cmp1 = svcmpeq(pg, v1, v2);\n        svbool_t cmp2 = svcmpeq(pg, v1, v3);\n        svbool_t cmp3 = svcmpeq(pg, v2, v3);\n\n        if (svptest_any(svptrue_b8(), svorr(svorr(cmp1, cmp2), cmp3))) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\nbool is_happy_simd(const std::string & s) {\n    size_t len = s.length();\n    if (len < 3) {\n        return false;\n    }\n\n    const char *data = s.data();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i <= len - 3; ++i) {\n        svuint8_t v1 = svld1_u8(pg, data + i);\n        svuint8_t v2 = svld1_u8(pg, data + i + 1);\n        svuint8_t v3 = svld1_u8(pg, data + i + 2);\n\n        svbool_t cmp1 = svcmpeq(pg, v1, v2);\n        svbool_t cmp2 = svcmpeq(pg, v1, v3);\n        svbool_t cmp3 = svcmpeq(pg, v2, v3);\n\n        if (svptest_any(svptrue_b8(), svorr(svptrue_b8(), svorr(cmp1, cmp2), cmp3))) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\nbool prime_length_simd(const std::string & str) {\n    size_t len = str.length();\n    if (len < 2) return false;\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t v_len = svdup_u8(len);\n    svuint8_t v_i = svindex_u8(0, 1);\n    svbool_t pg_lt_len = svcmplt_u8(pg, v_i, v_len);\n\n    svuint8_t v_divisors = svdiv_u8_z(pg_lt_len, v_len, v_i);\n    svbool_t pg_divisors = svcmpeq_u8(pg_lt_len, v_divisors, svdup_u8(0));\n\n    svbool_t pg_any_divisor = svmaxv_u8(pg_divisors, pg_divisors);\n    return !svptest_any(pg_any_divisor, pg_any_divisor);\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n    if (length < 2) return false;\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t primes = svdup_u8(1);\n    svuint8_t indices = svindex_u8(0, 1);\n\n    for (size_t i = 2; i * i <= length; ++i) {\n        svbool_t mask = svcmpge_u8(pg, indices, svdup_u8(i));\n        svuint8_t multiples = svmul_u8_z(pg, svdup_u8(i), indices);\n        svbool_t is_multiple = svcmpeq_u8(pg, multiples, indices);\n        primes = svsub_u8_z(pg, primes, svreinterpret_u8(svand_b_z(pg, mask, is_multiple)));\n    }\n\n    svuint8_t result = svadd_u8_z(pg, primes, svdup_u8(1));\n    svbool_t is_prime = svcmpeq_u8(pg, result, svdup_u8(1));\n\n    return svlastb(pg, is_prime, svdup_u8(length - 1));\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n    if (length <= 1) return false;\n    if (length == 2) return true;\n\n    svbool_t pg = svptrue_b8();\n    svuint32_t vlength = svdup_n_u32(length);\n    svuint32_t vdivisors = svdup_n_u32(2);\n    svuint32_t vremainders = svrem_u32_z(pg, vlength, vdivisors);\n\n    for (size_t i = 3; i * i <= length; i += 2) {\n        vdivisors = svdup_n_u32(i);\n        vremainders = svrem_u32_z(pg, vlength, vdivisors);\n        if (svcntp_b8(svcmpeq_u32(pg, vremainders, svdup_n_u32(0)), pg) > 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n    if (length < 2) return false;\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t v_length = svdup_n_u8(length);\n    svuint8_t v_divisors = svdup_n_u8(2);\n    svbool_t pg_prime = svcmpge(pg, v_length, v_divisors);\n\n    for (size_t i = 2; i * i <= length; ++i) {\n        svuint8_t v_i = svdup_n_u8(i);\n        svbool_t pg_divisible = svcmpne(pg, svrem_u8(pg, v_length, v_i), svdup_n_u8(0));\n        pg_prime = svand_b_z(pg, pg_prime, pg_divisible);\n    }\n\n    return svlastb(pg, pg_prime);\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str) {\n    int length = str.length();\n    return is_prime(length);\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    svbool_t pg = svptrue_b64();\n\n    while (N > 0) {\n        uint64_t digit = N % 10;\n        sum += digit;\n        N /= 10;\n    }\n\n    uint64_t binary_sum = 0;\n    uint64_t mask = 1;\n    while (sum > 0) {\n        binary_sum |= (sum & 1) * mask;\n        mask <<= 1;\n        sum >>= 1;\n    }\n\n    std::string result;\n    while (binary_sum > 0) {\n        result = (binary_sum & 1 ? '1' : '0') + result;\n        binary_sum >>= 1;\n    }\n\n    return result.empty() ? \"0\" : result;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    svbool_t pg = svptrue_b64();\n\n    while (N > 0) {\n        uint64_t digit = N % 10;\n        sum += digit;\n        N /= 10;\n    }\n\n    svuint64_t vsum = svdup_u64(sum);\n    svuint64_t vpowers = svdup_u64(1);\n    svuint64_t vresult = svdup_u64(0);\n\n    while (svmaxv_u64(pg, vsum) > 0) {\n        svuint64_t vdigit = svand_u64(pg, vsum, svdup_u64(1));\n        vresult = svadd_u64(pg, vresult, svmul_u64(pg, vdigit, vpowers));\n        vsum = svlsr_u64(pg, vsum, svdup_u64(1));\n        vpowers = svmul_u64(pg, vpowers, svdup_u64(10));\n    }\n\n    uint64_t result = svaddv_u64(pg, vresult);\n    std::string binary_result = \"\";\n\n    while (result > 0) {\n        binary_result = (result % 2 == 0 ? \"0\" : \"1\") + binary_result;\n        result /= 2;\n    }\n\n    return binary_result.empty() ? \"0\" : binary_result;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    svbool_t pg = svptrue_b64();\n\n    while (N > 0) {\n        svuint64_t vec = svdup_n_u64(N);\n        svuint64_t digits = svand_u64(pg, vec, svdup_n_u64(1));\n        sum += svaddv_u64(pg, digits);\n        N >>= 1;\n    }\n\n    std::string binary_sum;\n    while (sum > 0) {\n        binary_sum = (sum % 2 == 0 ? \"0\" : \"1\") + binary_sum;\n        sum >>= 1;\n    }\n\n    return binary_sum.empty() ? \"0\" : binary_sum;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    svbool_t pg = svptrue_b64();\n\n    while (N > 0) {\n        uint64_t digit = N % 10;\n        sum += digit;\n        N /= 10;\n    }\n\n    svuint64_t vsum = svdup_u64(sum);\n    svuint64_t vpowers = svdup_u64(1);\n    svuint64_t vresult = svdup_u64(0);\n\n    while (svmaxv_u64(pg, vsum) > 0) {\n        svuint64_t vdigit = svand_u64(pg, vsum, svdup_u64(1));\n        vresult = svadd_u64(pg, vresult, svmul_u64(pg, vdigit, vpowers));\n        vsum = svlsr_u64(pg, vsum, 1);\n        vpowers = svmul_u64(pg, vpowers, svdup_u64(10));\n    }\n\n    uint64_t result = svaddv_u64(pg, vresult);\n    std::string binary_result;\n\n    while (result > 0) {\n        binary_result = (result % 2 == 0 ? \"0\" : \"1\") + binary_result;\n        result /= 2;\n    }\n\n    return binary_result.empty() ? \"0\" : binary_result;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    svbool_t pg = svptrue_b64();\n\n    while (N > 0) {\n        svuint64_t digits = svdup_n_u64(N % 10);\n        sum += svaddv_u64(pg, digits);\n        N /= 10;\n    }\n\n    std::string binary_str;\n    while (sum > 0) {\n        binary_str = (sum % 2 == 0 ? \"0\" : \"1\") + binary_str;\n        sum /= 2;\n    }\n\n    return binary_str.empty() ? \"0\" : binary_str;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    size_t i = 0;\n\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n\n        svbool_t even_mask = svcmpeq_n_z(pg, svand_n_z(pg, vec, 1), 0);\n        svbool_t odd_index_mask = svcmpeq_n_z(pg, svand_n_z(pg, svindex_s32(i, 1), 1), 1);\n        svbool_t combined_mask = svand_z(pg, even_mask, odd_index_mask);\n\n        sum += svaddv(sv, svsel_z(pg, vec, svdup_n_s32(0), combined_mask));\n    }\n\n    for (; i < n; ++i) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    int32_t *data = lst.data();\n\n    for (size_t i = 1; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, data + i);\n        svbool_t even_mask = svcmpeq_n_z(pg, svand_n_z(pg, vec, 1), 0);\n        svint32_t even_elements = svaddv(pg, even_mask, vec);\n        sum += svaddv(pg, even_elements);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    svbool_t pg = svptrue_b32();\n\n    for (size_t i = 1; i < n; i += svcntb()) {\n        svint32_t vec = svld1(pg, &lst[i]);\n        svbool_t even_mask = svcmpeq(svand_n_u32(svptrue_b32(), vec, 1), 0);\n        svbool_t odd_index_mask = svindex_u32(1, 1) & svptrue_b32();\n\n        svint32_t result = svaddv(pg, svmul_n(svand_n_u32(pg, vec, even_mask & odd_index_mask), 1));\n        sum += svaddv(pg, result);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    size_t i = 0;\n\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n        svbool_t even_pg = svcmpeq_n_z(pg, svand_n_z(pg, vec, 1), 0);\n        svbool_t odd_idx_pg = svcmpeq_n_z(pg, svand_n_z(pg, svindex_s32(i, 1), 1), 1);\n        svbool_t combined_pg = svand_z(pg, even_pg, odd_idx_pg);\n        sum += svaddv(combined_pg, vec);\n    }\n\n    for (; i < n; ++i) {\n        if (lst[i] % 2 == 0 && i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    size_t i = 0;\n\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, &lst[i]);\n        svbool_t even_mask = svcmpeq(svand_z(pg, vec, 2), svdup_s32(0));\n        svbool_t odd_index_mask = svcmpeq(svand_z(pg, svindex_s32(i, 1), 2), svdup_s32(1));\n        svbool_t combined_mask = svand_z(pg, even_mask, odd_index_mask);\n        svint32_t filtered_vec = svsel_z(svdup_s32(0), vec, combined_mask);\n        sum += svaddv(svptrue_b32(), filtered_vec);\n    }\n\n    for (; i < n; ++i) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s) {\n    std::string result = s;\n    size_t len = s.length();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1b(pg, (const int8_t*)&s[i]);\n        vec = svaddb_z(pg, vec, svdupb_z(pg, 4));\n        svst1b(pg, (int8_t*)&result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s) {\n    std::string result = s;\n    size_t n = s.size();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, (const uint8_t*)&s[i]);\n        vec = svadd_u8_x(pg, vec, 2 * 2);\n        svst1_u8(pg, (uint8_t*)&result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\nstd::string encrypt_simd(const std::string & s) {\n    std::string result = s;\n    size_t n = s.size();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, &s[i]);\n        vec = svadd_u8_x(pg, vec, 2 * 2);\n        svst1_u8(pg, &result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s) {\n    std::string result = s;\n    size_t n = s.size();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, (const uint8_t*)&s[i]);\n        vec = svadd_u8_x(pg, vec, 2 * 2);\n        svst1_u8(pg, (uint8_t*)&result[i], vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s) {\n    const int shift = 2 * 2;\n    const int alphabet_size = 26;\n    const char base = 'a';\n\n    svbool_t pg = svptrue_b8();\n    svint8_t input = svld1(pg, (const int8_t*)s.data());\n    svint8_t shifted = svadd_n_s8_z(pg, input, shift);\n    svint8_t wrapped = svsub_n_s8_z(pg, shifted, alphabet_size);\n    svbool_t wrap_pg = svcmpge_n_s8(pg, wrapped, base);\n    svint8_t result = svsel_s8(wrap_pg, wrapped, shifted);\n\n    char output[s.size()];\n    svst1(pg, (int8_t*)output, result);\n\n    return std::string(output, s.size());\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    const char* input = message.c_str();\n    size_t length = message.size();\n    std::string result(length, ' ');\n\n    // Vectors for vowels and their replacements\n    const char vowels[] = \"aeiouAEIOU\";\n    const char replacements[] = \"cgiouCGIOU\";\n\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        svint8_t vec = svld1(pg, input + i);\n\n        // Swap case\n        svint8_t lower = svdup_s8('a');\n        svint8_t upper = svdup_s8('A');\n        svint8_t diff = svdup_s8('a' - 'A');\n        svbool_t is_lower = svcmplt(vec, lower);\n        svbool_t is_upper = svcmplt(vec, upper);\n        svint8_t swapped = svsub(vec, svmul(svand(is_lower, diff), svand(is_upper, diff)));\n\n        // Replace vowels\n        svint8_t v_vec = svld1(pg, vowels);\n        svint8_t r_vec = svld1(pg, replacements);\n        svbool_t is_vowel = svcmpeq(svptrue_b8(), vec, v_vec);\n        svint8_t replaced = svsel(is_vowel, r_vec, swapped);\n\n        svst1(pg, result.data() + i, replaced);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    const char* input = message.c_str();\n    size_t length = message.size();\n    std::string result(length, ' ');\n\n    // Vectors for vowels and their replacements\n    const char vowels[] = \"aeiouAEIOU\";\n    const char replacements[] = \"cgiouCGIOU\";\n\n    // Load vowels and replacements into SVE vectors\n    svbool_t pg = svptrue_b8();\n    svint8_t v_vowels = svld1(pg, vowels);\n    svint8_t v_replacements = svld1(pg, replacements);\n\n    // Process the input string in chunks\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svint8_t v_input = svld1(pg, input + i);\n\n        // Swap case\n        svint8_t v_lower = svsub(pg, v_input, svdup_s8('A' - 'a'));\n        svint8_t v_upper = svadd(pg, v_input, svdup_s8('A' - 'a'));\n        svbool_t pg_lower = svcmpeq(pg, svand(pg, v_input, svdup_s8(0x20)), svdup_s8(0x20));\n        svbool_t pg_upper = svcmpeq(pg, svand(pg, v_input, svdup_s8(0x20)), svdup_s8(0x00));\n        svint8_t v_swapped = svsel(pg_lower, v_upper, v_swapped);\n        v_swapped = svsel(pg_upper, v_lower, v_swapped);\n\n        // Replace vowels\n        svbool_t pg_vowels = svcmpeq(pg, v_swapped, v_vowels);\n        v_swapped = svsel(pg_vowels, v_replacements, v_swapped);\n\n        // Store the result\n        svst1(pg, result.data() + i, v_swapped);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    const char* input = message.c_str();\n    size_t length = message.length();\n    std::string result(length, ' ');\n\n    // Define the vowel replacement map\n    svbool_t ptrue = svptrue_b8();\n    svint8_t vowels = svdup_s8('a');\n    svint8_t replacements = svdup_s8('c');\n    svint8_t vowels_upper = svdup_s8('A');\n    svint8_t replacements_upper = svdup_s8('C');\n\n    // Process the input string in chunks\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svint8_t chunk = svld1_s8(svptrue_b8(), input + i);\n        svbool_t is_lower = svcmpeq(svptrue_b8(), svand_s8_z(svptrue_b8(), chunk, svdup_s8(0x20)), svdup_s8('a'));\n        svbool_t is_upper = svcmpeq(svptrue_b8(), svand_s8_z(svptrue_b8(), chunk, svdup_s8(0x20)), svdup_s8('A'));\n\n        // Swap case\n        svint8_t swapped = sveor_s8_z(svptrue_b8(), chunk, svdup_s8(0x20));\n\n        // Replace vowels\n        svbool_t is_vowel = svcmpeq(svptrue_b8(), chunk, vowels);\n        svbool_t is_vowel_upper = svcmpeq(svptrue_b8(), chunk, vowels_upper);\n        svint8_t replaced = svsel_s8(is_vowel, replacements, svsel_s8(is_vowel_upper, replacements_upper, swapped));\n\n        // Store the result\n        svst1_s8(svptrue_b8(), result.data() + i, replaced);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    const char* input = message.c_str();\n    size_t len = message.length();\n    std::string result(len, '\\0');\n    char* output = &result[0];\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8(SV_VOWELS);\n    svint8_t replacements = svdup_s8(SV_REPLACEMENTS);\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t vec = svld1_s8(pg, input + i);\n        svbool_t is_upper = svcmpeq(pg, svand_s8_z(pg, vec, 0x20), 0);\n        svbool_t is_lower = svcmpeq(pg, svand_s8_z(pg, vec, 0x20), 0x20);\n\n        svint8_t swapped = sveor_s8_z(pg, vec, svdup_s8(0x20));\n        svint8_t replaced = svtbl_s8(svptrue_b8(), replacements, svsub_s8_z(svptrue_b8(), vec, svdup_s8('a')));\n\n        svint8_t encoded = svsel_s8(svptrue_b8(), replaced, swapped);\n        encoded = svsel_s8(svptrue_b8(), encoded, vec);\n\n        svst1_s8(pg, output + i, encoded);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    const char* input = message.c_str();\n    size_t length = message.length();\n    std::string result(length, '\\0');\n    char* output = &result[0];\n\n    svbool_t pg = svptrue_b8();\n\n    while (length > 0) {\n        svint8_t vec = svld1(pg, input);\n        svbool_t is_lower = svcmpeq(svptrue_b8(), svand(svsub(vec, svdup_s8('a')), svdup_s8(0x1F)), svdup_s8(0x1F));\n        svbool_t is_upper = svcmpeq(svptrue_b8(), svand(svsub(vec, svdup_s8('A')), svdup_s8(0x1F)), svdup_s8(0x1F));\n\n        svint8_t swapped_case = sveor(vec, svdup_s8(0x20));\n\n        svbool_t is_vowel = svcmpeq(svor(svor(svor(svcmpeq(vec, svdup_s8('a')), svcmpeq(vec, svdup_s8('e'))),\n                                             svcmpeq(vec, svdup_s8('i'))), svcmpeq(vec, svdup_s8('o'))),\n                                    svcmpeq(vec, svdup_s8('u')));\n\n        svint8_t vowel_shift = svadd(vec, svdup_s8(2));\n\n        svint8_t encoded = svsel(is_vowel, vowel_shift, swapped_case);\n\n        svst1(pg, output, encoded);\n\n        input += svcntb();\n        output += svcntb();\n        length -= svcntb();\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        svbool_t pg = svptrue_b8();\n        svint8_t key_vec = svld1(pg, reinterpret_cast<const int8_t*>(key.data()));\n        svint8_t lower_vec = svdup_s8('a');\n        svint8_t upper_vec = svdup_s8('A');\n        svint8_t lower_bound = svdup_s8('z');\n        svint8_t upper_bound = svdup_s8('Z');\n\n        svbool_t is_lower = svcmple_s8(pg, key_vec, lower_bound);\n        svbool_t is_upper = svcmple_s8(pg, key_vec, upper_bound);\n\n        is_lower = svand_b_z(pg, is_lower, svcmpge_s8(pg, key_vec, lower_vec));\n        is_upper = svand_b_z(pg, is_upper, svcmpge_s8(pg, key_vec, upper_vec));\n\n        all_lower &= svaddv_b(pg, is_lower);\n        all_upper &= svaddv_b(pg, is_upper);\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        svbool_t pg = svptrue_b8();\n\n        svuint8_t vec_key = svld1_u8(pg, reinterpret_cast<const uint8_t*>(key.data()));\n        svuint8_t vec_lower = svdup_u8('a');\n        svuint8_t vec_upper = svdup_u8('A');\n        svuint8_t vec_lower_end = svdup_u8('z');\n        svuint8_t vec_upper_end = svdup_u8('Z');\n\n        svbool_t is_lower = svcmple_u8(pg, vec_key, vec_lower_end);\n        is_lower = svand_b_z(pg, is_lower, svcmpge_u8(pg, vec_key, vec_lower));\n        svbool_t is_upper = svcmple_u8(pg, vec_key, vec_upper_end);\n        is_upper = svand_b_z(pg, is_upper, svcmpge_u8(pg, vec_key, vec_upper));\n\n        all_lower &= svptest_any(svptrue_b8(), is_lower);\n        all_upper &= svptest_any(svptrue_b8(), is_upper);\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        svbool_t pg = svptrue_b8();\n\n        for (size_t i = 0; i < key.size(); i += svcntb()) {\n            svbool_t pg = svwhilelt_b8(i, key.size());\n            svuint8_t vec_key = svld1_u8(pg, &key[i]);\n\n            svbool_t is_lower = svcmplt_n_u8(pg, vec_key, 'a');\n            svbool_t is_upper = svcmplt_n_u8(pg, vec_key, 'A');\n\n            all_lower &= svptest_any(svand_z(pg, pg, is_lower));\n            all_upper &= svptest_any(svand_z(pg, pg, is_upper));\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        svbool_t pg = svptrue_b8();\n\n        svuint8_t lower_mask = svdup_u8('a');\n        svuint8_t upper_mask = svdup_u8('A');\n        svuint8_t diff = svdup_u8('a' - 'A');\n\n        svuint8_t vec_key = svld1_u8(pg, key.data());\n        svuint8_t vec_lower = svadd_u8_z(pg, vec_key, diff);\n\n        svbool_t is_lower = svcmpeq(pg, vec_key, vec_lower);\n        svbool_t is_upper = svcmpeq(pg, vec_key, svadd_u8_z(pg, vec_key, svdup_u8('A' - 'a')));\n\n        all_lower &= svptest_any(svptrue_b8(), is_lower);\n        all_upper &= svptest_any(svptrue_b8(), is_upper);\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        svbool_t pg = svptrue_b8();\n        svint8_t key_vec = svld1(pg, reinterpret_cast<const int8_t*>(key.data()));\n        svint8_t lower_vec = svdup_s8('a');\n        svint8_t upper_vec = svdup_s8('A');\n        svint8_t lower_bound = svdup_s8('z');\n        svint8_t upper_bound = svdup_s8('Z');\n\n        svbool_t is_lower = svcmple_s8(pg, key_vec, lower_bound);\n        svbool_t is_upper = svcmple_s8(pg, key_vec, upper_bound);\n\n        all_lower &= svptest_any(svand_b_z(pg, is_lower, svcmple_s8(pg, key_vec, lower_vec)));\n        all_upper &= svptest_any(svand_b_z(pg, is_upper, svcmple_s8(pg, key_vec, upper_vec)));\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n <= 2) return primes;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t ones = svdup_s32(1);\n    svint32_t sieve = svdup_s32(1);\n\n    for (int i = 2; i < n; ++i) {\n        svint32_t multiples = svmul_s32(indices, svdup_s32(i));\n        svbool_t mask = svcmplt_s32(multiples, svdup_s32(n));\n        sieve = svsel_s32(mask, svdup_s32(0), sieve);\n    }\n\n    for (int i = 2; i < n; ++i) {\n        if (svget_lane_s32(sieve, i) == 1) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n <= 2) return primes;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t ones = svdup_s32(1);\n    svint32_t is_prime = svdup_s32(1);\n    svint32_t numbers = svdup_s32(2);\n\n    for (int i = 2; i < n; ++i) {\n        svint32_t current = svdup_s32(i);\n        svint32_t remainder = svrem_s32_z(pg, current, numbers);\n        svbool_t is_divisible = svcmpeq_s32(pg, remainder, svdup_s32(0));\n        svint32_t update = svsub_s32_z(pg, is_prime, svand_s32_z(pg, is_prime, is_divisible));\n        is_prime = svadd_s32_z(pg, is_prime, update);\n        numbers = svadd_s32_z(pg, numbers, ones);\n    }\n\n    for (int i = 2; i < n; ++i) {\n        if (svget_lane_s32(is_prime, i - 2) == 1) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n <= 2) return primes;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t ones = svdup_s32(1);\n    svint32_t sieve = svdup_s32(1);\n\n    for (int i = 2; i < n; ++i) {\n        svint32_t multiples = svmul_s32(indices, svdup_s32(i));\n        svbool_t mask = svcmplt_s32(multiples, svdup_s32(n));\n        sieve = svsel_s32(mask, ones, sieve);\n    }\n\n    for (int i = 2; i < n; ++i) {\n        if (svget_lane_s32(sieve, i) == 1) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> count_up_to_simd(int n) {\n    if (n <= 2) return {};\n\n    std::vector<int> primes;\n    std::vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false;\n\n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n            for (int j = i * i; j < n; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n <= 2) return primes;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t numbers = svadd_s32_z(pg, indices, 2);\n\n    while (svlastb(pg)) {\n        svbool_t is_prime = svcmpge_s32(numbers, svdup_s32(n));\n        svint32_t primes_vec = svcompact_s32(is_prime, numbers);\n\n        for (int i = 0; i < svcntw(); ++i) {\n            int prime = svget_s32(primes_vec, i);\n            if (prime < n) {\n                primes.push_back(prime);\n            }\n        }\n\n        indices = svadd_s32_z(pg, indices, svcntw());\n        numbers = svadd_s32_z(pg, indices, 2);\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\nint count_upper_simd(const std::string & s) {\n    const char *data = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t vowels = svdup_u8('A') | svdup_u8('E') | svdup_u8('I') | svdup_u8('O') | svdup_u8('U');\n    svuint8_t mask = svdup_u8(0x01); // Mask to select even indices\n\n    int count = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, data + i);\n        svbool_t even_indices = svand_b_z(pg, svcmpeq(pg, svand_u8_z(pg, vec, mask), svdup_u8(0)));\n        svbool_t is_upper_vowel = svcmpeq(pg, vec, vowels);\n        svbool_t match = svand_b_z(pg, even_indices, is_upper_vowel);\n        count += svcntp_b8(match, pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```cpp\nint count_upper_simd(const std::string & s) {\n    const char *str = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8('A') | svdup_s8('E') | svdup_s8('I') | svdup_s8('O') | svdup_s8('U');\n    svint8_t even_indices = svdup_s8(0);\n\n    int count = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, len);\n        svint8_t vec = svld1_s8(pg, str + i);\n\n        svbool_t is_even = svcmpeq_n_s8(svindex_s8(0, 1), 0);\n        svbool_t is_upper_vowel = svcmpeq_s8(vec, vowels);\n\n        svbool_t mask = svand_b_z(pg, svand_b_z(is_even, is_upper_vowel));\n        count += svcntp_b8(svptrue_b8(), mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\nint count_upper_simd(const std::string & s) {\n    const char* data = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svint8_t vowels = svdup_s8('A') | svdup_s8('E') | svdup_s8('I') | svdup_s8('O') | svdup_s8('U');\n    svint8_t even_indices = svdup_s8(0);\n\n    int count = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svint8_t chunk = svld1(pg, data + i);\n        svbool_t is_even = svptrue_b8() & (svindex_s8(0, 1) & 1) == 0;\n        svbool_t is_upper_vowel = svcmpeq(pg, chunk, vowels);\n        svbool_t mask = is_even & is_upper_vowel;\n        count += svcntp(mask, pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\nint count_upper_simd(const std::string & s) {\n    const char* data = s.c_str();\n    size_t len = s.length();\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t upper_vowels = svdup_u8('A') | svdup_u8('E') | svdup_u8('I') | svdup_u8('O') | svdup_u8('U');\n\n    int count = 0;\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, data + i);\n        svbool_t even_indices = svindex_u8(0, 1) & svptrue_b8();\n        svbool_t is_upper_vowel = svcmpeq_u8(pg, vec, upper_vowels);\n        svbool_t mask = is_upper_vowel & even_indices;\n        count += svcntp_b8(svptrue_b8(), mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nint count_upper_simd(const std::string & s) {\n    const char* data = s.c_str();\n    size_t len = s.length();\n    int count = 0;\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t vowels = svdup_u8('A') | svdup_u8('E') | svdup_u8('I') | svdup_u8('O') | svdup_u8('U');\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svuint8_t vec = svld1_u8(pg, data + i);\n        svbool_t even_indices = svindex_u8(0, 1) & svptrue_b8();\n        svbool_t is_upper_vowel = svcmpeq_u8(vec, vowels) & even_indices;\n        count += svcntp_b8(svptrue_b8(), is_upper_vowel);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> result(n);\n    svbool_t pg = svptrue_b8();\n    svint32_t v_n = svdup_s32(n);\n    svint32_t v_index = svindex_s32(0, 1);\n    svint32_t v_stones = svadd_s32(v_n, svmul_s32(v_index, svdup_s32((n % 2 == 0) ? 2 : 1)));\n\n    svst1_s32(pg, result.data(), v_stones);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> result(n);\n    int32_t* result_ptr = result.data();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t index = svindex_s32(0, 1);\n    svint32_t stones = svdup_s32(n);\n\n    if (n % 2 == 0) {\n        svint32_t even_increment = svdup_s32(2);\n        svint32_t even_sequence = svadd_s32_z(pg, stones, svmul_s32_z(pg, index, even_increment));\n        svst1_s32(pg, result_ptr, even_sequence);\n    } else {\n        svint32_t odd_increment = svdup_s32(2);\n        svint32_t odd_sequence = svadd_s32_z(pg, stones, svmul_s32_z(pg, index, odd_increment));\n        svst1_s32(pg, result_ptr, odd_sequence);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> result(n);\n    int32_t* result_ptr = result.data();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t index = svindex_s32(0, 1);\n    svint32_t start = svdup_s32(n);\n\n    svint32_t increment = svdup_s32((n % 2 == 0) ? 2 : 1);\n    svint32_t stones = svadd_s32_z(pg, start, svmul_s32_z(pg, index, increment));\n\n    svst1_s32(pg, result_ptr, stones);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> result(n);\n    int32_t* result_ptr = result.data();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t idx = svindex_s32(0, 1);\n\n    svint32_t stones = svadd_s32_x(svptrue_b32(), idx, n);\n\n    if (n % 2 == 0) {\n        stones = svadd_s32_x(pg, stones, 1);\n    }\n\n    svst1_s32(pg, result_ptr, stones);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> result(n);\n    svint32_t index = svindex_s32(0, 1);\n    svbool_t pg = svwhilelt_b32(index, n);\n\n    svint32_t stones = svdup_s32(n);\n    svint32_t increment = svdup_s32((n % 2 == 0) ? 2 : 1);\n\n    while (svptest_any(pg)) {\n        svst1_s32(pg, &result[index], stones);\n        stones = svadd_s32(stones, increment);\n        index = svadd_s32(index, svdup_s32(svcntw()));\n        pg = svwhilelt_b32(index, n);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int64_t sum = 0;\n    int64_t count = m - n + 1;\n\n    svbool_t pg = svwhilelt_b64(0, count);\n    svint64_t indices = svindex_s64(0, 1);\n    svint64_t values = svadd_s64_z(pg, indices, n);\n\n    sum = svaddv_s64(pg, values);\n\n    int64_t avg = sum / count;\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int64_t count = m - n + 1;\n    int64_t sum = 0;\n\n    svbool_t pg = svptrue_b64();\n    svint64_t vec_n = svdup_s64(n);\n    svint64_t vec_count = svdup_s64(count);\n\n    for (int64_t i = 0; i < count; i += svcntd()) {\n        svint64_t vec_i = svindex_s64(i, 1);\n        svint64_t vec_val = svadd_s64_z(pg, vec_n, vec_i);\n        sum += svaddv_s64(svptrue_b64(), vec_val);\n    }\n\n    int64_t avg = sum / count;\n    std::string binary = \"\";\n\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int64_t sum = 0;\n    int64_t count = m - n + 1;\n\n    svbool_t pg = svwhilelt_b64(0, count);\n    svint64_t indices = svindex_s64(0, 1);\n    svint64_t values = svadd_s64_x(pg, indices, n);\n\n    sum = svaddv_s64(pg, values);\n\n    int64_t avg = sum / count;\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int64_t sum = 0;\n    int64_t count = 0;\n\n    svbool_t pg = svptrue_b64();\n    svint64_t v_n = svdup_s64(n);\n    svint64_t v_m = svdup_s64(m);\n    svint64_t v_count = svdup_s64(0);\n    svint64_t v_sum = svdup_s64(0);\n\n    for (int64_t i = n; i <= m; i += svcntb()) {\n        svint64_t v_i = svadd_s64_x(pg, v_n, svindex_s64(0, 1));\n        v_sum = svadd_s64_x(pg, v_sum, v_i);\n        v_count = svadd_s64_x(pg, v_count, svdup_s64(svcntb()));\n        v_n = svadd_s64_x(pg, v_n, svdup_s64(svcntb()));\n    }\n\n    sum = svaddv_s64(pg, v_sum);\n    count = svaddv_s64(pg, v_count);\n\n    int64_t avg = (sum + (count - 1)) / count;\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    int64_t sum = 0;\n    int64_t count = m - n + 1;\n\n    svbool_t pg = svwhilelt_b64(0, count);\n    svint64_t indices = svindex_s64(0, 1);\n    svint64_t values = svadd_s64_z(pg, indices, svdup_s64(n));\n\n    sum = svaddv_s64(pg, values);\n\n    int64_t avg = sum / count;\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t ones = svdup_s32(1);\n    svint32_t tens = svdup_s32(10000);\n\n    for (int i = 0; i < n; i += svcntw()) {\n        svint32_t idx = svadd_s32_z(pg, indices, svdup_s32(i));\n        svbool_t even_mask = svcmpeq_s32(svand_s32_z(pg, idx, svdup_s32(1)), svdup_s32(0));\n\n        svint32_t factorials = svdup_s32(1);\n        svint32_t sums = svdup_s32(0);\n\n        for (int j = 1; j <= n; ++j) {\n            svint32_t j_vec = svdup_s32(j);\n            factorials = svmul_s32_z(pg, factorials, j_vec);\n            sums = svadd_s32_z(pg, sums, j_vec);\n        }\n\n        svint32_t results = svsel_s32(even_mask, svrem_s32_z(pg, factorials, tens), sums);\n        svst1_s32(pg, &result[i], results);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t ones = svdup_s32(1);\n    svint32_t tens = svdup_s32(10000);\n\n    for (int i = 0; i < n; i += svcntw()) {\n        svint32_t current_indices = svadd_s32_z(pg, indices, svdup_s32(i));\n        svbool_t even_mask = svcmpeq_s32(svand_s32_z(pg, current_indices, svdup_s32(1)), svdup_s32(0));\n\n        svint32_t factorials = svdup_s32(1);\n        svint32_t sums = svdup_s32(0);\n\n        for (int j = 1; j <= svmaxv_s32(current_indices); ++j) {\n            svbool_t mask = svcmpge_s32(current_indices, svdup_s32(j));\n            factorials = svmul_s32_z(mask, factorials, svdup_s32(j));\n            sums = svadd_s32_z(mask, sums, svdup_s32(j));\n        }\n\n        svint32_t results = svsel_s32(even_mask, svrem_s32_z(pg, factorials, tens), sums);\n        svst1_s32(pg, result.data() + i, results);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t ones = svdup_s32(1);\n    svint32_t tens = svdup_s32(10000);\n\n    for (int i = 0; i < n; i += svcntw()) {\n        svint32_t current_indices = svadd_s32_z(pg, indices, svdup_s32(i));\n        svbool_t even_mask = svcmpeq_n_s32(svand_s32_z(pg, current_indices, svdup_s32(1)), svdup_s32(0));\n\n        svint32_t factorials = svdup_s32(1);\n        svint32_t sums = svdup_s32(0);\n\n        for (int j = 1; j <= n; ++j) {\n            svint32_t j_vec = svdup_s32(j);\n            factorials = svmul_s32_z(pg, factorials, j_vec);\n            sums = svadd_s32_z(pg, sums, j_vec);\n        }\n\n        svint32_t results = svsel_s32(even_mask, svrem_s32_z(pg, factorials, tens), sums);\n        svst1_s32(pg, &result[i], results);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t ones = svdup_s32(1);\n    svint32_t tens = svdup_s32(10000);\n\n    for (int i = 0; i < n; i += svcntw()) {\n        svint32_t current_indices = svadd_s32_z(pg, indices, svdup_s32(i));\n        svbool_t even_mask = svcmpeq_n_z(pg, svand_n_s32_z(pg, current_indices, 1), 0);\n\n        svint32_t factorials = svdup_s32(1);\n        svint32_t sums = svdup_s32(0);\n\n        for (int j = 1; j <= n; ++j) {\n            svbool_t mask = svcmpge_n_s32(svptrue_b8(), current_indices, svdup_s32(j));\n            factorials = svmul_n_s32_m(mask, factorials, j);\n            sums = svadd_n_s32_m(mask, sums, j);\n        }\n\n        svint32_t results = svsel_s32(even_mask, svrem_n_s32_z(pg, factorials, 10000), sums);\n        svst1_s32(pg, &result[i], results);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    if (n == 0) return result;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t ones = svdup_s32(1);\n    svint32_t tens = svdup_s32(10000);\n\n    for (int i = 0; i < n; i += svcntw()) {\n        svint32_t current_indices = svadd_s32_z(pg, indices, svdup_s32(i));\n        svbool_t even_mask = svcmpeq_n_s32(svand_s32_z(pg, current_indices, svdup_s32(1)), svdup_s32(0));\n\n        svint32_t factorials = svdup_s32(1);\n        svint32_t sums = svdup_s32(0);\n\n        for (int j = 1; j <= n; ++j) {\n            svint32_t j_vec = svdup_s32(j);\n            factorials = svmul_s32_z(pg, factorials, j_vec);\n            sums = svadd_s32_z(pg, sums, j_vec);\n        }\n\n        svint32_t results = svsel_s32(even_mask, svrem_s32_z(pg, factorials, tens), sums);\n\n        svst1_s32(pg, &result[i], results);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    // Create a vector of integers from 1 to n\n    std::vector<int> numbers(n);\n    for (int i = 0; i < n; ++i) {\n        numbers[i] = i + 1;\n    }\n\n    // Determine the vector length\n    size_t vl = svcntw();\n\n    // Process the numbers in chunks\n    for (size_t i = 0; i < n; i += vl) {\n        // Load a chunk of numbers\n        svint32_t v_numbers = svld1(svptrue_b32(), &numbers[i]);\n\n        // Check if each number is a palindrome\n        svbool_t is_palindrome = svcmpne(v_numbers, svrev(v_numbers));\n\n        // Check if each number is even or odd\n        svbool_t is_even = svcmpeq(svand(v_numbers, svdup_s32(1)), svdup_s32(0));\n\n        // Count even palindromes\n        even_count += svcntp(is_palindrome & is_even);\n\n        // Count odd palindromes\n        odd_count += svcntp(is_palindrome & ~is_even);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    // Create a vector of integers from 1 to n\n    int* numbers = new int[n];\n    for (int i = 0; i < n; ++i) {\n        numbers[i] = i + 1;\n    }\n\n    // Determine the vector length\n    size_t vl = svcntd();\n\n    // Process the numbers in chunks\n    for (int i = 0; i < n; i += vl) {\n        // Load a chunk of numbers\n        svint32_t v_numbers = svld1(svptrue_b32(), numbers + i);\n\n        // Check if each number is a palindrome\n        svbool_t is_palindrome = svcmpne(v_numbers, svrev(v_numbers));\n\n        // Check if each number is even or odd\n        svbool_t is_even = svcmpeq(svand(v_numbers, 1), 0);\n\n        // Count even palindromes\n        even_count += svcntp(is_palindrome & is_even);\n\n        // Count odd palindromes\n        odd_count += svcntp(is_palindrome & ~is_even);\n    }\n\n    delete[] numbers;\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_n = svdup_s32(n);\n    svint32_t v_i = svindex_s32(0, 1);\n\n    while (svptest_any(svcmplt_s32(pg, v_i, v_n))) {\n        svint32_t v_rev = svrev_s32(pg, v_i);\n        svbool_t pg_palindrome = svcmpeq_s32(pg, v_i, v_rev);\n        svbool_t pg_even = svcmpeq_s32(pg, svand_s32(pg, v_i, svdup_s32(1)), svdup_s32(0));\n\n        even_count += svcntp_s32(svand_z(pg, pg_palindrome, pg_even), pg);\n        odd_count += svcntp_s32(svand_z(pg, pg_palindrome, svnot_z(pg, pg_even)), pg);\n\n        v_i = svadd_s32_x(pg, v_i, svcntb());\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    // Create a vector of integers from 1 to n\n    int* data = new int[n];\n    for (int i = 0; i < n; ++i) {\n        data[i] = i + 1;\n    }\n\n    // Determine the vector length\n    size_t vl = svcntw();\n\n    // Process the data in chunks\n    for (size_t i = 0; i < n; i += vl) {\n        // Load a chunk of data\n        svint32_t v_data = svld1(svptrue_b32(), &data[i]);\n\n        // Check if each number is a palindrome\n        svbool_t is_palindrome = svcmpeq(v_data, svrev(v_data));\n\n        // Check if each number is even or odd\n        svbool_t is_even = svcmpeq(svand(v_data, svdup_s32(1)), svdup_s32(0));\n\n        // Count even palindromes\n        even_count += svcntp(is_palindrome & is_even);\n\n        // Count odd palindromes\n        odd_count += svcntp(is_palindrome & ~is_even);\n    }\n\n    // Clean up\n    delete[] data;\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v = svindex_s32(0, 1);\n\n    while (svcntp_b8(pg, pg)) {\n        svint32_t num = svadd_s32_z(pg, v, 1);\n        svbool_t is_palindrome = svcmpeq_s32(svptrue_b8(), svrev_s32(num), num);\n        svbool_t is_even = svcmpeq_s32(svptrue_b8(), svand_s32_z(svptrue_b8(), num, 1), 0);\n        svbool_t is_odd = svcmpeq_s32(svptrue_b8(), svand_s32_z(svptrue_b8(), num, 1), 1);\n\n        even_count += svcntp_b8(svand_b_z(pg, is_palindrome, is_even), pg);\n        odd_count += svcntp_b8(svand_b_z(pg, is_palindrome, is_odd), pg);\n\n        v = svadd_s32_z(pg, v, svcntb());\n        pg = svwhilelt_b8(v, n);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    size_t n_size = n.size();\n    int32_t *data = n.data();\n\n    for (size_t i = 0; i < n_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n_size);\n        svint32_t vec = svld1(pg, data + i);\n\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n        svint32_t sum_digits = svdup_s32_z(pg, 0);\n\n        while (svptest_any(svptrue_b32(), abs_vec)) {\n            svint32_t digit = svrem_s32_z(pg, abs_vec, svdup_s32_z(pg, 10));\n            sum_digits = svadd_s32_z(pg, sum_digits, digit);\n            abs_vec = svdiv_s32_z(pg, abs_vec, svdup_s32_z(pg, 10));\n        }\n\n        svbool_t pg_count = svcmpgt_s32(pg, sum_digits, svdup_s32_z(pg, 0));\n        count += svcntp_b32(pg_count, pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    size_t n_size = n.size();\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < n_size; i += vl) {\n        size_t current_vl = svmin(vl, n_size - i);\n        svint32_t vec = svld1(svptrue_b32(), &n[i]);\n        svbool_t pg = svptrue_b32();\n\n        svint32_t abs_vec = svabs_z(pg, vec);\n        svint32_t sum_vec = svdup_s32_z(pg, 0);\n\n        while (svptest_any(svptrue_b32(), abs_vec)) {\n            svint32_t digit = svrem_z(pg, abs_vec, svdup_s32_z(pg, 10));\n            sum_vec = svadd_z(pg, sum_vec, digit);\n            abs_vec = svdiv_z(pg, abs_vec, svdup_s32_z(pg, 10));\n        }\n\n        svbool_t mask = svcmpgt(svptrue_b32(), sum_vec, svdup_s32_z(pg, 0));\n        count += svcntp_b32(mask, pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    size_t n_size = n.size();\n    size_t vl = svcntd();\n\n    for (size_t i = 0; i < n_size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, n_size);\n        svint32_t vec = svld1(pg, &n[i]);\n\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n        svint32_t sum_digits = svdup_s32_z(pg, 0);\n\n        while (svptest_any(svptrue_b32(), abs_vec)) {\n            svint32_t digit = svrem_s32_z(pg, abs_vec, svdup_s32_z(pg, 10));\n            sum_digits = svadd_s32_z(pg, sum_digits, digit);\n            abs_vec = svdiv_s32_z(pg, abs_vec, svdup_s32_z(pg, 10));\n        }\n\n        svbool_t pg_sum_gt_zero = svcmpgt_s32(pg, sum_digits, svdup_s32_z(pg, 0));\n        count += svcntp_b32(pg_sum_gt_zero, pg_sum_gt_zero);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c++\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    size_t vl = svcntw();\n    for (size_t i = 0; i < n.size(); i += vl) {\n        svint32_t vec = svld1(svptrue_b32(), &n[i]);\n        svbool_t pg = svptrue_b32();\n        svint32_t abs_vec = svabs_z(pg, vec);\n        svint32_t sum_vec = svdup_s32_z(pg, 0);\n        while (svptest_any(svptrue_b32(), abs_vec)) {\n            svint32_t digit = svrem_z(pg, abs_vec, svdup_s32_z(pg, 10));\n            sum_vec = svadd_z(pg, sum_vec, digit);\n            abs_vec = svdiv_z(pg, abs_vec, svdup_s32_z(pg, 10));\n        }\n        svbool_t mask = svcmpgt(pg, sum_vec, svdup_s32_z(pg, 0));\n        count += svcntp_b32(mask, pg);\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c++\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    size_t vl = svcntw();\n    for (size_t i = 0; i < n.size(); i += vl) {\n        svint32_t vec = svld1(svptrue_b32(), &n[i]);\n        svbool_t pg = svptrue_b32();\n        svint32_t abs_vec = svabs_z(pg, vec);\n        svint32_t sum_vec = svdup_s32_z(pg, 0);\n        while (svptest_any(svptrue_b32(), abs_vec)) {\n            svint32_t digit = svrem_z(pg, abs_vec, svdup_s32_z(pg, 10));\n            sum_vec = svadd_z(pg, sum_vec, digit);\n            abs_vec = svdiv_z(pg, abs_vec, svdup_s32_z(pg, 10));\n        }\n        svbool_t mask = svcmpgt(pg, sum_vec, svdup_s32_z(pg, 0));\n        count += svcntp_b32(mask, pg);\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    size_t n = arr.size();\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t shifted = svreinterpret_s32(svlsr_n_u32(svreinterpret_u32(vec), 32));\n        vec = svinsr_n_s32(vec, shifted, 0);\n\n        svbool_t sorted = svcmpge(vec, svdup_n_s32(arr[i]));\n        if (svcntp_b8(svptrue_b8(), sorted) == n) return true;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n\n    int n = arr.size();\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t shifted_vec = svld1(pg, arr.data() + 1);\n\n    for (int i = 1; i < n; ++i) {\n        svint32_t next_shifted_vec = svld1(pg, arr.data() + (i + 1) % n);\n        svbool_t cmp = svcmplt(svptrue_b8(), vec, shifted_vec);\n        if (svcntp_b8(svptrue_b8(), cmp) != svcntp_b8(svptrue_b8(), svptrue_b8())) {\n            return false;\n        }\n        vec = shifted_vec;\n        shifted_vec = next_shifted_vec;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n\n    int n = arr.size();\n    svbool_t pg = svptrue_b8();\n    svint32_t v_arr = svld1(pg, arr.data());\n    svint32_t v_sorted = svsort1(pg, v_arr);\n\n    svint32_t v_shifted = svrshift_n_s32(pg, v_arr, 1);\n    svint32_t v_shifted_sorted = svsort1(pg, v_shifted);\n\n    for (int i = 0; i < n; ++i) {\n        if (svcmpne(pg, v_sorted, v_shifted_sorted)) {\n            return false;\n        }\n        v_shifted = svrshift_n_s32(pg, v_shifted, 1);\n        v_shifted_sorted = svsort1(pg, v_shifted);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n\n    size_t n = arr.size();\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t shifted = svreinterpret_s32(svlsr_n_u32(svreinterpret_u32(vec), 32));\n        shifted = svinsr_n_s32(shifted, svdup_n_s32(arr[i]), 0);\n\n        svbool_t sorted = svcmpge(pg, shifted, svdup_n_s32(arr[i]));\n        if (svcntp_b8(svptrue_b8(), sorted) == n) {\n            return true;\n        }\n\n        vec = shifted;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n\n    int n = arr.size();\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t shifted = svld1(pg, arr.data() + 1);\n\n    for (int i = 0; i < n; ++i) {\n        svint32_t next_shifted = svld1(pg, arr.data() + (i + 1) % n);\n        svbool_t cmp = svcmpge(pg, shifted, vec);\n        if (!svptest_any(pg, cmp)) {\n            return false;\n        }\n        vec = shifted;\n        shifted = next_shifted;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    const int* ptr1 = lst1.data();\n    const int* ptr2 = lst2.data();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec1 = svld1(pg, ptr1);\n    svint32_t vec2 = svld1(pg, ptr2);\n\n    svbool_t even_mask = svcmpeq(svand_z(pg, vec1, 1), svdup_s32(0));\n    svbool_t odd_mask = svnot_z(pg, even_mask);\n\n    svint32_t even_count = svcnt(svand_z(pg, vec1, even_mask));\n    svint32_t odd_count = svcnt(svand_z(pg, vec1, odd_mask));\n\n    svint32_t even_count2 = svcnt(svand_z(pg, vec2, even_mask));\n    svint32_t odd_count2 = svcnt(svand_z(pg, vec2, odd_mask));\n\n    svint32_t total_even = svadd_z(pg, even_count, even_count2);\n    svint32_t total_odd = svadd_z(pg, odd_count, odd_count2);\n\n    svbool_t result = svcmpge(total_even, total_odd);\n\n    return svlastb(result, svdup_b8('Y'), svdup_b8('N'));\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    const int* ptr1 = lst1.data();\n    const int* ptr2 = lst2.data();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec1 = svld1(pg, ptr1);\n    svint32_t vec2 = svld1(pg, ptr2);\n\n    svbool_t even_mask = svcmpeq(svand_z(pg, vec1, 1), svdup_s32(0));\n    svbool_t odd_mask = svnot_z(pg, even_mask);\n\n    svint32_t even_count = svcnt(svand_z(pg, vec1, even_mask));\n    svint32_t odd_count = svcnt(svand_z(pg, vec1, odd_mask));\n\n    svint32_t even_count2 = svcnt(svand_z(pg, vec2, even_mask));\n    svint32_t odd_count2 = svcnt(svand_z(pg, vec2, odd_mask));\n\n    svint32_t total_even = svadd_z(pg, even_count, even_count2);\n    svint32_t total_odd = svadd_z(pg, odd_count, odd_count2);\n\n    svbool_t result = svcmpge(total_even, total_odd);\n\n    return svlastb(result, svdup_b8('Y'), svdup_b8('N'));\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    const int* ptr1 = lst1.data();\n    const int* ptr2 = lst2.data();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec1 = svld1(pg, ptr1);\n    svint32_t vec2 = svld1(pg, ptr2);\n\n    svbool_t even_mask = svcmpeq(svand(vec1, 1), 0);\n    svbool_t odd_mask = svcmpne(svand(vec1, 1), 0);\n\n    svint32_t even_elements = svsel(even_mask, vec1, vec2);\n    svint32_t odd_elements = svsel(odd_mask, vec1, vec2);\n\n    svbool_t all_even = svcmpeq(svand(even_elements, 1), 0);\n\n    if (svptest_any(svptrue_b32(), all_even)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    const int* ptr1 = lst1.data();\n    const int* ptr2 = lst2.data();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v1 = svld1(pg, ptr1);\n    svint32_t v2 = svld1(pg, ptr2);\n\n    svbool_t even_mask = svcmpeq(svand_z(pg, v1, 1), svdup_s32(0));\n    svbool_t odd_mask = svcmpeq(svand_z(pg, v1, 1), svdup_s32(1));\n\n    svint32_t even_count = svcntp_z(pg, even_mask);\n    svint32_t odd_count = svcntp_z(pg, odd_mask);\n\n    svbool_t even_mask2 = svcmpeq(svand_z(pg, v2, 1), svdup_s32(0));\n    svbool_t odd_mask2 = svcmpeq(svand_z(pg, v2, 1), svdup_s32(1));\n\n    svint32_t even_count2 = svcntp_z(pg, even_mask2);\n    svint32_t odd_count2 = svcntp_z(pg, odd_mask2);\n\n    int even_count_sum = svaddv(svptrue_b8(), even_count) + svaddv(svptrue_b8(), even_count2);\n    int odd_count_sum = svaddv(svptrue_b8(), odd_count) + svaddv(svptrue_b8(), odd_count2);\n\n    if (even_count_sum >= odd_count_sum) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    const int* ptr1 = lst1.data();\n    const int* ptr2 = lst2.data();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec1 = svld1(pg, ptr1);\n    svint32_t vec2 = svld1(pg, ptr2);\n\n    svbool_t even_mask = svcmpeq(svand(vec1, 1), 0);\n    svbool_t odd_mask = svcmpeq(svand(vec1, 1), 1);\n\n    svint32_t even_count = svcnt(svptrue_b32(), even_mask);\n    svint32_t odd_count = svcnt(svptrue_b32(), odd_mask);\n\n    svint32_t even_count_sum = svaddv(svptrue_b32(), even_count);\n    svint32_t odd_count_sum = svaddv(svptrue_b32(), odd_count);\n\n    svbool_t even_mask2 = svcmpeq(svand(vec2, 1), 0);\n    svint32_t even_count2 = svcnt(svptrue_b32(), even_mask2);\n    svint32_t even_count_sum2 = svaddv(svptrue_b32(), even_count2);\n\n    int even_count_total = svaddv(svptrue_b32(), svadd(even_count_sum, even_count_sum2));\n    int odd_count_total = svaddv(svptrue_b32(), odd_count_sum);\n\n    if (even_count_total >= odd_count_total) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t odd_count = 0;\n        size_t len = str.length();\n        size_t vl = svcntb();\n\n        for (size_t i = 0; i < len; i += vl) {\n            svbool_t pg = svwhilelt_b32(i, len);\n            svuint8_t vec = svld1_u8(pg, (const uint8_t*)&str[i]);\n            svuint8_t odd_mask = svand_u8_z(pg, svsub_n_u8_z(pg, vec, svdup_n_u8(48)), svdup_n_u8(1));\n            odd_count += svaddv_u8(pg, odd_mask);\n        }\n\n        std::string output = \"the number of odd elements \" + std::to_string(odd_count) + \"n the str\" + std::to_string(odd_count) + \"ng \" + std::to_string(odd_count) + \" of the \" + std::to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string>& lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        int odd_count = 0;\n        size_t len = str.length();\n        size_t vl = svcntd();\n\n        for (size_t i = 0; i < len; i += vl) {\n            svbool_t pg = svwhilelt_b32(i, len);\n            svuint8_t vec = svld1_u8(pg, reinterpret_cast<const uint8_t*>(str.data() + i));\n            svuint8_t odd_mask = svdup_u8(1);\n            svbool_t odd_pg = svcmpeq(pg, svand_u8_z(pg, vec, odd_mask), odd_mask);\n            odd_count += svcntp_b32(odd_pg, pg);\n        }\n\n        std::string output = \"the number of odd elements \" + std::to_string(odd_count) +\n                             \"n the str\" + std::to_string(odd_count) +\n                             \"ng \" + std::to_string(odd_count) +\n                             \" of the \" + std::to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t odd_count = 0;\n        size_t len = str.length();\n        size_t vl = svcntb();\n\n        for (size_t i = 0; i < len; i += vl) {\n            svbool_t pg = svwhilelt_b32(i, len);\n            svuint8_t vec = svld1_u8(pg, (const uint8_t*)&str[i]);\n            svuint8_t odd_mask = svand_z(pg, vec, svdup_n_u8(1));\n            svuint8_t odd_counts = svcnt_u8(pg, odd_mask);\n            odd_count += svaddv_u8(pg, odd_counts);\n        }\n\n        std::string output = \"the number of odd elements \" + std::to_string(odd_count) +\n                             \"n the str\" + std::to_string(odd_count) +\n                             \"ng \" + std::to_string(odd_count) +\n                             \" of the \" + std::to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t odd_count = 0;\n        size_t len = str.length();\n        size_t vl = svcntb();\n\n        for (size_t i = 0; i < len; i += vl) {\n            svbool_t pg = svwhilelt_b32(i, len);\n            svuint8_t vec = svld1_u8(pg, (const uint8_t*)&str[i]);\n            svuint8_t odd_mask = svand_z(pg, vec, svdup_n_u8(1));\n            odd_count += svcntp_b32(svptrue_b32(), odd_mask);\n        }\n\n        std::string output = \"the number of odd elements \" + std::to_string(odd_count) +\n                             \"n the str\" + std::to_string(odd_count) +\n                             \"ng \" + std::to_string(odd_count) +\n                             \" of the \" + std::to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t count = 0;\n        size_t len = str.length();\n        size_t vl = svcntw();\n\n        for (size_t i = 0; i < len; i += vl) {\n            svbool_t pg = svwhilelt_b32(i, len);\n            svint32_t vec = svld1(pg, (const int32_t*)(str.data() + i));\n            svbool_t odd_pg = svcmplt_n_s32_x(pg, vec, 10);\n            svbool_t odd_mask = svand_n_s32_x(pg, odd_pg, 1);\n            count += svcntp_b32(odd_mask, odd_mask);\n        }\n\n        std::string output = \"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\";\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    const int64_t* data = nums.data();\n    size_t n = nums.size();\n\n    svbool_t pg = svptrue_b64();\n    svint64_t min_val = svdup_s64(SV_INT64_MAX);\n    svint64_t sum = svdup_s64(0);\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svint64_t vec = svld1(pg, data + i);\n        sum = svadd_s64_x(pg, sum, vec);\n        min_val = svmin_s64_x(pg, min_val, sum);\n    }\n\n    int64_t min_sum = svminv_s64(pg, min_val);\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    const int64_t* data = nums.data();\n    size_t n = nums.size();\n\n    svbool_t pg = svptrue_b64();\n    svint64_t min_val = svdup_s64(SV_INT64_MAX);\n    svint64_t sum = svdup_s64(0);\n\n    for (size_t i = 0; i < n; i += svcntb()) {\n        svint64_t vec = svld1(pg, data + i);\n        sum = svadd_s64_x(pg, sum, vec);\n        min_val = svmin_s64_x(pg, min_val, sum);\n    }\n\n    return svminv_s64(pg, min_val);\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    const int64_t* data = nums.data();\n    size_t n = nums.size();\n    size_t vl = svcntd();\n\n    svint64_t min_val = svdup_s64(INT64_MAX);\n    svint64_t sum_val = svdup_s64(0);\n\n    for (size_t i = 0; i < n; i += vl) {\n        size_t current_vl = svmin_vl64(n - i, vl);\n        svbool_t pg = svwhilelt_b64(i, current_vl);\n\n        svint64_t vec = svld1(pg, &data[i]);\n        sum_val = svadd_x(pg, sum_val, vec);\n        min_val = svmin_x(pg, min_val, sum_val);\n    }\n\n    return svminv_s64(min_val);\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n#include <limits>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    const int64_t* data = nums.data();\n    size_t n = nums.size();\n    int64_t min_sum = std::numeric_limits<int64_t>::max();\n    int64_t current_sum = 0;\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        size_t vl = svcntd();\n        svbool_t pg = svwhilelt_b64(i, n);\n        svint64_t vec = svld1(pg, data + i);\n\n        current_sum = svaddv(pg, vec, current_sum);\n        min_sum = svminv(pg, vec, min_sum);\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    const int64_t* data = nums.data();\n    size_t n = nums.size();\n    size_t vl = svcntd();\n\n    svint64_t min_val = svdup_s64(INT64_MAX);\n    svint64_t sum = svdup_s64(0);\n\n    for (size_t i = 0; i < n; i += vl) {\n        size_t current_vl = svcntd();\n        svbool_t pg = svwhilelt_b64(i, n);\n\n        svint64_t vec = svld1(pg, data + i);\n        sum = svadd_x(pg, sum, vec);\n\n        min_val = svmin_x(pg, min_val, sum);\n    }\n\n    return svminv(pg, min_val);\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_buckets = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (const auto& row : grid) {\n        int row_sum = 0;\n        size_t n = row.size();\n        size_t i = 0;\n\n        for (; i <= n - svcntb(); i += svcntb()) {\n            svint8_t vec = svld1(pg, &row[i]);\n            row_sum += svaddv(pg, vec);\n        }\n\n        for (; i < n; ++i) {\n            row_sum += row[i];\n        }\n\n        total_buckets += (row_sum + capacity - 1) / capacity;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_buckets = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (const auto& row : grid) {\n        int row_size = row.size();\n        int i = 0;\n\n        while (i < row_size) {\n            svint32_t vec = svld1(pg, &row[i]);\n            svint32_t sum_vec = svaddv(pg, vec);\n            int sum = svaddv(pg, sum_vec);\n\n            total_buckets += (sum + capacity - 1) / capacity;\n            i += svcntb();\n        }\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_buckets = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (const auto& row : grid) {\n        int row_sum = 0;\n        size_t n = row.size();\n        for (size_t i = 0; i < n; i += svcntw()) {\n            svint32_t vec = svld1(pg, &row[i]);\n            row_sum += svaddv(pg, vec);\n        }\n        total_buckets += (row_sum + capacity - 1) / capacity;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_buckets = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (const auto& row : grid) {\n        int row_size = row.size();\n        int i = 0;\n\n        while (i < row_size) {\n            svint8_t water = svld1(pg, &row[i]);\n            svint8_t sum = svaddv(pg, water);\n            int row_sum = svaddv(pg, sum);\n\n            total_buckets += (row_sum + capacity - 1) / capacity;\n            i += svcntb();\n        }\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_buckets = 0;\n    svbool_t pg = svptrue_b8();\n\n    for (const auto& row : grid) {\n        int row_size = row.size();\n        int i = 0;\n\n        while (i < row_size) {\n            svint8_t vec = svld1(pg, &row[i]);\n            svint8_t sum_vec = svaddv(pg, vec);\n            int sum = svaddv(pg, sum_vec);\n\n            total_buckets += (sum + capacity - 1) / capacity;\n            i += svcntb();\n        }\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    const int16_t* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svptrue_b16();\n    svint16_t vec = svld1(pg, data);\n\n    svbool_t odd_mask = svcmplt_n(pg, vec, 0);\n    svbool_t even_pos_mask = svindex_u16(0, 1) & svcmplt_n(pg, svindex_u16(0, 1), n);\n\n    svbool_t combined_mask = odd_mask & even_pos_mask;\n\n    svint16_t filtered_vec = svsel(svdup_n_s16(0), vec, combined_mask);\n\n    int64_t sum = svaddv(svptrue_b64(), svmovl_s16(svptrue_b16(), filtered_vec));\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    const int16_t* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svptrue_b16();\n    svint16_t vec = svld1(pg, data);\n\n    svbool_t odd_mask = svcmplt_n(pg, vec, 0);\n    svbool_t even_pos_mask = svindex_u16(0, 1) & svcmplt_n(pg, svindex_u16(0, 1), n);\n\n    svbool_t combined_mask = odd_mask & even_pos_mask;\n\n    svint16_t filtered_vec = svsel(svdup_n_s16(0), vec, combined_mask);\n\n    int64_t sum = svaddv(svptrue_b64(), svmovl_s16(svptrue_b16(), filtered_vec));\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    const int16_t* data = lst.data();\n    size_t n = lst.size();\n\n    int64_t sum = 0;\n    for (size_t i = 0; i < n; i += svcntw()) {\n        size_t vl = svcntw();\n        svbool_t pg = svwhilelt_b16(i, n);\n        svint16_t vec = svld1(pg, data + i);\n\n        svbool_t even_pos = svindex_b16(0, 1) & svptrue_b16();\n        svbool_t odd_val = svptrue_b16() & svcmpeq(svand(vec, 1), 1);\n\n        svbool_t mask = even_pos & odd_val;\n        svint16_t filtered = svsel(svdup_n_s16(0), vec, mask);\n\n        sum += svaddv(svptrue_b16(), filtered);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    const int16_t* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svptrue_b16();\n    svint16_t vec = svld1(pg, data);\n\n    svbool_t odd_mask = svcmplt_n(pg, vec, 0);\n    svbool_t even_pos_mask = svindex_u16(0, 1) & svcmplt_n(pg, svindex_u16(0, 1), n);\n\n    svbool_t combined_mask = odd_mask & even_pos_mask;\n\n    svint16_t filtered = svsel(combined_mask, vec, svdup_n_s16(0));\n\n    svint64_t sum_vec = svaddv(combined_mask, svmovl_s16(filtered));\n\n    return svaddv(combined_mask, sum_vec);\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    const int16_t* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svptrue_b16();\n    svint16_t vec = svld1(pg, data);\n    svint16_t odd_mask = svdup_n_s16(1);\n    svint16_t even_pos_mask = svdup_n_s16(2);\n\n    svbool_t odd_elements = svcmpeq(pg, svand_n_s16(vec, odd_mask), odd_mask);\n    svbool_t even_positions = svcmpeq(pg, svand_n_s16(svindex_s16(0, 1), even_pos_mask), svdup_n_s16(0));\n\n    svbool_t combined_mask = svand_z(pg, odd_elements, even_positions);\n    svint16_t filtered_elements = svsel(combined_mask, vec, svdup_n_s16(0));\n\n    svint64_t sum = svaddv(combined_mask, svmovl_s16(filtered_elements));\n\n    return svaddv(combined_mask, sum);\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    int i = 0;\n\n    while (i < k) {\n        svbool_t pg = svwhilelt_b32(i, k);\n        svint32_t v = svld1(pg, &arr[i]);\n        svbool_t mask = svcmplt_n(pg, v, 100);\n        svint32_t filtered = svsel(mask, v, svdup_n_s32(0));\n        sum += svaddv(pg, filtered);\n        i += svcntp_b32(pg, svptrue_b32());\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    int i = 0;\n\n    while (i < k) {\n        svbool_t pg = svwhilelt_b32(i, k);\n        svint32_t v = svld1(pg, &arr[i]);\n        svbool_t mask = svcmplt_n(pg, v, 100);\n        svint32_t filtered = svsel(mask, v, svdup_n_s32(0));\n        sum += svaddv(pg, filtered);\n        i += svcntp_b32(pg, svptrue_b32());\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    int i = 0;\n\n    while (i < k) {\n        svbool_t pg = svwhilelt_b32(i, k);\n        svint32_t vec = svld1(pg, &arr[i]);\n        svbool_t mask = svcmplt_n(pg, vec, 100);\n        svint32_t filtered = svsel(mask, vec, svdup_n_s32(0));\n        sum += svaddv(pg, filtered);\n        i += svcntp_b32(pg, svptrue_b32());\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    int i = 0;\n\n    while (i < k) {\n        svbool_t pg = svwhilelt_b32(i, k);\n        svint32_t v = svld1(pg, &arr[i]);\n        svbool_t mask = svcmplt_n(pg, v, 100);\n        svint32_t filtered = svsel(mask, v, svdup_n_s32(0));\n        sum += svaddv(pg, filtered);\n        i += svcntp_b32(pg, pg);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    int i = 0;\n\n    while (i < k) {\n        svbool_t pg = svptrue_b8();\n        svint32_t vec = svld1(pg, &arr[i]);\n        svbool_t mask = svcmplt_n(pg, vec, 100);\n        svint32_t filtered = svsel(mask, vec, svdup_n_s32(0));\n        sum += svaddv(pg, filtered);\n        i += svcntb();\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\nbool is_sorted_simd(const std::vector<int> & lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1(pg, lst.data());\n    svint32_t vec_next = svld1(pg, lst.data() + 1);\n\n    svbool_t sorted = svcmpeq(pg, vec, vec_next);\n    svbool_t duplicates = svcmpeq(pg, vec, vec_next);\n\n    for (size_t i = 1; i < lst.size() - 1; ++i) {\n        vec = vec_next;\n        vec_next = svld1(pg, lst.data() + i + 1);\n\n        svbool_t current_sorted = svcmplt(pg, vec, vec_next);\n        svbool_t current_duplicates = svcmpeq(pg, vec, vec_next);\n\n        sorted = svand_b_z(pg, sorted, current_sorted);\n        duplicates = svand_b_z(pg, duplicates, current_duplicates);\n    }\n\n    bool is_sorted = svaddv(pg, sorted) == svcntp_b32(pg, pg);\n    bool no_duplicates = svaddv(pg, duplicates) == 0;\n\n    return is_sorted && no_duplicates;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\nbool is_sorted_simd(const std::vector<int> & lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, lst.data());\n    svint32_t vec_next = svld1(pg, lst.data() + 1);\n\n    svbool_t sorted = svcmpeq(pg, vec, vec_next);\n    svbool_t duplicates = svcmpeq(pg, vec, vec_next);\n\n    for (size_t i = 1; i < lst.size() - 1; ++i) {\n        vec = vec_next;\n        vec_next = svld1(pg, lst.data() + i + 1);\n\n        svbool_t current_sorted = svcmplt(pg, vec, vec_next);\n        svbool_t current_duplicates = svcmpeq(pg, vec, vec_next);\n\n        sorted = svand(sorted, current_sorted);\n        duplicates = svand(duplicates, current_duplicates);\n    }\n\n    bool all_sorted = svaddv(svptrue_b8(), sorted) == svcntb();\n    bool no_duplicates = svaddv(svptrue_b8(), duplicates) == 0;\n\n    return all_sorted && no_duplicates;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```cpp\nbool is_sorted_simd(const std::vector<int> & lst) {\n    if (lst.size() <= 1) return true;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, lst.data());\n    svint32_t vec_next = svld1(pg, lst.data() + 1);\n\n    svbool_t sorted = svcmpeq(svptrue_b8(), vec, vec_next);\n    if (!svptest_any(svptrue_b8(), sorted)) return false;\n\n    for (size_t i = 1; i < lst.size() - 1; ++i) {\n        vec = svld1(pg, lst.data() + i);\n        vec_next = svld1(pg, lst.data() + i + 1);\n\n        sorted = svcmpeq(svptrue_b8(), vec, vec_next);\n        if (!svptest_any(svptrue_b8(), sorted)) return false;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\nbool is_sorted_simd(const std::vector<int> & lst) {\n    if (lst.size() < 2) return true;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, lst.data());\n    svint32_t vec_next = svld1(pg, lst.data() + 1);\n\n    svbool_t sorted = svcmpeq(pg, vec, vec_next);\n    if (svptest_any(svptrue_b8(), sorted)) return false;\n\n    svbool_t duplicates = svcmpeq(pg, vec, vec_next);\n    svbool_t duplicates_next = svcmpeq(pg, vec_next, svld1(pg, lst.data() + 2));\n    svbool_t duplicate_check = svand_b_z(pg, duplicates, duplicates_next);\n    if (svptest_any(svptrue_b8(), duplicate_check)) return false;\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\nbool is_sorted_simd(const std::vector<int> & lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, lst.data());\n    svint32_t vec_shifted = svld1(pg, lst.data() + 1);\n\n    svbool_t sorted = svcmpeq(pg, vec, vec_shifted);\n    svbool_t duplicates = svcmpeq(pg, vec, vec_shifted);\n\n    for (size_t i = 1; i < lst.size() - 1; ++i) {\n        vec = svld1(pg, lst.data() + i);\n        vec_shifted = svld1(pg, lst.data() + i + 1);\n\n        svbool_t current_sorted = svcmplt(pg, vec, vec_shifted);\n        svbool_t current_duplicates = svcmpeq(pg, vec, vec_shifted);\n\n        sorted = svand_b_z(pg, sorted, current_sorted);\n        duplicates = svand_b_z(pg, duplicates, current_duplicates);\n    }\n\n    bool is_sorted = svaddv_b(pg, sorted);\n    bool has_duplicates = svaddv_b(pg, duplicates);\n\n    return is_sorted && !has_duplicates;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    const int* data = arr.data();\n    size_t n = arr.size();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_signs = svdup_s32(1);\n    svint32_t v_sum = svdup_s32(0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svint32_t v_data = svld1(pg, data + i);\n        svbool_t pg_non_zero = svcmpne(pg, v_data, svdup_s32(0));\n        svint32_t v_abs = svabs_s32_z(pg, v_data);\n        svint32_t v_sign = svdup_s32(1);\n        v_sign = svsel_s32(pg_non_zero, svdup_s32(-1), v_sign);\n        v_sign = svsel_s32(svcmpgt(pg, v_data, svdup_s32(0)), svdup_s32(1), v_sign);\n\n        v_signs = svmul_s32_z(pg, v_signs, v_sign);\n        v_sum = svadd_s32_z(pg, v_sum, v_abs);\n    }\n\n    int sum = svaddv_s32(pg, v_sum);\n    int signs_product = svaddv_s32(pg, v_signs);\n\n    return sum * signs_product;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    const int* data = arr.data();\n    size_t n = arr.size();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_signs = svdup_s32(1);\n    svint32_t v_magnitudes = svdup_s32(0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1(pg, data + i);\n\n        svbool_t pg_non_zero = svcmpne(pg, v, 0);\n        svint32_t v_sign = svsign_s32(v);\n        v_signs = svmul_s32_x(pg, v_signs, v_sign);\n\n        svint32_t v_mag = svabs_s32(v);\n        v_magnitudes = svadd_s32_x(pg, v_magnitudes, v_mag);\n    }\n\n    int sign_product = svaddv(pg, v_signs);\n    int magnitude_sum = svaddv(pg, v_magnitudes);\n\n    return sign_product * magnitude_sum;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    const int* data = arr.data();\n    size_t n = arr.size();\n\n    svint32_t v_signs = svdup_s32(1);\n    svint32_t v_magnitudes = svdup_s32(0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1(pg, data + i);\n\n        svint32_t v_abs = svabs_s32_z(pg, v);\n        svint32_t v_sign = svsign_s32_z(pg, v);\n\n        v_magnitudes = svadd_s32_z(pg, v_magnitudes, v_abs);\n        v_signs = svmul_s32_z(pg, v_signs, v_sign);\n    }\n\n    int sum_magnitudes = svaddv_s32(svptrue_b32(), v_magnitudes);\n    int prod_signs = svaddv_s32(svptrue_b32(), v_signs);\n\n    return sum_magnitudes * prod_signs;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    const int* data = arr.data();\n    size_t n = arr.size();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_signs = svdup_s32(1);\n    svint32_t v_magnitudes = svdup_s32(0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1(pg, data + i);\n\n        svint32_t v_abs = svabs_s32_z(pg, v);\n        v_magnitudes = svadd_z(pg, v_magnitudes, v_abs);\n\n        svint32_t v_sign = svsign_s32_z(pg, v);\n        v_signs = svmul_z(pg, v_signs, v_sign);\n    }\n\n    int sum_magnitudes = svaddv(svptrue_b32(), v_magnitudes);\n    int prod_signs = svaddv(svptrue_b32(), v_signs);\n\n    return sum_magnitudes * prod_signs;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    const int* data = arr.data();\n    size_t n = arr.size();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_signs = svdup_s32(1);\n    svint32_t v_sum = svdup_s32(0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svint32_t v = svld1(pg, data + i);\n        svbool_t pg_nonzero = svcmpne(pg, v, 0);\n        svint32_t v_abs = svabs(pg, v);\n        svint32_t v_sign = svsign(pg, v);\n\n        v_sum = svadd(pg, v_sum, v_abs);\n        v_signs = svmul(pg, v_signs, v_sign);\n    }\n\n    int sum = svaddv(pg, v_sum);\n    int signs = svaddv(pg, v_signs);\n\n    return sum * signs;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>>& grid, int k) {\n    int N = grid.size();\n    std::vector<int> min_path(k, std::numeric_limits<int>::max());\n    std::vector<int> current_path(k);\n\n    // Directions for moving to neighbor cells (right, down, left, up)\n    const int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    // Helper function to check if a cell is within the grid\n    auto is_valid = [N](int x, int y) {\n        return x >= 0 && x < N && y >= 0 && y < N;\n    };\n\n    // Recursive function to find the minimum path\n    auto find_min_path = [&](auto&& self, int x, int y, int step) -> void {\n        if (step == k) {\n            if (svcmplt(svptrue_b8(), svld1(svint32_t, current_path.data()), svld1(svint32_t, min_path.data()))) {\n                min_path = current_path;\n            }\n            return;\n        }\n\n        current_path[step] = grid[x][y];\n\n        for (const auto& dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (is_valid(nx, ny)) {\n                self(self, nx, ny, step + 1);\n            }\n        }\n    };\n\n    // Start the search from each cell in the grid\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            find_min_path(find_min_path, i, j, 0);\n        }\n    }\n\n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>>& grid, int k) {\n    int N = grid.size();\n    std::vector<int> min_path(k, INT_MAX);\n    std::vector<int> current_path(k);\n\n    // Flatten the grid for easier access\n    std::vector<int> flat_grid(N * N);\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            flat_grid[i * N + j] = grid[i][j];\n        }\n    }\n\n    // Initialize SVE types\n    svbool_t pg = svptrue_b8();\n    svint32_t sv_min_path = svdup_s32(INT_MAX);\n    svint32_t sv_current_path = svdup_s32(0);\n\n    // Iterate over all possible starting points\n    for (int start = 0; start < N * N; ++start) {\n        current_path[0] = flat_grid[start];\n        sv_current_path = svdup_s32(current_path[0]);\n\n        // Generate all possible paths of length k starting from 'start'\n        for (int i = 1; i < k; ++i) {\n            int current = current_path[i - 1];\n            int row = current / N;\n            int col = current % N;\n\n            // Collect all possible next steps\n            std::vector<int> next_steps;\n            if (row > 0) next_steps.push_back(flat_grid[(row - 1) * N + col]);\n            if (row < N - 1) next_steps.push_back(flat_grid[(row + 1) * N + col]);\n            if (col > 0) next_steps.push_back(flat_grid[row * N + (col - 1)]);\n            if (col < N - 1) next_steps.push_back(flat_grid[row * N + (col + 1)]);\n\n            // Find the minimum next step using SVE\n            svint32_t sv_next_steps = svld1(pg, next_steps.data());\n            svint32_t sv_min_next_step = svminv(pg, sv_next_steps);\n            current_path[i] = svaddv(pg, sv_min_next_step);\n            sv_current_path = svdup_s32(current_path[i]);\n        }\n\n        // Compare and update the minimum path using SVE\n        svbool_t cmp = svcmplt(pg, sv_current_path, sv_min_path);\n        sv_min_path = svsel(cmp, sv_current_path, sv_min_path);\n    }\n\n    // Store the result from SVE vector to std::vector\n    svst1(pg, min_path.data(), sv_min_path);\n\n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>>& grid, int k) {\n    int N = grid.size();\n    std::vector<int> min_path(k, std::numeric_limits<int>::max());\n    std::vector<int> current_path(k);\n\n    // Directions for moving to neighbor cells\n    const int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    // Helper function to check if a cell is within the grid\n    auto is_valid = [N](int x, int y) {\n        return x >= 0 && x < N && y >= 0 && y < N;\n    };\n\n    // Recursive function to find the minimum path\n    auto find_min_path = [&](auto&& self, int x, int y, int step) -> void {\n        if (step == k) {\n            if (current_path < min_path) {\n                min_path = current_path;\n            }\n            return;\n        }\n\n        for (const auto& dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (is_valid(nx, ny)) {\n                current_path[step] = grid[nx][ny];\n                self(self, nx, ny, step + 1);\n            }\n        }\n    };\n\n    // Start from each cell in the grid\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            current_path[0] = grid[i][j];\n            find_min_path(find_min_path, i, j, 1);\n        }\n    }\n\n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>>& grid, int k) {\n    int N = grid.size();\n    std::vector<int> min_path(k, std::numeric_limits<int>::max());\n    std::vector<int> current_path(k);\n\n    // Directions for moving to neighbor cells\n    const int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    // Helper function to check if a cell is within the grid\n    auto is_valid = [N](int x, int y) {\n        return x >= 0 && x < N && y >= 0 && y < N;\n    };\n\n    // Recursive function to find the minimum path\n    auto find_min_path = [&](auto&& self, int x, int y, int step) -> void {\n        if (step == k) {\n            if (current_path < min_path) {\n                min_path = current_path;\n            }\n            return;\n        }\n\n        current_path[step] = grid[x][y];\n\n        for (const auto& dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (is_valid(nx, ny)) {\n                self(self, nx, ny, step + 1);\n            }\n        }\n    };\n\n    // Start the search from each cell in the grid\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            find_min_path(find_min_path, i, j, 0);\n        }\n    }\n\n    return min_path;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>>& grid, int k) {\n    int N = grid.size();\n    std::vector<int> min_path(k, std::numeric_limits<int>::max());\n    std::vector<int> current_path(k);\n\n    // Directions for moving to neighbor cells (right, down, left, up)\n    const int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    // Helper function to check if a cell is within the grid\n    auto is_valid = [N](int x, int y) {\n        return x >= 0 && x < N && y >= 0 && y < N;\n    };\n\n    // Recursive function to find the minimum path\n    auto find_min_path = [&](auto&& self, int x, int y, int step) -> void {\n        if (step == k) {\n            if (svcmplt(svptrue_b8(), svld1(svint32_t, current_path.data()), svld1(svint32_t, min_path.data()))) {\n                min_path = current_path;\n            }\n            return;\n        }\n\n        current_path[step] = grid[x][y];\n\n        for (const auto& dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (is_valid(nx, ny)) {\n                self(self, nx, ny, step + 1);\n            }\n        }\n    };\n\n    // Start the search from each cell in the grid\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            find_min_path(find_min_path, i, j, 0);\n        }\n    }\n\n    return min_path;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n) {\n    uint64_t product = 1;\n    bool all_even = true;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        n /= 10;\n\n        if (digit % 2 != 0) {\n            product *= digit;\n            all_even = false;\n        }\n    }\n\n    return all_even ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n) {\n    uint64_t product = 1;\n    bool all_even = true;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        n /= 10;\n\n        if (digit % 2 != 0) {\n            product *= digit;\n            all_even = false;\n        }\n    }\n\n    return all_even ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n) {\n    uint64_t product = 1;\n    bool all_even = true;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        n /= 10;\n\n        if (digit % 2 != 0) {\n            product *= digit;\n            all_even = false;\n        }\n    }\n\n    return all_even ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n) {\n    uint64_t product = 1;\n    bool all_even = true;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        n /= 10;\n\n        if (digit % 2 != 0) {\n            product *= digit;\n            all_even = false;\n        }\n    }\n\n    return all_even ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n) {\n    uint64_t product = 1;\n    bool all_even = true;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        n /= 10;\n\n        if (digit % 2 != 0) {\n            product *= digit;\n            all_even = false;\n        }\n    }\n\n    return all_even ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    const float* data = lst.data();\n    size_t n = lst.size();\n\n    uint64_t sum = 0;\n    size_t i = 0;\n\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svfloat32_t vec = svld1_f32(svptrue_b32(), data + i);\n        svfloat32_t ceil_vec = svrintz_f32_x(svptrue_b32(), vec);\n        svfloat32_t squared_vec = svmul_f32_x(svptrue_b32(), ceil_vec, ceil_vec);\n        svuint64_t sum_vec = svcvt_u64_f32_x(svptrue_b32(), squared_vec);\n        sum += svaddv_u64(svptrue_b32(), sum_vec);\n    }\n\n    for (; i < n; ++i) {\n        float val = std::ceil(data[i]);\n        sum += static_cast<uint64_t>(val * val);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    const float* data = lst.data();\n    size_t size = lst.size();\n    uint64_t sum = 0;\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        size_t lane_count = svcntw();\n        size_t remaining = size - i;\n        if (remaining < lane_count) {\n            lane_count = remaining;\n        }\n\n        svbool_t pg = svwhilelt_b32_u32(lane_count, lane_count);\n        svfloat32_t vec = svld1(pg, data + i);\n        svfloat32_t ceil_vec = svrintz(pg, vec);\n        svfloat32_t squared_vec = svmul_z(pg, svmul_z(pg, ceil_vec, ceil_vec), svdup_f32(1.0f));\n        svfloat32_t sum_vec = svaddv(pg, squared_vec);\n\n        sum += svaddv_u64(svptrue_b64(), svcvt_u64_z(pg, svrintn_z(pg, sum_vec)));\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    const float* data = lst.data();\n    size_t n = lst.size();\n\n    uint64_t sum = 0;\n    size_t i = 0;\n\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svfloat32_t vec = svld1(svptrue_b32(), data + i);\n        svfloat32_t ceil_vec = svceil_z(svptrue_b32(), vec);\n        svfloat32_t squared_vec = svmul_z(svptrue_b32(), ceil_vec, ceil_vec);\n        sum += svaddv(svptrue_b32(), squared_vec);\n    }\n\n    for (; i < n; ++i) {\n        float val = std::ceil(data[i]);\n        sum += val * val;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    const float* data = lst.data();\n    size_t size = lst.size();\n    uint64_t sum = 0;\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        size_t vl = svcntw();\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vec = svld1(pg, data + i);\n        svfloat32_t ceil_vec = svrintz(pg, vec);\n        svfloat32_t squared_vec = svmul_x(pg, ceil_vec, ceil_vec);\n        svfloat32_t sum_vec = svaddv(pg, squared_vec);\n        sum += svaddv_u64(pg, svreinterpret_u64(pg, sum_vec));\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c++\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    const float* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svptrue_b8();\n    svfloat32_t vec_sum = svdup_f32(0.0f);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec = svld1_f32(pg, data + i);\n        vec = svrintz_f32_x(pg, vec);\n        vec = svmul_f32_x(pg, vec, vec);\n        vec_sum = svadd_f32_x(pg, vec_sum, vec);\n    }\n\n    float sum = svaddv_f32(pg, vec_sum);\n    return static_cast<uint64_t>(sum);\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\nint can_arrange_simd(const std::vector<int> & arr) {\n    int n = arr.size();\n    if (n <= 1) return -1;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t vec_shifted = svld1(pg, arr.data() + 1);\n\n    svbool_t cmp = svcmplt(pg, vec, vec_shifted);\n\n    int result = -1;\n    for (int i = 0; i < n - 1; ++i) {\n        if (svptest_any(pg, cmp)) {\n            result = i;\n        }\n        vec = vec_shifted;\n        vec_shifted = svld1(pg, arr.data() + i + 2);\n        cmp = svcmplt(pg, vec, vec_shifted);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\nint can_arrange_simd(const std::vector<int> & arr) {\n    int n = arr.size();\n    if (n < 2) return -1;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t vec_shifted = svld1(pg, arr.data() + 1);\n\n    svbool_t cmp = svcmple_s32(pg, vec, vec_shifted);\n\n    int idx = svlastb(pg, cmp);\n    return idx == -1 ? -1 : idx + 1;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\nint can_arrange_simd(const std::vector<int> & arr) {\n    int n = arr.size();\n    if (n <= 1) return -1;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t vec_shifted = svld1(pg, arr.data() + 1);\n\n    svbool_t cmp = svcmplt(pg, vec, vec_shifted);\n\n    int idx = svlastb(cmp, pg);\n    return idx == -1 ? -1 : idx + 1;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n <= 1) return -1;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t vec_shifted = svld1(pg, arr.data() + 1);\n\n    svbool_t cmp = svcmplt(pg, vec, vec_shifted);\n    svuint32_t indices = svindex_u32(0, 1);\n    svuint32_t result = svlastb_u32(cmp, indices);\n\n    return svlastb_u32(cmp, indices) - 1;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\nint can_arrange_simd(const std::vector<int> & arr) {\n    int n = arr.size();\n    if (n < 2) return -1;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, arr.data());\n    svint32_t vec_shifted = svld1(pg, arr.data() + 1);\n\n    svbool_t cmp = svcmple_s32(pg, vec, vec_shifted);\n\n    if (svcntp_b8(pg, cmp) == 0) return -1;\n\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t result = svlastb_s32(pg, indices, cmp);\n\n    return svlastb_s32(pg, result, cmp);\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n\n    const int* data = lst.data();\n    size_t size = lst.size();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, data);\n\n    svint32_t neg_mask = svcmpgt_n_s32(pg, vec, 0);\n    svint32_t pos_mask = svcmplt_n_s32(pg, vec, 0);\n\n    svint32_t neg_values = svsel_s32(neg_mask, vec, svdup_n_s32(INT_MIN));\n    svint32_t pos_values = svsel_s32(pos_mask, vec, svdup_n_s32(INT_MAX));\n\n    int32_t largest_neg = svmaxv_s32(pg, neg_values);\n    int32_t smallest_pos = svminv_s32(pg, pos_values);\n\n    if (largest_neg == INT_MIN) {\n        largest_neg = 0;\n    }\n    if (smallest_pos == INT_MAX) {\n        smallest_pos = 0;\n    }\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n\n    const int* data = lst.data();\n    size_t size = lst.size();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t v = svld1(pg, data);\n\n    svint32_t neg_mask = svcmpgt_n_s32(pg, v, 0);\n    svint32_t pos_mask = svcmplt_n_s32(pg, v, 0);\n\n    svint32_t neg_values = svsel_s32(neg_mask, v, svdup_n_s32(INT32_MIN));\n    svint32_t pos_values = svsel_s32(pos_mask, v, svdup_n_s32(INT32_MAX));\n\n    int32_t largest_neg = svmaxv_s32(pg, neg_values);\n    int32_t smallest_pos = svminv_s32(pg, pos_values);\n\n    if (largest_neg == INT32_MIN) {\n        largest_neg = 0;\n    }\n\n    if (smallest_pos == INT32_MAX) {\n        smallest_pos = 0;\n    }\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n\n    const int* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1(pg, data);\n\n    svint32_t neg_mask = svcmpgt_n_s32(vec, 0);\n    svint32_t pos_mask = svcmplt_n_s32(vec, 0);\n\n    svint32_t neg_values = svand_s32_z(pg, neg_mask, vec);\n    svint32_t pos_values = svand_s32_z(pg, pos_mask, vec);\n\n    int32_t largest_neg = svmaxv_s32(neg_values);\n    int32_t smallest_pos = svminv_s32(pos_values);\n\n    if (largest_neg == INT32_MIN) {\n        largest_neg = 0;\n    }\n\n    if (smallest_pos == INT32_MAX) {\n        smallest_pos = 0;\n    }\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n\n    const int* data = lst.data();\n    size_t size = lst.size();\n\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1(pg, data);\n\n    svint32_t neg_mask = svcmpgt_n_s32(pg, vec, 0);\n    svint32_t pos_mask = svcmplt_n_s32(pg, vec, 0);\n\n    svint32_t neg_values = svsel_s32(neg_mask, vec, svdup_n_s32(INT32_MIN));\n    svint32_t pos_values = svsel_s32(pos_mask, vec, svdup_n_s32(INT32_MAX));\n\n    int largest_neg = svmaxv_s32(pg, neg_values);\n    int smallest_pos = svminv_s32(pg, pos_values);\n\n    if (largest_neg == INT32_MIN) {\n        largest_neg = 0;\n    }\n\n    if (smallest_pos == INT32_MAX) {\n        smallest_pos = 0;\n    }\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n\n    const int* data = lst.data();\n    size_t size = lst.size();\n\n    svbool_t pg = svptrue_b8();\n    svint32_t vec = svld1(pg, data);\n\n    svint32_t neg_mask = svcmpgt_n_s32(pg, vec, 0);\n    svint32_t pos_mask = svcmplt_n_s32(pg, vec, 0);\n\n    svint32_t neg_values = svsel_s32(neg_mask, vec, svdup_n_s32(INT_MIN));\n    svint32_t pos_values = svsel_s32(pos_mask, vec, svdup_n_s32(INT_MAX));\n\n    int32_t largest_neg = svmaxv_s32(pg, neg_values);\n    int32_t smallest_pos = svminv_s32(pg, pos_values);\n\n    if (largest_neg == INT_MIN) {\n        largest_neg = 0;\n    }\n    if (smallest_pos == INT_MAX) {\n        smallest_pos = 0;\n    }\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t i = 1;\n\n    while (i <= n) {\n        uint64_t product = 1;\n        uint64_t j = i;\n\n        while (j > 0) {\n            product *= j;\n            j--;\n        }\n\n        result *= product;\n        i++;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t i = 1;\n\n    while (i <= n) {\n        svuint64_t v_i = svdup_u64(i);\n        svuint64_t v_result = svdup_u64(result);\n\n        svbool_t p = svwhilelt_b64(i, n + 1);\n\n        do {\n            v_result = svmul_u64_z(p, v_result, v_i);\n            v_i = svadd_u64_z(p, v_i, svdup_u64(1));\n            p = svwhilelt_b64(svptrue_b64(), v_i, n + 1);\n        } while (svptest_any(svptrue_b64(), p));\n\n        result = svaddv_u64(svptrue_b64(), v_result);\n        i++;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t i = 1;\n\n    while (i <= n) {\n        svuint64_t vec_i = svdup_u64(i);\n        svuint64_t vec_result = svdup_u64(result);\n        svuint64_t vec_factorial = svdup_u64(1);\n\n        svbool_t pg = svwhilelt_b64(i, i + svcntw());\n\n        while (svptest_any(svptrue_b64(), pg)) {\n            svuint64_t vec_j = svindex_u64(i, pg);\n            vec_factorial = svmul_u64_z(pg, vec_factorial, vec_j);\n            vec_j = svadd_u64_z(pg, vec_j, svcntw());\n            pg = svwhilelt_b64(vec_j, i + svcntw());\n        }\n\n        result = svaddv_u64(svptrue_b64(), vec_result * vec_factorial);\n        i++;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t i = 1;\n\n    while (i <= n) {\n        svuint64_t vec_i = svdup_u64(i);\n        svuint64_t vec_result = svdup_u64(result);\n\n        svbool_t pg = svwhilelt_u64(i, n + 1);\n        svuint64_t vec_factorial = svdup_u64(1);\n\n        while (svcntp_true(pg, pg)) {\n            svuint64_t vec_j = svdup_u64(1);\n            svuint64_t vec_temp = svdup_u64(1);\n\n            while (svcntp_true(pg, svcmplt_u64(pg, vec_j, vec_i))) {\n                vec_temp = svmul_u64_z(pg, vec_temp, vec_j);\n                vec_j = svadd_u64_z(pg, vec_j, svdup_u64(1));\n            }\n\n            vec_factorial = svmul_u64_z(pg, vec_factorial, vec_temp);\n            vec_i = svadd_u64_z(pg, vec_i, svdup_u64(1));\n        }\n\n        result = svaddv_u64(pg, svmul_u64_z(pg, vec_result, vec_factorial));\n        i++;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t i = 1;\n\n    while (i <= n) {\n        uint64_t partial_result = 1;\n        uint64_t j = 1;\n\n        while (j <= i) {\n            partial_result *= j;\n            j++;\n        }\n\n        result *= partial_result;\n        i++;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\nint sum_squares_simd(const std::vector<int> & lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    const int *data = lst.data();\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1(pg, data + i);\n\n        svbool_t pg_multiple_of_3 = svcmpge(svptrue_b32(), svindex_s32(i, 1), svdup_s32(3));\n        svbool_t pg_multiple_of_4 = svcmpge(svptrue_b32(), svindex_s32(i, 1), svdup_s32(4));\n        svbool_t pg_multiple_of_3_and_not_4 = svand(pg_multiple_of_3, svnot(pg_multiple_of_4));\n\n        svint32_t v_squared = svmul(v, v);\n        svint32_t v_cubed = svmul(v, svmul(v, v));\n\n        v = svsel(pg_multiple_of_3, v_squared, v);\n        v = svsel(pg_multiple_of_3_and_not_4, v_cubed, v);\n\n        sum += svaddv(pg, v);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\nint sum_squares_simd(const std::vector<int> & lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    const int *data = lst.data();\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1(pg, data + i);\n\n        svbool_t pg_multiple_of_3 = svcmpeq_n_z(pg, svptrue_b32(), svmod_n_z(svindex_s32(i, 1), 3));\n        svbool_t pg_multiple_of_4 = svcmpeq_n_z(pg, svptrue_b32(), svmod_n_z(svindex_s32(i, 1), 4));\n        svbool_t pg_multiple_of_4_not_3 = svand_n_z(pg, pg_multiple_of_4, svnot_n_z(pg_multiple_of_3));\n\n        svint32_t v_squared = svmul_n_z(pg_multiple_of_3, v, v);\n        svint32_t v_cubed = svmul_n_z(pg_multiple_of_4_not_3, v, svmul_n_z(pg_multiple_of_4_not_3, v, v));\n\n        svint32_t v_result = svsel(pg_multiple_of_3, v_squared, svsel(pg_multiple_of_4_not_3, v_cubed, v));\n\n        sum += svaddv(pg, v_result);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\nint sum_squares_simd(const std::vector<int> & lst) {\n    int sum = 0;\n    const int *data = lst.data();\n    size_t size = lst.size();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svint32_t v = svld1(pg, data + i);\n\n        svbool_t pg_mult_3 = svptrue_b32();\n        svbool_t pg_mult_4 = svptrue_b32();\n        svbool_t pg_mult_4_not_3 = svptrue_b32();\n\n        for (int j = 0; j < svcntw(); ++j) {\n            pg_mult_3 = svand_b_z(pg_mult_3, svcmpne(pg, svindex_u32(j, 1), svdup_n_u32(0)));\n            pg_mult_4 = svand_b_z(pg_mult_4, svcmpne(pg, svindex_u32(j, 1), svdup_n_u32(0)));\n            pg_mult_4_not_3 = svand_b_z(pg_mult_4_not_3, svcmpne(pg, svindex_u32(j, 1), svdup_n_u32(0)));\n        }\n\n        svint32_t v_squared = svmul_z(pg_mult_3, v, v);\n        svint32_t v_cubed = svmul_z(pg_mult_4_not_3, svmul_z(pg_mult_4_not_3, v, v), v);\n\n        v = svsel(pg_mult_3, v_squared, v);\n        v = svsel(pg_mult_4_not_3, v_cubed, v);\n\n        sum += svaddv(pg, v);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\nint sum_squares_simd(const std::vector<int> & lst) {\n    int sum = 0;\n    const int *data = lst.data();\n    size_t size = lst.size();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svint32_t v = svld1(pg, data + i);\n\n        svbool_t pg_multiple_of_3 = svcmpge(svptrue_b32(), svdiv(svindex_u32(i, 1), svdup_u32(3)), svdup_u32(0));\n        svbool_t pg_multiple_of_4 = svcmpge(svptrue_b32(), svdiv(svindex_u32(i, 1), svdup_u32(4)), svdup_u32(0));\n        svbool_t pg_multiple_of_4_not_3 = svand(pg_multiple_of_4, svnot(pg_multiple_of_3));\n\n        svint32_t v_squared = svmul(v, v);\n        svint32_t v_cubed = svmul(v, svmul(v, v));\n\n        v = svsel(pg_multiple_of_3, v_squared, v);\n        v = svsel(pg_multiple_of_4_not_3, v_cubed, v);\n\n        sum += svaddv(svptrue_b32(), v);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int>& lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    const int* data = lst.data();\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, data + i);\n\n        svbool_t pg_mult3 = svptrue_b32();\n        svbool_t pg_mult4 = svptrue_b32();\n\n        for (size_t j = 0; j < svcntw(); ++j) {\n            pg_mult3 = svand_b_z(pg_mult3, svcmpne(svptrue_b32(), svindex_u32(j, 1), svdup_n_u32(3)));\n            pg_mult4 = svand_b_z(pg_mult4, svcmpne(svptrue_b32(), svindex_u32(j, 1), svdup_n_u32(4)));\n        }\n\n        svint32_t vec_squared = svmul_n_z(pg_mult3, vec, vec);\n        svint32_t vec_cubed = svmul_n_z(pg_mult4, svmul_n_z(pg_mult4, vec, vec), vec);\n\n        vec = svsel(pg_mult3, vec_squared, vec);\n        vec = svsel(pg_mult4, vec_cubed, vec);\n\n        sum += svaddv(svptrue_b32(), vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\nint specialFilter_simd(const std::vector<int> & nums) {\n    const int *data = nums.data();\n    size_t n = nums.size();\n    int count = 0;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        size_t vl = svcntw();\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t vec = svld1(pg, data + i);\n\n        svbool_t pg_gt_10 = svcmpgt(pg, vec, svdup_n_s32(10));\n\n        svint32_t first_digit = svabs(vec) / svdup_n_s32(10);\n        while (svcmpgt(pg, first_digit, svdup_n_s32(9))) {\n            first_digit /= svdup_n_s32(10);\n        }\n\n        svint32_t last_digit = svabs(vec) % svdup_n_s32(10);\n\n        svbool_t pg_first_odd = svcmpne(pg, first_digit % svdup_n_s32(2), svdup_n_s32(0));\n        svbool_t pg_last_odd = svcmpne(pg, last_digit % svdup_n_s32(2), svdup_n_s32(0));\n\n        svbool_t pg_special = svand(pg_gt_10, svand(pg_first_odd, pg_last_odd));\n\n        count += svcntp(pg_special);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint specialFilter_simd(const std::vector<int> & nums) {\n    const int *data = nums.data();\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_nums = svld1(pg, data);\n    svint32_t v_abs_nums = svabs_z(pg, v_nums);\n\n    svint32_t v_first_digit = svdiv_z(pg, v_abs_nums, svdup_s32(10));\n    svint32_t v_last_digit = svsub_z(pg, v_abs_nums, svmul_z(pg, v_first_digit, svdup_s32(10)));\n\n    svbool_t pg_first_odd = svcmpeq_z(pg, svand_z(pg, v_first_digit, svdup_s32(1)), svdup_s32(1)) |\n                            svcmpeq_z(pg, svand_z(pg, v_first_digit, svdup_s32(1)), svdup_s32(3)) |\n                            svcmpeq_z(pg, svand_z(pg, v_first_digit, svdup_s32(1)), svdup_s32(5)) |\n                            svcmpeq_z(pg, svand_z(pg, v_first_digit, svdup_s32(1)), svdup_s32(7)) |\n                            svcmpeq_z(pg, svand_z(pg, v_first_digit, svdup_s32(1)), svdup_s32(9));\n\n    svbool_t pg_last_odd = svcmpeq_z(pg, svand_z(pg, v_last_digit, svdup_s32(1)), svdup_s32(1)) |\n                           svcmpeq_z(pg, svand_z(pg, v_last_digit, svdup_s32(1)), svdup_s32(3)) |\n                           svcmpeq_z(pg, svand_z(pg, v_last_digit, svdup_s32(1)), svdup_s32(5)) |\n                           svcmpeq_z(pg, svand_z(pg, v_last_digit, svdup_s32(1)), svdup_s32(7)) |\n                           svcmpeq_z(pg, svand_z(pg, v_last_digit, svdup_s32(1)), svdup_s32(9));\n\n    svbool_t pg_valid = svcmpgt_z(pg, v_nums, svdup_s32(10)) & pg_first_odd & pg_last_odd;\n\n    count = svaddv(pg_valid, svdup_s32(1));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint specialFilter_simd(const std::vector<int> & nums) {\n    const int *data = nums.data();\n    size_t n = nums.size();\n    int count = 0;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        size_t vl = svcntw();\n        svint32_t v = svld1(svptrue_b32(), data + i);\n\n        svbool_t p = svcmpgt(svptrue_b32(), v, svdup_s32(10));\n\n        svint32_t first_digit = svabs(v);\n        svint32_t last_digit = svabs(v);\n\n        while (svmaxv(svptrue_b32(), svcmpge(svptrue_b32(), first_digit, svdup_s32(10)))) {\n            first_digit = svdiv_s32(svptrue_b32(), first_digit, svdup_s32(10));\n        }\n\n        last_digit = svabs(svsub_s32(svptrue_b32(), last_digit, svmul_s32(svptrue_b32(), svdiv_s32(svptrue_b32(), last_digit, svdup_s32(10)), svdup_s32(10))));\n\n        svbool_t first_odd = svcmpne(svptrue_b32(), svand_s32(svptrue_b32(), first_digit, svdup_s32(1)), svdup_s32(0));\n        svbool_t last_odd = svcmpne(svptrue_b32(), svand_s32(svptrue_b32(), last_digit, svdup_s32(1)), svdup_s32(0));\n\n        svbool_t special = svand_b_z(p, svand_b_z(first_odd, last_odd));\n\n        count += svcntp_b32(svptrue_b32(), special);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\nint specialFilter_simd(const std::vector<int> & nums) {\n    const int* data = nums.data();\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svptrue_b32();\n    svint32_t v_nums = svld1(pg, data);\n    svint32_t v_ten = svdup_s32(10);\n    svint32_t v_one = svdup_s32(1);\n    svint32_t v_two = svdup_s32(2);\n    svint32_t v_five = svdup_s32(5);\n\n    svbool_t pg_gt_ten = svcmpgt(pg, v_nums, v_ten);\n\n    svint32_t v_first_digit = svabs_s32_x(pg, v_nums);\n    while (svptest_any(svptrue_b32(), svcmpge(pg, v_first_digit, v_two))) {\n        v_first_digit = svdiv_s32_x(pg, v_first_digit, v_two);\n    }\n\n    svbool_t pg_first_odd = svcmpne(pg, svand_s32_x(pg, v_first_digit, v_one), svdup_s32(0));\n\n    svint32_t v_last_digit = svabs_s32_x(pg, v_nums);\n    while (svptest_any(svptrue_b32(), svcmpge(pg, v_last_digit, v_ten))) {\n        v_last_digit = svdiv_s32_x(pg, v_last_digit, v_ten);\n    }\n\n    svbool_t pg_last_odd = svcmpne(pg, svand_s32_x(pg, v_last_digit, v_one), svdup_s32(0));\n\n    svbool_t pg_special = svand_b_z(pg, pg_gt_ten, svand_b_z(pg, pg_first_odd, pg_last_odd));\n\n    count = svaddv(pg_special, svdup_s32(0));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\nint specialFilter_simd(const std::vector<int> & nums) {\n    const int *data = nums.data();\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svptrue_b8();\n    svint32_t v_nums = svld1(pg, data);\n    svbool_t mask = svcmpgt(pg, v_nums, svdup_s32(10));\n\n    svint32_t first_digit = svabs_s32(v_nums);\n    svint32_t last_digit = svabs_s32(v_nums);\n\n    while (svlastb(pg, mask)) {\n        first_digit = svdiv_s32_z(pg, first_digit, svdup_s32(10));\n        last_digit = svrem_s32_z(pg, last_digit, svdup_s32(10));\n        mask = svand_b_z(pg, mask, svcmpne(pg, svrem_s32_z(pg, first_digit, svdup_s32(2)), svdup_s32(0)));\n        mask = svand_b_z(pg, mask, svcmpne(pg, svrem_s32_z(pg, last_digit, svdup_s32(2)), svdup_s32(0)));\n        pg = svwhilelt_b8(n, pg);\n        v_nums = svld1(pg, data + n);\n        n += svcntp_b8(pg, mask);\n    }\n\n    count = svaddv_s32(pg, svdup_s32(0), svcntp_b8(pg, mask));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t count = 0;\n    svbool_t pg = svptrue_b64();\n\n    // Create the vector a\n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_x(svsub_x(svmul_x(indices, indices), indices), svdup_u64(1));\n\n    // Iterate over all possible triples (i, j, k) with i < j < k\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            for (uint64_t k = j + 1; k < n; ++k) {\n                svuint64_t sum = svadd_x(svadd_x(svdup_u64(a[i]), svdup_u64(a[j])), svdup_u64(a[k]));\n                svbool_t pg_mod3 = svcmpeq_n_u64(svptrue_b64(), svmod_n_u64(sum, 3), 0);\n                count += svcntp_b64(pg_mod3, pg);\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t count = 0;\n    uint64_t i, j, k;\n\n    // Create the vector a\n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_x(svsub_x(svmul_x(indices, indices), indices), svdup_u64(1));\n\n    // Iterate over all possible triples (i, j, k) with i < j < k\n    for (i = 0; i < n - 2; ++i) {\n        for (j = i + 1; j < n - 1; ++j) {\n            for (k = j + 1; k < n; ++k) {\n                // Load the values of a[i], a[j], and a[k]\n                svuint64_t ai = svld1_u64(svptrue_b64(), &a[i]);\n                svuint64_t aj = svld1_u64(svptrue_b64(), &a[j]);\n                svuint64_t ak = svld1_u64(svptrue_b64(), &a[k]);\n\n                // Compute the sum a[i] + a[j] + a[k]\n                svuint64_t sum = svadd_x(svadd_x(ai, aj), ak);\n\n                // Check if the sum is a multiple of 3\n                if (svcmpge_u64(svptrue_b64(), svmod_x(sum, svdup_u64(3)), svdup_u64(0))) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t count = 0;\n    uint64_t i, j, k;\n\n    // Create the vector a using SVE intrinsics\n    svbool_t pg = svptrue_b64();\n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_x(svsub_x(svmul_x(indices, indices), indices), svdup_u64(1));\n\n    // Iterate over all possible triples (i, j, k) with i < j < k\n    for (i = 0; i < n - 2; ++i) {\n        for (j = i + 1; j < n - 1; ++j) {\n            for (k = j + 1; k < n; ++k) {\n                // Load the values of a[i], a[j], and a[k]\n                uint64_t ai = svget_lane_u64(a, i);\n                uint64_t aj = svget_lane_u64(a, j);\n                uint64_t ak = svget_lane_u64(a, k);\n\n                // Check if the sum is a multiple of 3\n                if ((ai + aj + ak) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t count = 0;\n    uint64_t i, j, k;\n\n    svbool_t pg = svptrue_b64();\n\n    for (i = 1; i <= n - 2; ++i) {\n        uint64_t ai = i * i - i + 1;\n        for (j = i + 1; j <= n - 1; ++j) {\n            uint64_t aj = j * j - j + 1;\n            for (k = j + 1; k <= n; ++k) {\n                uint64_t ak = k * k - k + 1;\n\n                svuint64_t vec_ai = svdup_n_u64(ai);\n                svuint64_t vec_aj = svdup_n_u64(aj);\n                svuint64_t vec_ak = svdup_n_u64(ak);\n\n                svuint64_t sum = svadd_x(pg, svadd_x(pg, vec_ai, vec_aj), vec_ak);\n                svbool_t is_multiple_of_3 = svcmpeq_n(pg, svmod_n_u64(pg, sum, 3), 0);\n\n                if (svcntp_b64(pg, is_multiple_of_3)) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t count = 0;\n    uint64_t i, j, k;\n\n    // Create the vector a\n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_x(svadd_x(svmul_x(indices, indices), svsub_x(indices, svdup_s64(1))), svdup_s64(1));\n\n    // Iterate over all possible triples (i, j, k) with i < j < k\n    for (i = 0; i < n - 2; ++i) {\n        for (j = i + 1; j < n - 1; ++j) {\n            for (k = j + 1; k < n; ++k) {\n                svuint64_t sum = svadd_x(svadd_x(svdup_s64(a[i]), svdup_s64(a[j])), svdup_s64(a[k]));\n                if (svcmpge_u64(svptrue_b64(), svmod_x(sum, svdup_s64(3)), svdup_s64(0))) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svptrue_b32();\n    svint32_t n_vec = svdup_s32(n);\n    svint32_t two_vec = svdup_s32(2);\n    svint32_t sqrt_n = svsqrt_s32(pg, n_vec);\n    svint32_t i_vec = svindex_s32(2, 1);\n    svbool_t is_prime = svcmpge(pg, svdup_s32(2), sqrt_n);\n\n    while (svptest_any(svptrue_b32(), is_prime)) {\n        svbool_t divisible = svcmpne(pg, svrem_s32(pg, n_vec, i_vec), svdup_s32(0));\n        is_prime = svand_b_z(pg, is_prime, divisible);\n        i_vec = svadd_s32_x(pg, i_vec, 1);\n        is_prime = svcmpge(pg, i_vec, sqrt_n);\n    }\n\n    return svptest_any(svptrue_b32(), is_prime) ? x : y;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svptrue_b32();\n    svint32_t n_vec = svdup_s32(n);\n    svint32_t x_vec = svdup_s32(x);\n    svint32_t y_vec = svdup_s32(y);\n\n    svint32_t one_vec = svdup_s32(1);\n    svint32_t two_vec = svdup_s32(2);\n    svint32_t n_minus_one_vec = svsub_s32(n_vec, one_vec);\n\n    svint32_t i_vec = svdup_s32(2);\n    svbool_t pg_prime = svcmpge(pg, n_vec, two_vec);\n\n    while (svptest_any(s32, pg_prime)) {\n        svint32_t mod_vec = svmod_s32(pg_prime, n_vec, i_vec);\n        pg_prime = svcmpne(pg_prime, mod_vec, svdup_s32(0));\n        i_vec = svadd_s32(pg_prime, i_vec, one_vec);\n        pg_prime = svcmpgt(pg_prime, n_minus_one_vec, i_vec);\n    }\n\n    svbool_t pg_is_prime = svcmpne(pg, n_vec, two_vec) & pg_prime;\n    svint32_t result_vec = svsel_s32(pg_is_prime, x_vec, y_vec);\n\n    return svget_lane_s32(result_vec, 0);\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svptrue_b32();\n    svint32_t n_vec = svdup_s32(n);\n    svint32_t x_vec = svdup_s32(x);\n    svint32_t y_vec = svdup_s32(y);\n\n    svint32_t one_vec = svdup_s32(1);\n    svint32_t two_vec = svdup_s32(2);\n    svint32_t n_minus_one_vec = svsub_s32(n_vec, one_vec);\n\n    svint32_t i_vec = svindex_s32(0, 1);\n    svint32_t range_vec = svadd_s32(i_vec, two_vec);\n\n    svbool_t is_prime = svcmpge_s32(pg, n_vec, two_vec);\n    svbool_t is_divisible = svcmpge_s32(pg, svptrue_b32(), svptrue_b32());\n\n    while (svcntp_b32(pg, is_divisible)) {\n        svint32_t remainder_vec = svdiv_s32(n_vec, range_vec);\n        is_divisible = svcmpne_s32(pg, svmul_s32(remainder_vec, range_vec), n_vec);\n        range_vec = svadd_s32(range_vec, one_vec);\n        is_prime = svand_b32_z(pg, is_prime, is_divisible);\n    }\n\n    svint32_t result_vec = svsel_s32(is_prime, x_vec, y_vec);\n    return svget_s32(result_vec, 0);\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svptrue_b32();\n    svint32_t n_vec = svdup_s32(n);\n    svint32_t two_vec = svdup_s32(2);\n    svint32_t sqrt_n_vec = svsqrt_s32(pg, n_vec);\n    svint32_t i_vec = svindex_s32(2, 1);\n\n    svbool_t is_prime = svcmpge(pg, sqrt_n_vec, i_vec);\n    svbool_t is_divisible = svptrue_b32();\n\n    while (svptest_any(pg, is_prime)) {\n        svint32_t mod_vec = svmod_s32(pg, n_vec, i_vec);\n        is_divisible = svcmpeq(pg, mod_vec, svdup_s32(0));\n        if (svptest_any(pg, is_divisible)) {\n            return y;\n        }\n        i_vec = svadd_s32(pg, i_vec, svdup_s32(1));\n        is_prime = svcmpge(pg, sqrt_n_vec, i_vec);\n    }\n\n    return x;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svptrue_b32();\n    svint32_t n_vec = svdup_s32(n);\n    svint32_t one_vec = svdup_s32(1);\n    svint32_t two_vec = svdup_s32(2);\n    svint32_t i_vec = svindex_s32(0, 1);\n\n    svbool_t is_prime = svcmpge(svptrue_b32(), n_vec, two_vec);\n\n    for (int i = 2; i * i <= n; ++i) {\n        svint32_t i_squared_vec = svmul_s32(svdup_s32(i), svdup_s32(i));\n        svbool_t is_divisible = svcmpne(svptrue_b32(), svrem_s32(n_vec, svdup_s32(i)), one_vec);\n        is_prime = svand_b_z(pg, is_prime, is_divisible);\n    }\n\n    return svaddv_s32(svptrue_b32(), svsel_s32(is_prime, svdup_s32(x), svdup_s32(y)));\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    if (lst.empty()) {\n        return 0;\n    }\n\n    const float* data = lst.data();\n    size_t n = lst.size();\n\n    uint64_t sum = 0;\n    size_t i = 0;\n\n    while (i < n) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1(pg, data + i);\n\n        svbool_t pg_odd = svcmplt_n(pg, vec, 0.0f);\n        pg_odd = svand(pg_odd, svcmplt_n(pg, svabs_f32_z(pg, vec), svcvt_f32_n(pg, n)));\n\n        svfloat32_t vec_squared = svmul_z(pg, vec, vec);\n        svfloat32_t vec_squared_odd = svmul_z(pg_odd, vec_squared, svdup_f32_z(pg_odd, 2.0f));\n\n        sum += svaddv(pg_odd, vec_squared_odd);\n\n        i += svcntw();\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    if (lst.empty()) {\n        return 0;\n    }\n\n    const float* data = lst.data();\n    size_t size = lst.size();\n\n    uint64_t sum = 0;\n    size_t i = 0;\n\n    while (i < size) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vec = svld1(pg, data + i);\n\n        svbool_t is_positive = svcmpge(pg, vec, svdup_f32(0.0f));\n        svbool_t is_integer = svcmpeq(pg, svcvt_f32_u32(svcvt_u32_f32(vec)), vec);\n        svbool_t is_odd = svcmpeq(pg, svand_n_u32(svcvt_u32_f32(vec), 1), svdup_u32(1));\n\n        svbool_t valid = svand_n(pg, svand_n(is_positive, is_integer), is_odd);\n\n        svfloat32_t squares = svmul_n_f32(vec, vec);\n        svfloat32_t valid_squares = svsel_f32(valid, squares, svdup_f32(0.0f));\n\n        sum += svaddv(valid_squares);\n\n        i += svcntw();\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    if (lst.empty()) {\n        return 0;\n    }\n\n    const float* data = lst.data();\n    size_t size = lst.size();\n\n    uint64_t sum = 0;\n    size_t i = 0;\n\n    while (i < size) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vec = svld1(pg, data + i);\n\n        svbool_t is_positive = svcmplt_n_f32(pg, vec, 0.0f);\n        svbool_t is_integer = svcmpeq_n_f32(pg, vec, svrintn_f32(pg, vec));\n        svbool_t is_odd = svcmpeq_n_f32(pg, svfmod_n_f32(pg, vec, 2.0f), 1.0f);\n\n        svbool_t valid = svand_z(pg, svand_z(pg, is_positive, is_integer), is_odd);\n\n        svfloat32_t squares = svmul_z(pg, vec, vec);\n        svfloat32_t valid_squares = svsel_f32(valid, squares, svdup_n_f32(0.0f));\n\n        sum += svaddv_f32(valid, valid_squares);\n\n        i += svcntw();\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    size_t n = lst.size();\n    if (n == 0) return 0;\n\n    const float* data = lst.data();\n    size_t i = 0;\n\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svfloat32_t vec = svld1_f32(svptrue_b32(), data + i);\n        svbool_t_t pg = svcmpge_f32(svcntw(), vec, svdup_f32(0.0f));\n        svbool_t_t pg_odd = svcmpne_f32(svcntw(), svcvt_f32_s32(svcvt_s32_f32(vec)), vec);\n        svbool_t_t pg_valid = svand_b_z(pg, pg_odd);\n\n        svfloat32_t squares = svmul_f32_z(pg_valid, vec, vec);\n        sum += svaddv_f32(pg_valid, squares);\n    }\n\n    for (; i < n; ++i) {\n        if (lst[i] > 0 && fmod(lst[i], 2.0f) != 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    if (lst.empty()) {\n        return 0;\n    }\n\n    const float* data = lst.data();\n    size_t n = lst.size();\n\n    uint64_t sum = 0;\n    size_t i = 0;\n\n    while (i < n) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svfloat32_t vec = svld1_f32(pg, data + i);\n\n        svbool_t is_odd = svand_z(pg, svcmpeq_z(svptrue_b32(), svcvt_f32_u32(svand_z(svcvt_u32_f32(vec), svdup_n_u32(1))), svdup_n_f32(1.0f)), svcmpge_z(svcvt_f32_u32(vec), svdup_n_f32(0.0f)));\n\n        svfloat32_t odd_squares = svmul_z(is_odd, vec, vec);\n\n        sum += svaddv_f32(is_odd, odd_squares);\n\n        i += svcntw();\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```c++\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        size_t vl = svcntw();\n        svint32_t v_game = svld1(svptrue_b32(), game.data() + i);\n        svint32_t v_guess = svld1(svptrue_b32(), guess.data() + i);\n\n        svbool_t pg = svcmpeq(v_game, v_guess);\n        svint32_t v_diff = svabd(v_game, v_guess);\n        svint32_t v_result = svsel(pg, svdup_s32(0), v_diff);\n\n        svst1(svptrue_b32(), result.data() + i, v_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v_game = svld1(pg, &game[i]);\n        svint32_t v_guess = svld1(pg, &guess[i]);\n\n        svint32_t diff = svabs_s32_x(pg, svsub_s32_x(pg, v_game, v_guess));\n        svint32_t correct = sveor_s32_x(pg, svcmpeq_s32_x(pg, v_game, v_guess), svdup_s32(0));\n\n        svint32_t v_result = svsel_s32(correct, svdup_s32(0), diff);\n        svst1(pg, &result[i], v_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v_game = svld1(pg, &game[i]);\n        svint32_t v_guess = svld1(pg, &guess[i]);\n\n        svint32_t diff = svabs_s32_x(pg, svsub_s32_x(pg, v_game, v_guess));\n        svint32_t correct = svcmpne_s32(pg, v_game, v_guess);\n\n        svint32_t v_result = svmul_s32_x(pg, diff, correct);\n\n        svst1(pg, &result[i], v_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v_game = svld1(pg, &game[i]);\n        svint32_t v_guess = svld1(pg, &guess[i]);\n        svint32_t v_diff = svabs_s32_x(pg, svsub_s32_x(pg, v_game, v_guess));\n        svint32_t v_result = svsel_s32(svcmpne_s32(pg, v_game, v_guess), v_diff, svdup_s32(0));\n        svst1(pg, &result[i], v_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v_game = svld1(pg, &game[i]);\n        svint32_t v_guess = svld1(pg, &guess[i]);\n\n        svint32_t diff = svabs_s32_x(pg, svsub_s32_x(pg, v_game, v_guess));\n        svint32_t correct = svcmpne_s32(pg, v_game, v_guess);\n\n        svint32_t v_result = svmul_s32_x(pg, diff, correct);\n\n        svst1(pg, &result[i], v_result);\n    }\n\n    return result;\n}\n```"}

{"task_id": "SimdBench_0_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vuint8mf8_t mask_bytes = vle8_v_u8mf8((const uint8_t*)mask, vl);\n        vbool64_t mask_vec = vmsne_vx_u8mf8_b64(mask_bytes, 0, vl);\n        vint64m1_t data = vle64_v_i64m1(src, vl);\n        vse64_v_i64m1_m(mask_vec, dst, data, vl);\n        src += vl;\n        dst += vl;\n        mask += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    for (size_t pos = 0; pos < length; pos += vl) {\n        vl = __riscv_vsetvl_e64m1(length - pos);\n        vuint8mf8_t mask_bytes = __riscv_vle8_v_u8mf8((const uint8_t*)(mask + pos), vl);\n        vbool64_t mask_vec = __riscv_vmsne_vx_u8mf8_b64(mask_bytes, 0, vl);\n        vint64m1_t src_vec = __riscv_vle64_v_i64m1(src + pos, vl);\n        vint64m1_t dst_vec = __riscv_vle64_v_i64m1(dst + pos, vl);\n        vint64m1_t res_vec = __riscv_vmerge_vvm_i64m1(mask_vec, src_vec, dst_vec, vl);\n        __riscv_vse64_v_i64m1(dst + pos, res_vec, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    while (length > 0) {\n        vl = vsetvl_e64m1(length);\n        size_t packed_size = (vl + 7) / 8;\n        uint8_t packed_mask[packed_size];\n        for (size_t i = 0; i < packed_size; i++) {\n            packed_mask[i] = 0;\n        }\n        for (size_t i = 0; i < vl; i++) {\n            if (mask[i]) {\n                size_t byte_idx = i / 8;\n                size_t bit_idx = i % 8;\n                packed_mask[byte_idx] |= (1 << bit_idx);\n            }\n        }\n        vbool64_t mask_vec = vlm_v_b64(packed_mask, vl);\n        vint64m1_t src_vec = vle64_v_i64m1(src, vl);\n        vse64_v_i64m1_m(mask_vec, dst, src_vec, vl);\n        src += vl;\n        dst += vl;\n        mask += vl;\n        length -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = vsetvl_e64m1(avl);\n        vuint8mf8_t mask_bytes = vle8_v_u8mf8((const uint8_t*)mask, vl);\n        vbool64_t mask_vec = vmsne_vx_u8mf8_b64(mask_bytes, 0, vl);\n        vint64m1_t src_vec = vle64_v_i64m1(src, vl);\n        vse64_v_i64m1_m(mask_vec, dst, src_vec, vl);\n        src += vl;\n        dst += vl;\n        mask += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; ) {\n        vl = vsetvl_e64m1(length - i);\n        vuint8m1_t mask_byte_vec = vle8_v_u8m1((const uint8_t*)(mask + i), vl);\n        vbool8_t mask8 = vmsne_vx_u8m1_b8(mask_byte_vec, 0, vl);\n        vbool64_t mask64 = *(vbool64_t*)&mask8;\n        vint64m1_t src_vec = vle64_v_i64m1(src + i, vl);\n        vse64_v_i64m1_m(mask64, dst + i, src_vec, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, vx, v_tmp1, v_tmp2, v_product, vx_plus_product, v_result;\n    \n    while (length > 0) {\n        vl = __riscv_vsetvl_e32m1(length);\n        v_src = __riscv_vle32_v_i32m1(src, vl);\n        vx = __riscv_vmul_vx_i32m1(v_src, scale, vl);\n        v_tmp1 = __riscv_vsra_vx_i32m1(vx, 3, vl);\n        v_tmp2 = __riscv_vsll_vx_i32m1(vx, 3, vl);\n        v_product = __riscv_vmul_vv_i32m1(v_tmp1, v_tmp2, vl);\n        vx_plus_product = __riscv_vadd_vv_i32m1(vx, v_product, vl);\n        v_result = __riscv_vdiv_vx_i32m1(vx_plus_product, 7, vl);\n        __riscv_vse32_v_i32m1(dst, v_result, vl);\n        \n        src += vl;\n        dst += vl;\n        length -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t avl = length;\n    size_t vl;\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e32m8(avl);\n        vint32m8_t v_src = __riscv_vle32_v_i32m8(src, vl);\n        vint32m8_t vx = __riscv_vmul_vx_i32m8(v_src, scale, vl);\n        vint32m8_t vtmp1 = __riscv_vsra_vx_i32m8(vx, 3, vl);\n        vint32m8_t vtmp2 = __riscv_vsll_vx_i32m8(vx, 3, vl);\n        vint32m8_t vprod = __riscv_vmul_vv_i32m8(vtmp1, vtmp2, vl);\n        vint32m8_t vsum = __riscv_vadd_vv_i32m8(vx, vprod, vl);\n        int32_t temp[vl];\n        __riscv_vse32_v_i32m8(temp, vsum, vl);\n        for (size_t i = 0; i < vl; i++) {\n            temp[i] = temp[i] / 7;\n        }\n        vsum = __riscv_vle32_v_i32m8(temp, vl);\n        __riscv_vse32_v_i32m8(dst, vsum, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t v_src = __riscv_vle32_v_i32m1(src, vl);\n        vint32m1_t v_mul = __riscv_vmul_vx_i32m1(v_src, scale, vl);\n        vint32m1_t v_tmp1 = __riscv_vsra_vx_i32m1(v_mul, 3, vl);\n        vint32m1_t v_tmp2 = __riscv_vsll_vx_i32m1(v_mul, 3, vl);\n        vint32m1_t v_prod = __riscv_vmul_vv_i32m1(v_tmp1, v_tmp2, vl);\n        vint32m1_t v_sum = __riscv_vadd_vv_i32m1(v_mul, v_prod, vl);\n        vint32m1_t v_res = __riscv_vdiv_vx_i32m1(v_sum, 7, vl);\n        __riscv_vse32_v_i32m1(dst, v_res, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t v_src = vle32_v_i32m1(src, vl);\n        vint32m1_t v_scale = vmv_v_x_i32m1(scale, vl);\n        vint32m1_t v_prod = vmul_vv_i32m1(v_src, v_scale, vl);\n        vint32m1_t v_tmp1 = vsra_vx_i32m1(v_prod, 3, vl);\n        vint32m1_t v_tmp2 = vsll_vx_i32m1(v_prod, 3, vl);\n        vint32m1_t v_tmp3 = vmul_vv_i32m1(v_tmp1, v_tmp2, vl);\n        vint32m1_t v_sum = vadd_vv_i32m1(v_prod, v_tmp3, vl);\n        int temp[vl];\n        vse32_v_i32m1(temp, v_sum, vl);\n        for (size_t i = 0; i < vl; i++) {\n            temp[i] = temp[i] / 7;\n        }\n        vint32m1_t v_result = vle32_v_i32m1(temp, vl);\n        vse32_v_i32m1(dst, v_result, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl;\n    for (size_t n = 0; n < length; n += vl) {\n        vl = vsetvl_e32m1(length - n);\n        vint32m1_t v_src = vle32_v_i32m1(src + n, vl);\n        vint32m1_t v_mul = vmul_vx_i32m1(v_src, scale, vl);\n        vint32m1_t v_tmp1 = vsra_vx_i32m1(v_mul, 3, vl);\n        vint32m1_t v_tmp2 = vsll_vx_i32m1(v_mul, 3, vl);\n        vint32m1_t v_prod = vmul_vv_i32m1(v_tmp1, v_tmp2, vl);\n        vint32m1_t v_sum = vadd_vv_i32m1(v_mul, v_prod, vl);\n        vint32m1_t v_result = vdiv_vx_i32m1(v_sum, 7, vl);\n        vse32_v_i32m1(dst + n, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    if (rows == 0) return;\n    ptrdiff_t byte_stride = cols * sizeof(double);\n    size_t vl;\n    for (size_t r = 0; r < rows; ) {\n        vl = vsetvl_e64m1(rows - r);\n        const double *src_start = src + r * cols + stride;\n        vfloat64m1_t data = vlsse_v_f64m1(src_start, byte_stride, vl);\n        vse_v_f64m1(dst + r, data, vl);\n        r += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t vl;\n    ptrdiff_t bstride = cols * sizeof(double);\n    \n    for (size_t r = 0; r < rows; ) {\n        vl = vsetvl_e64m1(rows - r);\n        const double *base = src + r * cols + stride;\n        vfloat64m1_t vec = vlse64_v_f64m1(base, bstride, vl);\n        vse64_v_f64m1(dst + r, vec, vl);\n        r += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    const double *base = src + stride;\n    size_t avl = rows;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m1(avl);\n        vfloat64m1_t vec = __riscv_vlse64_v_f64m1(base, cols * sizeof(double), vl);\n        __riscv_vse64_v_f64m1(dst, vec, vl);\n        dst += vl;\n        base += vl * cols;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t avl = rows;\n    size_t bstride = cols * sizeof(double);\n    size_t current_row = 0;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m1(avl);\n        const double *base = src + current_row * cols + stride;\n        vfloat64m1_t vec = __riscv_vlse64_v_f64m1(base, bstride, vl);\n        __riscv_vse64_v_f64m1(dst + current_row, vec, vl);\n        current_row += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t byte_stride = cols * sizeof(double);\n    ptrdiff_t bstride = (ptrdiff_t)byte_stride;\n    const double *base = src + stride;\n    double *d = dst;\n    size_t n = rows;\n\n    while (n > 0) {\n        size_t vl = vsetvl_e64m1(n);\n        vfloat64m1_t vec = vlse64_v_f64m1(base, bstride, vl);\n        vse64_v_f64m1(d, vec, vl);\n        base += vl * cols;\n        d += vl;\n        n -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    const uint32_t *uindices = (const uint32_t *)indices;\n    size_t vl;\n    \n    for (size_t i = 0; i < length; ) {\n        vl = vsetvl_e32m1(length - i);\n        vuint32m1_t vidx = vle32_v_u32m1(uindices + i, vl);\n        vfloat32m1_t res = vluxei32_v_f32m1(src, vidx, vl);\n        vse32_v_f32m1(dst + i, res, vl);\n        i += vl;\n    }\n    \n    for (size_t i = 0; i < length; ) {\n        vl = vsetvl_e32m1(length - i);\n        vuint32m1_t vidx = vle32_v_u32m1(uindices + i, vl);\n        vfloat32m1_t vals = vle32_v_f32m1(src + i, vl);\n        vsuxei32_v_f32m1(dst, vidx, vals, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    const int *indices_ptr = indices;\n    float *dst_ptr = dst;\n\n    for (size_t n = length; n > 0; n -= vl) {\n        vl = vsetvl_e32m1(n);\n        vint32m1_t idx_vec = vle32_v_i32m1(indices_ptr, vl);\n        vfloat32m1_t gathered = vloxei32_v_f32m1(src, idx_vec, vl);\n        vse32_v_f32m1(dst_ptr, gathered, vl);\n        indices_ptr += vl;\n        dst_ptr += vl;\n    }\n\n    indices_ptr = indices;\n    const float *src_ptr = src;\n\n    for (size_t n = length; n > 0; n -= vl) {\n        vl = vsetvl_e32m1(n);\n        vint32m1_t idx_vec = vle32_v_i32m1(indices_ptr, vl);\n        vfloat32m1_t val_vec = vle32_v_f32m1(src_ptr, vl);\n        vsoxei32_v_f32m1(dst, idx_vec, val_vec, vl);\n        indices_ptr += vl;\n        src_ptr += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; ) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        vint32m1_t idx_vec = __riscv_vle32_v_i32m1(indices + i, vl);\n        vint32m1_t byte_offsets = __riscv_vsll_vx_i32m1(idx_vec, 2, vl);\n        vfloat32m1_t gathered = __riscv_vluxei32_v_f32m1(src, byte_offsets, vl);\n        __riscv_vse32_v_f32m1(dst + i, gathered, vl);\n        i += vl;\n    }\n    for (size_t i = 0; i < length; ) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        vint32m1_t idx_vec = __riscv_vle32_v_i32m1(indices + i, vl);\n        vint32m1_t byte_offsets = __riscv_vsll_vx_i32m1(idx_vec, 2, vl);\n        vfloat32m1_t src_vals = __riscv_vle32_v_f32m1(src + i, vl);\n        __riscv_vsuxei32_v_f32m1(dst, byte_offsets, src_vals, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    const int *idx_ptr = indices;\n    float *d_ptr = dst;\n    const float *s_ptr = src;\n    size_t n = length;\n\n    // Gather loop: dst[i] = src[indices[i]]\n    while (n > 0) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vint32m1_t v_idx = __riscv_vle32_v_i32m1(idx_ptr, vl);\n        vfloat32m1_t v_val = __riscv_vloxei32_v_f32m1(s_ptr, v_idx, vl);\n        __riscv_vse32_v_f32m1(d_ptr, v_val, vl);\n        idx_ptr += vl;\n        d_ptr += vl;\n        n -= vl;\n    }\n\n    // Reset pointers for scatter operation\n    idx_ptr = indices;\n    s_ptr = src;\n    n = length;\n\n    // Scatter loop: dst[indices[i]] = src[i]\n    while (n > 0) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vint32m1_t v_idx = __riscv_vle32_v_i32m1(idx_ptr, vl);\n        vfloat32m1_t v_val = __riscv_vle32_v_f32m1(s_ptr, vl);\n        __riscv_vsoxei32_v_f32m1(dst, v_idx, v_val, vl);\n        s_ptr += vl;\n        idx_ptr += vl;\n        n -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; ) {\n        vl = __riscv_vsetvl_e32m8(length - i);\n        vint32m8_t v_idx = __riscv_vle32_v_i32m8(indices + i, vl);\n        vint32m8_t v_off = __riscv_vsll_vx_i32m8(v_idx, 2, vl);\n        vfloat32m8_t v_val = __riscv_vloxei32_v_f32m8(src, v_off, vl);\n        __riscv_vse32_v_f32m8(dst + i, v_val, vl);\n        i += vl;\n    }\n    for (size_t i = 0; i < length; ) {\n        vl = __riscv_vsetvl_e32m8(length - i);\n        vint32m8_t v_idx = __riscv_vle32_v_i32m8(indices + i, vl);\n        vint32m8_t v_off = __riscv_vsll_vx_i32m8(v_idx, 2, vl);\n        vfloat32m8_t v_val = __riscv_vle32_v_f32m8(src + i, vl);\n        __riscv_vsoxei32_v_f32m8(dst, v_off, v_val, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t left = start;\n    uint64_t right = end;\n    size_t vl;\n\n    while (left < right) {\n        uint64_t remaining = right - left + 1;\n        vl = __riscv_vsetvl_e16m1(remaining / 2);\n        if (vl == 0) break;\n\n        vint16m1_t va = __riscv_vle16_v_i16m1(arr + left, vl);\n        vint16m1_t vb = __riscv_vle16_v_i16m1(arr + right - vl + 1, vl);\n\n        vuint16m1_t idx = __riscv_vid_v_u16m1(vl);\n        vuint16m1_t rev_idx = __riscv_vrsub_vx_u16m1(idx, vl - 1, vl);\n\n        vint16m1_t va_rev = __riscv_vrgather_vv_i16m1(va, rev_idx, vl);\n        vint16m1_t vb_rev = __riscv_vrgather_vv_i16m1(vb, rev_idx, vl);\n\n        __riscv_vse16_v_i16m1(arr + left, vb_rev, vl);\n        __riscv_vse16_v_i16m1(arr + right - vl + 1, va_rev, vl);\n\n        left += vl;\n        right -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t left_index = start;\n    uint64_t right_index = end;\n    size_t vl;\n\n    while (left_index < right_index) {\n        uint64_t n_remaining = right_index - left_index + 1;\n        if (n_remaining < 2) \n            break;\n        \n        vl = __riscv_vsetvl_e16m1(n_remaining / 2);\n        \n        vint16m1_t v1 = __riscv_vle16_v_i16m1(arr + left_index, vl);\n        vint16m1_t v2 = __riscv_vle16_v_i16m1(arr + right_index - vl + 1, vl);\n        \n        vuint16m1_t rev_idx = __riscv_vid_v_u16m1(vl);\n        rev_idx = __riscv_vrsub_vx_u16m1(rev_idx, vl - 1, vl);\n        \n        vint16m1_t v1_rev = __riscv_vrgatherei16_vv_i16m1(v1, rev_idx, vl);\n        vint16m1_t v2_rev = __riscv_vrgatherei16_vv_i16m1(v2, rev_idx, vl);\n        \n        __riscv_vse16_v_i16m1(arr + left_index, v2_rev, vl);\n        __riscv_vse16_v_i16m1(arr + right_index - vl + 1, v1_rev, vl);\n        \n        left_index += vl;\n        right_index -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t n = end - start + 1;\n    uint64_t pairs = n / 2;\n    size_t vl;\n    for (uint64_t i = 0; i < pairs; ) {\n        vl = __riscv_vsetvl_e16m1(pairs - i);\n        vint16m1_t left_vec = __riscv_vle16_v_i16m1(arr + start + i, vl);\n        vint16m1_t right_vec = __riscv_vle16_v_i16m1(arr + end - i - vl + 1, vl);\n        vuint16m1_t vid_vec = __riscv_vid_v_u16m1(vl);\n        vuint16m1_t rev_index = __riscv_vrsub_vx_u16m1(vid_vec, vl - 1, vl);\n        vint16m1_t rev_left = __riscv_vrgatherei16_vv_i16m1(left_vec, rev_index, vl);\n        vint16m1_t rev_right = __riscv_vrgatherei16_vv_i16m1(right_vec, rev_index, vl);\n        __riscv_vse16_v_i16m1(arr + start + i, rev_right, vl);\n        __riscv_vse16_v_i16m1(arr + end - i - vl + 1, rev_left, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    if (start >= end) return;\n    uint64_t left_ptr = start;\n    uint64_t right_ptr = end;\n\n    while (left_ptr < right_ptr) {\n        uint64_t remaining = right_ptr - left_ptr + 1;\n        if (remaining < 2) break;\n        \n        size_t vl = __riscv_vsetvl_e16m1(remaining / 2);\n        \n        vint16m1_t v1 = __riscv_vle16_v_i16m1(arr + left_ptr, vl);\n        vint16m1_t v2 = __riscv_vle16_v_i16m1(arr + right_ptr - vl + 1, vl);\n        \n        vuint16m1_t v_index = __riscv_vid_v_u16m1(vl);\n        vuint16m1_t v_rev_index = __riscv_vrsub_vx_u16m1(v_index, vl - 1, vl);\n        \n        vint16m1_t v1_rev = __riscv_vrgather_vv_i16m1(v1, v_rev_index, vl);\n        vint16m1_t v2_rev = __riscv_vrgather_vv_i16m1(v2, v_rev_index, vl);\n        \n        __riscv_vse16_v_i16m1(arr + left_ptr, v2_rev, vl);\n        __riscv_vse16_v_i16m1(arr + right_ptr - vl + 1, v1_rev, vl);\n        \n        left_ptr += vl;\n        right_ptr -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t left = start;\n    uint64_t right = end;\n\n    while (left < right) {\n        size_t vl = __riscv_vsetvl_e16m1((right - left + 1) / 2);\n\n        vint16m1_t left_vec = __riscv_vle16_v_i16m1(arr + left, vl);\n        vint16m1_t right_vec = __riscv_vlse16_v_i16m1(arr + right, -2, vl);\n\n        __riscv_vse16_v_i16m1(arr + left, right_vec, vl);\n        __riscv_vsse16_v_i16m1(arr + right, -2, left_vec, vl);\n\n        left += vl;\n        right -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; i++) {\n        const uint8_t *src_row = tensor + i * dim2 * dim3 + slice_idx;\n        uint8_t *dst_row = slice + i * dim2;\n        size_t j = 0;\n        size_t n = dim2;\n        ptrdiff_t stride = dim3;\n\n        while (j < n) {\n            size_t vl = __riscv_vsetvl_e8m1(n - j);\n            vuint8m1_t data = __riscv_vlse8_v_u8m1(src_row + j * dim3, stride, vl);\n            __riscv_vse8_v_u8m1(dst_row + j, data, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; i++) {\n        const uint8_t *src_i = tensor + i * dim2 * dim3 + slice_idx;\n        uint8_t *dst_i = slice + i * dim2;\n        size_t j = 0;\n        while (j < dim2) {\n            size_t vl = vsetvl_e8m1(dim2 - j);\n            vuint8m1_t data = vlse8_v_u8m1(src_i + j * dim3, dim3, vl);\n            vse8_v_u8m1(dst_i + j, data, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; i++) {\n        const uint8_t *row_base = tensor + i * dim2 * dim3 + slice_idx;\n        uint8_t *out_ptr = slice + i * dim2;\n        size_t j = 0;\n        size_t vl;\n        while (j < dim2) {\n            vl = vsetvl_e8m1(dim2 - j);\n            vuint8m1_t data = vlse8_v_u8m1(row_base + j * dim3, dim3, vl);\n            vse8_v_u8m1(out_ptr + j, data, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t row_stride = dim2 * dim3;\n    for (size_t i = 0; i < dim1; i++) {\n        const uint8_t *row_start = tensor + i * row_stride + slice_idx;\n        uint8_t *output_row = slice + i * dim2;\n        size_t j = 0;\n        while (j < dim2) {\n            size_t vl = __riscv_vsetvl_e8m1(dim2 - j);\n            vuint8m1_t data = __riscv_vlse8_v_u8m1(row_start + j * dim3, dim3, vl);\n            __riscv_vse8_v_u8m1(output_row + j, data, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t row_stride = dim2 * dim3;\n    const uint8_t *src_ptr;\n    uint8_t *dst_ptr;\n    \n    for (size_t i = 0; i < dim1; i++) {\n        src_ptr = tensor + i * row_stride + slice_idx;\n        dst_ptr = slice + i * dim2;\n        size_t avl = dim2;\n        \n        while (avl > 0) {\n            size_t vl = vsetvl_e8m8(avl);\n            vuint8m8_t data = vlse8_v_u8m8(src_ptr, dim3, vl);\n            vse8_v_u8m8(dst_ptr, data, vl);\n            src_ptr += vl * dim3;\n            dst_ptr += vl;\n            avl -= vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        size_t block_i = (rows - i) < block_size ? (rows - i) : block_size;\n        for (size_t j = 0; j < cols; j += block_size) {\n            size_t block_j = (cols - j) < block_size ? (cols - j) : block_size;\n            for (size_t r = 0; r < block_i; r++) {\n                for (size_t c = 0; c < block_j; ) {\n                    size_t vl = vsetvl_e16m1(block_j - c);\n                    vint16m1_t data = vle16_v_i16m1(src + (i + r) * cols + j + c, vl);\n                    vssse16_v_i16m1(dst + (j + c) * rows + i + r, rows * sizeof(int16_t), data, vl);\n                    c += vl;\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        size_t i_block = (i + block_size <= rows) ? block_size : rows - i;\n        for (size_t j = 0; j < cols; j += block_size) {\n            size_t j_block = (j + block_size <= cols) ? block_size : cols - j;\n            for (size_t ii = 0; ii < i_block; ii++) {\n                size_t jj = 0;\n                while (jj < j_block) {\n                    size_t vl = vsetvl_e16m1(j_block - jj);\n                    vint16m1_t vec = vle16_v_i16m1(src + (i + ii) * cols + j + jj, vl);\n                    vsse16_v_i16m1(dst + (j + jj) * rows + i + ii, rows * sizeof(int16_t), vec, vl);\n                    jj += vl;\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i_block = 0; i_block < rows; i_block += block_size) {\n        size_t current_block_rows = (i_block + block_size) <= rows ? block_size : rows - i_block;\n        for (size_t j_block = 0; j_block < cols; j_block += block_size) {\n            size_t current_block_cols = (j_block + block_size) <= cols ? block_size : cols - j_block;\n            const int16_t *src_block = src + i_block * cols + j_block;\n            int16_t *dst_block = dst + j_block * rows + i_block;\n            \n            for (size_t j_local = 0; j_local < current_block_cols; j_local++) {\n                size_t i_local = 0;\n                while (i_local < current_block_rows) {\n                    size_t vl = vsetvl_e16m1(current_block_rows - i_local);\n                    const int16_t *src_ptr = src_block + i_local * cols + j_local;\n                    vint16m1_t data = __riscv_vlsse16_v_i16m1(src_ptr, cols * sizeof(int16_t), vl);\n                    int16_t *dst_ptr = dst_block + j_local * rows + i_local;\n                    __riscv_vse16_v_i16m1(dst_ptr, data, vl);\n                    i_local += vl;\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i_block = 0; i_block < rows; i_block += block_size) {\n        size_t block_rows = (i_block + block_size <= rows) ? block_size : rows - i_block;\n        for (size_t j_block = 0; j_block < cols; j_block += block_size) {\n            size_t block_cols = (j_block + block_size <= cols) ? block_size : cols - j_block;\n            for (size_t j_offset = 0; j_offset < block_cols; j_offset++) {\n                size_t i_offset = 0;\n                while (i_offset < block_rows) {\n                    size_t avl = block_rows - i_offset;\n                    size_t vl = vsetvl_e16m1(avl);\n                    const int16_t *src_addr = src + (i_block + i_offset) * cols + j_block + j_offset;\n                    vint16m1_t vec = vlse16_v_i16m1(src_addr, cols * sizeof(int16_t), vl);\n                    int16_t *dst_addr = dst + (j_block + j_offset) * rows + i_block + i_offset;\n                    vse16_v_i16m1(dst_addr, vec, vl);\n                    i_offset += vl;\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        size_t i_block = (i + block_size <= rows) ? block_size : rows - i;\n        for (size_t j = 0; j < cols; j += block_size) {\n            size_t j_block = (j + block_size <= cols) ? block_size : cols - j;\n            for (size_t r = 0; r < i_block; r++) {\n                const int16_t *src_row = src + (i + r) * cols + j;\n                int16_t *dst_col_base = dst + j * rows + i + r;\n                size_t c = 0;\n                size_t vl;\n                while (c < j_block) {\n                    vl = vsetvl_e16m1(j_block - c);\n                    vint16m1_t data = vle16_v_i16m1(src_row + c, vl);\n                    vsse16_v_i16m1(dst_col_base + c * rows, rows * sizeof(int16_t), data, vl);\n                    c += vl;\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    if (dim == 0) return 0.0f;\n    size_t stride = dim * dim + dim + 1;\n    float sum = 0.0f;\n    size_t index = 0;\n\n    while (index < dim) {\n        size_t vl = __riscv_vsetvl_e32m1(dim - index);\n        vfloat32m1_t vec = __riscv_vlse32_v_f32m1(array + index * stride, stride * sizeof(float), vl);\n        vfloat32m1_t vsum = __riscv_vfmv_v_f_f32m1(0, vl);\n        vsum = __riscv_vfredusum_vs_f32m1_f32m1(vec, vsum, vl);\n        sum += __riscv_vfmv_f_s_f32m1_f32(vsum);\n        index += vl;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t step_val = dim * dim + dim + 1;\n    size_t n = dim;\n    vfloat32m1_t v_red;\n    v_red = vfmv_s_f_f32m1(v_red, 0.0f);\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v_diag = vlse32_v_f32m1(array + i * step_val, step_val * sizeof(float), vl);\n        v_red = vfredusum_vs_f32m1_f32m1(v_red, v_diag, v_red, vl);\n        i += vl;\n    }\n    float sum = vfmv_f_s_f32m1_f32(v_red);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    if (dim == 0) {\n        return 0.0f;\n    }\n\n    size_t n = dim;\n    const float *ptr = array;\n    ptrdiff_t stride_bytes = (dim * dim + dim + 1) * sizeof(float);\n    vfloat32m1_t v_sum_all = vfmv_s_f_f32m1(v_sum_all, 0.0f, 1);\n\n    while (n > 0) {\n        size_t vl = vsetvl_e32m8(n);\n        vfloat32m8_t v_vec = vlse32_v_f32m8(ptr, stride_bytes, vl);\n        v_sum_all = vfredusum_vs_f32m8_f32m1(v_sum_all, v_vec, v_sum_all, vl);\n        ptr += vl * (dim * dim + dim + 1);\n        n -= vl;\n    }\n\n    return vfmv_f_s_f32m1_f32(v_sum_all);\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    if (dim == 0) {\n        return 0.0f;\n    }\n    size_t stride_bytes = (dim * dim + dim + 1) * sizeof(float);\n    size_t total_diagonal_elements = dim;\n    float sum = 0.0f;\n    size_t vl;\n    for (size_t i = 0; i < total_diagonal_elements; ) {\n        vl = __riscv_vsetvl_e32m1(total_diagonal_elements - i);\n        vfloat32m1_t vec = __riscv_vlse32_v_f32m1(array + i * (dim * dim + dim + 1), stride_bytes, vl);\n        vfloat32m1_t vzero = __riscv_vfmv_v_f_f32m1(0.0f, vl);\n        vfloat32m1_t vec_red = __riscv_vfredusum_vs_f32m1_f32m1(vec, vzero, vl);\n        sum += __riscv_vfmv_f_s_f32m1_f32(vec_red);\n        i += vl;\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    if (dim == 0) {\n        return 0.0f;\n    }\n    size_t step = dim * dim + dim + 1;\n    float sum = 0.0f;\n    size_t vl;\n    for (size_t i = 0; i < dim; ) {\n        vl = __riscv_vsetvl_e32m1(dim - i);\n        vfloat32m1_t v = __riscv_vlse32_v_f32m1(array + i * step, step * sizeof(float), vl);\n        vfloat32m1_t vd = __riscv_vfmv_v_f_f32m1(0.0f, vl);\n        vd = __riscv_vfredusum_vs_f32m1_f32m1(v, vd, vl);\n        sum += __riscv_vfmv_f_s_f32m1_f32(vd);\n        i += vl;\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t num_elements = rows * cols;\n    size_t vl;\n    for (size_t n = 0; n < num_elements; n += vl) {\n        vl = vsetvl_e64m1(num_elements - n);\n        vfloat64m1_t v_src = vle64_v_f64m1(src + n, vl);\n        vbool64_t mask = vfgt_vf_f64m1_b64(v_src, threshold, vl);\n        vfloat64m1_t v_scaled = vfmul_vf_f64m1(v_src, scale, vl);\n        vfloat64m1_t v_dst = vmerge_vvm_f64m1(mask, v_scaled, v_src, vl);\n        vse64_v_f64m1(dst + n, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t n = rows * cols;\n    size_t avl = n;\n    const double *src_ptr = src;\n    double *dst_ptr = dst;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m8(avl);\n        vfloat64m8_t v_src = vle64_v_f64m8(src_ptr, vl);\n        vbool8_t mask = vmfgt_vf_f64m8(v_src, threshold, vl);\n        vfloat64m8_t v_dst = vfmul_vf_f64m8_m(mask, v_src, v_src, scale, vl);\n        vse64_v_f64m8(dst_ptr, v_dst, vl);\n\n        src_ptr += vl;\n        dst_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total_elements = rows * cols;\n    size_t vl;\n    for (size_t n = 0; n < total_elements; n += vl) {\n        vl = vsetvl_e64m1(total_elements - n);\n        vfloat64m1_t v_src = vle64_v_f64m1(src + n, vl);\n        vbool64_t mask = vmfgt_vf_f64m1_b64(v_src, threshold, vl);\n        vfloat64m1_t v_dst = vfmul_vf_f64m1_m(mask, v_src, v_src, scale, vl);\n        vse64_v_f64m1(dst + n, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total = rows * cols;\n    size_t avl = total;\n    const double *src_ptr = src;\n    double *dst_ptr = dst;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m1(avl);\n        vfloat64m1_t v_src = __riscv_vle64_v_f64m1(src_ptr, vl);\n        vbool64_t mask = __riscv_vmfgt_vf_f64m1_b64(v_src, threshold, vl);\n        vfloat64m1_t v_dst = __riscv_vfmul_vf_f64m1_m(mask, v_src, v_src, scale, vl);\n        __riscv_vse64_v_f64m1(dst_ptr, v_dst, vl);\n        src_ptr += vl;\n        dst_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total = rows * cols;\n    size_t vl;\n    for (size_t n = 0; n < total; n += vl) {\n        vl = vsetvl_e64m1(total - n);\n        vfloat64m1_t v_src = vle64_v_f64m1(src + n, vl);\n        vbool64_t mask = vmfgt_vf_f64m1_b64(v_src, threshold, vl);\n        vfloat64m1_t v_dst = vfmul_vf_f64m1_m(mask, v_src, v_src, scale, vl);\n        vse64_v_f64m1(dst + n, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t src_row = indices[i];\n        const double *src_row_ptr = src + src_row * cols;\n        double *dst_row_ptr = dst + i * cols;\n        size_t n = cols;\n        while (n > 0) {\n            size_t vl = vsetvl_e64m8(n);\n            vfloat64m8_t v_src = vle64_v_f64m8(src_row_ptr, vl);\n            vse64_v_f64m8(dst_row_ptr, v_src, vl);\n            n -= vl;\n            src_row_ptr += vl;\n            dst_row_ptr += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double *src_row = src + indices[i] * cols;\n        double *dst_row = dst + i * cols;\n        size_t j = 0;\n        while (j < cols) {\n            size_t vl = vsetvl_e64m1(cols - j);\n            vfloat64m1_t row_data = vle64_v_f64m1(src_row + j, vl);\n            vse64_v_f64m1(dst_row + j, row_data, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t src_row_index = indices[i];\n        const double *src_row = src + src_row_index * cols;\n        double *dst_row = dst + i * cols;\n        size_t avl = cols;\n        while (avl > 0) {\n            size_t vl = vsetvl_e64m1(avl);\n            vfloat64m1_t row_data = vle64_v_f64m1(src_row, vl);\n            vse64_v_f64m1(dst_row, row_data, vl);\n            src_row += vl;\n            dst_row += vl;\n            avl -= vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        const double *src_row = src + indices[i] * cols;\n        double *dst_row = dst + i * cols;\n        size_t avl = cols;\n        while (avl > 0) {\n            size_t vl = vsetvl_e64m1(avl);\n            vfloat64m1_t vec = vle64_v_f64m1(src_row, vl);\n            vse64_v_f64m1(dst_row, vec, vl);\n            src_row += vl;\n            dst_row += vl;\n            avl -= vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; i++) {\n        size_t src_row_index = indices[i];\n        const double *src_row = src + src_row_index * cols;\n        double *dst_row = dst + i * cols;\n        \n        size_t j = 0;\n        while (j < cols) {\n            size_t vl = __riscv_vsetvl_e64m1(cols - j);\n            vfloat64m1_t row_data = __riscv_vle64_v_f64m1(src_row + j, vl);\n            __riscv_vse64_v_f64m1(dst_row + j, row_data, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t avl = length;\n    const int64_t *src1_ptr = src1;\n    const int64_t *src2_ptr = src2;\n    int64_t *dst_ptr = dst;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m1(avl);\n        vint64m1_t v1 = __riscv_vle64_v_i64m1(src1_ptr, vl);\n        vint64m1_t v2 = __riscv_vle64_v_i64m1(src2_ptr, vl);\n        vint64m1_t sum = __riscv_vadd_vv_i64m1(v1, v2, vl);\n        vint64m1_t added_scalar = __riscv_vadd_vx_i64m1(sum, scalar, vl);\n        vint64m1_t shifted = __riscv_vsra_vx_i64m1(added_scalar, 1, vl);\n        vint64m1_t lsb = __riscv_vand_vx_i64m1(added_scalar, 1, vl);\n        vint64m1_t sign = __riscv_vsra_vx_i64m1(added_scalar, 63, vl);\n        vint64m1_t correction = __riscv_vand_vv_i64m1(lsb, sign, vl);\n        vint64m1_t result = __riscv_vadd_vv_i64m1(shifted, correction, vl);\n        __riscv_vse64_v_i64m1(dst_ptr, result, vl);\n        src1_ptr += vl;\n        src2_ptr += vl;\n        dst_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vint64m1_t v1 = vle64_v_i64m1(src1, vl);\n        vint64m1_t v2 = vle64_v_i64m1(src2, vl);\n        vint64m1_t sum = vadd_vv_i64m1(v1, v2, vl);\n        vint64m1_t x = vadd_vx_i64m1(sum, scalar, vl);\n        vbool64_t mask = vmslt_vx_i64m1_b64(x, 0, vl);\n        vint64m1_t adjust = vmv_v_x_i64m1(0, vl);\n        adjust = vadd_vx_i64m1_m(mask, adjust, adjust, 1, vl);\n        x = vadd_vv_i64m1(x, adjust, vl);\n        vint64m1_t result = vsra_vx_i64m1(x, 1, vl);\n        vse64_v_i64m1(dst, result, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m8(avl);\n        vint64m8_t v1 = vle64_v_i64m8(src1, vl);\n        vint64m8_t v2 = vle64_v_i64m8(src2, vl);\n        vint64m8_t v_sum1 = vadd_vv_i64m8(v1, v2, vl);\n        vint64m8_t v_sum2 = vadd_vx_i64m8(v_sum1, scalar, vl);\n        vbool8_t v_negative = vmslt_vx_i64m8_b8(v_sum2, 0, vl);\n        vint64m8_t v_odd_vec = vand_vx_i64m8(v_sum2, 1, vl);\n        vbool8_t v_odd_mask = vmseq_vx_i64m8_b8(v_odd_vec, 1, vl);\n        vbool8_t v_adjust_mask = vmand_mm_b8(v_negative, v_odd_mask, vl);\n        vint64m8_t v_temp = vsra_vx_i64m8(v_sum2, 1, vl);\n        vint64m8_t v_res = vadd_vx_i64m8_m(v_adjust_mask, v_temp, v_temp, 1, vl);\n        vse64_v_i64m8(dst, v_res, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m8(avl);\n        vint64m8_t v1 = __riscv_vle64_v_i64m8(src1, vl);\n        vint64m8_t v2 = __riscv_vle64_v_i64m8(src2, vl);\n        vint64m8_t v_sum = __riscv_vadd_vv_i64m8(v1, v2, vl);\n        vint64m8_t v_scalar_add = __riscv_vadd_vx_i64m8(v_sum, scalar, vl);\n        vint64m8_t v_sign = __riscv_vsra_vx_i64m8(v_scalar_add, 63, vl);\n        vint64m8_t v_correction = __riscv_vand_vx_i64m8(v_sign, 1, vl);\n        vint64m8_t v_temp = __riscv_vadd_vv_i64m8(v_scalar_add, v_correction, vl);\n        vint64m8_t v_res = __riscv_vsra_vx_i64m8(v_temp, 1, vl);\n        __riscv_vse64_v_i64m8(dst, v_res, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t avl = length;\n    do {\n        size_t vl = vsetvl_e64m8(avl);\n        vint64m8_t v1 = vle64_v_i64m8(src1, vl);\n        vint64m8_t v2 = vle64_v_i64m8(src2, vl);\n        vint64m8_t v_sum = vadd_vv_i64m8(v1, v2, vl);\n        vint64m8_t v_scalar = vmv_v_x_i64m8(scalar, vl);\n        vint64m8_t v_total = vadd_vv_i64m8(v_sum, v_scalar, vl);\n        vint64m8_t v_sign = vsra_vx_i64m8(v_total, 63, vl);\n        vint64m8_t v_total_adjusted = vsub_vv_i64m8(v_total, v_sign, vl);\n        vint64m8_t v_result = vsra_vx_i64m8(v_total_adjusted, 1, vl);\n        vse64_v_i64m8(dst, v_result, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    } while (avl > 0);\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    size_t n_even = (length + 1) / 2;\n    if (n_even == 0) {\n        return -1;\n    }\n    int min_val = src[0];\n    if (n_even == 1) {\n        return min_val;\n    }\n    vint32m1_t vec_red = vmv_s_x_i32m1(vundefined_i32m1(), min_val);\n    const int *base = src + 2;\n    size_t avl = n_even - 1;\n    vint32m1_t vd;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = vsetvl_e32m1(avl);\n        vd = vlse32_v_i32m1(base, 8, vl);\n        vec_red = vredmin_vs_i32m1_i32m1(vec_red, vd, vec_red, vl);\n        base += 2 * vl;\n        avl -= vl;\n    }\n\n    min_val = vmv_x_s_i32m1_i32(vec_red);\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <limits.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    size_t n = (length + 1) / 2;\n    int min_result = INT_MAX;\n    const int *src_even = src;\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vlse32_v_i32m1(src_even, 2 * sizeof(int), vl);\n        vint32m1_t vec_red = vmv_s_x_i32m1(vundefined_i32m1(), INT_MAX, 1);\n        vec_red = vredmin_vs_i32m1(vec_red, vec, vec_red, vl);\n        int min_segment = vmv_x_s_i32m1_i32(vec_red);\n        if (min_segment < min_result) {\n            min_result = min_segment;\n        }\n        src_even += 2 * vl;\n        avl -= vl;\n    }\n\n    return min_result;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stddef.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    size_t n_even = (length + 1) / 2;\n    int min_val = src[0];\n    if (n_even == 1) {\n        return min_val;\n    }\n    size_t avl = n_even - 1;\n    const int *ptr = src + 2;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vlse32_v_i32m1(ptr, 8, vl);\n        vint32m1_t v_acc = __riscv_vmv_v_x_i32m1(min_val);\n        v_acc = __riscv_vredmin_vs_i32m1_i32m1(vec, v_acc, v_acc, vl);\n        min_val = __riscv_vmv_x_s_i32m1_i32(v_acc);\n        ptr += 2 * vl;\n        avl -= vl;\n    }\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n    int min_val = src[0];\n    size_t neven = (length + 1) / 2;\n    if (neven == 1) {\n        return min_val;\n    }\n\n    size_t avl = neven - 1;\n    const int *ptr = src + 2;\n    vint32m1_t vmin_global;\n    size_t vl = __riscv_vsetvl_e32m1(1);\n    vmin_global = __riscv_vmv_s_x_i32m1(min_val, vl);\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t v_temp = __riscv_vlse32_v_i32m1(ptr, 8, vl);\n        vmin_global = __riscv_vredmin_vs_i32m1(v_temp, vmin_global, vl);\n        ptr += vl * 2;\n        avl -= vl;\n    }\n    min_val = __riscv_vmv_x_s_i32m1(vmin_global);\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <limits.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    size_t even_length = (length + 1) / 2;\n    size_t avl = even_length;\n    const int *src_even = src;\n    int min_value = INT_MAX;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vlse32_v_i32m1(src_even, 8, vl);\n        vint32m1_t vred_result = __riscv_vredmin_vs_i32m1(vec, __riscv_vmv_v_x_i32m1(INT_MAX, vl), vl);\n        int seg_min = __riscv_vmv_x_s_i32m1(vred_result);\n        if (seg_min < min_value) {\n            min_value = seg_min;\n        }\n        src_even += 2 * vl;\n        avl -= vl;\n    }\n\n    return min_value;\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t avl = length;\n    unsigned int shift_val = (unsigned int)shift;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(src, vl);\n        vint32m1_t arith = __riscv_vsra_vx_i32m1(vec, shift_val, vl);\n        vuint32m1_t vec_u = __riscv_vreinterpret_v_i32m1_u32m1(vec);\n        vuint32m1_t log_u = __riscv_vsrl_vx_u32m1(vec_u, shift_val, vl);\n        vint32m1_t log = __riscv_vreinterpret_v_u32m1_i32m1(log_u);\n        vint32m1_t res = __riscv_vadd_vv_i32m1(arith, log, vl);\n        __riscv_vse32_v_i32m1(dst, res, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl;\n    while (length > 0) {\n        vl = vsetvl_e32m1(length);\n        vint32m1_t v_src = vle32_v_i32m1(src, vl);\n        vint32m1_t v_arith = vsra_vx_i32m1(v_src, shift, vl);\n        vuint32m1_t v_unsigned = vreinterpret_u32m1_i32m1(v_src);\n        vuint32m1_t v_logical = vsrl_vx_u32m1(v_unsigned, shift, vl);\n        vint32m1_t v_logical_signed = vreinterpret_i32m1_u32m1(v_logical);\n        vint32m1_t v_dst = vadd_vv_i32m1(v_arith, v_logical_signed, vl);\n        vse32_v_i32m1(dst, v_dst, vl);\n        src += vl;\n        dst += vl;\n        length -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t v = __riscv_vle32_v_i32m1(src, vl);\n        vint32m1_t arith = __riscv_vsra_vx_i32m1(v, shift, vl);\n        vuint32m1_t v_u = __riscv_vreinterpret_v_i32m1_u32m1(v);\n        vuint32m1_t vlogical = __riscv_vsrl_vx_u32m1(v_u, shift, vl);\n        vint32m1_t vlogical_s = __riscv_vreinterpret_v_u32m1_i32m1(vlogical);\n        vint32m1_t sum = __riscv_vadd_vv_i32m1(arith, vlogical_s, vl);\n        __riscv_vse32_v_i32m1(dst, sum, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t vsrc = vle32_v_i32m1(src, vl);\n        vint32m1_t v_arith = vsra_vx_i32m1(vsrc, shift, vl);\n        vuint32m1_t vsrc_u = vreinterpret_u32m1_i32m1(vsrc);\n        vuint32m1_t v_logical_u = vsrl_vx_u32m1(vsrc_u, shift, vl);\n        vint32m1_t v_logical = vreinterpret_i32m1_u32m1(v_logical_u);\n        vint32m1_t vsum = vadd_vv_i32m1(v_arith, v_logical, vl);\n        vse32_v_i32m1(dst, vsum, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t src_vec = vle32_v_i32m1(src, vl);\n        vint32m1_t arith = vsra_vx_i32m1(src_vec, shift, vl);\n        vuint32m1_t src_unsigned = vreinterpret_v_i32m1_u32m1(src_vec);\n        vuint32m1_t log_vec = vsrl_vx_u32m1(src_unsigned, shift, vl);\n        vint32m1_t log_signed = vreinterpret_v_u32m1_i32m1(log_vec);\n        vint32m1_t result = vadd_vv_i32m1(arith, log_signed, vl);\n        vse32_v_i32m1(dst, result, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    const int *end = matrix + total_elements;\n    vint64m1_t vred = vmv_v_x_i64m1(0, 1);\n    \n    size_t vl;\n    for (const int *ptr = matrix; ptr < end; ptr += vl) {\n        vl = vsetvl_e32m1(end - ptr);\n        vint32m1_t vec = vle32_v_i32m1(ptr, vl);\n        vred = vwredsum_vs_i32m1(vec, vred, vl);\n    }\n    \n    return vmv_x_s_i64m1_i64(vred);\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    if (total_elements == 0) {\n        return 0;\n    }\n\n    vint64m1_t v_zero = vmv_v_x_i64m1(0, 1);\n    const int *ptr = matrix;\n    size_t vl;\n    for (size_t n = total_elements; n > 0; ) {\n        vl = vsetvl_e32m1(n);\n        vint32m1_t v_a = vle32_v_i32m1(ptr, vl);\n        ptr += vl;\n        n -= vl;\n        vint64m2_t v_a_w = vwadd_vx_i64m2(v_a, 0, vl);\n        v_zero = vredsum_vs_i64m2_i64m1(v_a_w, v_zero, vl);\n    }\n    int64_t sum = vmv_x_s_i64m1_i64(v_zero);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    const int *ptr = matrix;\n    vint64m1_t v_sum = __riscv_vmv_v_x_i64m1(0, 1);\n    size_t vl;\n    while (total_elements > 0) {\n        vl = __riscv_vsetvl_e32m1(total_elements);\n        vint32m1_t v_data = __riscv_vle32_v_i32m1(ptr, vl);\n        vint64m2_t v_wdata = __riscv_vsext_vf2_i64m2(v_data, vl);\n        v_sum = __riscv_vredsum_vs_i64m2_i64m1(v_wdata, v_sum, vl);\n        ptr += vl;\n        total_elements -= vl;\n    }\n    return __riscv_vmv_x_s_i64m1_i64(v_sum);\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    int64_t total = 0;\n    if (rows == 0 || cols == 0) {\n        return 0;\n    }\n    vint64m1_t v_zero = vmv_v_x_i64m1(0, 1);\n    \n    for (size_t i = 0; i < rows; i++) {\n        const int *row_ptr = matrix + i * cols;\n        size_t j = 0;\n        int64_t row_sum = 0;\n        \n        while (j < cols) {\n            size_t vl = vsetvl_e32m8(cols - j);\n            vint32m8_t v_src = vle32_v_i32m8(row_ptr + j, vl);\n            vint64m1_t v_part = vwredsum_vs_i32m8_i64m1(v_src, v_zero, vl);\n            row_sum += vmv_x_s_i64m1_i64(v_part);\n            j += vl;\n        }\n        total += row_sum;\n    }\n    return total;\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    const int *ptr = matrix;\n    vint64m1_t v_red = vmv_s_x_i64m1(0, 1);\n    size_t vl;\n    \n    while (total_elements > 0) {\n        vl = vsetvl_e32m1(total_elements);\n        vint32m1_t v_src = vle32_v_i32m1(ptr, vl);\n        vint64m2_t v_wide = vwadd_vx_i64m2(v_src, 0, vl);\n        v_red = vredsum_vs_i64m2_i64m1(v_red, v_wide, v_red, vl);\n        ptr += vl;\n        total_elements -= vl;\n    }\n    \n    return vmv_x_s_i64m1_i64(v_red);\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <stdint.h>\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t global_index = 0;\n    int8_t global_max = src[0];\n    size_t i = 0;\n    size_t vl;\n    vint8m1_t v_max_temp;\n\n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = vsetvl_e8m1(avl);\n        vint8m1_t v = vle8_v_i8m1(src + i, vl);\n\n        v_max_temp = vmv_v_x_i8m1(INT8_MIN, 1);\n        v_max_temp = vredmax_vs_i8m1_i8m1(v_max_temp, v, v_max_temp, vl);\n        int8_t max_in_v = vmv_x_s_i8m1_i8(v_max_temp);\n\n        vbool8_t mask = vmseq_vx_i8m1_b8(v, max_in_v, vl);\n        long first_in_vec = vfirst_m_b8(mask, vl);\n\n        if (max_in_v > global_max) {\n            global_max = max_in_v;\n            global_index = i + (size_t)first_in_vec;\n        }\n\n        i += vl;\n    }\n\n    return global_index;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    size_t global_index = 0;\n    int8_t global_max = src[0];\n    size_t avl = length;\n    size_t vl;\n\n    for (size_t pos = 0; pos < length; ) {\n        vl = vsetvl_e8m8(avl);\n        vint8m8_t vec = vle8_v_i8m8(src + pos, vl);\n        vint8m1_t tmp = vmv_v_x_i8m1(global_max, 1);\n        tmp = vredmax_vs_i8m8_i8m1(tmp, vec, tmp, vl);\n        int8_t seg_max = vmv_x_s_i8m1_i8(tmp);\n\n        if (seg_max > global_max) {\n            global_max = seg_max;\n            vbool1_t mask = vmseq_vx_i8m8_b1(vec, seg_max, vl);\n            long first_index = vfirst_m_b1(mask, vl);\n            if (first_index >= 0) {\n                global_index = pos + first_index;\n            }\n        }\n        avl -= vl;\n        pos += vl;\n    }\n    return global_index;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    int8_t global_max = -128;\n    size_t global_index = 0;\n    size_t avl = length;\n    size_t vl;\n\n    for (size_t i = 0; avl > 0; ) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vint8m1_t vec = __riscv_vle8_v_i8m1(src + i, vl);\n        vint8m1_t v_scalar = __riscv_vmv_s_x_i8m1(-128, 1);\n        vint8m1_t seg_max_val = __riscv_vredmax_vs_i8m1_i8m1(vec, v_scalar, vl);\n        int8_t seg_max = __riscv_vmv_x_s_i8m1_i8(seg_max_val);\n        vbool8_t mask = __riscv_vmseq_vx_i8m1_b8(vec, seg_max, vl);\n        long first_in_seg = __riscv_vfirst_m_b8(mask, vl);\n        if (first_in_seg >= 0 && seg_max > global_max) {\n            global_max = seg_max;\n            global_index = i + (size_t)first_in_seg;\n        }\n        i += vl;\n        avl -= vl;\n    }\n    return global_index;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t global_index = 0;\n    int8_t global_max = -128;\n    size_t vl;\n    \n    for (size_t i = 0; i < length; ) {\n        vl = vsetvl_e8m1(length - i);\n        vint8m1_t vec = vle8_v_i8m1(src + i, vl);\n        \n        vint8m1_t max_temp = vmv_s_x_i8m1(-128, vl);\n        max_temp = vredmax_vs_i8m1_i8m1(vec, max_temp, vl);\n        int8_t max_val = vmv_x_s_i8m1_i8(max_temp);\n        \n        if (max_val > global_max) {\n            vbool8_t mask = vmseq_vx_i8m1_b8(vec, max_val, vl);\n            long first_index = vfirst_m_b8(mask, vl);\n            global_max = max_val;\n            global_index = i + first_index;\n        }\n        \n        i += vl;\n    }\n    \n    return global_index;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t global_index = 0;\n    int8_t global_max = INT8_MIN;\n    size_t i = 0;\n\n    while (i < length) {\n        size_t vl = vsetvl_e8m1(length - i);\n        vint8m1_t vec = vle8_v_i8m1(src + i, vl);\n        vint8m1_t scalar_vec = vmv_s_x_i8m1(vundefined_i8m1(), global_max, 1);\n        vint8m1_t vmax_temp = vredmax_vs_i8m1_i8m1(vundefined_i8m1(), vec, scalar_vec, vl);\n        int8_t max_in_chunk = vmv_x_s_i8m1_i8(vmax_temp);\n\n        if (max_in_chunk > global_max) {\n            global_max = max_in_chunk;\n            vbool8_t mask = vmseq_vx_i8m1_b8(vec, max_in_chunk, vl);\n            long first_index_in_chunk = vfirst_m_b8(mask, vl);\n            global_index = i + first_index_in_chunk;\n        }\n\n        i += vl;\n    }\n\n    return global_index;\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t base_index = 0;\n    while (length > 0) {\n        size_t vl = __riscv_vsetvl_e32m4(length);\n        vuint32m4_t v_idx = __riscv_vadd_vx_u32m4(__riscv_vid_v_u32m4(vl), (uint32_t)base_index, vl);\n        vuint32m4_t v_and = __riscv_vand_vx_u32m4(v_idx, mask, vl);\n        vbool8_t mask_vec = __riscv_vmsne_vx_u32m4_b8(v_and, 0, vl);\n        vuint16m2_t v_src1 = __riscv_vle16_v_u16m2(src1, vl);\n        vuint16m2_t v_src2 = __riscv_vle16_v_u16m2(src2, vl);\n        vuint16m2_t v_blended = __riscv_vmerge_vvm_u16m2(v_src2, v_src1, mask_vec, vl);\n        __riscv_vse16_v_u16m2(dst, v_blended, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        base_index += vl;\n        length -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t avl = length;\n    size_t vl;\n    for (size_t pos = 0; pos < length; ) {\n        vl = __riscv_vsetvl_e32m4(avl);\n        vuint32m4_t v_index = __riscv_vadd_vx_u32m4(__riscv_vid_v_u32m4(vl), (uint32_t)pos, vl);\n        vuint32m4_t v_cond = __riscv_vand_vx_u32m4(v_index, mask, vl);\n        vbool8_t mask_vec = __riscv_vmsne_vx_u32m4_b8(v_cond, 0, vl);\n        vuint16m2_t v_src1 = __riscv_vle16_v_u16m2(src1 + pos, vl);\n        vuint16m2_t v_src2 = __riscv_vle16_v_u16m2(src2 + pos, vl);\n        vuint16m2_t v_dst = __riscv_vmerge_vvm_u16m2(v_src2, v_src1, mask_vec, vl);\n        __riscv_vse16_v_u16m2(dst + pos, v_dst, vl);\n        avl -= vl;\n        pos += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    uint64_t mask64 = (uint64_t)mask;\n    size_t avl = length;\n    size_t base = 0;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m8(avl);\n        vuint64m8_t index_vec = __riscv_vid_v_u64m8(vl);\n        vuint64m8_t base_vec = __riscv_vadd_vx_u64m8(index_vec, base, vl);\n        vuint64m8_t mask_vec = __riscv_vmv_v_x_u64m8(mask64, vl);\n        vuint64m8_t and_result = __riscv_vand_vv_u64m8(base_vec, mask_vec, vl);\n        vbool8_t cond = __riscv_vmsne_vx_u64m8_b8(and_result, 0, vl);\n        vuint16m8_t vs1 = __riscv_vle16_v_u16m8(src1 + base, vl);\n        vuint16m8_t vs2 = __riscv_vle16_v_u16m8(src2 + base, vl);\n        vuint16m8_t vd = __riscv_vmerge_vvm_u16m8(vs2, vs1, cond, vl);\n        __riscv_vse16_v_u16m8(dst + base, vd, vl);\n        base += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    while (length > 0) {\n        size_t vl = vsetvl_e32m1(length);\n        vuint32m1_t vec_idx = vid_v_u32m1(vl);\n        vuint32m1_t indices = vadd_vx_u32m1(vec_idx, (uint32_t)i, vl);\n        vuint32m1_t and_result = vand_vx_u32m1(indices, mask, vl);\n        vbool32_t cond32 = vmsne_vx_u32m1_b32(and_result, 0, vl);\n        vbool16_t cond16 = *(vbool16_t*)&cond32;\n        vuint16m1_t data1 = vle16_v_u16m1(src1 + i, vl);\n        vuint16m1_t data2 = vle16_v_u16m1(src2 + i, vl);\n        vuint16m1_t res = vmerge_vvm_u16m1(cond16, data1, data2, vl);\n        vse16_v_u16m1(dst + i, res, vl);\n        i += vl;\n        length -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t avl = length;\n    size_t i = 0;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m4(avl);\n        vuint32m4_t index_vec = __riscv_vid_v_u32m4(vl);\n        vuint32m4_t base_index_vec = __riscv_vadd_vx_u32m4(index_vec, (uint32_t)i, vl);\n        vuint32m4_t and_res = __riscv_vand_vx_u32m4(base_index_vec, mask, vl);\n        vbool8_t cond_mask = __riscv_vmsne_vx_u32m4_b8(and_res, 0, vl);\n        vuint16m2_t src1_data = __riscv_vle16_v_u16m2(src1 + i, vl);\n        vuint16m2_t src2_data = __riscv_vle16_v_u16m2(src2 + i, vl);\n        vuint16m2_t res = __riscv_vmerge_vvm_u16m2(cond_mask, src1_data, src2_data, vl);\n        __riscv_vse16_v_u16m2(dst + i, res, vl);\n        i += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        vuint32m1_t v_src = __riscv_vle32_v_u32m1(src + i, vl);\n        \n        vuint32m1_t mask1 = __riscv_vmv_v_x_u32m1(0x55555555, vl);\n        vuint32m1_t mask2 = __riscv_vmv_v_x_u32m1(0x33333333, vl);\n        vuint32m1_t mask3 = __riscv_vmv_v_x_u32m1(0x0F0F0F0F, vl);\n        \n        vuint32m1_t v = v_src;\n        v = __riscv_vsub_vv_u32m1(v, __riscv_vand_vv_u32m1(__riscv_vsrl_vx_u32m1(v, 1, vl), mask1, vl), vl);\n        vuint32m1_t a = __riscv_vand_vv_u32m1(v, mask2, vl);\n        vuint32m1_t b = __riscv_vand_vv_u32m1(__riscv_vsrl_vx_u32m1(v, 2, vl), mask2, vl);\n        v = __riscv_vadd_vv_u32m1(a, b, vl);\n        v = __riscv_vand_vv_u32m1(__riscv_vadd_vv_u32m1(v, __riscv_vsrl_vx_u32m1(v, 4, vl), vl), mask3, vl);\n        v = __riscv_vmul_vx_u32m1(v, 0x01010101, vl);\n        v = __riscv_vsrl_vx_u32m1(v, 24, vl);\n        \n        __riscv_vse32_v_u32m1(dst + i, v, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    for (; length > 0; length -= vl, src += vl, dst += vl) {\n        vl = __riscv_vsetvl_e32m1(length);\n        vuint32m1_t v_src = __riscv_vle32_v_u32m1(src, vl);\n        vuint32m1_t v_t1 = __riscv_vsrl_vx_u32m1(v_src, 1, vl);\n        v_t1 = __riscv_vand_vx_u32m1(v_t1, 0x55555555, vl);\n        v_t1 = __riscv_vsub_vv_u32m1(v_src, v_t1, vl);\n        vuint32m1_t v_t2 = __riscv_vand_vx_u32m1(v_t1, 0x33333333, vl);\n        vuint32m1_t v_tmp = __riscv_vsrl_vx_u32m1(v_t1, 2, vl);\n        v_tmp = __riscv_vand_vx_u32m1(v_tmp, 0x33333333, vl);\n        v_t2 = __riscv_vadd_vv_u32m1(v_t2, v_tmp, vl);\n        v_tmp = __riscv_vsrl_vx_u32m1(v_t2, 4, vl);\n        v_tmp = __riscv_vadd_vv_u32m1(v_t2, v_tmp, vl);\n        vuint32m1_t v_t3 = __riscv_vand_vx_u32m1(v_tmp, 0x0F0F0F0F, vl);\n        vuint32m1_t v_t4 = __riscv_vsrl_vx_u32m1(v_t3, 8, vl);\n        v_t4 = __riscv_vadd_vv_u32m1(v_t3, v_t4, vl);\n        v_tmp = __riscv_vsrl_vx_u32m1(v_t3, 16, vl);\n        v_t4 = __riscv_vadd_vv_u32m1(v_t4, v_tmp, vl);\n        v_tmp = __riscv_vsrl_vx_u32m1(v_t3, 24, vl);\n        v_t4 = __riscv_vadd_vv_u32m1(v_t4, v_tmp, vl);\n        v_t4 = __riscv_vand_vx_u32m1(v_t4, 0xFF, vl);\n        __riscv_vse32_v_u32m1(dst, v_t4, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vuint32m1_t v0 = __riscv_vle32_v_u32m1(src, vl);\n        vuint32m1_t mask1 = __riscv_vmv_v_x_u32m1(0x55555555, vl);\n        vuint32m1_t t1 = __riscv_vsrl_vx_u32m1(v0, 1, vl);\n        t1 = __riscv_vand_vv_u32m1(t1, mask1, vl);\n        vuint32m1_t v1 = __riscv_vsub_vv_u32m1(v0, t1, vl);\n        vuint32m1_t mask2 = __riscv_vmv_v_x_u32m1(0x33333333, vl);\n        vuint32m1_t t2 = __riscv_vsrl_vx_u32m1(v1, 2, vl);\n        t2 = __riscv_vand_vv_u32m1(t2, mask2, vl);\n        vuint32m1_t v2 = __riscv_vadd_vv_u32m1(__riscv_vand_vv_u32m1(v1, mask2, vl), t2, vl);\n        vuint32m1_t mask3 = __riscv_vmv_v_x_u32m1(0x0F0F0F0F, vl);\n        vuint32m1_t t3 = __riscv_vsrl_vx_u32m1(v2, 4, vl);\n        vuint32m1_t v3 = __riscv_vadd_vv_u32m1(v2, t3, vl);\n        v3 = __riscv_vand_vv_u32m1(v3, mask3, vl);\n        vuint32m1_t mask4 = __riscv_vmv_v_x_u32m1(0x00FF00FF, vl);\n        vuint32m1_t t_low = __riscv_vand_vv_u32m1(v3, mask4, vl);\n        vuint32m1_t t_high = __riscv_vand_vv_u32m1(__riscv_vsrl_vx_u32m1(v3, 8, vl), mask4, vl);\n        vuint32m1_t sum = __riscv_vadd_vv_u32m1(t_low, t_high, vl);\n        vuint32m1_t low16 = __riscv_vand_vx_u32m1(sum, 0xFFFF, vl);\n        vuint32m1_t high16 = __riscv_vsrl_vx_u32m1(sum, 16, vl);\n        vuint32m1_t result = __riscv_vadd_vv_u32m1(low16, high16, vl);\n        __riscv_vse32_v_u32m1(dst, result, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        vuint32m1_t v_src = __riscv_vle32_v_u32m1(src + i, vl);\n        \n        vuint32m1_t m1 = __riscv_vmv_v_x_u32m1(0x55555555, vl);\n        vuint32m1_t m2 = __riscv_vmv_v_x_u32m1(0x33333333, vl);\n        vuint32m1_t m4 = __riscv_vmv_v_x_u32m1(0x0F0F0F0F, vl);\n        vuint32m1_t multiplier = __riscv_vmv_v_x_u32m1(0x01010101, vl);\n        \n        vuint32m1_t t = __riscv_vsrl_vx_u32m1(v_src, 1, vl);\n        t = __riscv_vand_vv_u32m1(t, m1, vl);\n        vuint32m1_t v_dst = __riscv_vsub_vv_u32m1(v_src, t, vl);\n        \n        t = __riscv_vsrl_vx_u32m1(v_dst, 2, vl);\n        t = __riscv_vand_vv_u32m1(t, m2, vl);\n        v_dst = __riscv_vand_vv_u32m1(v_dst, m2, vl);\n        v_dst = __riscv_vadd_vv_u32m1(v_dst, t, vl);\n        \n        t = __riscv_vsrl_vx_u32m1(v_dst, 4, vl);\n        v_dst = __riscv_vadd_vv_u32m1(v_dst, t, vl);\n        v_dst = __riscv_vand_vv_u32m1(v_dst, m4, vl);\n        \n        v_dst = __riscv_vmul_vv_u32m1(v_dst, multiplier, vl);\n        v_dst = __riscv_vsrl_vx_u32m1(v_dst, 24, vl);\n        \n        __riscv_vse32_v_u32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vuint32m1_t v_src = __riscv_vle32_v_u32m1(src, vl);\n        \n        // Step 1: v = v - ((v >> 1) & 0x55555555)\n        vuint32m1_t v_tmp = __riscv_vsrl_vx_u32m1(v_src, 1, vl);\n        vuint32m1_t mask1 = __riscv_vmv_v_x_u32m1(0x55555555, vl);\n        v_tmp = __riscv_vand_vv_u32m1(v_tmp, mask1, vl);\n        v_src = __riscv_vsub_vv_u32m1(v_src, v_tmp, vl);\n        \n        // Step 2: v = (v & 0x33333333) + ((v >> 2) & 0x33333333)\n        vuint32m1_t mask2 = __riscv_vmv_v_x_u32m1(0x33333333, vl);\n        vuint32m1_t v_low = __riscv_vand_vv_u32m1(v_src, mask2, vl);\n        v_tmp = __riscv_vsrl_vx_u32m1(v_src, 2, vl);\n        v_tmp = __riscv_vand_vv_u32m1(v_tmp, mask2, vl);\n        v_src = __riscv_vadd_vv_u32m1(v_low, v_tmp, vl);\n        \n        // Step 3: v = (v + (v >> 4)) & 0x0F0F0F0F\n        v_tmp = __riscv_vsrl_vx_u32m1(v_src, 4, vl);\n        v_src = __riscv_vadd_vv_u32m1(v_src, v_tmp, vl);\n        vuint32m1_t mask3 = __riscv_vmv_v_x_u32m1(0x0F0F0F0F, vl);\n        v_src = __riscv_vand_vv_u32m1(v_src, mask3, vl);\n        \n        // Step 4: v = (v * 0x01010101) >> 24\n        v_src = __riscv_vmul_vx_u32m1(v_src, 0x01010101, vl);\n        v_src = __riscv_vsrl_vx_u32m1(v_src, 24, vl);\n        \n        __riscv_vse32_v_u32m1(dst, v_src, vl);\n        src += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e16m8(avl);\n        vuint16m8_t v1 = __riscv_vle16_v_u16m8(src1, vl);\n        vuint16m8_t v2 = __riscv_vle16_v_u16m8(src2, vl);\n        vuint16m8_t vsum = __riscv_vsaddu_vv_u16m8(v1, v2, vl);\n        __riscv_vse16_v_u16m8(dst, vsum, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t avl = length;\n    do {\n        size_t vl = vsetvl_e16m1(avl);\n        vuint16m1_t vec1 = vle16_v_u16m1(src1, vl);\n        vuint16m1_t vec2 = vle16_v_u16m1(src2, vl);\n        vuint16m1_t sum = vsaddu_vv_u16m1(vec1, vec2, vl);\n        vse16_v_u16m1(dst, sum, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    } while (avl > 0);\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e16m1(avl);\n        vuint16m1_t vec1 = __riscv_vle16_v_u16m1(src1, vl);\n        vuint16m1_t vec2 = __riscv_vle16_v_u16m1(src2, vl);\n        vuint16m1_t sum = __riscv_vsaddu_vv_u16m1(vec1, vec2, vl);\n        __riscv_vse16_v_u16m1(dst, sum, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t vec1, vec2, res;\n    for (size_t n = length; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e16m1(n);\n        vec1 = __riscv_vle16_v_u16m1(src1, vl);\n        vec2 = __riscv_vle16_v_u16m1(src2, vl);\n        res = __riscv_vsaddu_vv_u16m1(vec1, vec2, vl);\n        __riscv_vse16_v_u16m1(dst, res, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t vec1, vec2, res;\n    for (size_t n = length; n > 0; ) {\n        vl = __riscv_vsetvl_e16m1(n);\n        vec1 = __riscv_vle16_v_u16m1(src1, vl);\n        vec2 = __riscv_vle16_v_u16m1(src2, vl);\n        res = __riscv_vsaddu_vv_u16m1(vec1, vec2, vl);\n        __riscv_vse16_v_u16m1(dst, res, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        n -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t c_size = m * p;\n    for (size_t i = 0; i < c_size; i++) {\n        C[i] = 0.0;\n    }\n\n    for (size_t i = 0; i < m; i++) {\n        for (size_t k = 0; k < n; k++) {\n            double a_val = A[i * n + k];\n            if (a_val >= -100.0 && a_val <= 100.0) {\n                size_t j = 0;\n                while (j < p) {\n                    size_t vl = vsetvl_e64m1(p - j);\n                    const double* b_ptr = B + k * p + j;\n                    double* c_ptr = C + i * p + j;\n                    vfloat64m1_t vb = vle64_v_f64m1(b_ptr, vl);\n                    vbool64_t mask_b = vmand_mm_b64(\n                        vmfge_vf_f64m1_b64(vb, -100.0, vl),\n                        vmfle_vf_f64m1_b64(vb, 100.0, vl),\n                        vl);\n                    vfloat64m1_t vc = vle64_v_f64m1(c_ptr, vl);\n                    vfloat64m1_t va_vec = vfmv_v_f_f64m1(a_val, vl);\n                    vfloat64m1_t v_prod = vfmul_vv_f64m1(va_vec, vb, vl);\n                    vc = vfadd_vv_f64m1_m(mask_b, vc, vc, v_prod, vl);\n                    vse64_v_f64m1(c_ptr, vc, vl);\n                    j += vl;\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t total = m * p;\n    size_t vl;\n    for (size_t idx = 0; idx < total; ) {\n        vl = vsetvl_e64m1(total - idx);\n        vfloat64m1_t v_zero = vfmv_v_f_f64m1(0.0, vl);\n        vse64_v_f64m1(C + idx, v_zero, vl);\n        idx += vl;\n    }\n\n    for (size_t i = 0; i < m; i++) {\n        for (size_t k = 0; k < n; k++) {\n            double a_val = A[i * n + k];\n            if (a_val < -100.0 || a_val > 100.0) {\n                continue;\n            }\n            size_t j = 0;\n            while (j < p) {\n                vl = vsetvl_e64m1(p - j);\n                vfloat64m1_t vb = vle64_v_f64m1(&B[k * p + j], vl);\n                vbool64_t maskB_low = vmfge_vf_f64m1_b64(vb, -100.0, vl);\n                vbool64_t maskB_high = vmfle_vf_f64m1_b64(vb, 100.0, vl);\n                vbool64_t maskB = vmand_mm_b64(maskB_low, maskB_high, vl);\n                vfloat64m1_t va_vec = vfmv_v_f_f64m1(a_val, vl);\n                vfloat64m1_t v_zero = vfmv_v_f_f64m1(0.0, vl);\n                vfloat64m1_t product = vfmul_vv_f64m1_m(maskB, v_zero, va_vec, vb, vl);\n                vfloat64m1_t vc = vle64_v_f64m1(&C[i * p + j], vl);\n                vc = vfadd_vv_f64m1(vc, product, vl);\n                vse64_v_f64m1(&C[i * p + j], vc, vl);\n                j += vl;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t total = m * p;\n    size_t vl;\n    double *c_ptr = C;\n    for (size_t i = 0; i < total; ) {\n        vl = vsetvl_e64m1(total - i);\n        vfloat64m1_t zero_vec = vfmv_v_f_f64m1(0.0, vl);\n        vse64_v_f64m1(c_ptr, zero_vec, vl);\n        c_ptr += vl;\n        i += vl;\n    }\n\n    for (size_t i = 0; i < m; i++) {\n        for (size_t k = 0; k < n; k++) {\n            double a_val = A[i * n + k];\n            if (a_val < -100.0 || a_val > 100.0) {\n                continue;\n            }\n            size_t j = 0;\n            while (j < p) {\n                vl = vsetvl_e64m1(p - j);\n                vfloat64m1_t b_vec = vle64_v_f64m1(B + k * p + j, vl);\n                vbool64_t mask_low = vmfge_vf_f64m1_b64(b_vec, -100.0, vl);\n                vbool64_t mask_high = vmfle_vf_f64m1_b64(b_vec, 100.0, vl);\n                vbool64_t mask = vmand_mm_b64(mask_low, mask_high, vl);\n                vfloat64m1_t c_vec = vle64_v_f64m1(C + i * p + j, vl);\n                c_vec = vfmacc_vf_f64m1_m(mask, c_vec, a_val, b_vec, vl);\n                vse64_v_f64m1(C + i * p + j, c_vec, vl);\n                j += vl;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    // Initialize C to zeros\n    for (size_t i = 0; i < m * p; i++) {\n        C[i] = 0.0;\n    }\n\n    for (size_t i = 0; i < m; i++) {\n        for (size_t k = 0; k < n; k++) {\n            double a_val = A[i * n + k];\n            if (a_val < -100.0 || a_val > 100.0) {\n                continue;\n            }\n            size_t j = 0;\n            while (j < p) {\n                size_t vl = vsetvl_e64m8(p - j);\n                vfloat64m8_t vb = vle64_v_f64m8(B + k * p + j, vl);\n                vbool8_t mask_ge = vmfge_vf_f64m8_b8(vb, -100.0, vl);\n                vbool8_t mask_le = vmfle_vf_f64m8_b8(vb, 100.0, vl);\n                vbool8_t mask = vmand_mm(mask_ge, mask_le);\n                vfloat64m8_t vc = vle64_v_f64m8(C + i * p + j, vl);\n                vfloat64m8_t va_vec = vfmv_v_f_f64m8(a_val, vl);\n                vfloat64m8_t product = vfmul_vv_f64m8(va_vec, vb, vl);\n                vfloat64m8_t vc_new = vfadd_vv_f64m8_m(mask, vc, vc, product, vl);\n                vse64_v_f64m8(C + i * p + j, vc_new, vl);\n                j += vl;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        size_t j = 0;\n        while (j < p) {\n            size_t vl = vsetvl_e64m8(p - j);\n            vfloat64m8_t v_accum = vfmv_v_f_f64m8(0.0, vl);\n            \n            for (size_t k = 0; k < n; k++) {\n                double a_val = A[i * n + k];\n                if (a_val >= -100.0 && a_val <= 100.0) {\n                    vfloat64m8_t v_b = vle64_v_f64m8(B + k * p + j, vl);\n                    vbool8_t mask_low = vmfge_vf_f64m8_b8(v_b, -100.0, vl);\n                    vbool8_t mask_high = vmfle_vf_f64m8_b8(v_b, 100.0, vl);\n                    vbool8_t mask = vmand_mm_b8(mask_low, mask_high, vl);\n                    v_accum = vfmacc_vf_f64m8_m(mask, v_accum, a_val, v_b, vl);\n                }\n            }\n            \n            vse64_v_f64m8(C + i * p + j, v_accum, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t offset = 0; offset < total_elements; ) {\n        vl = vsetvl_e64m1(total_elements - offset);\n        vint64m1_t a_vec = vle64_v_i64m1(A + offset, vl);\n        vint64m1_t b_vec = vle64_v_i64m1(B + offset, vl);\n        vint64m1_t sum_vec = vadd_vv_i64m1(a_vec, b_vec, vl);\n        vse64_v_i64m1(C + offset, sum_vec, vl);\n        offset += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    const int64_t* a_ptr = A;\n    const int64_t* b_ptr = B;\n    int64_t* c_ptr = C;\n    size_t avl = total_elements;\n    \n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m8(avl);\n        vint64m8_t a_vec = __riscv_vle64_v_i64m8(a_ptr, vl);\n        vint64m8_t b_vec = __riscv_vle64_v_i64m8(b_ptr, vl);\n        vint64m8_t c_vec = __riscv_vadd_vv_i64m8(a_vec, b_vec, vl);\n        __riscv_vse64_v_i64m8(c_ptr, c_vec, vl);\n        \n        a_ptr += vl;\n        b_ptr += vl;\n        c_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t index = 0;\n    size_t vl;\n    \n    while (index < total_elements) {\n        vl = vsetvl_e64m1(total_elements - index);\n        vint64m1_t a_vec = vle64_v_i64m1(A + index, vl);\n        vint64m1_t b_vec = vle64_v_i64m1(B + index, vl);\n        vint64m1_t c_vec = vadd_vv_i64m1(a_vec, b_vec, vl);\n        vse64_v_i64m1(C + index, c_vec, vl);\n        index += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t n = total_elements; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e64m1(n);\n        vint64m1_t vec_a = __riscv_vle64_v_i64m1(A, vl);\n        vint64m1_t vec_b = __riscv_vle64_v_i64m1(B, vl);\n        vint64m1_t vec_c = __riscv_vadd_vv_i64m1(vec_a, vec_b, vl);\n        __riscv_vse64_v_i64m1(C, vec_c, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t avl = total_elements;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = vsetvl_e64m8(avl);\n        vint64m8_t va = vle64_v_i64m8(A, vl);\n        vint64m8_t vb = vle64_v_i64m8(B, vl);\n        vint64m8_t vc = vadd_vv_i64m8(va, vb, vl);\n        vse64_v_i64m8(C, vc, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    for (; length > 0; length -= vl) {\n        vl = __riscv_vsetvl_e32m1(length);\n        vfloat32m1_t vec1 = __riscv_vle32_v_f32m1(src1, vl);\n        vfloat32m1_t vec2 = __riscv_vle32_v_f32m1(src2, vl);\n        vfloat32m1_t sum = __riscv_vfadd_vv_f32m1(vec1, vec2, vl);\n        vfloat32m1_t rounded = __riscv_vfround_v_f32m1(sum, vl);\n        __riscv_vse32_v_f32m1(dst, rounded, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t avl = length;\n    const unsigned int frm = 0; // Round to Nearest Even (RNE)\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t v1 = __riscv_vle32_v_f32m1(src1, vl);\n        vfloat32m1_t v2 = __riscv_vle32_v_f32m1(src2, vl);\n        vfloat32m1_t sum = __riscv_vfadd_vv_f32m1(v1, v2, vl);\n        vint32m1_t rounded_int = __riscv_vfcvt_x_f_v_i32m1_rm(sum, frm, vl);\n        vfloat32m1_t result = __riscv_vfcvt_f_x_v_f32m1(rounded_int, vl);\n        __riscv_vse32_v_f32m1(dst, result, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    for (size_t n = length; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vfloat32m1_t va = __riscv_vle32_v_f32m1(src1, vl);\n        vfloat32m1_t vb = __riscv_vle32_v_f32m1(src2, vl);\n        vfloat32m1_t vsum = __riscv_vfadd_vv_f32m1(va, vb, vl);\n        vfloat32m1_t vrounded = __riscv_vfrne_v_f32m1(vsum, vl);\n        __riscv_vse32_v_f32m1(dst, vrounded, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    for (size_t n = 0; n < length; n += vl) {\n        vl = __riscv_vsetvl_e32m1(length - n);\n        vfloat32m1_t va = __riscv_vle32_v_f32m1(src1 + n, vl);\n        vfloat32m1_t vb = __riscv_vle32_v_f32m1(src2 + n, vl);\n        vfloat32m1_t vc = __riscv_vfadd_vv_f32m1(va, vb, vl);\n        vfloat32m1_t vd = __riscv_vfrndne_v_f32m1(vc, vl);\n        __riscv_vse32_v_f32m1(dst + n, vd, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t v1 = vle32_v_f32m1(src1, vl);\n        vfloat32m1_t v2 = vle32_v_f32m1(src2, vl);\n        vfloat32m1_t vsum = vfadd_vv_f32m1(v1, v2, vl);\n        vint32m1_t vround_i = vfcvt_x_f_v_i32m1(vsum, vl);\n        vfloat32m1_t vround_f = vfcvt_f_x_v_f32m1(vround_i, vl);\n        vse32_v_f32m1(dst, vround_f, vl);\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length){\n    size_t vl;\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        vfloat32m1_t v1 = vle32_v_f32m1(src1 + i, vl);\n        vfloat32m1_t v2 = vle32_v_f32m1(src2 + i, vl);\n        \n        vfloat32m1_t diff = vfsub_vv_f32m1(v1, v2, vl);\n        vfloat32m1_t abs_diff = vfsgnjx_vv_f32m1(diff, diff, vl);\n        \n        vfloat32m1_t fifty = vfmv_v_f_f32m1(50.0f, vl);\n        vbool32_t mask_cond1 = vmfle_vv_f32m1_b32(abs_diff, fifty, vl);\n        \n        vuint32m1_t v_index = vid_v_u32m1(vl);\n        uint32_t base_parity = i & 1;\n        vuint32m1_t v_parity = vand_vx_u32m1(v_index, 1, vl);\n        vbool32_t mask_cond2 = vmseq_vx_u32m1_b32(v_parity, base_parity, vl);\n        \n        vbool32_t mask = vmand_mm_b32(mask_cond1, mask_cond2, vl);\n        \n        vfloat32m1_t product = vfmul_vv_f32m1(v1, v2, vl);\n        vfloat32m1_t res = vfmv_v_f_f32m1(-1.0f, vl);\n        vfloat32m1_t ceil_val = vfceil_v_f32m1_m(mask, res, product, vl);\n        \n        vse32_v_f32m1(dst + i, ceil_val, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t avl = length;\n    size_t base = 0;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t v_src1 = vle32_v_f32m1(src1, vl);\n        vfloat32m1_t v_src2 = vle32_v_f32m1(src2, vl);\n        \n        vfloat32m1_t v_diff = vfsub_vv_f32m1(v_src1, v_src2, vl);\n        v_diff = vfabs_v_f32m1(v_diff, vl);\n        vbool32_t mask_cond1 = vmfle_vf_f32m1_b32(v_diff, 50.0f, vl);\n        \n        vuint32m1_t v_index = vid_v_u32m1(vl);\n        vuint32m1_t v_global_index = vadd_vx_u32m1(v_index, base, vl);\n        vuint32m1_t v_low_bit = vand_vx_u32m1(v_global_index, 1, vl);\n        vbool32_t mask_cond2 = vmseq_vx_u32m1_b32(v_low_bit, 0, vl);\n        \n        vbool32_t mask_valid = vmand_mm_b32(mask_cond1, mask_cond2, vl);\n        \n        vfloat32m1_t v_prod = vfmul_vv_f32m1(v_src1, v_src2, vl);\n        vint32m1_t v_prod_i = vfcvt_rtz_x_f_v_i32m1(v_prod, vl);\n        vfloat32m1_t v_trunc = vfcvt_f_x_v_f32m1(v_prod_i, vl);\n        \n        vbool32_t mask_positive = vmfgt_vf_f32m1_b32(v_prod, 0.0f, vl);\n        vbool32_t mask_not_integer = vmfne_vv_f32m1_b32(v_prod, v_trunc, vl);\n        vbool32_t mask_adj = vmand_mm_b32(mask_positive, mask_not_integer, vl);\n        \n        vfloat32m1_t v_adj = vfadd_vf_f32m1(v_trunc, 1.0f, vl);\n        vfloat32m1_t v_ceil = vmerge_vvm_f32m1(mask_adj, v_adj, v_trunc, vl);\n        vfloat32m1_t v_result = vmerge_vvm_f32m1(mask_valid, v_ceil, vfmv_v_f_f32m1(-1.0f, vl), vl);\n        \n        vse32_v_f32m1(dst, v_result, vl);\n        \n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        avl -= vl;\n        base += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t avl = length;\n    size_t i = 0;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t src1_vec = __riscv_vle32_v_f32m1(src1 + i, vl);\n        vfloat32m1_t src2_vec = __riscv_vle32_v_f32m1(src2 + i, vl);\n        vfloat32m1_t diff = __riscv_vfsub_vv_f32m1(src1_vec, src2_vec, vl);\n        vfloat32m1_t abs_diff = __riscv_vfabs_v_f32m1(diff, vl);\n        vbool32_t mask1 = __riscv_vmfle_vf_f32m1_b32(abs_diff, 50.0f, vl);\n        vint32m1_t vid_vec = __riscv_vid_v_i32m1(vl);\n        vint32m1_t base_parity_vec = __riscv_vmv_v_x_i32m1(i & 1, vl);\n        vint32m1_t vid_parity = __riscv_vand_vx_i32m1(vid_vec, 1, vl);\n        vbool32_t mask2 = __riscv_vmseq_vv_i32m1_b32(vid_parity, base_parity_vec, vl);\n        vbool32_t mask_cond = __riscv_vmand_mm_b32(mask1, mask2, vl);\n        vfloat32m1_t product = __riscv_vfmul_vv_f32m1(src1_vec, src2_vec, vl);\n        vfloat32m1_t rounded = __riscv_vfceil_f32m1(product, vl);\n        vfloat32m1_t default_val = __riscv_vfmv_v_f_f32m1(-1.0f, vl);\n        vfloat32m1_t res = __riscv_vmerge_vvm_f32m1(default_val, rounded, mask_cond, vl);\n        __riscv_vse32_v_f32m1(dst + i, res, vl);\n        i += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        vfloat32m1_t va = __riscv_vle32_v_f32m1(src1 + i, vl);\n        vfloat32m1_t vb = __riscv_vle32_v_f32m1(src2 + i, vl);\n        \n        vfloat32m1_t diff = __riscv_vfsub_vv_f32m1(va, vb, vl);\n        vfloat32m1_t abs_diff = __riscv_vfabs_v_f32m1(diff, vl);\n        vbool32_t abs_mask = __riscv_vmfle_vf_f32m1_b32(abs_diff, 50.0, vl);\n        \n        vuint32m1_t vid = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t global_idx = __riscv_vadd_vx_u32m1(vid, i, vl);\n        vuint32m1_t lsb = __riscv_vand_vx_u32m1(global_idx, 1, vl);\n        vbool32_t even_mask = __riscv_vmseq_vx_u32m1_b32(lsb, 0, vl);\n        \n        vbool32_t cond_mask = __riscv_vmand_mm_b32(even_mask, abs_mask, vl);\n        \n        vfloat32m1_t product = __riscv_vfmul_vv_f32m1(va, vb, vl);\n        vfloat32m1_t maskedoff = __riscv_vfmv_v_f_f32m1(-1.0, vl);\n        vfloat32m1_t result = __riscv_vfceil_v_f32m1_m(cond_mask, maskedoff, product, vl);\n        \n        __riscv_vse32_v_f32m1(dst + i, result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        vfloat32m1_t v_src1 = __riscv_vle32_v_f32m1(src1 + i, vl);\n        vfloat32m1_t v_src2 = __riscv_vle32_v_f32m1(src2 + i, vl);\n        vfloat32m1_t v_diff = __riscv_vfsub_vv_f32m1(v_src1, v_src2, vl);\n        v_diff = __riscv_vfabs_v_f32m1(v_diff, vl);\n        vfloat32m1_t v_50 = __riscv_vfmv_v_f_f32m1(50.0f, vl);\n        vbool32_t mask1 = __riscv_vmfle_vv_f32m1_b32(v_diff, v_50, vl);\n        vuint32m1_t vid = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t v_global_index = __riscv_vadd_vx_u32m1(vid, i, vl);\n        vuint32m1_t v_lsb = __riscv_vand_vx_u32m1(v_global_index, 1, vl);\n        vbool32_t mask2 = __riscv_vmseq_vx_u32m1_b32(v_lsb, 0, vl);\n        vbool32_t mask_comb = __riscv_vmand_mm_b32(mask1, mask2, vl);\n        vfloat32m1_t v_prod = __riscv_vfmul_vv_f32m1(v_src1, v_src2, vl);\n        vfloat32m1_t v_dest = __riscv_vfmv_v_f_f32m1(-1.0f, vl);\n        v_dest = __riscv_vfceil_v_f32m1_m(mask_comb, v_dest, v_prod, vl);\n        __riscv_vse32_v_f32m1(dst + i, v_dest, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e64m1(total_elements - i);\n        vfloat64m1_t vec_mat = vle64_v_f64m1(&mat[i], vl);\n        vfloat64m1_t vec_res = vfmul_vf_f64m1(vec_mat, scalar, vl);\n        vse64_v_f64m1(&dst[i], vec_res, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total = m * n;\n    const double* end = mat + total;\n    while (mat < end) {\n        size_t vl = vsetvl_e64m8(end - mat);\n        vfloat64m8_t vec_mat = vle64_v_f64m8(mat, vl);\n        vfloat64m8_t vec_res = vfmul_vf_f64m8(vec_mat, scalar, vl);\n        vse64_v_f64m8(dst, vec_res, vl);\n        mat += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t index = 0;\n    while (index < total_elements) {\n        size_t vl = vsetvl_e64m1(total_elements - index);\n        vfloat64m1_t vec = vle64_v_f64m1(&mat[index], vl);\n        vfloat64m1_t result = vfmul_vf_f64m1(vec, scalar, vl);\n        vse64_v_f64m1(&dst[index], result, vl);\n        index += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e64m8(total_elements - i);\n        vfloat64m8_t vec_mat = vle64_v_f64m8(&mat[i], vl);\n        vfloat64m8_t vec_res = vfmul_vf_f64m8(vec_mat, scalar, vl);\n        vse64_v_f64m8(&dst[i], vec_res, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t avl = total_elements;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = vsetvl_e64m1(avl);\n        vfloat64m1_t vec_mat = vle64_v_f64m1(mat, vl);\n        vfloat64m1_t vec_res = vfmul_vf_f64m1(vec_mat, scalar, vl);\n        vse64_v_f64m1(dst, vec_res, vl);\n        mat += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float *row_ptr = mat + i * n;\n        float sum = 0.0f;\n        size_t avl = n;\n\n        while (avl > 0) {\n            size_t vl = vsetvl_e32m1(avl);\n            vfloat32m1_t v_row = vle32_v_f32m1(row_ptr, vl);\n            vfloat32m1_t v_sq = vfmul_vv_f32m1(v_row, v_row, vl);\n            vfloat32m1_t v_dest = vfmv_v_f_f32m1(0.0f, vl);\n            v_dest = vfredusum_vs_f32m1_f32m1(v_dest, v_sq, v_dest, vl);\n            sum += vfmv_f_s_f32m1_f32(v_dest);\n            row_ptr += vl;\n            avl -= vl;\n        }\n\n        float norm = sqrtf(sum);\n        if (norm == 0.0f) {\n            continue;\n        }\n\n        row_ptr = mat + i * n;\n        avl = n;\n        while (avl > 0) {\n            size_t vl = vsetvl_e32m1(avl);\n            vfloat32m1_t v_row = vle32_v_f32m1(row_ptr, vl);\n            vfloat32m1_t v_norm = vfmv_v_f_f32m1(norm, vl);\n            vfloat32m1_t v_normalized = vfdiv_vv_f32m1(v_row, v_norm, vl);\n            vse32_v_f32m1(row_ptr, v_normalized, vl);\n            row_ptr += vl;\n            avl -= vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float sq_sum = 0.0f;\n        size_t vl;\n        vfloat32m1_t v_sum_seg;\n        size_t j = 0;\n        while (j < n) {\n            vl = vsetvl_e32m8(n - j);\n            vfloat32m8_t v = vle32_v_f32m8(&mat[i * n + j], vl);\n            vfloat32m8_t v_sq = vfmul_vv_f32m8(v, v, vl);\n            vfloat32m1_t v_zero = vfmv_s_f_f32m1(0.0f);\n            v_sum_seg = vfredusum_vs_f32m8_f32m1(v_sq, v_zero, vl);\n            sq_sum += vfmv_f_s_f32m1_f32(v_sum_seg);\n            j += vl;\n        }\n\n        float norm = sqrtf(sq_sum);\n        if (norm != 0.0f) {\n            j = 0;\n            while (j < n) {\n                vl = vsetvl_e32m8(n - j);\n                vfloat32m8_t v = vle32_v_f32m8(&mat[i * n + j], vl);\n                vfloat32m8_t v_norm = vfdiv_vf_f32m8(v, norm, vl);\n                vse32_v_f32m8(&mat[i * n + j], v_norm, vl);\n                j += vl;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float* row_ptr = mat + i * n;\n        size_t vl;\n        vl = vsetvl_e32m1(1);\n        vfloat32m1_t vec_sum = vfmv_s_f_f32m1(0.0f, vl);\n        \n        for (size_t j = 0; j < n; ) {\n            vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t v_data = vle32_v_f32m1(row_ptr + j, vl);\n            vfloat32m1_t v_square = vfmul_vv_f32m1(v_data, v_data, vl);\n            vec_sum = vfredusum_vs_f32m1_f32m1(vec_sum, v_square, vec_sum, vl);\n            j += vl;\n        }\n        \n        float sum = vfmv_f_s_f32m1_f32(vec_sum);\n        float norm = sqrtf(sum);\n        if (norm != 0.0f) {\n            float inv_norm = 1.0f / norm;\n            for (size_t j = 0; j < n; ) {\n                vl = vsetvl_e32m1(n - j);\n                vfloat32m1_t v_data = vle32_v_f32m1(row_ptr + j, vl);\n                v_data = vfmul_vf_f32m1(v_data, inv_norm, vl);\n                vse32_v_f32m1(row_ptr + j, v_data, vl);\n                j += vl;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        vfloat32m1_t vred = vfmv_s_f_f32m1(vundefined_f32m1(), 0.0f, 1);\n        size_t j = 0;\n        while (j < n) {\n            size_t vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t vec = vle32_v_f32m1(&mat[i * n + j], vl);\n            vfloat32m1_t squared = vfmul_vv_f32m1(vec, vec, vl);\n            vred = vfredusum_vs_f32m1_f32m1(squared, vred, vl);\n            j += vl;\n        }\n        float sum = vfmv_f_s_f32m1_f32(vred);\n        float norm = __builtin_sqrtf(sum);\n        float inv_norm = (norm < 1e-8f) ? 1.0f : (1.0f / norm);\n        j = 0;\n        while (j < n) {\n            size_t vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t vec = vle32_v_f32m1(&mat[i * n + j], vl);\n            vfloat32m1_t normalized = vfmul_vf_f32m1(vec, inv_norm, vl);\n            vse32_v_f32m1(&mat[i * n + j], normalized, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float* row = mat + i * n;\n        size_t vl;\n        vfloat32m1_t vred = vfmv_s_f_f32m1(vundefined_f32m1(), 0.0f, 1);\n        for (size_t j = 0; j < n; ) {\n            vl = __riscv_vsetvl_e32m1(n - j);\n            vfloat32m1_t vec = __riscv_vle32_v_f32m1(row + j, vl);\n            vfloat32m1_t vec_sq = __riscv_vfmul_vv_f32m1(vec, vec, vl);\n            vred = __riscv_vfredusum_vs_f32m1_f32m1(vec_sq, vred, vred, vl);\n            j += vl;\n        }\n        float sq_sum = __riscv_vfmv_f_s_f32m1_f32m1(vred);\n        float norm = sqrtf(sq_sum);\n        if (norm == 0.0f) {\n            continue;\n        }\n        for (size_t j = 0; j < n; ) {\n            vl = __riscv_vsetvl_e32m1(n - j);\n            vfloat32m1_t vec = __riscv_vle32_v_f32m1(row + j, vl);\n            vfloat32m1_t vec_div = __riscv_vfdiv_vf_f32m1(vec, norm, vl);\n            __riscv_vse32_v_f32m1(row + j, vec_div, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; ) {\n            size_t vl = vsetvl_e64m1(p - j);\n            vfloat64m1_t v_acc = vfmv_v_f_f64m1(0.0, vl);\n            \n            for (size_t k = 0; k < n; k++) {\n                double a = mat1[i * n + k];\n                const double* mat2_ptr = &mat2[k * p + j];\n                vfloat64m1_t v_b = vle64_v_f64m1(mat2_ptr, vl);\n                v_acc = vfmacc_vf_f64m1(v_acc, a, v_b, vl);\n            }\n            \n            vint64m1_t v_round = vfcvt_x_f_v_i64m1(v_acc, vl);\n            vfloat64m1_t v_result = vfcvt_f_x_v_f64m1(v_round, vl);\n            vse64_v_f64m1(&dst[i * p + j], v_result, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; ) {\n            size_t vl = vsetvl_e64m1(p - j);\n            vfloat64m1_t v_acc = vfmv_v_f_f64m1(0.0, vl);\n\n            for (size_t k = 0; k < n; k++) {\n                double a = mat1[i * n + k];\n                vfloat64m1_t v_b = vle64_v_f64m1(&mat2[k * p + j], vl);\n                v_acc = vfmacc_vf_f64m1(v_acc, a, v_b, vl);\n            }\n\n            vint64m1_t tmp = vfcvt_x_f_v_i64m1(v_acc, vl);\n            vfloat64m1_t v_rounded = vfcvt_f_x_v_f64m1(tmp, vl);\n            vse64_v_f64m1(&dst[i * p + j], v_rounded, vl);\n\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        size_t j = 0;\n        while (j < p) {\n            size_t vl = vsetvl_e64m1(p - j);\n            vfloat64m1_t acc = vfmv_v_f_f64m1(0.0, vl);\n            for (size_t k = 0; k < n; k++) {\n                double a = mat1[i * n + k];\n                vfloat64m1_t b = vle64_v_f64m1(&mat2[k * p + j], vl);\n                vfloat64m1_t prod = vfmul_vf_f64m1(b, a, vl);\n                acc = vfadd_vv_f64m1(acc, prod, vl);\n            }\n            vint64m1_t rounded = vfcvt_x_f_v_i64m1_rm(acc, 0, vl);\n            vfloat64m1_t result = vfcvt_f_x_v_f64m1(rounded, vl);\n            vse64_v_f64m1(&dst[i * p + j], result, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        size_t j = 0;\n        while (j < p) {\n            size_t vl = vsetvl_e64m1(p - j);\n            vfloat64m1_t v_acc = vfmv_v_f_f64m1(0.0, vl);\n            \n            for (size_t k = 0; k < n; k++) {\n                double a = mat1[i * n + k];\n                vfloat64m1_t v_b = vle64_v_f64m1(&mat2[k * p + j], vl);\n                v_acc = vfmacc_vf_f64m1(v_acc, a, v_b, vl);\n            }\n            \n            vint64m1_t rounded_int = vfcvt_x_f_v_i64m1(v_acc, vl);\n            vfloat64m1_t result = vfcvt_f_x_v_f64m1(rounded_int, vl);\n            vse64_v_f64m1(&dst[i * p + j], result, vl);\n            \n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        size_t j = 0;\n        while (j < p) {\n            size_t vl = __riscv_vsetvl_e64m1(p - j);\n            vfloat64m1_t acc = __riscv_vfmv_v_f_f64m1(0.0, vl);\n            for (size_t k = 0; k < n; k++) {\n                double a = mat1[i * n + k];\n                vfloat64m1_t b_vec = __riscv_vle64_v_f64m1(mat2 + k * p + j, vl);\n                acc = __riscv_vfmacc_vf_f64m1(acc, a, b_vec, vl);\n            }\n            vint64m1_t rounded_int = __riscv_vfcvt_x_f_v_i64m1(acc, vl);\n            vfloat64m1_t result = __riscv_vfcvt_f_x_v_f64m1(rounded_int, vl);\n            __riscv_vse64_v_f64m1(dst + i * p + j, result, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t k = 0; k < cols; k++) {\n        for (size_t j = 0; j < rows; ) {\n            size_t vl = vsetvl_e32m1(rows - j);\n            vfloat32m1_t vec = vlse32_v_f32m1(src + j * cols + k, cols * sizeof(float), vl);\n            vfloat32m1_t mul4 = vfmul_vf_f32m1(vec, 4.0f, vl);\n            vfloat32m1_t rounded = vfrndne_v_f32m1(mul4, vl);\n            vfloat32m1_t result = vfmul_vf_f32m1(rounded, 0.25f, vl);\n            vse32_v_f32m1(dst + k * rows + j, result, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t vl;\n    for (size_t i = 0; i < rows; i++) {\n        const float* src_row = src + i * cols;\n        for (size_t j = 0; j < cols; j += vl) {\n            vl = vsetvl_e32m1(cols - j);\n            vfloat32m1_t vec = vle32_v_f32m1(src_row + j, vl);\n            vec = vfmul_vf_f32m1(vec, 4.0f, vl);\n            vec = vfrndne_v_f32m1(vec, vl);\n            vec = vfmul_vf_f32m1(vec, 0.25f, vl);\n            float* store_base = dst + j * rows + i;\n            ptrdiff_t stride = rows * sizeof(float);\n            vse32_v_f32m1(store_base, vec, stride, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t j = 0; j < rows; j++) {\n        size_t i = 0;\n        while (i < cols) {\n            size_t vl = vsetvl_e32m4(cols - i);\n            vfloat32m4_t vec = vle32_v_f32m4(src + j * cols + i, vl);\n            vfloat32m4_t scaled = vfmul_vf_f32m4(vec, 4.0f, vl);\n            vfloat32m4_t rounded = vfroundne_v_f32m4(scaled, vl);\n            vfloat32m4_t result = vfmul_vf_f32m4(rounded, 0.25f, vl);\n            vsse32_v_f32m4(dst + j + i * rows, rows * sizeof(float), result, vl);\n            i += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t j = 0; j < cols; j++) {\n        const float* src_col = src + j;\n        float* dst_row = dst + j * rows;\n        size_t avl = rows;\n        while (avl > 0) {\n            size_t vl = vsetvl_e32m1(avl);\n            vfloat32m1_t vec = vlse32_v_f32m1(src_col, cols * sizeof(float), vl);\n            vfloat32m1_t mul4 = vfmul_vf_f32m1(vec, 4.0f, vl);\n            vfloat32m1_t rounded = vfrne_v_f32m1(mul4, vl);\n            vfloat32m1_t result = vfmul_vf_f32m1(rounded, 0.25f, vl);\n            vse32_v_f32m1(dst_row, result, vl);\n            src_col += vl * cols;\n            dst_row += vl;\n            avl -= vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t j = 0; j < cols; j++) {\n        size_t i = 0;\n        while (i < rows) {\n            size_t vl = vsetvl_e32m1(rows - i);\n            const float* base = src + i * cols + j;\n            vfloat32m1_t vec = vlse32_v_f32m1(base, cols * sizeof(float), vl);\n            vec = vfmul_vf_f32m1(vec, 4.0f, vl);\n            vint32m1_t rounded = vfcvt_x_f_v_i32m1(vec, vl);\n            vec = vfcvt_f_x_v_f32m1(rounded, vl);\n            vec = vfmul_vf_f32m1(vec, 0.25f, vl);\n            vse32_v_f32m1(dst + j * rows + i, vec, vl);\n            i += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    const float boundary_val = 8388608.0f; // 2^23\n\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e32m1(total_elements - i);\n        vfloat32m1_t t1 = vle32_v_f32m1(tensor1 + i, vl);\n        vfloat32m1_t t2 = vle32_v_f32m1(tensor2 + i, vl);\n        vfloat32m1_t diff = vfsub_vv_f32m1(t1, t2, vl);\n        vfloat32m1_t abs_diff = vfabs_v_f32m1(diff, vl);\n        vbool32_t mask = vmflt_vf_f32m1_b32(abs_diff, boundary_val, vl);\n        vint32m1_t int_val = vfcvt_rtz_x_f_v_i32m1_m(mask, vundefined_i32m1(), diff, vl);\n        vfloat32m1_t trunc_val = vfcvt_f_x_v_f32m1_m(mask, vundefined_f32m1(), int_val, vl);\n        vfloat32m1_t res = vmerge_vvm_f32m1(mask, trunc_val, diff, vl);\n        vse32_v_f32m1(dst + i, res, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t avl = total_elements;\n    \n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t vec1 = vle32_v_f32m1(tensor1, vl);\n        vfloat32m1_t vec2 = vle32_v_f32m1(tensor2, vl);\n        vfloat32m1_t sub = vfsub_vv_f32m1(vec1, vec2, vl);\n        vint32m1_t trunc_i = vfcvt_rtz_x_f_v_i32m1(sub, vl);\n        vfloat32m1_t trunc_f = vfcvt_f_x_v_f32m1(trunc_i, vl);\n        vse32_v_f32m1(dst, trunc_f, vl);\n        \n        tensor1 += vl;\n        tensor2 += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = __riscv_vsetvl_e32m1(total_elements - i);\n        vfloat32m1_t t1 = __riscv_vle32_v_f32m1(tensor1 + i, vl);\n        vfloat32m1_t t2 = __riscv_vle32_v_f32m1(tensor2 + i, vl);\n        vfloat32m1_t sub = __riscv_vfsub_vv_f32m1(t1, t2, vl);\n        vfloat32m1_t rounded = __riscv_vfrnd_v_f32m1_rm(sub, 1, vl);\n        __riscv_vse32_v_f32m1(dst + i, rounded, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t offset = 0; offset < total_elements; ) {\n        vl = vsetvl_e32m1(total_elements - offset);\n        vfloat32m1_t t1 = vle32_v_f32m1(tensor1 + offset, vl);\n        vfloat32m1_t t2 = vle32_v_f32m1(tensor2 + offset, vl);\n        vfloat32m1_t diff = vfsub_vv_f32m1(t1, t2, vl);\n        vint32m1_t trunc_int = vfcvt_rtz_x_f_v_i32m1(diff, vl);\n        vfloat32m1_t result = vfcvt_f_x_v_f32m1(trunc_int, vl);\n        vse32_v_f32m1(dst + offset, result, vl);\n        offset += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t offset = 0; offset < total_elements; offset += vl) {\n        vl = vsetvl_e32m1(total_elements - offset);\n        vfloat32m1_t vec_t1 = vle32_v_f32m1(tensor1 + offset, vl);\n        vfloat32m1_t vec_t2 = vle32_v_f32m1(tensor2 + offset, vl);\n        vfloat32m1_t vec_sub = vfsub_vv_f32m1(vec_t1, vec_t2, vl);\n        vint32m1_t vec_trunc_int = vfcvt_rtz_x_f_v_i32m1(vec_sub, vl);\n        vfloat32m1_t vec_trunc = vfcvt_f_x_v_f32m1(vec_trunc_int, vl);\n        vse32_v_f32m1(dst + offset, vec_trunc, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e64m1(total_elements - i);\n        vfloat64m1_t vec1 = vle64_v_f64m1(&mat1[i], vl);\n        vfloat64m1_t vec2 = vle64_v_f64m1(&mat2[i], vl);\n        vfloat64m1_t res_vec = vfmul_vv_f64m1(vec1, vec2, vl);\n        vse64_v_f64m1(&dst[i], res_vec, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t vl;\n    for (size_t current = 0; current < total_elements; ) {\n        vl = vsetvl_e64m1(total_elements - current);\n        vfloat64m1_t vec1 = vle64_v_f64m1(&mat1[current], vl);\n        vfloat64m1_t vec2 = vle64_v_f64m1(&mat2[current], vl);\n        vfloat64m1_t res = vfmul_vv_f64m1(vec1, vec2, vl);\n        vse64_v_f64m1(&dst[current], res, vl);\n        current += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t vl;\n    for (size_t offset = 0; offset < total_elements; ) {\n        vl = vsetvl_e64m1(total_elements - offset);\n        vfloat64m1_t vec1 = vle64_v_f64m1(&mat1[offset], vl);\n        vfloat64m1_t vec2 = vle64_v_f64m1(&mat2[offset], vl);\n        vfloat64m1_t res = vfmul_vv_f64m1(vec1, vec2, vl);\n        vse64_v_f64m1(&dst[offset], res, vl);\n        offset += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t vl;\n    for (size_t offset = 0; offset < total_elements; offset += vl) {\n        vl = __riscv_vsetvl_e64m1(total_elements - offset);\n        vfloat64m1_t v1 = __riscv_vle64_v_f64m1(&mat1[offset], vl);\n        vfloat64m1_t v2 = __riscv_vle64_v_f64m1(&mat2[offset], vl);\n        vfloat64m1_t result = __riscv_vfmul_vv_f64m1(v1, v2, vl);\n        __riscv_vse64_v_f64m1(&dst[offset], result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e64m1(total_elements - i);\n        vfloat64m1_t vec1 = vle64_v_f64m1(&mat1[i], vl);\n        vfloat64m1_t vec2 = vle64_v_f64m1(&mat2[i], vl);\n        vfloat64m1_t res = vfmul_vv_f64m1(vec1, vec2, vl);\n        vse64_v_f64m1(&dst[i], res, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        size_t vl_init = __riscv_vsetvl_e32m1(1);\n        vfloat32m1_t v_sum = __riscv_vfmv_v_f_f32m1(0.0f, vl_init);\n        size_t j = 0;\n        while (j < n) {\n            size_t vl = __riscv_vsetvl_e32m1(n - j);\n            vfloat32m1_t v_mat_seg = __riscv_vle32_v_f32m1(mat + i * n + j, vl);\n            vfloat32m1_t v_vec_seg = __riscv_vle32_v_f32m1(vec + j, vl);\n            vfloat32m1_t v_prod = __riscv_vfmul_vv_f32m1(v_mat_seg, v_vec_seg, vl);\n            v_sum = __riscv_vfredusum_vs_f32m1_f32m1(v_prod, v_sum, vl);\n            j += vl;\n        }\n        dst[i] = __riscv_vfmv_f_s_f32m1_f32(v_sum);\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        vfloat32m1_t v_acc = vfmv_s_f_f32m1(0.0f);\n        size_t j = 0;\n        size_t vl;\n        while (j < n) {\n            vl = vsetvl_e32m8(n - j);\n            vfloat32m8_t v_mat = vle32_v_f32m8(&mat[i * n + j], vl);\n            vfloat32m8_t v_vec = vle32_v_f32m8(&vec[j], vl);\n            vfloat32m8_t v_prod = vfmul_vv_f32m8(v_mat, v_vec, vl);\n            v_acc = vfredusum_vs_f32m8_f32m1(v_prod, v_acc, vl);\n            j += vl;\n        }\n        dst[i] = vfmv_f_s_f32m1_f32(v_acc);\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        vfloat32m1_t vec_accum = vfmv_s_f_f32m1(vundefined_f32m1(), 0.0f, 1);\n        size_t j = 0;\n        while (j < n) {\n            size_t vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t mat_vec = vle32_v_f32m1(mat + i * n + j, vl);\n            vfloat32m1_t vec_vec = vle32_v_f32m1(vec + j, vl);\n            vfloat32m1_t prod = vfmul_vv_f32m1(mat_vec, vec_vec, vl);\n            vec_accum = vfredusum_vs_f32m1_f32m1(prod, vec_accum, vl);\n            j += vl;\n        }\n        dst[i] = vfmv_f_s_f32m1_f32(vec_accum);\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float sum = 0.0f;\n        size_t vl;\n        for (size_t j = 0; j < n; j += vl) {\n            vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t v_row = vle32_v_f32m1(&mat[i * n + j], vl);\n            vfloat32m1_t v_vec = vle32_v_f32m1(&vec[j], vl);\n            vfloat32m1_t v_mul = vfmul_vv_f32m1(v_row, v_vec, vl);\n            vfloat32m1_t v_dest = vfmv_v_f_f32m1(0.0f, vl);\n            v_dest = vfredusum_vs_f32m1_f32m1(v_mul, v_dest, vl);\n            sum += vfmv_f_s_f32m1(v_dest);\n        }\n        dst[i] = sum;\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float sum = 0.0f;\n        size_t vl;\n        for (size_t j = 0; j < n; ) {\n            vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t v_mat = vle32_v_f32m1(mat + i * n + j, vl);\n            vfloat32m1_t v_vec = vle32_v_f32m1(vec + j, vl);\n            vfloat32m1_t v_prod = vfmul_vv_f32m1(v_mat, v_vec, vl);\n            vfloat32m1_t v_initial = vfmv_s_f_f32m1(vundefined_f32m1(), sum);\n            vfloat32m1_t v_dest = vfredusum_vs_f32m1_f32m1(v_prod, v_initial, vl);\n            sum = vfmv_f_s_f32m1_f32(v_dest);\n            j += vl;\n        }\n        dst[i] = sum;\n    }\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total = m * n;\n    if (total == 0) {\n        return 0.0;\n    }\n\n    size_t vl;\n    vfloat64m1_t v_sum;\n    vl = vsetvl_e64m1(1);\n    v_sum = vfmv_v_f_f64m1(0.0, vl);\n\n    size_t avl = total;\n    const double* ptr = mat;\n    while (avl > 0) {\n        vl = vsetvl_e64m1(avl);\n        vfloat64m1_t v_vec = vle64_v_f64m1(ptr, vl);\n        v_sum = vfredusum_vs_f64m1_f64m1(v_vec, v_sum, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    double total_sum = vfmv_f_s_f64m1_f64(v_sum);\n    return total_sum / (double)total;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    if (total_elements == 0) {\n        return 0.0;\n    }\n    double total = 0.0;\n    size_t avl = total_elements;\n    const double* ptr = mat;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vfloat64m1_t vec = vle64_v_f64m1(ptr, vl);\n        vfloat64m1_t v_initial = vfmv_v_f_f64m1(0.0, vl);\n        vfloat64m1_t vd = vfredusum_vs_f64m1_f64m1(v_initial, vec, v_initial, vl);\n        double chunk_sum = vfmv_f_s_f64m1_f64(vd);\n        total += chunk_sum;\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return total / (double)total_elements;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t avl = total_elements;\n    size_t vl;\n    vfloat64m1_t vec_sum = __riscv_vfmv_s_f_f64m1(0.0, __riscv_vsetvlmax_e64m1());\n    const double* ptr = mat;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e64m1(avl);\n        vfloat64m1_t vec = __riscv_vle64_v_f64m1(ptr, vl);\n        vec_sum = __riscv_vfredusum_vs_f64m1_f64m1(vec, vec_sum, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    double total_sum = __riscv_vfmv_f_s_f64m1_f64(vec_sum);\n    return total_sum / (double)total_elements;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    const double* ptr = mat;\n    size_t avl = total_elements;\n    vfloat64m1_t v_dest = vfmv_v_f_f64m1(0.0, 1);\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m8(avl);\n        vfloat64m8_t v_vec = vle64_v_f64m8(ptr, vl);\n        v_dest = vfredusum_vs_f64m8_f64m1(v_vec, v_dest, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    double total_sum = vfmv_f_s_f64m1_f64(v_dest);\n    return total_sum / (double)total_elements;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    double s_sum = 0.0;\n    size_t avl = total_elements;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = vsetvl_e64m1(avl);\n        vfloat64m1_t v_vec = vle64_v_f64m1(mat, vl);\n        mat += vl;\n        vfloat64m1_t v_dest = vfmv_s_f_f64m1(v_dest, s_sum, 1);\n        v_dest = vfredusum_vs_f64m1_f64m1(v_dest, v_vec, v_dest, vl);\n        s_sum = vfmv_f_s_f64m1_f64(v_dest);\n        avl -= vl;\n    }\n\n    return s_sum / (double)total_elements;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        bool dir = directions[i];\n        size_t n = cols - 1;\n\n        if (n == 0) {\n            continue;\n        }\n\n        size_t vl;\n        for (size_t j = 0; j < n; ) {\n            vl = vsetvl_e32m8(n - j);\n            vint32m8_t a = vle32_v_i32m8(row_ptr + j, vl);\n            vint32m8_t b = vle32_v_i32m8(row_ptr + j + 1, vl);\n            vbool4_t mask;\n\n            if (dir) {\n                mask = vmsle_vv_i32m8_b4(a, b, vl);\n            } else {\n                mask = vmsge_vv_i32m8_b4(a, b, vl);\n            }\n\n            if (vpopc_b4(mask, vl) != vl) {\n                return false;\n            }\n            j += vl;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        bool dir = directions[i];\n        const int* row_ptr = matrix + i * cols;\n        size_t n = cols;\n\n        if (n <= 1) {\n            continue;\n        }\n\n        size_t remaining = n - 1;\n        size_t j = 0;\n        while (remaining > 0) {\n            size_t vl = vsetvl_e32m4(remaining);\n            vint32m4_t v0 = vle32_v_i32m4(row_ptr + j, vl);\n            vint32m4_t v1 = vle32_v_i32m4(row_ptr + j + 1, vl);\n            vbool1_t mask;\n\n            if (dir) {\n                mask = vmsle_vv_i32m4_b1(v0, v1, vl);\n            } else {\n                mask = vmsle_vv_i32m4_b1(v1, v0, vl);\n            }\n\n            vbool1_t all_ones = vmset_m_b1(vl);\n            vbool1_t mask_inv = vmandnot_mm_b1(all_ones, mask, vl);\n            long first_fail = vfirst_m_b1(mask_inv, vl);\n\n            if (first_fail != -1) {\n                return false;\n            }\n\n            j += vl;\n            remaining -= vl;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    if (rows == 0 || cols <= 1) {\n        return true;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        const int* row = matrix + i * cols;\n        bool dir = directions[i];\n        size_t n = cols - 1;\n        size_t j = 0;\n        \n        while (j < n) {\n            size_t vl = __riscv_vsetvl_e32m8(n - j);\n            vint32m8_t vec1 = __riscv_vle32_v_i32m8(row + j, vl);\n            vint32m8_t vec2 = __riscv_vle32_v_i32m8(row + j + 1, vl);\n            vbool4_t mask;\n            \n            if (dir) {\n                mask = __riscv_vmsle_vv_i32m8_b4(vec1, vec2, vl);\n            } else {\n                mask = __riscv_vmsle_vv_i32m8_b4(vec2, vec1, vl);\n            }\n            \n            size_t cnt = __riscv_vcpop_m_b4(mask, vl);\n            if (cnt != vl) {\n                return false;\n            }\n            j += vl;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    if (cols <= 1) {\n        return true;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        bool dir = directions[i];\n        size_t avl = cols - 1;\n        \n        while (avl > 0) {\n            size_t vl = __riscv_vsetvl_e32m1(avl);\n            vint32m1_t v1 = __riscv_vle32_v_i32m1(row_ptr, vl);\n            vint32m1_t v2 = __riscv_vle32_v_i32m1(row_ptr + 1, vl);\n            \n            vbool32_t mask;\n            if (dir) {\n                mask = __riscv_vmsle_vv_i32m1_b32(v1, v2, vl);\n            } else {\n                mask = __riscv_vmsle_vv_i32m1_b32(v2, v1, vl);\n            }\n            \n            if (__riscv_vcpop_m_b32(mask, vl) != vl) {\n                return false;\n            }\n            \n            row_ptr += vl;\n            avl -= vl;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    if (rows == 0 || cols <= 1) {\n        return true;\n    }\n\n    for (size_t i = 0; i < rows; i++) {\n        const int* row = matrix + i * cols;\n        bool dir = directions[i];\n        size_t remaining = cols - 1;\n        size_t j = 0;\n\n        while (remaining > 0) {\n            size_t vl = vsetvl_e32m1(remaining);\n            vint32m1_t current = vle32_v_i32m1(row + j, vl);\n            vint32m1_t next = vle32_v_i32m1(row + j + 1, vl);\n            vbool32_t mask;\n\n            if (dir) {\n                mask = vmsgt_vv_i32m1_b32(current, next, vl);\n            } else {\n                mask = vmslt_vv_i32m1_b32(current, next, vl);\n            }\n\n            if (vfirst_m_b32(mask, vl) != -1) {\n                return false;\n            }\n\n            j += vl;\n            remaining -= vl;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    vint16m1_t base_vec, src_vec, rem_vec, adj_rem_vec, res_vec;\n    vbool16_t mask;\n    \n    while (length > 0) {\n        vl = __riscv_vsetvl_e16m1(length);\n        src_vec = __riscv_vle16_v_i16m1(src, vl);\n        base_vec = __riscv_vmv_v_x_i16m1((int16_t)base, vl);\n        rem_vec = __riscv_vrem_vv_i16m1(src_vec, base_vec, vl);\n        mask = __riscv_vmslt_vx_i16m1_b16(rem_vec, 0, vl);\n        adj_rem_vec = __riscv_vadd_vv_i16m1_m(mask, rem_vec, rem_vec, base_vec, vl);\n        res_vec = __riscv_vsub_vv_i16m1(src_vec, adj_rem_vec, vl);\n        __riscv_vse16_v_i16m1(dst, res_vec, vl);\n        \n        src += vl;\n        dst += vl;\n        length -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    int16_t base16 = (int16_t)base;\n    size_t avl = length;\n    size_t vl;\n    while (avl > 0) {\n        vl = vsetvl_e16m1(avl);\n        vint16m1_t v_src = vle16_v_i16m1(src, vl);\n        vint16m1_t v_rem = vrem_vx_i16m1(v_src, base16, vl);\n        vint16m1_t v_candidate = vsub_vv_i16m1(v_src, v_rem, vl);\n        vbool16_t mask_neg = vmslt_vx_i16m1_b16(v_src, 0, vl);\n        vbool16_t mask_nonzero = vmsne_vx_i16m1_b16(v_rem, 0, vl);\n        vbool16_t mask_adjust = vmand_mm_b16(mask_neg, mask_nonzero, vl);\n        v_candidate = vsub_vx_i16m1_m(mask_adjust, v_candidate, v_candidate, base16, vl);\n        vse16_v_i16m1(dst, v_candidate, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t avl = length;\n    int16_t s_base = (int16_t)base;\n    while (avl > 0) {\n        size_t vl = vsetvl_e16m8(avl);\n        vint16m8_t vx = vle16_v_i16m8(src, vl);\n        vint16m8_t v_rem = vrem_vx_i16m8(vx, s_base, vl);\n        vbool2_t mask = vmslt_vx_i16m8_b2(v_rem, 0, vl);\n        v_rem = vadd_vx_i16m8_m(mask, v_rem, v_rem, s_base, vl);\n        vint16m8_t v_result = vsub_vv_i16m8(vx, v_rem, vl);\n        vse16_v_i16m8(dst, v_result, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    float base_f = (float)base;\n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = vsetvl_e16m1(avl);\n        vint16m1_t v_src = vle16_v_i16m1(src, vl);\n        vint32m1_t v_src32 = vwadd_vx_i32m1(v_src, 0, vl);\n        vfloat32m1_t v_src_f = vfcvt_f_x_v_f32m1(v_src32, vl);\n        vfloat32m1_t v_base_f = vfmv_v_f_f32m1(base_f, vl);\n        vfloat32m1_t v_div_f = vfdiv_vv_f32m1(v_src_f, v_base_f, vl);\n        vint32m1_t v_div_i = vfcvt_rtz_x_f_v_i32m1(v_div_f, vl);\n        vfloat32m1_t v_div_i_f = vfcvt_f_x_v_f32m1(v_div_i, vl);\n        vfloat32m1_t v_frac = vfsub_vv_f32m1(v_div_f, v_div_i_f, vl);\n        vfloat32m1_t v_zero = vfmv_v_f_f32m1(0.0f, vl);\n        vbool32_t mask_neg_src = vmslt_vx_i32m1_b32(v_src32, 0, vl);\n        vbool32_t mask_neg_frac = vmflt_vv_f32m1_b32(v_frac, v_zero, vl);\n        vbool32_t adj_mask = vmand_mm_b32(mask_neg_src, mask_neg_frac, vl);\n        vint32m1_t v_floor = vsub_vx_i32m1_m(adj_mask, v_div_i, v_div_i, 1, vl);\n        vint16m1_t v_floor16 = vncvt_x_x_w_i16m1(v_floor, vl);\n        vint16m1_t v_candidate = vmul_vx_i16m1(v_floor16, (int16_t)base, vl);\n        vse16_v_i16m1(dst, v_candidate, vl);\n        src += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = vsetvl_e16m1(avl);\n        vint16m1_t vx = vle16_v_i16m1(src, vl);\n        vint16m1_t vy = vx;\n        int16_t* ptr = (int16_t*)&vy;\n        for (size_t i = 0; i < vl; i++) {\n            int16_t x = ptr[i];\n            int16_t rem = x % (int16_t)base;\n            if (rem < 0) {\n                rem += base;\n            }\n            ptr[i] = x - rem;\n        }\n        vse16_v_i16m1(dst, vy, vl);\n        src += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        const double *row_ptr = matrix + i * cols;\n        const double *vec_ptr = vector;\n        size_t avl = cols;\n        bool match = true;\n        \n        while (avl > 0) {\n            size_t vl = vsetvl_e64m1(avl);\n            vfloat64m1_t row_seg = vle64_v_f64m1(row_ptr, vl);\n            vfloat64m1_t vec_seg = vle64_v_f64m1(vec_ptr, vl);\n            vbool64_t mask = vmfeq_vv_f64m1_b64(row_seg, vec_seg, vl);\n            \n            if (vcpop_m_b64(mask, vl) != vl) {\n                match = false;\n                break;\n            }\n            \n            row_ptr += vl;\n            vec_ptr += vl;\n            avl -= vl;\n        }\n        \n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        const double* row_ptr = matrix + i * cols;\n        size_t j = 0;\n        bool match = true;\n        \n        while (j < cols) {\n            size_t vl = vsetvl_e64m1(cols - j);\n            vfloat64m1_t row_segment = vle64_v_f64m1(row_ptr + j, vl);\n            vfloat64m1_t vec_segment = vle64_v_f64m1(vector + j, vl);\n            vbool64_t cmp_mask = vmfeq_vv_f64m1_b64(row_segment, vec_segment, vl);\n            \n            if (vcpop_m_b64(cmp_mask, vl) != vl) {\n                match = false;\n                break;\n            }\n            j += vl;\n        }\n        \n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const double* row_ptr = matrix + i * cols;\n        bool match = true;\n        size_t j = 0;\n        while (j < cols) {\n            size_t vl = vsetvl_e64m1(cols - j);\n            vfloat64m1_t row_seg = vle64_v_f64m1(row_ptr + j, vl);\n            vfloat64m1_t vec_seg = vle64_v_f64m1(vector + j, vl);\n            vbool64_t cmp_mask = vmfne_vv_f64m1_b64(row_seg, vec_seg, vl);\n            if (vfirst_m_b64(cmp_mask, vl) != -1) {\n                match = false;\n                break;\n            }\n            j += vl;\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        const double* row = matrix + i * cols;\n        bool match = true;\n        size_t avl = cols;\n        size_t j = 0;\n        while (avl > 0) {\n            size_t vl = vsetvl_e64m1(avl);\n            vfloat64m1_t row_vec = vle64_v_f64m1(row + j, vl);\n            vfloat64m1_t vec_vec = vle64_v_f64m1(vector + j, vl);\n            vbool64_t cmp = vmfne_vv_f64m1_b64(row_vec, vec_vec, vl);\n            if (vfirst_m_b64(cmp, vl) != -1) {\n                match = false;\n                break;\n            }\n            j += vl;\n            avl -= vl;\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        const double* row_start = matrix + i * cols;\n        size_t j = 0;\n        while (j < cols) {\n            size_t vl = vsetvl_e64m1(cols - j);\n            vfloat64m1_t row_vec = vle64_v_f64m1(row_start + j, vl);\n            vfloat64m1_t vec_vec = vle64_v_f64m1(vector + j, vl);\n            vbool64_t mask = vmfeq_vv_f64m1_b64(row_vec, vec_vec, vl);\n            long count = vcpop_m_b64(mask, vl);\n            if (count != vl) break;\n            j += vl;\n        }\n        if (j == cols) return true;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e8m1(total_elements - i);\n        vuint8m1_t va = vle8_v_u8m1(A + i, vl);\n        vuint8m1_t vb = vle8_v_u8m1(B + i, vl);\n        vbool8_t cmp = vmseq_vv_u8m1_b8(va, vb, vl);\n        count += vcpop_m_b8(cmp, vl);\n        i += vl;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t vl;\n    for (size_t avl = total_elements; avl > 0; ) {\n        vl = __riscv_vsetvl_e8m8(avl);\n        vuint8m8_t a_vec = __riscv_vle8_v_u8m8(A, vl);\n        vuint8m8_t b_vec = __riscv_vle8_v_u8m8(B, vl);\n        vbool1_t mask = __riscv_vmseq_vv_u8m8_b1(a_vec, b_vec, vl);\n        count += __riscv_vcpop_m_b1(mask, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t vl;\n    \n    for (size_t i = 0; i < total_elements; ) {\n        vl = __riscv_vsetvl_e8m1(total_elements - i);\n        vuint8m1_t a_vec = __riscv_vle8_v_u8m1(A + i, vl);\n        vuint8m1_t b_vec = __riscv_vle8_v_u8m1(B + i, vl);\n        vbool8_t mask = __riscv_vmseq_vv_u8m1_b8(a_vec, b_vec, vl);\n        count += __riscv_vcpop_m_b8(mask, vl);\n        i += vl;\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t vl;\n    for (size_t n = total_elements; n > 0; n -= vl) {\n        vl = vsetvl_e8m1(n);\n        vuint8m1_t a_vec = vle8_v_u8m1(A, vl);\n        vuint8m1_t b_vec = vle8_v_u8m1(B, vl);\n        vbool8_t mask = vmseq_vv_u8m1_b8(a_vec, b_vec, vl);\n        count += vpopc_b8(mask, vl);\n        A += vl;\n        B += vl;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t vl;\n    const uint8_t* a_ptr = A;\n    const uint8_t* b_ptr = B;\n    size_t count = 0;\n\n    while (total_elements > 0) {\n        vl = __riscv_vsetvl_e8m8(total_elements);\n        vuint8m8_t va = __riscv_vle8_v_u8m8(a_ptr, vl);\n        vuint8m8_t vb = __riscv_vle8_v_u8m8(b_ptr, vl);\n        vbool1_t mask = __riscv_vmseq_vv_u8m8_b1(va, vb, vl);\n        count += __riscv_vcpop_m_b1(mask, vl);\n        a_ptr += vl;\n        b_ptr += vl;\n        total_elements -= vl;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl;\n    for (size_t n = length; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e64m1(n);\n        vint64m1_t vx = __riscv_vle64_v_i64m1(x, vl);\n        vint64m1_t vy = __riscv_vle64_v_i64m1(y, vl);\n        vint64m1_t abs_y = __riscv_vabs_v_i64m1(vy, vl);\n        vint64m1_t prod = __riscv_vmul_vx_i64m1(vx, a, vl);\n        vint64m1_t res = __riscv_vsub_vv_i64m1(abs_y, prod, vl);\n        __riscv_vse64_v_i64m1(y, res, vl);\n        x += vl;\n        y += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t n = 0;\n    size_t vl;\n    for (; n < length; ) {\n        vl = __riscv_vsetvl_e64m8(length - n);\n        vint64m8_t v_x = __riscv_vle64_v_i64m8(x + n, vl);\n        vint64m8_t v_y_orig = __riscv_vle64_v_i64m8(y + n, vl);\n        vint64m8_t v_temp = __riscv_vmul_vx_i64m8(v_x, a, vl);\n        vbool8_t mask = __riscv_vmslt_vx_i64m8_b8(v_y_orig, 0, vl);\n        vint64m8_t v_neg_y = __riscv_vrsub_vx_i64m8(v_y_orig, 0, vl);\n        vint64m8_t v_abs_y = __riscv_vmerge_vvm_i64m8(v_neg_y, v_y_orig, mask, vl);\n        vint64m8_t v_result = __riscv_vsub_vv_i64m8(v_temp, v_abs_y, vl);\n        __riscv_vse64_v_i64m8(y + n, v_result, vl);\n        n += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t avl = length;\n    const int64_t *ptr_x = x;\n    int64_t *ptr_y = y;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m1(avl);\n        vint64m1_t vec_x = __riscv_vle64_v_i64m1(ptr_x, vl);\n        vint64m1_t vec_y = __riscv_vle64_v_i64m1(ptr_y, vl);\n        vbool64_t mask = __riscv_vmslt_vx_i64m1_b64(vec_y, 0, vl);\n        vint64m1_t abs_y = __riscv_vneg_v_i64m1_m(mask, vec_y, vec_y, vl);\n        vint64m1_t product = __riscv_vmul_vx_i64m1(vec_x, a, vl);\n        vint64m1_t result = __riscv_vsub_vv_i64m1(product, abs_y, vl);\n        __riscv_vse64_v_i64m1(ptr_y, result, vl);\n        ptr_x += vl;\n        ptr_y += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t avl = length;\n    size_t vl;\n    vint64m1_t vx, vy, vy_abs, vax, v_res;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e64m1(avl);\n        vx = __riscv_vle64_v_i64m1(x, vl);\n        vy = __riscv_vle64_v_i64m1(y, vl);\n        vy_abs = __riscv_vabs_v_i64m1(vy, vl);\n        vax = __riscv_vmul_vx_i64m1(vx, a, vl);\n        v_res = __riscv_vsub_vv_i64m1(vy_abs, vax, vl);\n        __riscv_vse64_v_i64m1(y, v_res, vl);\n\n        x += vl;\n        y += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vint64m1_t vx = vle64_v_i64m1(x, vl);\n        vint64m1_t prod = vmul_vx_i64m1(vx, a, vl);\n        vint64m1_t vy = vle64_v_i64m1(y, vl);\n        vint64m1_t sub = vsub_vv_i64m1(prod, vy, vl);\n        vbool64_t mask = vmslt_vx_i64m1_b64(sub, 0, vl);\n        vint64m1_t abs_val = vneg_v_i64m1_m(mask, sub, sub, vl);\n        vse64_v_i64m1(y, abs_val, vl);\n        x += vl;\n        y += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    size_t i = 0;\n    size_t vl;\n    vint16m1_t vec_in;\n    vint16m1_t v_min, v_max;\n    int16_t min_val, max_val;\n\n    // Process the first chunk\n    vl = vsetvl_e16m1(length);\n    vec_in = vle16_v_i16m1(vec, vl);\n    int16_t first = vmv_x_s_i16m1_i16(vec_in);\n    min_val = first;\n    v_min = vmv_s_x_i16m1(v_min, min_val);\n    v_min = vredmin_vs_i16m1_i16m1(v_min, vec_in, vl);\n    min_val = vmv_x_s_i16m1_i16(v_min);\n    \n    max_val = first;\n    v_max = vmv_s_x_i16m1(v_max, max_val);\n    v_max = vredmax_vs_i16m1_i16m1(v_max, vec_in, vl);\n    max_val = vmv_x_s_i16m1_i16(v_max);\n    i += vl;\n\n    // Process remaining chunks\n    while (i < length) {\n        vl = vsetvl_e16m1(length - i);\n        vec_in = vle16_v_i16m1(vec + i, vl);\n        \n        v_min = vmv_s_x_i16m1(v_min, min_val);\n        v_min = vredmin_vs_i16m1_i16m1(v_min, vec_in, vl);\n        min_val = vmv_x_s_i16m1_i16(v_min);\n        \n        v_max = vmv_s_x_i16m1(v_max, max_val);\n        v_max = vredmax_vs_i16m1_i16m1(v_max, vec_in, vl);\n        max_val = vmv_x_s_i16m1_i16(v_max);\n        \n        i += vl;\n    }\n\n    result.min_num = min_val;\n    result.max_num = max_val;\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    int16_t min_val = 32767;\n    int16_t max_val = -32768;\n    size_t vl;\n    for (size_t avl = length; avl > 0; avl -= vl, vec += vl) {\n        vl = __riscv_vsetvl_e16m1(avl);\n        vint16m1_t v = __riscv_vle16_v_i16m1(vec, vl);\n        \n        vint16m1_t min_temp = __riscv_vmv_s_x_i16m1(32767, 1);\n        min_temp = __riscv_vredmin_vs_i16m1_i16m1(v, min_temp, min_temp, vl);\n        int16_t chunk_min = __riscv_vmv_x_s_i16m1_i16(min_temp);\n        \n        vint16m1_t max_temp = __riscv_vmv_s_x_i16m1(-32768, 1);\n        max_temp = __riscv_vredmax_vs_i16m1_i16m1(v, max_temp, max_temp, vl);\n        int16_t chunk_max = __riscv_vmv_x_s_i16m1_i16(max_temp);\n        \n        if (chunk_min < min_val) min_val = chunk_min;\n        if (chunk_max > max_val) max_val = chunk_max;\n    }\n    \n    MinMaxPair result = { min_val, max_val };\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    size_t vl;\n    vint16m1_t v_min_accum, v_max_accum, v_data;\n    int16_t first = vec[0];\n    v_min_accum = vmv_v_x_i16m1(first, 1);\n    v_max_accum = vmv_v_x_i16m1(first, 1);\n\n    size_t i = 0;\n    while (i < length) {\n        vl = vsetvl_e16m1(length - i);\n        v_data = vle16_v_i16m1(vec + i, vl);\n        v_min_accum = vredmin_vs_i16m1(v_min_accum, v_data, v_min_accum, vl);\n        v_max_accum = vredmax_vs_i16m1(v_max_accum, v_data, v_max_accum, vl);\n        i += vl;\n    }\n\n    MinMaxPair result;\n    result.min_num = vmv_x_s_i16m1_i16(v_min_accum);\n    result.max_num = vmv_x_s_i16m1_i16(v_max_accum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    int16_t min_val = 32767;\n    int16_t max_val = -32768;\n\n    size_t vl;\n    for (size_t i = 0; i < length; ) {\n        vl = vsetvl_e16m1(length - i);\n        vint16m1_t v_vec = vle16_v_i16m1(vec + i, vl);\n\n        vint16m1_t min_vec = vmv_v_x_i16m1(min_val, vl);\n        min_vec = vredmin_vs_i16m1(min_vec, v_vec, min_vec, vl);\n        min_val = vmv_x_s_i16m1(min_vec);\n\n        vint16m1_t max_vec = vmv_v_x_i16m1(max_val, vl);\n        max_vec = vredmax_vs_i16m1(max_vec, v_vec, max_vec, vl);\n        max_val = vmv_x_s_i16m1(max_vec);\n\n        i += vl;\n    }\n\n    MinMaxPair result;\n    result.min_num = min_val;\n    result.max_num = max_val;\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    int16_t min_val = vec[0];\n    int16_t max_val = vec[0];\n    size_t avl = length;\n    size_t vl;\n\n    for (const int16_t *ptr = vec; avl > 0; ) {\n        vl = vsetvl_e16m1(avl);\n        vint16m1_t v_vec = vle16_v_i16m1(ptr, vl);\n        vint16m1_t v_min_temp = vmv_s_x_i16m1(min_val, vl);\n        vint16m1_t v_max_temp = vmv_s_x_i16m1(max_val, vl);\n        v_min_temp = vredmin_vs_i16m1_i16m1(v_min_temp, v_vec, v_min_temp, vl);\n        v_max_temp = vredmax_vs_i16m1_i16m1(v_max_temp, v_vec, v_max_temp, vl);\n        min_val = vmv_x_s_i16m1_i16(v_min_temp);\n        max_val = vmv_x_s_i16m1_i16(v_max_temp);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    MinMaxPair result = {min_val, max_val};\n    return result;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        if (cols == 1) {\n            continue;\n        }\n        \n        size_t j = 0;\n        size_t vl;\n        bool row_ok = true;\n        \n        while (j < cols - 1) {\n            vl = vsetvl_e32m1(cols - 1 - j);\n            vint32m1_t current_vec = vle32_v_i32m1(row_ptr + j, vl);\n            vint32m1_t next_vec = vle32_v_i32m1(row_ptr + j + 1, vl);\n            vbool32_t mask = vmslt_vv_i32m1_b32(current_vec, next_vec, vl);\n            \n            if (vcpop_m_b32(mask, vl) != vl) {\n                row_ok = false;\n                break;\n            }\n            \n            j += vl;\n        }\n        \n        if (!row_ok) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        const int* row_start = matrix + i * cols;\n        if (cols == 1) {\n            continue;\n        }\n        \n        size_t num_pairs = cols - 1;\n        size_t j = 0;\n        while (num_pairs > 0) {\n            size_t vl = __riscv_vsetvl_e32m1(num_pairs);\n            vint32m1_t current = __riscv_vle32_v_i32m1(row_start + j, vl);\n            vint32m1_t next = __riscv_vle32_v_i32m1(row_start + j + 1, vl);\n            vbool32_t cmp = __riscv_vmslt_vv_i32m1_b32(current, next, vl);\n            size_t count = __riscv_vcpop_m_b32(cmp, vl);\n            if (count != vl) {\n                return false;\n            }\n            j += vl;\n            num_pairs -= vl;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        const int* row = matrix + i * cols;\n        size_t n = cols - 1;\n        if (n == 0) {\n            continue;\n        }\n        \n        size_t vl;\n        for (size_t j = 0; j < n; ) {\n            vl = __riscv_vsetvl_e32m8(n - j);\n            vint32m8_t a = __riscv_vle32_v_i32m8(row + j, vl);\n            vint32m8_t b = __riscv_vle32_v_i32m8(row + j + 1, vl);\n            vbool32_t fail_mask = __riscv_vmge_vv_i32m8_b32(a, b, vl);\n            if (__riscv_vfirst_m_b32(fail_mask, vl) != -1) {\n                return false;\n            }\n            j += vl;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; ++i) {\n        const int* row_ptr = matrix + i * cols;\n        size_t num_comparisons = cols - 1;\n        size_t j = 0;\n        \n        if (num_comparisons == 0) {\n            continue;\n        }\n        \n        while (j < num_comparisons) {\n            size_t vl = vsetvl_e32m1(num_comparisons - j);\n            vint32m1_t current = vle32_v_i32m1(row_ptr + j, vl);\n            vint32m1_t next = vle32_v_i32m1(row_ptr + j + 1, vl);\n            vbool32_t cmp = vmslt_vv_i32m1_b32(current, next, vl);\n            \n            if (vpopc_m_b32(cmp, vl) != vl) {\n                return false;\n            }\n            \n            j += vl;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        size_t n_pairs = cols - 1;\n        if (n_pairs == 0) {\n            continue;\n        }\n        size_t avl = n_pairs;\n        do {\n            size_t vl = __riscv_vsetvl_e32m1(avl);\n            vint32m1_t v0 = __riscv_vle32_v_i32m1(row_ptr, vl);\n            vint32m1_t v1 = __riscv_vle32_v_i32m1(row_ptr + 1, vl);\n            vbool32_t mask = __riscv_vmslt_vv_i32m1_b32(v0, v1, vl);\n            if (__riscv_vcpop_m_b32(mask, vl) != vl) {\n                return false;\n            }\n            row_ptr += vl;\n            avl -= vl;\n        } while (avl > 0);\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t block_rows = rows / block_size;\n    size_t block_cols = cols / block_size;\n\n    for (size_t i = 0; i < block_rows; i++) {\n        for (size_t j = 0; j < block_cols; j++) {\n            if (i == 0 && j == 0) {\n                continue;\n            }\n\n            for (size_t r = 0; r < block_size; r++) {\n                const int* row_ref = matrix + r * cols;\n                const int* row_cur = matrix + (i * block_size + r) * cols + j * block_size;\n                size_t offset = 0;\n                size_t vl;\n                while (offset < block_size) {\n                    vl = vsetvl_e32m1(block_size - offset);\n                    vint32m1_t a = vle32_v_i32m1(row_ref + offset, vl);\n                    vint32m1_t b = vle32_v_i32m1(row_cur + offset, vl);\n                    vbool32_t mask = vmseq_vv_i32m1_b32(a, b, vl);\n                    size_t popcnt = vpopc_m_b32(mask, vl);\n                    if (popcnt != vl) {\n                        return false;\n                    }\n                    offset += vl;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0) \n        return false;\n    if (rows % block_size != 0 || cols % block_size != 0)\n        return false;\n\n    size_t num_block_rows = rows / block_size;\n    size_t num_block_cols = cols / block_size;\n\n    for (size_t i_block = 0; i_block < num_block_rows; i_block++) {\n        for (size_t j_block = 0; j_block < num_block_cols; j_block++) {\n            if (i_block == 0 && j_block == 0) \n                continue;\n\n            for (size_t row_in_block = 0; row_in_block < block_size; row_in_block++) {\n                const int* ref_row = matrix + row_in_block * cols;\n                const int* cur_row = matrix + (i_block * block_size + row_in_block) * cols + j_block * block_size;\n                \n                size_t remaining = block_size;\n                const int* ref_ptr = ref_row;\n                const int* cur_ptr = cur_row;\n                while (remaining > 0) {\n                    size_t vl = vsetvl_e32m1(remaining);\n                    vint32m1_t ref_vec = vle32_v_i32m1(ref_ptr, vl);\n                    vint32m1_t cur_vec = vle32_v_i32m1(cur_ptr, vl);\n                    vbool32_t mask = vmseq_vv_i32m1_b32(ref_vec, cur_vec, vl);\n                    size_t popcnt = vcpop_m_b32(mask, vl);\n                    if (popcnt != vl) {\n                        return false;\n                    }\n                    ref_ptr += vl;\n                    cur_ptr += vl;\n                    remaining -= vl;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            if (i == 0 && j == 0) {\n                continue;\n            }\n            \n            for (size_t r = 0; r < block_size; r++) {\n                size_t k = 0;\n                while (k < block_size) {\n                    size_t vl = vsetvl_e32m1(block_size - k);\n                    vint32m1_t v_ref = vle32_v_i32m1(matrix + r * cols + k, vl);\n                    vint32m1_t v_cur = vle32_v_i32m1(matrix + (i + r) * cols + j + k, vl);\n                    vbool32_t mask = vmsne_vv_i32m1_b32(v_ref, v_cur, vl);\n                    if (vfirst_m_b32(mask, vl) != -1) {\n                        return false;\n                    }\n                    k += vl;\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0) \n        return false;\n    if (rows % block_size != 0 || cols % block_size != 0)\n        return false;\n        \n    size_t block_rows = rows / block_size;\n    size_t block_cols = cols / block_size;\n    \n    for (size_t i = 0; i < block_rows; i++) {\n        for (size_t j = 0; j < block_cols; j++) {\n            if (i == 0 && j == 0) \n                continue;\n                \n            for (size_t r = 0; r < block_size; r++) {\n                const int* ref_row = matrix + r * cols;\n                const int* cur_row = matrix + (i * block_size + r) * cols + j * block_size;\n                \n                size_t offset = 0;\n                size_t vl;\n                while (offset < block_size) {\n                    vl = vsetvl_e32m1(block_size - offset);\n                    vint32m1_t ref_vec = vle32_v_i32m1(ref_row + offset, vl);\n                    vint32m1_t cur_vec = vle32_v_i32m1(cur_row + offset, vl);\n                    vbool32_t mask = vmsne_vv_i32m1_b32(ref_vec, cur_vec, vl);\n                    if (vfirst_m_b32(mask, vl) != -1) {\n                        return false;\n                    }\n                    offset += vl;\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_rows = rows / block_size;\n    size_t num_blocks_cols = cols / block_size;\n\n    for (size_t block_i = 0; block_i < num_blocks_rows; ++block_i) {\n        for (size_t block_j = 0; block_j < num_blocks_cols; ++block_j) {\n            if (block_i == 0 && block_j == 0) {\n                continue;\n            }\n\n            for (size_t r = 0; r < block_size; ++r) {\n                const int* ref_row = matrix + r * cols;\n                const int* cur_row = matrix + (block_i * block_size + r) * cols + block_j * block_size;\n\n                size_t offset = 0;\n                size_t vl;\n                while (offset < block_size) {\n                    vl = vsetvl_e32m1(block_size - offset);\n                    vint32m1_t ref_vec = vle32_v_i32m1(ref_row + offset, vl);\n                    vint32m1_t cur_vec = vle32_v_i32m1(cur_row + offset, vl);\n                    vbool32_t mask = vmfne_vv_i32m1_b32(ref_vec, cur_vec, vl);\n                    if (vfirst_m_b32(mask, vl) != -1) {\n                        return false;\n                    }\n                    offset += vl;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdbool.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == NULL || block_size == 0) {\n        return false;\n    }\n    size_t n_blocks = length / block_size;\n    if (n_blocks < 1) {\n        return false;\n    }\n\n    for (size_t b = 1; b < n_blocks; b++) {\n        size_t offset = 0;\n        size_t vl;\n        while (offset < block_size) {\n            vl = vsetvl_e64m1(block_size - offset);\n            vfloat64m1_t ref = vle64_v_f64m1(vec + offset, vl);\n            vfloat64m1_t curr = vle64_v_f64m1(vec + b * block_size + offset, vl);\n            vfloat64m1_t diff = vfsub_vv_f64m1(ref, curr, vl);\n            diff = vfabs_v_f64m1(diff, vl);\n            vbool64_t mask = vmfgt_vf_f64m1_b64(diff, tolerance, vl);\n            if (vfirst_m_b64(mask) != -1) {\n                return false;\n            }\n            offset += vl;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == NULL || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks == 0) {\n        return false;\n    }\n\n    for (size_t i = 1; i < num_blocks; i++) {\n        const double* block0 = vec;\n        const double* block_i = vec + i * block_size;\n        size_t avl = block_size;\n\n        while (avl > 0) {\n            size_t vl = vsetvl_e64m1(avl);\n            vfloat64m1_t a = vle64_v_f64m1(block0, vl);\n            vfloat64m1_t b = vle64_v_f64m1(block_i, vl);\n            vfloat64m1_t diff = vfsub_vv_f64m1(a, b, vl);\n            vfloat64m1_t abs_diff = vfabs_v_f64m1(diff, vl);\n            vbool64_t mask = vmfgt_vf_f64m1_b64(abs_diff, tolerance, vl);\n\n            if (vfirst_m_b64(mask, vl) != -1) {\n                return false;\n            }\n\n            block0 += vl;\n            block_i += vl;\n            avl -= vl;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == NULL || block_size == 0 || length < block_size) {\n        return false;\n    }\n    size_t num_blocks = length / block_size;\n    if (num_blocks == 0) {\n        return false;\n    }\n\n    const double *ref_block = vec;\n    for (size_t block_idx = 1; block_idx < num_blocks; block_idx++) {\n        const double *curr_block = vec + block_idx * block_size;\n        size_t offset = 0;\n        while (offset < block_size) {\n            size_t vl = vsetvl_e64m1(block_size - offset);\n            \n            vfloat64m1_t ref_vec = vle64_v_f64m1(ref_block + offset, vl);\n            vfloat64m1_t cur_vec = vle64_v_f64m1(curr_block + offset, vl);\n            vfloat64m1_t diff = vfsub_vv_f64m1(cur_vec, ref_vec, vl);\n            vfloat64m1_t abs_diff = vfabs_v_f64m1(diff, vl);\n            \n            vbool64_t both_non_nan = vmand_mm_b64(\n                vmfeq_vv_f64m1_b64(ref_vec, ref_vec, vl),\n                vmfeq_vv_f64m1_b64(cur_vec, cur_vec, vl),\n                vl\n            );\n            vbool64_t ok = vmfle_vf_f64m1_b64_m(both_non_nan, abs_diff, tolerance, vl);\n            \n            size_t popcnt = vpopc_m_b64(ok, vl);\n            if (popcnt != vl) {\n                return false;\n            }\n            offset += vl;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == NULL || block_size == 0 || length < block_size) {\n        return false;\n    }\n    \n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return true;\n    }\n    \n    for (size_t block_idx = 1; block_idx < num_blocks; block_idx++) {\n        const double* ref = vec;\n        const double* cur = vec + block_idx * block_size;\n        size_t offset = 0;\n        \n        while (offset < block_size) {\n            size_t vl = vsetvl_e64m1(block_size - offset);\n            vfloat64m1_t v_ref = vle64_v_f64m1(ref + offset, vl);\n            vfloat64m1_t v_cur = vle64_v_f64m1(cur + offset, vl);\n            \n            vbool64_t mask_nan_ref = vmfne_vv_f64m1_b64(v_ref, v_ref, vl);\n            if (vpopc_m_b64(mask_nan_ref, vl)) {\n                return false;\n            }\n            \n            vbool64_t mask_nan_cur = vmfne_vv_f64m1_b64(v_cur, v_cur, vl);\n            if (vpopc_m_b64(mask_nan_cur, vl)) {\n                return false;\n            }\n            \n            vfloat64m1_t v_diff = vfsub_vv_f64m1(v_ref, v_cur, vl);\n            vfloat64m1_t v_abs = vfabs_v_f64m1(v_diff, vl);\n            vbool64_t mask_gt = vmfgt_vf_f64m1_b64(v_abs, tolerance, vl);\n            \n            if (vpopc_m_b64(mask_gt, vl)) {\n                return false;\n            }\n            \n            offset += vl;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == NULL || block_size == 0 || length < block_size) {\n        return false;\n    }\n    \n    size_t num_blocks = length / block_size;\n    if (num_blocks <= 1) {\n        return true;\n    }\n\n    for (size_t i = 1; i < num_blocks; i++) {\n        size_t offset = 0;\n        size_t remaining = block_size;\n        while (remaining > 0) {\n            size_t vl = vsetvl_e64m1(remaining);\n            vfloat64m1_t ref = vle64_v_f64m1(vec + offset, vl);\n            vfloat64m1_t cur = vle64_v_f64m1(vec + i * block_size + offset, vl);\n            vfloat64m1_t diff = vfsub_vv_f64m1(cur, ref, vl);\n            vfloat64m1_t abs_diff = vfabs_v_f64m1(diff, vl);\n            vbool64_t cmp = vmfgt_vf_f64m1_b64(abs_diff, tolerance, vl);\n            if (vfirst_m_b64(cmp, vl) != -1) {\n                return false;\n            }\n            offset += vl;\n            remaining -= vl;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double sum = 0.0;\n        size_t n = cols;\n        size_t col_index = 0;\n        while (n > 0) {\n            size_t vl = vsetvl_e64m1(n);\n            vfloat64m1_t vec = vle64_v_f64m1(matrix + i * cols + col_index, vl);\n            vfloat64m1_t squared = vfmul_vv_f64m1(vec, vec, vl);\n            vfloat64m1_t v_initial = vfmv_v_f_f64m1(0.0, vl);\n            vfloat64m1_t v_red = vfredsum_vs_f64m1_f64m1(v_initial, squared, v_initial, vl);\n            double seg_sum = vfmv_f_s_f64m1_f64(v_red);\n            sum += seg_sum;\n            col_index += vl;\n            n -= vl;\n        }\n        double norm = sqrt(sum);\n        result[i] = (norm > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <math.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double squared_sum = 0.0;\n        const double* row_ptr = matrix + i * cols;\n        \n        size_t vl;\n        for (size_t j = 0; j < cols; j += vl) {\n            vl = vsetvl_e64m1(cols - j);\n            vfloat64m1_t v_data = vle64_v_f64m1(row_ptr + j, vl);\n            vfloat64m1_t v_squared = vfmul_vv_f64m1(v_data, v_data, vl);\n            \n            vfloat64m1_t v_zero = vfmv_v_f_f64m1(0.0, vl);\n            vfloat64m1_t v_sum = vfredusum_vs_f64m1_f64m1(v_zero, v_squared, v_zero, vl);\n            \n            squared_sum += vfmv_f_s_f64m1_f64(v_sum);\n        }\n        \n        double norm = sqrt(squared_sum);\n        result[i] = (norm > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double row_sum = 0.0;\n        size_t col_index = 0;\n        while (col_index < cols) {\n            size_t vl = vsetvl_e64m1(cols - col_index);\n            const double* row_ptr = matrix + i * cols + col_index;\n            vfloat64m1_t vec = vle64_v_f64m1(row_ptr, vl);\n            vfloat64m1_t squared = vfmul_vv_f64m1(vec, vec, vl);\n            vfloat64m1_t v_dest = vfmv_v_f_f64m1(0, vl);\n            v_dest = vfredusum_vs_f64m1_f64m1(v_dest, squared, v_dest, vl);\n            double chunk_sum = vfmv_f_s_f64m1_f64(v_dest);\n            row_sum += chunk_sum;\n            col_index += vl;\n        }\n        double norm = sqrt(row_sum);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double row_sum = 0.0;\n        size_t j = 0;\n        size_t vl;\n        for (size_t remain = cols; remain > 0; remain -= vl) {\n            vl = vsetvl_e64m1(remain);\n            vfloat64m1_t v_data = vle64_v_f64m1(matrix + i * cols + j, vl);\n            vfloat64m1_t v_sq = vfmul_vv_f64m1(v_data, v_data, vl);\n            \n            vfloat64m1_t v_dest = vfmv_v_f_f64m1(0.0, vl);\n            v_dest = vfredusum_vs_f64m1_f64m1(v_dest, v_sq, v_dest, vl);\n            double chunk_sum = vfmv_f_s_f64m1_f64(v_dest);\n            row_sum += chunk_sum;\n            \n            j += vl;\n        }\n        \n        double norm = sqrt(row_sum);\n        result[i] = (norm > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i++) {\n        double squared_sum = 0.0;\n        size_t j = 0;\n        size_t vl;\n        while (j < cols) {\n            vl = vsetvl_e64m1(cols - j);\n            vfloat64m1_t vec = vle64_v_f64m1(matrix + i * cols + j, vl);\n            vfloat64m1_t vec_sq = vfmul_vv_f64m1(vec, vec, vl);\n            vfloat64m1_t v_zero = vfmv_v_f_f64m1(0.0, vl);\n            vfloat64m1_t v_sum = vfredusum_vs_f64m1_f64m1(vec_sq, v_zero, vl);\n            squared_sum += vfmv_f_s_f64m1_f64(v_sum);\n            j += vl;\n        }\n        double norm = sqrt(squared_sum);\n        result[i] = (norm > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t a_vec = vle32_v_u32m1(A, vl);\n        vuint32m1_t b_vec = vle32_v_u32m1(B, vl);\n        vuint32m1_t c_vec = vor_vv_u32m1(a_vec, b_vec, vl);\n        vse32_v_u32m1(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t a_vec = vle32_v_u32m1(A, vl);\n        vuint32m1_t b_vec = vle32_v_u32m1(B, vl);\n        vuint32m1_t c_vec = vor_vv_u32m1(a_vec, b_vec, vl);\n        vse32_v_u32m1(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t avl = length;\n    size_t vl;\n    for (; (vl = __riscv_vsetvl_e32m1(avl)) > 0; avl -= vl) {\n        vuint32m1_t va = __riscv_vle32_v_u32m1(A, vl);\n        vuint32m1_t vb = __riscv_vle32_v_u32m1(B, vl);\n        vuint32m1_t vc = __riscv_vor_vv_u32m1(va, vb, vl);\n        __riscv_vse32_v_u32m1(C, vc, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t avl = length;\n    const uint32_t *a_ptr = A;\n    const uint32_t *b_ptr = B;\n    uint32_t *c_ptr = C;\n    \n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t a_vec = vle32_v_u32m1(a_ptr, vl);\n        vuint32m1_t b_vec = vle32_v_u32m1(b_ptr, vl);\n        vuint32m1_t c_vec = vor_vv_u32m1(a_vec, b_vec, vl);\n        vse32_v_u32m1(c_ptr, c_vec, vl);\n        \n        a_ptr += vl;\n        b_ptr += vl;\n        c_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl;\n    for (; length > 0; length -= vl) {\n        vl = vsetvl_e32m8(length);\n        vuint32m8_t a_vec = vle32_v_u32m8(A, vl);\n        vuint32m8_t b_vec = vle32_v_u32m8(B, vl);\n        vuint32m8_t c_vec = vor_vv_u32m8(a_vec, b_vec, vl);\n        vse32_v_u32m8(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t total = 0;\n    size_t vl;\n    vint32m1_t vzero = __riscv_vmv_v_x_i32m1(0, 1);\n    \n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vint8m1_t va = __riscv_vle8_v_i8m1(A, vl);\n        vint8m1_t vb = __riscv_vle8_v_i8m1(B, vl);\n        A += vl;\n        B += vl;\n        \n        vint16m2_t va2 = __riscv_vwmul_vv_i16m2(va, va, vl);\n        vint16m2_t vb2 = __riscv_vwmul_vv_i16m2(vb, vb, vl);\n        vint16m2_t vab = __riscv_vwmul_vv_i16m2(va, vb, vl);\n        \n        vint32m4_t va2_32 = __riscv_vwadd_vx_i32m4(va2, 0, vl);\n        vint32m4_t vb2_32 = __riscv_vwadd_vx_i32m4(vb2, 0, vl);\n        vint32m4_t vab_32 = __riscv_vwadd_vx_i32m4(vab, 0, vl);\n        \n        vint32m4_t vcombined = __riscv_vadd_vv_i32m4(va2_32, vb2_32, vl);\n        vint32m4_t vab2 = __riscv_vadd_vv_i32m4(vab_32, vab_32, vl);\n        vcombined = __riscv_vsub_vv_i32m4(vcombined, vab2, vl);\n        \n        vint32m1_t vsum = __riscv_vredsum_vs_i32m4_i32m1(vcombined, vzero, vl);\n        int32_t chunk_total = __riscv_vmv_x_s_i32m1_i32(vsum);\n        total += (int64_t)chunk_total;\n    }\n    \n    return total;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sumA2 = 0, sumB2 = 0, sumAB = 0;\n    size_t vl;\n    vint64m1_t v_red = vmv_v_x_i64m1(0, 1);\n    \n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = vsetvl_e8m1(avl);\n        vint8m1_t va = vle8_v_i8m1(A, vl);\n        vint8m1_t vb = vle8_v_i8m1(B, vl);\n        \n        vint16m2_t va_w = vwcvt_x_x_v_i16m2(va, vl);\n        vint16m2_t vb_w = vwcvt_x_x_v_i16m2(vb, vl);\n        \n        vint32m4_t temp32;\n        \n        temp32 = vwmul_vv_i32m4(va_w, va_w, vl);\n        v_red = vmv_v_x_i64m1(0, 1);\n        v_red = vwredsum_vs_i32m4_i64m1(temp32, v_red, vl);\n        sumA2 += vmv_x_s_i64m1_i64(v_red);\n        \n        temp32 = vwmul_vv_i32m4(vb_w, vb_w, vl);\n        v_red = vmv_v_x_i64m1(0, 1);\n        v_red = vwredsum_vs_i32m4_i64m1(temp32, v_red, vl);\n        sumB2 += vmv_x_s_i64m1_i64(v_red);\n        \n        temp32 = vwmul_vv_i32m4(va_w, vb_w, vl);\n        v_red = vmv_v_x_i64m1(0, 1);\n        v_red = vwredsum_vs_i32m4_i64m1(temp32, v_red, vl);\n        sumAB += vmv_x_s_i64m1_i64(v_red);\n        \n        A += vl;\n        B += vl;\n    }\n    \n    return sumA2 + sumB2 - 2 * sumAB;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    vint64m1_t v_acc_sqA = vmv_v_x_i64m1(0);\n    vint64m1_t v_acc_sqB = vmv_v_x_i64m1(0);\n    vint64m1_t v_acc_prod = vmv_v_x_i64m1(0);\n    size_t vl;\n    \n    for (; length > 0; length -= vl, A += vl, B += vl) {\n        vl = vsetvl_e8m1(length);\n        vint8m1_t va = vle8_v_i8m1(A, vl);\n        vint8m1_t vb = vle8_v_i8m1(B, vl);\n        \n        vint16m2_t va_sq = vwmul_vv_i16m2(va, va, vl);\n        vint16m2_t vb_sq = vwmul_vv_i16m2(vb, vb, vl);\n        vint16m2_t v_prod = vwmul_vv_i16m2(va, vb, vl);\n        \n        v_acc_sqA = vwredsum_vs_i16m2_i64m1(va_sq, v_acc_sqA, vl);\n        v_acc_sqB = vwredsum_vs_i16m2_i64m1(vb_sq, v_acc_sqB, vl);\n        v_acc_prod = vwredsum_vs_i16m2_i64m1(v_prod, v_acc_prod, vl);\n    }\n    \n    int64_t sum_sqA = vmv_x_s_i64m1_i64(v_acc_sqA);\n    int64_t sum_sqB = vmv_x_s_i64m1_i64(v_acc_sqB);\n    int64_t sum_prod = vmv_x_s_i64m1_i64(v_acc_prod);\n    \n    return sum_sqA + sum_sqB - 2 * sum_prod;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t total_sq = 0;\n    int64_t total_prod = 0;\n    size_t vl;\n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = vsetvl_e8m1(avl);\n        vint8m1_t v_a = vle8_v_i8m1(A, vl);\n        vint8m1_t v_b = vle8_v_i8m1(B, vl);\n        vint16m2_t v_a_sq = vwmul_vv_i16m2(v_a, v_a, vl);\n        vint16m2_t v_prod = vwmul_vv_i16m2(v_a, v_b, vl);\n        vint32m1_t v_sq_red = vmv_v_x_i32m1(0, 1);\n        vint32m1_t v_prod_red = vmv_v_x_i32m1(0, 1);\n        v_sq_red = vwredsum_vs_i16m2_i32m1(v_a_sq, v_sq_red, vl);\n        v_prod_red = vwredsum_vs_i16m2_i32m1(v_prod, v_prod_red, vl);\n        total_sq += (int64_t)vmv_x_s_i32m1_i32(v_sq_red);\n        total_prod += (int64_t)vmv_x_s_i32m1_i32(v_prod_red);\n        A += vl;\n        B += vl;\n    }\n    return total_sq - total_prod;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    if (length == 0) return 0;\n\n    vint64m1_t sumA = vmv_v_x_i64m1(0, 1);\n    vint64m1_t sumB = vmv_v_x_i64m1(0, 1);\n    vint64m1_t sumAB = vmv_v_x_i64m1(0, 1);\n    size_t avl = length;\n\n    do {\n        size_t vl = vsetvl_e8m1(avl);\n        vint8m1_t va = vle8_v_i8m1(A, vl);\n        vint8m1_t vb = vle8_v_i8m1(B, vl);\n\n        vint16m2_t va_sq = vwmul_vv_i16m2(va, va, vl);\n        vint16m2_t vb_sq = vwmul_vv_i16m2(vb, vb, vl);\n        vint16m2_t vab = vwmul_vv_i16m2(va, vb, vl);\n\n        sumA = vwredsum_vs_i16m2_i64m1(va_sq, sumA, vl);\n        sumB = vwredsum_vs_i16m2_i64m1(vb_sq, sumB, vl);\n        sumAB = vwredsum_vs_i16m2_i64m1(vab, sumAB, vl);\n\n        A += vl;\n        B += vl;\n        avl -= vl;\n    } while (avl > 0);\n\n    int64_t sA = vmv_x_s_i64m1_i64(sumA);\n    int64_t sB = vmv_x_s_i64m1_i64(sumB);\n    int64_t sAB = vmv_x_s_i64m1_i64(sumAB);\n\n    return sA + sB - 2 * sAB;\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vuint64m1_t a_vec = vle64_v_u64m1(A, vl);\n        vuint64m1_t b_vec = vle64_v_u64m1(B, vl);\n        vuint64m1_t not_b_vec = vnot_v_u64m1(b_vec, vl);\n        vuint64m1_t result = vand_vv_u64m1(a_vec, not_b_vec, vl);\n        vse64_v_u64m1(C, result, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vuint64m1_t a_vec = vle64_v_u64m1(A, vl);\n        vuint64m1_t b_vec = vle64_v_u64m1(B, vl);\n        vuint64m1_t notb_vec = vnot_v_u64m1(b_vec, vl);\n        vuint64m1_t c_vec = vand_vv_u64m1(a_vec, notb_vec, vl);\n        vse64_v_u64m1(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vuint64m1_t a_vec = vle64_v_u64m1(A, vl);\n        vuint64m1_t b_vec = vle64_v_u64m1(B, vl);\n        vuint64m1_t not_b_vec = vnot_v_u64m1(b_vec, vl);\n        vuint64m1_t res_vec = vand_vv_u64m1(a_vec, not_b_vec, vl);\n        vse64_v_u64m1(C, res_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl;\n    for (; length > 0; length -= vl) {\n        vl = __riscv_vsetvl_e64m1(length);\n        vuint64m1_t va = __riscv_vle64_v_u64m1(A, vl);\n        vuint64m1_t vb = __riscv_vle64_v_u64m1(B, vl);\n        vuint64m1_t vb_neg = __riscv_vnot_v_u64m1(vb, vl);\n        vuint64m1_t vc = __riscv_vand_vv_u64m1(va, vb_neg, vl);\n        __riscv_vse64_v_u64m1(C, vc, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl;\n    for (; length > 0; length -= vl, A += vl, B += vl, C += vl) {\n        vl = __riscv_vsetvl_e64m8(length);\n        vuint64m8_t va = __riscv_vle64_v_u64m8(A, vl);\n        vuint64m8_t vb = __riscv_vle64_v_u64m8(B, vl);\n        vuint64m8_t vb_not = __riscv_vnot_v_u64m8(vb, vl);\n        vuint64m8_t vc = __riscv_vand_vv_u64m8(va, vb_not, vl);\n        __riscv_vse64_v_u64m8(C, vc, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vint8m1_t va = vle8_v_i8m1(A, vl);\n        vint8m1_t vb = vle8_v_i8m1(B, vl);\n        vint8m1_t vc = vmv_v_x_i8m1(0, vl);\n\n        vbool8_t mask_pos = vmand_mm_b8(vmsgt_vx_i8m1_b8(va, 0, vl), vmsgt_vx_i8m1_b8(vb, 0, vl), vl);\n        vc = vmerge_vxm_i8m1(mask_pos, vc, 1, vl);\n\n        vbool8_t mask_neg = vmand_mm_b8(vmslt_vx_i8m1_b8(va, 0, vl), vmslt_vx_i8m1_b8(vb, 0, vl), vl);\n        vc = vmerge_vxm_i8m1(mask_neg, vc, -1, vl);\n\n        vse8_v_i8m1(C, vc, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vint8m1_t va = vle8_v_i8m1(A, vl);\n        vint8m1_t vb = vle8_v_i8m1(B, vl);\n        \n        vbool8_t a_pos = vmsgt_vx_i8m1_b8(va, 0, vl);\n        vbool8_t b_pos = vmsgt_vx_i8m1_b8(vb, 0, vl);\n        vbool8_t both_pos = vmand_mm_b8(a_pos, b_pos, vl);\n        \n        vbool8_t a_neg = vmslt_vx_i8m1_b8(va, 0, vl);\n        vbool8_t b_neg = vmslt_vx_i8m1_b8(vb, 0, vl);\n        vbool8_t both_neg = vmand_mm_b8(a_neg, b_neg, vl);\n        \n        vint8m1_t vc = vmv_v_x_i8m1(0, vl);\n        vc = vmerge_vxm_i8m1(both_pos, vc, 1, vl);\n        vc = vmerge_vxm_i8m1(both_neg, vc, -1, vl);\n        \n        vse8_v_i8m1(C, vc, vl);\n        \n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t vl;\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e8m1(length - i);\n        vint8m1_t a = vle8_v_i8m1(&A[i], vl);\n        vint8m1_t b = vle8_v_i8m1(&B[i], vl);\n        \n        vbool8_t mask_pos = vmand_mm_b8(vmsgt_vx_i8m1_b8(a, 0, vl), vmsgt_vx_i8m1_b8(b, 0, vl), vl);\n        vbool8_t mask_neg = vmand_mm_b8(vmslt_vx_i8m1_b8(a, 0, vl), vmslt_vx_i8m1_b8(b, 0, vl), vl);\n        \n        vint8m1_t res = vmv_v_x_i8m1(0, vl);\n        res = vmerge_vxm_i8m1(mask_pos, res, 1, vl);\n        res = vmerge_vxm_i8m1(mask_neg, res, -1, vl);\n        \n        vse8_v_i8m1(&C[i], res, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vint8m1_t a_vec = vle8_v_i8m1(A, vl);\n        vint8m1_t b_vec = vle8_v_i8m1(B, vl);\n        \n        vbool1_t mask_A_pos = vmsgt_vx_i8m1_b1(a_vec, 0, vl);\n        vbool1_t mask_A_neg = vmslt_vx_i8m1_b1(a_vec, 0, vl);\n        vbool1_t mask_B_pos = vmsgt_vx_i8m1_b1(b_vec, 0, vl);\n        vbool1_t mask_B_neg = vmslt_vx_i8m1_b1(b_vec, 0, vl);\n        \n        vbool1_t mask_both_pos = vmand_mm_b1(mask_A_pos, mask_B_pos, vl);\n        vbool1_t mask_both_neg = vmand_mm_b1(mask_A_neg, mask_B_neg, vl);\n        \n        vint8m1_t c_vec = vmv_v_x_i8m1(0, vl);\n        c_vec = vmerge_vxm_i8m1(mask_both_pos, c_vec, 1, vl);\n        c_vec = vmerge_vxm_i8m1(mask_both_neg, c_vec, -1, vl);\n        \n        vse8_v_i8m1(C, c_vec, vl);\n        \n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vint8m1_t va = vle8_v_i8m1(A, vl);\n        vint8m1_t vb = vle8_v_i8m1(B, vl);\n        \n        vbool8_t mask_a_pos = vmsgt_vx_i8m1_b8(va, 0, vl);\n        vbool8_t mask_b_pos = vmsgt_vx_i8m1_b8(vb, 0, vl);\n        vbool8_t mask_a_neg = vmslt_vx_i8m1_b8(va, 0, vl);\n        vbool8_t mask_b_neg = vmslt_vx_i8m1_b8(vb, 0, vl);\n        \n        vbool8_t mask_both_pos = vmand_mm_b8(mask_a_pos, mask_b_pos, vl);\n        vbool8_t mask_both_neg = vmand_mm_b8(mask_a_neg, mask_b_neg, vl);\n        \n        vint8m1_t vc = vmv_v_x_i8m1(0, vl);\n        vc = vmerge_vxm_i8m1(mask_both_pos, vc, 1, vl);\n        vc = vmerge_vxm_i8m1(mask_both_neg, vc, -1, vl);\n        \n        vse8_v_i8m1(C, vc, vl);\n        \n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    if (length == 0) return;\n    \n    size_t mid = length / 2;\n    size_t part1_len = mid;\n    size_t part3_start = mid + 1;\n    size_t part3_len = length - part3_start;\n    \n    // Process part1: elements before midpoint (XOR operation)\n    size_t offset = 0;\n    while (offset < part1_len) {\n        size_t vl = __riscv_vsetvl_e16m8(part1_len - offset);\n        vuint16m8_t a_vec = __riscv_vle16_v_u16m8(A + offset, vl);\n        vuint16m8_t b_vec = __riscv_vle16_v_u16m8(B + offset, vl);\n        vuint16m8_t c_vec = __riscv_vxor_vv_u16m8(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m8(C + offset, c_vec, vl);\n        offset += vl;\n    }\n    \n    // Process midpoint element\n    C[mid] = A[mid];\n    \n    // Process part3: elements after midpoint (AND operation)\n    offset = 0;\n    while (offset < part3_len) {\n        size_t vl = __riscv_vsetvl_e16m8(part3_len - offset);\n        vuint16m8_t a_vec = __riscv_vle16_v_u16m8(A + part3_start + offset, vl);\n        vuint16m8_t b_vec = __riscv_vle16_v_u16m8(B + part3_start + offset, vl);\n        vuint16m8_t c_vec = __riscv_vand_vv_u16m8(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m8(C + part3_start + offset, c_vec, vl);\n        offset += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    if (length == 0) return;\n    \n    size_t mid_index = length / 2;\n    size_t avl = mid_index;\n    \n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e16m8(avl);\n        vuint16m8_t a_vec = __riscv_vle16_v_u16m8(A, vl);\n        vuint16m8_t b_vec = __riscv_vle16_v_u16m8(B, vl);\n        vuint16m8_t c_vec = __riscv_vxor_vv_u16m8(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m8(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n    \n    if (length % 2 == 1) {\n        *C = *A;\n        A++;\n        B++;\n        C++;\n    }\n    \n    size_t remaining = length - mid_index - (length % 2);\n    size_t avl_after = remaining;\n    \n    while (avl_after > 0) {\n        size_t vl = __riscv_vsetvl_e16m8(avl_after);\n        vuint16m8_t a_vec = __riscv_vle16_v_u16m8(A, vl);\n        vuint16m8_t b_vec = __riscv_vle16_v_u16m8(B, vl);\n        vuint16m8_t c_vec = __riscv_vand_vv_u16m8(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m8(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl_after -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t part1_len = mid;\n    size_t part3_len = length - mid - 1;\n    size_t vl;\n    \n    // Process part1: XOR for elements before midpoint\n    for (size_t n = part1_len; n > 0; ) {\n        vl = __riscv_vsetvl_e16m1(n);\n        vuint16m1_t a_vec = __riscv_vle16_v_u16m1(A, vl);\n        vuint16m1_t b_vec = __riscv_vle16_v_u16m1(B, vl);\n        vuint16m1_t res = __riscv_vxor_vv_u16m1(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m1(C, res, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        n -= vl;\n    }\n    \n    // Handle midpoint element\n    *C++ = *A++;\n    B++;\n    \n    // Process part3: AND for elements after midpoint\n    for (size_t n = part3_len; n > 0; ) {\n        vl = __riscv_vsetvl_e16m1(n);\n        vuint16m1_t a_vec = __riscv_vle16_v_u16m1(A, vl);\n        vuint16m1_t b_vec = __riscv_vle16_v_u16m1(B, vl);\n        vuint16m1_t res = __riscv_vand_vv_u16m1(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m1(C, res, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        n -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid_index = length / 2;\n    size_t first_part_length = mid_index;\n    size_t third_part_length = length - mid_index;\n    if (length % 2 == 1) {\n        third_part_length--;\n    }\n\n    size_t avl = first_part_length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e16m1(avl);\n        vuint16m1_t a_vec = __riscv_vle16_v_u16m1(A, vl);\n        vuint16m1_t b_vec = __riscv_vle16_v_u16m1(B, vl);\n        vuint16m1_t c_vec = __riscv_vxor_vv_u16m1(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m1(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n\n    if (length % 2 == 1) {\n        *C = *A;\n        A++;\n        B++;\n        C++;\n    }\n\n    avl = third_part_length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e16m1(avl);\n        vuint16m1_t a_vec = __riscv_vle16_v_u16m1(A, vl);\n        vuint16m1_t b_vec = __riscv_vle16_v_u16m1(B, vl);\n        vuint16m1_t c_vec = __riscv_vand_vv_u16m1(a_vec, b_vec, vl);\n        __riscv_vse16_v_u16m1(C, c_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    if (length == 0) {\n        return;\n    }\n\n    size_t mid = length / 2;\n    size_t avl = mid;\n    const uint16_t* a_ptr = A;\n    const uint16_t* b_ptr = B;\n    uint16_t* c_ptr = C;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e16m8(avl);\n        vuint16m8_t a_vec = vle16_v_u16m8(a_ptr, vl);\n        vuint16m8_t b_vec = vle16_v_u16m8(b_ptr, vl);\n        vuint16m8_t res_vec = vxor_vv_u16m8(a_vec, b_vec, vl);\n        vse16_v_u16m8(c_ptr, res_vec, vl);\n        a_ptr += vl;\n        b_ptr += vl;\n        c_ptr += vl;\n        avl -= vl;\n    }\n\n    C[mid] = A[mid];\n\n    avl = length - mid - 1;\n    a_ptr = A + mid + 1;\n    b_ptr = B + mid + 1;\n    c_ptr = C + mid + 1;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e16m8(avl);\n        vuint16m8_t a_vec = vle16_v_u16m8(a_ptr, vl);\n        vuint16m8_t b_vec = vle16_v_u16m8(b_ptr, vl);\n        vuint16m8_t res_vec = vand_vv_u16m8(a_vec, b_vec, vl);\n        vse16_v_u16m8(c_ptr, res_vec, vl);\n        a_ptr += vl;\n        b_ptr += vl;\n        c_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t i = 0;\n    while (i < total_elements) {\n        size_t vl = vsetvl_e32m1(total_elements - i);\n        vuint8m1_t cond1_vec = vle8_v_u8m1((const uint8_t*)(cond1 + i), vl);\n        vuint8m1_t cond2_vec = vle8_v_u8m1((const uint8_t*)(cond2 + i), vl);\n        vbool8_t cond1_mask = vmsne_vx_u8m1(cond1_vec, 0, vl);\n        vbool8_t cond2_mask = vmsne_vx_u8m1(cond2_vec, 0, vl);\n        vbool8_t not_cond1_mask = vmnot_m_b8(cond1_mask, vl);\n        vbool8_t not_cond2_mask = vmnot_m_b8(cond2_mask, vl);\n        vbool8_t case0_mask = vmand_mm_b8(not_cond1_mask, not_cond2_mask, vl);\n        vbool8_t case1_mask = vmand_mm_b8(not_cond1_mask, cond2_mask, vl);\n        vbool8_t case2_mask = vmand_mm_b8(cond1_mask, not_cond2_mask, vl);\n        vbool8_t case3_mask = vmand_mm_b8(cond1_mask, cond2_mask, vl);\n        vbool32_t case0_mask32 = vreinterpret_v_b8_b32(case0_mask);\n        vbool32_t case1_mask32 = vreinterpret_v_b8_b32(case1_mask);\n        vbool32_t case2_mask32 = vreinterpret_v_b8_b32(case2_mask);\n        vbool32_t case3_mask32 = vreinterpret_v_b8_b32(case3_mask);\n        vfloat32m1_t a_vec = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t b_vec = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t c_vec = vle32_v_f32m1(C + i, vl);\n        vfloat32m1_t d_vec = vle32_v_f32m1(D + i, vl);\n        vfloat32m1_t result = d_vec;\n        result = vmerge_vvm_f32m1(case1_mask32, result, c_vec, vl);\n        result = vmerge_vvm_f32m1(case2_mask32, result, b_vec, vl);\n        result = vmerge_vvm_f32m1(case3_mask32, result, a_vec, vl);\n        vse32_v_f32m1(out + i, result, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e32m1(total_elements - i);\n        vuint8m1_t cond1_bytes = vle8_v_u8m1((const uint8_t*)(cond1 + i), vl);\n        vuint8m1_t cond2_bytes = vle8_v_u8m1((const uint8_t*)(cond2 + i), vl);\n        vbool32_t mask1 = vmsne_vx_u8m1_b32(cond1_bytes, 0, vl);\n        vbool32_t mask2 = vmsne_vx_u8m1_b32(cond2_bytes, 0, vl);\n        vfloat32m1_t va = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t vb = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t vc = vle32_v_f32m1(C + i, vl);\n        vfloat32m1_t vd = vle32_v_f32m1(D + i, vl);\n        vfloat32m1_t temp1 = vmerge_vvm_f32m1(vb, va, mask2, vl);\n        vfloat32m1_t temp2 = vmerge_vvm_f32m1(vd, vc, mask2, vl);\n        vfloat32m1_t result = vmerge_vvm_f32m1(temp2, temp1, mask1, vl);\n        vse32_v_f32m1(out + i, result, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t n = 0;\n    while (n < total_elements) {\n        size_t vl = vsetvl_e32m1(total_elements - n);\n        vuint8m1_t cond1_u8 = vle8_v_u8m1((const uint8_t*)(cond1 + n), vl);\n        vuint8m1_t cond2_u8 = vle8_v_u8m1((const uint8_t*)(cond2 + n), vl);\n        vuint32m1_t cond1_32 = vzext_vf4_u32m1(cond1_u8, vl);\n        vuint32m1_t cond2_32 = vzext_vf4_u32m1(cond2_u8, vl);\n        vbool32_t mask1 = vmseq_vx_u32m1_b32(cond1_32, 1, vl);\n        vbool32_t mask2 = vmseq_vx_u32m1_b32(cond2_32, 1, vl);\n        vfloat32m1_t a = vle32_v_f32m1(A + n, vl);\n        vfloat32m1_t b = vle32_v_f32m1(B + n, vl);\n        vfloat32m1_t c = vle32_v_f32m1(C + n, vl);\n        vfloat32m1_t d = vle32_v_f32m1(D + n, vl);\n        vfloat32m1_t true_branch = vmerge_vvm_f32m1(mask2, a, b, vl);\n        vfloat32m1_t false_branch = vmerge_vvm_f32m1(mask2, c, d, vl);\n        vfloat32m1_t res = vmerge_vvm_f32m1(mask1, true_branch, false_branch, vl);\n        vse32_v_f32m1(out + n, res, vl);\n        n += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vl = vsetvl_e32m1(total_elements - i);\n        vbool32_t m1 = vlm_v_b32((const uint8_t*)(cond1 + i), vl);\n        vbool32_t m2 = vlm_v_b32((const uint8_t*)(cond2 + i), vl);\n        vfloat32m1_t a_vec = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t b_vec = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t c_vec = vle32_v_f32m1(C + i, vl);\n        vfloat32m1_t d_vec = vle32_v_f32m1(D + i, vl);\n        vfloat32m1_t true_branch = vmerge_vvm_f32m1(m2, a_vec, b_vec, vl);\n        vfloat32m1_t false_branch = vmerge_vvm_f32m1(m2, c_vec, d_vec, vl);\n        vfloat32m1_t res = vmerge_vvm_f32m1(m1, true_branch, false_branch, vl);\n        vse32_v_f32m1(out + i, res, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = vsetvl_e32m1(total_elements - i);\n        vuint8m1_t cond1_byte = vle8_v_u8m1((const uint8_t*)(cond1 + i), vl);\n        vuint8m1_t cond2_byte = vle8_v_u8m1((const uint8_t*)(cond2 + i), vl);\n        vbool32_t mask1 = vmseq_vx_u8m1_b32(cond1_byte, 1, vl);\n        vbool32_t mask2 = vmseq_vx_u8m1_b32(cond2_byte, 1, vl);\n        vfloat32m1_t A_vec = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t B_vec = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t C_vec = vle32_v_f32m1(C + i, vl);\n        vfloat32m1_t D_vec = vle32_v_f32m1(D + i, vl);\n        vfloat32m1_t temp1 = vmerge_vvm_f32m1(mask2, A_vec, B_vec, vl);\n        vfloat32m1_t temp2 = vmerge_vvm_f32m1(mask2, C_vec, D_vec, vl);\n        vfloat32m1_t res = vmerge_vvm_f32m1(mask1, temp1, temp2, vl);\n        vse32_v_f32m1(out + i, res, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t i = 0; i < total; i += vl) {\n        vl = __riscv_vsetvl_e32m1(total - i);\n        vuint32m1_t a_vec = __riscv_vle32_v_u32m1(A + i, vl);\n        vuint32m1_t b_vec = __riscv_vsrl_vx_u32m1(a_vec, 1, vl);\n        b_vec = __riscv_vand_vx_u32m1(b_vec, 0x55555555, vl);\n        vuint32m1_t c_vec = __riscv_vsub_vv_u32m1(a_vec, b_vec, vl);\n        vuint32m1_t d_vec = __riscv_vand_vx_u32m1(c_vec, 0x33333333, vl);\n        vuint32m1_t e_vec = __riscv_vsrl_vx_u32m1(c_vec, 2, vl);\n        e_vec = __riscv_vand_vx_u32m1(e_vec, 0x33333333, vl);\n        vuint32m1_t f_vec = __riscv_vadd_vv_u32m1(d_vec, e_vec, vl);\n        vuint32m1_t g_vec = __riscv_vadd_vv_u32m1(f_vec, __riscv_vsrl_vx_u32m1(f_vec, 4, vl), vl);\n        g_vec = __riscv_vand_vx_u32m1(g_vec, 0x0F0F0F0F, vl);\n        vuint32m1_t h_vec = __riscv_vmul_vx_u32m1(g_vec, 0x01010101, vl);\n        h_vec = __riscv_vsrl_vx_u32m1(h_vec, 24, vl);\n        vuint8mf2_t out_vec = __riscv_vnsrl_wx_u8mf2(h_vec, 0, vl);\n        __riscv_vse8_v_u8mf2(out + i, out_vec, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; ) {\n        vl = __riscv_vsetvl_e32m1(total_elements - i);\n        vuint32m1_t v_a = __riscv_vle32_v_u32m1(&A[i], vl);\n        vuint32m1_t v_b = __riscv_vsrl_vx_u32m1(v_a, 1, vl);\n        v_b = __riscv_vand_vx_u32m1(v_b, 0x55555555, vl);\n        v_a = __riscv_vsub_vv_u32m1(v_a, v_b, vl);\n        v_b = __riscv_vand_vx_u32m1(v_a, 0x33333333, vl);\n        vuint32m1_t v_c = __riscv_vsrl_vx_u32m1(v_a, 2, vl);\n        v_c = __riscv_vand_vx_u32m1(v_c, 0x33333333, vl);\n        v_a = __riscv_vadd_vv_u32m1(v_b, v_c, vl);\n        v_b = __riscv_vsrl_vx_u32m1(v_a, 4, vl);\n        v_a = __riscv_vadd_vv_u32m1(v_a, v_b, vl);\n        v_a = __riscv_vand_vx_u32m1(v_a, 0x0F0F0F0F, vl);\n        v_b = __riscv_vsrl_vx_u32m1(v_a, 8, vl);\n        v_a = __riscv_vadd_vv_u32m1(v_a, v_b, vl);\n        v_b = __riscv_vsrl_vx_u32m1(v_a, 16, vl);\n        v_a = __riscv_vadd_vv_u32m1(v_a, v_b, vl);\n        vuint8m1_t v_out = __riscv_vncvt_x_x_w_u8m1(v_a, vl);\n        __riscv_vse8_v_u8m1(&out[i], v_out, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t n = 0; n < total_elements; n += vl) {\n        vl = __riscv_vsetvl_e32m2(total_elements - n);\n        vuint32m2_t v0 = __riscv_vle32_v_u32m2(A + n, vl);\n\n        vuint32m2_t v1 = __riscv_vsrl_vx_u32m2(v0, 1, vl);\n        vuint32m2_t v2 = __riscv_vand_vx_u32m2(v1, 0x55555555, vl);\n        vuint32m2_t v3 = __riscv_vsub_vv_u32m2(v0, v2, vl);\n\n        vuint32m2_t v4 = __riscv_vand_vx_u32m2(v3, 0x33333333, vl);\n        vuint32m2_t v5 = __riscv_vsrl_vx_u32m2(v3, 2, vl);\n        vuint32m2_t v6 = __riscv_vand_vx_u32m2(v5, 0x33333333, vl);\n        vuint32m2_t v7 = __riscv_vadd_vv_u32m2(v4, v6, vl);\n\n        vuint32m2_t v8 = __riscv_vsrl_vx_u32m2(v7, 4, vl);\n        vuint32m2_t v9 = __riscv_vadd_vv_u32m2(v7, v8, vl);\n        vuint32m2_t v10 = __riscv_vand_vx_u32m2(v9, 0x0F0F0F0F, vl);\n\n        vuint32m2_t v11 = __riscv_vmul_vx_u32m2(v10, 0x01010101, vl);\n        vuint32m2_t v12 = __riscv_vsrl_vx_u32m2(v11, 24, vl);\n\n        vuint16m1_t v13 = __riscv_vncvt_x_x_w_u16m1(v12, vl);\n        vuint8m1_t v14 = __riscv_vncvt_x_x_w_u8m1(v13, vl);\n\n        __riscv_vse8_v_u8m1(out + n, v14, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t avl = total_elements;\n    const uint32_t mask1 = 0x55555555;\n    const uint32_t mask2 = 0x33333333;\n    const uint32_t mask3 = 0x0F0F0F0F;\n    const uint32_t multiplier = 0x01010101;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m4(avl);\n        vuint32m4_t va = __riscv_vle32_v_u32m4(A, vl);\n\n        vuint32m4_t v_step1 = __riscv_vsub_vv_u32m4(va, \n            __riscv_vand_vx_u32m4(\n                __riscv_vsrl_vx_u32m4(va, 1, vl), \n                mask1, vl), \n            vl);\n\n        vuint32m4_t v_step2 = __riscv_vadd_vv_u32m4(\n            __riscv_vand_vx_u32m4(v_step1, mask2, vl),\n            __riscv_vand_vx_u32m4(\n                __riscv_vsrl_vx_u32m4(v_step1, 2, vl), \n                mask2, vl),\n            vl);\n\n        vuint32m4_t v_step3 = __riscv_vand_vx_u32m4(\n            __riscv_vadd_vv_u32m4(\n                v_step2, \n                __riscv_vsrl_vx_u32m4(v_step2, 4, vl), \n                vl),\n            mask3, vl);\n\n        vuint32m4_t v_step4 = __riscv_vsrl_vx_u32m4(\n            __riscv_vmul_vx_u32m4(v_step3, multiplier, vl),\n            24, vl);\n\n        vuint16m2_t tmp = __riscv_vncvt_x_x_w_u16m2(v_step4, vl);\n        vuint8m1_t vout = __riscv_vncvt_x_x_w_u8m1(tmp, vl);\n\n        __riscv_vse8_v_u8m1(out, vout, vl);\n\n        A += vl;\n        out += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vl;\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vl = __riscv_vsetvl_e32m1(total_elements - i);\n        vuint32m1_t v_src = __riscv_vle32_v_u32m1(A + i, vl);\n        vuint32m1_t v_step1 = __riscv_vsub_vv_u32m1(v_src, \n            __riscv_vand_vx_u32m1(__riscv_vsrl_vx_u32m1(v_src, 1, vl), 0x55555555, vl), vl);\n        vuint32m1_t v_step2 = __riscv_vadd_vv_u32m1(\n            __riscv_vand_vx_u32m1(v_step1, 0x33333333, vl),\n            __riscv_vand_vx_u32m1(__riscv_vsrl_vx_u32m1(v_step1, 2, vl), 0x33333333, vl), vl);\n        vuint32m1_t v_step3 = __riscv_vand_vx_u32m1(\n            __riscv_vadd_vv_u32m1(v_step2, __riscv_vsrl_vx_u32m1(v_step2, 4, vl), vl),\n            0x0F0F0F0F, vl);\n        vuint32m1_t v_step4 = __riscv_vsrl_vx_u32m1(\n            __riscv_vmul_vx_u32m1(v_step3, 0x01010101, vl), 24, vl);\n        vuint16m1_t v_narrow1 = __riscv_vncvt_x_x_w_u16m1(v_step4, vl);\n        vuint8m1_t v_narrow2 = __riscv_vncvt_x_x_w_u8m1(v_narrow1, vl);\n        __riscv_vse8_v_u8m1(out + i, v_narrow2, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total = rows * cols;\n    size_t vl;\n    for (size_t i = 0; i < total; i += vl) {\n        vl = vsetvl_e32m8(total - i);\n        vint32m8_t a_vec = vle32_v_i32m8(A + i, vl);\n        vint32m8_t rem_vec = vrem_vx_i32m8(a_vec, 3, vl);\n        vbool4_t mask = vmseq_vx_i32m8_b4(rem_vec, 0, vl);\n        vint32m8_t neg_vec = vneg_v_i32m8_m(mask, a_vec, a_vec, vl);\n        vint32m8_t res_vec = vmax_vv_i32m8(a_vec, neg_vec, vl);\n        vse32_v_i32m8(B + i, res_vec, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total = rows * cols;\n    size_t vl;\n    for (size_t i = 0; i < total; ) {\n        vl = __riscv_vsetvl_e32m1(total - i);\n        vint32m1_t va = __riscv_vle32_v_i32m1(A + i, vl);\n        vint32m1_t rem = __riscv_vrem_vx_i32m1(va, 3, vl);\n        vbool32_t mask_div3 = __riscv_vmseq_vx_i32m1_b32(rem, 0, vl);\n        vbool32_t mask_neg = __riscv_vmslt_vx_i32m1_b32(va, 0, vl);\n        vint32m1_t negated = __riscv_vrsub_vx_i32m1(va, 0, vl);\n        vint32m1_t abs_val = __riscv_vmerge_vvm_i32m1(va, negated, mask_neg, vl);\n        vint32m1_t result = __riscv_vmerge_vvm_i32m1(va, abs_val, mask_div3, vl);\n        __riscv_vse32_v_i32m1(B + i, result, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t vl;\n    for (size_t n = 0; n < total_elements; n += vl) {\n        vl = __riscv_vsetvl_e32m1(total_elements - n);\n        vint32m1_t va = __riscv_vle32_v_i32m1(A + n, vl);\n        vint32m1_t abs_a_signed = __riscv_vabs_v_i32m1(va, vl);\n        vuint32m1_t x = (vuint32m1_t)abs_a_signed;\n\n        vuint32m1_t hi = __riscv_vsrl_vx_u32m1(x, 16, vl);\n        vuint32m1_t lo = __riscv_vand_vx_u32m1(x, 0xFFFF, vl);\n        x = __riscv_vadd_vv_u32m1(hi, lo, vl);\n\n        hi = __riscv_vsrl_vx_u32m1(x, 8, vl);\n        lo = __riscv_vand_vx_u32m1(x, 0xFF, vl);\n        x = __riscv_vadd_vv_u32m1(hi, lo, vl);\n\n        hi = __riscv_vsrl_vx_u32m1(x, 4, vl);\n        lo = __riscv_vand_vx_u32m1(x, 0xF, vl);\n        x = __riscv_vadd_vv_u32m1(hi, lo, vl);\n\n        hi = __riscv_vsrl_vx_u32m1(x, 2, vl);\n        lo = __riscv_vand_vx_u32m1(x, 0x3, vl);\n        x = __riscv_vadd_vv_u32m1(hi, lo, vl);\n\n        hi = __riscv_vsrl_vx_u32m1(x, 2, vl);\n        lo = __riscv_vand_vx_u32m1(x, 0x3, vl);\n        x = __riscv_vadd_vv_u32m1(hi, lo, vl);\n\n        vbool32_t mask1 = __riscv_vmsgeu_vx_u32m1_b32(x, 3, vl);\n        x = __riscv_vsub_vx_u32m1_m(mask1, x, x, 3, vl);\n        vbool32_t mask2 = __riscv_vmsgeu_vx_u32m1_b32(x, 3, vl);\n        x = __riscv_vsub_vx_u32m1_m(mask2, x, x, 3, vl);\n\n        vbool32_t divisible_mask = __riscv_vmseq_vx_u32m1_b32(x, 0, vl);\n        vint32m1_t res = __riscv_vmerge_vvm_i32m1(divisible_mask, va, abs_a_signed, vl);\n        __riscv_vse32_v_i32m1(B + n, res, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    const int* A_ptr = A;\n    int* B_ptr = B;\n    size_t vl;\n    for (size_t n = 0; n < total_elements; ) {\n        vl = vsetvl_e32m1(total_elements - n);\n        vint32m1_t va = vle32_v_i32m1(A_ptr, vl);\n        vint32m1_t sign = vsra_vx_i32m1(va, 31, vl);\n        vint32m1_t vabs = vsub_vv_i32m1(vxor_vv_i32m1(va, sign, vl), sign, vl);\n        vuint32m1_t vu = vreinterpret_v_i32m1_u32m1(vabs);\n        vuint32m1_t low16 = vand_vx_u32m1(vu, 0xFFFF, vl);\n        vuint32m1_t high16 = vsrl_vx_u32m1(vu, 16, vl);\n        vuint32m1_t n1 = vadd_vv_u32m1(low16, high16, vl);\n        vuint32m1_t low8 = vand_vx_u32m1(n1, 0xFF, vl);\n        vuint32m1_t high8 = vsrl_vx_u32m1(n1, 8, vl);\n        vuint32m1_t n2 = vadd_vv_u32m1(low8, high8, vl);\n        vuint32m1_t low4 = vand_vx_u32m1(n2, 0xF, vl);\n        vuint32m1_t high4 = vsrl_vx_u32m1(n2, 4, vl);\n        vuint32m1_t n3 = vadd_vv_u32m1(low4, high4, vl);\n        vuint32m1_t low2 = vand_vx_u32m1(n3, 0x3, vl);\n        vuint32m1_t high2 = vsrl_vx_u32m1(n3, 2, vl);\n        vuint32m1_t n4 = vadd_vv_u32m1(low2, high2, vl);\n        vbool32_t mask_ge3_1 = vmsgtu_vx_u32m1_b32(n4, 2, vl);\n        vuint32m1_t n5 = vsub_vx_u32m1_m(mask_ge3_1, n4, n4, 3, vl);\n        vbool32_t mask_ge3_2 = vmsgtu_vx_u32m1_b32(n5, 2, vl);\n        vuint32m1_t n6 = vsub_vx_u32m1_m(mask_ge3_2, n5, n5, 3, vl);\n        vbool32_t mask_div3 = vmseq_vx_u32m1_b32(n6, 0, vl);\n        vint32m1_t res = vmerge_vvm_i32m1(mask_div3, va, vabs, vl);\n        vse32_v_i32m1(B_ptr, res, vl);\n        A_ptr += vl;\n        B_ptr += vl;\n        n += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total = rows * cols;\n    size_t vl;\n    for (size_t n = 0; n < total; ) {\n        vl = vsetvl_e32m1(total - n);\n        vint32m1_t v_a = vle32_v_i32m1(A + n, vl);\n        vint32m1_t v_abs = vabs_v_i32m1(v_a, vl);\n        vuint32m1_t v_uabs = vreinterpret_v_i32m1_u32m1(v_abs);\n\n        vuint32m1_t v_low = vand_vx_u32m1(v_uabs, 0xFFFF, vl);\n        vuint32m1_t v_high = vsrl_vx_u32m1(v_uabs, 16, vl);\n        vuint32m1_t v_rem = vadd_vv_u32m1(v_low, v_high, vl);\n\n        v_low = vand_vx_u32m1(v_rem, 0xFF, vl);\n        v_high = vsrl_vx_u32m1(v_rem, 8, vl);\n        v_rem = vadd_vv_u32m1(v_low, v_high, vl);\n\n        v_low = vand_vx_u32m1(v_rem, 0xF, vl);\n        v_high = vsrl_vx_u32m1(v_rem, 4, vl);\n        v_rem = vadd_vv_u32m1(v_low, v_high, vl);\n\n        v_low = vand_vx_u32m1(v_rem, 0x3, vl);\n        v_high = vsrl_vx_u32m1(v_rem, 2, vl);\n        v_rem = vadd_vv_u32m1(v_low, v_high, vl);\n\n        v_low = vand_vx_u32m1(v_rem, 0x3, vl);\n        v_high = vsrl_vx_u32m1(v_rem, 2, vl);\n        v_rem = vadd_vv_u32m1(v_low, v_high, vl);\n\n        vbool32_t mask0 = vmseq_vx_u32m1_b32(v_rem, 0, vl);\n        vbool32_t mask3 = vmseq_vx_u32m1_b32(v_rem, 3, vl);\n        vbool32_t mask6 = vmseq_vx_u32m1_b32(v_rem, 6, vl);\n        vbool32_t mask_cond = vmor_mm_b32(mask0, mask3, vl);\n        mask_cond = vmor_mm_b32(mask_cond, mask6, vl);\n\n        vint32m1_t v_result = vmerge_vvm_i32m1(mask_cond, v_abs, v_a, vl);\n        vse32_v_i32m1(B + n, v_result, vl);\n\n        n += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t vsrc = vle32_v_u32m1(src, vl);\n        vuint32m1_t low4 = vand_vx_u32m1(vsrc, 0xF, vl);\n        vbool32_t mask = vmseq_vx_u32m1_b32(low4, 0xF, vl);\n        uint8_t left_shift_amt = 32 - rotate_bits;\n        vuint32m1_t right_shifted = vsrl_vx_u32m1(vsrc, rotate_bits, vl);\n        vuint32m1_t left_shifted = vsll_vx_u32m1(vsrc, left_shift_amt, vl);\n        vuint32m1_t rotated = vor_vv_u32m1(right_shifted, left_shifted, vl);\n        vuint32m1_t negated = vxor_vx_u32m1(vsrc, -1, vl);\n        vuint32m1_t res = vmerge_vvm_u32m1(mask, negated, rotated, vl);\n        vse32_v_u32m1(dst, res, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    uint32_t n = rotate_bits & 0x1F;\n    uint32_t all_ones = ~(uint32_t)0;\n    size_t avl = length;\n    const uint32_t *src_ptr = src;\n    uint32_t *dst_ptr = dst;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vuint32m8_t v_src = vle32_v_u32m8(src_ptr, vl);\n        vuint32m8_t low4 = vand_vx_u32m8(v_src, 0xF, vl);\n        vbool4_t cond_mask = vmseq_vx_u32m8_b4(low4, 0xF, vl);\n        vuint32m8_t v_rot = vor_vv_u32m8(\n            vsrl_vx_u32m8(v_src, n, vl),\n            vsll_vx_u32m8(v_src, 32 - n, vl),\n            vl\n        );\n        vuint32m8_t v_not = vxor_vx_u32m8(v_src, all_ones, vl);\n        vuint32m8_t v_result = vmerge_vvm_u32m8(cond_mask, v_rot, v_not, vl);\n        vse32_v_u32m8(dst_ptr, v_result, vl);\n\n        src_ptr += vl;\n        dst_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    size_t avl = length;\n    size_t vl;\n    while (avl > 0) {\n        vl = vsetvl_e32m8(avl);\n        vuint32m8_t v_src = vle32_v_u32m8(src, vl);\n        vuint32m8_t v_low4 = vand_vx_u32m8(v_src, 0xF, vl);\n        vbool4_t mask = vmseq_vx_u32m8_b4(v_low4, 0xF, vl);\n        uint32_t rot_left = 32 - rotate_bits;\n        vuint32m8_t v_right = vsrl_vx_u32m8(v_src, rotate_bits, vl);\n        vuint32m8_t v_left = vsll_vx_u32m8(v_src, rot_left, vl);\n        vuint32m8_t v_rot = vor_vv_u32m8(v_right, v_left, vl);\n        vuint32m8_t v_neg = vnot_v_u32m8(v_src, vl);\n        vuint32m8_t v_dst = vmerge_vvm_u32m8(mask, v_rot, v_neg, vl);\n        vse32_v_u32m8(dst, v_dst, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    uint32_t rot = rotate_bits & 31;\n    uint32_t left_shift = 32 - rot;\n    size_t vl;\n    for (size_t n = length; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vuint32m1_t v_src = __riscv_vle32_v_u32m1(src, vl);\n        vuint32m1_t v_low4 = __riscv_vand_vx_u32m1(v_src, 0xF, vl);\n        vbool32_t mask = __riscv_vmseq_vx_u32m1_b32(v_low4, 0xF, vl);\n        vuint32m1_t v_neg = __riscv_vxor_vx_u32m1(v_src, -1, vl);\n        vuint32m1_t v_right = __riscv_vsrl_vx_u32m1(v_src, rot, vl);\n        vuint32m1_t v_left = __riscv_vsll_vx_u32m1(v_src, left_shift, vl);\n        vuint32m1_t v_rot = __riscv_vor_vv_u32m1(v_right, v_left, vl);\n        vuint32m1_t v_result = __riscv_vmerge_vvm_u32m1(mask, v_rot, v_neg, vl);\n        __riscv_vse32_v_u32m1(dst, v_result, vl);\n        src += vl;\n        dst += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    size_t avl = length;\n    const uint32_t *src_ptr = src;\n    uint32_t *dst_ptr = dst;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t src_vec = vle32_v_u32m1(src_ptr, vl);\n        vuint32m1_t low4 = vand_vx_u32m1(src_vec, 0xF, vl);\n        vbool32_t mask = vmseq_vx_u32m1_b32(low4, 0xF, vl);\n        vuint32m1_t shifted_right = vsrl_vx_u32m1(src_vec, rotate_bits, vl);\n        uint8_t left_shift = 32 - rotate_bits;\n        vuint32m1_t shifted_left = vsll_vx_u32m1(src_vec, left_shift, vl);\n        vuint32m1_t rotated = vor_vv_u32m1(shifted_right, shifted_left, vl);\n        vuint32m1_t negated = vnot_v_u32m1(src_vec, vl);\n        vuint32m1_t result = vmerge_vvm_u32m1(mask, negated, rotated, vl);\n        vse32_v_u32m1(dst_ptr, result, vl);\n        src_ptr += vl;\n        dst_ptr += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = fabsf(epsilon);\n    size_t vl;\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        vfloat32m1_t va = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t vb = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t vdiff = vfsub_vv_f32m1(va, vb, vl);\n        \n        vfloat32m1_t v_abs_eps = vfmv_v_f_f32m1(abs_epsilon, vl);\n        vfloat32m1_t v_neg_abs_eps = vfmv_v_f_f32m1(-abs_epsilon, vl);\n        \n        vbool32_t mask_gt = vmfgt_vv_f32m1_b32(vdiff, v_abs_eps, vl);\n        vbool32_t mask_lt = vmflt_vv_f32m1_b32(vdiff, v_neg_abs_eps, vl);\n        \n        vbool8_t mask_gt_i8 = *(vbool8_t*)&mask_gt;\n        vbool8_t mask_lt_i8 = *(vbool8_t*)&mask_lt;\n        \n        vint8m1_t v_out = vmv_v_x_i8m1(0, vl);\n        v_out = vmerge_vxm_i8m1(mask_gt_i8, v_out, 1, vl);\n        v_out = vmerge_vxm_i8m1(mask_lt_i8, v_out, -1, vl);\n        \n        vse8_v_i8m1(out + i, v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_eps = epsilon;\n    if (abs_eps < 0) abs_eps = -abs_eps;\n    \n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t v_a = vle32_v_f32m1(A, vl);\n        vfloat32m1_t v_b = vle32_v_f32m1(B, vl);\n        vfloat32m1_t v_diff = vfsub_vv_f32m1(v_a, v_b, vl);\n        \n        vbool32_t mask_gt = vmfgt_vf_f32m1(v_diff, abs_eps, vl);\n        vbool32_t mask_lt = vmflt_vf_f32m1(v_diff, -abs_eps, vl);\n        \n        vint32m1_t v_out32 = vmv_v_x_i32m1(0, vl);\n        v_out32 = vmerge_vxm_i32m1(mask_gt, v_out32, 1, vl);\n        v_out32 = vmerge_vxm_i32m1(mask_lt, v_out32, -1, vl);\n        \n        vint8m1_t v_out8 = vncvt_x_x_w_i8m1(v_out32, vl);\n        vse8_v_i8m1(out, v_out8, vl);\n        \n        A += vl;\n        B += vl;\n        out += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_eps = fabsf(epsilon);\n    size_t avl = length;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t va = vle32_v_f32m1(A, vl);\n        vfloat32m1_t vb = vle32_v_f32m1(B, vl);\n        vfloat32m1_t vdiff = vfsub_vv_f32m1(va, vb, vl);\n\n        vbool32_t mask_gt = vmfgt_vf_f32m1_b32(vdiff, abs_eps, vl);\n        vbool32_t mask_lt = vmflt_vf_f32m1_b32(vdiff, -abs_eps, vl);\n\n        vint32m1_t vgt_i32 = vmerge_vxm_i32m1(mask_gt, vmv_v_x_i32m1(0, vl), 1, vl);\n        vint32m1_t vlt_i32 = vmerge_vxm_i32m1(mask_lt, vmv_v_x_i32m1(0, vl), 1, vl);\n        vint32m1_t vout_i32 = vssub_vv_i32m1(vgt_i32, vlt_i32, vl);\n\n        vint16m1_t vout_i16 = vncvt_x_x_w_i16m1(vout_i32, vl);\n        vint8mf2_t vout_i8 = vncvt_x_x_w_i8mf2(vout_i16, vl);\n        vse8_v_i8mf2(out, vout_i8, vl);\n\n        A += vl;\n        B += vl;\n        out += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = fabsf(epsilon);\n    float neg_abs_epsilon = -abs_epsilon;\n    const size_t MAX_MASK_WORDS = 64;\n    size_t avl = length;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t va = vle32_v_f32m1(A, vl);\n        vfloat32m1_t vb = vle32_v_f32m1(B, vl);\n        vfloat32m1_t diff = vfsub_vv_f32m1(va, vb, vl);\n        vbool32_t mask_gt = vmfgt_vf_f32m1_b32(diff, abs_epsilon, vl);\n        vbool32_t mask_lt = vmflt_vf_f32m1_b32(diff, neg_abs_epsilon, vl);\n        uint32_t mask_gt_buffer[MAX_MASK_WORDS];\n        uint32_t mask_lt_buffer[MAX_MASK_WORDS];\n        size_t mask_buffer_size = (vl + 31) / 32;\n        if (mask_buffer_size > MAX_MASK_WORDS) mask_buffer_size = MAX_MASK_WORDS;\n        vsm_v_b32(mask_gt_buffer, mask_gt, vl);\n        vsm_v_b32(mask_lt_buffer, mask_lt, vl);\n        vbool8_t mask_gt_i8 = vlm_v_b8((uint8_t*)mask_gt_buffer, vl);\n        vbool8_t mask_lt_i8 = vlm_v_b8((uint8_t*)mask_lt_buffer, vl);\n        vint8m1_t vout = vmv_v_x_i8m1(0, vl);\n        vout = vmerge_vxm_i8m1(mask_gt_i8, vout, 1, vl);\n        vout = vmerge_vxm_i8m1(mask_lt_i8, vout, -1, vl);\n        vse8_v_i8m1(out, vout, vl);\n        A += vl;\n        B += vl;\n        out += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = fabsf(epsilon);\n    float neg_abs_epsilon = -abs_epsilon;\n    size_t avl = length;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t va = vle32_v_f32m1(A, vl);\n        vfloat32m1_t vb = vle32_v_f32m1(B, vl);\n        vfloat32m1_t vdiff = vfsub_vv_f32m1(va, vb, vl);\n        vfloat32m1_t v_abs_eps = vfmv_v_f_f32m1(abs_epsilon, vl);\n        vfloat32m1_t v_neg_abs_eps = vfmv_v_f_f32m1(neg_abs_epsilon, vl);\n        vbool32_t mask_positive = vmfgt_vf_f32m1_b32(vdiff, abs_epsilon, vl);\n        vbool32_t mask_negative = vmflt_vf_f32m1_b32(vdiff, neg_abs_epsilon, vl);\n        vbool8_t mask_positive_i8 = vreinterpret_b8_b32(mask_positive);\n        vbool8_t mask_negative_i8 = vreinterpret_b8_b32(mask_negative);\n        vint8m1_t vout = vmv_v_x_i8m1(0, vl);\n        vout = vmerge_vxm_i8m1(mask_positive_i8, vout, 1, vl);\n        vout = vmerge_vxm_i8m1(mask_negative_i8, vout, -1, vl);\n        vse8_v_i8m1(out, vout, vl);\n        A += vl;\n        B += vl;\n        out += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    for (size_t i = 0; i < size; ) {\n        vl = vsetvl_e32m1(size - i);\n        vfloat32m1_t vf = vle32_v_f32m1(A + i, vl);\n        vint32m1_t vi = vfcvt_rtz_x_f_v_i32m1(vf, vl);\n        vse32_v_i32m1(B + i, vi, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    for (size_t n = 0; n < size; n += vl) {\n        vl = __riscv_vsetvl_e32m1(size - n);\n        vfloat32m1_t a_vec = __riscv_vle32_v_f32m1(A + n, vl);\n        vint32m1_t b_vec = __riscv_vfcvt_x_f_v_i32m1_rm(a_vec, RISCV_FRM_RTZ, vl);\n        __riscv_vse32_v_i32m1(B + n, b_vec, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    for (size_t n = 0; n < size; n += vl) {\n        vl = vsetvl_e32m1(size - n);\n        vfloat32m1_t a_vec = vle32_v_f32m1(A + n, vl);\n        vint32m1_t b_vec = vfcvt_rtz_x_f_v_i32m1(a_vec, vl);\n        vse32_v_i32m1(B + n, b_vec, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    const float upper_bound = 2147483648.0f;\n    const float lower_bound = -2147483648.0f;\n    const int32_t max_val = (int32_t)0x7FFFFFFF;\n    const int32_t min_val = (int32_t)0x80000000;\n    \n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t v_float = vle32_v_f32m1(A, vl);\n        vint32m1_t v_int = vfcvt_x_f_v_i32m1(v_float, vl);\n        \n        vbool32_t gt_mask = vmfge_vf_f32m1_b32(v_float, upper_bound, vl);\n        vbool32_t lt_mask = vmflt_vf_f32m1_b32(v_float, lower_bound, vl);\n        \n        v_int = vmerge_vxm_i32m1(v_int, max_val, gt_mask, vl);\n        v_int = vmerge_vxm_i32m1(v_int, min_val, lt_mask, vl);\n        \n        vse32_v_i32m1(B, v_int, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n#include <limits.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    const float fmin = (float)INT32_MIN;\n    const float fmax = 2147483520.0f; // Largest float <= INT32_MAX\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m8(avl);\n        vfloat32m8_t vf = __riscv_vle32_v_f32m8(A, vl);\n        vf = __riscv_vfmax_vf_f32m8(vf, fmin, vl);\n        vf = __riscv_vfmin_vf_f32m8(vf, fmax, vl);\n        vint32m8_t vi = __riscv_vfcvt_rtz_x_f_v_i32m8(vf, vl);\n        __riscv_vse32_v_i32m8(B, vi, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float fscale = (float)scale;\n    size_t vl;\n    for (; size > 0; size -= vl, A += vl, B += vl) {\n        vl = vsetvl_e32m1(size);\n        vint32m1_t a_vec = vle32_v_i32m1(A, vl);\n        vfloat32m1_t float_vec = vfcvt_f_x_v_f32m1(a_vec, vl);\n        vfloat32m1_t scale_vec = vfmv_v_f_f32m1(fscale, vl);\n        vfloat32m1_t result = vfmul_vv_f32m1(float_vec, scale_vec, vl);\n        vse32_v_f32m1(B, result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)scale;\n    size_t vl;\n    for (; size > 0; size -= vl, A += vl, B += vl) {\n        vl = vsetvl_e32m1(size);\n        vint32m1_t va = vle32_v_i32m1(A, vl);\n        vfloat32m1_t vf = vfcvt_f_x_v_f32m1(va, vl);\n        vfloat32m1_t vs = vfmv_v_f_f32m1(scale_f, vl);\n        vfloat32m1_t vb = vfmul_vv_f32m1(vf, vs, vl);\n        vse32_v_f32m1(B, vb, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)scale;\n    size_t vl;\n    for (size_t n = size; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e32m8(n);\n        vint32m8_t a_vec = __riscv_vle32_v_i32m8(A, vl);\n        vfloat32m8_t f_vec = __riscv_vfcvt_f_x_v_f32m8(a_vec, vl);\n        f_vec = __riscv_vfmul_vf_f32m8(f_vec, scale_f, vl);\n        __riscv_vse32_v_f32m8(B, f_vec, vl);\n        A += vl;\n        B += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)scale;\n    size_t vl;\n    for (; size > 0; ) {\n        vl = vsetvl_e32m8(size);\n        vint32m8_t v_a = vle32_v_i32m8(A, vl);\n        vfloat32m8_t v_float = vfcvt_f_x_v_f32m8(v_a, vl);\n        vfloat32m8_t v_scaled = vfmul_vf_f32m8(v_float, scale_f, vl);\n        vse32_v_f32m8(B, v_scaled, vl);\n        A += vl;\n        B += vl;\n        size -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    float scale_f = (float)scale;\n    size_t vl;\n    for (; size > 0; size -= vl, A += vl, B += vl) {\n        vl = vsetvl_e32m1(size);\n        vint32m1_t vec_int = vle32_v_i32m1(A, vl);\n        vfloat32m1_t vec_float = vfcvt_f_x_v_f32m1(vec_int, vl);\n        vec_float = vfmul_vf_f32m1(vec_float, scale_f, vl);\n        vse32_v_f32m1(B, vec_float, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vfloat32m8_t va = vle32_v_f32m8(A, vl);\n        vfloat32m8_t vb = vle32_v_f32m8(B, vl);\n        vfloat32m8_t vdiv = vfdiv_vv_f32m8(va, vb, vl);\n        vint32m8_t vc = vfcvt_rm_x_f_v_i32m8(vdiv, 0, vl);\n        vse32_v_i32m8(C, vc, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    if (size == 0) return;\n    \n    unsigned int original_round_mode;\n    __asm__ __volatile__ (\"frrm %0\" : \"=r\" (original_round_mode));\n    __asm__ __volatile__ (\"fsrm %0\" : : \"r\" (0));\n    \n    size_t vl;\n    while (size > 0) {\n        vl = vsetvl_e32m1(size);\n        vfloat32m1_t a_vec = vle32_v_f32m1(A, vl);\n        vfloat32m1_t b_vec = vle32_v_f32m1(B, vl);\n        vfloat32m1_t div_vec = vfdiv_vv_f32m1(a_vec, b_vec, vl);\n        vint32m1_t rounded_vec = vfcvt_x_f_v_i32m1(div_vec, vl);\n        vse32_v_i32m1(C, rounded_vec, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        size -= vl;\n    }\n    \n    __asm__ __volatile__ (\"fsrm %0\" : : \"r\" (original_round_mode));\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vfloat32m8_t vecA = vle32_v_f32m8(A, vl);\n        vfloat32m8_t vecB = vle32_v_f32m8(B, vl);\n        vfloat32m8_t vecDiv = vfdiv_vv_f32m8(vecA, vecB, vl);\n        vint32m8_t vecRes = vfcvt_x_f_v_i32m8(vecDiv, vl);\n        vse32_v_i32m8(C, vecRes, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t vl;\n    for (size_t n = size; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vfloat32m1_t vecA = __riscv_vle32_v_f32m1(A, vl);\n        vfloat32m1_t vecB = __riscv_vle32_v_f32m1(B, vl);\n        vfloat32m1_t vecDiv = __riscv_vfdiv_vv_f32m1(vecA, vecB, vl);\n        vint32m1_t vecRound = __riscv_vfcvt_x_f_v_i32m1(vecDiv, vl);\n        __riscv_vse32_v_i32m1(C, vecRound, vl);\n        A += vl;\n        B += vl;\n        C += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    unsigned int old_rm = __riscv_vfsrm(0);\n    size_t vl;\n    vfloat32m8_t va, vb, vdiv;\n    vint32m8_t vres;\n    for (; size > 0; size -= vl, A += vl, B += vl, C += vl) {\n        vl = __riscv_vsetvl_e32m8(size);\n        va = __riscv_vle32_v_f32m8(A, vl);\n        vb = __riscv_vle32_v_f32m8(B, vl);\n        vdiv = __riscv_vfdiv_vv_f32m8(va, vb, vl);\n        vres = __riscv_vfcvt_x_f_v_i32m8(vdiv, vl);\n        __riscv_vse32_v_i32m8(C, vres, vl);\n    }\n    __riscv_vfsrm(old_rm);\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m4(avl);\n        vfloat64m8_t v_a = __riscv_vle64_v_f64m8(A, vl);\n        vbool8_t mask_gt = __riscv_vmfgt_vf_f64m8_b8(v_a, FLT_MAX, vl);\n        vbool8_t mask_lt = __riscv_vmflt_vf_f64m8_b8(v_a, -FLT_MAX, vl);\n        v_a = __riscv_vfmerge_vfm_f64m8(mask_gt, v_a, FLT_MAX, vl);\n        v_a = __riscv_vfmerge_vfm_f64m8(mask_lt, v_a, -FLT_MAX, vl);\n        vfloat32m4_t v_b = __riscv_vfncvt_f_f_w_f32m4(v_a, vl);\n        __riscv_vse32_v_f32m4(B, v_b, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    double flt_max_d = (double)FLT_MAX;\n    double neg_flt_max_d = -flt_max_d;\n    size_t vl;\n    for (size_t n = size; n > 0; ) {\n        vl = vsetvl_e64m1(n);\n        vfloat64m1_t vd = vle64_v_f64m1(A, vl);\n        vd = vfmin_vf_f64m1(vd, flt_max_d, vl);\n        vd = vfmax_vf_f64m1(vd, neg_flt_max_d, vl);\n        vfloat32m1_t vf = vfncvt_f_f_w_f32m1(vd, vl);\n        vse32_v_f32m1(B, vf, vl);\n        A += vl;\n        B += vl;\n        n -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e64m2(avl);\n        vfloat64m2_t v_a = __riscv_vle64_v_f64m2(A, vl);\n        double dbl_max = (double)FLT_MAX;\n        double dbl_min = -dbl_max;\n        vfloat64m2_t v_min = __riscv_vfmv_v_f_f64m2(dbl_min, vl);\n        vfloat64m2_t v_max = __riscv_vfmv_v_f_f64m2(dbl_max, vl);\n        vfloat64m2_t v_clamped_low = __riscv_vfmax_vv_f64m2(v_a, v_min, vl);\n        vfloat64m2_t v_clamped = __riscv_vfmin_vv_f64m2(v_clamped_low, v_max, vl);\n        vfloat32m1_t v_b = __riscv_vfncvt_f_f_w_f32m1(v_clamped, vl);\n        __riscv_vse32_v_f32m1(B, v_b, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl;\n    vfloat64m2_t v_a, v_max, v_min;\n    vfloat32m1_t v_b;\n    \n    for (size_t n = 0; n < size; n += vl) {\n        vl = vsetvl_e64m2(size - n);\n        v_a = vle64_v_f64m2(A + n, vl);\n        v_max = vfmv_v_f_f64m2(FLT_MAX, vl);\n        v_min = vfmv_v_f_f64m2(-FLT_MAX, vl);\n        v_a = vfmax_vv_f64m2(v_a, v_min, vl);\n        v_a = vfmin_vv_f64m2(v_a, v_max, vl);\n        v_b = vfncvt_f_f_w_f32m1(v_a, vl);\n        vse32_v_f32m1(B + n, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    double flt_max = (double)FLT_MAX;\n    double flt_min = (double)(-FLT_MAX);\n    size_t vl;\n    for (; size > 0; size -= vl, A += vl, B += vl) {\n        vl = vsetvl_e64m1(size);\n        vfloat64m1_t vd = vle64_v_f64m1(A, vl);\n        vd = vfmin_vf_f64m1(vd, flt_max, vl);\n        vd = vfmax_vf_f64m1(vd, flt_min, vl);\n        vfloat32m1_t vf = vfncvt_f_f_w_f32m1(vd, vl);\n        vse32_v_f32m1(B, vf, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    for (size_t n = size; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e32m8(n);\n        vint32m8_t v_src = __riscv_vle16_v_i32m8(A, vl);\n        __riscv_vse32_v_i32m8(B, v_src, vl);\n        A += vl;\n        B += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = vsetvl_e16m1(avl);\n        vint16m1_t v_a = vle16_v_i16m1(A, vl);\n        vint32m2_t v_b = vsext_vf2_i32m2(v_a, vl);\n        vse32_v_i32m2(B, v_b, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    for (; size > 0; size -= vl, A += vl, B += vl) {\n        vl = __riscv_vsetvl_e16m1(size);\n        vint16m1_t v_a = __riscv_vle16_v_i16m1(A, vl);\n        vint32m2_t v_b = __riscv_vwadd_vx_i32m2(v_a, 0, vl);\n        __riscv_vse32_v_i32m2(B, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    for (size_t n = size; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e16m1(n);\n        vint16m1_t a_vec = __riscv_vle16_v_i16m1(A, vl);\n        vint32m2_t b_vec = __riscv_vwadd_vx_i32m2(a_vec, 0, vl);\n        __riscv_vse32_v_i32m2(B, b_vec, vl);\n        A += vl;\n        B += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    for (; size > 0; size -= vl, A += vl, B += vl) {\n        vl = __riscv_vsetvl_e32m4(size);\n        vint32m4_t v_dst = __riscv_vle16_v_i32m4(A, vl);\n        __riscv_vse32_v_i32m4(B, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    size_t vl;\n    while (size > 0) {\n        vl = vsetvl_e32m8(size);\n        vint32m8_t v_control = vle32_v_i32m8(control, vl);\n        vbool4_t mask = vmsgt_vx_i32m8_b4(v_control, 0, vl);\n        vfloat32m8_t v_a = vle32_v_f32m8(A, vl);\n        vfloat32m8_t v_result = v_a;\n        v_result = vfsub_vf_f32m8_m(mask, v_result, v_a, min_val, vl);\n        v_result = vfdiv_vf_f32m8_m(mask, v_result, v_result, range, vl);\n        v_result = vfmax_vf_f32m8_m(mask, v_result, v_result, 0.0f, vl);\n        v_result = vfmin_vf_f32m8_m(mask, v_result, v_result, 1.0f, vl);\n        vse32_v_f32m8(B, v_result, vl);\n        A += vl;\n        control += vl;\n        B += vl;\n        size -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float denom = max_val - min_val;\n    if (denom == 0.0f) {\n        denom = 1.0f;\n    }\n    \n    size_t vl;\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vint32m1_t ctrl_vec = vle32_v_i32m1(control + i, vl);\n        vfloat32m1_t a_vec = vle32_v_f32m1(A + i, vl);\n        vbool32_t mask = vmsgt_vx_i32m1_b32(ctrl_vec, 0, vl);\n        \n        vfloat32m1_t temp = vfsub_vf_f32m1_m(mask, a_vec, a_vec, min_val, vl);\n        temp = vfdiv_vf_f32m1_m(mask, temp, temp, denom, vl);\n        temp = vfmax_vf_f32m1_m(mask, temp, temp, 0.0f, vl);\n        temp = vfmin_vf_f32m1_m(mask, temp, temp, 1.0f, vl);\n        \n        vse32_v_f32m1(B + i, temp, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    float inv_range = (range == 0.0f) ? 0.0f : 1.0f / range;\n    size_t avl = size;\n    \n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t ctrl = vle32_v_i32m1(control, vl);\n        vbool32_t mask = vmsgt_vx_i32m1_b32(ctrl, 0, vl);\n        vfloat32m1_t a_vec = vle32_v_f32m1(A, vl);\n        \n        vfloat32m1_t normalized = vfsub_vf_f32m1_m(mask, a_vec, a_vec, min_val, vl);\n        normalized = vfmul_vf_f32m1_m(mask, normalized, normalized, inv_range, vl);\n        normalized = vfmax_vf_f32m1_m(mask, normalized, normalized, 0.0f, vl);\n        normalized = vfmin_vf_f32m1_m(mask, normalized, normalized, 1.0f, vl);\n        \n        vse32_v_f32m1(B, normalized, vl);\n        \n        control += vl;\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    size_t vl;\n    vfloat32m1_t v_float, v_temp;\n    vint32m1_t v_control;\n    vbool32_t mask;\n    \n    for (size_t avl = size; avl > 0; avl -= vl) {\n        vl = vsetvl_e32m1(avl);\n        v_float = vle32_v_f32m1(A, vl);\n        v_control = vle32_v_i32m1(control, vl);\n        mask = vmsgt_vx_i32m1_b32(v_control, 0, vl);\n        v_temp = vfsub_vf_f32m1_m(mask, v_float, v_float, min_val, vl);\n        v_temp = vfdiv_vf_f32m1_m(mask, v_temp, v_temp, range, vl);\n        v_temp = vfmax_vf_f32m1_m(mask, v_temp, v_temp, 0.0f, vl);\n        v_temp = vfmin_vf_f32m1_m(mask, v_temp, v_temp, 1.0f, vl);\n        vse32_v_f32m1(B, v_temp, vl);\n        A += vl;\n        control += vl;\n        B += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    float range = max_val - min_val;\n    float range_inv = (range == 0.0f) ? 0.0f : 1.0f / range;\n    size_t vl;\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vint32m1_t v_control = vle32_v_i32m1(control + i, vl);\n        vbool32_t mask = vmsgt_vx_i32m1_b32(v_control, 0, vl);\n        vfloat32m1_t v_res = vle32_v_f32m1(A + i, vl);\n        v_res = vfsub_vf_f32m1_m(mask, v_res, v_res, min_val, vl);\n        v_res = vfmul_vf_f32m1_m(mask, v_res, v_res, range_inv, vl);\n        v_res = vfmin_vf_f32m1_m(mask, v_res, v_res, 1.0f, vl);\n        v_res = vfmax_vf_f32m1_m(mask, v_res, v_res, 0.0f, vl);\n        vse32_v_f32m1(B + i, v_res, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t va = vle32_v_u32m1(A, vl);\n        vuint32m1_t va_shifted = vsrl_vx_u32m1(va, 16, vl);\n        vfloat32m1_t vf = vfcvt_f_xu_v_f32m1(va_shifted, vl);\n        vfloat32m1_t vf_sqrt = vfsqrt_v_f32m1(vf, vl);\n        vse32_v_f32m1(B, vf_sqrt, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    for (; size > 0; size -= vl, A += vl, B += vl) {\n        vl = __riscv_vsetvl_e32m8(size);\n        vuint32m8_t v_a = __riscv_vle32_v_u32m8(A, vl);\n        vuint32m8_t v_high = __riscv_vsrl_vx_u32m8(v_a, 16, vl);\n        vfloat32m8_t v_float = __riscv_vfcvt_f_xu_v_f32m8(v_high, vl);\n        vfloat32m8_t v_sqrt = __riscv_vfsqrt_v_f32m8(v_float, vl);\n        __riscv_vse32_v_f32m8(B, v_sqrt, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    for (size_t n = size; n > 0; n -= vl) {\n        vl = vsetvl_e32m1(n);\n        vuint32m1_t v_a = vle32_v_u32m1(A, vl);\n        vuint32m1_t v_high = vsrl_vx_u32m1(v_a, 16, vl);\n        vfloat32m1_t v_float = vfcvt_f_xu_v_f32m1(v_high, vl);\n        vfloat32m1_t v_sqrt = vfsqrt_v_f32m1(v_float, vl);\n        vse32_v_f32m1(B, v_sqrt, vl);\n        A += vl;\n        B += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    while (size > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(size);\n        vuint32m1_t va = __riscv_vle32_v_u32m1(A, vl);\n        vuint32m1_t va_high = __riscv_vsrl_vx_u32m1(va, 16, vl);\n        vfloat32m1_t vf = __riscv_vfcvt_f_xu_v_f32m1(va_high, vl);\n        vfloat32m1_t vf_sqrt = __riscv_vfsqrt_v_f32m1(vf, vl);\n        __riscv_vse32_v_f32m1(B, vf_sqrt, vl);\n        A += vl;\n        B += vl;\n        size -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    vuint32m2_t vec_u32;\n    vfloat32m2_t vec_f32;\n    \n    for (size_t n = size; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e32m2(n);\n        vec_u32 = __riscv_vle32_v_u32m2(A, vl);\n        A += vl;\n        vec_u32 = __riscv_vsrl_vx_u32m2(vec_u32, 16, vl);\n        vec_f32 = __riscv_vfcvt_f_xu_v_f32m2(vec_u32, vl);\n        vec_f32 = __riscv_vfsqrt_v_f32m2(vec_f32, vl);\n        __riscv_vse32_v_f32m2(B, vec_f32, vl);\n        B += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t avl = size;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m8(avl);\n        vuint32m8_t v_uint = __riscv_vle32_v_u32m8(A, vl);\n        union {\n            vuint32m8_t u;\n            vfloat32m8_t f;\n        } converter;\n        converter.u = v_uint;\n        __riscv_vse32_v_f32m8(B, converter.f, vl);\n        A += vl;\n        B += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    while (size > 0) {\n        vl = vsetvl_e32m8(size);\n        vuint32m8_t v_a = vle32_v_u32m8(A, vl);\n        vfloat32m8_t v_b = (vfloat32m8_t)v_a;\n        vse32_v_f32m8(B, v_b, vl);\n        A += vl;\n        B += vl;\n        size -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    for (size_t n = 0; n < size; n += vl) {\n        vl = __riscv_vsetvl_e32m8(size - n);\n        vuint32m8_t v_a = __riscv_vle32_v_u32m8(A + n, vl);\n        vfloat32m8_t v_b = __riscv_vreinterpret_v_u32m8_f32m8(v_a);\n        __riscv_vse32_v_f32m8(B + n, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    while (size > 0) {\n        vl = __riscv_vsetvl_e32m8(size);\n        vuint32m8_t v_u32 = __riscv_vle32_v_u32m8(A, vl);\n        vfloat32m8_t v_f32 = __riscv_vreinterpret_v_u32m8_f32m8(v_u32);\n        __riscv_vse32_v_f32m8(B, v_f32, vl);\n        A += vl;\n        B += vl;\n        size -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    for (size_t i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n        vuint32m1_t a_vec = __riscv_vle32_v_u32m1(A + i, vl);\n        vfloat32m1_t b_vec = (vfloat32m1_t)a_vec;\n        __riscv_vse32_v_f32m1(B + i, b_vec, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    diff[0] = 0.0f;\n    if (size == 1) return;\n\n    size_t vl;\n    for (size_t i = 1; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n        vint32m1_t current = __riscv_vle32_v_i32m1(A + i, vl);\n        vint32m1_t previous = __riscv_vle32_v_i32m1(A + i - 1, vl);\n        vint32m1_t diff_int = __riscv_vsub_vv_i32m1(current, previous, vl);\n        vfloat32m1_t diff_float = __riscv_vfcvt_f_x_v_f32m1(diff_int, vl);\n        \n        float temp[vl];\n        __riscv_vse32_v_f32m1(temp, diff_float, vl);\n        \n        for (size_t j = 0; j < vl; j++) {\n            diff[i + j] = cond[i + j] ? temp[j] : 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    diff[0] = 0.0f;\n    if (size == 1) return;\n\n    size_t i = 1;\n    size_t vl;\n    for (; i < size; ) {\n        size_t remaining = size - i;\n        vl = __riscv_vsetvl_e32m1(remaining);\n        \n        vuint8m1_t cond_bytes = __riscv_vle8_v_u8m1((const uint8_t*)(cond + i), vl);\n        vbool8_t mask8 = __riscv_vmsne_vx_u8m1_b8(cond_bytes, 0, vl);\n        vbool32_t mask32 = (vbool32_t)mask8;\n        \n        vint32m1_t current = __riscv_vle32_v_i32m1(A + i, vl);\n        vint32m1_t prev = __riscv_vle32_v_i32m1(A + i - 1, vl);\n        vint32m1_t diff_int = __riscv_vsub_vv_i32m1(current, prev, vl);\n        vfloat32m1_t diff_float = __riscv_vfcvt_f_x_v_f32m1(diff_int, vl);\n        \n        vfloat32m1_t zeros = __riscv_vfmv_v_f_f32m1(0.0f, vl);\n        vfloat32m1_t result = __riscv_vmerge_vvm_f32m1(zeros, diff_float, mask32, vl);\n        \n        __riscv_vse32_v_f32m1(diff + i, result, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    \n    diff[0] = 0.0f;\n    if (size == 1) return;\n    \n    size_t avl = size - 1;\n    size_t vl;\n    for (size_t i = 1; i < size; ) {\n        vl = vsetvl_e32m1(avl);\n        vuint8m1_t cond_byte = vle8_v_u8m1((const uint8_t*)(cond + i), vl);\n        vbool8_t mask8 = vmsne_vx_u8m1_b8(cond_byte, 0, vl);\n        vbool32_t vm = mask8;\n        \n        vint32m1_t current_A = vle32_v_i32m1(A + i, vl);\n        vint32m1_t prev_A = vle32_v_i32m1(A + i - 1, vl);\n        vint32m1_t v_dif = vsub_vv_i32m1(current_A, prev_A, vl);\n        vfloat32m1_t v_float = vfcvt_f_x_v_f32m1(v_dif, vl);\n        vfloat32m1_t v_zero = vfmv_v_f_f32m1(0.0f, vl);\n        vfloat32m1_t result = vmerge_vvm_f32m1(vm, v_float, v_zero, vl);\n        \n        vse32_v_f32m1(diff + i, result, vl);\n        \n        avl -= vl;\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    \n    diff[0] = 0.0f;\n    if (size <= 1) return;\n    \n    size_t avl = size - 1;\n    size_t vl;\n    size_t i = 1;\n    \n    while (avl > 0) {\n        vl = vsetvl_e32m1(avl);\n        vbool32_t mask = vlm_v_b32(cond + i, vl);\n        vint32m1_t a_prev = vle32_v_i32m1(A + i - 1, vl);\n        vint32m1_t a_curr = vle32_v_i32m1(A + i, vl);\n        vint32m1_t diff_int = vsub_vv_i32m1(a_curr, a_prev, vl);\n        vfloat32m1_t diff_float = vfcvt_f_x_v_f32m1(diff_int, vl);\n        vfloat32m1_t res = vmerge_vvm_f32m1(mask, diff_float, vfmv_v_f_f32m1(0.0f, vl), vl);\n        vse32_v_f32m1(diff + i, res, vl);\n        \n        avl -= vl;\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    diff[0] = 0.0f;\n    if (size == 1) return;\n    \n    size_t avl = size - 1;\n    cond += 1;\n    diff += 1;\n    \n    for (size_t vl; avl > 0; avl -= vl, A += vl, cond += vl, diff += vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint8m1_t cond_vec = __riscv_vle8_v_i8m1(cond, vl);\n        vint32m1_t cond32 = __riscv_vsext_vf4_i32m1(cond_vec, vl);\n        vbool32_t mask32 = __riscv_vmsne_vx_i32m1_b32(cond32, 0, vl);\n        \n        vint32m1_t prev_A = __riscv_vle32_v_i32m1(A, vl);\n        vint32m1_t curr_A = __riscv_vle32_v_i32m1(A + 1, vl);\n        vint32m1_t diff_i32 = __riscv_vsub_vv_i32m1(curr_A, prev_A, vl);\n        vfloat32m1_t diff_f = __riscv_vfcvt_f_x_v_f32m1(diff_i32, vl);\n        \n        vfloat32m1_t zero = __riscv_vfmv_v_f_f32m1(0.0f, vl);\n        vfloat32m1_t res = __riscv_vmerge_vvm_f32m1(zero, diff_f, mask32, vl);\n        __riscv_vse32_v_f32m1(diff, res, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t avl = length;\n    const uint64_t mask_val = (uint64_t)0xFFFFFFFF << 32;\n    \n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vuint32m1_t v_src = vle32_v_u32m1(src, vl);\n        vuint64m1_t v_src64 = vzext_vf2_u64m1(v_src, vl);\n        vuint64m1_t v_mask = vmv_v_x_u64m1(mask_val, vl);\n        vuint64m1_t v_dst = vor_vv_u64m1(v_src64, v_mask, vl);\n        vse64_v_u64m1(dst, v_dst, vl);\n        \n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vuint32m1_t src_vec = __riscv_vle32_v_u32m1(src, vl);\n        vuint64m2_t dst_vec = __riscv_vzext_vf2_u64m2(src_vec, vl);\n        vuint64m2_t mask_vec = __riscv_vmv_v_x_u64m2(0xFFFFFFFF00000000ULL, vl);\n        dst_vec = __riscv_vor_vv_u64m2(dst_vec, mask_vec, vl);\n        __riscv_vse64_v_u64m2(dst, dst_vec, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m2(avl);\n        vuint32m1_t src_vec = vle32_v_u32m1(src, vl);\n        vuint64m2_t zext = vwcvtu_x_x_v_u64m2(src_vec, vl);\n        vuint64m2_t high_mask = vmv_v_x_u64m2(0xFFFFFFFF00000000ULL, vl);\n        vuint64m2_t result = vor_vv_u64m2(zext, high_mask, vl);\n        vse64_v_u64m2(dst, result, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t avl = length;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t v_src = vle32_v_u32m1(src, vl);\n        vuint64m2_t v_widen = vwcvtu_x_x_v_u64m2(v_src, vl);\n        vuint64m2_t v_const = vmv_v_x_u64m2(0xFFFFFFFF00000000ULL, vl);\n        vuint64m2_t v_result = vor_vv_u64m2(v_widen, v_const, vl);\n        vse64_v_u64m2(dst, v_result, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    uint64_t mask_val = (0xFFFFFFFFULL) << 32;\n    while (length > 0) {\n        size_t vl = vsetvl_e32m1(length);\n        vuint32m1_t v32 = vle32_v_u32m1(src, vl);\n        vuint64m2_t v64 = vzext_vf2_u64m2(v32, vl);\n        vuint64m2_t v_mask = vmv_v_x_u64m2(mask_val, vl);\n        vuint64m2_t v_result = vor_vv_u64m2(v64, v_mask, vl);\n        vse64_v_u64m2(dst, v_result, vl);\n        src += vl;\n        dst += vl;\n        length -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t vl;\n    vfloat64m1_t v_sum = vfmv_v_f_f64m1(0.0, 1);\n    \n    for (size_t pos = 0; pos < length; ) {\n        vl = vsetvl_e16m1(length - pos);\n        vint16m1_t vidx16 = vle16_v_i16m1(index + pos, vl);\n        vint64m1_t vidx64 = vwadd_vx_i64m1(vidx16, 0, vl);\n        \n        vbool64_t mask = vmsgt_vx_i64m1_b64(vidx64, -1, vl);\n        if (length <= 32767) {\n            vbool64_t mask_lt = vmslt_vx_i64m1_b64(vidx64, (int64_t)length, vl);\n            mask = vmand_mm_b64(mask, mask_lt, vl);\n        }\n        \n        vfloat64m1_t v_values = __riscv_vloxei64_v_f64m1_m(mask, vec, (vuint64m1_t)vidx64, vl);\n        v_sum = __riscv_vfredusum_vs_f64m1_f64m1_m(mask, v_sum, v_values, v_sum, vl);\n        pos += vl;\n    }\n    \n    return vfmv_f_s_f64m1_f64(v_sum);\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t avl = length;\n    size_t vl;\n    vfloat64m1_t v_sum = __riscv_vfmv_v_f_f64m1(0.0, __riscv_vsetvlmax_e64m1());\n    \n    for (; avl > 0; avl -= vl, index += vl) {\n        vl = __riscv_vsetvl_e16m1(avl);\n        vint16m1_t index16 = __riscv_vle16_v_i16m1(index, vl);\n        vint64m4_t index64 = __riscv_vwcvt_x_x_v_i64m4(index16, vl);\n        vfloat64m1_t gathered = __riscv_vluxei64_v_f64m1(vec, (vuint64m4_t)index64, vl);\n        v_sum = __riscv_vfredusum_vs_f64m1_f64m1(gathered, v_sum, vl);\n    }\n    \n    return __riscv_vfmv_f_s_f64m1_f64(v_sum);\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    size_t avl = length;\n    const int16_t *index_ptr = index;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vuint16mf2_t v_index = vle16_v_u16mf2((const uint16_t*)index_ptr, vl);\n        vfloat64m1_t v_data = vluxei16_v_f64m1(vec, v_index, vl);\n        vfloat64m1_t v_dest = vfmv_v_f_f64m1(0.0, vl);\n        v_dest = vfredusum_vs_f64m1_f64m1(v_data, v_dest, vl);\n        double partial_sum = vfmv_f_s_f64m1_f64(v_dest);\n        sum += partial_sum;\n        index_ptr += vl;\n        avl -= vl;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    vfloat64m1_t v_red;\n    size_t vl;\n    v_red = vfmv_s_f_f64m1(vundefined_f64m1(), 0.0, 1);\n\n    for (size_t avl = length; avl > 0; avl -= vl) {\n        vl = vsetvl_e16m1(avl);\n        vint16m1_t v_index = vle16_v_i16m1(index, vl);\n        vfloat64m1_t v_gathered = vluxei16_v_f64m1(vec, v_index, vl);\n        v_red = vfredusum_vs_f64m1_f64m1(v_gathered, v_red, vl);\n        index += vl;\n    }\n\n    sum = vfmv_f_s_f64m1_f64(v_red);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t vl;\n    vfloat64m1_t vred;\n    vred = vfmv_s_f_f64m1(vred, 0.0);\n\n    for (size_t n = length; n > 0; n -= vl) {\n        vl = __riscv_vsetvl_e16m1(n);\n        vint16m1_t vidx = __riscv_vle16_v_i16m1(index, vl);\n        vuint16m1_t uidx = __riscv_vreinterpret_v_i16m1_u16m1(vidx);\n        vfloat64m1_t vgathered = __riscv_vloxei16_v_f64m1(vec, uidx, vl);\n        vred = __riscv_vfredusum_vs_f64m1_f64m1(vgathered, vred, vred, vl);\n        index += vl;\n    }\n\n    double sum = __riscv_vfmv_f_s_f64m1_f64(vred);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    \n    for (size_t i = 0; i < output_size; i++) {\n        size_t j = 0;\n        while (j < output_size) {\n            size_t vl = vsetvl_e64m1(output_size - j);\n            vfloat64m1_t acc_vec = vfmv_v_f_f64m1(0.0, vl);\n            \n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                const double* input_row = input + (i + ki) * input_size;\n                const double* kernel_row = kernel + ki * kernel_size;\n                \n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    double kernel_val = kernel_row[kj];\n                    vfloat64m1_t kernel_broadcast = vfmv_v_f_f64m1(kernel_val, vl);\n                    vfloat64m1_t input_vec = vle64_v_f64m1(input_row + j + kj, vl);\n                    acc_vec = vfmacc_vv_f64m1(acc_vec, input_vec, kernel_broadcast, vl);\n                }\n            }\n            \n            vbool64_t mask = vmflt_vf_f64m1_b64(acc_vec, 0.0, vl);\n            acc_vec = vmerge_vvm_f64m1(mask, vfmv_v_f_f64m1(0.0, vl), acc_vec, vl);\n            vse64_v_f64m1(output + i * output_size + j, acc_vec, vl);\n            \n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    \n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            \n            for (size_t k = 0; k < kernel_size; k++) {\n                const double* input_row = input + (i + k) * input_size + j;\n                const double* kernel_row = kernel + k * kernel_size;\n                double row_sum = 0.0;\n                size_t avl = kernel_size;\n                size_t l = 0;\n                \n                while (avl > 0) {\n                    size_t vl = __riscv_vsetvl_e64m1(avl);\n                    vfloat64m1_t v_kernel_seg = __riscv_vle64_v_f64m1(kernel_row + l, vl);\n                    vfloat64m1_t v_input_seg = __riscv_vle64_v_f64m1(input_row + l, vl);\n                    vfloat64m1_t v_product = __riscv_vfmul_vv_f64m1(v_kernel_seg, v_input_seg, vl);\n                    \n                    vfloat64m1_t v_dest = __riscv_vfmv_v_f_f64m1(0.0, vl);\n                    v_dest = __riscv_vfredusum_vs_f64m1_f64m1(v_product, v_dest, vl);\n                    double segment_sum = __riscv_vfmv_f_s_f64m1_f64(v_dest);\n                    \n                    row_sum += segment_sum;\n                    l += vl;\n                    avl -= vl;\n                }\n                \n                sum += row_sum;\n            }\n            \n            output[i * output_size + j] = (sum > 0.0) ? sum : 0.0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t out_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < out_size; i++) {\n        for (size_t j = 0; j < out_size; ) {\n            size_t vl = vsetvl_e64m1(out_size - j);\n            vfloat64m1_t acc = vfmv_v_f_f64m1(0.0, vl);\n            \n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    double k_val = kernel[ki * kernel_size + kj];\n                    vfloat64m1_t k_vec = vfmv_v_f_f64m1(k_val, vl);\n                    \n                    const double* in_ptr = input + (i + ki) * input_size + j + kj;\n                    vfloat64m1_t in_vec = vle64_v_f64m1(in_ptr, vl);\n                    \n                    acc = vfmacc_vv_f64m1(acc, k_vec, in_vec, vl);\n                }\n            }\n            \n            vfloat64m1_t result = vfmax_vf_f64m1(acc, 0.0, vl);\n            vse64_v_f64m1(output + i * out_size + j, result, vl);\n            \n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t out_size = input_size - kernel_size + 1;\n    size_t total_output = out_size * out_size;\n    \n    // Initialize output to zero\n    size_t vl;\n    for (size_t n = 0; n < total_output; ) {\n        vl = __riscv_vsetvl_e64m1(total_output - n);\n        vfloat64m1_t v_zero = vfmv_v_f_f64m1(0.0, vl);\n        vse64_v_f64m1(output + n, v_zero, vl);\n        n += vl;\n    }\n    \n    // Convolution loops\n    for (size_t ki = 0; ki < kernel_size; ki++) {\n        for (size_t kj = 0; kj < kernel_size; kj++) {\n            double k_val = kernel[ki * kernel_size + kj];\n            for (size_t i = 0; i < out_size; i++) {\n                const double* input_ptr = input + (i + ki) * input_size + kj;\n                double* output_ptr = output + i * out_size;\n                size_t j = 0;\n                size_t avl = out_size;\n                while (avl > 0) {\n                    vl = __riscv_vsetvl_e64m1(avl);\n                    vfloat64m1_t vec_in = vle64_v_f64m1(input_ptr + j, vl);\n                    vfloat64m1_t vec_prod = vfmul_vf_f64m1(vec_in, k_val, vl);\n                    vfloat64m1_t vec_out = vle64_v_f64m1(output_ptr + j, vl);\n                    vec_out = vfadd_vv_f64m1(vec_out, vec_prod, vl);\n                    vse64_v_f64m1(output_ptr + j, vec_out, vl);\n                    j += vl;\n                    avl -= vl;\n                }\n            }\n        }\n    }\n    \n    // Apply ReLU\n    for (size_t n = 0; n < total_output; ) {\n        vl = __riscv_vsetvl_e64m1(total_output - n);\n        vfloat64m1_t vec_out = vle64_v_f64m1(output + n, vl);\n        vec_out = vfmax_vf_f64m1(vec_out, 0.0, vl);\n        vse64_v_f64m1(output + n, vec_out, vl);\n        n += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t out_size = input_size - kernel_size + 1;\n    \n    for (size_t i = 0; i < out_size; i++) {\n        for (size_t j = 0; j < out_size; ) {\n            size_t vl = vsetvl_e64m1(out_size - j);\n            vfloat64m1_t acc = vfmv_v_f_f64m1(0.0, vl);\n            \n            for (size_t k = 0; k < kernel_size; k++) {\n                for (size_t l = 0; l < kernel_size; l++) {\n                    double kernel_val = kernel[k * kernel_size + l];\n                    const double* input_ptr = input + (i + k) * input_size + j + l;\n                    vfloat64m1_t input_vec = vle64_v_f64m1(input_ptr, vl);\n                    acc = vfmacc_vf_f64m1(acc, kernel_val, input_vec, vl);\n                }\n            }\n            \n            vfloat64m1_t result = vfmax_vf_f64m1(acc, 0.0, vl);\n            vse64_v_f64m1(output + i * out_size + j, result, vl);\n            j += vl;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) {\n        return false;\n    }\n\n    size_t avl = n - 1;\n    size_t vl;\n    for (size_t i = 0; i < n - 1; ) {\n        vl = vsetvl_e64m1(avl);\n        vfloat64m1_t a = vle64_v_f64m1(&numbers[i], vl);\n        vfloat64m1_t b = vle64_v_f64m1(&numbers[i + 1], vl);\n        vfloat64m1_t diff = vfsub_vv_f64m1(a, b, vl);\n        vfloat64m1_t abs_diff = vfabs_v_f64m1(diff, vl);\n        vfloat64m1_t thresh_vec = vfmv_v_f_f64m1(threshold, vl);\n        vbool64_t mask = vmflt_vv_f64m1_b64(abs_diff, thresh_vec, vl);\n        if (vfirst_m_b64(mask, vl) >= 0) {\n            return true;\n        }\n        i += vl;\n        avl -= vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) \n        return false;\n\n    const double *data = numbers.data();\n    size_t avl = n - 1;\n    size_t vl;\n\n    for (; avl > 0; ) {\n        vl = vsetvl_e64m1(avl);\n        vfloat64m1_t vec_a = vle64_v_f64m1(data, vl);\n        vfloat64m1_t vec_b = vle64_v_f64m1(data + 1, vl);\n        \n        vfloat64m1_t diff = vfsub_vv_f64m1(vec_a, vec_b, vl);\n        vfloat64m1_t abs_diff = vfabs_v_f64m1(diff, vl);\n        vbool64_t mask = vmflt_vf_f64m1_b64(abs_diff, threshold, vl);\n        \n        if (vfirst_m_b64(mask, vl) >= 0) \n            return true;\n        \n        data += vl;\n        avl -= vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n <= 1) {\n        return false;\n    }\n    size_t pairs = n - 1;\n    size_t vl;\n    for (size_t i = 0; i < pairs; ) {\n        vl = vsetvl_e64m1(pairs - i);\n        vfloat64m1_t vec_current = vle64_v_f64m1(&numbers[i], vl);\n        vfloat64m1_t vec_next = vle64_v_f64m1(&numbers[i + 1], vl);\n        vfloat64m1_t diff = vfsub_vv_f64m1(vec_current, vec_next, vl);\n        vfloat64m1_t abs_diff = vfabs_v_f64m1(diff, vl);\n        vbool64_t mask = vmflt_vf_f64m1_b64(abs_diff, threshold, vl);\n        if (vfirst_m_b64(mask, vl) >= 0) {\n            return true;\n        }\n        i += vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <stddef.h>\n#include <vector>\n\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) {\n        return false;\n    }\n\n    const double *base = numbers.data();\n    size_t vl;\n    for (size_t i = 0; i < n-1; i++) {\n        double current_val = base[i];\n        size_t avl_inner = n - i - 1;\n        size_t current_inner = 0;\n\n        while (current_inner < avl_inner) {\n            vl = vsetvl_e64m1(avl_inner - current_inner);\n            vfloat64m1_t v_j = vle64_v_f64m1(base + i + 1 + current_inner, vl);\n            vfloat64m1_t v_current = vfmv_v_f_f64m1(current_val, vl);\n            vfloat64m1_t diff = vfsub_vv_f64m1(v_j, v_current, vl);\n            diff = vfsgnjx_vv_f64m1(diff, diff, vl);\n            vbool64_t mask = vmflt_vf_f64m1_b64(diff, threshold, vl);\n\n            if (vcpop_m_b64(mask, vl)) {\n                return true;\n            }\n\n            current_inner += vl;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold){\n    size_t n = numbers.size();\n    if (n < 2) {\n        return false;\n    }\n    size_t num_pairs = n - 1;\n    const double* data = numbers.data();\n    bool found = false;\n    size_t avl = num_pairs;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e64m1(avl);\n        vfloat64m1_t current = vle64_v_f64m1(data, vl);\n        vfloat64m1_t next = vle64_v_f64m1(data + 1, vl);\n        vfloat64m1_t diff = vfsub_vv_f64m1(current, next, vl);\n        vfloat64m1_t abs_diff = vfabs_v_f64m1(diff, vl);\n        vfloat64m1_t thresh_vec = vfmv_v_f_f64m1(threshold, vl);\n        vbool64_t mask = vmflt_vv_f64m1_b64(abs_diff, thresh_vec, vl);\n        int first = vfirst_m_b64(mask, vl);\n        if (first >= 0) {\n            found = true;\n            break;\n        }\n        data += vl;\n        avl -= vl;\n    }\n    return found;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nbool below_zero_simd(std::vector<int> operations) {\n    int base = 0;\n    size_t n = operations.size();\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        if (base < 0) {\n            return true;\n        }\n        vint32m1_t v_op = __riscv_vle32_v_i32m1(&operations[i], vl);\n        vint32m1_t v_prefix = v_op;\n        int stride = 1;\n        while (stride < vl) {\n            vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n            vint32m1_t v_shifted = __riscv_vslideup_vx_i32m1(v_zero, v_prefix, stride, vl);\n            v_prefix = __riscv_vadd_vv_i32m1(v_prefix, v_shifted, vl);\n            stride *= 2;\n        }\n        vint32m1_t v_min = __riscv_vredmin_vs_i32m1_i32m1(v_prefix, __riscv_vmv_v_x_i32m1(INT32_MAX, 1), vl);\n        int min_prefix = __riscv_vmv_x_s_i32m1_i32(v_min);\n        if (base + min_prefix < 0) {\n            return true;\n        }\n        vint32m1_t v_total_vec = __riscv_vslidedown_vx_i32m1(v_prefix, vl - 1, 1);\n        int total_sum = __riscv_vmv_x_s_i32m1_i32(v_total_vec);\n        base += total_sum;\n        i += vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    if (operations.empty()) \n        return false;\n\n    size_t n = operations.size();\n    int carry = 0;\n    bool found_negative = false;\n\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_op = __riscv_vle32_v_i32m1(&operations[i], vl);\n\n        vint32m1_t v_scan = v_op;\n        for (size_t stride = 1; stride < vl; stride *= 2) {\n            vint32m1_t v_shift = __riscv_vslidedown_vx_i32m1(v_scan, stride, vl);\n            v_scan = __riscv_vadd_vv_i32m1(v_scan, v_shift, vl);\n        }\n\n        vint32m1_t v_carry_vec = __riscv_vmv_v_x_i32m1(carry, vl);\n        vint32m1_t v_balance = __riscv_vadd_vv_i32m1(v_scan, v_carry_vec, vl);\n\n        vbool32_t mask = __riscv_vmslt_vx_i32m1_b32(v_balance, 0, vl);\n        if (__riscv_vfirst_m_b32(mask, vl) >= 0) {\n            found_negative = true;\n            break;\n        }\n\n        vint32m1_t v_red = __riscv_vmv_v_x_i32m1(0, vl);\n        v_red = __riscv_vredsum_vs_i32m1_i32m1(v_op, v_red, vl);\n        int chunk_sum = __riscv_vmv_x_s_i32m1_i32(v_red);\n\n        carry += chunk_sum;\n        i += vl;\n    }\n\n    return found_negative;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool below_zero_simd(std::vector<int> operations) {\n    size_t n = operations.size();\n    if (n == 0) return false;\n\n    const int32_t *ptr = operations.data();\n    size_t vl;\n    int32_t carry = 0;\n\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vle32_v_i32m1(ptr, vl);\n        ptr += vl;\n\n        vint32m1_t v_zero = vmv_v_x_i32m1(0, vl);\n        vint32m1_t prefix = vredsum_vs_i32m1_i32m1(vec, v_zero, vl);\n        int32_t chunk_sum = vmv_x_s_i32m1_i32(prefix);\n\n        vint32m1_t running = vmv_v_x_i32m1(0, vl);\n        vint32m1_t min_vec = vmv_v_x_i32m1(0, vl);\n\n        for (int stride = 1; stride < vl; stride *= 2) {\n            vint32m1_t shifted = vslidedown_vx_i32m1(running, stride, vl);\n            vuint32m1_t indices = vid_v_u32m1(vl);\n            vbool32_t mask = vmsgtu_vx_u32m1_b32(indices, stride - 1, vl);\n            running = vadd_vv_i32m1_m(mask, running, running, shifted, vl);\n        }\n\n        running = vadd_vv_i32m1(running, vec, vl);\n        min_vec = vredmin_vs_i32m1_i32m1(running, min_vec, vl);\n        int32_t min_prefix = vmv_x_s_i32m1_i32(min_vec);\n\n        if (carry + (min_prefix < 0 ? min_prefix : 0) < 0) {\n            return true;\n        }\n\n        carry += chunk_sum;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    size_t n = operations.size();\n    if (n == 0) {\n        return false;\n    }\n    \n    int current_sum = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_seg = __riscv_vle32_v_i32m1(&operations[i], vl);\n        vint32m1_t v_in = v_seg;\n        \n        for (size_t stride = 1; stride < vl; stride *= 2) {\n            vint32m1_t v_temp = __riscv_vslidedown_vx_i32m1(v_in, 0, vl);\n            vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n            vint32m1_t v_shifted = __riscv_vslideup_vx_i32m1(v_zero, v_temp, stride, vl);\n            v_in = __riscv_vadd_vv_i32m1(v_in, v_shifted, vl);\n        }\n        \n        v_in = __riscv_vadd_vx_i32m1(v_in, current_sum, vl);\n        \n        vbool32_t mask = __riscv_vmslt_vx_i32m1_b32(v_in, 0, vl);\n        if (__riscv_vfirst_m_b32(mask, vl) != -1) {\n            return true;\n        }\n        \n        int temp[vl];\n        __riscv_vse32_v_i32m1(temp, v_in, vl);\n        current_sum = temp[vl - 1];\n        i += vl;\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool below_zero_simd(std::vector<int> operations) {\n    int base = 0;\n    size_t n = operations.size();\n    if (n == 0) return false;\n    const int *ptr = operations.data();\n\n    while (n > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(n);\n        vint32m1_t v = __riscv_vle32_v_i32m1(ptr, vl);\n        if (base < 0) {\n            return true;\n        }\n\n        vint32m1_t S = v;\n        if (vl > 1) {\n            for (size_t stride = 1; stride < vl; stride *= 2) {\n                vuint32m1_t vid = __riscv_vid_v_u32m1(vl);\n                vbool32_t mask = __riscv_vmsgtu_vx_u32m1_b32(vid, stride - 1, vl);\n                vint32m1_t zeros = __riscv_vmv_v_x_i32m1(0, vl);\n                vint32m1_t shifted = __riscv_vslideup_vx_i32m1(zeros, S, stride, vl);\n                S = __riscv_vadd_vv_i32m1_m(mask, S, S, shifted, vl);\n            }\n        }\n\n        vint32m1_t base_v = __riscv_vmv_v_x_i32m1(base, vl);\n        vint32m1_t cumulative = __riscv_vadd_vv_i32m1(base_v, S, vl);\n        vbool32_t neg_mask = __riscv_vmslt_vx_i32m1_b32(cumulative, 0, vl);\n        if (__riscv_vfirst_m_b32(neg_mask, vl) >= 0) {\n            return true;\n        }\n\n        int chunk_sum = __riscv_vmv_x_s_i32m1_i32(S);\n        base += chunk_sum;\n        ptr += vl;\n        n -= vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return 0.0;\n    }\n    double *data = numbers.data();\n    double sum = 0.0;\n    double abs_sum = 0.0;\n    double mean = 0.0;\n    double mad = 0.0;\n    size_t vl;\n    vfloat64m1_t vsum, vabs_sum;\n\n    vsum = vfmv_s_f_f64m1(vundefined_f64m1(), 0.0);\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e64m1(avl);\n        vfloat64m1_t vx = vle64_v_f64m1(data, vl);\n        vsum = vfredusum_vs_f64m1_f64m1(vx, vsum, vl);\n        data += vl;\n        avl -= vl;\n    }\n    sum = vfmv_f_s_f64m1_f64(vsum);\n    mean = sum / n;\n\n    data = numbers.data();\n    vabs_sum = vfmv_s_f_f64m1(vundefined_f64m1(), 0.0);\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e64m1(avl);\n        vfloat64m1_t vx = vle64_v_f64m1(data, vl);\n        vfloat64m1_t vdiff = vfsub_vf_f64m1(vx, mean, vl);\n        vfloat64m1_t vabs = vfabs_v_f64m1(vdiff, vl);\n        vabs_sum = vfredusum_vs_f64m1_f64m1(vabs, vabs_sum, vl);\n        data += vl;\n        avl -= vl;\n    }\n    abs_sum = vfmv_f_s_f64m1_f64(vabs_sum);\n    mad = abs_sum / n;\n\n    return mad;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return 0.0;\n    }\n    double* data = numbers.data();\n    double total_sum = 0.0;\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl, data += vl) {\n        vl = __riscv_vsetvl_e64m1(avl);\n        vfloat64m1_t vec = __riscv_vle64_v_f64m1(data, vl);\n        vfloat64m1_t vred = __riscv_vfredusum_vs_f64m1_f64m1(vec, \n                            __riscv_vfmv_v_f_f64m1(0.0, vl), \n                            vl);\n        total_sum += __riscv_vfmv_f_s_f64m1_f64(vred);\n    }\n    double mean = total_sum / n;\n    data = numbers.data();\n    double abs_sum = 0.0;\n    for (size_t avl = n; avl > 0; avl -= vl, data += vl) {\n        vl = __riscv_vsetvl_e64m1(avl);\n        vfloat64m1_t vec = __riscv_vle64_v_f64m1(data, vl);\n        vfloat64m1_t diff = __riscv_vfsub_vf_f64m1(vec, mean, vl);\n        vfloat64m1_t abs_diff = __riscv_vfabs_v_f64m1(diff, vl);\n        vfloat64m1_t vred = __riscv_vfredusum_vs_f64m1_f64m1(abs_diff, \n                            __riscv_vfmv_v_f_f64m1(0.0, vl), \n                            vl);\n        abs_sum += __riscv_vfmv_f_s_f64m1_f64(vred);\n    }\n    return abs_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return 0.0;\n    }\n    double *ptr = numbers.data();\n    size_t vl;\n    vfloat64m1_t v_sum = vfmv_v_f_f64m1(0.0, 1);\n\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e64m8(avl);\n        vfloat64m8_t vec = vle64_v_f64m8(ptr, vl);\n        v_sum = vfredusum_vs_f64m8_f64m1(v_sum, vec, v_sum, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n    double sum = vfmv_f_s_f64m1_f64(v_sum);\n    double mean = sum / n;\n\n    ptr = numbers.data();\n    vfloat64m1_t v_abs_sum = vfmv_v_f_f64m1(0.0, 1);\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e64m8(avl);\n        vfloat64m8_t vec = vle64_v_f64m8(ptr, vl);\n        vec = vfsub_vf_f64m8(vec, mean, vl);\n        vec = vfabs_v_f64m8(vec, vl);\n        v_abs_sum = vfredusum_vs_f64m8_f64m1(v_abs_sum, vec, v_abs_sum, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n    double abs_sum = vfmv_f_s_f64m1_f64(v_abs_sum);\n    double mad = abs_sum / n;\n    return mad;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers){\n    size_t n = numbers.size();\n    if (n == 0) {\n        return 0.0;\n    }\n    double *data = numbers.data();\n    double sum = 0.0;\n    size_t vl;\n\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e64m8(avl);\n        vfloat64m8_t vec_data = vle64_v_f64m8(data, vl);\n        vfloat64m1_t v_initial = vfmv_v_f_f64m1(0.0, 1);\n        vfloat64m1_t v_sum_chunk = vfredusum_vs_f64m8_f64m1(v_initial, vec_data, v_initial, vl);\n        double chunk_sum = vfmv_f_s_f64m1_f64(v_sum_chunk);\n        sum += chunk_sum;\n        data += vl;\n        avl -= vl;\n    }\n\n    double mean = sum / n;\n    data = numbers.data();\n    double abs_sum = 0.0;\n\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e64m8(avl);\n        vfloat64m8_t vec_data = vle64_v_f64m8(data, vl);\n        vfloat64m8_t vec_diff = vfsub_vf_f64m8(vec_data, mean, vl);\n        vfloat64m8_t vec_abs = vfabs_v_f64m8(vec_diff, vl);\n        vfloat64m1_t v_initial = vfmv_v_f_f64m1(0.0, 1);\n        vfloat64m1_t v_sum_chunk = vfredusum_vs_f64m8_f64m1(v_initial, vec_abs, v_initial, vl);\n        double chunk_abs_sum = vfmv_f_s_f64m1_f64(v_sum_chunk);\n        abs_sum += chunk_abs_sum;\n        data += vl;\n        avl -= vl;\n    }\n\n    return abs_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return 0.0;\n    }\n    double* data = numbers.data();\n    double mean, mad;\n    size_t vl;\n    vfloat64m1_t vec_acc, vec_data, vec_diff, vec_abs;\n\n    // Compute sum of elements\n    double sum = 0.0;\n    vec_acc = vfmv_s_f_f64m1(vec_acc, 0.0);\n    size_t avl = n;\n    while (avl > 0) {\n        vl = vsetvl_e64m1(avl);\n        vec_data = vle64_v_f64m1(data, vl);\n        vec_acc = vfredusum_vs_f64m1_f64m1(vec_data, vec_acc, vl);\n        data += vl;\n        avl -= vl;\n    }\n    mean = vfmv_f_s_f64m1_f64(vec_acc) / n;\n\n    // Compute sum of absolute differences\n    data = numbers.data();\n    avl = n;\n    vec_acc = vfmv_s_f_f64m1(vec_acc, 0.0);\n    while (avl > 0) {\n        vl = vsetvl_e64m1(avl);\n        vec_data = vle64_v_f64m1(data, vl);\n        vec_diff = vfsub_vf_f64m1(vec_data, mean, vl);\n        vec_abs = vfabs_v_f64m1(vec_diff, vl);\n        vec_acc = vfredusum_vs_f64m1_f64m1(vec_abs, vec_acc, vl);\n        data += vl;\n        avl -= vl;\n    }\n    mad = vfmv_f_s_f64m1_f64(vec_acc) / n;\n    return mad;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return std::vector<int>();\n    }\n    std::vector<int> result(2 * n - 1);\n\n    if (n == 1) {\n        result[0] = numbers[0];\n        return result;\n    }\n\n    size_t vl;\n    for (size_t i = 0; i < n - 1; ) {\n        vl = vsetvl_e32m1(n - 1 - i);\n        vint32m1_t num_vec = vle32_v_i32m1(&numbers[i], vl);\n        vsse32_v_i32m1(&result[2 * i], 2 * sizeof(int), num_vec, vl);\n        vint32m1_t delim_vec = vmv_v_x_i32m1(delimeter, vl);\n        vsse32_v_i32m1(&result[2 * i + 1], 2 * sizeof(int), delim_vec, vl);\n        i += vl;\n    }\n    result[2 * n - 2] = numbers[n - 1];\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return std::vector<int>();\n    }\n    std::vector<int> output(2 * n - 1);\n    int *in_ptr = numbers.data();\n    int *out_ptr = output.data();\n\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vle32_v_i32m1(in_ptr, vl);\n        vsse32_v_i32m1(out_ptr, 2 * sizeof(int), vec, vl);\n        in_ptr += vl;\n        out_ptr += 2 * vl;\n        avl -= vl;\n    }\n\n    if (n > 1) {\n        avl = n - 1;\n        out_ptr = output.data() + 1;\n        while (avl > 0) {\n            size_t vl = vsetvl_e32m1(avl);\n            vint32m1_t del_vec = vmv_v_x_i32m1(delimeter, vl);\n            vsse32_v_i32m1(out_ptr, 2 * sizeof(int), del_vec, vl);\n            out_ptr += 2 * vl;\n            avl -= vl;\n        }\n    }\n\n    return output;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) {\n        return {};\n    }\n    size_t n = numbers.size();\n    std::vector<int> out(2 * n - 1);\n    \n    size_t vl;\n    const int *in_ptr = numbers.data();\n    int *out_ptr = out.data();\n    size_t n_left = n;\n    \n    while (n_left > 0) {\n        vl = vsetvl_e32m1(n_left);\n        vint32m1_t v_src = vle32_v_i32m1(in_ptr, vl);\n        vsse32_v_i32m1(out_ptr, 2 * sizeof(int), v_src, vl);\n        in_ptr += vl;\n        out_ptr += 2 * vl;\n        n_left -= vl;\n    }\n    \n    n_left = n - 1;\n    int *delim_ptr = out.data() + 1;\n    while (n_left > 0) {\n        vl = vsetvl_e32m1(n_left);\n        vint32m1_t v_deli = vmv_v_x_i32m1(delimeter, vl);\n        vsse32_v_i32m1(delim_ptr, 2 * sizeof(int), v_deli, vl);\n        delim_ptr += 2 * vl;\n        n_left -= vl;\n    }\n    \n    return out;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return {};\n    }\n    std::vector<int> out(2 * n - 1);\n    int *out_ptr = out.data();\n    const int *in_ptr = numbers.data();\n    size_t orig_n = n;\n\n    while (n > 0) {\n        size_t vl = vsetvl_e32m1(n);\n        vint32m1_t v_data = vle32_v_i32m1(in_ptr, vl);\n        vsse32_v_i32m1(out_ptr, 2 * sizeof(int), v_data, vl);\n        in_ptr += vl;\n        out_ptr += 2 * vl;\n        n -= vl;\n    }\n\n    size_t odd_count = orig_n - 1;\n    if (odd_count > 0) {\n        int *odd_ptr = out.data() + 1;\n        while (odd_count > 0) {\n            size_t vl = vsetvl_e32m1(odd_count);\n            vint32m1_t v_del = vmv_v_x_i32m1(delimeter, vl);\n            vsse32_v_i32m1(odd_ptr, 2 * sizeof(int), v_del, vl);\n            odd_ptr += 2 * vl;\n            odd_count -= vl;\n        }\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return std::vector<int>();\n    }\n    std::vector<int> out(2 * n - 1);\n\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_data = __riscv_vle32_v_i32m1(&numbers[i], vl);\n        __riscv_vsse32_v_i32m1(&out[2 * i], 2 * sizeof(int), v_data, vl);\n        i += vl;\n    }\n\n    if (n > 1) {\n        for (size_t i = 0; i < n - 1; ) {\n            vl = __riscv_vsetvl_e32m1(n - 1 - i);\n            vint32m1_t v_del = __riscv_vmv_v_x_i32m1(delimeter, vl);\n            __riscv_vsse32_v_i32m1(&out[2 * i + 1], 2 * sizeof(int), v_del, vl);\n            i += vl;\n        }\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    if (numbers.empty()) {\n        return {0, 1};\n    }\n    \n    int64_t sum_val = 0;\n    int64_t prod_val = 1;\n    size_t n = numbers.size();\n    const int16_t *ptr = numbers.data();\n    \n    vint64m1_t sum_red = vmv_s_x_i64m1(0, 1);\n    size_t vl;\n    while (n > 0) {\n        vl = vsetvl_e16m8(n);\n        vint16m8_t vec = vle16_v_i16m8(ptr, vl);\n        ptr += vl;\n        n -= vl;\n        sum_red = vwredsum_vs_i16m8_i64m1(vec, sum_red, vl);\n    }\n    sum_val = vmv_x_s_i64m1_i64(sum_red);\n    \n    n = numbers.size();\n    ptr = numbers.data();\n    while (n > 0) {\n        vl = vsetvl_e16m1(n);\n        vint16m1_t vec = vle16_v_i16m1(ptr, vl);\n        ptr += vl;\n        n -= vl;\n        vint32m1_t vec32 = vwcvt_x_x_v_i32m1(vec, vl);\n        vint64m1_t vec64 = vwcvt_x_x_v_i64m1(vec32, vl);\n        int64_t buffer[vl];\n        vse64_v_i64m1(buffer, vec64, vl);\n        for (size_t i = 0; i < vl; ++i) {\n            prod_val *= buffer[i];\n        }\n    }\n    \n    return {sum_val, prod_val};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    const int16_t *ptr = numbers.data();\n    size_t n = numbers.size();\n    vint64m1_t sum_red = __riscv_vmv_v_x_i64m1(0, 1);\n    vint64m1_t prod_red = __riscv_vmv_v_x_i64m1(1, 1);\n\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl, ptr += vl) {\n        vl = __riscv_vsetvl_e16mf4(avl);\n        vint16mf4_t chunk = __riscv_vle16_v_i16mf4(ptr, vl);\n        vint32mf2_t w32 = __riscv_vwadd_vx_i32mf2(chunk, 0, vl);\n        vint64m1_t w64 = __riscv_vwadd_vx_i64m1(w32, 0, vl);\n\n        sum_red = __riscv_vredsum_vs_i64m1_i64m1(w64, sum_red, vl);\n        prod_red = __riscv_vredmul_vs_i64m1_i64m1(w64, prod_red, vl);\n    }\n\n    int64_t sum_val = __riscv_vmv_x_s_i64m1_i64(sum_red);\n    int64_t prod_val = __riscv_vmv_x_s_i64m1_i64(prod_red);\n\n    return {sum_val, prod_val};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```cpp\n#include <vector>\n#include <riscv_vector.h>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return std::vector<int64_t>{0, 1};\n    }\n\n    const int16_t *ptr = numbers.data();\n    size_t avl = n;\n    vint64m1_t sum_red = vmv_v_x_i64m1(0, 1);\n    while (avl > 0) {\n        size_t vl = vsetvl_e16m4(avl);\n        vint16m4_t v = vle16_v_i16m4(ptr, vl);\n        vint32m8_t v_w = vwcvt_x_x_v_i32m8(v, vl);\n        sum_red = vwredsum_vs_i32m8_i64m1(v_w, sum_red, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n    int64_t sum = vmv_x_s_i64m1_i64(sum_red);\n\n    std::vector<int64_t> temp;\n    temp.reserve(n);\n    for (auto x : numbers) {\n        temp.push_back(static_cast<int64_t>(x));\n    }\n    avl = n;\n    int64_t *temp_ptr = temp.data();\n    while (avl > 1) {\n        size_t pairs = avl / 2;\n        size_t vl = vsetvl_e64m1(pairs);\n        vint64m1_t even = vlse64_v_i64m1(temp_ptr, 2 * sizeof(int64_t), vl);\n        vint64m1_t odd = vlse64_v_i64m1(temp_ptr + 1, 2 * sizeof(int64_t), vl);\n        vint64m1_t prod = vmul_vv_i64m1(even, odd, vl);\n        vse64_v_i64m1(temp_ptr, prod, vl);\n        if (avl % 2 == 1) {\n            temp_ptr[vl] = temp_ptr[avl - 1];\n            avl = vl + 1;\n        } else {\n            avl = vl;\n        }\n    }\n    int64_t product = temp_ptr[0];\n\n    return std::vector<int64_t>{sum, product};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    if (numbers.empty()) {\n        return {0, 1};\n    }\n    \n    size_t n = numbers.size();\n    const int16_t* ptr = numbers.data();\n    int64_t product = 1;\n    vint64m1_t sum_red = vmv_s_x_i64m1(0);\n    \n    for (size_t vl; n > 0; n -= vl, ptr += vl) {\n        vl = vsetvl_e16m1(n);\n        vint16m1_t v = vle16_v_i16m1(ptr, vl);\n        \n        vint32m2_t v32 = vwcvt_x_x_v_i32m2(v, vl);\n        sum_red = vwredsum_vs_i32m2_i64m1(sum_red, v32, sum_red, vl);\n        \n        for (size_t i = 0; i < vl; ++i) {\n            product *= vget_i16m1_i16(v, i);\n        }\n    }\n    \n    int64_t sum = vget_i64m1_i64(sum_red, 0);\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n    size_t n = numbers.size();\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    size_t vl;\n    for (size_t pos = 0; pos < n; ) {\n        vl = __riscv_vsetvl_e16m1(n - pos);\n        vint16m1_t v16 = __riscv_vle16_v_i16m1(&numbers[pos], vl);\n\n        vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t v_sum_red = __riscv_vwredsum_vs_i16m1_i32m1(v16, v_zero, vl);\n        int32_t sum_seg = __riscv_vmv_x_s_i32m1_i32(v_sum_red);\n        sum += sum_seg;\n\n        vint32m2_t v32 = __riscv_vwcvt_x_x_v_i32m2(v16, vl);\n        vint64m2_t v64 = __riscv_vwadd_vx_i64m2(v32, 0, vl);\n        size_t avl = vl;\n        while (avl > 1) {\n            size_t avl_next = (avl + 1) / 2;\n            size_t active = avl - avl_next;\n            vint64m2_t v_high = __riscv_vslidedown_vx_i64m2(v64, avl_next, active);\n            vint64m2_t v_low = __riscv_vslidedown_vx_i64m2(v64, 0, active);\n            v_low = __riscv_vmul_vv_i64m2(v_low, v_high, active);\n            if (avl_next > active) {\n                vint64m2_t v_rem = __riscv_vslidedown_vx_i64m2(v64, active, 1);\n                v_low = __riscv_vslideup_vx_i64m2(v_low, v_rem, active, avl_next);\n            }\n            v64 = v_low;\n            avl = avl_next;\n        }\n        int64_t prod_seg = __riscv_vmv_x_s_i64m2_i64(v64);\n        product *= prod_seg;\n        pos += vl;\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```cpp\n#include <vector>\n#include <climits>\n#include <riscv_vector.h>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) {\n        return result;\n    }\n    \n    int carry = INT_MIN;\n    int* input_ptr = numbers.data();\n    int* output_ptr = result.data();\n    size_t avl = n;\n    \n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t input_vec = __riscv_vle32_v_i32m1(input_ptr, vl);\n        vint32m1_t res_vec;\n        int current = carry;\n        \n        for (size_t j = 0; j < vl; j++) {\n            vint32m1_t slid = __riscv_vslidedown_vx_i32m1(input_vec, j, 1);\n            int element = __riscv_vmv_x_s_i32m1_i32(slid);\n            if (element > current) {\n                current = element;\n            }\n            res_vec = __riscv_vset_vx_i32m1(res_vec, j, current);\n        }\n        \n        carry = current;\n        __riscv_vse32_v_i32m1(output_ptr, res_vec, vl);\n        \n        input_ptr += vl;\n        output_ptr += vl;\n        avl -= vl;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) {\n        return result;\n    }\n    result[0] = numbers[0];\n    int current_max = result[0];\n    size_t avl = n - 1;\n    size_t pos = 1;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(&numbers[pos], vl);\n        int tmp_in[vl];\n        int tmp_out[vl];\n        __riscv_vse32_v_i32m1(tmp_in, vec, vl);\n        for (size_t i = 0; i < vl; ++i) {\n            current_max = std::max(current_max, tmp_in[i]);\n            tmp_out[i] = current_max;\n        }\n        vint32m1_t out_vec = __riscv_vle32_v_i32m1(tmp_out, vl);\n        __riscv_vse32_v_i32m1(&result[pos], out_vec, vl);\n        pos += vl;\n        avl -= vl;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> out(n);\n    if (n == 0) {\n        return out;\n    }\n    int *in_ptr = numbers.data();\n    int *out_ptr = out.data();\n    size_t vl;\n    int prev_max = 0;\n\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v = __riscv_vle32_v_i32m1(in_ptr + i, vl);\n\n        for (size_t offset = 1; offset < vl; offset *= 2) {\n            vint32m1_t shifted = __riscv_vslideup_tu(v, v, offset, vl);\n            v = __riscv_vmax_vv_i32m1(v, shifted, vl);\n        }\n\n        if (i > 0) {\n            vint32m1_t prev_vec = __riscv_vmv_v_x_i32m1(prev_max, vl);\n            v = __riscv_vmax_vv_i32m1(prev_vec, v, vl);\n        }\n\n        __riscv_vse32_v_i32m1(out_ptr + i, v, vl);\n\n        size_t vl_last = __riscv_vsetvl_e32m1(1);\n        vint32m1_t last_vec = __riscv_vslidedown_vx_i32m1(v, vl - 1, vl_last);\n        prev_max = __riscv_vmv_x_s_i32m1_i32(last_vec);\n        i += vl;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n#include <alloca.h>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n    if (n == 0) {\n        return result;\n    }\n\n    size_t max_vl = vsetvlmax_e32m1();\n    int *tmp_arr = (int *)alloca(max_vl * sizeof(int));\n    int current_max = INT_MIN;\n    size_t i = 0;\n\n    while (i < n) {\n        size_t vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_data = vle32_v_i32m1(&numbers[i], vl);\n        vse32_v_i32m1(tmp_arr, v_data, vl);\n\n        int temp = current_max;\n        for (size_t j = 0; j < vl; j++) {\n            if (tmp_arr[j] > temp) {\n                temp = tmp_arr[j];\n            }\n            tmp_arr[j] = temp;\n        }\n        current_max = temp;\n\n        vint32m1_t v_result = vle32_v_i32m1(tmp_arr, vl);\n        vse32_v_i32m1(&result[i], v_result, vl);\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) return numbers;\n    std::vector<int> out = numbers;\n    for (size_t stride = 1; stride < n; stride *= 2) {\n        size_t start = stride;\n        size_t remaining = n - stride;\n        size_t vl;\n        for (size_t i = start; i < n; i += vl) {\n            vl = vsetvl_e32m1(remaining);\n            vint32m1_t current = vle32_v_i32m1(&out[i], vl);\n            vint32m1_t prev = vle32_v_i32m1(&out[i - stride], vl);\n            vint32m1_t result = vmax_vv_i32m1(current, prev, vl);\n            vse32_v_i32m1(&out[i], result, vl);\n            remaining -= vl;\n        }\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    if (a.size() != b.size()) {\n        return \"\";\n    }\n    size_t n = a.size();\n    std::string res(n, '\\0');\n    size_t avl = n;\n    size_t vl;\n    while (avl > 0) {\n        vl = vsetvl_e8m8(avl);\n        const char* a_ptr = a.data() + (n - avl);\n        const char* b_ptr = b.data() + (n - avl);\n        char* res_ptr = res.data() + (n - avl);\n        vuint8m8_t va = vle8_v_u8m8((const uint8_t*)a_ptr, vl);\n        vuint8m8_t vb = vle8_v_u8m8((const uint8_t*)b_ptr, vl);\n        vuint8m8_t v_xor = vxor_vv_u8m8(va, vb, vl);\n        vuint8m8_t v_res = vadd_vx_u8m8(v_xor, 48, vl);\n        vse8_v_u8m8((uint8_t*)res_ptr, v_res, vl);\n        avl -= vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    if (a.size() != b.size()) {\n        return \"\";\n    }\n    std::string res(a.size(), '0');\n    size_t n = a.size();\n    const char *a_ptr = a.data();\n    const char *b_ptr = b.data();\n    char *r_ptr = &res[0];\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e8m8(avl);\n        vuint8m8_t va = __riscv_vle8_v_u8m8((const uint8_t*)a_ptr, vl);\n        vuint8m8_t vb = __riscv_vle8_v_u8m8((const uint8_t*)b_ptr, vl);\n        vuint8m8_t va01 = __riscv_vsub_vx_u8m8(va, '0', vl);\n        vuint8m8_t vb01 = __riscv_vsub_vx_u8m8(vb, '0', vl);\n        vuint8m8_t vx01 = __riscv_vxor_vv_u8m8(va01, vb01, vl);\n        vuint8m8_t vx_char = __riscv_vadd_vx_u8m8(vx01, '0', vl);\n        __riscv_vse8_v_u8m8((uint8_t*)r_ptr, vx_char, vl);\n        a_ptr += vl;\n        b_ptr += vl;\n        r_ptr += vl;\n        avl -= vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    if (a.size() != b.size()) {\n        return std::string();\n    }\n    size_t n = a.size();\n    std::string res(n, '0');\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e8m1(n - i);\n        vuint8m1_t a_vec = vle8_v_u8m1((uint8_t*)(a.data() + i), vl);\n        vuint8m1_t b_vec = vle8_v_u8m1((uint8_t*)(b.data() + i), vl);\n        vuint8m1_t xor_vec = vxor_vv_u8m1(a_vec, b_vec, vl);\n        vuint8m1_t res_vec = vadd_vx_u8m1(xor_vec, (uint8_t)'0', vl);\n        vse8_v_u8m1((uint8_t*)(res.data() + i), res_vec, vl);\n        i += vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <algorithm>\n#include <string>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    if (a.empty() || b.empty()) {\n        return std::string();\n    }\n    size_t n = std::min(a.size(), b.size());\n    std::string res;\n    res.resize(n);\n\n    const uint8_t *a_ptr = reinterpret_cast<const uint8_t*>(a.data());\n    const uint8_t *b_ptr = reinterpret_cast<const uint8_t*>(b.data());\n    uint8_t *r_ptr = reinterpret_cast<uint8_t*>(res.data());\n\n    size_t avl = n;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e8m8(avl);\n        vuint8m8_t va = __riscv_vle8_v_u8m8(a_ptr, vl);\n        vuint8m8_t vb = __riscv_vle8_v_u8m8(b_ptr, vl);\n        vuint8m8_t va01 = __riscv_vsub_vx_u8m8(va, '0', vl);\n        vuint8m8_t vb01 = __riscv_vsub_vx_u8m8(vb, '0', vl);\n        vuint8m8_t vx = __riscv_vxor_vv_u8m8(va01, vb01, vl);\n        vuint8m8_t vr = __riscv_vadd_vx_u8m8(vx, '0', vl);\n        __riscv_vse8_v_u8m8(r_ptr, vr, vl);\n\n        a_ptr += vl;\n        b_ptr += vl;\n        r_ptr += vl;\n        avl -= vl;\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t n = a.size();\n    std::string result(n, '0');\n    const uint8_t *a_data = (const uint8_t*)a.data();\n    const uint8_t *b_data = (const uint8_t*)b.data();\n    uint8_t *res_data = (uint8_t*)result.data();\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vuint8m1_t va = vle8_v_u8m1(a_data, vl);\n        vuint8m1_t vb = vle8_v_u8m1(b_data, vl);\n        vuint8m1_t vxor = vxor_vv_u8m1(va, vb, vl);\n        vuint8m1_t vres = vadd_vx_u8m1(vxor, 48, vl);\n        vse8_v_u8m1(res_data, vres, vl);\n        a_data += vl;\n        b_data += vl;\n        res_data += vl;\n        avl -= vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    size_t n = strings.size();\n    uint32_t *lengths32 = new uint32_t[n];\n    for (size_t i = 0; i < n; i++) {\n        lengths32[i] = static_cast<uint32_t>(strings[i].size());\n    }\n\n    uint32_t max_val = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vuint32m1_t vec = __riscv_vle32_v_u32m1(lengths32 + i, vl);\n        vuint32m1_t vd = __riscv_vmv_v_x_u32m1(max_val, vl);\n        vd = __riscv_vredmaxu_vs_u32m1(vec, vd, vd, vl);\n        max_val = __riscv_vmv_x_s_u32m1_u32(vd);\n        i += vl;\n    }\n\n    size_t found_index = n;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vuint32m1_t vec = __riscv_vle32_v_u32m1(lengths32 + i, vl);\n        vbool32_t mask = __riscv_vmseq_vx_u32m1_b32(vec, max_val, vl);\n        long first_in_seg = __riscv_vfirst_m_b32(mask, vl);\n        if (first_in_seg >= 0) {\n            found_index = i + first_in_seg;\n            break;\n        }\n        i += vl;\n    }\n\n    delete[] lengths32;\n    if (found_index < n) {\n        return strings[found_index];\n    } else {\n        return \"\";\n    }\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n#include <cstdint>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return std::string();\n    }\n    size_t n = strings.size();\n    std::vector<uint32_t> lens;\n    lens.reserve(n);\n    for (const auto& s : strings) {\n        lens.push_back(static_cast<uint32_t>(s.size()));\n    }\n\n    size_t vl;\n    vuint32m1_t red = __riscv_vmv_s_x_u32m1(0);\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vuint32m1_t vec = __riscv_vle32_v_u32m1(&lens[i], vl);\n        red = __riscv_vredmaxu_vs_u32m1_u32m1(vec, red, vl);\n        i += vl;\n    }\n    uint32_t max_val = __riscv_vmv_x_s_u32m1_u32(red);\n\n    size_t idx = n;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vuint32m1_t vec = __riscv_vle32_v_u32m1(&lens[i], vl);\n        vbool32_t mask = __riscv_vmseq_vx_u32m1_b32(vec, max_val, vl);\n        int first_in_vec = __riscv_vfirst_m_b32(mask, vl);\n        if (first_in_vec >= 0) {\n            idx = i + first_in_vec;\n            break;\n        }\n        i += vl;\n    }\n\n    return strings[idx];\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return std::string();\n    }\n    \n    std::vector<size_t> lengths;\n    lengths.reserve(strings.size());\n    for (const auto& s : strings) {\n        lengths.push_back(s.size());\n    }\n    \n    size_t n = strings.size();\n    size_t base = 0;\n    size_t max_value = 0;\n    size_t max_index = 0;\n    const size_t* lengths_ptr = lengths.data();\n    size_t avl = n;\n\n    if (sizeof(size_t) == 4) {\n        while (avl > 0) {\n            size_t vl = __riscv_vsetvl_e32m8(avl);\n            vuint32m8_t vec = __riscv_vle32_v_u32m8((const uint32_t*)lengths_ptr, vl);\n            vuint32m1_t vec_max = __riscv_vredmaxu_vs_u32m8_u32m1(vec, __riscv_vmv_s_x_u32m1(0, 1), vl);\n            uint32_t current_max = __riscv_vmv_x_s_u32m1_u32(vec_max);\n            \n            if (current_max > max_value) {\n                max_value = current_max;\n                vbool4_t mask = __riscv_vmseq_vx_u32m8_b4(vec, current_max, vl);\n                long first_in_chunk = __riscv_vfirst_m_b4(mask, vl);\n                if (first_in_chunk >= 0) {\n                    max_index = base + first_in_chunk;\n                }\n            }\n            \n            base += vl;\n            lengths_ptr += vl;\n            avl -= vl;\n        }\n    } else {\n        while (avl > 0) {\n            size_t vl = __riscv_vsetvl_e64m8(avl);\n            vuint64m8_t vec = __riscv_vle64_v_u64m8((const uint64_t*)lengths_ptr, vl);\n            vuint64m1_t vec_max = __riscv_vredmaxu_vs_u64m8_u64m1(vec, __riscv_vmv_s_x_u64m1(0, 1), vl);\n            uint64_t current_max = __riscv_vmv_x_s_u64m1_u64(vec_max);\n            \n            if (current_max > max_value) {\n                max_value = current_max;\n                vbool8_t mask = __riscv_vmseq_vx_u64m8_b8(vec, current_max, vl);\n                long first_in_chunk = __riscv_vfirst_m_b8(mask, vl);\n                if (first_in_chunk >= 0) {\n                    max_index = base + first_in_chunk;\n                }\n            }\n            \n            base += vl;\n            lengths_ptr += vl;\n            avl -= vl;\n        }\n    }\n    \n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    size_t n = strings.size();\n    if (n == 0) {\n        return std::string();\n    }\n\n    std::vector<uint32_t> lens32(n);\n    for (size_t i = 0; i < n; i++) {\n        lens32[i] = static_cast<uint32_t>(strings[i].size());\n    }\n\n    uint32_t max_val32 = lens32[0];\n    size_t max_index = 0;\n    size_t i = 0;\n    size_t avl = n;\n\n    while (i < avl) {\n        size_t vl = vsetvl_e32m1(avl - i);\n        vuint32m1_t vec_len = vle32_v_u32m1(&lens32[i], vl);\n        vuint32m1_t vec_red = vmv_v_x_u32m1(0, 1);\n        vec_red = vredmaxu_vs_u32m1_u32m1(vec_len, vec_red, vl);\n        uint32_t seg_max = vmv_x_s_u32m1_u32(vec_red);\n\n        if (seg_max > max_val32) {\n            vbool32_t mask = vmseq_vx_u32m1_b32(vec_len, seg_max, vl);\n            long first_in_seg = vfirst_m_b32(mask, vl);\n            if (first_in_seg >= 0) {\n                max_val32 = seg_max;\n                max_index = i + first_in_seg;\n            }\n        }\n        i += vl;\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string longest_simd(const std::vector<std::string> & strings) {\n    size_t n = strings.size();\n    if (n == 0) {\n        return std::string();\n    }\n\n    std::vector<size_t> lengths;\n    lengths.reserve(n);\n    for (const auto& s : strings) {\n        lengths.push_back(s.size());\n    }\n\n    size_t global_max = 0;\n    size_t global_index = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e64m1(n - i);\n        vuint64m1_t vec_len = __riscv_vle64_v_u64m1(&lengths[i], vl);\n        vuint64m1_t vec_max = __riscv_vredmaxu_vs_u64m1_u64m1(vec_len, __riscv_vmv_v_x_u64m1(0, vl), vl);\n        size_t current_max = __riscv_vmv_x_s_u64m1_u64(vec_max);\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(vec_len, current_max, vl);\n        long first_in_vec = __riscv_vfirst_m_b64(mask, vl);\n\n        if (current_max > global_max) {\n            global_max = current_max;\n            if (first_in_vec >= 0) {\n                global_index = i + first_in_vec;\n            }\n        }\n\n        i += vl;\n    }\n\n    return strings[global_index];\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    if (a == 0) return b;\n    if (b == 0) return a;\n    \n    size_t vl = 2;\n    uint64_t arr[2] = {a, b};\n    vuint64m1_t vec = __riscv_vle64_v_u64m1(arr, vl);\n    int shift = 0;\n\n    while (1) {\n        vuint64m1_t and1 = __riscv_vand_vx_u64m1(vec, 1, vl);\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(and1, 0, vl);\n        unsigned long mask_count = __riscv_vcpop_m_b64(mask, vl);\n        if (mask_count != 2) break;\n        shift++;\n        vec = __riscv_vsrl_vx_u64m1(vec, 1, vl);\n    }\n\n    while (1) {\n        vuint64m1_t and1 = __riscv_vand_vx_u64m1(vec, 1, vl);\n        vbool64_t mask_even = __riscv_vmseq_vx_u64m1_b64(and1, 0, vl);\n        if (__riscv_vcpop_m_b64(mask_even, vl) == 0) break;\n        vuint64m1_t shifted = __riscv_vsrl_vx_u64m1(vec, 1, vl);\n        vec = __riscv_vmerge_vvm_u64m1(vec, shifted, mask_even, vl);\n    }\n\n    while (1) {\n        uint64_t temp[2];\n        __riscv_vse64_v_u64m1(temp, vec, vl);\n        uint64_t u0 = temp[0];\n        uint64_t u1 = temp[1];\n        if (u0 == 0 || u1 == 0) break;\n\n        while (1) {\n            vuint64m1_t and1 = __riscv_vand_vx_u64m1(vec, 1, vl);\n            vbool64_t mask_even = __riscv_vmseq_vx_u64m1_b64(and1, 0, vl);\n            if (__riscv_vcpop_m_b64(mask_even, vl) == 0) break;\n            vuint64m1_t shifted = __riscv_vsrl_vx_u64m1(vec, 1, vl);\n            vec = __riscv_vmerge_vvm_u64m1(vec, shifted, mask_even, vl);\n        }\n\n        __riscv_vse64_v_u64m1(temp, vec, vl);\n        u0 = temp[0];\n        u1 = temp[1];\n        if (u0 >= u1) {\n            temp[0] = (u0 - u1) >> 1;\n        } else {\n            temp[1] = (u1 - u0) >> 1;\n        }\n        vec = __riscv_vle64_v_u64m1(temp, vl);\n    }\n\n    uint64_t temp[2];\n    __riscv_vse64_v_u64m1(temp, vec, vl);\n    uint64_t non_zero = temp[0] != 0 ? temp[0] : temp[1];\n    return non_zero << shift;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    if (a == 0) return b;\n    if (b == 0) return a;\n\n    size_t vl = 2;\n    uint64_t numbers[2] = {a, b};\n    vuint64m1_t v = __riscv_vle64_v_u64m1(numbers, vl);\n    int count = 0;\n\n    vuint64m1_t ones = __riscv_vmv_v_x_u64m1(1, vl);\n    vbool64_t mask_even;\n    while (1) {\n        vuint64m1_t and_res = __riscv_vand_vx_u64m1(v, 1, vl);\n        mask_even = __riscv_vmseq_vx_u64m1_b64(and_res, 0, vl);\n        if (__riscv_vcpop_m_b64(mask_even, vl) != 2) \n            break;\n        v = __riscv_vsrl_vx_u64m1(v, 1, vl);\n        count++;\n    }\n\n    while (1) {\n        vuint64m1_t and_res = __riscv_vand_vx_u64m1(v, 1, vl);\n        mask_even = __riscv_vmseq_vx_u64m1_b64(and_res, 0, vl);\n        if (__riscv_vcpop_m_b64(mask_even, vl) == 0) \n            break;\n        v = __riscv_vsrl_vx_u64m1_m(mask_even, v, v, 1, vl);\n    }\n\n    uint64_t a_val, b_val;\n    while (1) {\n        a_val = __riscv_vget_u64m1(v, 0);\n        b_val = __riscv_vget_u64m1(v, 1);\n        if (a_val == b_val) \n            break;\n        if (a_val > b_val) {\n            uint64_t temp = a_val;\n            a_val = b_val;\n            b_val = temp;\n        }\n        b_val = b_val - a_val;\n        while ((b_val & 1) == 0) \n            b_val >>= 1;\n        v = __riscv_vset_v_u64m1_u64m1(v, 0, a_val);\n        v = __riscv_vset_v_u64m1_u64m1(v, 1, b_val);\n    }\n\n    return a_val << count;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    if (a == 0) return b;\n    if (b == 0) return a;\n\n    uint64_t arr[2] = {a, b};\n    size_t vl = vsetivli_e64m1(2);\n    unsigned long k = 0;\n\n    while (1) {\n        vuint64m1_t vec = vle64_v_u64m1(arr, vl);\n        vuint64m1_t lsb = vand_vx_u64m1(vec, 1, vl);\n        vbool64_t odd = vmseq_vx_u64m1_b64(lsb, 1, vl);\n        if (vpopc_m_b64(odd, vl) > 0) {\n            break;\n        }\n        vec = vsrl_vx_u64m1(vec, 1, vl);\n        vse64_v_u64m1(arr, vec, vl);\n        k++;\n    }\n\n    while (arr[0] != 0 && arr[1] != 0) {\n        vuint64m1_t vec = vle64_v_u64m1(arr, vl);\n        vuint64m1_t lsb = vand_vx_u64m1(vec, 1, vl);\n        vbool64_t even = vmseq_vx_u64m1_b64(lsb, 0, vl);\n        if (vpopc_m_b64(even, vl) > 0) {\n            vuint64m1_t shifted = vsrl_vx_u64m1(vec, 1, vl);\n            vec = vmerge_vvm_u64m1(even, vec, shifted, vl);\n            vse64_v_u64m1(arr, vec, vl);\n        } else {\n            uint64_t a_val = arr[0];\n            uint64_t b_val = arr[1];\n            if (a_val >= b_val) {\n                a_val = (a_val - b_val) >> 1;\n            } else {\n                b_val = (b_val - a_val) >> 1;\n            }\n            arr[0] = a_val;\n            arr[1] = b_val;\n        }\n    }\n\n    uint64_t g = arr[0] | arr[1];\n    return g << k;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    if (a == 0) return b;\n    if (b == 0) return a;\n\n    size_t vl = 2;\n    uint64_t arr[2] = {a, b};\n    vuint64m1_t v = __riscv_vle64_v_u64m1(arr, vl);\n    uint64_t idx_arr[2] = {1, 0};\n    vuint64m1_t vidx = __riscv_vle64_v_u64m1(idx_arr, vl);\n    uint64_t shift = 0;\n\n    while (1) {\n        vuint64m1_t low = __riscv_vand_vx_u64m1(v, 1, vl);\n        vbool64_t mask_even = __riscv_vmseq_vx_u64m1_b64(low, 0, vl);\n        long vcpop = __riscv_vcpop_m_b64(mask_even, vl);\n        if (vcpop == 2) {\n            v = __riscv_vsrl_vx_u64m1(v, 1, vl);\n            shift++;\n        } else {\n            break;\n        }\n    }\n\n    while (1) {\n        while (1) {\n            vuint64m1_t low = __riscv_vand_vx_u64m1(v, 1, vl);\n            vbool64_t mask_even = __riscv_vmseq_vx_u64m1_b64(low, 0, vl);\n            long vcpop = __riscv_vcpop_m_b64(mask_even, vl);\n            if (vcpop > 0) {\n                v = __riscv_vsrl_vx_u64m1_m(mask_even, v, v, 1, vl);\n            } else {\n                break;\n            }\n        }\n\n        vuint64m1_t reversed = __riscv_vrgather_vv_u64m1(v, vidx, vl);\n        vbool64_t mask_eq = __riscv_vmseq_vv_u64m1_b64(v, reversed, vl);\n        if (__riscv_vcpop_m_b64(mask_eq, vl) > 0) {\n            break;\n        }\n\n        reversed = __riscv_vrgather_vv_u64m1(v, vidx, vl);\n        vbool64_t mask_gt = __riscv_vmsgtu_vv_u64m1_b64(v, reversed, vl);\n        vuint64m1_t diff = __riscv_vsub_vv_u64m1(v, reversed, vl);\n        vuint64m1_t shifted_diff = __riscv_vsrl_vx_u64m1(diff, 1, vl);\n        v = __riscv_vmerge_vvm_u64m1(mask_gt, shifted_diff, v, vl);\n    }\n\n    uint64_t res = __riscv_vget_v_u64m1_u64(v, 0);\n    return res << shift;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    if (a == 0) return b;\n    if (b == 0) return a;\n\n    int shift_a = __builtin_ctzl(a);\n    int shift_b = __builtin_ctzl(b);\n    uint64_t shift = shift_a < shift_b ? shift_a : shift_b;\n\n    a >>= shift_a;\n    b >>= shift_b;\n\n    size_t vl = vsetvl_e64m1(1);\n    vuint64m1_t va = vmv_v_x_u64m1(a, vl);\n    vuint64m1_t vb = vmv_v_x_u64m1(b, vl);\n\n    while (1) {\n        uint64_t a_val = vmv_x_s_u64m1_u64(va);\n        uint64_t b_val = vmv_x_s_u64m1_u64(vb);\n        if (a_val == b_val) break;\n\n        if (a_val > b_val) {\n            va = vsub_vv_u64m1(va, vb, vl);\n            a_val = vmv_x_s_u64m1_u64(va);\n            int shift_va = __builtin_ctzl(a_val);\n            va = vsrl_vx_u64m1(va, shift_va, vl);\n        } else {\n            vb = vsub_vv_u64m1(vb, va, vl);\n            b_val = vmv_x_s_u64m1_u64(vb);\n            int shift_vb = __builtin_ctzl(b_val);\n            vb = vsrl_vx_u64m1(vb, shift_vb, vl);\n        }\n    }\n\n    uint64_t res = vmv_x_s_u64m1_u64(va);\n    return res << shift;\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    if (n < 2) {\n        return {};\n    }\n    std::sort(numbers.begin(), numbers.end());\n\n    float *data = numbers.data();\n    float *ptr = data;\n    size_t avl = n - 1;\n    float min_diff = INFINITY;\n    size_t min_index = 0;\n    vfloat32m1_t v_red;\n\n    size_t vl;\n    for (; avl > 0; ) {\n        vl = vsetvl_e32m8(avl);\n        vfloat32m8_t a = vle32_v_f32m8(ptr, vl);\n        vfloat32m8_t b = vle32_v_f32m8(ptr + 1, vl);\n        vfloat32m8_t diff = vfsub_vv_f32m8(b, a, vl);\n\n        v_red = vfmv_s_f_f32m1(v_red, min_diff, vl);\n        v_red = vfredmin_vs_f32m8_f32m1(diff, v_red, vl);\n        float seg_min_val = vfmv_f_s_f32m1_f32(v_red);\n\n        if (seg_min_val < min_diff) {\n            min_diff = seg_min_val;\n            vbool4_t mask = vmfeq_vf_f32m8_b4(diff, seg_min_val, vl);\n            unsigned long first_index = vfirst_m_b4(mask, vl);\n            if (first_index != (unsigned long)(-1)) {\n                min_index = (ptr - data) + first_index;\n            }\n        }\n\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return { numbers[min_index], numbers[min_index + 1] };\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```cpp\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <riscv_vector.h>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    int n = numbers.size();\n    if (n < 2) {\n        return {};\n    }\n    std::sort(numbers.begin(), numbers.end());\n    float global_min = INFINITY;\n    size_t global_index = 0;\n    size_t vl;\n    for (size_t i = 0; i < static_cast<size_t>(n-1); ) {\n        vl = vsetvl_e32m1(n-1 - i);\n        vfloat32m1_t current_vec = vle32_v_f32m1(&numbers[i], vl);\n        vfloat32m1_t next_vec = vle32_v_f32m1(&numbers[i+1], vl);\n        vfloat32m1_t diff_vec = vfsub_vv_f32m1(next_vec, current_vec, vl);\n        vfloat32m1_t vmin_init = vfmv_v_f_f32m1(INFINITY, vl);\n        vfloat32m1_t seg_min_vec = vfredmin_vs_f32m1(diff_vec, vmin_init, vl);\n        float seg_min = vfmv_f_s_f32m1(seg_min_vec);\n        if (seg_min < global_min) {\n            global_min = seg_min;\n            vbool32_t mask = vmfeq_vf_f32m1_b32(diff_vec, seg_min, vl);\n            long first_index = vfirst_m_b32(mask, vl);\n            if (first_index >= 0) {\n                global_index = i + first_index;\n            }\n        }\n        i += vl;\n    }\n    return { numbers[global_index], numbers[global_index+1] };\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```cpp\n#include <algorithm>\n#include <vector>\n#include <riscv_vector.h>\n#include <limits>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    if (numbers.size() < 2) {\n        return {};\n    }\n    std::sort(numbers.begin(), numbers.end());\n    size_t n = numbers.size();\n    size_t adj_count = n - 1;\n    float min_diff = std::numeric_limits<float>::max();\n    int min_index = -1;\n\n    size_t vl;\n    for (size_t i = 0; i < adj_count; ) {\n        vl = vsetvl_e32m1(adj_count - i);\n        vfloat32m1_t a = vle32_v_f32m1(&numbers[i], vl);\n        vfloat32m1_t b = vle32_v_f32m1(&numbers[i + 1], vl);\n        vfloat32m1_t diff_vec = vfsub_vv_f32m1(b, a, vl);\n\n        vfloat32m1_t vred = vfmv_s_f_f32m1(vundefined_f32m1(), std::numeric_limits<float>::max());\n        vred = vfredmin_vs_f32m1_f32m1(vred, diff_vec, vred, vl);\n        float chunk_min = vfmv_f_s_f32m1(vred);\n\n        if (chunk_min < min_diff) {\n            min_diff = chunk_min;\n            vbool32_t mask = vmfeq_vf_f32m1_b32(diff_vec, chunk_min, vl);\n            int pos = vfirst_m_b32(mask, vl);\n            if (pos >= 0) {\n                min_index = i + pos;\n            }\n        }\n        i += vl;\n    }\n\n    return { numbers[min_index], numbers[min_index + 1] };\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cfloat>\n#include <algorithm>\n#include <vector>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    size_t n = numbers.size();\n    if (n < 2) {\n        return numbers;\n    }\n\n    float min_val = FLT_MAX;\n    size_t min_index = 0;\n    size_t vl;\n\n    for (size_t i0 = 0; i0 < n-1; ) {\n        vl = vsetvl_e32m1(n-1 - i0);\n        vfloat32m1_t v_current = vle32_v_f32m1(&numbers[i0], vl);\n        vfloat32m1_t v_next = vle32_v_f32m1(&numbers[i0+1], vl);\n        vfloat32m1_t v_diff = vfsub_vv_f32m1(v_next, v_current, vl);\n\n        vfloat32m1_t v_dest = vfmv_s_f_f32m1(vundefined_f32m1(), FLT_MAX);\n        v_dest = vfredmin_vs_f32m1_f32m1(v_dest, v_diff, v_dest, vl);\n        float seg_min = vfmv_f_s_f32m1_f32(v_dest);\n\n        if (seg_min < min_val) {\n            min_val = seg_min;\n            vbool32_t mask = vmfeq_vf_f32m1_b32(v_diff, seg_min, vl);\n            int index_in_seg = vfirst_m_b32(mask);\n            if (index_in_seg < 0) index_in_seg = 0;\n            min_index = i0 + index_in_seg;\n        }\n        i0 += vl;\n    }\n\n    return { numbers[min_index], numbers[min_index+1] };\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n#include <cfloat>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    size_t n = numbers.size();\n    if (n < 2) {\n        return {};\n    }\n    size_t n_diff = n - 1;\n    float min_val = HUGE_VALF;\n    size_t min_index = 0;\n    size_t current_index = 0;\n    size_t avl = n_diff;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vfloat32m8_t vec1 = vle32_v_f32m8(numbers.data() + current_index, vl);\n        vfloat32m8_t vec2 = vle32_v_f32m8(numbers.data() + current_index + 1, vl);\n        vfloat32m8_t diff_vec = vfsub_vv_f32m8(vec2, vec1, vl);\n\n        vfloat32m1_t v_min_seg = vfmv_s_f_f32m1(HUGE_VALF);\n        v_min_seg = vfredmin_vs_f32m8_f32m1(diff_vec, v_min_seg, vl);\n        float seg_min = vfmv_f_s_f32m1_f32(v_min_seg);\n\n        vbool4_t mask = vmfeq_vf_f32m8_b4(diff_vec, seg_min, vl);\n        long first_index = vfirst_m_b4(mask, vl);\n\n        if (first_index >= 0 && seg_min < min_val) {\n            min_val = seg_min;\n            min_index = current_index + first_index;\n        }\n        current_index += vl;\n        avl -= vl;\n    }\n\n    return {numbers[min_index], numbers[min_index + 1]};\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return numbers;\n    }\n    float *ptr = numbers.data();\n    float min_val = ptr[0];\n    float max_val = ptr[0];\n    size_t vl;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v = vle32_v_f32m1(ptr + i, vl);\n        vfloat32m1_t vmin_initial = vfmv_v_f_f32m1(min_val, vl);\n        vmin_initial = vfredmin_vs_f32m1_f32m1(v, vmin_initial, vl);\n        min_val = vfmv_f_s_f32m1_f32(vmin_initial);\n        vfloat32m1_t vmax_initial = vfmv_v_f_f32m1(max_val, vl);\n        vmax_initial = vfredmax_vs_f32m1_f32m1(v, vmax_initial, vl);\n        max_val = vfmv_f_s_f32m1_f32(vmax_initial);\n        i += vl;\n    }\n\n    float range = max_val - min_val;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v = vle32_v_f32m1(ptr + i, vl);\n        vfloat32m1_t vmin_bcast = vfmv_v_f_f32m1(min_val, vl);\n        vfloat32m1_t v_sub = vfsub_vv_f32m1(v, vmin_bcast, vl);\n        if (range != 0.0f) {\n            vfloat32m1_t v_range = vfmv_v_f_f32m1(range, vl);\n            vfloat32m1_t v_div = vfdiv_vv_f32m1(v_sub, v_range, vl);\n            vse32_v_f32m1(ptr + i, v_div, vl);\n        } else {\n            vfloat32m1_t v_zero = vfmv_v_f_f32m1(0.0f, vl);\n            vse32_v_f32m1(ptr + i, v_zero, vl);\n        }\n        i += vl;\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    std::vector<float> output(n);\n    if (n == 0) {\n        return output;\n    }\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    size_t vl;\n    vfloat32m1_t vmin, vmax;\n\n    vl = vsetvl_e32m1(1);\n    vmin = vfmv_v_f_f32m1(min_val, vl);\n    vmax = vfmv_v_f_f32m1(max_val, vl);\n\n    size_t i = 0;\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t vec = vle32_v_f32m1(&numbers[i], vl);\n        vmin = vfredmin_vs_f32m1_f32m1(vmin, vec, vmin, vl);\n        vmax = vfredmax_vs_f32m1_f32m1(vmax, vec, vmax, vl);\n        i += vl;\n    }\n    min_val = vfmv_f_s_f32m1_f32(vmin);\n    max_val = vfmv_f_s_f32m1_f32(vmax);\n\n    float range = max_val - min_val;\n    if (range == 0.0f) {\n        for (size_t j = 0; j < n; j++) {\n            output[j] = 0.0f;\n        }\n    } else {\n        i = 0;\n        while (i < n) {\n            vl = vsetvl_e32m1(n - i);\n            vfloat32m1_t vec_x = vle32_v_f32m1(&numbers[i], vl);\n            vfloat32m1_t v_min_bcast = vfmv_v_f_f32m1(min_val, vl);\n            vfloat32m1_t v_range_bcast = vfmv_v_f_f32m1(range, vl);\n            vfloat32m1_t vec_sub = vfsub_vv_f32m1(vec_x, v_min_bcast, vl);\n            vfloat32m1_t vec_div = vfdiv_vv_f32m1(vec_sub, v_range_bcast, vl);\n            vse32_v_f32m1(&output[i], vec_div, vl);\n            i += vl;\n        }\n    }\n    return output;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    std::vector<float> result(n);\n    if (n == 0) {\n        return result;\n    }\n\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    size_t vl;\n    vfloat32m1_t vec, v_min_initial, v_max_initial, vmin_temp, vmax_temp;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vec = vle32_v_f32m1(&numbers[i], vl);\n        v_min_initial = vfmv_v_f_f32m1(min_val, vl);\n        vmin_temp = vfredmin_vs_f32m1_f32m1(v_min_initial, vec, v_min_initial, vl);\n        min_val = vfmv_f_s_f32m1_f32(vmin_temp);\n        v_max_initial = vfmv_v_f_f32m1(max_val, vl);\n        vmax_temp = vfredmax_vs_f32m1_f32m1(v_max_initial, vec, v_max_initial, vl);\n        max_val = vfmv_f_s_f32m1_f32(vmax_temp);\n        i += vl;\n    }\n\n    float range = max_val - min_val;\n\n    if (range == 0.0f) {\n        for (size_t i = 0; i < n; ) {\n            vl = vsetvl_e32m1(n - i);\n            vfloat32m1_t v_half = vfmv_v_f_f32m1(0.5f, vl);\n            vse32_v_f32m1(&result[i], v_half, vl);\n            i += vl;\n        }\n    } else {\n        for (size_t i = 0; i < n; ) {\n            vl = vsetvl_e32m1(n - i);\n            vec = vle32_v_f32m1(&numbers[i], vl);\n            vfloat32m1_t v_min = vfmv_v_f_f32m1(min_val, vl);\n            vfloat32m1_t v_range = vfmv_v_f_f32m1(range, vl);\n            vfloat32m1_t v_sub = vfsub_vv_f32m1(vec, v_min, vl);\n            vfloat32m1_t v_result = vfdiv_vv_f32m1(v_sub, v_range, vl);\n            vse32_v_f32m1(&result[i], v_result, vl);\n            i += vl;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    if (n == 0) {\n        return {};\n    }\n\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    float *ptr = numbers.data();\n    size_t avl = n;\n    vfloat32m1_t min_red = vfmv_v_f_f32m1(min_val, 1);\n    vfloat32m1_t max_red = vfmv_v_f_f32m1(max_val, 1);\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t vec = vle32_v_f32m1(ptr, vl);\n        min_red = vfredmin_vs_f32m1_f32m1(min_red, vec, min_red, vl);\n        max_red = vfredmax_vs_f32m1_f32m1(max_red, vec, max_red, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    min_val = vfmv_f_s_f32m1_f32(min_red);\n    max_val = vfmv_f_s_f32m1_f32(max_red);\n\n    std::vector<float> result(n);\n    float *src = numbers.data();\n    float *dst = result.data();\n\n    if (min_val == max_val) {\n        avl = n;\n        while (avl > 0) {\n            size_t vl = vsetvl_e32m1(avl);\n            vfloat32m1_t vec_half = vfmv_v_f_f32m1(0.5f, vl);\n            vse32_v_f32m1(dst, vec_half, vl);\n            dst += vl;\n            avl -= vl;\n        }\n    } else {\n        float scale = 1.0f / (max_val - min_val);\n        avl = n;\n        while (avl > 0) {\n            size_t vl = vsetvl_e32m1(avl);\n            vfloat32m1_t vec = vle32_v_f32m1(src, vl);\n            vfloat32m1_t sub = vfsub_vf_f32m1(vec, min_val, vl);\n            vfloat32m1_t scaled = vfmul_vf_f32m1(sub, scale, vl);\n            vse32_v_f32m1(dst, scaled, vl);\n            src += vl;\n            dst += vl;\n            avl -= vl;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    std::vector<float> result(numbers.size());\n    if (numbers.empty()) {\n        return result;\n    }\n\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    size_t n = 0;\n    size_t vl;\n    vfloat32m1_t v_min, v_max;\n    v_min = vfmv_s_f_f32m1(v_min, min_val);\n    v_max = vfmv_s_f_f32m1(v_max, max_val);\n\n    for (n = 0; n < numbers.size(); ) {\n        vl = vsetvl_e32m8(numbers.size() - n);\n        vfloat32m8_t vec = vle32_v_f32m8(&numbers[n], vl);\n        v_min = vfredmin_vs_f32m8_f32m1(vec, v_min, vl);\n        v_max = vfredmax_vs_f32m8_f32m1(vec, v_max, vl);\n        n += vl;\n    }\n\n    min_val = vfmv_f_s_f32m1_f32(v_min);\n    max_val = vfmv_f_s_f32m1_f32(v_max);\n    float range = max_val - min_val;\n\n    if (range == 0.0f) {\n        for (size_t i = 0; i < result.size(); i++) {\n            result[i] = 0.5f;\n        }\n    } else {\n        n = 0;\n        while (n < numbers.size()) {\n            vl = vsetvl_e32m8(numbers.size() - n);\n            vfloat32m8_t vec = vle32_v_f32m8(&numbers[n], vl);\n            vfloat32m8_t v_min_bcast = vfmv_v_f_f32m8(min_val, vl);\n            vfloat32m8_t v_range_bcast = vfmv_v_f_f32m8(range, vl);\n            vfloat32m8_t v_sub = vfsub_vv_f32m8(vec, v_min_bcast, vl);\n            vfloat32m8_t v_res = vfdiv_vv_f32m8(v_sub, v_range_bcast, vl);\n            vse32_v_f32m8(&result[n], v_res, vl);\n            n += vl;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    if (n == 1) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        if (n == 2) {\n            return 1;\n        }\n        return n / 2;\n    }\n\n    uint64_t sqrt_n = sqrt(n);\n    if (sqrt_n * sqrt_n < n) {\n        sqrt_n++;\n    }\n\n    uint64_t d_min = 0;\n    uint64_t d = 3;\n    size_t vl;\n    while (d <= sqrt_n) {\n        vl = __riscv_vsetvl_e64m1((sqrt_n - d) / 2 + 1);\n        vuint64m1_t v_index = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t v_step = __riscv_vsll_vx_u64m1(v_index, 1, vl);\n        vuint64m1_t v_d = __riscv_vadd_vx_u64m1(v_step, d, vl);\n        uint64_t candidates[vl];\n        __riscv_vse64_v_u64m1(candidates, v_d, vl);\n\n        for (size_t i = 0; i < vl; i++) {\n            if (candidates[i] > sqrt_n) {\n                break;\n            }\n            if (n % candidates[i] == 0) {\n                d_min = candidates[i];\n                goto done;\n            }\n        }\n        d += 2 * vl;\n    }\n\ndone:\n    if (d_min) {\n        return n / d_min;\n    } else {\n        return 1;\n    }\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    if (n % 2 == 0) {\n        return n / 2;\n    }\n\n    if (n == 1) {\n        return 0;\n    }\n\n    uint64_t low = 1, high = n;\n    while (low <= high) {\n        uint64_t mid = low + (high - low) / 2;\n        if (mid > n / mid) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    uint64_t sqrt_n = high;\n\n    uint64_t base = 3;\n    size_t vl;\n    while (base <= sqrt_n) {\n        uint64_t num_odds = ((sqrt_n - base) >> 1) + 1;\n        vl = vsetvl_e64m1(num_odds);\n\n        vuint64m1_t vec_idx = vid_v_u64m1(vl);\n        vuint64m1_t vec_step = vsll_vx_u64m1(vec_idx, 1, vl);\n        vuint64m1_t vec_k = vadd_vx_u64m1(vec_step, base, vl);\n\n        vuint64m1_t vec_n = vmv_v_x_u64m1(n, vl);\n        vuint64m1_t vec_quot = vdivu_vv_u64m1(vec_n, vec_k, vl);\n        vuint64m1_t vec_rem = vnmsac_vv_u64m1(vec_n, vec_k, vec_quot, vl);\n\n        vbool64_t mask = vmseq_vx_u64m1_b64(vec_rem, 0, vl);\n        int first_index = vfirst_m_b64(mask, vl);\n        if (first_index >= 0) {\n            uint64_t factor = base + 2 * first_index;\n            return n / factor;\n        }\n\n        base += 2 * vl;\n    }\n\n    return 1;\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <math.h>\n#include <stdint.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    if (n % 2 == 0) {\n        return n / 2;\n    }\n\n    uint64_t limit = (uint64_t)sqrt((double)n);\n    if (limit > 0 && limit * limit > n) {\n        limit--;\n    }\n\n    if (limit < 3) {\n        return 1;\n    }\n\n    uint64_t start = 3;\n    uint64_t d_min = 0;\n\n    while (start <= limit) {\n        uint64_t num_candidates = (limit - start) / 2 + 1;\n        size_t vl = __riscv_vsetvl_e64m1(num_candidates);\n\n        vuint64m1_t vid = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t step_vec = __riscv_vmul_vx_u64m1(vid, 2, vl);\n        vuint64m1_t candidates = __riscv_vadd_vx_u64m1(step_vec, start, vl);\n\n        vuint64m1_t v_n = __riscv_vmv_v_x_u64m1(n, vl);\n        vuint64m1_t rem = __riscv_vremu_vv_u64m1(v_n, candidates, vl);\n\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(rem, 0, vl);\n        int found_index = __riscv_vfirst_m_b64(mask, vl);\n\n        if (found_index >= 0) {\n            uint64_t tmp[vl];\n            __riscv_vse64_v_u64m1(tmp, candidates, vl);\n            d_min = tmp[found_index];\n            break;\n        }\n\n        start += 2 * vl;\n    }\n\n    if (d_min != 0) {\n        return n / d_min;\n    } else {\n        return 1;\n    }\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    if (n == 1) {\n        return 0;\n    }\n    uint64_t sqrtn = (uint64_t)sqrt((double)n);\n    uint64_t candidate = 0;\n    uint64_t start = 2;\n    uint64_t end = sqrtn;\n\n    while (start <= end) {\n        size_t vl = vsetvl_e64m1(end - start + 1);\n        vuint64m1_t v_index = vid_v_u64m1(vl);\n        vuint64m1_t v_d = vadd_vx_u64m1(v_index, start, vl);\n        uint64_t divisors[vl];\n        vse64_v_u64m1(divisors, v_d, vl);\n\n        for (size_t j = 0; j < vl; j++) {\n            if (n % divisors[j] == 0) {\n                candidate = divisors[j];\n                break;\n            }\n        }\n        if (candidate != 0) {\n            break;\n        }\n        start += vl;\n    }\n\n    if (candidate != 0) {\n        return n / candidate;\n    } else {\n        return 1;\n    }\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    if (n == 1) {\n        return 1;\n    }\n    uint64_t base = n / 2;\n    while (base >= 1) {\n        size_t vl = vsetvl_e64m1(base);\n        vuint64m1_t vid = vid_v_u64m1(vl);\n        vuint64m1_t base_vec = vmv_v_x_u64m1(base, vl);\n        vuint64m1_t v = vsub_vv_u64m1(base_vec, vid, vl);\n        vuint64m1_t n_vec = vmv_v_x_u64m1(n, vl);\n        vuint64m1_t q = vdivu_vv_u64m1(n_vec, v, vl);\n        vuint64m1_t product = vmul_vv_u64m1(q, v, vl);\n        vuint64m1_t rem = vsub_vv_u64m1(n_vec, product, vl);\n        vbool64_t mask = vmseq_vx_u64m1_b64(rem, 0, vl);\n        int found_index = vfirst_m_b64(mask, vl);\n        if (found_index >= 0) {\n            return base - found_index;\n        }\n        base -= vl;\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) {\n        return factors;\n    }\n    int d = 2;\n    size_t vl;\n\n    while (n > 1) {\n        if (static_cast<int64_t>(d) * d > n) {\n            factors.push_back(n);\n            break;\n        }\n\n        vl = vsetvlmax_e32m1();\n        vint32m1_t v_idx = vid_v_i32m1(vl);\n        vint32m1_t v_d = vadd_vx_i32m1(v_idx, d, vl);\n        vint32m1_t v_n_vec = vmv_v_x_i32m1(n, vl);\n        vint32m1_t v_rem = vrem_vv_i32m1(v_n_vec, v_d, vl);\n        vbool32_t mask = vmseq_vx_i32m1_b32(v_rem, 0, vl);\n        int index = vfirst_m_b32(mask, vl);\n\n        if (index >= 0) {\n            int divisor = d + index;\n            factors.push_back(divisor);\n            n /= divisor;\n            d = divisor;\n        } else {\n            d += vl;\n        }\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```cpp\n#include <vector>\n#include <cmath>\n#include <riscv_vector.h>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) {\n        return factors;\n    }\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    int f = 3;\n    while (static_cast<long long>(f) * f <= n) {\n        int max_candidate = static_cast<int>(std::sqrt(n));\n        int max_i = (max_candidate - f) / 2 + 1;\n        if (max_i <= 0) {\n            break;\n        }\n        size_t vl = __riscv_vsetvl_e32m1(static_cast<size_t>(max_i));\n        vuint32m1_t vidx = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t step = __riscv_vsll_vx_u32m1(vidx, 1, vl);\n        vint32m1_t v_step = __riscv_vreinterpret_v_u32m1_i32m1(step);\n        vint32m1_t v_f = __riscv_vmv_v_x_i32m1(f, vl);\n        vint32m1_t candidates = __riscv_vadd_vv_i32m1(v_f, v_step, vl);\n        vint32m1_t v_n = __riscv_vmv_v_x_i32m1(n, vl);\n        vint32m1_t quot = __riscv_vdiv_vv_i32m1(v_n, candidates, vl);\n        vint32m1_t rem = __riscv_vsub_vv_i32m1(v_n, __riscv_vmul_vv_i32m1(quot, candidates, vl), vl);\n        vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(rem, 0, vl);\n        int first_index = __riscv_vfirst_m_b32(mask, vl);\n        if (first_index >= 0) {\n            int factor = f + 2 * first_index;\n            factors.push_back(factor);\n            n /= factor;\n            f = factor;\n        } else {\n            f += 2 * vl;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cstdlib>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) {\n        return factors;\n    }\n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    if (n == 1) {\n        return factors;\n    }\n\n    int candidate = 3;\n    while (candidate * candidate <= n) {\n        if (n % candidate == 0) {\n            factors.push_back(candidate);\n            n /= candidate;\n        } else {\n            size_t vl = __riscv_vsetvlmax_e32m1();\n            vuint32m1_t v_inc = __riscv_vid_v_u32m1(vl);\n            v_inc = __riscv_vmul_vx_u32m1(v_inc, 2, vl);\n            vuint32m1_t v_candidates = __riscv_vadd_vx_u32m1(v_inc, candidate, vl);\n\n            uint32_t *candidate_arr = (uint32_t *)malloc(vl * sizeof(uint32_t));\n            __riscv_vse32_v_u32m1(candidate_arr, v_candidates, vl);\n\n            bool found = false;\n            bool too_big = false;\n            for (size_t i = 0; i < vl; i++) {\n                if (candidate_arr[i] > n / candidate_arr[i]) {\n                    too_big = true;\n                    break;\n                }\n                if (n % candidate_arr[i] == 0) {\n                    candidate = candidate_arr[i];\n                    found = true;\n                    break;\n                }\n            }\n            free(candidate_arr);\n\n            if (found) {\n                continue;\n            } else if (too_big) {\n                break;\n            } else {\n                candidate += 2 * vl;\n            }\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> factorize_simd(int n) {\n    if (n <= 1) {\n        return {};\n    }\n    std::vector<int> factors;\n    int d = 2;\n    while (n > 1) {\n        if (d > n / d) {\n            factors.push_back(n);\n            break;\n        }\n        size_t vl = vsetvl_e32m1(8);\n        if (d + vl > n + 1) {\n            vl = n - d + 1;\n        }\n        if (vl == 0) {\n            factors.push_back(n);\n            break;\n        }\n        int divisors[8];\n        int remainders[8];\n        for (size_t i = 0; i < vl; i++) {\n            divisors[i] = d + i;\n        }\n        for (size_t i = 0; i < vl; i++) {\n            remainders[i] = n % divisors[i];\n        }\n        vint32m1_t v_rem = vle32_v_i32m1(remainders, vl);\n        vbool32_t mask = vmseq_vx_i32m1_b32(v_rem, 0, vl);\n        int found_index = vfirst_m_b32(mask, vl);\n        if (found_index >= 0) {\n            int factor = divisors[found_index];\n            factors.push_back(factor);\n            n /= factor;\n        } else {\n            d += vl;\n        }\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n    \n    unsigned int un = n;\n    unsigned int f = 2;\n\n    while (un > 1) {\n        if (f > un / f) {\n            factors.push_back(static_cast<int>(un));\n            break;\n        }\n\n        size_t vl = __riscv_vsetvl_e32m1(256);\n        vuint32m1_t vf = __riscv_vid_v_u32m1(vl);\n        vf = __riscv_vadd_vx_u32m1(vf, f, vl);\n        vuint32m1_t v_n = __riscv_vmv_v_x_u32m1(un, vl);\n        \n        vuint32m1_t vq = __riscv_vdivu_vv_u32m1(v_n, vf, vl);\n        vuint32m1_t v_rem = __riscv_vsub_vv_u32m1(v_n, __riscv_vmul_vv_u32m1(vq, vf, vl), vl);\n        \n        vbool32_t mask = __riscv_vmseq_vx_u32m1(v_rem, 0, vl);\n        int index = __riscv_vfirst_m_b32(mask, vl);\n\n        if (index >= 0) {\n            unsigned int factor = f + index;\n            factors.push_back(static_cast<int>(factor));\n            un /= factor;\n\n            while (un % factor == 0) {\n                factors.push_back(static_cast<int>(factor));\n                un /= factor;\n            }\n            f = factor + 1;\n        } else {\n            f += vl;\n        }\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return {};\n    }\n\n    std::vector<float> res;\n    const float *ptr = l.data();\n    size_t avl = n;\n\n    size_t max_vl = vsetvlmax_e32m8();\n    std::vector<float> temp_buffer(max_vl);\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vfloat32m8_t vec = vle32_v_f32m8(ptr, vl);\n        vbool4_t mask = vmfgt_vf_f32m8(vec, 0.0f, vl);\n        unsigned long npos = vpopc_b4(mask, vl);\n\n        if (npos > 0) {\n            vcompress_f32m8(mask, temp_buffer.data(), vec, vl);\n            res.insert(res.end(), temp_buffer.begin(), temp_buffer.begin() + npos);\n        }\n\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t total_positives = 0;\n    size_t n = l.size();\n    const float *src = l.data();\n\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl, src += vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vle32_v_f32m1(src, vl);\n        vbool32_t mask = __riscv_vmfgt_vf_f32m1_b32(vec, 0.0f, vl);\n        total_positives += __riscv_vpopc_m_b32(mask, vl);\n    }\n\n    std::vector<float> result(total_positives);\n\n    src = l.data();\n    float *dst = result.data();\n    for (size_t avl = n; avl > 0; avl -= vl, src += vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vle32_v_f32m1(src, vl);\n        vbool32_t mask = __riscv_vmfgt_vf_f32m1_b32(vec, 0.0f, vl);\n        size_t cnt = __riscv_vpopc_m_b32(mask, vl);\n\n        if (cnt > 0) {\n            vfloat32m1_t compressed = __riscv_vundefined_f32m1();\n            compressed = __riscv_vcompress_vm_f32m1(mask, vec, compressed, vl);\n            __riscv_vse32_v_f32m1(dst, compressed, cnt);\n            dst += cnt;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```cpp\n#include <vector>\n#include <riscv_vector.h>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return {};\n    }\n    \n    const float *data = l.data();\n    size_t total = 0;\n    size_t vl;\n    for (size_t pos = 0; pos < n; ) {\n        vl = vsetvl_e32m1(n - pos);\n        vfloat32m1_t vec = vle32_v_f32m1(data + pos, vl);\n        vbool32_t mask = vmsgt_vx_f32m1_b32(vec, 0, vl);\n        total += vcpop_m_b32(mask, vl);\n        pos += vl;\n    }\n    \n    std::vector<float> result(total);\n    float *out = result.data();\n    for (size_t pos = 0; pos < n; ) {\n        vl = vsetvl_e32m1(n - pos);\n        vfloat32m1_t vec = vle32_v_f32m1(data + pos, vl);\n        vbool32_t mask = vmsgt_vx_f32m1_b32(vec, 0, vl);\n        size_t npos = vcpop_m_b32(mask, vl);\n        if (npos > 0) {\n            vec = vcompress_vv_f32m1(vec, vec, mask, vl);\n            vse32_v_f32m1(out, vec, npos);\n            out += npos;\n        }\n        pos += vl;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return std::vector<float>();\n    }\n\n    const float* data = l.data();\n    size_t total_positives = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t vec = vle32_v_f32m1(data + i, vl);\n        vbool32_t mask = vmfgt_vf_f32m1_b32(vec, 0.0, vl);\n        total_positives += vcpop_m_b32(mask, vl);\n        i += vl;\n    }\n\n    std::vector<float> output(total_positives);\n    float* out_ptr = output.data();\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t vec = vle32_v_f32m1(data + i, vl);\n        vbool32_t mask = vmfgt_vf_f32m1_b32(vec, 0.0, vl);\n        size_t pop = vcpop_m_b32(mask, vl);\n        if (pop > 0) {\n            vfloat32m1_t compressed = vundefined_f32m1();\n            compressed = vcompress_vm_f32m1(mask, vec, compressed, vl);\n            vse32_v_f32m1(out_ptr, compressed, pop);\n            out_ptr += pop;\n        }\n        i += vl;\n    }\n\n    return output;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return {};\n    }\n\n    size_t total_positive = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m8(n - i);\n        vfloat32m8_t vec = __riscv_vle32_v_f32m8(&l[i], vl);\n        vbool4_t mask = __riscv_vmfgt_vf_f32m8_b4(vec, 0.0f, vl);\n        total_positive += __riscv_vcpop_m_b4(mask, vl);\n        i += vl;\n    }\n\n    if (total_positive == 0) {\n        return {};\n    }\n\n    std::vector<float> res(total_positive);\n    size_t j = 0;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m8(n - i);\n        vfloat32m8_t vec = __riscv_vle32_v_f32m8(&l[i], vl);\n        vbool4_t mask = __riscv_vmfgt_vf_f32m8_b4(vec, 0.0f, vl);\n        size_t seg_positive = __riscv_vcpop_m_b4(mask, vl);\n\n        if (seg_positive > 0) {\n            vfloat32m8_t dest = __riscv_vmv_v_x_f32m8(0, vl);\n            vfloat32m8_t compressed = __riscv_vcompress_vm_f32m8(mask, dest, vec, vl);\n            size_t vl_store = __riscv_vsetvl_e32m8(seg_positive);\n            __riscv_vse32_v_f32m8(&res[j], compressed, vl_store);\n            j += seg_positive;\n        }\n        i += vl;\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\n    int64_t x = n;\n    if (n > 0) {\n        while (1) {\n            int64_t y = (x + n / x) / 2;\n            if (y >= x) break;\n            x = y;\n        }\n    }\n    int64_t limit = x + 1;\n\n    size_t vl;\n    for (int64_t start = 3; start <= limit; start += vl * 2) {\n        int64_t remaining = ((limit - start) / 2) + 1;\n        vl = __riscv_vsetvl_e64m1(remaining);\n\n        vuint64m1_t v_index_u = __riscv_vid_v_u64m1(vl);\n        vint64m1_t v_index_s = __riscv_vreinterpret_v_u64m1_i64m1(v_index_u);\n        vint64m1_t v_step = __riscv_vsll_vx_i64m1(v_index_s, 1, vl);\n        vint64m1_t v_base = __riscv_vmv_v_x_i64m1(start, vl);\n        vint64m1_t v_candidate = __riscv_vadd_vv_i64m1(v_base, v_step, vl);\n\n        vint64m1_t v_n = __riscv_vmv_v_x_i64m1(n, vl);\n        vint64m1_t v_rem = __riscv_vrem_vv_i64m1(v_n, v_candidate, vl);\n\n        vbool64_t mask = __riscv_vmseq_vx_i64m1_b64(v_rem, 0, vl);\n        if (__riscv_vfirst_m_b64(mask, vl) >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <math.h>\n#include <stdbool.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n\n    int64_t sqrt_n = sqrt(n);\n    if (sqrt_n * sqrt_n == n) {\n        return false;\n    }\n\n    size_t vlmax = __riscv_vsetvlmax_e64m1();\n    vint64m1_t v_zero = __riscv_vmv_v_x_i64m1(0, vlmax);\n    vbool64_t all_ones = __riscv_vmseq_vx_i64m1_b64(v_zero, 0, vlmax);\n\n    for (int64_t base = 3; base <= sqrt_n; base += 2 * vlmax) {\n        size_t vl = __riscv_vsetvl_e64m1((sqrt_n - base) / 2 + 1);\n        vint64m1_t v_index = __riscv_vid_v_i64m1(vl);\n        vint64m1_t v_d = __riscv_vadd_vx_i64m1(__riscv_vsll_vx_i64m1(v_index, 1, vl), base, vl);\n\n        vbool64_t divisor_found = __riscv_vmfalse_b64();\n        for (size_t i = 0; i < vl; i++) {\n            int64_t d = __riscv_vmv_x_s_i64m1_i64(v_d);\n            if (n % d == 0) {\n                return false;\n            }\n            v_d = __riscv_vslidedown_vx_i64m1(v_d, 1, vl);\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_prime_simd(int64_t n){\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\n    int64_t low = 1;\n    int64_t high = n;\n    while (low <= high) {\n        int64_t mid = low + (high - low) / 2;\n        if (mid == 0) break;\n        if (mid > n / mid) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    int64_t limit = high;\n\n    if (limit < 3) {\n        return true;\n    }\n\n    size_t avl = (size_t)((limit - 1) / 2);\n    for (size_t i = 0; i < avl; ) {\n        size_t vl = __riscv_vsetvl_e64m1(avl - i);\n        vuint64m1_t v_index = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t v_div = __riscv_vadd_vx_u64m1(\n            __riscv_vsll_vx_u64m1(v_index, 1, vl),\n            3 + 2 * i,\n            vl\n        );\n        vuint64m1_t v_n = __riscv_vmv_v_x_u64m1(n, vl);\n        vuint64m1_t v_quot = __riscv_vdivu_vv_u64m1(v_n, v_div, vl);\n        vuint64m1_t v_product = __riscv_vmul_vv_u64m1(v_quot, v_div, vl);\n        vuint64m1_t v_rem = __riscv_vsub_vv_u64m1(v_n, v_product, vl);\n        vbool64_t v_mask = __riscv_vmseq_vx_u64m1_b64(v_rem, 0, vl);\n        if (__riscv_vfirst_m_b64(v_mask, vl) >= 0) {\n            return false;\n        }\n        i += vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n\n    int64_t max_div = 0;\n    if (n > 0) {\n        int64_t low = 1;\n        int64_t high = n;\n        while (low <= high) {\n            int64_t mid = low + (high - low) / 2;\n            if (mid != 0 && mid <= n / mid) {\n                max_div = mid;\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n\n    if (max_div < 3) {\n        return true;\n    }\n\n    uint64_t total = (max_div - 1) / 2;\n    size_t vl;\n    for (uint64_t i = 0; i < total; ) {\n        vl = __riscv_vsetvl_e64m1(total - i);\n        vuint64m1_t v_index = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t v_base = __riscv_vmv_v_x_u64m1(3 + 2*i, vl);\n        vuint64m1_t v_divisors = __riscv_vadd_vv_u64m1(v_base, __riscv_vmul_vx_u64m1(v_index, 2, vl), vl);\n        vuint64m1_t v_n = __riscv_vmv_v_x_u64m1(n, vl);\n        vuint64m1_t v_quot = __riscv_vdivu_vv_u64m1(v_n, v_divisors, vl);\n        vuint64m1_t v_product = __riscv_vmul_vv_u64m1(v_quot, v_divisors, vl);\n        vuint64m1_t v_rem = __riscv_vsub_vv_u64m1(v_n, v_product, vl);\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(v_rem, 0, vl);\n        if (__riscv_vfirst_m_b64(mask, vl) >= 0) {\n            return false;\n        }\n        i += vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\n    uint64_t n_val = (uint64_t)n;\n    uint64_t max_divisor = 0;\n    uint64_t bit = 1ULL << 31;\n    for (; bit != 0; bit >>= 1) {\n        uint64_t candidate = max_divisor | bit;\n        if (candidate <= n_val / candidate) {\n            max_divisor = candidate;\n        }\n    }\n\n    uint64_t i = 3;\n    while (i <= max_divisor) {\n        uint64_t remaining = max_divisor - i;\n        uint64_t count = (remaining / 2) + 1;\n        size_t vl = __riscv_vsetvl_e64m1(count);\n        if (vl == 0) break;\n\n        vuint64m1_t index_vec = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t step_vec = __riscv_vsll_vx_u64m1(index_vec, 1, vl);\n        vuint64m1_t divisor_vec = __riscv_vadd_vx_u64m1(step_vec, i, vl);\n        vuint64m1_t n_vec = __riscv_vmv_v_x_u64m1(n_val, vl);\n        vuint64m1_t rem_vec = __riscv_vremu_vv_u64m1(n_vec, divisor_vec, vl);\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(rem_vec, 0, vl);\n        int flag = __riscv_vfirst_m_b64(mask, vl);\n        if (flag >= 0) {\n            return false;\n        }\n        i += 2 * vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    if (s.empty()) return s;\n    \n    size_t n = s.size();\n    const uint8_t *data = reinterpret_cast<const uint8_t*>(s.data());\n    bool has_letter = false;\n    size_t vl;\n    \n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        vuint8m1_t chunk = __riscv_vle8_v_u8m1(data + i, vl);\n        \n        vbool8_t mask_lower = __riscv_vmsgeu_vx_u8m1_b8(chunk, 'a', vl);\n        mask_lower = __riscv_vmand_mm_b8(mask_lower, __riscv_vmsleu_vx_u8m1_b8(chunk, 'z', vl), vl);\n        vbool8_t mask_upper = __riscv_vmsgeu_vx_u8m1_b8(chunk, 'A', vl);\n        mask_upper = __riscv_vmand_mm_b8(mask_upper, __riscv_vmsleu_vx_u8m1_b8(chunk, 'Z', vl), vl);\n        vbool8_t mask_letter = __riscv_vmor_mm_b8(mask_lower, mask_upper, vl);\n        \n        if (__riscv_vcpop_m_b8(mask_letter, vl)) {\n            has_letter = true;\n            break;\n        }\n        i += vl;\n    }\n    \n    if (has_letter) {\n        std::string result = s;\n        uint8_t *res_data = reinterpret_cast<uint8_t*>(result.data());\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e8m1(n - i);\n            vuint8m1_t chunk = __riscv_vle8_v_u8m1(res_data + i, vl);\n            \n            vbool8_t mask_lower = __riscv_vmsgeu_vx_u8m1_b8(chunk, 'a', vl);\n            mask_lower = __riscv_vmand_mm_b8(mask_lower, __riscv_vmsleu_vx_u8m1_b8(chunk, 'z', vl), vl);\n            vbool8_t mask_upper = __riscv_vmsgeu_vx_u8m1_b8(chunk, 'A', vl);\n            mask_upper = __riscv_vmand_mm_b8(mask_upper, __riscv_vmsleu_vx_u8m1_b8(chunk, 'Z', vl), vl);\n            vbool8_t mask_letter = __riscv_vmor_mm_b8(mask_lower, mask_upper, vl);\n            \n            vuint8m1_t flipped = __riscv_vxor_vx_u8m1_m(mask_letter, chunk, chunk, 32, vl);\n            __riscv_vse8_v_u8m1(res_data + i, flipped, vl);\n            i += vl;\n        }\n        return result;\n    } else {\n        std::string result(n, '\\0');\n        uint8_t *res_data = reinterpret_cast<uint8_t*>(result.data());\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e8m1(n - i);\n            vuint8m1_t chunk = __riscv_vle8_v_u8m1(data + i, vl);\n            \n            vint8m1_t indices = __riscv_vid_v_i8m1(vl);\n            vint8m1_t reversed_indices = __riscv_vrsub_vx_i8m1(indices, vl - 1, vl);\n            vuint8m1_t reversed_indices_u = __riscv_vreinterpret_i8m1_u8m1(reversed_indices);\n            vuint8m1_t reversed_chunk = __riscv_vrgather_vv_u8m1(chunk, reversed_indices_u, vl);\n            \n            __riscv_vse8_v_u8m1(res_data + (n - i - vl), reversed_chunk, vl);\n            i += vl;\n        }\n        return result;\n    }\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    size_t n = s.size();\n    const uint8_t *src = (const uint8_t*)s.data();\n    bool has_letter = false;\n    size_t vl;\n    \n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        vuint8m1_t v = __riscv_vle8_v_u8m1(src + i, vl);\n        vbool8_t mask_lower = __riscv_vmand_mm_b8(\n            __riscv_vmsgeu_vx_u8m1(v, 'a', vl),\n            __riscv_vmsleu_vx_u8m1(v, 'z', vl),\n            vl\n        );\n        vbool8_t mask_upper = __riscv_vmand_mm_b8(\n            __riscv_vmsgeu_vx_u8m1(v, 'A', vl),\n            __riscv_vmsleu_vx_u8m1(v, 'Z', vl),\n            vl\n        );\n        vbool8_t mask_letter = __riscv_vmor_mm_b8(mask_lower, mask_upper, vl);\n        if (__riscv_vfirst_m_b8(mask_letter, vl) != -1) {\n            has_letter = true;\n            break;\n        }\n        i += vl;\n    }\n    \n    std::string res(n, '\\0');\n    uint8_t *dest = (uint8_t*)res.data();\n    \n    if (has_letter) {\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e8m1(n - i);\n            vuint8m1_t v = __riscv_vle8_v_u8m1(src + i, vl);\n            vbool8_t mask_lower = __riscv_vmand_mm_b8(\n                __riscv_vmsgeu_vx_u8m1(v, 'a', vl),\n                __riscv_vmsleu_vx_u8m1(v, 'z', vl),\n                vl\n            );\n            vbool8_t mask_upper = __riscv_vmand_mm_b8(\n                __riscv_vmsgeu_vx_u8m1(v, 'A', vl),\n                __riscv_vmsleu_vx_u8m1(v, 'Z', vl),\n                vl\n            );\n            vbool8_t mask_letter = __riscv_vmor_mm_b8(mask_lower, mask_upper, vl);\n            vuint8m1_t flipped = __riscv_vxor_vx_u8m1_mu(mask_letter, v, v, 32, vl);\n            __riscv_vse8_v_u8m1(dest + i, flipped, vl);\n            i += vl;\n        }\n    } else {\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e8m1(n - i);\n            const uint8_t *src_segment = src + n - i - vl;\n            vuint8m1_t data = __riscv_vle8_v_u8m1(src_segment, vl);\n            vuint8m1_t idx = __riscv_vid_v_u8m1(vl);\n            vuint8m1_t rev_idx = __riscv_vrsub_vx_u8m1(idx, vl - 1, vl);\n            vuint8m1_t rev_data = __riscv_vrgather_vv_u8m1(data, rev_idx, vl);\n            __riscv_vse8_v_u8m1(dest + i, rev_data, vl);\n            i += vl;\n        }\n    }\n    \n    return res;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    size_t n = s.size();\n    std::string res;\n    res.resize(n);\n\n    if (n == 0) {\n        return res;\n    }\n\n    const uint8_t *src = (const uint8_t*)s.data();\n    uint8_t *dst = (uint8_t*)res.data();\n    int found_letter = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e8m8(n - i);\n        vuint8m8_t v = vle8_v_u8m8(src + i, vl);\n        vbool1_t lower_mask1 = vmsgeu_vx_u8m8_b1(v, 'a', vl);\n        vbool1_t lower_mask2 = vmsleu_vx_u8m8_b1(v, 'z', vl);\n        vbool1_t lower_mask = vand_mm_b1(lower_mask1, lower_mask2, vl);\n        vbool1_t upper_mask1 = vmsgeu_vx_u8m8_b1(v, 'A', vl);\n        vbool1_t upper_mask2 = vmsleu_vx_u8m8_b1(v, 'Z', vl);\n        vbool1_t upper_mask = vand_mm_b1(upper_mask1, upper_mask2, vl);\n        vbool1_t letter_mask = vor_mm_b1(lower_mask, upper_mask, vl);\n\n        if (vfirst_m_b1(letter_mask, vl) != -1) {\n            found_letter = 1;\n            break;\n        }\n        i += vl;\n    }\n\n    if (found_letter) {\n        for (size_t i = 0; i < n; ) {\n            vl = vsetvl_e8m8(n - i);\n            vuint8m8_t v = vle8_v_u8m8(src + i, vl);\n            vbool1_t lower_mask1 = vmsgeu_vx_u8m8_b1(v, 'a', vl);\n            vbool1_t lower_mask2 = vmsleu_vx_u8m8_b1(v, 'z', vl);\n            vbool1_t lower_mask = vand_mm_b1(lower_mask1, lower_mask2, vl);\n            vbool1_t upper_mask1 = vmsgeu_vx_u8m8_b1(v, 'A', vl);\n            vbool1_t upper_mask2 = vmsleu_vx_u8m8_b1(v, 'Z', vl);\n            vbool1_t upper_mask = vand_mm_b1(upper_mask1, upper_mask2, vl);\n            vbool1_t letter_mask = vor_mm_b1(lower_mask, upper_mask, vl);\n            vuint8m8_t flipped = vxor_vx_u8m8_m(letter_mask, v, v, 0x20, vl);\n            vse8_v_u8m8(dst + i, flipped, vl);\n            i += vl;\n        }\n    } else {\n        for (size_t i = 0; i < n; ) {\n            vl = vsetvl_e8m8(n - i);\n            size_t j = n - i - vl;\n            vuint8m8_t chunk = vle8_v_u8m8(src + j, vl);\n            vuint8m8_t idx = vid_v_u8m8(vl);\n            vuint8m8_t rev_idx = vrsub_vx_u8m8(idx, vl - 1, vl);\n            vuint8m8_t rev_chunk = vrgather_vv_u8m8(chunk, rev_idx, vl);\n            vse8_v_u8m8(dst + i, rev_chunk, vl);\n            i += vl;\n        }\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    size_t n = s.size();\n    if (n == 0) {\n        return std::string();\n    }\n    std::string result(n, '\\0');\n    const char *src = s.data();\n    char *dst = result.data();\n    bool has_letter = false;\n    size_t vl;\n\n    // First pass: check for any letter\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e8m8(n - i);\n        vuint8m8_t v_data = vle8_v_u8m8((const uint8_t*)(src + i), vl);\n        vuint8m8_t v_sub_upper = vsub_vx_u8m8(v_data, 'A', vl);\n        vbool1_t mask_upper = vmsleu_vx_u8m8(v_sub_upper, 'Z' - 'A', vl);\n        vuint8m8_t v_sub_lower = vsub_vx_u8m8(v_data, 'a', vl);\n        vbool1_t mask_lower = vmsleu_vx_u8m8(v_sub_lower, 'z' - 'a', vl);\n        vbool1_t mask_letter = vmor_mm(mask_upper, mask_lower, vl);\n        if (vfirst_m_b1(mask_letter, vl) >= 0) {\n            has_letter = true;\n            break;\n        }\n        i += vl;\n    }\n\n    if (has_letter) {\n        // Flip case for letters\n        for (size_t i = 0; i < n; ) {\n            vl = vsetvl_e8m8(n - i);\n            vuint8m8_t v_data = vle8_v_u8m8((const uint8_t*)(src + i), vl);\n            vuint8m8_t v_sub_upper = vsub_vx_u8m8(v_data, 'A', vl);\n            vbool1_t mask_upper = vmsleu_vx_u8m8(v_sub_upper, 'Z' - 'A', vl);\n            vuint8m8_t v_sub_lower = vsub_vx_u8m8(v_data, 'a', vl);\n            vbool1_t mask_lower = vmsleu_vx_u8m8(v_sub_lower, 'z' - 'a', vl);\n            vbool1_t mask_letter = vmor_mm(mask_upper, mask_lower, vl);\n            vuint8m8_t v_flip = vxor_vx_u8m8(v_data, 32, vl);\n            vuint8m8_t v_result = vmerge_vvm_u8m8(mask_letter, v_flip, v_data, vl);\n            vse8_v_u8m8((uint8_t*)(dst + i), v_result, vl);\n            i += vl;\n        }\n    } else {\n        // Reverse the entire string\n        for (size_t i = 0; i < n; ) {\n            vl = vsetvl_e8m8(n - i);\n            vuint8m8_t v = vle8_v_u8m8((const uint8_t*)(src + n - i - vl), vl);\n            vint8m8_t vid = vid_v_i8m8(vl);\n            vuint8m8_t vid_u = (vuint8m8_t)vid;\n            vuint8m8_t vid_rev = vrsub_vx_u8m8(vid_u, vl - 1, vl);\n            vuint8m8_t v_rev = vrgather_vv_u8m8(v, vid_rev, vl);\n            vse8_v_u8m8((uint8_t*)(dst + i), v_rev, vl);\n            i += vl;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string solve_simd(const std::string & s) {\n    size_t n = s.size();\n    std::string result(n, '\\0');\n    const char *src = s.data();\n    char *dest = &result[0];\n\n    if (n == 0) {\n        return result;\n    }\n\n    bool found_letter = false;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e8m8(n - i);\n        vuint8m8_t chunk = __riscv_vle8_v_u8m8((uint8_t*)(src + i), vl);\n        vbool1_t is_lower = __riscv_vmsgeu_vx_u8m8_b1(chunk, 'a', vl) && __riscv_vmsleu_vx_u8m8_b1(chunk, 'z', vl);\n        vbool1_t is_upper = __riscv_vmsgeu_vx_u8m8_b1(chunk, 'A', vl) && __riscv_vmsleu_vx_u8m8_b1(chunk, 'Z', vl);\n        vbool1_t is_letter = __riscv_vmor_mm_b1(is_lower, is_upper, vl);\n        if (__riscv_vcpop_m_b1(is_letter, vl)) {\n            found_letter = true;\n            break;\n        }\n        i += vl;\n    }\n\n    if (found_letter) {\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e8m8(n - i);\n            vuint8m8_t chunk = __riscv_vle8_v_u8m8((uint8_t*)(src + i), vl);\n            vbool1_t is_lower = __riscv_vmsgeu_vx_u8m8_b1(chunk, 'a', vl) && __riscv_vmsleu_vx_u8m8_b1(chunk, 'z', vl);\n            vbool1_t is_upper = __riscv_vmsgeu_vx_u8m8_b1(chunk, 'A', vl) && __riscv_vmsleu_vx_u8m8_b1(chunk, 'Z', vl);\n            vbool1_t is_letter = __riscv_vmor_mm_b1(is_lower, is_upper, vl);\n            vuint8m8_t flipped = __riscv_vxor_vx_u8m8_m(is_letter, chunk, chunk, 0x20, vl);\n            __riscv_vse8_v_u8m8((uint8_t*)(dest + i), flipped, vl);\n            i += vl;\n        }\n    } else {\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e8m8(n - i);\n            ptrdiff_t stride = -1;\n            vuint8m8_t data = __riscv_vlse8_v_u8m8((uint8_t*)(src + n - i - 1), stride, vl);\n            __riscv_vse8_v_u8m8((uint8_t*)(dest + i), data, vl);\n            i += vl;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nstd::vector<int> sort_third_simd(std::vector<int> l){\n    std::vector<int> res = l;\n    size_t n = res.size();\n    size_t n3 = (n + 2) / 3;\n    \n    if (n3 == 0) {\n        return res;\n    }\n    \n    std::vector<int> temp(n3);\n    \n    size_t vl;\n    for (size_t i = 0; i < n3; ) {\n        vl = vsetvl_e32m1(n3 - i);\n        vint32m1_t data = vlse32_v_i32m1(&res[3*i], 3 * sizeof(int), vl);\n        vse32_v_i32m1(&temp[i], data, vl);\n        i += vl;\n    }\n    \n    for (size_t i = 0; i < n3 - 1; i++) {\n        size_t min_index = i;\n        for (size_t j = i + 1; j < n3; j++) {\n            if (temp[j] < temp[min_index]) {\n                min_index = j;\n            }\n        }\n        if (min_index != i) {\n            int t = temp[i];\n            temp[i] = temp[min_index];\n            temp[min_index] = t;\n        }\n    }\n    \n    for (size_t i = 0; i < n3; ) {\n        vl = vsetvl_e32m1(n3 - i);\n        vint32m1_t data = vle32_v_i32m1(&temp[i], vl);\n        vsse32_v_i32m1(&res[3*i], 3 * sizeof(int), data, vl);\n        i += vl;\n    }\n    \n    return res;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n == 0) return l;\n    size_t m = (n + 2) / 3;\n    std::vector<int> temp(m);\n    size_t vl;\n    int *l_data = l.data();\n    int *temp_data = temp.data();\n    \n    for (size_t avl = m; avl > 0; ) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vlse32_v_i32m1(l_data, 3 * sizeof(int), vl);\n        __riscv_vse32_v_i32m1(temp_data, vec, vl);\n        l_data += 3 * vl;\n        temp_data += vl;\n        avl -= vl;\n    }\n\n    for (size_t i = 1; i < m; i++) {\n        int key = temp[i];\n        size_t j = i;\n        while (j > 0 && temp[j-1] > key) {\n            temp[j] = temp[j-1];\n            j--;\n        }\n        temp[j] = key;\n    }\n\n    temp_data = temp.data();\n    l_data = l.data();\n    for (size_t avl = m; avl > 0; ) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(temp_data, vl);\n        __riscv_vsse32_v_i32m1(l_data, 3 * sizeof(int), vec, vl);\n        l_data += 3 * vl;\n        temp_data += vl;\n        avl -= vl;\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```cpp\n#include <algorithm>\n#include <vector>\n#include <riscv_vector.h>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    int n = l.size();\n    std::vector<int> l_prime(n);\n    if (n == 0) return l_prime;\n    int *src = l.data();\n    int *dst = l_prime.data();\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(src, vl);\n        __riscv_vse32_v_i32m1(dst, vec, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n    int m = (n + 2) / 3;\n    if (m == 0) return l_prime;\n    std::vector<int> temp(m);\n    src = l.data();\n    int *temp_data = temp.data();\n    avl = m;\n    size_t stride = 3 * sizeof(int);\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vlse32_v_i32m1(src, stride, vl);\n        __riscv_vse32_v_i32m1(temp_data, vec, vl);\n        src += 3 * vl;\n        temp_data += vl;\n        avl -= vl;\n    }\n    std::sort(temp.begin(), temp.end());\n    dst = l_prime.data();\n    temp_data = temp.data();\n    avl = m;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(temp_data, vl);\n        __riscv_vsse32_v_i32m1(dst, stride, vec, vl);\n        dst += 3 * vl;\n        temp_data += vl;\n        avl -= vl;\n    }\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    std::vector<int> result = l;\n    size_t n = l.size();\n    if (n == 0) \n        return result;\n    \n    size_t n_tri = (n + 2) / 3;\n    std::vector<int> to_sort(n_tri);\n\n    int *src = l.data();\n    int *tmp_ptr = to_sort.data();\n    size_t avl = n_tri;\n    size_t vl;\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vlse32_v_i32m1(src, 12, vl);\n        __riscv_vse32_v_i32m1(tmp_ptr, vec, vl);\n        src += 3 * vl;\n        tmp_ptr += vl;\n        avl -= vl;\n    }\n\n    std::sort(to_sort.begin(), to_sort.end());\n\n    int *dst = result.data();\n    tmp_ptr = to_sort.data();\n    avl = n_tri;\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(tmp_ptr, vl);\n        __riscv_vsse32_v_i32m1(dst, 12, vec, vl);\n        dst += 3 * vl;\n        tmp_ptr += vl;\n        avl -= vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <algorithm>\n#include <vector>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n == 0) \n        return l;\n    \n    size_t m = (n + 2) / 3;\n    int *extracted_arr = new int[m];\n    \n    for (size_t base_index = 0; base_index < m; ) {\n        size_t vl = __riscv_vsetvl_e32m1(m - base_index);\n        vuint32m1_t vid_seg = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t local_offsets = __riscv_vmul_vx_u32m1(vid_seg, 3, vl);\n        vuint32m1_t global_indices = __riscv_vadd_vx_u32m1(local_offsets, 3 * base_index, vl);\n        vint32m1_t extracted_seg = __riscv_vluxei32_v_i32m1(l.data(), global_indices, vl);\n        __riscv_vse32_v_i32m1(extracted_arr + base_index, extracted_seg, vl);\n        base_index += vl;\n    }\n    \n    std::sort(extracted_arr, extracted_arr + m);\n    \n    for (size_t base_index = 0; base_index < m; ) {\n        size_t vl = __riscv_vsetvl_e32m1(m - base_index);\n        vuint32m1_t vid_seg = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t local_offsets = __riscv_vmul_vx_u32m1(vid_seg, 3, vl);\n        vuint32m1_t global_indices = __riscv_vadd_vx_u32m1(local_offsets, 3 * base_index, vl);\n        vint32m1_t sorted_seg = __riscv_vle32_v_i32m1(extracted_arr + base_index, vl);\n        __riscv_vsoxei32_v_i32m1(l.data(), global_indices, sorted_seg, vl);\n        base_index += vl;\n    }\n    \n    delete[] extracted_arr;\n    return l;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```cpp\n#include <limits>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t n = l.size();\n    float *ptr = l.data();\n    vfloat32m1_t v_max = __riscv_vfmv_s_f_f32m1(vfloat32m1_t(), -std::numeric_limits<float>::infinity(), 1);\n    size_t avl = n;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t v_seg = __riscv_vle32_v_f32m1(ptr, vl);\n        v_max = __riscv_vfredmax_vs_f32m1_f32m1(v_seg, v_max, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return __riscv_vfmv_f_s_f32m1_f32(v_max);\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nfloat max_element_simd(std::vector<float> l) {\n    if (l.empty()) {\n        return 0.0f;\n    }\n    size_t n = l.size();\n    const float *ptr = l.data();\n    float current_max = l[0];\n    size_t vl;\n    vfloat32m1_t vec, vred;\n\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e32m1(avl);\n        vec = vle32_v_f32m1(ptr, vl);\n        vred = vfmv_s_f_f32m1(vundefined_f32m1(), ptr[0]);\n        vred = vfredmax_vs_f32m1_f32m1(vec, vred, vl);\n        float segment_max = vfmv_f_s_f32m1_f32(vred);\n        if (segment_max > current_max) {\n            current_max = segment_max;\n        }\n        ptr += vl;\n        avl -= vl;\n    }\n    return current_max;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nfloat max_element_simd(std::vector<float> l) {\n    float max_val = l[0];\n    const size_t n = l.size();\n    if (n == 1) {\n        return max_val;\n    }\n    \n    size_t avl = n - 1;\n    float *ptr = l.data() + 1;\n    vfloat32m1_t v_acc;\n    v_acc = vfmv_s_f_f32m1(v_acc, max_val);\n    size_t vl;\n    \n    for (size_t avl_remaining = avl; avl_remaining > 0; ) {\n        vl = vsetvl_e32m1(avl_remaining);\n        vfloat32m1_t v_in = vle32_v_f32m1(ptr, vl);\n        v_acc = vfredmax_vs_f32m1(v_in, v_acc, vl);\n        ptr += vl;\n        avl_remaining -= vl;\n    }\n    \n    max_val = vfmv_f_s_f32m1_f32(v_acc);\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cmath>\n\nfloat max_element_simd(std::vector<float> l) {\n    const float* data = l.data();\n    size_t n = l.size();\n    size_t vl_red = __riscv_vsetvl_e32m1(1);\n    vfloat32m1_t v_red = __riscv_vfmv_v_f_f32m1(-INFINITY, vl_red);\n\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vfloat32m1_t vec = __riscv_vle32_v_f32m1(data + i, vl);\n        v_red = __riscv_vfredmax_vs_f32m1_f32m1(vec, v_red, vl);\n        i += vl;\n    }\n    float result = __riscv_vfmv_f_s_f32m1_f32(v_red);\n    return result;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nfloat max_element_simd(std::vector<float> l) {\n    float max = l[0];\n    size_t n = l.size();\n    const float *ptr = l.data();\n    size_t avl = n;\n    vfloat32m1_t v_initial;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t vec = vle32_v_f32m1(ptr, vl);\n        v_initial = vfmv_s_f_f32m1(v_initial, max, 0);\n        v_initial = vfredmax_vs_f32m1_f32m1(v_initial, vec, v_initial, vl);\n        max = vfmv_f_s_f32m1(v_initial);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return max;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    if (n <= 0) return 0;\n    int total_count = 0;\n\n    // Count multiples of 11\n    for (int base = 0; base < n; ) {\n        int multiples_in_segment = (n - base + 10) / 11;\n        if (multiples_in_segment <= 0) break;\n        size_t vl = vsetvl_e32m1(multiples_in_segment);\n        vint32m1_t v_index = vid_v_i32m1(vl);\n        vint32m1_t v_num = vmul_vx_i32m1(v_index, 11, vl);\n        v_num = vadd_vx_i32m1(v_num, base, vl);\n        int buffer[vl];\n        vse32_v_i32m1(buffer, v_num, vl);\n        for (int j = 0; j < vl; j++) {\n            int num = buffer[j];\n            if (num >= n) break;\n            int t = num;\n            int count7 = 0;\n            do {\n                if (t % 10 == 7) count7++;\n                t /= 10;\n            } while (t);\n            total_count += count7;\n        }\n        base += vl * 11;\n    }\n\n    // Count multiples of 13\n    for (int base = 0; base < n; ) {\n        int multiples_in_segment = (n - base + 12) / 13;\n        if (multiples_in_segment <= 0) break;\n        size_t vl = vsetvl_e32m1(multiples_in_segment);\n        vint32m1_t v_index = vid_v_i32m1(vl);\n        vint32m1_t v_num = vmul_vx_i32m1(v_index, 13, vl);\n        v_num = vadd_vx_i32m1(v_num, base, vl);\n        int buffer[vl];\n        vse32_v_i32m1(buffer, v_num, vl);\n        for (int j = 0; j < vl; j++) {\n            int num = buffer[j];\n            if (num >= n) break;\n            int t = num;\n            int count7 = 0;\n            do {\n                if (t % 10 == 7) count7++;\n                t /= 10;\n            } while (t);\n            total_count += count7;\n        }\n        base += vl * 13;\n    }\n\n    // Subtract duplicates (multiples of 143)\n    for (int base = 0; base < n; ) {\n        int multiples_in_segment = (n - base + 142) / 143;\n        if (multiples_in_segment <= 0) break;\n        size_t vl = vsetvl_e32m1(multiples_in_segment);\n        vint32m1_t v_index = vid_v_i32m1(vl);\n        vint32m1_t v_num = vmul_vx_i32m1(v_index, 143, vl);\n        v_num = vadd_vx_i32m1(v_num, base, vl);\n        int buffer[vl];\n        vse32_v_i32m1(buffer, v_num, vl);\n        for (int j = 0; j < vl; j++) {\n            int num = buffer[j];\n            if (num >= n) break;\n            int t = num;\n            int count7 = 0;\n            do {\n                if (t % 10 == 7) count7++;\n                t /= 10;\n            } while (t);\n            total_count -= count7;\n        }\n        base += vl * 143;\n    }\n\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    if (n <= 0) return 0;\n    int total_count = 0;\n    size_t vl;\n    for (int start = 0; start < n; start += vl) {\n        vl = __riscv_vsetvl_e32m1(n - start);\n        vint32m1_t v_idx = __riscv_vid_v_i32m1(vl);\n        vint32m1_t v_nums = __riscv_vadd_vx_i32m1(v_idx, start, vl);\n\n        vint32m1_t v_rem11 = __riscv_vrem_vx_i32m1(v_nums, 11, vl);\n        vint32m1_t v_rem13 = __riscv_vrem_vx_i32m1(v_nums, 13, vl);\n        vbool32_t mask11 = __riscv_vmseq_vx_i32m1_b32(v_rem11, 0, vl);\n        vbool32_t mask13 = __riscv_vmseq_vx_i32m1_b32(v_rem13, 0, vl);\n        vbool32_t mask = __riscv_vmor_mm_b32(mask11, mask13, vl);\n\n        int num_active = __riscv_vcpop_m_b32(mask, vl);\n        if (num_active == 0) continue;\n\n        vint32m1_t v_compressed = __riscv_vcompress_v_i32m1(\n            __riscv_vundefined_i32m1(), v_nums, mask, vl);\n        size_t vl2 = __riscv_vsetvl_e32m1(num_active);\n        vint32m1_t v_current = v_compressed;\n        int local_count = 0;\n\n        for (int d = 0; d < 10; d++) {\n            vint32m1_t v_digit = __riscv_vrem_vx_i32m1(v_current, 10, vl2);\n            vbool32_t is_seven = __riscv_vmseq_vx_i32m1_b32(v_digit, 7, vl2);\n            local_count += __riscv_vcpop_m_b32(is_seven, vl2);\n            v_current = __riscv_vdiv_vx_i32m1(v_current, 10, vl2);\n        }\n        total_count += local_count;\n    }\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    if (n <= 0) return 0;\n    unsigned total = 0;\n    int steps[3] = {11, 13, 143};\n    int signs[3] = {1, 1, -1};\n    unsigned un = (unsigned)n;\n\n    for (int idx = 0; idx < 3; idx++) {\n        int step = steps[idx];\n        int sign = signs[idx];\n        unsigned count = 0;\n        if (step == 0) continue;\n        size_t kmax = (un - 1) / step + 1;\n        size_t k = 0;\n\n        while (k < kmax) {\n            size_t vl = __riscv_vsetvl_e32m1(kmax - k);\n            vuint32m1_t v_k = __riscv_vid_v_u32m1(vl);\n            v_k = __riscv_vadd_vx_u32m1(v_k, k, vl);\n            vuint32m1_t v_nums = __riscv_vmul_vx_u32m1(v_k, step, vl);\n            vbool32_t mask = __riscv_vmsltu_vx_u32m1_b32(v_nums, un, vl);\n            vuint32m1_t v_count_per_num = __riscv_vmv_v_x_u32m1(0, vl);\n            vuint32m1_t v_current = v_nums;\n\n            for (int d = 0; d < 10; d++) {\n                vuint32m1_t v_hi = __riscv_vmulhu_vx_u32m1(v_current, 0xCCCCCCCD, vl);\n                vuint32m1_t v_quot = __riscv_vsrl_vx_u32m1(v_hi, 3, vl);\n                vuint32m1_t v_rem = __riscv_vsub_vv_u32m1(v_current, __riscv_vmul_vx_u32m1(v_quot, 10, vl), vl);\n                vbool32_t v_eq7 = __riscv_vmseq_vx_u32m1_b32(v_rem, 7, vl);\n                vuint32m1_t v_inc = __riscv_vand_vx_u32m1(__riscv_vmv_v_x_u32m1(1, vl), v_eq7, vl);\n                v_count_per_num = __riscv_vadd_vv_u32m1(v_count_per_num, v_inc, vl);\n                v_current = v_quot;\n            }\n\n            v_count_per_num = __riscv_vmerge_vxm_u32m1(__riscv_vmv_v_x_u32m1(0, vl), v_count_per_num, mask, vl);\n            unsigned segment_sum = __riscv_vredsum_vs_u32m1_u32m1(v_count_per_num, __riscv_vmv_v_x_u32m1(0, vl), vl);\n            count += segment_sum;\n            k += vl;\n        }\n\n        total += sign * count;\n    }\n\n    return total;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n\nint fizz_buzz_simd(int n) {\n    if (n <= 0) return 0;\n    uint32_t bases[10] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};\n    uint32_t total_count = 0;\n    for (uint32_t i = 0; i < (uint32_t)n; ) {\n        size_t vl = __riscv_vsetvl_e32m1((uint32_t)n - i);\n        vuint32m1_t v_i = __riscv_vid_v_u32m1(vl);\n        v_i = __riscv_vadd_vx_u32m1(v_i, i, vl);\n        i += vl;\n        vuint32m1_t v_rem11 = __riscv_vremu_vx_u32m1(v_i, 11, vl);\n        vuint32m1_t v_rem13 = __riscv_vremu_vx_u32m1(v_i, 13, vl);\n        vbool32_t mask11 = __riscv_vmseq_vx_u32m1_b32(v_rem11, 0, vl);\n        vbool32_t mask13 = __riscv_vmseq_vx_u32m1_b32(v_rem13, 0, vl);\n        vbool32_t mask_active = __riscv_vmor_mm_b32(mask11, mask13, vl);\n        size_t vl2 = __riscv_vcpop_m_b32(mask_active, vl);\n        if (vl2 == 0) continue;\n        vuint32m1_t v_active = __riscv_vundefined_u32m1();\n        v_active = __riscv_vcompress_vm_u32m1(mask_active, v_i, v_active, vl);\n        for (int pos = 0; pos < 10; pos++) {\n            uint32_t base = bases[pos];\n            vuint32m1_t v_quot = __riscv_vdivu_vx_u32m1(v_active, base, vl2);\n            vuint32m1_t v_digit = __riscv_vremu_vx_u32m1(v_quot, 10, vl2);\n            vbool32_t mask_digit7 = __riscv_vmseq_vx_u32m1_b32(v_digit, 7, vl2);\n            total_count += __riscv_vcpop_m_b32(mask_digit7, vl2);\n        }\n    }\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    if (n <= 0) {\n        return 0;\n    }\n\n    unsigned int total_count = 0;\n    unsigned int current;\n    size_t vl, new_vl;\n    unsigned int max_digits = 10;\n    vuint32m1_t v_red_zero = __riscv_vmv_v_x_u32m1(0, 1);\n\n    // First loop: multiples of 11 not divisible by 13\n    current = 0;\n    while (current < (unsigned int)n) {\n        if (n - current - 1 < 0) break;\n        vl = (n - current - 1) / 11 + 1;\n        new_vl = __riscv_vsetvl_e32m1(vl);\n        vuint32m1_t v_idx = __riscv_vadd_vx_u32m1(\n            __riscv_vmul_vx_u32m1(__riscv_vid_v_u32m1(new_vl), 11, new_vl),\n            current, new_vl);\n        vuint32m1_t v_rem13 = __riscv_vremu_vx_u32m1(v_idx, 13, new_vl);\n        vbool32_t v_mask = __riscv_vmsne_vx_u32m1_b32(v_rem13, 0, new_vl);\n        vuint32m1_t v_count = __riscv_vmv_v_x_u32m1(0, new_vl);\n        unsigned int divisor = 1;\n\n        for (int d = 0; d < max_digits; d++) {\n            if (divisor > (unsigned int)n) break;\n            vuint32m1_t v_temp = __riscv_vdivu_vx_u32m1(v_idx, divisor, new_vl);\n            vuint32m1_t v_digit = __riscv_vremu_vx_u32m1(v_temp, 10, new_vl);\n            vbool32_t v_eq7 = __riscv_vmseq_vx_u32m1_b32(v_digit, 7, new_vl);\n            vbool32_t v_active = __riscv_vmand_mm_b32(v_mask, v_eq7, new_vl);\n            v_count = __riscv_vadd_vx_u32m1_m(v_active, v_count, v_count, 1, new_vl);\n            divisor *= 10;\n        }\n\n        vuint32m1_t v_red = __riscv_vmv_v_x_u32m1(0, 1);\n        v_red = __riscv_vredsum_vs_u32m1_u32m1(v_count, v_red, new_vl);\n        total_count += __riscv_vmv_x_s_u32m1_u32(v_red);\n        current += 11 * new_vl;\n    }\n\n    // Second loop: multiples of 13 not divisible by 11\n    current = 0;\n    while (current < (unsigned int)n) {\n        if (n - current - 1 < 0) break;\n        vl = (n - current - 1) / 13 + 1;\n        new_vl = __riscv_vsetvl_e32m1(vl);\n        vuint32m1_t v_idx = __riscv_vadd_vx_u32m1(\n            __riscv_vmul_vx_u32m1(__riscv_vid_v_u32m1(new_vl), 13, new_vl),\n            current, new_vl);\n        vuint32m1_t v_rem11 = __riscv_vremu_vx_u32m1(v_idx, 11, new_vl);\n        vbool32_t v_mask = __riscv_vmsne_vx_u32m1_b32(v_rem11, 0, new_vl);\n        vuint32m1_t v_count = __riscv_vmv_v_x_u32m1(0, new_vl);\n        unsigned int divisor = 1;\n\n        for (int d = 0; d < max_digits; d++) {\n            if (divisor > (unsigned int)n) break;\n            vuint32m1_t v_temp = __riscv_vdivu_vx_u32m1(v_idx, divisor, new_vl);\n            vuint32m1_t v_digit = __riscv_vremu_vx_u32m1(v_temp, 10, new_vl);\n            vbool32_t v_eq7 = __riscv_vmseq_vx_u32m1_b32(v_digit, 7, new_vl);\n            vbool32_t v_active = __riscv_vmand_mm_b32(v_mask, v_eq7, new_vl);\n            v_count = __riscv_vadd_vx_u32m1_m(v_active, v_count, v_count, 1, new_vl);\n            divisor *= 10;\n        }\n\n        vuint32m1_t v_red = __riscv_vmv_v_x_u32m1(0, 1);\n        v_red = __riscv_vredsum_vs_u32m1_u32m1(v_count, v_red, new_vl);\n        total_count += __riscv_vmv_x_s_u32m1_u32(v_red);\n        current += 13 * new_vl;\n    }\n\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```c\n#include <algorithm>\n#include <vector>\n#include <riscv_vector.h>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return l;\n    }\n    size_t n_even = (n + 1) / 2;\n    size_t n_odd = n / 2;\n    std::vector<float> even_elements(n_even);\n    std::vector<float> odd_elements(n_odd);\n    std::vector<float> result(n, 0.0f);\n\n    float *src_even = l.data();\n    float *dst_even = even_elements.data();\n    size_t avl = n_even;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vlse32_v_f32m1(src_even, 2 * sizeof(float), vl);\n        __riscv_vse32_v_f32m1(dst_even, vec, vl);\n        src_even += 2 * vl;\n        dst_even += vl;\n        avl -= vl;\n    }\n\n    float *src_odd = l.data() + 1;\n    float *dst_odd = odd_elements.data();\n    avl = n_odd;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vlse32_v_f32m1(src_odd, 2 * sizeof(float), vl);\n        __riscv_vse32_v_f32m1(dst_odd, vec, vl);\n        src_odd += 2 * vl;\n        dst_odd += vl;\n        avl -= vl;\n    }\n\n    std::sort(even_elements.begin(), even_elements.end());\n\n    float *res_ptr_even = result.data();\n    float *sorted_ptr = even_elements.data();\n    avl = n_even;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vle32_v_f32m1(sorted_ptr, vl);\n        __riscv_vsse32_v_f32m1(res_ptr_even, 2 * sizeof(float), vec, vl);\n        sorted_ptr += vl;\n        res_ptr_even += 2 * vl;\n        avl -= vl;\n    }\n\n    float *res_ptr_odd = result.data() + 1;\n    float *odd_ptr = odd_elements.data();\n    avl = n_odd;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vle32_v_f32m1(odd_ptr, vl);\n        __riscv_vsse32_v_f32m1(res_ptr_odd, 2 * sizeof(float), vec, vl);\n        odd_ptr += vl;\n        res_ptr_odd += 2 * vl;\n        avl -= vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    if (l.empty()) {\n        return l;\n    }\n    \n    size_t n = l.size();\n    size_t even_len = (n + 1) / 2;\n    std::vector<float> result = l;\n    std::vector<float> even_vec(even_len);\n    \n    const float* src = l.data();\n    float* even_data = even_vec.data();\n    size_t avl = even_len;\n    ptrdiff_t stride = 2 * sizeof(float);\n    \n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vlse32_v_f32m1(src, stride, vl);\n        __riscv_vse32_v_f32m1(even_data, vec, vl);\n        src += 2 * vl;\n        even_data += vl;\n        avl -= vl;\n    }\n    \n    for (size_t i = 0; i < even_len; i++) {\n        for (size_t j = 0; j < even_len - i - 1; j++) {\n            if (even_vec[j] > even_vec[j + 1]) {\n                float temp = even_vec[j];\n                even_vec[j] = even_vec[j + 1];\n                even_vec[j + 1] = temp;\n            }\n        }\n    }\n    \n    float* dst = result.data();\n    even_data = even_vec.data();\n    avl = even_len;\n    \n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vle32_v_f32m1(even_data, vl);\n        __riscv_vsse32_v_f32m1(dst, stride, vec, vl);\n        dst += 2 * vl;\n        even_data += vl;\n        avl -= vl;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <algorithm>\n#include <vector>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return l;\n    }\n    size_t avl_even = (n + 1) / 2;\n    size_t avl_odd = n / 2;\n\n    std::vector<float> even_arr(avl_even);\n    std::vector<float> odd_arr(avl_odd);\n    std::vector<float> res(n);\n\n    if (avl_even > 0) {\n        size_t remaining = avl_even;\n        const float* src = l.data();\n        float* dst = even_arr.data();\n        while (remaining > 0) {\n            size_t vl = vsetvl_e32m1(remaining);\n            vfloat32m1_t vec = vlse32_v_f32m1(src, 2 * sizeof(float), vl);\n            vse32_v_f32m1(dst, vec, vl);\n            src += 2 * vl;\n            dst += vl;\n            remaining -= vl;\n        }\n    }\n\n    if (avl_odd > 0) {\n        size_t remaining = avl_odd;\n        const float* src = l.data() + 1;\n        float* dst = odd_arr.data();\n        while (remaining > 0) {\n            size_t vl = vsetvl_e32m1(remaining);\n            vfloat32m1_t vec = vlse32_v_f32m1(src, 2 * sizeof(float), vl);\n            vse32_v_f32m1(dst, vec, vl);\n            src += 2 * vl;\n            dst += vl;\n            remaining -= vl;\n        }\n    }\n\n    std::sort(even_arr.begin(), even_arr.end());\n\n    if (avl_even > 0) {\n        size_t remaining = avl_even;\n        const float* src = even_arr.data();\n        float* dst = res.data();\n        while (remaining > 0) {\n            size_t vl = vsetvl_e32m1(remaining);\n            vfloat32m1_t vec = vle32_v_f32m1(src, vl);\n            vsse32_v_f32m1(dst, 2 * sizeof(float), vec, vl);\n            src += vl;\n            dst += 2 * vl;\n            remaining -= vl;\n        }\n    }\n\n    if (avl_odd > 0) {\n        size_t remaining = avl_odd;\n        const float* src = odd_arr.data();\n        float* dst = res.data() + 1;\n        while (remaining > 0) {\n            size_t vl = vsetvl_e32m1(remaining);\n            vfloat32m1_t vec = vle32_v_f32m1(src, vl);\n            vsse32_v_f32m1(dst, 2 * sizeof(float), vec, vl);\n            src += vl;\n            dst += 2 * vl;\n            remaining -= vl;\n        }\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <algorithm>\n#include <vector>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return l;\n    }\n    size_t even_size = (n + 1) / 2;\n    size_t odd_size = n / 2;\n    std::vector<float> even_arr(even_size);\n    std::vector<float> odd_arr(odd_size);\n    std::vector<float> result(n);\n\n    float *data = l.data();\n    float *even_data = even_arr.data();\n    float *odd_data = odd_arr.data();\n    float *res_data = result.data();\n\n    size_t vl;\n\n    for (size_t i = 0; i < even_size; ) {\n        vl = vsetvl_e32m1(even_size - i);\n        vfloat32m1_t chunk = vlse32_v_f32m1(data + 2 * i, 8, vl);\n        vse32_v_f32m1(even_data + i, chunk, vl);\n        i += vl;\n    }\n\n    for (size_t i = 0; i < odd_size; ) {\n        vl = vsetvl_e32m1(odd_size - i);\n        vfloat32m1_t chunk = vlse32_v_f32m1(data + 1 + 2 * i, 8, vl);\n        vse32_v_f32m1(odd_data + i, chunk, vl);\n        i += vl;\n    }\n\n    std::sort(even_arr.begin(), even_arr.end());\n\n    for (size_t i = 0; i < even_size; ) {\n        vl = vsetvl_e32m1(even_size - i);\n        vfloat32m1_t chunk = vle32_v_f32m1(even_data + i, vl);\n        vsse32_v_f32m1(res_data + 2 * i, 8, chunk, vl);\n        i += vl;\n    }\n\n    for (size_t i = 0; i < odd_size; ) {\n        vl = vsetvl_e32m1(odd_size - i);\n        vfloat32m1_t chunk = vle32_v_f32m1(odd_data + i, vl);\n        vsse32_v_f32m1(res_data + 1 + 2 * i, 8, chunk, vl);\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <algorithm>\n#include <vector>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    if (n <= 1) {\n        return l;\n    }\n    size_t m = (n + 1) / 2;\n    std::vector<float> even(m);\n    float* l_data = l.data();\n    float* even_data = even.data();\n    ptrdiff_t bstride = 2 * sizeof(float);\n    \n    size_t avl = m;\n    const float* src = l_data;\n    float* dst = even_data;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vlse32_v_f32m1(src, bstride, vl);\n        __riscv_vse32_v_f32m1(dst, vec, vl);\n        src += vl * 2;\n        dst += vl;\n        avl -= vl;\n    }\n    \n    std::sort(even.begin(), even.end());\n    \n    avl = m;\n    src = even_data;\n    float* dest = l_data;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vfloat32m1_t vec = __riscv_vle32_v_f32m1(src, vl);\n        __riscv_vsse32_v_f32m1(dest, bstride, vec, vl);\n        dest += vl * 2;\n        src += vl;\n        avl -= vl;\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```cpp\n#include <algorithm>\n#include <vector>\n#include <riscv_vector.h>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) \n        return false;\n    \n    std::sort(l.begin(), l.end());\n    \n    for (int i = 0; i < n - 2; i++) {\n        if (i > 0 && l[i] == l[i-1]) \n            continue;\n            \n        int target = -l[i];\n        int base = i + 1;\n        int len = n - base;\n        \n        for (int j = 0; j < len; j++) {\n            int comp = target - l[base + j];\n            \n            if (base + j + 1 >= n) \n                break;\n                \n            if (comp < l[base + j + 1]) \n                break;\n                \n            if (comp > l[n-1])\n                continue;\n                \n            size_t search_len = len - j - 1;\n            if (search_len == 0)\n                break;\n                \n            size_t vl = __riscv_vsetvl_e32m1(search_len);\n            vint32m1_t vec = __riscv_vle32_v_i32m1(l.data() + base + j + 1, vl);\n            vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(vec, comp, vl);\n            if (__riscv_vfirst_m_b32(mask, vl) >= 0)\n                return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) \n        return false;\n    std::sort(l.begin(), l.end());\n    \n    for (int i = 0; i < n - 2; i++) {\n        int j = i + 1;\n        int k = n - 1;\n        while (j < k) {\n            size_t avl = k - j;\n            size_t vl = vsetvl_e32m1(avl);\n            if (vl == 0)\n                break;\n                \n            vint32m1_t v_j = vle32_v_i32m1(&l[j], vl);\n            vint32m1_t v_sum = vadd_vx_i32m1(v_j, l[i], vl);\n            v_sum = vadd_vx_i32m1(v_sum, l[k], vl);\n            \n            vbool32_t mask0 = vmseq_vx_i32m1_b32(v_sum, 0, vl);\n            if (vfirst_m_b32(mask0, vl) != -1) \n                return true;\n            \n            vbool32_t mask_positive = vmsgt_vx_i32m1_b32(v_sum, 0, vl);\n            int first_positive = vfirst_m_b32(mask_positive, vl);\n            \n            if (first_positive >= 0) {\n                j += first_positive;\n                k--;\n            } else {\n                j += vl;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) return false;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int target = - (l[i] + l[j]);\n            int k = j + 1;\n            while (k < n) {\n                size_t vl = vsetvl_e32m1(n - k);\n                vint32m1_t vec = vle32_v_i32m1(&l[k], vl);\n                vbool32_t mask = vmseq_vx_i32m1(vec, target, vl);\n                if (vfirst_m_b32(mask, vl) != -1) {\n                    return true;\n                }\n                k += vl;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```cpp\n#include <algorithm>\n#include <vector>\n#include <riscv_vector.h>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) \n        return false;\n    std::sort(l.begin(), l.end());\n\n    for (int i = 0; i < n; i++) {\n        if (i > 0 && l[i] == l[i-1]) \n            continue;\n\n        int target = -l[i];\n        int base_index = i+1;\n        int len = n - base_index;\n\n        for (int j = 0; j < len; j++) {\n            if (j > 0 && l[base_index+j] == l[base_index+j-1])\n                continue;\n\n            int value = target - l[base_index+j];\n            int seg_start = base_index + j + 1;\n            int seg_length = len - j - 1;\n            if (seg_length <= 0)\n                break;\n\n            int offset = 0;\n            while (offset < seg_length) {\n                size_t vl = __riscv_vsetvl_e32m1(seg_length - offset);\n                vint32m1_t vec_seg = __riscv_vle32_v_i32m1(&l[seg_start + offset], vl);\n                vint32m1_t vec_val = __riscv_vmv_v_x_i32m1(value, vl);\n                vbool32_t mask = __riscv_vmseq_vv_i32m1_b32(vec_seg, vec_val, vl);\n                int first = __riscv_vfirst_m_b32(mask, vl);\n                if (first >= 0) {\n                    return true;\n                }\n                offset += vl;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) {\n        return false;\n    }\n    for (size_t i = 0; i < n; i++) {\n        for (size_t j = i + 1; j < n; j++) {\n            int target = -(l[i] + l[j]);\n            size_t k = j + 1;\n            while (k < n) {\n                size_t vl = vsetvl_e32m1(n - k);\n                vint32m1_t v_data = vle32_v_i32m1(&l[k], vl);\n                vbool32_t mask = vmseq_vx_i32m1(v_data, target, vl);\n                if (vfirst_m_bool(mask, vl) >= 0) {\n                    return true;\n                }\n                k += vl;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n == 0) return l;\n    int *data = l.data();\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t vec = vle32_v_i32m1(data + i, vl);\n        vint32m1_t res = vadd_vi_i32m1(vec, 1, vl);\n        vse32_v_i32m1(data + i, res, vl);\n        i += vl;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n == 0) {\n        return l;\n    }\n    int *data = l.data();\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(data, vl);\n        vint32m1_t res = __riscv_vadd_vx_i32m1(vec, 1, vl);\n        __riscv_vse32_v_i32m1(data, res, vl);\n        data += vl;\n        avl -= vl;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    int *data = l.data();\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vle32_v_i32m1(data, vl);\n        vec = vadd_vx_i32m1(vec, 1, vl);\n        vse32_v_i32m1(data, vec, vl);\n        data += vl;\n        avl -= vl;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    std::vector<int> result(l.size());\n    size_t n = l.size();\n    int *src = l.data();\n    int *dst = result.data();\n    for (size_t vl; n > 0; n -= vl, src += vl, dst += vl) {\n        vl = __riscv_vsetvl_e32m8(n);\n        vint32m8_t v_src = __riscv_vle32_v_i32m8(src, vl);\n        vint32m8_t v_res = __riscv_vadd_vi_i32m8(v_src, 1, vl);\n        __riscv_vse32_v_i32m8(dst, v_res, vl);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    std::vector<int> output(l.size());\n    int *in_ptr = l.data();\n    int *out_ptr = output.data();\n    size_t n = l.size();\n\n    while (n > 0) {\n        size_t vl = vsetvl_e32m1(n);\n        vint32m1_t vec = vle32_v_i32m1(in_ptr, vl);\n        vec = vadd_vi_i32m1(vec, 1, vl);\n        vse32_v_i32m1(out_ptr, vec, vl);\n        in_ptr += vl;\n        out_ptr += vl;\n        n -= vl;\n    }\n\n    return output;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) {\n        return false;\n    }\n    int* data = l.data();\n    for (size_t i = 0; i < n; i++) {\n        int target = -data[i];\n        size_t j = 0;\n        while (j < i) {\n            size_t vl = __riscv_vsetvl_e32m1(i - j);\n            vint32m1_t vec = __riscv_vle32_v_i32m1(data + j, vl);\n            vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(vec, target, vl);\n            if (__riscv_vfirst_m_b32(mask, vl) >= 0) {\n                return true;\n            }\n            j += vl;\n        }\n        j = i + 1;\n        while (j < n) {\n            size_t vl = __riscv_vsetvl_e32m1(n - j);\n            vint32m1_t vec = __riscv_vle32_v_i32m1(data + j, vl);\n            vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(vec, target, vl);\n            if (__riscv_vfirst_m_b32(mask, vl) >= 0) {\n                return true;\n            }\n            j += vl;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) {\n        return false;\n    }\n\n    for (size_t i = 0; i < n; i++) {\n        int a = l[i];\n        size_t j = 0;\n        size_t vl;\n\n        while (j < n) {\n            vl = vsetvl_e32m8(n - j);\n            int *ptr = l.data() + j;\n            vint32m8_t vec = vle32_v_i32m8(ptr, vl);\n\n            vbool4_t mask_eq = vmseq_vx_i32m8(vec, -a, vl);\n\n            vbool4_t non_i_mask;\n            if (j <= i && i < j + vl) {\n                vuint32m8_t indices = vid_v_u32m8(vl);\n                vuint32m8_t offset_vec = vmv_v_x_u32m8(i - j, vl);\n                vbool4_t mask_i = vmseq_vv_u32m8(indices, offset_vec, vl);\n                non_i_mask = vmnot_m_b4(mask_i, vl);\n            } else {\n                non_i_mask = vmset_m_b4(vl);\n            }\n\n            vbool4_t mask = vmand_mm_b4(mask_eq, non_i_mask, vl);\n            if (vfirst_m_b4(mask, vl) != -1) {\n                return true;\n            }\n\n            j += vl;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) {\n        return false;\n    }\n    for (size_t i = 0; i < n; i++) {\n        int a = l[i];\n        int target = -a;\n        size_t vl;\n        for (size_t base = 0; base < n; base += vl) {\n            vl = vsetvl_e32m8(n - base);\n            vint32m8_t v_data = vle32_v_i32m8(&l[base], vl);\n            vuint32m8_t v_index = vid_v_u32m8(vl);\n            v_index = vadd_vx_u32m8(v_index, base, vl);\n            vbool32_t mask1 = vmseq_vx_i32m8(v_data, target, vl);\n            vbool32_t mask2 = vmsne_vx_u32m8(v_index, i, vl);\n            vbool32_t mask = vmand_mm(mask1, mask2, vl);\n            if (vfirst_m_b32(mask, vl) != -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n    \n    std::vector<int> neg(n);\n    for (size_t i = 0; i < n; i++) {\n        neg[i] = -l[i];\n    }\n    \n    for (size_t i = 0; i < n; i++) {\n        int target = neg[i];\n        size_t j = 0;\n        bool found_inner = false;\n        while (j < n) {\n            size_t vl = vsetvl_e32m1(n - j);\n            vint32m1_t chunk = vle32_v_i32m1(&l[j], vl);\n            vbool32_t value_mask = vmseq_vx_i32m1_b32(chunk, target, vl);\n            vbool32_t index_mask;\n            \n            if (j <= i && i < j + vl) {\n                vuint32m1_t indices = vid_v_u32m1(vl);\n                vbool32_t i_mask = vmseq_vx_u32m1_b32(indices, i - j, vl);\n                index_mask = vmnot_m_b32(i_mask);\n            } else {\n                index_mask = vmset_m_b32(vl);\n            }\n            \n            vbool32_t final_mask = vmand_mm_b32(value_mask, index_mask);\n            if (vfirst_m_b32(final_mask, vl) != -1) {\n                found_inner = true;\n                break;\n            }\n            j += vl;\n        }\n        if (found_inner) return true;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) {\n        return false;\n    }\n\n    for (size_t i = 0; i < n; i++) {\n        int target = -l[i];\n        size_t j = 0;\n        while (j < n) {\n            size_t vl = vsetvl_e32m1(n - j);\n            vint32m1_t vec_val = vle32_v_i32m1(&l[j], vl);\n            vuint32m1_t vec_idx = vid_v_u32m1(vl);\n            vec_idx = vadd_vx_u32m1(vec_idx, j, vl);\n\n            vbool32_t mask_val = vmseq_vx_i32m1_b32(vec_val, target, vl);\n            vbool32_t mask_idx = vmsne_vx_u32m1_b32(vec_idx, i, vl);\n            vbool32_t mask_final = vmand_mm_b32(mask_val, mask_idx, vl);\n\n            if (vcpop_m_b32(mask_final, vl) > 0) {\n                return true;\n            }\n\n            j += vl;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <cstdint>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (x == 0) {\n        return \"0\";\n    }\n    uint64_t ux = (x < 0) ? static_cast<uint64_t>(-x) : static_cast<uint64_t>(x);\n    int n = 0;\n    uint64_t temp = ux;\n    while (temp) {\n        n++;\n        temp /= base;\n    }\n    std::vector<uint64_t> powers(n);\n    powers[0] = 1;\n    for (int i = 1; i < n; i++) {\n        powers[i] = powers[i-1] * base;\n    }\n    size_t vl = vsetvl_e64m1(n);\n    vuint64m1_t v_pow = vle64_v_u64m1(powers.data(), vl);\n    vuint64m1_t v_x_bc = vmv_v_x_u64m1(ux, vl);\n    vuint64m1_t v_quot = vdivu_vv_u64m1(v_x_bc, v_pow, vl);\n    vuint64m1_t v_digits = vremu_vx_u64m1(v_quot, static_cast<uint64_t>(base), vl);\n    uint64_t digits_arr[64];\n    vse64_v_u64m1(digits_arr, v_digits, vl);\n    std::string res;\n    for (int i = n-1; i >= 0; i--) {\n        res += '0' + static_cast<char>(digits_arr[i]);\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cstdint>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (x == 0) {\n        return \"0\";\n    }\n\n    const int CHUNK_DIGITS = 8;\n    uint64_t chunk_base = 1;\n    for (int i = 0; i < CHUNK_DIGITS; i++) {\n        chunk_base *= base;\n    }\n\n    std::vector<uint32_t> chunks;\n    uint64_t temp = x;\n    while (temp >= chunk_base) {\n        uint32_t chunk = temp % chunk_base;\n        temp = temp / chunk_base;\n        chunks.push_back(chunk);\n    }\n    if (temp > 0) {\n        chunks.push_back(static_cast<uint32_t>(temp));\n    }\n\n    uint32_t powers_arr[CHUNK_DIGITS];\n    powers_arr[CHUNK_DIGITS - 1] = 1;\n    for (int i = CHUNK_DIGITS - 2; i >= 0; i--) {\n        powers_arr[i] = powers_arr[i + 1] * base;\n    }\n\n    size_t vl = CHUNK_DIGITS;\n    vuint32m1_t v_powers = vle32_v_u32m1(powers_arr, vl);\n\n    std::string res;\n    bool first_chunk = true;\n\n    for (int i = chunks.size() - 1; i >= 0; i--) {\n        uint32_t chunk = chunks[i];\n        vuint32m1_t v_chunk = vmv_v_x_u32m1(chunk, vl);\n        vuint32m1_t v_quot = vdivu_vv_u32m1(v_chunk, v_powers, vl);\n        vuint32m1_t v_digits = vremu_vx_u32m1(v_quot, static_cast<uint32_t>(base), vl);\n        vuint16m1_t v_digits16 = vncvt_x_x_w_u16m1(v_digits, vl);\n        vuint8m1_t v_digits8 = vncvt_x_x_w_u8m1(v_digits16, vl);\n        vuint8m1_t v_chars = vadd_vx_u8m1(v_digits8, '0', vl);\n\n        if (first_chunk) {\n            vbool8_t mask = vmsne_vx_u8m1_b8(v_digits8, 0, vl);\n            int first_non_zero = vfirst_m_b8(mask, vl);\n            if (first_non_zero < 0) {\n                res += '0';\n                first_chunk = false;\n            } else {\n                uint8_t buf[CHUNK_DIGITS];\n                vse8_v_u8m1(buf, v_chars, vl);\n                for (int j = first_non_zero; j < CHUNK_DIGITS; j++) {\n                    res += static_cast<char>(buf[j]);\n                }\n                first_chunk = false;\n            }\n        } else {\n            uint8_t buf[CHUNK_DIGITS];\n            vse8_v_u8m1(buf, v_chars, vl);\n            for (int j = 0; j < CHUNK_DIGITS; j++) {\n                res += static_cast<char>(buf[j]);\n            }\n        }\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (x == 0) {\n        return \"0\";\n    }\n\n    bool negative = false;\n    uint64_t num;\n    if (x < 0) {\n        negative = true;\n        num = -static_cast<uint64_t>(x);\n    } else {\n        num = static_cast<uint64_t>(x);\n    }\n\n    char digits_rev[64] = {0};\n    int i = 0;\n    while (num) {\n        uint64_t remainder = num % base;\n        digits_rev[i++] = '0' + static_cast<char>(remainder);\n        num /= base;\n    }\n\n    if (i == 0) {\n        return \"0\";\n    }\n\n    uint8_t indices[64];\n    for (int j = 0; j < i; j++) {\n        indices[j] = static_cast<uint8_t>(i - 1 - j);\n    }\n\n    size_t vl = static_cast<size_t>(i);\n    vuint8m1_t vec = __riscv_vle8_v_u8m1((uint8_t*)digits_rev, vl);\n    vuint8m1_t idx_vec = __riscv_vle8_v_u8m1(indices, vl);\n    vuint8m1_t reversed_vec = __riscv_vrgather_vv_u8m1(vec, idx_vec, vl);\n\n    char result[65];\n    __riscv_vse8_v_u8m1((uint8_t*)result, reversed_vec, vl);\n    result[i] = '\\0';\n\n    if (negative) {\n        return \"-\" + std::string(result, i);\n    } else {\n        return std::string(result, i);\n    }\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstdint>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (x == 0) {\n        return \"0\";\n    }\n    if (base < 2 || base > 9) {\n        return \"\";\n    }\n    if (x < 0) {\n        return \"\";\n    }\n\n    uint8_t digits[64];\n    int n = 0;\n    uint64_t temp = x;\n\n    while (temp) {\n        digits[n] = temp % base;\n        temp /= base;\n        n++;\n    }\n\n    size_t vl = vsetvl_e8m1(n);\n    vuint8m1_t v_rev = vlse8_v_u8m1(digits + n - 1, -1, vl);\n    vuint8m1_t v_char = vadd_vx_u8m1(v_rev, '0', vl);\n\n    char buf[65];\n    vse8_v_u8m1((uint8_t*)buf, v_char, vl);\n    buf[n] = '\\0';\n\n    return std::string(buf);\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstdint>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (x == 0) {\n        return \"0\";\n    }\n    \n    char reverse_digits[65];\n    int idx = 0;\n    \n    while (x > 0) {\n        int remainder = x % base;\n        x = x / base;\n        reverse_digits[idx++] = '0' + remainder;\n    }\n    \n    if (idx > 0) {\n        size_t vl = vsetvl_e8m1(idx);\n        vuint8m1_t v_digits = vle8_v_u8m1((const uint8_t*)reverse_digits, vl);\n        vuint8m1_t v_index = vid_v_u8m1(vl);\n        vuint8m1_t v_rev_index = vrsub_vx_u8m1(v_index, (uint8_t)(vl - 1), vl);\n        vuint8m1_t v_reversed_digits = vrgather_vv_u8m1(v_digits, v_rev_index, vl);\n        vse8_v_u8m1((uint8_t*)reverse_digits, v_reversed_digits, vl);\n    }\n    \n    return std::string(reverse_digits, idx);\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    size_t n = text.size();\n    if (n == 0) {\n        return true;\n    }\n    size_t left = 0;\n    size_t right = n - 1;\n\n    while (left < right) {\n        size_t remaining = right - left + 1;\n        size_t avl = remaining / 2;\n        size_t vl = vsetvl_e8m1(avl);\n\n        if (vl == 0) {\n            break;\n        }\n\n        vuint8m1_t v_left = vle8_v_u8m1((uint8_t*)(text.data() + left), vl);\n        vuint8m1_t v_right = vle8_v_u8m1((uint8_t*)(text.data() + right - vl + 1), vl);\n\n        vuint8m1_t v_index = vid_v_u8m1(vl);\n        vuint8m1_t v_rev_index = vrsub_vx_u8m1(v_index, vl - 1, vl);\n        vuint8m1_t v_right_rev = vrgather_vv_u8m1(v_right, v_rev_index, vl);\n\n        vbool8_t mask = vmseq_vv_u8m1_b8(v_left, v_right_rev, vl);\n        uint32_t pop = vcpop_m_b8(mask, vl);\n\n        if (pop != vl) {\n            return false;\n        }\n\n        left += vl;\n        right -= vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    size_t n = text.length();\n    if (n == 0) {\n        return true;\n    }\n\n    size_t left = 0;\n    size_t right = n - 1;\n\n    while (left < right) {\n        size_t n_pairs = (right - left + 1) / 2;\n        if (n_pairs == 0) {\n            break;\n        }\n\n        size_t vl = vsetvl_e8m1(n_pairs);\n\n        vint8m1_t left_vec = __riscv_vle8_v_i8m1((const int8_t*)(text.data() + left), vl);\n        vint8m1_t right_vec = __riscv_vle8_v_i8m1((const int8_t*)(text.data() + right - vl + 1), vl);\n\n        vuint8m1_t index = __riscv_vid_v_u8m1(vl);\n        vuint8m1_t rev_index = __riscv_vrsub_vx_u8m1(index, vl - 1, vl);\n        vint8m1_t rev_right_vec = __riscv_vrgather_vv_i8m1(right_vec, rev_index, vl);\n\n        vbool8_t cmp = __riscv_vmseq_vv_i8m1_b8(left_vec, rev_right_vec, vl);\n\n        int first_mismatch = __riscv_vfirst_m_b8(cmp, vl);\n        if (first_mismatch >= 0) {\n            return false;\n        }\n\n        left += vl;\n        right -= vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_palindrome_simd(std::string text) {\n    size_t n = text.size();\n    if (n == 0) {\n        return true;\n    }\n\n    const uint8_t *data = reinterpret_cast<const uint8_t*>(text.data());\n    size_t vl;\n    size_t i = 0;\n    while (i < n / 2) {\n        vl = __riscv_vsetvl_e8m1(n / 2 - i);\n        vuint8m1_t left = __riscv_vle8_v_u8m1(data + i, vl);\n        vuint8m1_t right = __riscv_vlse8_v_u8m1(data + n - 1 - i, -1, vl);\n        vbool8_t cmp = __riscv_vmseq_vv_u8m1_b8(left, right, vl);\n        size_t count = __riscv_vcpop_m_b8(cmp, vl);\n        if (count != vl) {\n            return false;\n        }\n        i += vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    if (text.empty()) {\n        return true;\n    }\n\n    size_t left = 0;\n    size_t right = text.size() - 1;\n\n    while (left < right) {\n        size_t n = right - left + 1;\n        size_t vl = __riscv_vsetvl_e8m1(n);\n\n        vint8m1_t left_vec = __riscv_vle8_v_i8m1((const signed char*)(text.data() + left), vl);\n        vint8m1_t right_vec = __riscv_vlse8_v_i8m1((const signed char*)(text.data() + right), -1, vl);\n\n        vbool8_t cmp = __riscv_vmsne_vv_i8m1_b8(left_vec, right_vec, vl);\n        if (__riscv_vfirst_m_b8(cmp, vl) >= 0) {\n            return false;\n        }\n\n        left += vl;\n        right -= vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_palindrome_simd(std::string text){\n    size_t len = text.size();\n    if (len == 0) {\n        return true;\n    }\n    const char *str = text.data();\n    size_t left = 0;\n    size_t right = len - 1;\n    size_t remaining = len / 2;\n\n    size_t vl;\n    while (remaining > 0) {\n        vl = vsetvl_e8m1(remaining);\n        vuint8m1_t v_left = vle8_v_u8m1((const uint8_t*)(str + left), vl);\n        vuint8m1_t v_right = vle8_v_u8m1((const uint8_t*)(str + right - vl + 1), vl);\n        vuint8m1_t v_index = vid_v_u8m1(vl);\n        vuint8m1_t v_rev_index = vrsub_vx_u8m1(v_index, vl - 1, vl);\n        vuint8m1_t v_right_rev = vrgather_vv_u8m1(v_right, v_rev_index, vl);\n        vbool8_t mask = vmseq_vv_u8m1_b8(v_left, v_right_rev, vl);\n        if (vcpop_m_b8(mask, vl) != vl) {\n            return false;\n        }\n        left += vl;\n        right -= vl;\n        remaining -= vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <string>\n#include <riscv_vector.h>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), '\\0');\n    size_t n = s.length();\n    const uint8_t *src = reinterpret_cast<const uint8_t*>(s.data());\n    uint8_t *dst = reinterpret_cast<uint8_t*>(&out[0]);\n    size_t vl;\n    while (n > 0) {\n        vl = __riscv_vsetvl_e8m1(n);\n        vuint8m1_t v_chars = __riscv_vle8_v_u8m1(src, vl);\n        vuint8m1_t v_offset = __riscv_vsub_vx_u8m1(v_chars, 'a', vl);\n        vuint8m1_t v_temp = __riscv_vadd_vx_u8m1(v_offset, 21, vl);\n        vbool8_t mask = __riscv_vmsgeu_vx_u8m1_b8(v_temp, 26, vl);\n        vuint8m1_t v_adjusted = __riscv_vsub_vx_u8m1_m(mask, v_temp, v_temp, 26, vl);\n        vuint8m1_t v_result = __riscv_vadd_vx_u8m1(v_adjusted, 'a', vl);\n        __riscv_vse8_v_u8m1(dst, v_result, vl);\n        src += vl;\n        dst += vl;\n        n -= vl;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out;\n    out.resize(s.length());\n    const uint8_t *src = reinterpret_cast<const uint8_t*>(s.data());\n    uint8_t *dest = reinterpret_cast<uint8_t*>(&out[0]);\n    size_t n = s.length();\n    size_t vl;\n    \n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vuint8m1_t vec = __riscv_vle8_v_u8m1(src, vl);\n        vuint8m1_t offset = __riscv_vsub_vx_u8m1(vec, 'a', vl);\n        vuint8m1_t shifted = __riscv_vadd_vx_u8m1(offset, 21, vl);\n        vbool8_t mask = __riscv_vmsgeu_vx_u8m1_b8(shifted, 26, vl);\n        vuint8m1_t adjusted = __riscv_vsub_vx_u8m1_m(mask, shifted, shifted, 26, vl);\n        vuint8m1_t result = __riscv_vadd_vx_u8m1(adjusted, 'a', vl);\n        __riscv_vse8_v_u8m1(dest, result, vl);\n        src += vl;\n        dest += vl;\n    }\n    \n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s){\n    size_t n = s.length();\n    std::string out(n, 0);\n    const char *src = s.data();\n    char *dst = &out[0];\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e8m1(avl);\n        vuint8m1_t v_src = __riscv_vle8_v_u8m1((const uint8_t*)src, vl);\n        vuint8m1_t v_sub = __riscv_vsub_vx_u8m1(v_src, 5, vl);\n        vbool8_t mask = __riscv_vmsltu_vx_u8m1_b8(v_sub, 97, vl);\n        vuint8m1_t v_dec = __riscv_vadd_vx_u8m1_m(mask, v_sub, v_sub, 26, vl);\n        __riscv_vse8_v_u8m1((uint8_t*)dst, v_dec, vl);\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nstd::string decode_shift_simd(std::string s) {\n    size_t n = s.length();\n    std::string out(n, 0);\n    if (n == 0) return out;\n    \n    size_t vl;\n    const uint8_t a_char = 'a';\n    const uint8_t offset = 21;\n    const uint8_t mod = 26;\n    const uint8_t mod_threshold = 26;\n\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        vuint8m1_t v_in = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + i), vl);\n        vuint8m1_t v_sub = __riscv_vsub_vx_u8m1(v_in, a_char, vl);\n        vuint8m1_t v_add = __riscv_vadd_vx_u8m1(v_sub, offset, vl);\n        vbool8_t mask = __riscv_vmsgeu_vx_u8m1_b8(v_add, mod_threshold, vl);\n        vuint8m1_t v_mod = __riscv_vsub_vx_u8m1_m(mask, v_add, v_add, mod, vl);\n        vuint8m1_t v_dec = __riscv_vadd_vx_u8m1(v_mod, a_char, vl);\n        __riscv_vse8_v_u8m1((uint8_t*)(out.data() + i), v_dec, vl);\n        i += vl;\n    }\n    \n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), 0);\n    size_t n = s.length();\n    const char *in = s.data();\n    char *out_buf = &out[0];\n    for (size_t vl; (vl = __riscv_vsetvl_e8m1(n)) > 0; n -= vl, in += vl, out_buf += vl) {\n        vint8m1_t v_char = __riscv_vle8_v_i8m1(in, vl);\n        vint8m1_t v_sub = __riscv_vsub_vx_i8m1(v_char, 'a', vl);\n        vint8m1_t v_t = __riscv_vadd_vx_i8m1(v_sub, 21, vl);\n        vbool8_t mask = __riscv_vmsge_vx_i8m1_b8(v_t, 26, vl);\n        vint8m1_t v_t_adjusted = __riscv_vsub_vx_i8m1_m(mask, v_t, v_t, 26, vl);\n        vint8m1_t v_result = __riscv_vadd_vx_i8m1(v_t_adjusted, 'a', vl);\n        __riscv_vse8_v_i8m1(out_buf, v_result, vl);\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t n = l.size();\n    const int *data = l.data();\n    size_t vl;\n    for (size_t avl = n; avl > 0; ) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(data, vl);\n        vbool32_t mask = __riscv_vmslt_vx_i32m1_b32(vec, t, vl);\n        vbool32_t inv_mask = __riscv_vmnand_mm_b32(mask, mask, vl);\n        int first_fail = __riscv_vfirst_m_b32(inv_mask, vl);\n        if (first_fail != -1) {\n            return false;\n        }\n        data += vl;\n        avl -= vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    if (l.empty()) {\n        return true;\n    }\n    size_t n = l.size();\n    int *ptr = l.data();\n    size_t vl;\n    for (; n > 0; n -= vl, ptr += vl) {\n        vl = vsetvl_e32m8(n);\n        vint32m8_t vec = vle32_v_i32m8(ptr, vl);\n        vbool4_t mask = vmslt_vx_i32m8_b4(vec, t, vl);\n        size_t popcnt = vmpopc_m_b4(mask, vl);\n        if (popcnt < vl) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t n = l.size();\n    if (n == 0) {\n        return true;\n    }\n    int *data = l.data();\n    size_t vl;\n    for (size_t avl = n; avl > 0; ) {\n        vl = __riscv_vsetvl_e32m8(avl);\n        vint32m8_t chunk = __riscv_vle32_v_i32m8(data, vl);\n        vbool32_t mask = __riscv_vmsge_vx_i32m8_b32(chunk, t, vl);\n        if (__riscv_vcpop_m_b32(mask, vl)) {\n            return false;\n        }\n        data += vl;\n        avl -= vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t n = l.size();\n    if (n == 0) {\n        return true;\n    }\n    const int *data = l.data();\n    size_t avl = n;\n    size_t vl;\n    for (; avl > 0; ) {\n        vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vle32_v_i32m1(data, vl);\n        vbool32_t mask_below = vmslt_vx_i32m1(vec, t, vl);\n        vbool32_t mask_not_below = vmnot_m_b32(mask_below, vl);\n        int found = vfirst_m_b32(mask_not_below, vl);\n        if (found != -1) {\n            return false;\n        }\n        data += vl;\n        avl -= vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t n = l.size();\n    size_t vl;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t vec = vle32_v_i32m1(&l[i], vl);\n        vbool32_t mask = vmslt_vx_i32m1_b32(vec, t, vl);\n        if (vpopc_m_b32(mask, vl) != vl) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    int balance = 0;\n    const char* ptr = brackets.c_str();\n    size_t n = brackets.size();\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        vint8m1_t v = __riscv_vle8_v_i8m1((const int8_t*)(ptr + i), vl);\n        vbool8_t mask_lt = __riscv_vmseq_vx_i8m1_b8(v, '<', vl);\n        vbool8_t mask_gt = __riscv_vmseq_vx_i8m1_b8(v, '>', vl);\n        vint8m1_t v_ones = __riscv_vmv_v_x_i8m1(1, vl);\n        vint8m1_t v_neg_ones = __riscv_vmv_v_x_i8m1(-1, vl);\n        vint8m1_t v_vals = __riscv_vmerge_vvm_i8m1(__riscv_vmv_v_x_i8m1(0, vl), v_ones, mask_lt, vl);\n        v_vals = __riscv_vmerge_vvm_i8m1(v_vals, v_neg_ones, mask_gt, vl);\n        int local_balance = 0;\n        int local_min = 0;\n        for (size_t j = 0; j < vl; j++) {\n            vint8m1_t v_slide = __riscv_vslidedown_vx_i8m1(v_vals, j, vl);\n            int8_t val = __riscv_vmv_x_s_i8m1_i8(v_slide);\n            local_balance += val;\n            if (local_balance < local_min) {\n                local_min = local_balance;\n            }\n        }\n        if (balance + local_min < 0) {\n            return false;\n        }\n        balance += local_balance;\n        i += vl;\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cstddef>\n\nbool correct_bracketing_simd(std::string brackets) {\n    const char *ptr = brackets.c_str();\n    size_t n = brackets.size();\n    int current_counter = 0;\n    int global_min = 0;\n\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e8m1(n - i);\n        vint8m1_t v_str = vle8_v_i8m1(ptr + i, vl);\n\n        vbool8_t m_open = vmseq_vx_i8m1_b8(v_str, '<', vl);\n        vbool8_t m_close = vmseq_vx_i8m1_b8(v_str, '>', vl);\n\n        size_t count_open = vcpop_m_b8(m_open, vl);\n        size_t count_close = vcpop_m_b8(m_close, vl);\n        int total_in_segment = static_cast<int>(count_open) - static_cast<int>(count_close);\n\n        vint32m1_t v_open = vmv_v_x_i32m1(0, vl);\n        v_open = vmerge_vxm_i32m1(v_open, 1, m_open, vl);\n        vint32m1_t v_close = vmv_v_x_i32m1(0, vl);\n        v_close = vmerge_vxm_i32m1(v_close, 1, m_close, vl);\n        vint32m1_t v_deltas = vsub_vv_i32m1(v_open, v_close, vl);\n\n        vint32m1_t v_scan = v_deltas;\n        for (int step = 1; step < vl; step *= 2) {\n            vint32m1_t shifted = vslideup_vx_i32m1(\n                vmv_v_x_i32m1(0, vl),\n                v_scan,\n                step,\n                vl\n            );\n            v_scan = vadd_vv_i32m1(v_scan, shifted, vl);\n        }\n\n        vint32m1_t v_min0 = vmv_v_x_i32m1(0, 1);\n        vint32m1_t v_min = vredmin_vs_i32m1_i32m1(v_scan, v_min0, vl);\n        int min_in_segment = vmv_x_s_i32m1_i32(v_min);\n\n        int running_min_in_segment = current_counter + min_in_segment;\n        if (running_min_in_segment < global_min) {\n            global_min = running_min_in_segment;\n        }\n\n        current_counter += total_in_segment;\n\n        if (global_min < 0) {\n            return false;\n        }\n\n        i += vl;\n    }\n\n    return (current_counter == 0);\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    const char* s = brackets.data();\n    size_t n = brackets.size();\n    int32_t carry = 0;\n    size_t i = 0;\n\n    while (i < n) {\n        size_t vl = vsetvl_e32m1(n - i);\n        vsetvl_e8m1(vl);\n        vuint8m1_t v_str = vle8_v_u8m1((const uint8_t*)(s + i), vl);\n        vbool8_t mask_lt = vmseq_vx_u8m1_b8(v_str, '<', vl);\n        vsetvl_e32m1(vl);\n        vint32m1_t v_delta = vmv_v_x_i32m1(-1, vl);\n        v_delta = vmerge_vxm_i32m1(mask_lt, v_delta, 1, vl);\n        vint32m1_t v_zero = vmv_v_x_i32m1(0, vl);\n        int32_t total = vmv_x_s_i32m1_i32(vredsum_vs_i32m1_i32m1(v_delta, v_zero, vl));\n        int32_t deltas_arr[vl];\n        vse32_v_i32m1(deltas_arr, v_delta, vl);\n        int32_t current = 0;\n        int32_t rel_min = 0;\n        for (size_t j = 0; j < vl; j++) {\n            current += deltas_arr[j];\n            if (current < rel_min) {\n                rel_min = current;\n            }\n        }\n        if (carry + rel_min < 0) {\n            return false;\n        }\n        carry += total;\n        i += vl;\n    }\n\n    return carry == 0;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <alloca.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    int n = brackets.size();\n    if (n == 0) return true;\n\n    int min_global = 0;\n    int current = 0;\n    const char *ptr = brackets.data();\n    size_t vl;\n\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n\n        vuint8m1_t v_str = __riscv_vle8_v_u8m1((const uint8_t*)(ptr + i), vl);\n        vbool8_t mask = __riscv_vmseq_vx_u8m1_b8(v_str, '<', vl);\n        \n        vint8m1_t v_ones = __riscv_vmv_v_x_i8m1(1, vl);\n        vint8m1_t v_neg_ones = __riscv_vmv_v_x_i8m1(-1, vl);\n        vint8m1_t v_vals = __riscv_vmerge_vvm_i8m1(v_neg_ones, v_ones, mask, vl);\n\n        vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, 1);\n        vint32m1_t v_sum32 = __riscv_vwredsum_vs_i8m1_i32m1(v_vals, v_zero, vl);\n        int sum_chunk = __riscv_vmv_x_s_i32m1_i32(v_sum32);\n\n        int8_t *vals = (int8_t*)alloca(vl * sizeof(int8_t));\n        __riscv_vse8_v_i8m1(vals, v_vals, vl);\n\n        int min_in_chunk = 0;\n        int running = 0;\n        for (size_t j = 0; j < vl; j++) {\n            running += vals[j];\n            if (running < min_in_chunk) min_in_chunk = running;\n        }\n\n        if (current + min_in_chunk < min_global) min_global = current + min_in_chunk;\n        current += sum_chunk;\n        i += vl;\n    }\n\n    return (min_global >= 0 && current == 0);\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <algorithm>\n\nbool correct_bracketing_simd(std::string brackets) {\n    int n = brackets.size();\n    size_t avl = n;\n    long delta_total = 0;\n    long min_total = 0;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        const uint8_t *ptr = (const uint8_t*)(brackets.data() + (n - avl));\n        vuint8m1_t str_vec = vle8_v_u8m1(ptr, vl);\n\n        vbool8_t mask_greater = vmseq_vx_u8m1(str_vec, '>', vl);\n        vint8m1_t ones = vmv_v_x_i8m1(1, vl);\n        vint8m1_t neg_ones = vmv_v_x_i8m1(-1, vl);\n        vint8m1_t v = vmerge_vvm_i8m1(mask_greater, neg_ones, ones, vl);\n\n        int8_t values[vl];\n        vse8_v_i8m1(values, v, vl);\n\n        long local_sum = 0;\n        long local_min = 0;\n        for (size_t i = 0; i < vl; ++i) {\n            local_sum += values[i];\n            if (local_sum < local_min) {\n                local_min = local_sum;\n            }\n        }\n\n        min_total = std::min(min_total, delta_total + local_min);\n        delta_total += local_sum;\n        avl -= vl;\n    }\n\n    return (min_total >= 0) && (delta_total == 0);\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\n#define MAX_SIMD_LEN 128\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t n = brackets.size();\n    int balance = 0;\n    int min_balance = 0;\n\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = n - i;\n        if (vl > MAX_SIMD_LEN) {\n            vl = MAX_SIMD_LEN;\n        }\n        vl = vsetvl_e8m1(vl);\n\n        vint8m1_t v_ch = vle8_v_i8m1((const signed char*)(brackets.data() + i), vl);\n\n        vbool8_t m_open = vmseq_vx_i8m1_b8(v_ch, '(', vl);\n        vbool8_t m_close = vmseq_vx_i8m1_b8(v_ch, ')', vl);\n\n        vint8m1_t v_change = vmv_v_x_i8m1(0, vl);\n        v_change = vadd_vx_i8m1_m(m_open, v_change, v_change, 1, vl);\n        v_change = vadd_vx_i8m1_m(m_close, v_change, v_change, -1, vl);\n\n        vint32m1_t v_change32 = vwadd_vx_i32m1(v_change, 0, vl);\n\n        int32_t changes[MAX_SIMD_LEN];\n        vse32_v_i32m1(changes, v_change32, vl);\n\n        int chunk_min = 0;\n        int chunk_total = 0;\n        int running_chunk = 0;\n        for (size_t j = 0; j < vl; j++) {\n            running_chunk += changes[j];\n            if (running_chunk < chunk_min) {\n                chunk_min = running_chunk;\n            }\n        }\n        chunk_total = running_chunk;\n\n        if (balance + chunk_min < min_balance) {\n            min_balance = balance + chunk_min;\n        }\n        balance += chunk_total;\n\n        if (min_balance < 0) {\n            return false;\n        }\n\n        i += vl;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstdint>\n\nbool correct_bracketing_simd(std::string brackets) {\n    int n = brackets.size();\n    int base = 0;\n    size_t i = 0;\n\n    while (i < n) {\n        size_t vl = __riscv_vsetvl_e16m1(n - i);\n        vuint8m1_t v_chars = __riscv_vle8_v_u8m1((uint8_t*)(brackets.data() + i), vl);\n        vuint8m1_t v_mask = __riscv_vmseq_vx_u8m1(v_chars, '(', vl);\n        vuint8m1_t v_shifted = __riscv_vsll_vx_u8m1(v_mask, 1, vl);\n        vint8m1_t v_inc8 = __riscv_vsub_vx_i8m1(__riscv_vreinterpret_v_u8m1_i8m1(v_shifted), 1, vl);\n        vint16m1_t v_inc16 = __riscv_vwcvt_x_x_v_i16m1(v_inc8, vl);\n\n        vint16m1_t v_prefix = v_inc16;\n        int d = 1;\n        while (d < vl) {\n            vint16m1_t v_temp = __riscv_vslideup_vx_i16m1(__riscv_vmv_v_x_i16m1(0, vl), v_prefix, d, vl);\n            v_prefix = __riscv_vadd_vv_i16m1(v_prefix, v_temp, vl);\n            d *= 2;\n        }\n\n        int total = __riscv_vmv_x_s_i16m1_i16(__riscv_vslidedown_vx_i16m1(v_prefix, vl - 1, 1));\n\n        vint16m1_t v_min_red = __riscv_vmv_s_x_i16m1(32767, 1);\n        v_min_red = __riscv_vredmin_vs_i16m1_i16m1(v_prefix, v_min_red, vl);\n        int min_prefix_inclusive = __riscv_vmv_x_s_i16m1_i16(v_min_red);\n\n        int min_inclusive = (min_prefix_inclusive < 0) ? min_prefix_inclusive : 0;\n        if (base + min_inclusive < 0) {\n            return false;\n        }\n\n        base += total;\n        i += vl;\n    }\n\n    return base == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t n = brackets.size();\n    if (n == 0) return true;\n    \n    size_t vl;\n    vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, 1);\n    int32_t depth = 0;\n    const char* data = brackets.data();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        vuint8m1_t v_ch = __riscv_vle8_v_u8m1((const uint8_t*)(data + i), vl);\n        \n        vbool8_t m_open = __riscv_vmseq_vx_u8m1_b8(v_ch, '(', vl);\n        vbool8_t m_close = __riscv_vmseq_vx_u8m1_b8(v_ch, ')', vl);\n        \n        vint8m1_t v_delta8 = __riscv_vmv_v_x_i8m1(0, vl);\n        v_delta8 = __riscv_vadd_vx_i8m1_m(m_open, v_delta8, v_delta8, 1, vl);\n        v_delta8 = __riscv_vadd_vx_i8m1_m(m_close, v_delta8, v_delta8, -1, vl);\n        \n        vint32m1_t v_delta = __riscv_vsext_vf4_i32m1(v_delta8, vl);\n        \n        int32_t chunk_sum = __riscv_vmv_x_s_i32m1_i32(__riscv_vredsum_vs_i32m1_i32m1(v_delta, v_zero, vl));\n        \n        int32_t min_prefix = 0;\n        int32_t current_prefix = 0;\n        for (size_t j = 0; j < vl; j++) {\n            int32_t x = __riscv_vmv_x_s_i32m1_i32(__riscv_vslidedown_vx_i32m1(v_delta, j, 1));\n            current_prefix += x;\n            if (current_prefix < min_prefix) min_prefix = current_prefix;\n        }\n        \n        if (depth + min_prefix < 0) return false;\n        depth += chunk_sum;\n    }\n    \n    return depth == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t n = brackets.size();\n    const char *ptr = brackets.c_str();\n    int global_min = 0;\n    int current_depth = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e16m1(n - i);\n        vuint8m1_t v_str = vle8_v_u8m1((const uint8_t*)(ptr + i), vl);\n        vbool8_t mask_open = vmseq_vx_u8m1(v_str, '(', vl);\n        vbool8_t mask_close = vmseq_vx_u8m1(v_str, ')', vl);\n        vint16m1_t v_open_val = vand_vx_i16m1(vreinterpret_v_u8m1_i16m1(mask_open), 1, vl);\n        vint16m1_t v_close_val = vand_vx_i16m1(vreinterpret_v_u8m1_i16m1(mask_close), 1, vl);\n        vint16m1_t v_val = vsub_vv_i16m1(v_open_val, v_close_val, vl);\n        vint16m1_t v_zero = vmv_v_x_i16m1(0, vl);\n        vint16m1_t v_sum = vredsum_vs_i16m1_i16m1(v_val, v_zero, vl);\n        int chunk_sum = vmv_x_s_i16m1_i16(v_sum);\n        int16_t arr_val[vl];\n        vse16_v_i16m1(arr_val, v_val, vl);\n        int min_prefix = 0;\n        int running = 0;\n        for (size_t j = 0; j < vl; j++) {\n            running += arr_val[j];\n            if (running < min_prefix) {\n                min_prefix = running;\n            }\n        }\n        int min_in_chunk_relative = min_prefix < 0 ? min_prefix : 0;\n        int abs_min_in_chunk = current_depth + min_in_chunk_relative;\n        if (abs_min_in_chunk < global_min) {\n            global_min = abs_min_in_chunk;\n        }\n        if (global_min < 0) {\n            return false;\n        }\n        current_depth += chunk_sum;\n        i += vl;\n    }\n    return current_depth == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    const char *ptr = brackets.c_str();\n    size_t len = brackets.length();\n    size_t avl = len;\n    int current_depth = 0;\n    while (avl > 0) {\n        size_t vl8 = __riscv_vsetvl_e8m1(avl);\n        vint8m1_t v_chars = __riscv_vle8_v_i8m1(ptr, vl8);\n        vint8m1_t v_inc8 = __riscv_vmv_v_x_i8m1(0, vl8);\n        vbool8_t mask_open = __riscv_vmseq_vx_i8m1_b8(v_chars, '(', vl8);\n        vbool8_t mask_close = __riscv_vmseq_vx_i8m1_b8(v_chars, ')', vl8);\n        v_inc8 = __riscv_vadd_vx_i8m1_m(mask_open, v_inc8, v_inc8, 1, vl8);\n        v_inc8 = __riscv_vsub_vx_i8m1_m(mask_close, v_inc8, v_inc8, 1, vl8);\n        vint16m2_t v_inc = __riscv_vsext_vf2_i16m2(v_inc8, vl8);\n        vint16m2_t v_sum = v_inc;\n        for (int stride = 1; stride < vl8; stride *= 2) {\n            vint16m2_t v_old = v_sum;\n            vint16m2_t v_shifted = __riscv_vmv_v_x_i16m2(0, vl8);\n            v_shifted = __riscv_vslideup_vx_i16m2(v_shifted, v_old, stride, vl8);\n            v_sum = __riscv_vadd_vv_i16m2(v_old, v_shifted, vl8);\n        }\n        vint16m2_t v_min = __riscv_vredmin_vs_i16m2_i16m2(v_sum, __riscv_vmv_v_x_i16m2(32767, 1), vl8);\n        int min_in_chunk = __riscv_vmv_x_s_i16m2_i16(v_min);\n        vint16m2_t v_total = __riscv_vredsum_vs_i16m2_i16m2(v_inc, __riscv_vmv_v_x_i16m2(0, 1), vl8);\n        int total_chunk = __riscv_vmv_x_s_i16m2_i16(v_total);\n        if (current_depth + min_in_chunk < 0) {\n            return false;\n        }\n        current_depth += total_chunk;\n        ptr += vl8;\n        avl -= vl8;\n    }\n    return current_depth == 0;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    if (xs.size() <= 1) {\n        return std::vector<float>();\n    }\n    size_t n = xs.size() - 1;\n    std::vector<float> output(n);\n    size_t vl;\n    for (size_t j0 = 0; j0 < n; j0 += vl) {\n        vl = __riscv_vsetvl_e32m1(n - j0);\n        float *coeff_ptr = xs.data() + 1 + j0;\n        vfloat32m1_t v_coeff = __riscv_vle32_v_f32m1(coeff_ptr, vl);\n        vuint32m1_t v_idx = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t v_base = __riscv_vmv_v_x_u32m1(j0 + 1, vl);\n        vuint32m1_t v_lin = __riscv_vadd_vv_u32m1(v_idx, v_base, vl);\n        vfloat32m1_t v_mult = __riscv_vfcvt_f_xu_v_f32m1(v_lin, vl);\n        vfloat32m1_t v_result = __riscv_vfmul_vv_f32m1(v_coeff, v_mult, vl);\n        __riscv_vse32_v_f32m1(output.data() + j0, v_result, vl);\n    }\n    return output;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return std::vector<float>();\n    }\n    size_t out_len = n - 1;\n    std::vector<float> res(out_len);\n    size_t vl;\n    for (size_t i = 0; i < out_len; i += vl) {\n        vl = __riscv_vsetvl_e32m8(out_len - i);\n        vfloat32m8_t data = __riscv_vle32_v_f32m8(&xs[1 + i], vl);\n        vuint32m8_t vidx = __riscv_vid_v_u32m8(vl);\n        vuint32m8_t base = __riscv_vmv_v_x_u32m8(i + 1, vl);\n        vidx = __riscv_vadd_vv_u32m8(vidx, base, vl);\n        vfloat32m8_t fidx = __riscv_vfcvt_f_xu_v_f32m8(vidx, vl);\n        vfloat32m8_t prod = __riscv_vfmul_vv_f32m8(data, fidx, vl);\n        __riscv_vse32_v_f32m8(&res[i], prod, vl);\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return std::vector<float>();\n    }\n    std::vector<float> res(n - 1);\n    size_t avl = n - 1;\n    size_t offset = 0;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = vsetvl_e32m1(avl);\n        vfloat32m1_t coeffs = vle32_v_f32m1(&xs[1 + offset], vl);\n        vuint32m1_t vidx = vid_v_u32m1(vl);\n        vfloat32m1_t vidx_f = vfcvt_f_xu_v_f32m1(vidx, vl);\n        vfloat32m1_t factors = vfadd_vf_f32m1(vidx_f, (float)(offset + 1), vl);\n        vfloat32m1_t res_vec = vfmul_vv_f32m1(coeffs, factors, vl);\n        vse32_v_f32m1(&res[offset], res_vec, vl);\n        offset += vl;\n        avl -= vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    if (xs.size() <= 1) {\n        return std::vector<float>();\n    }\n    size_t n = xs.size() - 1;\n    std::vector<float> res(n);\n    size_t avl = n;\n    size_t current_offset = 0;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vfloat32m8_t input_vec = vle32_v_f32m8(xs.data() + current_offset + 1, vl);\n        vuint32m8_t idx = vid_v_u32m8(vl);\n        vuint32m8_t base_vec = vmv_v_x_u32m8(current_offset + 1, vl);\n        vuint32m8_t multiplier_uint = vadd_vv_u32m8(base_vec, idx, vl);\n        vfloat32m8_t multiplier_float = vfcvt_f_xu_v_f32m8(multiplier_uint, vl);\n        vfloat32m8_t res_vec = vfmul_vv_f32m8(input_vec, multiplier_float, vl);\n        vse32_v_f32m8(res.data() + current_offset, res_vec, vl);\n        avl -= vl;\n        current_offset += vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    if (n <= 1) {\n        return std::vector<float>();\n    }\n    std::vector<float> res(n - 1);\n    float *src_data = xs.data() + 1;\n    float *dst_data = res.data();\n    size_t avl = n - 1;\n    size_t total = avl;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        size_t base_index = total - avl;\n        vuint32m8_t idx_vec = vid_v_u32m8(vl);\n        vuint32m8_t multiplier_uint = vadd_vx_u32m8(idx_vec, base_index + 1, vl);\n        vfloat32m8_t mult_float = vfcvt_f_xu_v_f32m8(multiplier_uint, vl);\n        vfloat32m8_t data_vec = vle32_v_f32m8(src_data + base_index, vl);\n        vfloat32m8_t res_vec = vfmul_vv_f32m8(data_vec, mult_float, vl);\n        vse32_v_f32m8(dst_data + base_index, res_vec, vl);\n        avl -= vl;\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint vowels_count_simd(std::string s) {\n    int n = s.size();\n    if (n == 0) \n        return 0;\n\n    int count = 0;\n    const unsigned char *ptr = (const unsigned char*)s.c_str();\n    size_t avl = n;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vuint8m1_t vec = __riscv_vle8_v_u8m1(ptr, vl);\n\n        vbool8_t mask_upper = __riscv_vmsgeu_vx_u8m1_b8(vec, 'A', vl);\n        vbool8_t mask_upper2 = __riscv_vmsleu_vx_u8m1_b8(vec, 'Z', vl);\n        vbool8_t mask_upper_total = __riscv_vmand_mm_b8(mask_upper, mask_upper2, vl);\n\n        vuint8m1_t vec_low = __riscv_vadd_vx_u8m1_m(mask_upper_total, vec, vec, 32, vl);\n\n        vbool8_t mask_a = __riscv_vmseq_vx_u8m1_b8(vec_low, 'a', vl);\n        vbool8_t mask_e = __riscv_vmseq_vx_u8m1_b8(vec_low, 'e', vl);\n        vbool8_t mask_i = __riscv_vmseq_vx_u8m1_b8(vec_low, 'i', vl);\n        vbool8_t mask_o = __riscv_vmseq_vx_u8m1_b8(vec_low, 'o', vl);\n        vbool8_t mask_u = __riscv_vmseq_vx_u8m1_b8(vec_low, 'u', vl);\n\n        vbool8_t mask_any = __riscv_vmor_mm_b8(mask_a, mask_e, vl);\n        mask_any = __riscv_vmor_mm_b8(mask_any, mask_i, vl);\n        mask_any = __riscv_vmor_mm_b8(mask_any, mask_o, vl);\n        mask_any = __riscv_vmor_mm_b8(mask_any, mask_u, vl);\n\n        count += __riscv_vcpop_m_b8(mask_any, vl);\n\n        ptr += vl;\n        avl -= vl;\n    }\n\n    char last_char = s[n-1];\n    if (last_char == 'y' || last_char == 'Y') {\n        count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    size_t n = s.size();\n    if (n == 0) return 0;\n    \n    const char *ptr = s.c_str();\n    int count = 0;\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl, ptr += vl) {\n        vl = vsetvl_e8m1(avl);\n        vuint8m1_t v = vle8_v_u8m1((uint8_t*)ptr, vl);\n        vuint8m1_t v_low = vor_vx_u8m1(v, 32, vl);\n        vbool8_t m_a = vmseq_vx_u8m1_b8(v_low, 'a', vl);\n        vbool8_t m_e = vmseq_vx_u8m1_b8(v_low, 'e', vl);\n        vbool8_t m_i = vmseq_vx_u8m1_b8(v_low, 'i', vl);\n        vbool8_t m_o = vmseq_vx_u8m1_b8(v_low, 'o', vl);\n        vbool8_t m_u = vmseq_vx_u8m1_b8(v_low, 'u', vl);\n        vbool8_t m_any = vmor_mm_b8(m_a, m_e, vl);\n        m_any = vmor_mm_b8(m_any, m_i, vl);\n        m_any = vmor_mm_b8(m_any, m_o, vl);\n        m_any = vmor_mm_b8(m_any, m_u, vl);\n        count += vcpop_m_b8(m_any, vl);\n    }\n    \n    char last_char = s[n - 1];\n    if (last_char == 'y' || last_char == 'Y') {\n        count++;\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    size_t n = s.size();\n    if (n == 0) {\n        return 0;\n    }\n    const char *ptr = s.c_str();\n    size_t vl;\n    int count = 0;\n    size_t avl = n;\n\n    while (avl > 0) {\n        vl = vsetvl_e8m1(avl);\n        vint8m1_t v_ch = vle8_v_i8m1(ptr, vl);\n        vint8m1_t v_low = vor_vx_i8m1(v_ch, 32, vl);\n        vbool8_t mask_a = vmseq_vx_i8m1_b8(v_low, 'a', vl);\n        vbool8_t mask_e = vmseq_vx_i8m1_b8(v_low, 'e', vl);\n        vbool8_t mask_i = vmseq_vx_i8m1_b8(v_low, 'i', vl);\n        vbool8_t mask_o = vmseq_vx_i8m1_b8(v_low, 'o', vl);\n        vbool8_t mask_u = vmseq_vx_i8m1_b8(v_low, 'u', vl);\n        vbool8_t mask_vowel = vmor_mm_b8(mask_a, mask_e, vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, mask_i, vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, mask_o, vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, mask_u, vl);\n        count += vpopc_m_b8(mask_vowel, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    char last_char = s[n-1];\n    if (last_char == 'y' || last_char == 'Y') {\n        count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint vowels_count_simd(std::string s) {\n    int total = 0;\n    size_t n = s.size();\n    const char *str = s.c_str();\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vint8m1_t vec = vle8_v_i8m1(str, vl);\n        \n        vbool1_t mask_a = vmseq_vx_i8m1_b1(vec, 'a', vl);\n        vbool1_t mask_A = vmseq_vx_i8m1_b1(vec, 'A', vl);\n        vbool1_t mask_ae = vmor_mm_b1(mask_a, mask_A, vl);\n        \n        vbool1_t mask_e = vmseq_vx_i8m1_b1(vec, 'e', vl);\n        vbool1_t mask_E = vmseq_vx_i8m1_b1(vec, 'E', vl);\n        vbool1_t mask_ee = vmor_mm_b1(mask_e, mask_E, vl);\n        mask_ae = vmor_mm_b1(mask_ae, mask_ee, vl);\n        \n        vbool1_t mask_i = vmseq_vx_i8m1_b1(vec, 'i', vl);\n        vbool1_t mask_I = vmseq_vx_i8m1_b1(vec, 'I', vl);\n        vbool1_t mask_ie = vmor_mm_b1(mask_i, mask_I, vl);\n        mask_ae = vmor_mm_b1(mask_ae, mask_ie, vl);\n        \n        vbool1_t mask_o = vmseq_vx_i8m1_b1(vec, 'o', vl);\n        vbool1_t mask_O = vmseq_vx_i8m1_b1(vec, 'O', vl);\n        vbool1_t mask_oe = vmor_mm_b1(mask_o, mask_O, vl);\n        mask_ae = vmor_mm_b1(mask_ae, mask_oe, vl);\n        \n        vbool1_t mask_u = vmseq_vx_i8m1_b1(vec, 'u', vl);\n        vbool1_t mask_U = vmseq_vx_i8m1_b1(vec, 'U', vl);\n        vbool1_t mask_ue = vmor_mm_b1(mask_u, mask_U, vl);\n        mask_ae = vmor_mm_b1(mask_ae, mask_ue, vl);\n        \n        total += vpopc_m_b1(mask_ae, vl);\n        str += vl;\n        avl -= vl;\n    }\n    \n    if (n > 0) {\n        char last_char = s[n-1];\n        if (last_char == 'y' || last_char == 'Y') {\n            total++;\n        }\n    }\n    \n    return total;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    size_t n = s.length();\n    if (n == 0) return 0;\n\n    const uint8_t *ptr = (const uint8_t*)s.c_str();\n    unsigned long total = 0;\n    size_t vl;\n    for (size_t avl = n; avl > 0; ) {\n        vl = __riscv_vsetvl_e8m8(avl);\n        vuint8m8_t v_data = __riscv_vle8_v_u8m8(ptr, vl);\n        \n        vbool1_t v_mask = __riscv_vmclr_m_b1(vl);\n        \n        vuint8m8_t v_a = __riscv_vmv_v_x_u8m8('a', vl);\n        vbool1_t v_eq_a = __riscv_vmseq_vv_u8m8_b1(v_data, v_a, vl);\n        vuint8m8_t v_A = __riscv_vmv_v_x_u8m8('A', vl);\n        vbool1_t v_eq_A = __riscv_vmseq_vv_u8m8_b1(v_data, v_A, vl);\n        vbool1_t v_mask_a = __riscv_vmor_mm_b1(v_eq_a, v_eq_A, vl);\n        v_mask = __riscv_vmor_mm_b1(v_mask, v_mask_a, vl);\n        \n        vuint8m8_t v_e = __riscv_vmv_v_x_u8m8('e', vl);\n        vbool1_t v_eq_e = __riscv_vmseq_vv_u8m8_b1(v_data, v_e, vl);\n        vuint8m8_t v_E = __riscv_vmv_v_x_u8m8('E', vl);\n        vbool1_t v_eq_E = __riscv_vmseq_vv_u8m8_b1(v_data, v_E, vl);\n        vbool1_t v_mask_e = __riscv_vmor_mm_b1(v_eq_e, v_eq_E, vl);\n        v_mask = __riscv_vmor_mm_b1(v_mask, v_mask_e, vl);\n        \n        vuint8m8_t v_i = __riscv_vmv_v_x_u8m8('i', vl);\n        vbool1_t v_eq_i = __riscv_vmseq_vv_u8m8_b1(v_data, v_i, vl);\n        vuint8m8_t v_I = __riscv_vmv_v_x_u8m8('I', vl);\n        vbool1_t v_eq_I = __riscv_vmseq_vv_u8m8_b1(v_data, v_I, vl);\n        vbool1_t v_mask_i = __riscv_vmor_mm_b1(v_eq_i, v_eq_I, vl);\n        v_mask = __riscv_vmor_mm_b1(v_mask, v_mask_i, vl);\n        \n        vuint8m8_t v_o = __riscv_vmv_v_x_u8m8('o', vl);\n        vbool1_t v_eq_o = __riscv_vmseq_vv_u8m8_b1(v_data, v_o, vl);\n        vuint8m8_t v_O = __riscv_vmv_v_x_u8m8('O', vl);\n        vbool1_t v_eq_O = __riscv_vmseq_vv_u8m8_b1(v_data, v_O, vl);\n        vbool1_t v_mask_o = __riscv_vmor_mm_b1(v_eq_o, v_eq_O, vl);\n        v_mask = __riscv_vmor_mm_b1(v_mask, v_mask_o, vl);\n        \n        vuint8m8_t v_u = __riscv_vmv_v_x_u8m8('u', vl);\n        vbool1_t v_eq_u = __riscv_vmseq_vv_u8m8_b1(v_data, v_u, vl);\n        vuint8m8_t v_U = __riscv_vmv_v_x_u8m8('U', vl);\n        vbool1_t v_eq_U = __riscv_vmseq_vv_u8m8_b1(v_data, v_U, vl);\n        vbool1_t v_mask_u = __riscv_vmor_mm_b1(v_eq_u, v_eq_U, vl);\n        v_mask = __riscv_vmor_mm_b1(v_mask, v_mask_u, vl);\n        \n        total += __riscv_vpopc_m_b1(v_mask, vl);\n        \n        ptr += vl;\n        avl -= vl;\n    }\n    \n    char last_char = s[n-1];\n    if (last_char == 'y' || last_char == 'Y') {\n        total++;\n    }\n    \n    return (int)total;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    int total = 0;\n    size_t n = s.size();\n    const char *ptr = s.c_str();\n    while (n > 0) {\n        size_t vl = vsetvl_e8m1(n);\n        vint8m1_t v = vle8_v_i8m1((const int8_t*)ptr, vl);\n        \n        vbool8_t mask_ge = vmsge_vx_i8m1_b8(v, 'A', vl);\n        vbool8_t mask_le = vmsle_vx_i8m1_b8(v, 'Z', vl);\n        vbool8_t mask = vmand_mm_b8(mask_ge, mask_le, vl);\n        \n        vint8m1_t v_zero = vmv_v_x_i8m1(0, vl);\n        vint8m1_t v_uppers = vmerge_vvm_i8m1(mask, v, v_zero, vl);\n        \n        vint32m1_t v_red = vmv_v_x_i32m1(0, vl);\n        v_red = vwredsum_vs_i8m1_i32m1(v_uppers, v_red, vl);\n        \n        int chunk_sum = vmv_x_s_i32m1(v_red);\n        total += chunk_sum;\n        \n        n -= vl;\n        ptr += vl;\n    }\n    return total;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nint digitSum_simd(std::string s) {\n    const uint8_t *ptr = (const uint8_t*)s.data();\n    size_t n = s.size();\n    uint32_t sum = 0;\n\n    if (n == 0) \n        return 0;\n\n    vuint32m1_t v_sum = vmv_v_x_u32m1(0, 1);\n    size_t vl;\n\n    while (n > 0) {\n        vl = vsetvl_e8m1(n);\n        vuint8m1_t v_chars = vle8_v_u8m1(ptr, vl);\n\n        vbool8_t mask_ge = vmsgeu_vx_u8m1_b8(v_chars, 'A', vl);\n        vbool8_t mask_le = vmsleu_vx_u8m1_b8(v_chars, 'Z', vl);\n        vbool8_t mask_upper = vmand_mm_b8(mask_ge, mask_le, vl);\n\n        vuint8m1_t v_upper_bytes = vmerge_vxm_u8m1(mask_upper, v_chars, 0, vl);\n        vuint32m4_t v_upper32 = vzext_vf4_u32m4(v_upper_bytes, vl);\n\n        v_sum = vredsum_vs_u32m4_u32m1(v_sum, v_upper32, v_sum, vl);\n\n        ptr += vl;\n        n -= vl;\n    }\n\n    sum = vmv_x_s_u32m1_u32(v_sum);\n    return (int)sum;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    int total_sum = 0;\n    size_t n = s.size();\n    const char *ptr = s.c_str();\n\n    while (n > 0) {\n        size_t vl = __riscv_vsetvl_e8m1(n);\n        vint8m1_t v_str = __riscv_vle8_v_i8m1((const int8_t*)ptr, vl);\n\n        vbool1_t mask_ge = __riscv_vmsge_vx_i8m1_b1(v_str, 'A', vl);\n        vbool1_t mask_le = __riscv_vmsle_vx_i8m1_b1(v_str, 'Z', vl);\n        vbool1_t mask = __riscv_vmand_mm_b1(mask_ge, mask_le, vl);\n\n        vint8m1_t v_selected = __riscv_vmerge_vvm_i8m1(\n            __riscv_vmv_v_x_i8m1(0, vl), \n            v_str, \n            mask, \n            vl\n        );\n\n        vint16m2_t v16 = __riscv_vwcvt_x_x_v_i16m2(v_selected, vl);\n        vint32m4_t v32 = __riscv_vwcvt_x_x_v_i32m4(v16, vl);\n\n        vint32m4_t v_red = __riscv_vmv_v_x_i32m4(0, vl);\n        v_red = __riscv_vredsum_vs_i32m4_i32m4(v32, v_red, vl);\n        int chunk_sum = __riscv_vmv_x_s_i32m4_i32(v_red);\n        total_sum += chunk_sum;\n\n        n -= vl;\n        ptr += vl;\n    }\n\n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```cpp\n#include <string>\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    int n = s.size();\n    const char *ptr = s.c_str();\n    size_t avl = n;\n    size_t vl;\n    vint32m1_t vred = vmv_v_x_i32m1(0, 1);\n\n    while (avl > 0) {\n        vl = vsetvl_e8m1(avl);\n        vint8m1_t v = vle8_v_i8m1((const int8_t*)ptr, vl);\n\n        vbool8_t mask_A = vmsge_vx_i8m1_b8(v, 'A', vl);\n        vbool8_t mask_Z = vmsle_vx_i8m1_b8(v, 'Z', vl);\n        vbool8_t mask = vmand_mm(mask_A, mask_Z, vl);\n\n        vint32m1_t v32 = vzext_vf4_i32m1(v, vl);\n        vint32m1_t v_selected = vmerge_vxm_i32m1(mask, v32, 0, vl);\n\n        vred = vredsum_vs_i32m1_i32m1(v_selected, vred, vl);\n\n        ptr += vl;\n        avl -= vl;\n    }\n\n    int sum = vmv_x_s_i32m1_i32(vred);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    const char *ptr = s.c_str();\n    size_t n = s.size();\n    vint32m1_t sum_vec = vmv_v_x_i32m1(0);\n    size_t vl;\n\n    for (; n > 0; n -= vl, ptr += vl) {\n        vl = vsetvl_e8m1(n);\n        vint8m1_t v8 = vle8_v_i8m1(ptr, vl);\n        vbool8_t maskA = vmsge_vx_i8m1_b8(v8, 'A', vl);\n        vbool8_t maskZ = vmsle_vx_i8m1_b8(v8, 'Z', vl);\n        vbool8_t maskUppercase = vmand_mm_b8(maskA, maskZ, vl);\n        vint32m4_t v32 = vzext_vf4_i32m4(v8, vl);\n        sum_vec = vredsum_vs_i32m4_i32m1_m(maskUppercase, sum_vec, v32, sum_vec, vl);\n    }\n\n    int sum = vmv_x_s_i32m1_i32(sum_vec);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    int global_min_value = INT_MAX;\n    long global_min_index = -1;\n\n    size_t n = arr.size();\n    size_t base_index = 0;\n    int *ptr = arr.data();\n\n    while (n > 0) {\n        size_t vl = vsetvl_e32m1(n);\n        vint32m1_t vx = vle32_v_i32m1(ptr, vl);\n\n        vint32m1_t v_lsb = vand_vx_i32m1(vx, 1, vl);\n        vbool32_t vm_even = vmseq_vx_i32m1_b32(v_lsb, 0, vl);\n\n        vint32m1_t v_min_seg = vmv_v_x_i32m1(global_min_value, 1);\n        v_min_seg = vredmin_vs_i32m1_i32m1_m(vm_even, v_min_seg, vx, v_min_seg, vl);\n        int min_seg = vmv_x_s_i32m1_i32(v_min_seg);\n\n        if (min_seg < global_min_value || (min_seg == global_min_value && global_min_index == -1)) {\n            vbool32_t vm_eq = vmseq_vx_i32m1_b32(vx, min_seg, vl);\n            vbool32_t vm_candidate = vmand_mm_b32(vm_even, vm_eq, vl);\n            long first_pos = vfirst_m_b32(vm_candidate, vl);\n            if (first_pos >= 0) {\n                global_min_value = min_seg;\n                global_min_index = base_index + first_pos;\n            }\n        }\n\n        base_index += vl;\n        ptr += vl;\n        n -= vl;\n    }\n\n    if (global_min_index == -1) {\n        return {};\n    } else {\n        return {global_min_value, static_cast<int>(global_min_index)};\n    }\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```cpp\n#include <vector>\n#include <riscv_vector.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    bool global_found = false;\n    int global_min = 0;\n    int global_index = -1;\n    size_t n = arr.size();\n    int *ptr = arr.data();\n    size_t base = 0;\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t v = vle32_v_i32m1(ptr, vl);\n        \n        vint32m1_t lowbit = vand_vx_i32m1(v, 1, vl);\n        vbool32_t mask_even = vmseq_vx_i32m1_b32(lowbit, 0, vl);\n        int any_even = vfirst_m_b32(mask_even, vl);\n        \n        if (any_even == -1) {\n            base += vl;\n            ptr += vl;\n            avl -= vl;\n            continue;\n        }\n        \n        int first_even_value = ptr[any_even];\n        vint32m1_t vmin_red = vmv_v_x_i32m1(first_even_value, 1);\n        vmin_red = vredmin_vs_i32m1_i32m1_m(mask_even, v, vmin_red, vl);\n        int min_seg = vmv_x_s_i32m1_i32(vmin_red);\n        \n        if (!global_found) {\n            global_found = true;\n            global_min = min_seg;\n            vbool32_t mask_eq = vmseq_vx_i32m1_b32(v, min_seg, vl);\n            vbool32_t mask_candidate = vmand_mm_b32(mask_eq, mask_even, vl);\n            int first_in_seg = vfirst_m_b32(mask_candidate, vl);\n            global_index = base + first_in_seg;\n        } else if (min_seg < global_min) {\n            global_min = min_seg;\n            vbool32_t mask_eq = vmseq_vx_i32m1_b32(v, min_seg, vl);\n            vbool32_t mask_candidate = vmand_mm_b32(mask_eq, mask_even, vl);\n            int first_in_seg = vfirst_m_b32(mask_candidate, vl);\n            global_index = base + first_in_seg;\n        }\n        \n        base += vl;\n        ptr += vl;\n        avl -= vl;\n    }\n    \n    if (!global_found) {\n        return {};\n    } else {\n        return {global_min, global_index};\n    }\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <climits>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n == 0) {\n        return {};\n    }\n\n    int current_min = INT_MAX;\n    int current_index = -1;\n\n    size_t vl;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&arr[i], vl);\n\n        vint32m1_t v_and = vand_vx_i32m1(v, 1, vl);\n        vbool32_t even_mask = vmseq_vx_i32m1_b32(v_and, 0, vl);\n        vbool32_t candidate_mask = vmslt_vx_i32m1_b32(v, current_min, vl);\n        vbool32_t mask = vmand_mm_b32(even_mask, candidate_mask, vl);\n\n        vint32m1_t v_masked = vmerge_vxm_i32m1(mask, v, current_min, vl);\n        vint32m1_t v_red = vmv_v_x_i32m1(current_min, vl);\n        v_red = vredmin_vs_i32m1_i32m1(v_masked, v_red, vl);\n        int min_in_chunk = vmv_x_s_i32m1_i32(v_red);\n\n        if (min_in_chunk < current_min) {\n            current_min = min_in_chunk;\n            vbool32_t min_mask = vmeq_vx_i32m1_b32(v, min_in_chunk, vl);\n            vbool32_t min_even_mask = vmand_mm_b32(min_mask, even_mask, vl);\n            signed long index_in_chunk = vfirst_m_b32(min_even_mask);\n            if (index_in_chunk >= 0) {\n                current_index = i + index_in_chunk;\n            }\n        }\n    }\n\n    if (current_index == -1) {\n        return {};\n    } else {\n        return { current_min, current_index };\n    }\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    size_t n = arr.size();\n    int min_even = 0x7FFFFFFF;\n    size_t vl;\n    vint32m1_t v_min_red;\n    vl = vsetvl_e32m1(1);\n    v_min_red = vmv_v_x_i32m1(min_even, 1);\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t v_and = vand_vx_i32m1(v, 1, vl);\n        vbool32_t mask = vmseq_vx_i32m1_b32(v_and, 0, vl);\n        vint32m1_t v_masked = vmerge_vxm_i32m1(mask, v, min_even, vl);\n        v_min_red = vredmin_vs_i32m1(v_min_red, v_masked, v_min_red, vl);\n        i += vl;\n    }\n    min_even = vmv_x_s_i32m1_i32(v_min_red);\n    if (min_even == 0x7FFFFFFF) {\n        return {};\n    }\n    size_t index = (size_t)-1;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&arr[i], vl);\n        vbool32_t mask = vmseq_vx_i32m1_b32(v, min_even, vl);\n        int first_in_segment = vfirst_m_b32(mask, vl);\n        if (first_in_segment >= 0) {\n            index = i + first_in_segment;\n            break;\n        }\n        i += vl;\n    }\n    return {min_even, (int)index};\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <climits>\n#include <vector>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    int min_even = INT_MAX;\n    int min_index = -1;\n    size_t n = arr.size();\n    if (n == 0) {\n        return {};\n    }\n\n    for (size_t i = 0; i < n && min_even != 0; ) {\n        size_t vl = vsetvl_e32m1(n - i);\n        vint32m1_t vec = vle32_v_i32m1(arr.data() + i, vl);\n        \n        vint32m1_t vec_and = vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask_even = vmseq_vx_i32m1_b32(vec_and, 0, vl);\n        \n        vbool32_t mask_candidate;\n        if (min_even == INT_MAX) {\n            mask_candidate = mask_even;\n        } else {\n            vbool32_t mask_less = vmslt_vx_i32m1_b32(vec, min_even, vl);\n            mask_candidate = vmand_mm_b32(mask_even, mask_less, vl);\n        }\n        \n        int first_candidate = vfirst_m_b32(mask_candidate, vl);\n        if (first_candidate >= 0) {\n            vint32m1_t masked_vec = vmerge_vxm_i32m1(mask_candidate, vec, INT_MAX, vl);\n            vint32m1_t vred = vredmin_vs_i32m1_i32m1(masked_vec, vmv_v_x_i32m1(INT_MAX, 1), vl);\n            int candidate_min = vmv_x_s_i32m1_i32(vred);\n            \n            vbool32_t mask_min = vmseq_vx_i32m1_b32(vec, candidate_min, vl);\n            int first_min = vfirst_m_b32(mask_min, vl);\n            min_even = candidate_min;\n            min_index = i + first_min;\n        }\n        \n        i += vl;\n    }\n    \n    if (min_index == -1) {\n        return {};\n    } else {\n        return {min_even, min_index};\n    }\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <stdlib.h>\n\nint search_simd(std::vector<int> lst) {\n    int n = lst.size();\n    if (n == 0) return -1;\n    unsigned int *arr = (unsigned int*)malloc(n * sizeof(unsigned int));\n    unsigned int *temp = (unsigned int*)malloc(n * sizeof(unsigned int));\n    for (int i = 0; i < n; ++i) {\n        arr[i] = (unsigned int)lst[i];\n    }\n    unsigned int* src = arr;\n    unsigned int* dst = temp;\n    for (int shift = 0; shift < 32; shift += 8) {\n        size_t counts[256] = {0};\n        size_t vl;\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e32m8(n - i);\n            vuint32m8_t v_data = __riscv_vle32_v_u32m8(src + i, vl);\n            vuint32m8_t v_shifted = __riscv_vsrl_vx_u32m8(v_data, shift, vl);\n            vuint32m8_t v_byte = __riscv_vand_vx_u32m8(v_shifted, 0xFF, vl);\n            for (int b = 0; b < 256; ++b) {\n                vbool4_t mask = __riscv_vmseq_vx_u32m8_b4(v_byte, b, vl);\n                counts[b] += __riscv_vcpop_m_b4(mask, vl);\n            }\n            i += vl;\n        }\n        size_t prefix[257];\n        prefix[0] = 0;\n        for (int b = 0; b < 256; ++b) {\n            prefix[b+1] = prefix[b] + counts[b];\n        }\n        for (size_t i = 0; i < n; ++i) {\n            unsigned int byte_val = (src[i] >> shift) & 0xFF;\n            dst[prefix[byte_val]++] = src[i];\n        }\n        unsigned int* tmp = src;\n        src = dst;\n        dst = tmp;\n    }\n    std::vector<int> freq_vec(n+1, 0);\n    if (n > 0) {\n        unsigned int current = src[0];\n        int count = 1;\n        for (int i = 1; i < n; ++i) {\n            if (src[i] == current) {\n                ++count;\n            } else {\n                if (current >= 1 && current <= (unsigned int)n) {\n                    freq_vec[current] = count;\n                }\n                current = src[i];\n                count = 1;\n            }\n        }\n        if (current >= 1 && current <= (unsigned int)n) {\n            freq_vec[current] = count;\n        }\n    }\n    for (int x = n; x >= 1; --x) {\n        if (freq_vec[x] >= x) {\n            free(arr);\n            free(temp);\n            return x;\n        }\n    }\n    free(arr);\n    free(temp);\n    return -1;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    int n = lst.size();\n    if (n == 0) return -1;\n\n    size_t vl;\n    vint32m1_t max_vec = vmv_v_x_i32m1(0, 1);\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t vec = vle32_v_i32m1(&lst[i], vl);\n        max_vec = vredmax_vs_i32m1_i32m1(max_vec, vec, max_vec, vl);\n        i += vl;\n    }\n    int max_val = vmv_x_s_i32m1_i32(max_vec);\n    max_val = std::min(max_val, n);\n\n    std::vector<int> freq(max_val + 1, 0);\n    for (int i = 1; i <= max_val; i++) {\n        size_t count = 0;\n        for (size_t j = 0; j < n; ) {\n            vl = vsetvl_e32m1(n - j);\n            vint32m1_t vec = vle32_v_i32m1(&lst[j], vl);\n            vbool32_t mask = vmseq_vx_i32m1_b32(vec, i, vl);\n            count += vpopc_v_b32(mask, vl);\n            j += vl;\n        }\n        freq[i] = count;\n    }\n\n    for (int i = max_val; i >= 1; i--) {\n        if (freq[i] >= i) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint search_simd(std::vector<int> lst) {\n    int n = lst.size();\n    if (n == 0) {\n        return -1;\n    }\n\n    int max_val = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_data = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_dest = vmv_v_x_i32m1(max_val, vl);\n        v_dest = vredmax_vs_i32m1_i32m1(v_dest, v_data, v_dest, vl);\n        int seg_max = vmv_x_s_i32m1_i32(v_dest);\n        if (seg_max > max_val) {\n            max_val = seg_max;\n        }\n        i += vl;\n    }\n\n    if (max_val == 0) {\n        return -1;\n    }\n\n    int ans = -1;\n    for (int x = max_val; x >= 1; x--) {\n        int count = 0;\n        for (size_t i = 0; i < n; ) {\n            vl = vsetvl_e32m1(n - i);\n            vint32m1_t v_data = vle32_v_i32m1(&lst[i], vl);\n            vbool32_t mask = vmseq_vx_i32m1_b32(v_data, x, vl);\n            count += vcpop_m_b32(mask, vl);\n            i += vl;\n        }\n        if (count >= x) {\n            ans = x;\n            break;\n        }\n    }\n\n    return ans;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    int n = lst.size();\n    if (n == 0) \n        return -1;\n    \n    uint32_t *freq = new uint32_t[n+1]();\n    int *compressed = new int[n];\n    size_t p = 0;\n    int *data = lst.data();\n    size_t vl;\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_data = __riscv_vle32_v_i32m1(data + i, vl);\n        vbool32_t mask = __riscv_vmsle_vx_i32m1_b32(v_data, n, vl);\n        p += __riscv_vcompress_v_i32m1(compressed + p, mask, v_data, vl);\n    }\n\n    for (size_t i = 0; i < p; ++i) {\n        int x = compressed[i];\n        if (x <= n) \n            freq[x]++;\n    }\n\n    int candidate = -1;\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n    uint32_t *tmp = new uint32_t[vlmax];\n\n    for (int base = 1; base <= n; base += vl) {\n        vl = __riscv_vsetvl_e32m1(n - base + 1);\n        vuint32m1_t v_freq = __riscv_vle32_v_u32m1(freq + base, vl);\n        vuint32m1_t v_indices = __riscv_vid_v_u32m1(vl);\n        v_indices = __riscv_vadd_vx_u32m1(v_indices, base, vl);\n        vbool32_t mask = __riscv_vmsgeu_vv_u32m1_b32(v_freq, v_indices, vl);\n        size_t count = __riscv_vcpop_m_b32(mask, vl);\n\n        if (count > 0) {\n            __riscv_vcompress_vm_u32m1(tmp, mask, v_indices, vl);\n            candidate = std::max(candidate, (int)tmp[count - 1]);\n        }\n    }\n\n    delete[] freq;\n    delete[] compressed;\n    delete[] tmp;\n    return candidate;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint search_simd(std::vector<int> lst) {\n    int n = lst.size();\n    if (n == 0) \n        return -1;\n\n    int max_val = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_red = __riscv_vredmax_vs_i32m1_i32m1(vec, __riscv_vmv_v_x_i32m1(max_val, vl), vl);\n        max_val = __riscv_vmv_x_s_i32m1_i32(v_red);\n        i += vl;\n    }\n\n    if (max_val <= 0) \n        return -1;\n\n    std::vector<int> freq(max_val + 1, 0);\n    for (int num : lst) {\n        if (num <= max_val && num > 0) {\n            freq[num]++;\n        }\n    }\n\n    int base = max_val;\n    while (base >= 1) {\n        vl = __riscv_vsetvl_e32m1(base);\n        vuint32m1_t vid = __riscv_vid_v_u32m1(vl);\n        vint32m1_t v_x = __riscv_vrsub_vx_i32m1(vid, base, vl);\n        vint32m1_t v_freq = __riscv_vluxei32_v_i32m1(freq.data(), v_x, vl);\n        vbool32_t mask = __riscv_vmsge_vv_i32m1_b32(v_freq, v_x, vl);\n        long first_index = __riscv_vfirst_m_b32(mask, vl);\n        if (first_index >= 0) {\n            return base - first_index;\n        }\n        base -= vl;\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    int n = q.size();\n    int *data = q.data();\n    int half = n / 2;\n    int i = 0;\n    size_t vl;\n    \n    while (i < half) {\n        vl = vsetvl_e32m1(half - i);\n        vint32m1_t v1 = vle32_v_i32m1(data + i, vl);\n        vint32m1_t v2 = vlse32_v_i32m1(data + n - 1 - i, -1, vl);\n        vbool32_t cmp = vmseq_vv_i32m1_b32(v1, v2, vl);\n        unsigned long popcnt = vcpop_m_b32(cmp, vl);\n        if (popcnt != vl) {\n            return false;\n        }\n        i += vl;\n    }\n    \n    vint32m1_t v_sum = vmv_v_x_i32m1(0, 1);\n    i = 0;\n    int remaining = n;\n    while (remaining > 0) {\n        vl = vsetvl_e32m1(remaining);\n        vint32m1_t v_chunk = vle32_v_i32m1(data + i, vl);\n        v_sum = vredsum_vs_i32m1_i32m1(v_sum, v_chunk, v_sum, vl);\n        i += vl;\n        remaining -= vl;\n    }\n    int total = vmv_x_s_i32m1_i32(v_sum);\n    \n    return total <= w;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    int *data = q.data();\n    if (n == 0) {\n        return false;\n    }\n\n    size_t pairs = n / 2;\n    size_t index = 0;\n    size_t vl;\n\n    while (index < pairs) {\n        vl = __riscv_vsetvl_e32m1(pairs - index);\n        vint32m1_t left = __riscv_vle32_v_i32m1(data + index, vl);\n        vint32m1_t right = __riscv_vle32_v_i32m1(data + n - 1 - index - (vl - 1), vl);\n        vuint32m1_t reverse_index = __riscv_vid_v_u32m1(vl);\n        reverse_index = __riscv_vrsub_vx_u32m1(reverse_index, vl - 1, vl);\n        vint32m1_t rev_right = __riscv_vrgather_vv_i32m1(right, reverse_index, vl);\n        vbool32_t mask = __riscv_vmsne_vv_i32m1_b32(left, rev_right, vl);\n        if (__riscv_vfirst_m_b32(mask, vl) >= 0) {\n            return false;\n        }\n        index += vl;\n    }\n\n    index = 0;\n    vint32m1_t vec_sum = __riscv_vmv_v_x_i32m1(0, __riscv_vsetvlmax_e32m1());\n    size_t len = n;\n\n    while (index < len) {\n        vl = __riscv_vsetvl_e32m1(len - index);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(data + index, vl);\n        vec_sum = __riscv_vredsum_vs_i32m1_i32m1(vec, vec_sum, vl);\n        index += vl;\n    }\n\n    int total_sum = __riscv_vmv_x_s_i32m1_i32(vec_sum);\n    return (total_sum <= w);\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    int n = q.size();\n    int *data = q.data();\n    int *left_ptr = data;\n    int *right_ptr = data + n - 1;\n    ptrdiff_t byte_stride = -sizeof(int);\n    size_t avl = n / 2;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = vsetvl_e32m1(avl);\n        vint32m1_t left_vec = vle32_v_i32m1(left_ptr, vl);\n        vint32m1_t right_vec = vlse32_v_i32m1(right_ptr, byte_stride, vl);\n        vbool32_t cmp = vmsne_vv_i32m1_b32(left_vec, right_vec, vl);\n        if (vfirst_m_b32(cmp, vl) >= 0) {\n            return false;\n        }\n        left_ptr += vl;\n        right_ptr -= vl;\n        avl -= vl;\n    }\n\n    size_t total_avl = n;\n    int *ptr = data;\n    vint32m1_t vec_acc = vmv_v_x_i32m1(0, 1);\n    while (total_avl > 0) {\n        vl = vsetvl_e32m1(total_avl);\n        vint32m1_t vec = vle32_v_i32m1(ptr, vl);\n        vec_acc = vredsum_vs_i32m1(vec, vec_acc, vl);\n        ptr += vl;\n        total_avl -= vl;\n    }\n    int sum = vmv_x_s_i32m1_i32(vec_acc);\n    return (sum <= w);\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    int *data = q.data();\n    int total_sum = 0;\n    size_t vl;\n    vint32m1_t v_sum = vmv_v_x_i32m1(0, 1);\n\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e32m1(avl);\n        vint32m1_t v_data = vle32_v_i32m1(data, vl);\n        v_sum = vredsum_vs_i32m1(v_data, v_sum, vl);\n        data += vl;\n        avl -= vl;\n    }\n    total_sum = vmv_x_s_i32m1_i32(v_sum);\n\n    if (total_sum > w) {\n        return false;\n    }\n\n    size_t half = n / 2;\n    int *ptr = q.data();\n    ptrdiff_t stride = -4;\n\n    for (size_t i = 0; i < half; ) {\n        vl = vsetvl_e32m1(half - i);\n        vint32m1_t v_front = vle32_v_i32m1(ptr + i, vl);\n        vint32m1_t v_back = vlse32_v_i32m1(ptr + n - 1 - i, stride, vl);\n        vbool32_t mask = vmsne_vv_i32m1_b32(v_front, v_back, vl);\n        int mismatch = vfirst_m_b32(mask, vl);\n        if (mismatch >= 0) {\n            return false;\n        }\n        i += vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    if (n == 0) {\n        return false;\n    }\n    int *data = q.data();\n    size_t half = n / 2;\n    int *left = data;\n    int *right = data + n - 1;\n    size_t remaining_half = half;\n\n    while (remaining_half > 0) {\n        size_t vl = vsetvl_e32m8(remaining_half);\n        vint32m8_t left_vec = vle32_v_i32m8(left, vl);\n        vint32m8_t right_vec = vlse32_v_i32m8(right, -4, vl);\n        vbool4_t mask = vmsne_vv_i32m8_b4(left_vec, right_vec, vl);\n        if (vfirst_m_b4(mask, vl) != -1) {\n            return false;\n        }\n        left += vl;\n        right -= vl;\n        remaining_half -= vl;\n    }\n\n    vint32m1_t red = vmv_v_x_i32m1(0, 1);\n    size_t remaining_sum = n;\n    int *ptr = data;\n    while (remaining_sum > 0) {\n        size_t vl = vsetvl_e32m8(remaining_sum);\n        vint32m8_t vec = vle32_v_i32m8(ptr, vl);\n        red = vredsum_vs_i32m8_i32m1(vec, red, vl);\n        ptr += vl;\n        remaining_sum -= vl;\n    }\n    int total = vmv_x_s_i32m1_i32(red);\n    return total <= w;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    size_t half = n / 2;\n    if (half == 0) \n        return 0;\n\n    int *left = arr.data();\n    int *right = arr.data() + n - 1;\n    size_t vl;\n    long count = 0;\n    size_t i = 0;\n\n    while (i < half) {\n        vl = __riscv_vsetvl_e32m8(half - i);\n        vint32m8_t left_vec = __riscv_vle32_v_i32m8(left + i, vl);\n        vint32m8_t right_vec = __riscv_vlse32_v_i32m8(right - i, -4, vl);\n        vbool4_t mask = __riscv_vmsne_vv_i32m8_b4(left_vec, right_vec, vl);\n        count += __riscv_vcpop_v_b4(mask, vl);\n        i += vl;\n    }\n\n    return (int)count;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint smallest_change_simd(std::vector<int> arr) {\n    int n = arr.size();\n    int pairs = n / 2;\n    if (pairs == 0) {\n        return 0;\n    }\n\n    int* left_ptr = arr.data();\n    int* right_ptr = arr.data() + n - 1;\n    size_t vl;\n    int changes = 0;\n\n    while (pairs > 0) {\n        vl = vsetvl_e32m1(pairs);\n        vint32m1_t left_vec = vle32_v_i32m1(left_ptr, vl);\n        vint32m1_t right_vec = vlse32_v_i32m1(right_ptr, (ptrdiff_t)(-4), vl);\n        vbool32_t mask = vmsne_vv_i32m1_b32(left_vec, right_vec, vl);\n        changes += vcpop_m_b32(mask, vl);\n        left_ptr += vl;\n        right_ptr -= vl;\n        pairs -= vl;\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n <= 1) \n        return 0;\n    \n    int *data = arr.data();\n    size_t pairs = n / 2;\n    size_t processed = 0;\n    size_t mismatches = 0;\n    \n    while (processed < pairs) {\n        size_t vl = vsetvl_e32m1(pairs - processed);\n        vint32m1_t v_start = vle32_v_i32m1(data + processed, vl);\n        vint32m1_t v_end = vle32_v_i32m1(data + n - processed - vl, vl);\n        vbool32_t mask = vmseq_vv_i32m1_b32(v_start, v_end, vl);\n        size_t equal_count = vpopc_m_b32(mask, vl);\n        mismatches += vl - equal_count;\n        processed += vl;\n    }\n    \n    return mismatches;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    size_t half = n / 2;\n    if (half == 0) {\n        return 0;\n    }\n    int *left_ptr = arr.data();\n    int *right_ptr = arr.data() + n - 1;\n    size_t avl = half;\n    int changes = 0;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t left_vec = __riscv_vle32_v_i32m1(left_ptr, vl);\n        vint32m1_t right_vec = __riscv_vlse32_v_i32m1(right_ptr, -4, vl);\n        vbool32_t cmp_mask = __riscv_vmsne_vv_i32m1_b32(left_vec, right_vec, vl);\n        changes += __riscv_vpopc_m_b32(cmp_mask, vl);\n        left_ptr += vl;\n        right_ptr -= vl;\n        avl -= vl;\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint smallest_change_simd(std::vector<int> arr) {\n    int n = arr.size();\n    if (n == 0) return 0;\n    int i = 0, j = n - 1;\n    int changes = 0;\n    while (i < j) {\n        size_t vl = __riscv_vsetvl_e32m1((j - i + 1) / 2);\n        if (vl == 0) break;\n        \n        vint32m1_t v_front = __riscv_vle32_v_i32m1(arr.data() + i, vl);\n        vint32m1_t v_end = __riscv_vle32_v_i32m1(arr.data() + j - vl + 1, vl);\n        \n        vuint32m1_t rev_idx = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t vid_reversed = __riscv_vrsub_vx_u32m1(rev_idx, vl - 1, vl);\n        vint32m1_t v_end_rev = __riscv_vrgather_vv_i32m1(v_end, vid_reversed, vl);\n        \n        vbool32_t mask = __riscv_vmsne_vv_i32m1_b32(v_front, v_end_rev, vl);\n        changes += __riscv_vcpop_m_b32(mask, vl);\n        \n        i += vl;\n        j -= vl;\n    }\n    return changes;\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstatic size_t total_chars_rvv(const std::vector<std::string>& vec) {\n    size_t n = vec.size();\n    size_t total = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e64m8(n - i);\n        uint64_t lens[vl];\n        for (size_t j = 0; j < vl; j++) {\n            lens[j] = vec[i+j].size();\n        }\n        vuint64m8_t v_len = vle64_v_u64m8(lens, vl);\n        vuint64m1_t v_dest = vmv_v_x_u64m1(0, 1);\n        v_dest = vredsum_vs_u64m8_u64m1(v_len, v_dest, vl);\n        total += vmv_x_s_u64m1_u64(v_dest);\n        i += vl;\n    }\n    return total;\n}\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    size_t total1 = total_chars_rvv(lst1);\n    size_t total2 = total_chars_rvv(lst2);\n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    auto compute_total = [](const std::vector<std::string>& lst) -> size_t {\n        size_t n = lst.size();\n        if (n == 0) {\n            return 0;\n        }\n        size_t* lengths = new size_t[n];\n        for (size_t i = 0; i < n; i++) {\n            lengths[i] = lst[i].size();\n        }\n        size_t total = 0;\n        size_t vl;\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e64m1(n - i);\n            vuint64m1_t vec = __riscv_vle64_v_u64m1((const uint64_t*)(lengths + i), vl);\n            vuint64m1_t vec_red = __riscv_vredsum_vs_u64m1_u64m1(vec, __riscv_vmv_v_x_u64m1(0, 1), vl);\n            uint64_t strip_sum = __riscv_vmv_x_s_u64m1_u64(vec_red);\n            total += strip_sum;\n            i += vl;\n        }\n        delete[] lengths;\n        return total;\n    };\n\n    size_t total1 = compute_total(lst1);\n    size_t total2 = compute_total(lst2);\n\n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    size_t max_vl = __riscv_vsetvlmax_e64m1();\n    uint64_t tmp[max_vl];\n    uint64_t total1 = 0;\n    size_t n1 = lst1.size();\n    size_t i1 = 0;\n    size_t vl1;\n    while (i1 < n1) {\n        vl1 = __riscv_vsetvl_e64m1(n1 - i1);\n        for (size_t j = 0; j < vl1; ++j) {\n            tmp[j] = lst1[i1 + j].size();\n        }\n        vuint64m1_t vec1 = __riscv_vle64_v_u64m1(tmp, vl1);\n        vuint64m1_t vred1 = __riscv_vredsum_vs_u64m1_u64m1(vec1, __riscv_vmv_s_x_u64m1(0, vl1), vl1);\n        total1 += __riscv_vmv_x_s_u64m1_u64(vred1);\n        i1 += vl1;\n    }\n    uint64_t total2 = 0;\n    size_t n2 = lst2.size();\n    size_t i2 = 0;\n    size_t vl2;\n    while (i2 < n2) {\n        vl2 = __riscv_vsetvl_e64m1(n2 - i2);\n        for (size_t j = 0; j < vl2; ++j) {\n            tmp[j] = lst2[i2 + j].size();\n        }\n        vuint64m1_t vec2 = __riscv_vle64_v_u64m1(tmp, vl2);\n        vuint64m1_t vred2 = __riscv_vredsum_vs_u64m1_u64m1(vec2, __riscv_vmv_s_x_u64m1(0, vl2), vl2);\n        total2 += __riscv_vmv_x_s_u64m1_u64(vred2);\n        i2 += vl2;\n    }\n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n#include <cstdint>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    auto rvv_reduce = [](const std::vector<uint64_t>& arr) -> uint64_t {\n        if (arr.empty()) \n            return 0;\n        size_t n = arr.size();\n        size_t avl = n;\n        vuint64m1_t vsum = __riscv_vmv_v_x_u64m1(0, 1);\n        size_t vl;\n        for (size_t i = 0; i < n; ) {\n            vl = __riscv_vsetvl_e64m1(avl);\n            vuint64m1_t vdata = __riscv_vle64_v_u64m1(arr.data() + i, vl);\n            vsum = __riscv_vredsum_vs_u64m1_u64m1(vdata, vsum, vl);\n            i += vl;\n            avl = n - i;\n        }\n        return __riscv_vmv_x_s_u64m1_u64(vsum);\n    };\n\n    std::vector<uint64_t> lengths1;\n    lengths1.reserve(lst1.size());\n    for (const auto& s : lst1) {\n        lengths1.push_back(static_cast<uint64_t>(s.size()));\n    }\n    uint64_t total1 = rvv_reduce(lengths1);\n\n    std::vector<uint64_t> lengths2;\n    lengths2.reserve(lst2.size());\n    for (const auto& s : lst2) {\n        lengths2.push_back(static_cast<uint64_t>(s.size()));\n    }\n    uint64_t total2 = rvv_reduce(lengths2);\n\n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    auto sum_lengths = [](const std::vector<std::string>& lst) -> uint64_t {\n        size_t n = lst.size();\n        if (n == 0) {\n            return 0;\n        }\n        std::vector<uint64_t> lengths(n);\n        for (size_t i = 0; i < n; ++i) {\n            lengths[i] = static_cast<uint64_t>(lst[i].length());\n        }\n        size_t vl;\n        vuint64m1_t vec_sum = vmv_v_x_u64m1(0, 1);\n        const uint64_t* arr = lengths.data();\n        size_t i = 0;\n        while (i < n) {\n            vl = vsetvl_e64m1(n - i);\n            vuint64m1_t vec = vle64_v_u64m1(arr + i, vl);\n            vec_sum = vredsum_vs_u64m1_u64m1(vec_sum, vec, vec_sum, vl);\n            i += vl;\n        }\n        uint64_t total = vmv_x_s_u64m1_u64(vec_sum);\n        return total;\n    };\n\n    uint64_t total1 = sum_lengths(lst1);\n    uint64_t total2 = sum_lengths(lst2);\n\n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 0) {\n        return (n == 0);\n    }\n    if (x == 1) {\n        return (n != 0);\n    }\n    if (n == 0) {\n        return false;\n    }\n    if (n == 1) {\n        return false;\n    }\n\n    uint64_t powers[129];\n    int num_exponents = 1;\n    powers[0] = 1;\n\n    for (int i = 1; i < 129; i++) {\n        if (powers[i-1] > UINT64_MAX / n) {\n            break;\n        }\n        powers[i] = powers[i-1] * n;\n        num_exponents++;\n        if (powers[i] >= x) {\n            break;\n        }\n    }\n\n    size_t vl;\n    for (int start = 0; start < num_exponents; ) {\n        vl = __riscv_vsetvl_e64m1(num_exponents - start);\n        vuint64m1_t vec_p = __riscv_vle64_v_u64m1(powers + start, vl);\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(vec_p, x, vl);\n        if (__riscv_vfirst_m_b64(mask, vl) >= 0) {\n            return true;\n        }\n        start += vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 0) {\n        return x == 0;\n    }\n    if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    \n    size_t vlmax = vsetvlmax_e64m1();\n    uint64_t k = 0;\n    while (k <= 64) {\n        size_t vl = (64 - k + 1) < vlmax ? (64 - k + 1) : vlmax;\n        \n        uint64_t base;\n        if (k == 0) {\n            base = 1;\n        } else {\n            base = 1;\n            uint64_t i = 0;\n            for (; i < k; ++i) {\n                if (base > UINT64_MAX / n) {\n                    base = UINT64_MAX;\n                    break;\n                }\n                base *= n;\n            }\n        }\n        \n        uint64_t multipliers[vl];\n        multipliers[0] = 1;\n        size_t actual_vl = vl;\n        for (size_t i = 1; i < vl; ++i) {\n            if (multipliers[i-1] > UINT64_MAX / n) {\n                actual_vl = i;\n                break;\n            }\n            multipliers[i] = multipliers[i-1] * n;\n        }\n        if (actual_vl < vl) {\n            vl = actual_vl;\n        }\n        \n        vuint64m1_t v_base = vmv_v_x_u64m1(base, vl);\n        vuint64m1_t v_mult = vle64_v_u64m1(multipliers, vl);\n        vuint64m1_t v_power = vmul_vv_u64m1(v_base, v_mult, vl);\n        \n        vuint64m1_t v_x = vmv_v_x_u64m1(x, vl);\n        vbool64_t mask = vmseq_vv_u64m1_b64(v_power, v_x, vl);\n        if (vfirst_m_b64(mask, vl) >= 0) {\n            return true;\n        }\n        \n        if (base > x || base == UINT64_MAX) {\n            break;\n        }\n        \n        k += vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 0) {\n        return (x == 0);\n    }\n    if (n == 1) {\n        return (x == 1);\n    }\n    if (x == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n\n    uint64_t low = 1, high = 64;\n    uint64_t candidate1 = 0;\n    while (low <= high) {\n        uint64_t mid = (low + high) / 2;\n        uint64_t mid_val = 1;\n        uint64_t current_base = n;\n        uint64_t e = mid;\n        int overflow = 0;\n        while (e) {\n            if (e & 1) {\n                if (mid_val > UINT64_MAX / current_base) {\n                    overflow = 1;\n                    break;\n                }\n                mid_val *= current_base;\n            }\n            e >>= 1;\n            if (e) {\n                if (current_base > UINT64_MAX / current_base) {\n                    overflow = 1;\n                    break;\n                }\n                current_base *= current_base;\n            }\n        }\n        if (overflow) {\n            high = mid - 1;\n        } else if (mid_val <= x) {\n            candidate1 = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    uint64_t exponents[2] = {candidate1, candidate1 + 1};\n    uint64_t results[2];\n    size_t vl = vsetvl_e64m1(2);\n    vuint64m1_t exp_vec = __riscv_vle64_v_u64m1(exponents, vl);\n    vuint64m1_t res_vec = __riscv_vmv_v_x_u64m1(1, vl);\n    uint64_t base = n;\n\n    uint64_t max_exp = candidate1 + 1;\n    int bits = 0;\n    while (max_exp) {\n        bits++;\n        max_exp >>= 1;\n    }\n\n    for (int i = 0; i < bits; i++) {\n        vuint64m1_t shifted = __riscv_vsrl_vx_u64m1(exp_vec, i, vl);\n        vuint64m1_t bit = __riscv_vand_vx_u64m1(shifted, 1, vl);\n        vuint64m1_t multiplier = __riscv_vadd_vx_u64m1(__riscv_vmul_vx_u64m1(bit, base - 1, vl), 1, vl);\n        res_vec = __riscv_vmul_vv_u64m1(res_vec, multiplier, vl);\n        base = base * base;\n    }\n\n    __riscv_vse64_v_u64m1(results, res_vec, vl);\n\n    if (results[0] == x || results[1] == x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 0) {\n        return n == 0;\n    }\n    if (x == 1) {\n        return n != 0;\n    }\n    if (n == 0) {\n        return false;\n    }\n    if (n == 1) {\n        return false;\n    }\n\n    uint64_t min_exp = 1;\n    uint64_t max_exp = 64;\n    uint64_t base = n;\n\n    for (uint64_t exp_start = min_exp; exp_start <= max_exp; ) {\n        if (base == 0 || base > x) {\n            break;\n        }\n\n        size_t max_vl = vsetvl_e64m1(max_exp - exp_start + 1);\n        uint64_t multipliers[max_vl];\n        multipliers[0] = 1;\n        size_t actual_vl = 1;\n        for (size_t i = 1; i < max_vl; i++) {\n            if (multipliers[i-1] > UINT64_MAX / n) {\n                break;\n            }\n            multipliers[i] = multipliers[i-1] * n;\n            actual_vl++;\n        }\n\n        size_t vl = vsetvl_e64m1(actual_vl);\n        vuint64m1_t v_mult = vle64_v_u64m1(multipliers, vl);\n        vuint64m1_t v_power = vmul_vx_u64m1(v_mult, base, vl);\n        vbool64_t mask = vmseq_vx_u64m1_b64(v_power, x, vl);\n\n        if (vfirst_m_b64(mask, vl) >= 0) {\n            return true;\n        }\n\n        base = base * multipliers[actual_vl-1] * n;\n        exp_start += actual_vl;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 0) {\n        return (x == 0) || (x == 1);\n    }\n    if (n == 1) {\n        return (x == 1);\n    }\n    if (x == 1) {\n        return true;\n    }\n    if (x == 0) {\n        return false;\n    }\n\n    uint64_t temp = n;\n    uint64_t max_k = 1;\n    while (temp <= x / n) {\n        temp *= n;\n        max_k++;\n    }\n\n    uint64_t powers[64];\n    int count = 0;\n    uint64_t current = n;\n    for (uint64_t k = 1; k <= max_k; k++) {\n        powers[count++] = current;\n        if (k < max_k) {\n            current *= n;\n        }\n    }\n\n    size_t vl;\n    for (int j = 0; j < count; ) {\n        vl = vsetvl_e64m1(count - j);\n        vuint64m1_t v_chunk = vle64_v_u64m1(&powers[j], vl);\n        vbool64_t mask = vmseq_vx_u64m1_b64(v_chunk, x, vl);\n        if (vfirst_m_b64(mask, vl) >= 0) {\n            return true;\n        }\n        j += vl;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    int count = 0;\n    size_t n = num.size();\n    const char* s = num.c_str();\n    size_t vl;\n\n    for (size_t avl = n; avl > 0; ) {\n        vl = __riscv_vsetvl_e8m8(avl);\n        vuint8m8_t v_digit = __riscv_vle8_v_u8m8((const uint8_t*)s, vl);\n\n        vbool1_t mask = __riscv_vmseq_vx_u8m8(v_digit, '2', vl);\n        vbool1_t mask3 = __riscv_vmseq_vx_u8m8(v_digit, '3', vl);\n        mask = __riscv_vmor_mm_b1(mask, mask3, vl);\n        vbool1_t mask5 = __riscv_vmseq_vx_u8m8(v_digit, '5', vl);\n        mask = __riscv_vmor_mm_b1(mask, mask5, vl);\n        vbool1_t mask7 = __riscv_vmseq_vx_u8m8(v_digit, '7', vl);\n        mask = __riscv_vmor_mm_b1(mask, mask7, vl);\n        vbool1_t maskB = __riscv_vmseq_vx_u8m8(v_digit, 'B', vl);\n        mask = __riscv_vmor_mm_b1(mask, maskB, vl);\n        vbool1_t maskD = __riscv_vmseq_vx_u8m8(v_digit, 'D', vl);\n        mask = __riscv_vmor_mm_b1(mask, maskD, vl);\n\n        count += __riscv_vcpop_m_b1(mask, vl);\n\n        s += vl;\n        avl -= vl;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    if (num.empty()) \n        return 0;\n\n    int count = 0;\n    size_t n = num.size();\n    const char *str = num.c_str();\n    const char primes[6] = {'2','3','5','7','B','D'};\n    size_t vl;\n\n    for (size_t avl = n; avl > 0; avl -= vl, str += vl) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vint8m1_t v_str = __riscv_vle8_v_i8m1((const int8_t*)str, vl);\n        vbool8_t mask = __riscv_vmclr_m_b8(vl);\n\n        for (int i = 0; i < 6; ++i) {\n            vbool8_t temp_mask = __riscv_vmseq_vx_i8m1_b8(v_str, primes[i], vl);\n            mask = __riscv_vmor_mm_b8(mask, temp_mask, vl);\n        }\n\n        count += __riscv_vpopc_m_b8(mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint hex_key_simd(const std::string & num) {\n    if (num.empty()) {\n        return 0;\n    }\n    size_t n = num.size();\n    const char *ptr = num.c_str();\n    int count = 0;\n    size_t vl;\n    for (size_t avl = n; avl > 0; ) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vint8m1_t v = __riscv_vle8_v_i8m1((const signed char*)ptr, vl);\n        vbool1_t mask = __riscv_vmseq_vx_i8m1_b1(v, '2', vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_i8m1_b1(v, '3', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_i8m1_b1(v, '5', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_i8m1_b1(v, '7', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_i8m1_b1(v, 'B', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_i8m1_b1(v, 'D', vl), vl);\n        count += __riscv_vpopc_m_b1(mask, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint hex_key_simd(const std::string & num) {\n    if (num.empty()) \n        return 0;\n    \n    const char* ptr = num.c_str();\n    size_t n = num.size();\n    size_t vl;\n    int count = 0;\n    \n    for (size_t avl = n; avl > 0; avl -= vl, ptr += vl) {\n        vl = vsetvl_e8m1(avl);\n        vuint8m1_t v_chars = vle8_v_u8m1((const uint8_t*)ptr, vl);\n        \n        vbool8_t m_prime = vmseq_vx_u8m1_b8(v_chars, '2', vl);\n        m_prime = vmor_mm_b8(m_prime, vmseq_vx_u8m1_b8(v_chars, '3', vl), vl);\n        m_prime = vmor_mm_b8(m_prime, vmseq_vx_u8m1_b8(v_chars, '5', vl), vl);\n        m_prime = vmor_mm_b8(m_prime, vmseq_vx_u8m1_b8(v_chars, '7', vl), vl);\n        m_prime = vmor_mm_b8(m_prime, vmseq_vx_u8m1_b8(v_chars, 'B', vl), vl);\n        m_prime = vmor_mm_b8(m_prime, vmseq_vx_u8m1_b8(v_chars, 'D', vl), vl);\n        \n        count += vcpop_m_b8(m_prime, vl);\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nint hex_key_simd(const std::string & num) {\n    if (num.empty()) return 0;\n    int count = 0;\n    size_t n = num.size();\n    const uint8_t *ptr = (const uint8_t *)num.data();\n\n    while (n > 0) {\n        size_t vl = vsetvl_e8m1(n);\n        vuint8m1_t v = vle8_v_u8m1(ptr, vl);\n        vbool8_t mask = vmseq_vx_u8m1_b8(v, '2', vl);\n        mask = vmor_mm_b8(mask, vmseq_vx_u8m1_b8(v, '3', vl), vl);\n        mask = vmor_mm_b8(mask, vmseq_vx_u8m1_b8(v, '5', vl), vl);\n        mask = vmor_mm_b8(mask, vmseq_vx_u8m1_b8(v, '7', vl), vl);\n        mask = vmor_mm_b8(mask, vmseq_vx_u8m1_b8(v, 'B', vl), vl);\n        mask = vmor_mm_b8(mask, vmseq_vx_u8m1_b8(v, 'D', vl), vl);\n        count += vcpop_m_b8(mask, vl);\n        ptr += vl;\n        n -= vl;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string & s) {\n    size_t n = s.size();\n    if (n < 3) \n        return false;\n\n    size_t avl = n - 2;\n    size_t vl;\n    for (size_t i = 0; i < avl; i += vl) {\n        vl = __riscv_vsetvl_e8m1(avl - i);\n        vuint8m1_t v0 = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + i), vl);\n        vuint8m1_t v1 = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + i + 1), vl);\n        vuint8m1_t v2 = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + i + 2), vl);\n\n        vbool8_t cmp0 = __riscv_vmsne_vv_u8m1_b8(v0, v1, vl);\n        vbool8_t cmp1 = __riscv_vmsne_vv_u8m1_b8(v0, v2, vl);\n        vbool8_t cmp2 = __riscv_vmsne_vv_u8m1_b8(v1, v2, vl);\n\n        vbool8_t res = __riscv_vmand_mm_b8(cmp0, cmp1, vl);\n        res = __riscv_vmand_mm_b8(res, cmp2, vl);\n\n        size_t cnt = __riscv_vcpop_m_b8(res, vl);\n        if (cnt != vl) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string & s) {\n    size_t n = s.size();\n    if (n < 3) {\n        return false;\n    }\n    size_t n3 = n - 2;\n    const uint8_t *str = (const uint8_t*)s.data();\n    size_t vl;\n    \n    for (size_t i = 0; i < n3; ) {\n        vl = __riscv_vsetvl_e8m8(n3 - i);\n        vuint8m8_t v0 = __riscv_vle8_v_u8m8(str + i, vl);\n        vuint8m8_t v1 = __riscv_vle8_v_u8m8(str + i + 1, vl);\n        vuint8m8_t v2 = __riscv_vle8_v_u8m8(str + i + 2, vl);\n        \n        vbool1_t mask01 = __riscv_vmseq_vv_u8m8_b1(v0, v1, vl);\n        vbool1_t mask02 = __riscv_vmseq_vv_u8m8_b1(v0, v2, vl);\n        vbool1_t mask12 = __riscv_vmseq_vv_u8m8_b1(v1, v2, vl);\n        \n        vbool1_t or_mask = __riscv_vmor_mm_b1(mask01, mask02, vl);\n        vbool1_t fail_mask = __riscv_vmor_mm_b1(or_mask, mask12, vl);\n        \n        if (__riscv_vfirst_m_b1(fail_mask, vl) != -1) {\n            return false;\n        }\n        \n        i += vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string & s) {\n    if (s.size() < 3) \n        return false;\n    \n    size_t n = s.size() - 2;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        vuint8m1_t v0 = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + i), vl);\n        vuint8m1_t v1 = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + i + 1), vl);\n        vuint8m1_t v2 = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + i + 2), vl);\n        \n        vbool8_t mask1 = __riscv_vmseq_vv_u8m1_b8(v0, v1, vl);\n        vbool8_t mask2 = __riscv_vmseq_vv_u8m1_b8(v0, v2, vl);\n        vbool8_t mask3 = __riscv_vmseq_vv_u8m1_b8(v1, v2, vl);\n        \n        vbool8_t mask_any = __riscv_vmor_mm_b8(mask1, mask2, vl);\n        mask_any = __riscv_vmor_mm_b8(mask_any, mask3, vl);\n        \n        if (__riscv_vfirst_m_b8(mask_any, vl) != -1) \n            return false;\n        \n        i += vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string & s) {\n    if (s.size() < 3) {\n        return false;\n    }\n    size_t n = s.size();\n    size_t num_triples = n - 2;\n    const uint8_t *data = (const uint8_t *)s.data();\n    size_t avl = num_triples;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vuint8m1_t v1 = __riscv_vle8_v_u8m1(data, vl);\n        vuint8m1_t v2 = __riscv_vle8_v_u8m1(data + 1, vl);\n        vuint8m1_t v3 = __riscv_vle8_v_u8m1(data + 2, vl);\n\n        vbool8_t cmp1 = __riscv_vmsne_vv_u8m1_b8(v1, v2, vl);\n        vbool8_t cmp2 = __riscv_vmsne_vv_u8m1_b8(v1, v3, vl);\n        vbool8_t cmp3 = __riscv_vmsne_vv_u8m1_b8(v2, v3, vl);\n\n        vbool8_t all_distinct = __riscv_vmand_mm_b8(cmp1, cmp2, vl);\n        all_distinct = __riscv_vmand_mm_b8(all_distinct, cmp3, vl);\n\n        vbool8_t not_all_distinct = __riscv_vmnot_m_b8(all_distinct, vl);\n        int first_failure = __riscv_vfirst_m_b8(not_all_distinct, vl);\n        if (first_failure != -1) {\n            return false;\n        }\n\n        data += vl;\n        avl -= vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nbool is_happy_simd(const std::string & s) {\n    size_t n = s.size();\n    if (n < 3) {\n        return false;\n    }\n    const char *str = s.c_str();\n    size_t n_triplets = n - 2;\n    size_t avl = n_triplets;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m8(avl);\n        vuint8m8_t v0 = vle8_v_u8m8((uint8_t*)str, vl);\n        vuint8m8_t v1 = vle8_v_u8m8((uint8_t*)(str + 1), vl);\n        vuint8m8_t v2 = vle8_v_u8m8((uint8_t*)(str + 2), vl);\n\n        vbool1_t mask1 = vmseq_vv_u8m8_b1(v0, v1, vl);\n        vbool1_t mask2 = vmseq_vv_u8m8_b1(v1, v2, vl);\n        vbool1_t mask3 = vmseq_vv_u8m8_b1(v0, v2, vl);\n\n        vbool1_t mask_any = vmor_mm_b1(mask1, mask2, vl);\n        mask_any = vmor_mm_b1(mask_any, mask3, vl);\n\n        if (vfirst_m_b1(mask_any, vl) >= 0) {\n            return false;\n        }\n\n        str += vl;\n        avl -= vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cmath>\n#include <string>\n\nbool prime_length_simd(const std::string & str) {\n    size_t n = str.size();\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\n    size_t max_divisor = static_cast<size_t>(std::sqrt(n));\n    if (max_divisor % 2 == 0 && max_divisor > 0) {\n        max_divisor--;\n    }\n    if (max_divisor < 3) {\n        return true;\n    }\n\n    size_t divisor = 3;\n    size_t vl;\n    for (; divisor <= max_divisor; ) {\n        size_t remaining = ((max_divisor - divisor) / 2) + 1;\n        vl = __riscv_vsetvl_e64m1(remaining);\n        \n        vuint64m1_t vid = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t step = __riscv_vsll_vx_u64m1(vid, 1, vl);\n        vuint64m1_t v_div = __riscv_vadd_vx_u64m1(step, divisor, vl);\n        \n        for (size_t i = 0; i < vl; i++) {\n            vuint64m1_t v_d = __riscv_vrgather_vx_u64m1(v_div, i, vl);\n            size_t d = __riscv_vmv_x_s_u64m1_u64(v_d);\n            if (n % d == 0) {\n                return false;\n            }\n        }\n        divisor += 2 * vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool prime_length_simd(const std::string & str) {\n    uint32_t n = (uint32_t)str.size();\n\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n\n    uint32_t max_divisor = 1;\n    while ((uint64_t)max_divisor * max_divisor <= n) {\n        max_divisor++;\n    }\n    max_divisor--;\n\n    if (max_divisor < 3) {\n        return true;\n    }\n\n    uint32_t count = ((max_divisor - 3) >> 1) + 1;\n    uint32_t current = 3;\n    uint32_t remaining = count;\n\n    while (remaining > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(remaining);\n\n        vuint32m1_t vidx = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t step = __riscv_vsll_vx_u32m1(vidx, 1, vl);\n        vuint32m1_t divisors = __riscv_vadd_vx_u32m1(step, current, vl);\n\n        vuint32m1_t n_vec = __riscv_vmv_v_x_u32m1(n, vl);\n        vuint32m1_t rem = __riscv_vremu_vv_u32m1(n_vec, divisors, vl);\n\n        vbool32_t mask = __riscv_vmseq_vx_u32m1_b32(rem, 0, vl);\n        if (__riscv_vfirst_m_b32(mask, vl) >= 0) {\n            return false;\n        }\n\n        current += 2 * vl;\n        remaining -= vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cmath>\n\nbool prime_length_simd(const std::string & str) {\n    size_t n = str.length();\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n\n    size_t max_divisor = (size_t)std::sqrt(n);\n    size_t base_div = 3;\n    size_t vl;\n\n    while (base_div <= max_divisor) {\n        size_t num_candidates = (max_divisor - base_div) / 2 + 1;\n        vl = __riscv_vsetvl_e64m8(num_candidates);\n        \n        vuint64m8_t index_vec = __riscv_vid_v_u64m8(vl);\n        vuint64m8_t step_vec = __riscv_vsll_vx_u64m8(index_vec, 1, vl);\n        vuint64m8_t divisor_vec = __riscv_vadd_vx_u64m8(step_vec, base_div, vl);\n        \n        vuint64m8_t n_vec = __riscv_vmv_v_x_u64m8(n, vl);\n        vuint64m8_t rem_vec = __riscv_vremu_vv_u64m8(n_vec, divisor_vec, vl);\n        \n        vbool8_t mask = __riscv_vmseq_vx_u64m8(rem_vec, 0, vl);\n        if (__riscv_vfirst_m_b8(mask, vl) >= 0) {\n            return false;\n        }\n        \n        base_div += 2 * vl;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool prime_length_simd(const std::string & str) {\n    size_t n = str.size();\n\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    if (n == 3) {\n        return true;\n    }\n\n    size_t max_div = 2;\n    while (max_div * max_div <= n) {\n        max_div++;\n    }\n    max_div--;\n\n    size_t base = 3;\n    size_t vl;\n\n    while (base <= max_div) {\n        size_t num_candidates = (max_div - base) / 2 + 1;\n        vl = __riscv_vsetvl_e32m1(num_candidates);\n\n        vuint32m1_t v_index = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t v_step = __riscv_vsll_vx_u32m1(v_index, 1, vl);\n        vuint32m1_t v_div = __riscv_vadd_vx_u32m1(v_step, base, vl);\n\n        for (size_t i = 0; i < vl; i++) {\n            vuint32m1_t v_slice = __riscv_vslidedown_vx_u32m1(v_div, i);\n            uint32_t d = __riscv_vmv_x_s_u32m1_u32(v_slice);\n            if (d > max_div) {\n                break;\n            }\n            if (n % d == 0) {\n                return false;\n            }\n        }\n\n        base += 2 * vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool prime_length_simd(const std::string & str) {\n    size_t n_val = str.size();\n\n    if (n_val < 2) {\n        return false;\n    }\n    if (n_val == 2) {\n        return true;\n    }\n    if (n_val % 2 == 0) {\n        return false;\n    }\n\n    size_t low = 1;\n    size_t high = n_val / 2 + 1;\n    while (low <= high) {\n        size_t mid = low + (high - low) / 2;\n        if (mid > n_val / mid) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    size_t limit = high;\n\n    if (limit < 3) {\n        return true;\n    }\n\n    size_t k = 3;\n    size_t vl;\n    while (k <= limit) {\n        size_t num_divisors = (limit - k) / 2 + 1;\n        vl = __riscv_vsetvl_e64m1(num_divisors);\n\n        vuint64m1_t v_idx = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t v_step = __riscv_vsll_vx_u64m1(v_idx, 1, vl);\n        vuint64m1_t v_div = __riscv_vadd_vx_u64m1(v_step, k, vl);\n        vuint64m1_t v_n = __riscv_vmv_v_x_u64m1(n_val, vl);\n        vuint64m1_t v_rem = __riscv_vremu_vv_u64m1(v_n, v_div, vl);\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(v_rem, 0, vl);\n        if (__riscv_vfirst_m_b64(mask, vl) >= 0) {\n            return false;\n        }\n\n        k += 2 * vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <string>\n#include <cstdint>\n\nstd::string solve_simd(uint64_t N) {\n    if (N == 0) {\n        return \"0\";\n    }\n    std::string s = std::to_string(N);\n    int n = s.size();\n    size_t vl = __riscv_vsetvl_e8m1(n);\n    vuint8m1_t v_digits = __riscv_vle8_v_u8m1((const uint8_t*)s.c_str(), vl);\n    vuint8m1_t v_zero_char = __riscv_vmv_v_x_u8m1('0', vl);\n    vuint8m1_t v_num = __riscv_vsub_vv_u8m1(v_digits, v_zero_char, vl);\n    vuint16m1_t v_sum_zero = __riscv_vmv_v_x_u16m1(0, 1);\n    vuint16m1_t v_total = __riscv_vwredsumu_vs_u8m1_u16m1(v_num, v_sum_zero, vl);\n    uint16_t total = __riscv_vmv_x_s_u16m1_u16(v_total);\n    if (total == 0) {\n        return \"0\";\n    }\n    std::string bin_str;\n    while (total) {\n        bin_str = (char)('0' + (total & 1)) + bin_str;\n        total >>= 1;\n    }\n    return bin_str;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    if (N == 0) {\n        return \"0\";\n    }\n    std::string num_str = std::to_string(N);\n    size_t len = num_str.length();\n    size_t avl = len;\n\n    vuint8m1_t vec_chars = __riscv_vle8_v_u8m1((const uint8_t*)num_str.c_str(), avl);\n    vuint8m1_t vec_zero = __riscv_vmv_v_x_u8m1('0', avl);\n    vuint8m1_t vec_digit_vals = __riscv_vsub_vv_u8m1(vec_chars, vec_zero, avl);\n\n    vuint8m1_t red = __riscv_vmv_v_x_u8m1(0, 1);\n    vuint8m1_t sum_vec = __riscv_vredsum_vs_u8m1_u8m1(vec_digit_vals, red, avl);\n    uint8_t total = __riscv_vmv_x_s_u8m1(sum_vec);\n\n    if (total == 0) {\n        return \"0\";\n    }\n\n    std::string bin_str;\n    while (total) {\n        bin_str = char('0' + (total & 1)) + bin_str;\n        total >>= 1;\n    }\n    return bin_str;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```cpp\n#include <string>\n#include <cstdint>\n#include <riscv_vector.h>\n\nstd::string solve_simd(uint64_t N) {\n    std::string str = std::to_string(N);\n    size_t total_len = str.length();\n    uint16_t total_sum = 0;\n\n    size_t vl;\n    for (size_t pos = 0; pos < total_len; pos += vl) {\n        vl = __riscv_vsetvl_e8m1(total_len - pos);\n        vuint8m1_t v_digits = __riscv_vle8_v_u8m1((const unsigned char*)(str.c_str() + pos), vl);\n        vuint8m1_t v_ascii_zero = __riscv_vmv_v_x_u8m1('0', vl);\n        vuint8m1_t v_vals = __riscv_vsub_vv_u8m1(v_digits, v_ascii_zero, vl);\n\n        vuint16m1_t v_sum_zero = __riscv_vmv_v_x_u16m1(0, 1);\n        vuint16m1_t v_partial_sum = __riscv_vwredsumu_vs_u8m1_u16m1(v_vals, v_sum_zero, vl);\n        uint16_t partial_sum = __riscv_vmv_x_s_u16m1_u16(v_partial_sum);\n        total_sum += partial_sum;\n    }\n\n    if (total_sum == 0) {\n        return \"0\";\n    }\n\n    std::string bin_str;\n    while (total_sum) {\n        bin_str = (char)((total_sum & 1) + '0') + bin_str;\n        total_sum >>= 1;\n    }\n\n    return bin_str;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    if (N == 0) {\n        return \"0\";\n    }\n    \n    char digits[21];\n    int len = 0;\n    uint64_t num = N;\n    while (num) {\n        digits[len++] = '0' + (num % 10);\n        num /= 10;\n    }\n    \n    size_t vl = len;\n    vuint8m1_t char_vec = vle8_v_u8m1((uint8_t*)digits, vl);\n    vuint8m1_t zero_vec = vmv_v_x_u8m1('0', vl);\n    vuint8m1_t digit_vec = vsub_vv_u8m1(char_vec, zero_vec, vl);\n    \n    vuint32m1_t scalar = vmv_v_x_u32m1(0, 1);\n    vuint32m1_t reduced = vwredsum_vs_u8m1_u32m1(digit_vec, scalar, vl);\n    uint32_t total = vmv_x_s_u32m1_u32(reduced);\n    \n    if (total == 0) {\n        return \"0\";\n    }\n    \n    uint32_t t = total;\n    int num_bits = 0;\n    while (t) {\n        num_bits++;\n        t >>= 1;\n    }\n    vl = num_bits;\n    \n    vuint8m1_t vid = vid_v_u8m1(vl);\n    vuint8m1_t ridx = vrsub_vx_u8m1(vid, (uint8_t)(vl - 1), vl);\n    vuint8m1_t total_vec = vmv_v_x_u8m1(total, vl);\n    vuint8m1_t shifted = vsrl_vv_u8m1(total_vec, ridx, vl);\n    vuint8m1_t masked = vand_vx_u8m1(shifted, 1, vl);\n    vuint8m1_t bin_char_vec = vadd_vx_u8m1(masked, '0', vl);\n    \n    char buffer[32];\n    vse8_v_u8m1((uint8_t*)buffer, bin_char_vec, vl);\n    buffer[vl] = '\\0';\n    \n    return std::string(buffer);\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cstdio>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    char buf[21];\n    int len = sprintf(buf, \"%lu\", N);\n    size_t avl = static_cast<size_t>(len);\n    \n    vuint8m1_t vec_digits = vle8_v_u8m1((uint8_t*)buf, avl);\n    vuint8m1_t vec_zero = vmv_v_x_u8m1('0', avl);\n    vuint8m1_t vec_nums = vsub_vv_u8m1(vec_digits, vec_zero, avl);\n    \n    vuint16m1_t vec_initial = vmv_v_x_u16m1(0, 1);\n    vuint16m1_t vec_sum = vwredsumu_vs_u8m1_u16m1(vec_nums, vec_initial, avl);\n    uint16_t total = vmv_x_s_u16m1_u16(vec_sum);\n    \n    if (total == 0) {\n        return \"0\";\n    }\n    \n    char bin_buf[16];\n    int idx = 0;\n    uint16_t temp = total;\n    while (temp) {\n        bin_buf[idx++] = '0' + (temp & 1);\n        temp >>= 1;\n    }\n    for (int i = 0; i < idx/2; ++i) {\n        char tmp = bin_buf[i];\n        bin_buf[i] = bin_buf[idx - 1 - i];\n        bin_buf[idx - 1 - i] = tmp;\n    }\n    bin_buf[idx] = '\\0';\n    return std::string(bin_buf);\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_simd(std::vector<int> lst) {\n    int total = 0;\n    size_t avl = lst.size();\n    const int32_t *ptr = lst.data();\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vle32_v_i32m1(ptr, vl);\n        \n        size_t base_index = (size_t)(ptr - lst.data());\n        uint32_t base_parity = base_index & 1;\n        vuint32m1_t j_vec = vid_v_u32m1(vl);\n        vuint32m1_t j_parity = vand_vx_u32m1(j_vec, 1, vl);\n        vuint32m1_t base_parity_vec = vmv_v_x_u32m1(base_parity, vl);\n        vuint32m1_t total_parity = vxor_vv_u32m1(base_parity_vec, j_parity, vl);\n        vbool32_t mask_odd = vmseq_vx_u32m1_b32(total_parity, 1, vl);\n        \n        vint32m1_t vec_parity = vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask_even = vmseq_vx_i32m1_b32(vec_parity, 0, vl);\n        \n        vbool32_t mask = vmand_mm(mask_odd, mask_even, vl);\n        \n        vint32m1_t v_zero = vmv_v_x_i32m1(0, vl);\n        vint32m1_t vd = vredsum_vs_i32m1_i32m1_m(mask, vec, v_zero, vl);\n        total += vmv_x_s_i32m1_i32(vd);\n        \n        avl -= vl;\n        ptr += vl;\n    }\n    \n    return total;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_simd(std::vector<int> lst) {\n    long n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n    int *ptr = lst.data();\n    size_t vl;\n    vint32m1_t accum = vmv_v_x_i32m1(0, 1);\n    for (size_t avl = n; avl > 0; ) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        long base_index = ptr - lst.data();\n        vint32m1_t vec = __riscv_vle32_v_i32m1(ptr, vl);\n        ptr += vl;\n        avl -= vl;\n\n        int base_parity = base_index & 1;\n        vuint32m1_t vid = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t local_parity = __riscv_vand_vx_u32m1(vid, 1, vl);\n        vbool32_t mask_idx = __riscv_vmseq_vx_u32m1_b32(local_parity, 1 - base_parity, vl);\n\n        vint32m1_t vec_parity = __riscv_vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask_even = __riscv_vmseq_vx_i32m1_b32(vec_parity, 0, vl);\n\n        vbool32_t mask = __riscv_vmand_mm_b32(mask_idx, mask_even, vl);\n\n        accum = __riscv_vredsum_vs_i32m1_i32m1_m(mask, vec, accum, vl);\n    }\n    int result = __riscv_vmv_x_s_i32m1_i32(accum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_simd(std::vector<int> lst) {\n    int n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n    int sum = 0;\n    size_t avl = n;\n    size_t vl;\n    for (; (vl = vsetvl_e32m1(avl)) > 0; avl -= vl) {\n        size_t base = n - avl;\n        vint32m1_t vec = vle32_v_i32m1(lst.data() + base, vl);\n        vuint32m1_t vidx = vid_v_u32m1(vl);\n        vuint32m1_t abs_idx = vadd_vx_u32m1(vidx, base, vl);\n        vuint32m1_t idx_mod = vand_vx_u32m1(abs_idx, 1, vl);\n        vbool32_t mask_idx = vmseq_vx_u32m1_b32(idx_mod, 1, vl);\n        vint32m1_t vec_mod = vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask_even = vmseq_vx_i32m1_b32(vec_mod, 0, vl);\n        vbool32_t mask = vmand_mm_b32(mask_idx, mask_even, vl);\n        vint32m1_t selected = vmerge_vvm_i32m1(mask, vmv_v_x_i32m1(0, vl), vec, vl);\n        vint32m1_t v_initial = vmv_v_x_i32m1(sum, 1);\n        vint32m1_t v_result = vredsum_vs_i32m1_i32m1(selected, v_initial, vl);\n        sum = vmv_x_s_i32m1_i32(v_result);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    const int* ptr = lst.data();\n    size_t avl = n;\n    int total = 0;\n    size_t i = 0;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vuint32m1_t vidx = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t global_idx = __riscv_vadd_vx_u32m1(vidx, i, vl);\n        vuint32m1_t and_idx = __riscv_vand_vx_u32m1(global_idx, 1, vl);\n        vbool32_t odd_mask = __riscv_vmseq_vx_u32m1_b32(and_idx, 1, vl);\n        vint32m1_t data = __riscv_vle32_v_i32m1(ptr, vl);\n        vint32m1_t and_data = __riscv_vand_vx_i32m1(data, 1, vl);\n        vbool32_t even_mask = __riscv_vmseq_vx_i32m1_b32(and_data, 0, vl);\n        vbool32_t mask = __riscv_vmand_mm_b32(odd_mask, even_mask, vl);\n        vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t v_sum = __riscv_vredsum_vs_i32m1_i32m1_m(mask, data, v_zero, vl);\n        int seg_sum = __riscv_vmv_x_s_i32m1_i32(v_sum);\n        total += seg_sum;\n        ptr += vl;\n        i += vl;\n        avl -= vl;\n    }\n\n    return total;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    vint32m1_t v_sum = vmv_v_x_i32m1(0, 1);\n    size_t vl;\n    \n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&lst[i], vl);\n        \n        vuint32m1_t vid = vid_v_u32m1(vl);\n        vuint32m1_t vid_mod = vand_vx_u32m1(vid, 1, vl);\n        uint32_t base_lsb = i & 1;\n        vbool32_t mask_odd = vmseq_vx_u32m1_b32(vid_mod, base_lsb ^ 1, vl);\n        \n        vint32m1_t v_lsb = vand_vx_i32m1(v, 1, vl);\n        vbool32_t mask_even = vmseq_vx_i32m1_b32(v_lsb, 0, vl);\n        \n        vbool32_t mask = vmand_mm_b32(mask_odd, mask_even, vl);\n        v_sum = vredsum_vs_i32m1_i32m1_m(mask, v, v_sum, vl);\n        \n        i += vl;\n    }\n    \n    int result = vmv_x_s_i32m1_i32(v_sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s){\n    size_t n = s.size();\n    std::string res(n, 0);\n    if (n == 0) return res;\n    \n    const char *src = s.data();\n    char *dst = &res[0];\n    \n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = vsetvl_e8m8(avl);\n        vuint8m8_t v_src = vle8_v_u8m8((const uint8_t*)src, vl);\n        vuint8m8_t v_offset = vsub_vx_u8m8(v_src, 'a', vl);\n        v_offset = vadd_vx_u8m8(v_offset, 4, vl);\n        vbool1_t mask = vmsgtu_vx_u8m8_b1(v_offset, 25, vl);\n        vuint8m8_t v_26 = vmv_v_x_u8m8(26, vl);\n        v_offset = vsub_vv_u8m8_m(mask, v_offset, v_offset, v_26, vl);\n        vuint8m8_t v_dst = vadd_vx_u8m8(v_offset, 'a', vl);\n        vse8_v_u8m8((uint8_t*)dst, v_dst, vl);\n        src += vl;\n        dst += vl;\n    }\n    \n    return res;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s) {\n    size_t n = s.size();\n    std::string res(n, 0);\n    const char *src = s.data();\n    char *dst = res.data();\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = vsetvl_e8m1(avl);\n        vint8m1_t v_ch = vle8_v_i8m1(src, vl);\n        src += vl;\n        \n        vint8m1_t v_offset = vsub_vx_i8m1(v_ch, 'a', vl);\n        vint8m1_t v_rot = vadd_vx_i8m1(v_offset, 4, vl);\n        vbool8_t mask = vmsgt_vx_i8m1_b8(v_rot, 25, vl);\n        v_rot = vsub_vx_i8m1_m(mask, v_rot, v_rot, 26, vl);\n        vint8m1_t v_result = vadd_vx_i8m1(v_rot, 'a', vl);\n        \n        vse8_v_i8m1(dst, v_result, vl);\n        dst += vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s) {\n    size_t n = s.size();\n    std::string res(n, 0);\n    const uint8_t *src = (const uint8_t*)s.data();\n    uint8_t *dst = (uint8_t*)res.data();\n\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m8(avl);\n        vuint8m8_t v_data = vle8_v_u8m8(src, vl);\n\n        vbool1_t mask_lower = vmand_mm_b1(\n            vmsgeu_vx_u8m8_b1(v_data, 'a', vl),\n            vmsleu_vx_u8m8_b1(v_data, 'z', vl),\n            vl\n        );\n        vbool1_t mask_upper = vmand_mm_b1(\n            vmsgeu_vx_u8m8_b1(v_data, 'A', vl),\n            vmsleu_vx_u8m8_b1(v_data, 'Z', vl),\n            vl\n        );\n        vbool1_t mask_letter = vmor_mm_b1(mask_lower, mask_upper, vl);\n\n        vuint8m8_t v_temp = vadd_vx_u8m8_m(mask_letter, v_data, v_data, 4, vl);\n\n        vbool1_t wrapped_lower = vmand_mm_b1(\n            mask_lower,\n            vmsgtu_vx_u8m8_b1(v_temp, 'z', vl),\n            vl\n        );\n        vbool1_t wrapped_upper = vmand_mm_b1(\n            mask_upper,\n            vmsgtu_vx_u8m8_b1(v_temp, 'Z', vl),\n            vl\n        );\n\n        vuint8m8_t v_encrypted = v_temp;\n        v_encrypted = vsub_vx_u8m8_m(wrapped_lower, v_encrypted, v_encrypted, 26, vl);\n        v_encrypted = vsub_vx_u8m8_m(wrapped_upper, v_encrypted, v_encrypted, 26, vl);\n\n        vse8_v_u8m8(dst, v_encrypted, vl);\n\n        src += vl;\n        dst += vl;\n        avl -= vl;\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```cpp\n#include <string>\n#include <cstdint>\n\nstd::string encrypt_simd(const std::string & s) {\n    std::string res(s.length(), 0);\n    size_t n = s.length();\n    if (n == 0) return res;\n    \n    const uint8_t *src = reinterpret_cast<const uint8_t*>(s.data());\n    uint8_t *dst = reinterpret_cast<uint8_t*>(res.data());\n    size_t vl;\n    for (size_t pos = 0; pos < n; pos += vl) {\n        vl = __riscv_vsetvl_e8m1(n - pos);\n        vuint8m1_t v_seg = __riscv_vle8_v_u8m1(src + pos, vl);\n        \n        vbool_t mask_a = __riscv_vmsgtu_vx_u8m1_b8(v_seg, 'a' - 1, vl);\n        vbool_t mask_z = __riscv_vmsltu_vx_u8m1_b8(v_seg, 'z' + 1, vl);\n        vbool_t mask_letter = __riscv_vmand_mm(mask_a, mask_z, vl);\n        \n        vuint8m1_t base = __riscv_vsub_vx_u8m1_m(mask_letter, v_seg, v_seg, 'a', vl);\n        vuint8m1_t shifted = __riscv_vadd_vx_u8m1_m(mask_letter, base, base, 4, vl);\n        \n        vbool_t mask_ge26 = __riscv_vmsgtu_vx_u8m1_b8(shifted, 25, vl);\n        vbool_t mask_ge26_letter = __riscv_vmand_mm(mask_ge26, mask_letter, vl);\n        vuint8m1_t adjusted = __riscv_vsub_vx_u8m1_m(mask_ge26_letter, shifted, shifted, 26, vl);\n        \n        vuint8m1_t transformed = __riscv_vadd_vx_u8m1_m(mask_letter, adjusted, adjusted, 'a', vl);\n        \n        __riscv_vse8_v_u8m1(dst + pos, transformed, vl);\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s) {\n    if (s.empty()) return \"\";\n    \n    size_t n = s.size();\n    std::string res(n, ' ');\n    const char *src = s.data();\n    char *dst = &res[0];\n    \n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl, src += vl, dst += vl) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vint8m1_t v_src = __riscv_vle8_v_i8m1(src, vl);\n        vint8m1_t base = __riscv_vsub_vx_i8m1(v_src, 'a', vl);\n        vint8m1_t shifted = __riscv_vadd_vx_i8m1(base, 4, vl);\n        vbool8_t mask = __riscv_vmsge_vx_i8m1_b8(shifted, 26, vl);\n        vint8m1_t adjusted = __riscv_vsub_vx_i8m1_m(mask, shifted, shifted, 26, vl);\n        vint8m1_t v_dst = __riscv_vadd_vx_i8m1(adjusted, 'a', vl);\n        __riscv_vse8_v_i8m1(dst, v_dst, vl);\n    }\n    \n    return res;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    std::string result = message;\n    char *ptr = result.data();\n    size_t n = result.size();\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vuint8m1_t v = vle8_v_u8m1((uint8_t*)ptr, vl);\n\n        vbool8_t mask_upper = vand_vv_b8(\n            vmsgeu_vx_u8m1_b8(v, 'A', vl),\n            vmsleu_vx_u8m1_b8(v, 'Z', vl),\n            vl\n        );\n        vbool8_t mask_lower = vand_vv_b8(\n            vmsgeu_vx_u8m1_b8(v, 'a', vl),\n            vmsleu_vx_u8m1_b8(v, 'z', vl),\n            vl\n        );\n        vbool8_t mask_letter = vor_vv_b8(mask_upper, mask_lower, vl);\n\n        vuint8m1_t v_zero = vmv_v_x_u8m1(0, vl);\n        vuint8m1_t flip_vec = vadd_vx_u8m1_m(mask_letter, v_zero, v_zero, 0x20, vl);\n        vuint8m1_t v_swapped = vxor_vv_u8m1(v, flip_vec, vl);\n\n        vuint8m1_t v_low = vor_vx_u8m1(v_swapped, 0x20, vl);\n        vbool8_t mask_a = vmseq_vx_u8m1_b8(v_low, 'a', vl);\n        vbool8_t mask_e = vmseq_vx_u8m1_b8(v_low, 'e', vl);\n        vbool8_t mask_i = vmseq_vx_u8m1_b8(v_low, 'i', vl);\n        vbool8_t mask_o = vmseq_vx_u8m1_b8(v_low, 'o', vl);\n        vbool8_t mask_u = vmseq_vx_u8m1_b8(v_low, 'u', vl);\n        vbool8_t mask_vowel = vor_vv_b8(mask_a, mask_e, vl);\n        mask_vowel = vor_vv_b8(mask_vowel, mask_i, vl);\n        mask_vowel = vor_vv_b8(mask_vowel, mask_o, vl);\n        mask_vowel = vor_vv_b8(mask_vowel, mask_u, vl);\n\n        vuint8m1_t v_result = vadd_vx_u8m1_m(mask_vowel, v_swapped, v_swapped, 2, vl);\n        vse8_v_u8m1((uint8_t*)ptr, v_result, vl);\n\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstdint>\n\nstd::string encode_simd(const std::string & message) {\n    size_t n = message.size();\n    std::string result(n, '\\0');\n    const uint8_t *in = reinterpret_cast<const uint8_t*>(message.data());\n    uint8_t *out = reinterpret_cast<uint8_t*>(&result[0]);\n    size_t avl = n;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vuint8m1_t vec = __riscv_vle8_v_u8m1(in, vl);\n\n        vbool8_t mask_lower1 = __riscv_vmsgeu_vx_u8m1_b8(vec, 'a', vl);\n        vbool8_t mask_lower2 = __riscv_vmsleu_vx_u8m1_b8(vec, 'z', vl);\n        vbool8_t mask_lower = __riscv_vmand_mm_b8(mask_lower1, mask_lower2, vl);\n\n        vbool8_t mask_upper1 = __riscv_vmsgeu_vx_u8m1_b8(vec, 'A', vl);\n        vbool8_t mask_upper2 = __riscv_vmsleu_vx_u8m1_b8(vec, 'Z', vl);\n        vbool8_t mask_upper = __riscv_vmand_mm_b8(mask_upper1, mask_upper2, vl);\n\n        vuint8m1_t swapped_vec = vec;\n        swapped_vec = __riscv_vsub_vx_u8m1_m(mask_lower, swapped_vec, swapped_vec, 32, vl);\n        swapped_vec = __riscv_vadd_vx_u8m1_m(mask_upper, swapped_vec, swapped_vec, 32, vl);\n\n        vbool8_t mask_vowel = __riscv_vmclr_m_b8(vl);\n        const char vowels[] = \"aeiouAEIOU\";\n        for (int i = 0; i < 10; ++i) {\n            vbool8_t mask_i = __riscv_vmseq_vx_u8m1_b8(swapped_vec, static_cast<uint8_t>(vowels[i]), vl);\n            mask_vowel = __riscv_vmor_mm_b8(mask_vowel, mask_i, vl);\n        }\n\n        vuint8m1_t result_vec = __riscv_vadd_vx_u8m1_m(mask_vowel, swapped_vec, swapped_vec, 2, vl);\n        __riscv_vse8_v_u8m1(out, result_vec, vl);\n\n        in += vl;\n        out += vl;\n        avl -= vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```cpp\n#include <string>\n#include <riscv_vector.h>\n\nstd::string encode_simd(const std::string & message) {\n    std::string result;\n    result.resize(message.size());\n    \n    size_t n = message.size();\n    const char *src = message.data();\n    char *dst = result.data();\n    \n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e8m8(avl);\n        vuint8m8_t v_in = __riscv_vle8_v_u8m8((const uint8_t*)src, vl);\n        src += vl;\n        \n        vuint8m8_t v_swapped = __riscv_vxor_vx_u8m8(v_in, 0x20, vl);\n        \n        vbool1_t mask = __riscv_vmseq_vx_u8m8_b1(v_swapped, 'A', vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'E', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'I', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'O', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'U', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'a', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'e', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'i', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'o', vl), vl);\n        mask = __riscv_vmor_mm_b1(mask, __riscv_vmseq_vx_u8m8_b1(v_swapped, 'u', vl), vl);\n        \n        vuint8m8_t v_result = __riscv_vadd_vx_u8m8_m(mask, v_swapped, v_swapped, 2, vl);\n        \n        __riscv_vse8_v_u8m8((uint8_t*)dst, v_result, vl);\n        dst += vl;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    size_t n = message.size();\n    std::string result(n, '\\0');\n    const char *in = message.data();\n    char *out = result.data();\n\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vuint8m1_t v = __riscv_vle8_v_u8m1((const uint8_t*)in, vl);\n\n        vuint8m1_t swapped = __riscv_vxor_vx_u8m1(v, 0x20, vl);\n\n        vbool8_t mask = __riscv_vmseq_vx_u8m1_b8(swapped, 'a', vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'e', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'i', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'o', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'u', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'A', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'E', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'I', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'O', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(swapped, 'U', vl), vl);\n\n        vuint8m1_t res_vec = __riscv_vadd_vx_u8m1_m(mask, swapped, swapped, 2, vl);\n        __riscv_vse8_v_u8m1((uint8_t*)out, res_vec, vl);\n\n        in += vl;\n        out += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string & message) {\n    size_t n = message.size();\n    std::string result(n, '\\0');\n    const char* in = message.c_str();\n    char* out = &result[0];\n\n    size_t vl;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vuint8m1_t v_ch = vle8_v_u8m1((const uint8_t*)(in + i), vl);\n\n        vbool8_t mask_upper = vmand_mm_b8(\n            vmsgeu_vx_u8m1_b8(v_ch, 'A', vl),\n            vmsleu_vx_u8m1_b8(v_ch, 'Z', vl),\n            vl\n        );\n        vbool8_t mask_lower = vmand_mm_b8(\n            vmsgeu_vx_u8m1_b8(v_ch, 'a', vl),\n            vmsleu_vx_u8m1_b8(v_ch, 'z', vl),\n            vl\n        );\n\n        vuint8m1_t v_swapped = vadd_vx_u8m1_m(mask_upper, v_ch, v_ch, 32, vl);\n        v_swapped = vsub_vx_u8m1_m(mask_lower, v_swapped, v_swapped, 32, vl);\n\n        vbool8_t mask_vowel = vmseq_vx_u8m1_b8(v_swapped, 'a', vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'e', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'i', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'o', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'u', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'A', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'E', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'I', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'O', vl), vl);\n        mask_vowel = vmor_mm_b8(mask_vowel, vmseq_vx_u8m1_b8(v_swapped, 'U', vl), vl);\n\n        vuint8m1_t v_final = vadd_vx_u8m1_m(mask_vowel, v_swapped, v_swapped, 2, vl);\n        vse8_v_u8m1((uint8_t*)(out + i), v_final, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool found_invalid = false;\n    bool found_lower = false;\n    bool found_upper = false;\n\n    for (const auto& kv : dict) {\n        const std::string& key = kv.first;\n        size_t len = key.size();\n        if (len == 0) {\n            found_invalid = true;\n            break;\n        }\n\n        bool is_all_lower = true;\n        bool is_all_upper = true;\n        size_t vl;\n        for (size_t avl = len; avl > 0; avl -= vl) {\n            vl = __riscv_vsetvl_e8m8(avl);\n            const uint8_t* ptr = (const uint8_t*)(key.data() + len - avl);\n            vuint8m8_t v_data = __riscv_vle8_v_u8m8(ptr, vl);\n\n            if (is_all_lower) {\n                vbool1_t mask_ge_a = __riscv_vmsgeu_vx_u8m8_b1(v_data, 'a', vl);\n                vbool1_t mask_le_z = __riscv_vmsleu_vx_u8m8_b1(v_data, 'z', vl);\n                vbool1_t mask_lower = __riscv_vmand_mm_b1(mask_ge_a, mask_le_z, vl);\n                if (__riscv_vcpop_m_b1(mask_lower, vl) != vl) {\n                    is_all_lower = false;\n                }\n            }\n\n            if (is_all_upper) {\n                vbool1_t mask_ge_A = __riscv_vmsgeu_vx_u8m8_b1(v_data, 'A', vl);\n                vbool1_t mask_le_Z = __riscv_vmsleu_vx_u8m8_b1(v_data, 'Z', vl);\n                vbool1_t mask_upper = __riscv_vmand_mm_b1(mask_ge_A, mask_le_Z, vl);\n                if (__riscv_vcpop_m_b1(mask_upper, vl) != vl) {\n                    is_all_upper = false;\n                }\n            }\n\n            if (!is_all_lower && !is_all_upper) {\n                break;\n            }\n        }\n\n        if (is_all_lower) {\n            found_lower = true;\n        } else if (is_all_upper) {\n            found_upper = true;\n        } else {\n            found_invalid = true;\n        }\n\n        if (found_invalid || (found_lower && found_upper)) {\n            break;\n        }\n    }\n\n    if (found_invalid || (found_lower && found_upper)) {\n        return false;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_keys_are_lower = true;\n    bool all_keys_are_upper = true;\n\n    for (const auto& kv : dict) {\n        const std::string& key = kv.first;\n        size_t len = key.length();\n        const char *ptr = key.c_str();\n\n        bool key_has_alpha = false;\n        bool key_all_lower = true;\n        bool key_all_upper = true;\n\n        size_t vl;\n        for (; len > 0; len -= vl, ptr += vl) {\n            vl = __riscv_vsetvl_e8m8(len);\n            vuint8m8_t v = __riscv_vle8_v_u8m8((const uint8_t*)ptr, vl);\n\n            vbool1_t mask_lower = __riscv_vmand_mm_b1(\n                __riscv_vmsgeu_vx_u8m8_b1(v, 'a', vl),\n                __riscv_vmsleu_vx_u8m8_b1(v, 'z', vl),\n                vl\n            );\n            vbool1_t mask_upper = __riscv_vmand_mm_b1(\n                __riscv_vmsgeu_vx_u8m8_b1(v, 'A', vl),\n                __riscv_vmsleu_vx_u8m8_b1(v, 'Z', vl),\n                vl\n            );\n            vbool1_t mask_alpha = __riscv_vmor_mm_b1(mask_lower, mask_upper, vl);\n\n            if (__riscv_vfirst_m_b1(mask_alpha, vl) != -1) {\n                key_has_alpha = true;\n            }\n\n            vbool1_t mask_alpha_not_lower = __riscv_vmand_mm_b1(mask_alpha, \n                __riscv_vmnot_m_b1(mask_lower, vl), vl);\n            if (__riscv_vfirst_m_b1(mask_alpha_not_lower, vl) != -1) {\n                key_all_lower = false;\n            }\n\n            vbool1_t mask_alpha_not_upper = __riscv_vmand_mm_b1(mask_alpha, \n                __riscv_vmnot_m_b1(mask_upper, vl), vl);\n            if (__riscv_vfirst_m_b1(mask_alpha_not_upper, vl) != -1) {\n                key_all_upper = false;\n            }\n        }\n\n        if (!key_has_alpha) {\n            all_keys_are_lower = false;\n            all_keys_are_upper = false;\n            break;\n        } else {\n            all_keys_are_lower = all_keys_are_lower && key_all_lower;\n            all_keys_are_upper = all_keys_are_upper && key_all_upper;\n\n            if (!all_keys_are_lower && !all_keys_are_upper) {\n                break;\n            }\n        }\n    }\n\n    return all_keys_are_lower || all_keys_are_upper;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```cpp\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    int global_case = 0;\n\n    for (const auto& kv : dict) {\n        const std::string& key = kv.first;\n        size_t len = key.size();\n        const char *ptr = key.c_str();\n        bool local_has_upper = false;\n        bool local_has_lower = false;\n        bool found_non_letter = false;\n\n        size_t vl;\n        for (size_t avl = len; avl > 0; avl -= vl, ptr += vl) {\n            vl = __riscv_vsetvl_e8m1(avl);\n            vuint8m1_t v_data = __riscv_vle8_v_u8m1((const uint8_t*)ptr, vl);\n\n            vbool1_t mask_ge_A = __riscv_vmsgtu_vx_u8m1_b1(v_data, 'A' - 1, vl);\n            vbool1_t mask_le_Z = __riscv_vmsltu_vx_u8m1_b1(v_data, 'Z' + 1, vl);\n            vbool1_t mask_upper = __riscv_vmand_mm_b1(mask_ge_A, mask_le_Z, vl);\n\n            vbool1_t mask_ge_a = __riscv_vmsgtu_vx_u8m1_b1(v_data, 'a' - 1, vl);\n            vbool1_t mask_le_z = __riscv_vmsltu_vx_u8m1_b1(v_data, 'z' + 1, vl);\n            vbool1_t mask_lower = __riscv_vmand_mm_b1(mask_ge_a, mask_le_z, vl);\n\n            vbool1_t mask_letter = __riscv_vmor_mm_b1(mask_upper, mask_lower, vl);\n            vbool1_t mask_non_letter = __riscv_vmnot_m_b1(mask_letter, vl);\n\n            if (__riscv_vpopc_m_b1(mask_non_letter, vl) > 0) {\n                found_non_letter = true;\n                break;\n            }\n\n            if (__riscv_vpopc_m_b1(mask_upper, vl) > 0) {\n                local_has_upper = true;\n            }\n            if (__riscv_vpopc_m_b1(mask_lower, vl) > 0) {\n                local_has_lower = true;\n            }\n\n            if (local_has_upper && local_has_lower) {\n                break;\n            }\n        }\n\n        if (found_non_letter) {\n            return false;\n        }\n\n        if (local_has_upper && local_has_lower) {\n            return false;\n        }\n\n        if (local_has_upper || local_has_lower) {\n            if (global_case == 0) {\n                global_case = local_has_upper ? 2 : 1;\n            } else {\n                if ((global_case == 1 && local_has_upper) || (global_case == 2 && local_has_lower)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    if (global_case == 0) {\n        return false;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_keys_lower = true;\n    bool all_keys_upper = true;\n\n    for (const auto& kv : dict) {\n        const std::string& key = kv.first;\n        const char* ptr = key.c_str();\n        size_t len = key.length();\n        size_t avl = len;\n        bool has_upper = false;\n        bool has_lower = false;\n        bool has_non_alpha = false;\n\n        while (avl > 0) {\n            size_t vl = vsetvl_e8m1(avl);\n            vuint8m1_t vec = vle8_v_u8m1((const uint8_t*)ptr, vl);\n            ptr += vl;\n            avl -= vl;\n\n            vbool8_t mask_upper_char = vmand_mm_b8(\n                vmsgeu_vx_u8m1_b8(vec, 'A', vl),\n                vmsleu_vx_u8m1_b8(vec, 'Z', vl),\n                vl\n            );\n            vbool8_t mask_lower_char = vmand_mm_b8(\n                vmsgeu_vx_u8m1_b8(vec, 'a', vl),\n                vmsleu_vx_u8m1_b8(vec, 'z', vl),\n                vl\n            );\n            vbool8_t mask_alpha = vmor_mm_b8(mask_upper_char, mask_lower_char, vl);\n            vbool8_t mask_non_alpha = vmnot_m_b8(mask_alpha, vl);\n\n            if (vcpop_m_b8(mask_upper_char, vl) > 0) {\n                has_upper = true;\n            }\n            if (vcpop_m_b8(mask_lower_char, vl) > 0) {\n                has_lower = true;\n            }\n            if (vcpop_m_b8(mask_non_alpha, vl) > 0) {\n                has_non_alpha = true;\n            }\n\n            if (has_non_alpha || (has_upper && has_lower)) {\n                break;\n            }\n        }\n\n        if (has_non_alpha) {\n            all_keys_lower = false;\n            all_keys_upper = false;\n        } else if (has_upper && has_lower) {\n            all_keys_lower = false;\n            all_keys_upper = false;\n        } else if (has_upper) {\n            all_keys_lower = false;\n        } else if (has_lower) {\n            all_keys_upper = false;\n        }\n\n        if (!all_keys_lower && !all_keys_upper) {\n            break;\n        }\n    }\n\n    return all_keys_lower || all_keys_upper;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n\nbool check_dict_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) \n        return false;\n    \n    bool all_lower = true;\n    bool all_upper = true;\n    \n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        bool key_lower = true;\n        bool key_upper = true;\n        const char* str = key.c_str();\n        size_t len = key.length();\n        size_t vl;\n        \n        for (size_t i = 0; i < len; ) {\n            vl = vsetvl_e8m1(len - i);\n            vint8m1_t vec = vle8_v_i8m1(str + i, vl);\n            \n            vbool8_t m_upper = vmsge_vx_i8m1_b8(vec, 'A', vl);\n            m_upper = vmand_mm_b8(m_upper, vmsle_vx_i8m1_b8(vec, 'Z', vl), vl);\n            \n            vbool8_t m_lower = vmsge_vx_i8m1_b8(vec, 'a', vl);\n            m_lower = vmand_mm_b8(m_lower, vmsle_vx_i8m1_b8(vec, 'z', vl), vl);\n            \n            vbool8_t m_alpha = vmor_mm_b8(m_upper, m_lower, vl);\n            vbool8_t m_non_alpha = vmnot_m_b8(m_alpha, vl);\n            \n            if (vfirst_m_b8(m_non_alpha, vl) != -1) {\n                key_lower = false;\n                key_upper = false;\n                break;\n            }\n            \n            if (vfirst_m_b8(m_upper, vl) != -1) \n                key_lower = false;\n            \n            if (vfirst_m_b8(m_lower, vl) != -1) \n                key_upper = false;\n            \n            if (!key_lower && !key_upper) \n                break;\n            \n            i += vl;\n        }\n        \n        all_lower = all_lower && key_lower;\n        all_upper = all_upper && key_upper;\n        \n        if (!all_lower && !all_upper) \n            break;\n    }\n    \n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <riscv_vector.h>\n\nstd::vector<int> count_up_to_simd(int n) {\n    if (n <= 2) {\n        return std::vector<int>();\n    }\n\n    std::vector<uint8_t> sieve(n, 1);\n    sieve[0] = 0;\n    sieve[1] = 0;\n\n    for (long long i = 2; i * i < n; i++) {\n        if (sieve[i]) {\n            long long start = i * i;\n            long long step = i;\n            long long count = (n - start + step - 1) / step;\n            if (count <= 0) \n                continue;\n\n            uint8_t* ptr = sieve.data() + start;\n            long long j = 0;\n            size_t vl;\n            while (j < count) {\n                vl = __riscv_vsetvl_e8m1(count - j);\n                vuint8m1_t zeros = __riscv_vmv_v_x_u8m1(0, vl);\n                __riscv_vsse8_v_u8m1(ptr + j * step, step, zeros, vl);\n                j += vl;\n            }\n        }\n    }\n\n    std::vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (sieve[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```cpp\n#include <vector>\n#include <cstdlib>\n#include <riscv_vector.h>\n\nstd::vector<int> count_up_to_simd(int n) {\n    if (n <= 2) {\n        return {};\n    }\n    uint8_t *is_prime = (uint8_t*)malloc(n * sizeof(uint8_t));\n    if (is_prime == nullptr) {\n        return {};\n    }\n    for (int i = 0; i < n; i++) {\n        is_prime[i] = 1;\n    }\n    is_prime[0] = 0;\n    is_prime[1] = 0;\n\n    for (long long i = 2; i * i < n; i++) {\n        if (is_prime[i]) {\n            long long start = i * i;\n            size_t total_multiples = (n - start - 1) / i + 1;\n            size_t vl;\n            for (size_t j = 0; j < total_multiples; j += vl) {\n                vl = __riscv_vsetvl_e32m1(total_multiples - j);\n                vuint32m1_t indices = __riscv_vadd_vx_u32m1(\n                    __riscv_vmul_vx_u32m1(\n                        __riscv_vid_v_u32m1(vl),\n                        i,\n                        vl\n                    ),\n                    start + j * i,\n                    vl\n                );\n                vuint8m1_t false_vec = __riscv_vmv_v_x_u8m1(0, vl);\n                __riscv_vsoxei32_v_u8m1(is_prime, indices, false_vec, vl);\n            }\n        }\n    }\n\n    std::vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n    free(is_prime);\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <riscv_vector.h>\n\nstd::vector<int> count_up_to_simd(int n) {\n    if (n <= 2) {\n        return std::vector<int>();\n    }\n\n    std::vector<uint8_t> sieve(n, 1);\n    sieve[0] = 0;\n    sieve[1] = 0;\n\n    for (int i = 2; (long long)i * i < n; i++) {\n        if (sieve[i]) {\n            long long j = (long long)i * i;\n            while (j < n) {\n                long long remaining = (n - 1 - j) / i;\n                if (remaining < 0) break;\n                int count = (int)remaining + 1;\n                size_t vl = __riscv_vsetvl_e32m8(count);\n                vuint32m8_t vid = __riscv_vid_v_u32m8(vl);\n                vuint32m8_t step = __riscv_vmul_vx_u32m8(vid, i, vl);\n                vuint32m8_t indices = __riscv_vadd_vx_u32m8(step, j, vl);\n                vuint8m1_t zero = __riscv_vmv_v_x_u8m1(0, vl);\n                __riscv_vsoxei32_v_u8m1(sieve.data(), indices, zero, vl);\n                j += (long long)vl * i;\n            }\n        }\n    }\n\n    std::vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (sieve[i]) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<int> count_up_to_simd(int n) {\n    if (n <= 2) {\n        return std::vector<int>();\n    }\n\n    uint8_t *sieve = new uint8_t[n];\n    sieve[0] = 0;\n    sieve[1] = 0;\n    for (int i = 2; i < n; i++) {\n        sieve[i] = 1;\n    }\n\n    for (int i = 2; i <= n / i; i++) {\n        if (sieve[i]) {\n            long long start = (long long)i * i;\n            if (start >= n) continue;\n            for (long long j = start; j < n; ) {\n                long long remaining = (n - j + i - 1) / i;\n                if (remaining <= 0) break;\n                size_t vl = __riscv_vsetvl_e8m1(remaining);\n                vuint8m1_t zero_v = __riscv_vmv_v_x_u8m1(0, vl);\n                __riscv_vsse8_v_u8m1(sieve + j, (ptrdiff_t)i, zero_v, vl);\n                j += (long long)vl * i;\n            }\n        }\n    }\n\n    std::vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (sieve[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    delete[] sieve;\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    if (n <= 2) {\n        return std::vector<int>();\n    }\n\n    std::vector<uint8_t> sieve(n, 1);\n    sieve[0] = 0;\n    sieve[1] = 0;\n\n    int sqrt_n = std::sqrt(n) + 1;\n    for (int p = 2; p < sqrt_n; ++p) {\n        if (sieve[p]) {\n            size_t start_index = static_cast<size_t>(p) * p;\n            size_t stride = p;\n            size_t num_multiples = (n - start_index + stride - 1) / stride;\n\n            uint8_t* ptr = sieve.data() + start_index;\n            size_t vl;\n            vuint8m1_t v_zero = __riscv_vmv_v_x_u8m1(0, 1);\n\n            while (num_multiples > 0) {\n                vl = __riscv_vsetvl_e8m1(num_multiples);\n                __riscv_vsse8_v_u8m1(ptr, stride, v_zero, vl);\n                ptr += vl * stride;\n                num_multiples -= vl;\n            }\n        }\n    }\n\n    std::vector<int> primes;\n    for (int i = 2; i < n; ++i) {\n        if (sieve[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s){\n    int count = 0;\n    size_t n = s.size();\n    const char *str = s.data();\n\n    for (size_t i = 0; i < n; ) {\n        size_t avl = (n - i + 1) / 2;\n        size_t vl = __riscv_vsetvl_e8m1(avl);\n        vint8m1_t vec = __riscv_vlse8_v_i8m1(str + i, 2, vl);\n\n        vbool8_t mask_A = __riscv_vmseq_vx_i8m1_b8(vec, 'A', vl);\n        vbool8_t mask_E = __riscv_vmseq_vx_i8m1_b8(vec, 'E', vl);\n        vbool8_t mask_I = __riscv_vmseq_vx_i8m1_b8(vec, 'I', vl);\n        vbool8_t mask_O = __riscv_vmseq_vx_i8m1_b8(vec, 'O', vl);\n        vbool8_t mask_U = __riscv_vmseq_vx_i8m1_b8(vec, 'U', vl);\n\n        vbool8_t mask_vowel = __riscv_vmor_mm_b8(mask_A, mask_E, vl);\n        mask_vowel = __riscv_vmor_mm_b8(mask_vowel, mask_I, vl);\n        mask_vowel = __riscv_vmor_mm_b8(mask_vowel, mask_O, vl);\n        mask_vowel = __riscv_vmor_mm_b8(mask_vowel, mask_U, vl);\n\n        count += __riscv_vcpop_m_b8(mask_vowel, vl);\n        i += 2 * vl;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    int count = 0;\n    size_t n = s.size();\n    if (n == 0) \n        return 0;\n    size_t neven = (n + 1) / 2;\n    const char *ptr = s.c_str();\n\n    while (neven > 0) {\n        size_t vl = vsetvl_e8m1(neven);\n        vint8m1_t chunk = vlsse8_v_i8m1((const int8_t*)ptr, 2, vl);\n        vbool8_t mask_A = vmseq_vx_i8m1_b8(chunk, 'A', vl);\n        vbool8_t mask_E = vmseq_vx_i8m1_b8(chunk, 'E', vl);\n        vbool8_t mask_I = vmseq_vx_i8m1_b8(chunk, 'I', vl);\n        vbool8_t mask_O = vmseq_vx_i8m1_b8(chunk, 'O', vl);\n        vbool8_t mask_U = vmseq_vx_i8m1_b8(chunk, 'U', vl);\n        vbool8_t vowel_mask = vmor_mm_b8(mask_A, mask_E, vl);\n        vowel_mask = vmor_mm_b8(vowel_mask, mask_I, vl);\n        vowel_mask = vmor_mm_b8(vowel_mask, mask_O, vl);\n        vowel_mask = vmor_mm_b8(vowel_mask, mask_U, vl);\n        count += vcpop_m_b8(vowel_mask, vl);\n        ptr += 2 * vl;\n        neven -= vl;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    int count = 0;\n    size_t n = s.size();\n    if (n == 0) \n        return 0;\n\n    size_t neven = (n + 1) / 2;\n    size_t pos = 0;\n\n    while (neven > 0) {\n        size_t vl = __riscv_vsetvl_e8m1(neven);\n        vuint8m1_t chunk = __riscv_vlse8_v_u8m1((uint8_t*)(s.data() + pos), 2, vl);\n        \n        vbool8_t mask = __riscv_vmseq_vx_u8m1_b8(chunk, 'A', vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(chunk, 'E', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(chunk, 'I', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(chunk, 'O', vl), vl);\n        mask = __riscv_vmor_mm_b8(mask, __riscv_vmseq_vx_u8m1_b8(chunk, 'U', vl), vl);\n        \n        count += __riscv_vcpop_m_b8(mask, vl);\n        pos += 2 * vl;\n        neven -= vl;\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    int len = s.length();\n    if (len == 0) \n        return 0;\n    \n    size_t n_even = (len + 1) >> 1;\n    const uint8_t *str = (const uint8_t*)s.c_str();\n    int total = 0;\n    size_t avl = n_even;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e8m1(avl);\n        vuint8m1_t vec = vlse8_v_u8m1(str, 2, vl);\n\n        vbool8_t mask = vmseq_vx_u8m1_b8(vec, 'A', vl);\n        vbool8_t mask_tmp = vmseq_vx_u8m1_b8(vec, 'E', vl);\n        mask = vmor_mm_b8(mask, mask_tmp, vl);\n        mask_tmp = vmseq_vx_u8m1_b8(vec, 'I', vl);\n        mask = vmor_mm_b8(mask, mask_tmp, vl);\n        mask_tmp = vmseq_vx_u8m1_b8(vec, 'O', vl);\n        mask = vmor_mm_b8(mask, mask_tmp, vl);\n        mask_tmp = vmseq_vx_u8m1_b8(vec, 'U', vl);\n        mask = vmor_mm_b8(mask, mask_tmp, vl);\n\n        total += vpopc_m_b8(mask, vl);\n        str += 2 * vl;\n        avl -= vl;\n    }\n\n    return total;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    size_t n = s.size();\n    if (n == 0) return 0;\n    size_t n_even = (n + 1) / 2;\n    const uint8_t *ptr = (const uint8_t *)s.data();\n    size_t vl;\n    unsigned long int total = 0;\n\n    for (size_t avl = n_even; avl > 0; ) {\n        vl = __riscv_vsetvl_e8m1(avl);\n        vuint8m1_t vec = __riscv_vlse8_v_u8m1(ptr, 2, vl);\n        \n        vbool8_t maskA = __riscv_vmseq_vx_u8m1_b8(vec, 'A', vl);\n        vbool8_t maskE = __riscv_vmseq_vx_u8m1_b8(vec, 'E', vl);\n        vbool8_t maskI = __riscv_vmseq_vx_u8m1_b8(vec, 'I', vl);\n        vbool8_t maskO = __riscv_vmseq_vx_u8m1_b8(vec, 'O', vl);\n        vbool8_t maskU = __riscv_vmseq_vx_u8m1_b8(vec, 'U', vl);\n        \n        vbool8_t mask = __riscv_vmor_mm_b8(maskA, maskE, vl);\n        mask = __riscv_vmor_mm_b8(mask, maskI, vl);\n        mask = __riscv_vmor_mm_b8(mask, maskO, vl);\n        mask = __riscv_vmor_mm_b8(mask, maskU, vl);\n        \n        total += __riscv_vcpop_m_b8(mask, vl);\n        ptr += vl * 2;\n        avl -= vl;\n    }\n    \n    return total;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> res(n);\n    size_t avl = n;\n    size_t vl;\n    for (size_t current = 0; current < avl; current += vl) {\n        vl = vsetvl_e32m1(avl - current);\n        vint32m1_t idx_vec = vid_v_i32m1(vl);\n        vint32m1_t step_vec = vmul_vx_i32m1(idx_vec, 2, vl);\n        vint32m1_t value_vec = vadd_vx_i32m1(step_vec, n + 2 * current, vl);\n        vse32_v_i32m1(&res[current], value_vec, vl);\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    if (n <= 0) {\n        return std::vector<int>();\n    }\n    std::vector<int> res(n);\n    int offset = 0;\n    int base_val = n;\n    size_t avl = n;\n    int *ptr = res.data();\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m8(avl);\n        vuint32m8_t vidx = __riscv_vid_v_u32m8(vl);\n        vint32m8_t vidx_s = __riscv_vreinterpret_v_u32m8_i32m8(vidx);\n        vint32m8_t step = __riscv_vsll_vx_i32m8(vidx_s, 1, vl);\n        vint32m8_t base_vec = __riscv_vmv_v_x_i32m8(base_val, vl);\n        vint32m8_t values = __riscv_vadd_vv_i32m8(base_vec, step, vl);\n        __riscv_vse32_v_i32m8(ptr, values, vl);\n        avl -= vl;\n        offset += vl;\n        base_val = n + 2 * offset;\n        ptr += vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    if (n <= 0) {\n        return std::vector<int>();\n    }\n    std::vector<int> res(n);\n    size_t vl;\n    for (int i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vuint32m1_t vid_u = __riscv_vid_v_u32m1(vl);\n        vint32m1_t local_index = __riscv_vreinterpret_v_u32m1_i32m1(vid_u);\n        vint32m1_t two_times = __riscv_vsll_vx_i32m1(local_index, 1, vl);\n        int base_val = n + 2 * i;\n        vint32m1_t base_vec = __riscv_vmv_v_x_i32m1(base_val, vl);\n        vint32m1_t result_vec = __riscv_vadd_vv_i32m1(base_vec, two_times, vl);\n        __riscv_vse32_v_i32m1(&res[i], result_vec, vl);\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    if (n <= 0) {\n        return std::vector<int>();\n    }\n    std::vector<int> res(n);\n    int *ptr = res.data();\n    size_t vl;\n    for (int i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vuint32m1_t vidx = vid_v_u32m1(vl);\n        vint32m1_t global_index = vadd_vx_i32m1(vreinterpret_v_u32m1_i32m1(vidx), i, vl);\n        vint32m1_t doubled = vmul_vx_i32m1(global_index, 2, vl);\n        vint32m1_t value = vadd_vx_i32m1(doubled, n, vl);\n        vse32_v_i32m1(ptr + i, value, vl);\n        i += vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> res(n);\n    if (n <= 0) {\n        return res;\n    }\n\n    int *ptr = res.data();\n    size_t vl;\n    for (int start = 0; start < n; start += vl) {\n        vl = vsetvl_e32m1(n - start);\n        vint32m1_t vec_index = vid_v_i32m1(vl);\n        vint32m1_t vec_step = vsll_vx_i32m1(vec_index, 1, vl);\n        int base_val = n + 2 * start;\n        vint32m1_t vec_base = vmv_v_x_i32m1(base_val, vl);\n        vint32m1_t vec_res = vadd_vv_i32m1(vec_base, vec_step, vl);\n        vse32_v_i32m1(ptr + start, vec_res, vl);\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int64_t arr[2] = {n, m};\n    size_t vl = vsetvl_e64m1(2);\n    vint64m1_t vec = vle64_v_i64m1(arr, vl);\n    vint64m1_t v_zero = vmv_v_x_i64m1(0, vl);\n    vint64m1_t v_dest = vredsum_vs_i64m1_i64m1(v_zero, vec, v_zero, vl);\n    int64_t total = vmv_x_s_i64m1_i64(v_dest);\n    int64_t avg = total / 2;\n\n    if (avg == 0) {\n        return \"0\";\n    }\n    std::string res;\n    uint64_t num = avg;\n    while (num) {\n        res = (num & 1 ? '1' : '0') + res;\n        num >>= 1;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstdlib>\n#include <cstdint>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    uint64_t n1 = n;\n    uint64_t m1 = m;\n    uint64_t avg = (n1 + m1) / 2;\n    \n    if (avg == 0) {\n        return \"0\";\n    }\n    int num_bits = 64 - __builtin_clzll(avg);\n    \n    char *buf = (char*)malloc(num_bits + 1);\n    size_t total = num_bits;\n    size_t pos = 0;\n    while (pos < total) {\n        size_t vl = __riscv_vsetvl_e64m1(total - pos);\n        vuint64m1_t v_index_asc = __riscv_vid_v_u64m1(vl);\n        v_index_asc = __riscv_vadd_vx_u64m1(v_index_asc, pos, vl);\n        vuint64m1_t v_index_desc = __riscv_vrsub_vx_u64m1(v_index_asc, total - 1, vl);\n        vuint64m1_t v_avg_vec = __riscv_vmv_v_x_u64m1(avg, vl);\n        vuint64m1_t v_shifted = __riscv_vsrl_vv_u64m1(v_avg_vec, v_index_desc, vl);\n        vuint64m1_t v_bits = __riscv_vand_vx_u64m1(v_shifted, 1, vl);\n        vuint32m1_t v_bits32 = __riscv_vncvt_x_x_w_u32m1(v_bits, vl);\n        vuint16m1_t v_bits16 = __riscv_vncvt_x_x_w_u16m1(v_bits32, vl);\n        vuint8m1_t v_bits8 = __riscv_vncvt_x_x_w_u8m1(v_bits16, vl);\n        vuint8m1_t v_char = __riscv_vadd_vx_u8m1(v_bits8, '0', vl);\n        __riscv_vse8_v_u8m1((uint8_t*)(buf + pos), v_char, vl);\n        pos += vl;\n    }\n    buf[total] = '\\0';\n    std::string result(buf);\n    free(buf);\n    return result;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int64_t count_val = m - n + 1;\n    int64_t total = 0;\n    size_t vl;\n    vint64m1_t vec_zero = vmv_v_x_i64m1(0, 1);\n    int64_t start = n;\n    while (start <= m) {\n        vl = vsetvl_e64m1(m - start + 1);\n        vint64m1_t vec = vid_v_i64m1(vl);\n        vec = vadd_vx_i64m1(vec, start, vl);\n        vint64m1_t dest = vredsum_vs_i64m1_i64m1(vec, vec_zero, vl);\n        total += vmv_x_s_i64m1_i64(dest);\n        start += vl;\n    }\n    int64_t avg = total / count_val;\n    if (avg == 0) {\n        return \"0\";\n    }\n    int lz = __builtin_clzll(avg);\n    int total_bits = 64 - lz;\n    uint64_t shifted = (uint64_t)avg << lz;\n    uint64_t shift_arr[64];\n    for (int i = 0; i < total_bits; i++) {\n        shift_arr[i] = 63 - i;\n    }\n    size_t vl_bits = total_bits;\n    vuint64m1_t shift_vec = vle64_v_u64m1(shift_arr, vl_bits);\n    vuint64m1_t x_vec = vmv_v_x_u64m1(shifted, vl_bits);\n    vuint64m1_t bit_vec = vsrl_vv_u64m1(x_vec, shift_vec, vl_bits);\n    bit_vec = vand_vx_u64m1(bit_vec, 1, vl_bits);\n    vuint32mf2_t tmp1 = vncvt_x_x_w_u32mf2(bit_vec, vl_bits);\n    vuint16mf4_t tmp2 = vncvt_x_x_w_u16mf4(tmp1, vl_bits);\n    vuint8mf8_t char_vec = vncvt_x_x_w_u8mf8(tmp2, vl_bits);\n    char_vec = vadd_vx_u8mf8(char_vec, '0', vl_bits);\n    uint8_t buffer[64];\n    vse8_v_u8mf8(buffer, char_vec, vl_bits);\n    return std::string((char*)buffer, vl_bits);\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstdint>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int64_t diff = m - n;\n    int64_t avg = n + diff / 2;\n    \n    if (avg == 0) {\n        return \"0\";\n    }\n    uint64_t u_avg = static_cast<uint64_t>(avg);\n    int num_bits = 64 - __builtin_clzll(u_avg);\n    \n    size_t vl = vsetvl_e64m1(64);\n    vuint64m1_t vid = vid_v_u64m1(vl);\n    vuint64m1_t base_vec = vmv_v_x_u64m1(num_bits - 1, vl);\n    vuint64m1_t shift_amount = vsub_vv_u64m1(base_vec, vid, vl);\n    \n    vuint64m1_t avg_vec = vmv_v_x_u64m1(u_avg, vl);\n    vuint64m1_t shifted = vsrl_vv_u64m1(avg_vec, shift_amount, vl);\n    vuint64m1_t masked = vand_vx_u64m1(shifted, 1, vl);\n    \n    size_t vl8 = vsetvl_e8m1(64);\n    vuint32m1_t tmp32 = vncvt_x_x_w_u32m1(masked, vl8);\n    vuint16m1_t tmp16 = vncvt_x_x_w_u16m1(tmp32, vl8);\n    vuint8m1_t tmp8 = vncvt_x_x_w_u8m1(tmp16, vl8);\n    vuint8m1_t char_vec = vadd_vx_u8m1(tmp8, '0', vl8);\n    \n    char buffer[65];\n    vse8_v_u8m1((uint8_t*)buffer, char_vec, vl8);\n    return std::string(buffer, num_bits);\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstdint>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    uint64_t total = static_cast<uint64_t>(n) + static_cast<uint64_t>(m);\n    uint64_t x = total / 2;\n\n    if (x == 0) {\n        return \"0\";\n    }\n    int num_bits = 64 - __builtin_clzll(x);\n\n    size_t vl = __riscv_vsetvl_e64m1(num_bits);\n    vuint64m1_t vid = __riscv_vid_v_u64m1(vl);\n    vuint64m1_t rev_idx = __riscv_vrsub_vx_u64m1(vid, num_bits - 1, vl);\n    vuint64m1_t x_vec = __riscv_vmv_v_x_u64m1(x, vl);\n    vuint64m1_t shifted = __riscv_vsrl_vv_u64m1(x_vec, rev_idx, vl);\n    vuint64m1_t bits_wide = __riscv_vand_vx_u64m1(shifted, 1, vl);\n\n    vuint32m1_t bits32 = __riscv_vncvt_x_x_w_u32m1(bits_wide, vl);\n    vuint16m1_t bits16 = __riscv_vncvt_x_x_w_u16m1(bits32, vl);\n    vuint8m1_t bits8 = __riscv_vncvt_x_x_w_u8m1(bits16, vl);\n    vuint8m1_t char_vec = __riscv_vadd_vx_u8m1(bits8, '0', vl);\n\n    std::string res;\n    res.resize(vl);\n    char *ptr = &res[0];\n    __riscv_vse8_v_u8m1(ptr, char_vec, vl);\n    return res;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> res(n);\n    if (n <= 0) {\n        return res;\n    }\n\n    size_t vl;\n    for (int p = 0; p < n; p += vl) {\n        vl = __riscv_vsetvl_e32m8(n - p);\n        vuint32m8_t v_p = __riscv_vid_v_u32m8(vl);\n        v_p = __riscv_vadd_vx_u32m8(v_p, p, vl);\n        vuint32m8_t v_i = __riscv_vadd_vx_u32m8(v_p, 1, vl);\n        vuint32m8_t v_i1 = __riscv_vadd_vx_u32m8(v_i, 1, vl);\n        vuint32m8_t v_prod = __riscv_vmul_vv_u32m8(v_i, v_i1, vl);\n        vuint32m8_t v_tri = __riscv_vsrl_vx_u32m8(v_prod, 1, vl);\n        vint32m8_t v_tri_int = __riscv_vreinterpret_v_u32m8_i32m8(v_tri);\n        __riscv_vse32_v_i32m8(&res[p], v_tri_int, vl);\n    }\n\n    int fact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = (fact * i) % 10000;\n        if (i % 2 == 0) {\n            res[i - 1] = fact;\n        }\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> res(n);\n    if (n <= 0) return res;\n\n    size_t vl;\n    for (int i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_index = __riscv_vid_v_i32m1(vl);\n        v_index = __riscv_vadd_vx_i32m1(v_index, i, vl);\n        vint32m1_t v_k = __riscv_vadd_vx_i32m1(v_index, 1, vl);\n        vint32m1_t v_k_plus1 = __riscv_vadd_vx_i32m1(v_k, 1, vl);\n        vint32m1_t v_prod = __riscv_vmul_vv_i32m1(v_k, v_k_plus1, vl);\n        vint32m1_t v_tri = __riscv_vdiv_vx_i32m1(v_prod, 2, vl);\n        __riscv_vse32_v_i32m1(&res[i], v_tri, vl);\n        i += vl;\n    }\n\n    int n_even = n / 2;\n    if (n_even > 0) {\n        int current = 2;\n        if (n > 1) {\n            res[1] = current;\n        }\n        for (int j = 1; j < n_even; j++) {\n            current = (current * (2 * j + 1)) % 10000;\n            current = (current * (2 * j + 2)) % 10000;\n            int pos = 2 * j + 1;\n            if (pos < n) {\n                res[pos] = current;\n            }\n        }\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    if (n <= 0) return result;\n\n    uint32_t base = 1;\n    int j = 0;\n    size_t vl;\n\n    while (j < n) {\n        vl = __riscv_vsetvl_e32m1(n - j);\n        vuint32m1_t v_index = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t v_x = __riscv_vadd_vx_u32m1(v_index, j + 2, vl);\n        vuint32m1_t v_p = v_x;\n\n        for (int stride = 1; stride < vl; stride *= 2) {\n            vuint32m1_t v_ones = __riscv_vmv_v_x_u32m1(1, vl);\n            vuint32m1_t v_shifted = __riscv_vslideup_vx_u32m1(v_ones, v_p, stride, vl);\n            v_p = __riscv_vmul_vv_u32m1(v_p, v_shifted, vl);\n        }\n\n        vuint32m1_t v_base = __riscv_vmv_v_x_u32m1(base, vl);\n        v_p = __riscv_vmul_vv_u32m1(v_p, v_base, vl);\n\n        uint32_t temp[vl];\n        __riscv_vse32_v_u32m1(temp, v_p, vl);\n\n        base = temp[vl - 1] % 10000;\n\n        for (int k = 0; k < vl; ++k) {\n            int idx = j + k;\n            int i_val = idx + 1;\n            if (i_val % 2 == 0) {\n                result[idx] = temp[k] % 10000;\n            } else {\n                uint32_t a = i_val % 20000;\n                uint32_t b = (i_val + 1) % 20000;\n                uint32_t prod = a * b;\n                uint32_t prod_mod = prod % 20000;\n                uint32_t tri_val = prod_mod / 2;\n                result[idx] = tri_val % 10000;\n            }\n        }\n        j += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    if (n <= 0) {\n        return result;\n    }\n\n    size_t avl = n;\n    size_t base = 0;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vuint32m8_t v_j_local = vid_v_u32m8(vl);\n        vuint32m8_t v_j_global = vadd_vx_u32m8(v_j_local, base, vl);\n        vuint32m8_t v_i = vadd_vx_u32m8(v_j_global, 1, vl);\n        vuint32m8_t v_i_plus1 = vadd_vx_u32m8(v_i, 1, vl);\n        vuint32m8_t v_prod = vmul_vv_u32m8(v_i, v_i_plus1, vl);\n        vuint32m8_t v_tri = vsrl_vx_u32m8(v_prod, 1, vl);\n        int *ptr = result.data() + base;\n        vse32_v_u32m8(ptr, v_tri, vl);\n        base += vl;\n        avl -= vl;\n    }\n\n    int current_fact = 1;\n    for (int i = 2; i <= n; i += 2) {\n        current_fact = (current_fact * (i - 1)) % 10000;\n        current_fact = (current_fact * i) % 10000;\n        result[i - 1] = current_fact;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> func_simd(int n) {\n    if (n <= 0) {\n        return std::vector<int>();\n    }\n    std::vector<int> result(n);\n    size_t avl = n;\n    int *ptr = result.data();\n    long current_base = 1;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m8(avl);\n        vuint32m8_t v_i = vid_v_u32m8(vl);\n        vuint32m8_t v_index = vadd_vx_u32m8(v_i, current_base, vl);\n        vuint32m8_t v_index_plus1 = vadd_vx_u32m8(v_index, 1, vl);\n        vuint32m8_t v_prod = vmul_vv_u32m8(v_index, v_index_plus1, vl);\n        vuint32m8_t v_tri = vsrl_vx_u32m8(v_prod, 1, vl);\n        vse32_v_u32m8(ptr, v_tri, vl);\n        avl -= vl;\n        ptr += vl;\n        current_base += vl;\n    }\n\n    long long current_fact = 1;\n    for (int j = 1; j < n; j += 2) {\n        int i = j + 1;\n        current_fact = (current_fact * (i - 1)) % 10000;\n        current_fact = (current_fact * i) % 10000;\n        result[j] = static_cast<int>(current_fact);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n    size_t avl = n;\n    size_t start_index = 1;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vuint32m1_t indices = vid_v_u32m1(vl);\n        vuint32m1_t vec = vadd_vx_u32m1(indices, start_index, vl);\n\n        vuint32m1_t d0 = vremu_vx_u32m1(vec, 10, vl);\n        vuint32m1_t temp = vdivu_vx_u32m1(vec, 10, vl);\n        vuint32m1_t d1 = vremu_vx_u32m1(temp, 10, vl);\n        temp = vdivu_vx_u32m1(temp, 10, vl);\n        vuint32m1_t d2 = vremu_vx_u32m1(temp, 10, vl);\n        temp = vdivu_vx_u32m1(temp, 10, vl);\n        vuint32m1_t d3 = temp;\n\n        vbool32_t mask1 = vmsltu_vx_u32m1_b32(vec, 10, vl);\n\n        vbool32_t mask2_ge10 = vmnot_m_b32(vmsltu_vx_u32m1_b32(vec, 10, vl), vl);\n        vbool32_t mask2_lt100 = vmsltu_vx_u32m1_b32(vec, 100, vl);\n        vbool32_t mask2_d = vmseq_vv_u32m1_b32(d0, d1, vl);\n        vbool32_t mask2 = vmand_mm_b32(mask2_ge10, mask2_lt100, vl);\n        mask2 = vmand_mm_b32(mask2, mask2_d, vl);\n\n        vbool32_t mask3_ge100 = vmnot_m_b32(vmsltu_vx_u32m1_b32(vec, 100, vl), vl);\n        vbool32_t mask3_lt1000 = vmsltu_vx_u32m1_b32(vec, 1000, vl);\n        vbool32_t mask3_d = vmseq_vv_u32m1_b32(d0, d2, vl);\n        vbool32_t mask3 = vmand_mm_b32(mask3_ge100, mask3_lt1000, vl);\n        mask3 = vmand_mm_b32(mask3, mask3_d, vl);\n\n        vbool32_t mask4_ge1000 = vmnot_m_b32(vmsltu_vx_u32m1_b32(vec, 1000, vl), vl);\n        vbool32_t mask4_d0d3 = vmseq_vv_u32m1_b32(d0, d3, vl);\n        vbool32_t mask4_d1d2 = vmseq_vv_u32m1_b32(d1, d2, vl);\n        vbool32_t mask4 = vmand_mm_b32(mask4_ge1000, mask4_d0d3, vl);\n        mask4 = vmand_mm_b32(mask4, mask4_d1d2, vl);\n\n        vbool32_t cond = vmor_mm_b32(mask1, mask2, vl);\n        cond = vmor_mm_b32(cond, mask3, vl);\n        cond = vmor_mm_b32(cond, mask4, vl);\n\n        vuint32m1_t rem2 = vremu_vx_u32m1(vec, 2, vl);\n        vbool32_t even_mask = vmseq_vx_u32m1_b32(rem2, 0, vl);\n        vbool32_t odd_mask = vmseq_vx_u32m1_b32(rem2, 1, vl);\n\n        vbool32_t even_cond = vmand_mm_b32(cond, even_mask, vl);\n        vbool32_t odd_cond = vmand_mm_b32(cond, odd_mask, vl);\n\n        even_count += vpopc_b32(even_cond, vl);\n        odd_count += vpopc_b32(odd_cond, vl);\n\n        start_index += vl;\n        avl -= vl;\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    if (n < 1) {\n        return {0, 0};\n    }\n    unsigned un = (unsigned)n;\n    unsigned even_count = 0;\n    unsigned odd_count = 0;\n    size_t vl;\n    for (unsigned i = 1; i <= un; ) {\n        vl = __riscv_vsetvl_e32m1(un - i + 1);\n        vuint32m1_t vec_i = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t orig_x = __riscv_vadd_vx_u32m1(vec_i, i, vl);\n        vuint32m1_t d0 = __riscv_vremu_vx_u32m1(orig_x, 10, vl);\n        vuint32m1_t temp = __riscv_vdivu_vx_u32m1(orig_x, 10, vl);\n        vuint32m1_t d1 = __riscv_vremu_vx_u32m1(temp, 10, vl);\n        temp = __riscv_vdivu_vx_u32m1(temp, 10, vl);\n        vuint32m1_t d2 = __riscv_vremu_vx_u32m1(temp, 10, vl);\n        temp = __riscv_vdivu_vx_u32m1(temp, 10, vl);\n        vuint32m1_t d3 = __riscv_vremu_vx_u32m1(temp, 10, vl);\n        vbool32_t k1 = __riscv_vmsgtu_vx_u32m1_b32(orig_x, 9, vl);\n        vbool32_t k2 = __riscv_vmsgtu_vx_u32m1_b32(orig_x, 99, vl);\n        vbool32_t k3 = __riscv_vmsgtu_vx_u32m1_b32(orig_x, 999, vl);\n        vuint32m1_t k1_u = __riscv_vmv_v_x_u32m1(0, vl);\n        k1_u = __riscv_vmerge_vxm_u32m1(k1_u, 1, k1, vl);\n        vuint32m1_t k2_u = __riscv_vmv_v_x_u32m1(0, vl);\n        k2_u = __riscv_vmerge_vxm_u32m1(k2_u, 1, k2, vl);\n        vuint32m1_t k3_u = __riscv_vmv_v_x_u32m1(0, vl);\n        k3_u = __riscv_vmerge_vxm_u32m1(k3_u, 1, k3, vl);\n        vuint32m1_t k = __riscv_vadd_vx_u32m1(k1_u, 1, vl);\n        k = __riscv_vadd_vv_u32m1(k, k2_u, vl);\n        k = __riscv_vadd_vv_u32m1(k, k3_u, vl);\n        vbool32_t is_pal = __riscv_vmseq_vx_u32m1_b32(k, 1, vl);\n        vbool32_t cond2 = __riscv_vmand_mm_b32(\n            __riscv_vmseq_vx_u32m1_b32(k, 2, vl),\n            __riscv_vmseq_vv_u32m1_b32(d0, d1, vl),\n            vl\n        );\n        is_pal = __riscv_vmor_mm_b32(is_pal, cond2, vl);\n        vbool32_t cond3 = __riscv_vmand_mm_b32(\n            __riscv_vmseq_vx_u32m1_b32(k, 3, vl),\n            __riscv_vmseq_vv_u32m1_b32(d0, d2, vl),\n            vl\n        );\n        is_pal = __riscv_vmor_mm_b32(is_pal, cond3, vl);\n        vbool32_t cond4a = __riscv_vmseq_vv_u32m1_b32(d0, d3, vl);\n        vbool32_t cond4b = __riscv_vmseq_vv_u32m1_b32(d1, d2, vl);\n        vbool32_t cond4 = __riscv_vmand_mm_b32(cond4a, cond4b, vl);\n        cond4 = __riscv_vmand_mm_b32(\n            __riscv_vmseq_vx_u32m1_b32(k, 4, vl),\n            cond4,\n            vl\n        );\n        is_pal = __riscv_vmor_mm_b32(is_pal, cond4, vl);\n        vbool32_t is_even = __riscv_vmseq_vx_u32m1_b32(__riscv_vremu_vx_u32m1(orig_x, 2, vl), 0, vl);\n        vbool32_t pal_even = __riscv_vmand_mm_b32(is_pal, is_even, vl);\n        vbool32_t pal_odd = __riscv_vmand_mm_b32(is_pal, __riscv_vmnot_m_b32(is_even, vl), vl);\n        even_count += __riscv_vcpop_m_b32(pal_even, vl);\n        odd_count += __riscv_vcpop_m_b32(pal_odd, vl);\n        i += vl;\n    }\n    return {(int)even_count, (int)odd_count};\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n    uint32_t base = 1;\n    while (base <= (uint32_t)n) {\n        size_t avl = n - base + 1;\n        size_t vl = __riscv_vsetvl_e32m8(avl);\n        vuint32m8_t vx = __riscv_vid_v_u32m8(vl);\n        vx = __riscv_vadd_vx_u32m8(vx, base, vl);\n\n        vuint32m8_t q1 = __riscv_vmulhu_vx_u32m8(vx, 0xCCCCCCCD, vl);\n        q1 = __riscv_vsrl_vx_u32m8(q1, 3, vl);\n        vuint32m8_t d0 = __riscv_vsub_vv_u32m8(vx, __riscv_vmul_vx_u32m8(q1, 10, vl), vl);\n\n        vuint32m8_t q2 = __riscv_vmulhu_vx_u32m8(q1, 0xCCCCCCCD, vl);\n        q2 = __riscv_vsrl_vx_u32m8(q2, 3, vl);\n        vuint32m8_t d1 = __riscv_vsub_vv_u32m8(q1, __riscv_vmul_vx_u32m8(q2, 10, vl), vl);\n\n        vuint32m8_t q3 = __riscv_vmulhu_vx_u32m8(q2, 0xCCCCCCCD, vl);\n        q3 = __riscv_vsrl_vx_u32m8(q3, 3, vl);\n        vuint32m8_t d2 = __riscv_vsub_vv_u32m8(q2, __riscv_vmul_vx_u32m8(q3, 10, vl), vl);\n\n        vuint32m8_t d3 = q3;\n\n        vuint32m8_t const10 = __riscv_vmv_v_x_u32m8(10, vl);\n        vuint32m8_t const100 = __riscv_vmv_v_x_u32m8(100, vl);\n        vuint32m8_t const1000 = __riscv_vmv_v_x_u32m8(1000, vl);\n\n        vbool4_t mask1 = __riscv_vmsltu_vx_u32m8_b4(vx, 10, vl);\n        vbool4_t mask2_range = __riscv_vmand_mm_b4(\n            __riscv_vmsgeu_vx_u32m8_b4(vx, 10, vl),\n            __riscv_vmsltu_vx_u32m8_b4(vx, 100, vl), vl);\n        vbool4_t mask2_digits = __riscv_vmseq_vv_u32m8_b4(d1, d0, vl);\n        vbool4_t mask2 = __riscv_vmand_mm_b4(mask2_range, mask2_digits, vl);\n        vbool4_t mask3_range = __riscv_vmand_mm_b4(\n            __riscv_vmsgeu_vx_u32m8_b4(vx, 100, vl),\n            __riscv_vmsltu_vx_u32m8_b4(vx, 1000, vl), vl);\n        vbool4_t mask3_digits = __riscv_vmseq_vv_u32m8_b4(d2, d0, vl);\n        vbool4_t mask3 = __riscv_vmand_mm_b4(mask3_range, mask3_digits, vl);\n        vbool4_t mask4_range = __riscv_vmsgeu_vx_u32m8_b4(vx, 1000, vl);\n        vbool4_t mask4_digits = __riscv_vmand_mm_b4(\n            __riscv_vmseq_vv_u32m8_b4(d3, d0, vl),\n            __riscv_vmseq_vv_u32m8_b4(d2, d1, vl), vl);\n        vbool4_t mask4 = __riscv_vmand_mm_b4(mask4_range, mask4_digits, vl);\n\n        vbool4_t mask_palindrome = __riscv_vmor_mm_b4(mask1, mask2, vl);\n        mask_palindrome = __riscv_vmor_mm_b4(mask_palindrome, mask3, vl);\n        mask_palindrome = __riscv_vmor_mm_b4(mask_palindrome, mask4, vl);\n\n        vuint32m8_t d0_lsb = __riscv_vand_vx_u32m8(d0, 1, vl);\n        vbool4_t mask_even = __riscv_vmseq_vx_u32m8_b4(d0_lsb, 0, vl);\n        vbool4_t mask_odd = __riscv_vmsne_vx_u32m8_b4(d0_lsb, 0, vl);\n\n        vbool4_t mask_palindrome_even = __riscv_vmand_mm_b4(mask_palindrome, mask_even, vl);\n        vbool4_t mask_palindrome_odd = __riscv_vmand_mm_b4(mask_palindrome, mask_odd, vl);\n\n        even_count += __riscv_vcpop_m_b4(mask_palindrome_even, vl);\n        odd_count += __riscv_vcpop_m_b4(mask_palindrome_odd, vl);\n\n        base += vl;\n    }\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    unsigned int even_count = 0;\n    unsigned int odd_count = 0;\n    unsigned int n_unsigned = static_cast<unsigned int>(n);\n\n    size_t vl;\n    for (unsigned int start = 1; start <= n_unsigned; start += vl) {\n        vl = __riscv_vsetvl_e32m1(n_unsigned - start + 1);\n        vuint32m1_t vid = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t v = __riscv_vadd_vx_u32m1(vid, start, vl);\n\n        vuint32m1_t v_div10 = __riscv_vdivu_vx_u32m1(v, 10, vl);\n        vuint32m1_t v_d0 = __riscv_vremu_vx_u32m1(v, 10, vl);\n        vuint32m1_t v_d1 = __riscv_vremu_vx_u32m1(v_div10, 10, vl);\n        vuint32m1_t v_div100 = __riscv_vdivu_vx_u32m1(v, 100, vl);\n        vuint32m1_t v_d2 = __riscv_vremu_vx_u32m1(v_div100, 10, vl);\n        vuint32m1_t v_div1000 = __riscv_vdivu_vx_u32m1(v, 1000, vl);\n        vuint32m1_t v_d3 = __riscv_vremu_vx_u32m1(v_div1000, 10, vl);\n\n        vbool32_t mask1 = __riscv_vmsleu_vx_u32m1_b32(v, 9, vl);\n        vbool32_t mask2_1 = __riscv_vmsgtu_vx_u32m1_b32(v, 9, vl);\n        vbool32_t mask2_2 = __riscv_vmsleu_vx_u32m1_b32(v, 99, vl);\n        vbool32_t mask2_d = __riscv_vmseq_vv_u32m1_b32(v_d0, v_d1, vl);\n        vbool32_t mask2 = __riscv_vmand_mm_b32(mask2_1, mask2_2, vl);\n        mask2 = __riscv_vmand_mm_b32(mask2, mask2_d, vl);\n\n        vbool32_t mask3_1 = __riscv_vmsgtu_vx_u32m1_b32(v, 99, vl);\n        vbool32_t mask3_2 = __riscv_vmsleu_vx_u32m1_b32(v, 999, vl);\n        vbool32_t mask3_d = __riscv_vmseq_vv_u32m1_b32(v_d0, v_d2, vl);\n        vbool32_t mask3 = __riscv_vmand_mm_b32(mask3_1, mask3_2, vl);\n        mask3 = __riscv_vmand_mm_b32(mask3, mask3_d, vl);\n\n        vbool32_t mask4_1 = __riscv_vmsgtu_vx_u32m1_b32(v, 999, vl);\n        vbool32_t mask4_d1 = __riscv_vmseq_vv_u32m1_b32(v_d0, v_d3, vl);\n        vbool32_t mask4_d2 = __riscv_vmseq_vv_u32m1_b32(v_d1, v_d2, vl);\n        vbool32_t mask4 = __riscv_vmand_mm_b32(mask4_1, mask4_d1, vl);\n        mask4 = __riscv_vmand_mm_b32(mask4, mask4_d2, vl);\n\n        vbool32_t mask_pal = __riscv_vmor_mm_b32(mask1, mask2, vl);\n        mask_pal = __riscv_vmor_mm_b32(mask_pal, mask3, vl);\n        mask_pal = __riscv_vmor_mm_b32(mask_pal, mask4, vl);\n\n        vuint32m1_t v_rem2 = __riscv_vremu_vx_u32m1(v, 2, vl);\n        vbool32_t mask_even = __riscv_vmseq_vx_u32m1_b32(v_rem2, 0, vl);\n        vbool32_t mask_odd = __riscv_vmseq_vx_u32m1_b32(v_rem2, 1, vl);\n\n        vbool32_t mask_even_pal = __riscv_vmand_mm_b32(mask_pal, mask_even, vl);\n        vbool32_t mask_odd_pal = __riscv_vmand_mm_b32(mask_pal, mask_odd, vl);\n\n        even_count += __riscv_vcpop_m_b32(mask_even_pal, vl);\n        odd_count += __riscv_vcpop_m_b32(mask_odd_pal, vl);\n    }\n\n    std::vector<int> result;\n    result.push_back(static_cast<int>(even_count));\n    result.push_back(static_cast<int>(odd_count));\n    return result;\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    uint32_t even_count = 0;\n    uint32_t odd_count = 0;\n    size_t vl;\n    uint32_t i = 1;\n    while (i <= (uint32_t)n) {\n        vl = __riscv_vsetvl_e32m1(n - i + 1);\n        vint32m1_t vid = __riscv_vid_v_i32m1(vl);\n        vint32m1_t vx_signed = __riscv_vadd_vx_i32m1(vid, i, vl);\n        vuint32m1_t vxu = __riscv_vreinterpret_v_i32m1_u32m1(vx_signed);\n        \n        vuint32m1_t v_ten = __riscv_vmv_v_x_u32m1(10, vl);\n        vuint32m1_t v_hundred = __riscv_vmv_v_x_u32m1(100, vl);\n        vuint32m1_t v_thousand = __riscv_vmv_v_x_u32m1(1000, vl);\n        \n        vuint32m1_t v_d0 = __riscv_vremu_vv_u32m1(vxu, v_ten, vl);\n        vuint32m1_t v_temp = __riscv_vdivu_vv_u32m1(vxu, v_ten, vl);\n        vuint32m1_t v_d1 = __riscv_vremu_vv_u32m1(v_temp, v_ten, vl);\n        \n        v_temp = __riscv_vdivu_vv_u32m1(vxu, v_hundred, vl);\n        vuint32m1_t v_d2 = __riscv_vremu_vv_u32m1(v_temp, v_ten, vl);\n        \n        v_temp = __riscv_vdivu_vv_u32m1(vxu, v_thousand, vl);\n        vuint32m1_t v_d3 = __riscv_vremu_vv_u32m1(v_temp, v_ten, vl);\n        \n        vbool32_t mask1 = __riscv_vmsltu_vx_u32m1_b32(vxu, 10, vl);\n        vbool32_t mask_lt_100 = __riscv_vmsltu_vx_u32m1_b32(vxu, 100, vl);\n        vbool32_t mask2 = __riscv_vmand_mm_b32(__riscv_vmnot_m_b32(mask1, vl), mask_lt_100, vl);\n        \n        vbool32_t mask_lt_1000 = __riscv_vmsltu_vx_u32m1_b32(vxu, 1000, vl);\n        vbool32_t mask_ge_100 = __riscv_vmnot_m_b32(mask_lt_100, vl);\n        vbool32_t mask3 = __riscv_vmand_mm_b32(mask_ge_100, mask_lt_1000, vl);\n        vbool32_t mask4 = __riscv_vmnot_m_b32(mask_lt_1000, vl);\n        \n        vbool32_t cond1 = mask1;\n        vbool32_t cond2 = __riscv_vmand_mm_b32(mask2, __riscv_vmseq_vv_u32m1_b32(v_d0, v_d1, vl), vl);\n        vbool32_t cond3 = __riscv_vmand_mm_b32(mask3, __riscv_vmseq_vv_u32m1_b32(v_d0, v_d2, vl), vl);\n        vbool32_t cond4 = __riscv_vmand_mm_b32(mask4, \n            __riscv_vmand_mm_b32(\n                __riscv_vmseq_vv_u32m1_b32(v_d0, v_d3, vl),\n                __riscv_vmseq_vv_u32m1_b32(v_d1, v_d2, vl),\n                vl\n            ), \n            vl\n        );\n        \n        vbool32_t total_palindrome = __riscv_vmorr_mm_b32(cond1, cond2, vl);\n        total_palindrome = __riscv_vmorr_mm_b32(total_palindrome, cond3, vl);\n        total_palindrome = __riscv_vmorr_mm_b32(total_palindrome, cond4, vl);\n        \n        vuint32m1_t v_lsb = __riscv_vand_vx_u32m1(vxu, 1, vl);\n        vbool32_t even_mask = __riscv_vmseq_vx_u32m1_b32(v_lsb, 0, vl);\n        vbool32_t odd_mask = __riscv_vmseq_vx_u32m1_b32(v_lsb, 1, vl);\n        \n        vbool32_t even_palindrome = __riscv_vmand_mm_b32(total_palindrome, even_mask, vl);\n        vbool32_t odd_palindrome = __riscv_vmand_mm_b32(total_palindrome, odd_mask, vl);\n        \n        even_count += __riscv_vpopc_m_b32(even_palindrome, vl);\n        odd_count += __riscv_vpopc_m_b32(odd_palindrome, vl);\n        \n        i += vl;\n    }\n    \n    return {static_cast<int>(even_count), static_cast<int>(odd_count)};\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t total = n.size();\n    int count = 0;\n    size_t vl;\n    for (size_t avl = total; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(&n[total - avl], vl);\n        vbool32_t mask_neg = __riscv_vmslt_vx_i32m1_b32(vec, 0, vl);\n        vint32m1_t abs_vec = __riscv_vabs_v_i32m1(vec, vl);\n        vint32m1_t temp = abs_vec;\n        vint32m1_t digit_sum = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t msd = __riscv_vmv_v_x_i32m1(0, vl);\n        vbool32_t active = __riscv_vmsne_vx_i32m1_b32(temp, 0, vl);\n        for (int i = 0; i < 10; ++i) {\n            if (__riscv_vfirst_m_b32(active, vl) < 0) break;\n            vint32m1_t rem = __riscv_vrem_vx_i32m1_m(active, __riscv_vundefined_i32m1(), temp, 10, vl);\n            temp = __riscv_vdiv_vx_i32m1_m(active, temp, temp, 10, vl);\n            digit_sum = __riscv_vadd_vv_i32m1_m(active, digit_sum, digit_sum, rem, vl);\n            msd = __riscv_vmerge_vvm_i32m1(active, msd, rem, vl);\n            vbool32_t non_zero = __riscv_vmsne_vx_i32m1_b32(temp, 0, vl);\n            active = __riscv_vmand_mm_b32(active, non_zero, vl);\n        }\n        vint32m1_t adjusted = __riscv_vsub_vv_i32m1(digit_sum, __riscv_vmul_vx_i32m1(msd, 2, vl), vl);\n        adjusted = __riscv_vmerge_vvm_i32m1(mask_neg, digit_sum, adjusted, vl);\n        vbool32_t cond = __riscv_vmsgt_vx_i32m1_b32(adjusted, 0, vl);\n        count += __riscv_vcpop_m_b32(cond, vl);\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    size_t vl;\n    for (size_t i = 0; i < n.size(); i += vl) {\n        vl = vsetvl_e32m1(n.size() - i);\n        vint32m1_t v = vle32_v_i32m1(&n[i], vl);\n        vint32m1_t v_abs = vabs_v_i32m1(v, vl);\n        vbool32_t mask_neg = vmslt_vx_i32m1_b32(v, 0, vl);\n        int32_t arr_abs[vl];\n        vse32_v_i32m1(arr_abs, v_abs, vl);\n        uint32_t mask_arr[vl];\n        vse32_v_u32m1(mask_arr, (vuint32m1_t)mask_neg, vl);\n        for (int j = 0; j < vl; j++) {\n            int x = arr_abs[j];\n            int sum = 0;\n            int msd = 0;\n            if (x > 0) {\n                int divisor = 1;\n                int temp = x;\n                while (temp >= 10) {\n                    divisor *= 10;\n                    temp /= 10;\n                }\n                msd = x / divisor;\n                while (x) {\n                    sum += x % 10;\n                    x /= 10;\n                }\n            }\n            if (mask_arr[j]) {\n                sum -= 2 * msd;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_nums_simd(std::vector<int> nums) {\n    if (nums.empty()) {\n        return 0;\n    }\n    int cnt = 0;\n    size_t n = nums.size();\n    int *ptr = nums.data();\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(ptr, vl);\n        ptr += vl;\n        vbool32_t sign_mask = __riscv_vmslt_vx_i32m1(vec, 0, vl);\n        vint32m1_t neg_vec = __riscv_vrsub_vx_i32m1(vec, 0, vl);\n        vint32m1_t v_abs = __riscv_vmerge_vvm_i32m1(sign_mask, neg_vec, vec, vl);\n        vint32m1_t t = v_abs;\n        for (int i = 0; i < 10; i++) {\n            vbool32_t mask = __riscv_vmsgt_vx_i32m1_b32(t, 9, vl);\n            t = __riscv_vdiv_vx_i32m1_m(mask, t, t, 10, vl);\n        }\n        vint32m1_t msd = t;\n        vint32m1_t current = v_abs;\n        vint32m1_t total_sum = __riscv_vmv_v_x_i32m1(0, vl);\n        for (int i = 0; i < 10; i++) {\n            vint32m1_t digit = __riscv_vrem_vx_i32m1(current, 10, vl);\n            total_sum = __riscv_vadd_vv_i32m1(total_sum, digit, vl);\n            current = __riscv_vdiv_vx_i32m1(current, 10, vl);\n        }\n        vint32m1_t adjustment = __riscv_vsll_vx_i32m1(msd, 1, vl);\n        adjustment = __riscv_vmerge_vvm_i32m1(sign_mask, adjustment, __riscv_vmv_v_x_i32m1(0, vl), vl);\n        vint32m1_t signed_sum = __riscv_vsub_vv_i32m1(total_sum, adjustment, vl);\n        vbool32_t mask_positive = __riscv_vmsgt_vx_i32m1_b32(signed_sum, 0, vl);\n        cnt += __riscv_vcpop_m_b32(mask_positive, vl);\n    }\n    return cnt;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t total = n.size();\n    if (total == 0) {\n        return 0;\n    }\n    \n    int count = 0;\n    size_t vl;\n    vint32m1_t v_zero_i32;\n    for (size_t i = 0; i < total; i += vl) {\n        vl = __riscv_vsetvl_e32m1(total - i);\n        vint32m1_t v_x = __riscv_vle32_v_i32m1(&n[i], vl);\n        vbool32_t mask_neg = __riscv_vmslt_vx_i32m1_b32(v_x, 0, vl);\n        v_zero_i32 = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t v_neg = __riscv_vsub_vv_i32m1(v_zero_i32, v_x, vl);\n        vint32m1_t v_abs_i32 = __riscv_vmerge_vvm_i32m1(mask_neg, v_neg, v_x, vl);\n        vuint32m1_t v_abs = __riscv_vreinterpret_v_i32m1_u32m1(v_abs_i32);\n        vuint32m1_t v_cur = v_abs;\n        vuint32m1_t v_s = __riscv_vmv_v_x_u32m1(0, vl);\n        vuint32m1_t v_first = __riscv_vmv_v_x_u32m1(0, vl);\n        vbool32_t mask_nonzero = __riscv_vmsne_vx_u32m1_b32(v_cur, 0, vl);\n        \n        for (int j = 0; j < 10; j++) {\n            vuint32m1_t v_digit = __riscv_vremu_vx_u32m1(v_cur, 10, vl);\n            v_s = __riscv_vadd_vv_u32m1(v_s, v_digit, vl);\n            vuint32m1_t v_cur_next = __riscv_vdivu_vx_u32m1(v_cur, 10, vl);\n            vbool32_t mask_cur_next_zero = __riscv_vmseq_vx_u32m1_b32(v_cur_next, 0, vl);\n            vbool32_t mask_set_first = __riscv_vmand_mm_b32(mask_cur_next_zero, mask_nonzero, vl);\n            v_first = __riscv_vmerge_vvm_u32m1(mask_set_first, v_digit, v_first, vl);\n            v_cur = v_cur_next;\n            mask_nonzero = __riscv_vmsne_vx_u32m1_b32(v_cur, 0, vl);\n        }\n        \n        vint32m1_t v_s_signed = __riscv_vreinterpret_v_u32m1_i32m1(v_s);\n        vint32m1_t v_first_signed = __riscv_vreinterpret_v_u32m1_i32m1(v_first);\n        vint32m1_t v_adjust = __riscv_vmul_vx_i32m1(v_first_signed, 2, vl);\n        vint32m1_t v_s_adj = __riscv_vsub_vv_i32m1(v_s_signed, v_adjust, vl);\n        vint32m1_t v_result = __riscv_vmerge_vvm_i32m1(mask_neg, v_s_adj, v_s_signed, vl);\n        vbool32_t mask_positive = __riscv_vmsgt_vx_i32m1_b32(v_result, 0, vl);\n        count += __riscv_vcpop_m_b32(mask_positive, vl);\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t n_elem = n.size();\n    int count = 0;\n    size_t vl;\n    for (size_t i = 0; i < n_elem; i += vl) {\n        vl = vsetvl_e32m1(n_elem - i);\n        vint32m1_t v_n = vle32_v_i32m1(&n[i], vl);\n        vbool32_t neg_mask = vmslt_vx_i32m1_b32(v_n, 0, vl);\n        vbool32_t min_mask = vmseq_vx_i32m1_b32(v_n, 0x80000000, vl);\n        vbool32_t neg_nonmin_mask = vmand_mm_b32(neg_mask, vmnot_m_b32(min_mask, vl), vl);\n        vuint32m1_t v_abs = vreinterpret_u_v_i32m1(v_n);\n        vuint32m1_t v_abs_neg = vreinterpret_u_v_i32m1(vneg_v_i32m1_m(neg_nonmin_mask, v_n, v_n, vl));\n        v_abs = vmerge_vvm_u32m1(neg_nonmin_mask, v_abs, v_abs_neg, vl);\n        vuint32m1_t v_min_val = vmv_v_x_u32m1(0x80000000, vl);\n        v_abs = vmerge_vvm_u32m1(min_mask, v_abs, v_min_val, vl);\n        vuint32m1_t v_cur = v_abs;\n        vuint32m1_t v_ten = vmv_v_x_u32m1(10, vl);\n        vuint32m1_t v_sum = vmv_v_x_u32m1(0, vl);\n        vuint32m1_t v_msd = vmv_v_x_u32m1(0, vl);\n        for (int j = 0; j < 10; j++) {\n            vuint32m1_t v_digit = vremu_vv_u32m1(v_cur, v_ten, vl);\n            v_cur = vdivu_vv_u32m1(v_cur, v_ten, vl);\n            v_sum = vadd_vv_u32m1(v_sum, v_digit, vl);\n            vbool32_t digit_nonzero = vmsne_vx_u32m1_b32(v_digit, 0, vl);\n            v_msd = vmerge_vvm_u32m1(digit_nonzero, v_msd, v_digit, vl);\n        }\n        vint32m1_t v_sum_s = vreinterpret_v_u32m1_i32m1(v_sum);\n        vint32m1_t v_msd_s = vreinterpret_v_u32m1_i32m1(v_msd);\n        vint32m1_t v_adjust = vmul_vx_i32m1(v_msd_s, 2, vl);\n        vint32m1_t v_total_neg = vsub_vv_i32m1(v_sum_s, v_adjust, vl);\n        vint32m1_t v_total = vmerge_vvm_i32m1(neg_mask, v_total_neg, v_sum_s, vl);\n        vbool32_t pos_mask = vmsgt_vx_i32m1_b32(v_total, 0, vl);\n        count += vcpop_m_b32(pos_mask, vl);\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n <= 1) {\n        return true;\n    }\n\n    size_t n_minus_one = n - 1;\n    unsigned long int cnt = 0;\n    size_t vl;\n    const int *data = arr.data();\n\n    for (size_t i = 0; i < n_minus_one; ) {\n        vl = __riscv_vsetvl_e32m1(n_minus_one - i);\n        vint32m1_t a_vec = __riscv_vle32_v_i32m1(data + i, vl);\n        vint32m1_t a_next_vec = __riscv_vle32_v_i32m1(data + i + 1, vl);\n        vbool32_t mask = __riscv_vmsgt_vv_i32m1_b32(a_vec, a_next_vec, vl);\n        cnt += __riscv_vcpop_m_b32(mask, vl);\n        i += vl;\n    }\n\n    if (data[n - 1] > data[0]) {\n        cnt++;\n    }\n\n    return cnt <= 1;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n <= 1) \n        return true;\n\n    size_t n_minus1 = n - 1;\n    size_t linear_count = 0;\n    size_t vl;\n    for (size_t i = 0; i < n_minus1; ) {\n        vl = __riscv_vsetvl_e32m1(n_minus1 - i);\n        vint32m1_t v1 = __riscv_vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t v2 = __riscv_vle32_v_i32m1(&arr[i+1], vl);\n        vbool32_t mask = __riscv_vmsgt_vv_i32m1_b32(v1, v2, vl);\n        linear_count += __riscv_vcpop_m_b32(mask, vl);\n        i += vl;\n    }\n\n    if (arr[n-1] > arr[0])\n        linear_count++;\n\n    return linear_count <= 1;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n == 0) return true;\n    if (n == 1) return true;\n\n    int *ptr = arr.data();\n    int min_val = INT_MAX;\n    size_t min_index = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m8(n - i);\n        vint32m8_t vec = vle32_v_i32m8(ptr + i, vl);\n        vint32m1_t v_min = vmv_s_x_i32m1(INT_MAX, 1);\n        v_min = vredmin_vs_i32m8_i32m1(v_min, vec, v_min, vl);\n        int seg_min = vmv_x_s_i32m1_i32(v_min);\n        if (seg_min < min_val) {\n            min_val = seg_min;\n            vbool4_t mask = vmseq_vx_i32m8_b4(vec, seg_min, vl);\n            int index_in_vec = vfirst_m_b4(mask, vl);\n            if (index_in_vec >= 0) {\n                min_index = i + (size_t)index_in_vec;\n            }\n        }\n        i += vl;\n    }\n\n    size_t tail_pairs = (min_index <= n-2) ? (n - min_index - 1) : 0;\n    size_t head_pairs = (min_index >= 2) ? (min_index - 1) : 0;\n\n    if (tail_pairs > 0) {\n        for (size_t i = 0; i < tail_pairs; ) {\n            vl = vsetvl_e32m8(tail_pairs - i);\n            vint32m8_t a = vle32_v_i32m8(ptr + min_index + i, vl);\n            vint32m8_t b = vle32_v_i32m8(ptr + min_index + i + 1, vl);\n            vbool4_t cmp = vmslt_vv_i32m8_b4(a, b, vl);\n            size_t cnt = vcpop_m_b4(cmp, vl);\n            if (cnt != vl) {\n                return false;\n            }\n            i += vl;\n        }\n    }\n\n    if (min_index != 0) {\n        if (arr[n-1] >= arr[0]) {\n            return false;\n        }\n    }\n\n    if (head_pairs > 0) {\n        for (size_t i = 0; i < head_pairs; ) {\n            vl = vsetvl_e32m8(head_pairs - i);\n            vint32m8_t a = vle32_v_i32m8(ptr + i, vl);\n            vint32m8_t b = vle32_v_i32m8(ptr + i + 1, vl);\n            vbool4_t cmp = vmslt_vv_i32m8_b4(a, b, vl);\n            size_t cnt = vcpop_m_b4(cmp, vl);\n            if (cnt != vl) {\n                return false;\n            }\n            i += vl;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n == 0) {\n        return true;\n    }\n\n    size_t avl = n - 1;\n    unsigned long count = 0;\n    int *base = arr.data();\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t v0 = __riscv_vle32_v_i32m1(base, vl);\n        vint32m1_t v1 = __riscv_vle32_v_i32m1(base + 1, vl);\n        vbool32_t mask = __riscv_vmsgt_vv_i32m1_b32(v0, v1, vl);\n        count += __riscv_vcpop_m_b32(mask, vl);\n        base += vl;\n        avl -= vl;\n    }\n\n    if (count == 0) {\n        return true;\n    } else if (count == 1) {\n        return (arr[n-1] <= arr[0]);\n    } else {\n        return false;\n    }\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n == 0) \n        return true;\n    \n    int count = 0;\n    const int *data = arr.data();\n    size_t vl;\n    \n    for (size_t i = 0; i < n - 1; ) {\n        vl = vsetvl_e32m8(n - 1 - i);\n        vint32m8_t current = vle32_v_i32m8(data + i, vl);\n        vint32m8_t next = vle32_v_i32m8(data + i + 1, vl);\n        vbool4_t mask = vmsgt_vv_i32m8_b4(current, next, vl);\n        count += vpopc_m_b4(mask, vl);\n        i += vl;\n    }\n    \n    if (data[n - 1] > data[0]) \n        count++;\n    \n    return count <= 1;\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n1 = lst1.size();\n    size_t n2 = lst2.size();\n    unsigned long total_evens = 0;\n\n    // Process lst1\n    size_t avl1 = n1;\n    while (avl1 > 0) {\n        size_t vl = vsetvl_e32m1(avl1);\n        vint32m1_t vec = vle32_v_i32m1(&lst1[n1 - avl1], vl);\n        vint32m1_t low_bits = vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask = vmseq_vx_i32m1_b32(low_bits, 0, vl);\n        total_evens += vcpop_m_b32(mask, vl);\n        avl1 -= vl;\n    }\n\n    // Process lst2\n    size_t avl2 = n2;\n    while (avl2 > 0) {\n        size_t vl = vsetvl_e32m1(avl2);\n        vint32m1_t vec = vle32_v_i32m1(&lst2[n2 - avl2], vl);\n        vint32m1_t low_bits = vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask = vmseq_vx_i32m1_b32(low_bits, 0, vl);\n        total_evens += vcpop_m_b32(mask, vl);\n        avl2 -= vl;\n    }\n\n    return (total_evens >= n1) ? \"YES\" : \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t total_even = 0;\n    const int* ptr;\n    size_t n, vl;\n    vint32m1_t vec;\n    vint32m1_t and_vec;\n    vbool32_t mask;\n    size_t cnt;\n\n    // Count even numbers in lst1\n    ptr = lst1.data();\n    n = lst1.size();\n    for (size_t avl = n; avl > 0; avl -= vl, ptr += vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vec = __riscv_vle32_v_i32m1(ptr, vl);\n        and_vec = __riscv_vand_vx_i32m1(vec, 1, vl);\n        mask = __riscv_vmseq_vx_i32m1_b32(and_vec, 0, vl);\n        cnt = __riscv_vpopc_b32(mask, vl);\n        total_even += cnt;\n    }\n\n    // Count even numbers in lst2\n    ptr = lst2.data();\n    n = lst2.size();\n    for (size_t avl = n; avl > 0; avl -= vl, ptr += vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vec = __riscv_vle32_v_i32m1(ptr, vl);\n        and_vec = __riscv_vand_vx_i32m1(vec, 1, vl);\n        mask = __riscv_vmseq_vx_i32m1_b32(and_vec, 0, vl);\n        cnt = __riscv_vpopc_b32(mask, vl);\n        total_even += cnt;\n    }\n\n    if (total_even >= lst1.size()) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t total_count = lst1.size();\n    size_t count_even = 0;\n    size_t vl;\n    const int* ptr;\n    size_t n;\n\n    ptr = lst1.data();\n    n = lst1.size();\n    while (n > 0) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(ptr, vl);\n        vint32m1_t mod = __riscv_vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(mod, 0, vl);\n        count_even += __riscv_vcpop_m_b32(mask, vl);\n        ptr += vl;\n        n -= vl;\n    }\n\n    ptr = lst2.data();\n    n = lst2.size();\n    while (n > 0) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(ptr, vl);\n        vint32m1_t mod = __riscv_vand_vx_i32m1(vec, 1, vl);\n        vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(mod, 0, vl);\n        count_even += __riscv_vcpop_m_b32(mask, vl);\n        ptr += vl;\n        n -= vl;\n    }\n\n    if (count_even >= total_count) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t even1 = 0;\n    size_t even2 = 0;\n    size_t n1 = lst1.size();\n    size_t n2 = lst2.size();\n    const int* ptr1 = lst1.data();\n    const int* ptr2 = lst2.data();\n    size_t vl;\n\n    while (n1 > 0) {\n        vl = vsetvl_e32m1(n1);\n        vint32m1_t vec1 = vle32_v_i32m1(ptr1, vl);\n        vint32m1_t and_vec1 = vand_vx_i32m1(vec1, 1, vl);\n        vbool32_t mask1 = vmseq_vx_i32m1_b32(and_vec1, 0, vl);\n        even1 += vcpop_m_b32(mask1, vl);\n        n1 -= vl;\n        ptr1 += vl;\n    }\n\n    while (n2 > 0) {\n        vl = vsetvl_e32m1(n2);\n        vint32m1_t vec2 = vle32_v_i32m1(ptr2, vl);\n        vint32m1_t and_vec2 = vand_vx_i32m1(vec2, 1, vl);\n        vbool32_t mask2 = vmseq_vx_i32m1_b32(and_vec2, 0, vl);\n        even2 += vcpop_m_b32(mask2, vl);\n        n2 -= vl;\n        ptr2 += vl;\n    }\n\n    if (even1 + even2 >= lst1.size()) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t total_even = 0;\n    const int* ptr1 = lst1.data();\n    size_t n1 = lst1.size();\n    size_t avl1 = n1;\n    size_t vl;\n    vint32m1_t v1, v_and1;\n    vbool32_t mask1;\n\n    while (avl1 > 0) {\n        vl = vsetvl_e32m1(avl1);\n        v1 = vle32_v_i32m1(ptr1, vl);\n        v_and1 = vand_vx_i32m1(v1, 1, vl);\n        mask1 = vmseq_vx_i32m1_b32(v_and1, 0, vl);\n        total_even += vcpop_m_b32(mask1, vl);\n        ptr1 += vl;\n        avl1 -= vl;\n    }\n\n    const int* ptr2 = lst2.data();\n    size_t n2 = lst2.size();\n    size_t avl2 = n2;\n    vint32m1_t v2, v_and2;\n    vbool32_t mask2;\n\n    while (avl2 > 0) {\n        vl = vsetvl_e32m1(avl2);\n        v2 = vle32_v_i32m1(ptr2, vl);\n        v_and2 = vand_vx_i32m1(v2, 1, vl);\n        mask2 = vmseq_vx_i32m1_b32(v_and2, 0, vl);\n        total_even += vcpop_m_b32(mask2, vl);\n        ptr2 += vl;\n        avl2 -= vl;\n    }\n\n    if (total_even >= lst1.size()) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```c\n#include <vector>\n#include <string>\n#include <cstddef>\n#include <riscv_vector.h>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    for (const auto& s : lst) {\n        size_t n = s.size();\n        size_t total_count = 0;\n        size_t vl;\n        for (size_t pos = 0; pos < n; ) {\n            vl = __riscv_vsetvl_e8m1(n - pos);\n            vuint8m1_t v_chars = __riscv_vle8_v_u8m1((const uint8_t*)(s.data() + pos), vl);\n            vuint8m1_t v_lsb = __riscv_vand_vx_u8m1(v_chars, 1, vl);\n            vbool8_t mask = __riscv_vmseq_vx_u8m1_b8(v_lsb, 1, vl);\n            total_count += __riscv_vcpop_m_b8(mask, vl);\n            pos += vl;\n        }\n        std::string base = \"the number of odd elements in the string i of the input.\";\n        std::string count_str = std::to_string(total_count);\n        std::string new_string;\n        for (char c : base) {\n            if (c == 'i') {\n                new_string += count_str;\n            } else {\n                new_string.push_back(c);\n            }\n        }\n        result.push_back(new_string);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n#include <cstdint>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> res;\n    for (const auto& s : lst) {\n        size_t n = s.size();\n        const char *ptr = s.c_str();\n        uint64_t count = 0;\n        size_t vl;\n        for (size_t avl = n; avl > 0; ) {\n            vl = __riscv_vsetvl_e8m8(avl);\n            vuint8m8_t v_ch = __riscv_vle8_v_u8m8(reinterpret_cast<const uint8_t*>(ptr), vl);\n            vuint8m8_t v_odd = __riscv_vand_vx_u8m8(v_ch, 1, vl);\n            vuint16m1_t v_sum16 = __riscv_vmv_v_x_u16m1(0, 1);\n            v_sum16 = __riscv_vwredsumu_vs_u8m8_u16m1(v_odd, v_sum16, vl);\n            uint16_t chunk_sum = __riscv_vmv_x_s_u16m1_u16(v_sum16);\n            count += chunk_sum;\n            ptr += vl;\n            avl -= vl;\n        }\n        std::string count_str = std::to_string(count);\n        std::string template_str = \"the number of odd elements in the string i of the input.\";\n        std::string output_str;\n        for (char c : template_str) {\n            if (c == 'i') {\n                output_str += count_str;\n            } else {\n                output_str += c;\n            }\n        }\n        res.push_back(output_str);\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n#include <cstdint>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    const std::string base_msg = \"the number of odd elements in the string i of the input.\";\n\n    for (const std::string& s : lst) {\n        size_t n = s.size();\n        const uint8_t *data = (const uint8_t*)s.c_str();\n        size_t vl;\n        uint32_t count = 0;\n\n        for (size_t avl = n; avl > 0; avl -= vl) {\n            vl = __riscv_vsetvl_e8m8(avl);\n            vuint8m8_t v_chars = __riscv_vle8_v_u8m8(data, vl);\n            vuint8m8_t v_digits = __riscv_vsub_vx_u8m8(v_chars, '0', vl);\n            vuint8m8_t v_odd = __riscv_vand_vx_u8m8(v_digits, 1, vl);\n\n            vuint16m1_t v_red = __riscv_vmv_v_x_u16m1(0, 1);\n            v_red = __riscv_vwredsumu_vs_u8m8_u16m1(v_odd, v_red, vl);\n            uint16_t sum_part = __riscv_vmv_x_s_u16m1_u16(v_red);\n            count += sum_part;\n\n            data += vl;\n        }\n\n        std::string count_str = std::to_string(count);\n        std::string new_msg;\n        for (char c : base_msg) {\n            if (c == 'i') {\n                new_msg += count_str;\n            } else {\n                new_msg.push_back(c);\n            }\n        }\n        result.push_back(new_msg);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst){\n    std::vector<std::string> result_vec;\n    for (const std::string& s : lst) {\n        size_t len = s.size();\n        const uint8_t *ptr = (const uint8_t*)s.data();\n        size_t count = 0;\n        size_t vl;\n        for (size_t avl = len; avl > 0; ) {\n            vl = vsetvl_e8m1(avl);\n            vuint8m1_t v_chars = vle8_v_u8m1(ptr, vl);\n            vuint8m1_t v_and = vand_vx_u8m1(v_chars, 1, vl);\n            vbool8_t mask = vmsne_vx_u8m1_b8(v_and, 0, vl);\n            count += vcpop_m_b8(mask, vl);\n            ptr += vl;\n            avl -= vl;\n        }\n        std::string count_str = std::to_string(count);\n        const std::string template_str = \"the number of odd elements in the string i of the input.\";\n        std::string new_str;\n        for (char c : template_str) {\n            if (c == 'i') {\n                new_str += count_str;\n            } else {\n                new_str += c;\n            }\n        }\n        result_vec.push_back(new_str);\n    }\n    return result_vec;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    for (const auto& s : lst) {\n        uint32_t count = 0;\n        const char* ptr = s.c_str();\n        size_t len = s.size();\n        size_t vl;\n        for (size_t avl = len; avl > 0; avl -= vl) {\n            vl = __riscv_vsetvl_e8m1(avl);\n            vuint8m1_t v = __riscv_vle8_v_u8m1((const uint8_t*)ptr, vl);\n            ptr += vl;\n\n            vuint8m1_t v_digit = __riscv_vsub_vx_u8m1(v, '0', vl);\n            vuint8m1_t v_odd = __riscv_vand_vx_u8m1(v_digit, 1, vl);\n\n            vuint16m1_t v_red = __riscv_vmv_s_x_u16m1(0, 1);\n            v_red = __riscv_vwredsum_vs_u8m1_u16m1(v_odd, v_red, vl);\n            uint16_t seg_sum = __riscv_vmv_x_s_u16m1_u16(v_red);\n            count += seg_sum;\n        }\n\n        std::string count_str = std::to_string(count);\n        std::string base = \"the number of odd elements in the string i of the input.\";\n        std::string output;\n        for (char c : base) {\n            if (c == 'i') {\n                output += count_str;\n            } else {\n                output += c;\n            }\n        }\n        result.push_back(output);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    int64_t total = 0;\n    int64_t max_prefix = 0;\n    int64_t min_sum = INT64_MAX;\n\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e64m1(n - i);\n        vint64m1_t vec = vle64_v_i64m1(&nums[i], vl);\n        int64_t temp[vl];\n        vse64_v_i64m1(temp, vec, vl);\n\n        for (size_t j = 0; j < vl; j++) {\n            total += temp[j];\n            int64_t candidate = total - max_prefix;\n            if (candidate < min_sum) {\n                min_sum = candidate;\n            }\n            if (total > max_prefix) {\n                max_prefix = total;\n            }\n        }\n        i += vl;\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <algorithm>\n#include <vector>\n#include <climits>\n\nstruct Segment {\n    int64_t total;\n    int64_t minp;\n    int64_t mins;\n    int64_t minsub;\n};\n\nSegment combine_segments(Segment a, Segment b) {\n    Segment res;\n    res.total = a.total + b.total;\n    res.minp = std::min(a.minp, a.total + b.minp);\n    res.mins = std::min(b.mins, b.total + a.mins);\n    res.minsub = std::min({a.minsub, b.minsub, a.mins + b.minp});\n    return res;\n}\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n    size_t vlmax = __riscv_vsetvlmax_e64m1();\n    size_t num_chunks = (n + vlmax - 1) / vlmax;\n\n    Segment *segments = new Segment[num_chunks];\n    const int64_t *data = nums.data();\n\n    for (size_t i = 0; i < num_chunks; ++i) {\n        size_t start = i * vlmax;\n        size_t end = std::min(start + vlmax, n);\n        size_t len = end - start;\n\n        vint64m1_t vec = __riscv_vle64_v_i64m1(data + start, len);\n        vint64m1_t v_zero = __riscv_vmv_v_x_i64m1(0, vlmax);\n        vint64m1_t sumv = __riscv_vredsum_vs_i64m1_i64m1(vec, v_zero, len);\n        int64_t total = __riscv_vmv_x_s_i64m1_i64(sumv);\n\n        int64_t min_prefix = LLONG_MAX;\n        int64_t prefix = 0;\n        for (size_t j = 0; j < len; ++j) {\n            prefix += data[start + j];\n            if (prefix < min_prefix) min_prefix = prefix;\n        }\n\n        int64_t min_suffix = LLONG_MAX;\n        int64_t suffix = 0;\n        for (size_t j = 0; j < len; ++j) {\n            suffix += data[start + len - 1 - j];\n            if (suffix < min_suffix) min_suffix = suffix;\n        }\n\n        int64_t min_sub = LLONG_MAX;\n        int64_t cur_min = 0;\n        for (size_t j = 0; j < len; ++j) {\n            if (j == 0) {\n                cur_min = data[start];\n            } else {\n                cur_min = std::min(data[start + j], cur_min + data[start + j]);\n            }\n            if (cur_min < min_sub) min_sub = cur_min;\n        }\n\n        segments[i] = {total, min_prefix, min_suffix, min_sub};\n    }\n\n    size_t current_chunks = num_chunks;\n    while (current_chunks > 1) {\n        size_t new_chunks = (current_chunks + 1) / 2;\n        for (size_t i = 0; i < new_chunks; ++i) {\n            if (2 * i + 1 < current_chunks) {\n                segments[i] = combine_segments(segments[2 * i], segments[2 * i + 1]);\n            } else {\n                segments[i] = segments[2 * i];\n            }\n        }\n        current_chunks = new_chunks;\n    }\n\n    int64_t result = segments[0].minsub;\n    delete[] segments;\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <algorithm>\n#include <limits>\n\nstruct State {\n    int64_t total;\n    int64_t best;\n    int64_t min_prefix;\n    int64_t min_suffix;\n};\n\nState combine_states(const State& a, const State& b) {\n    State c;\n    c.total = a.total + b.total;\n    c.best = std::min({a.best, b.best, a.min_suffix + b.min_prefix});\n    c.min_prefix = std::min(a.min_prefix, a.total + b.min_prefix);\n    c.min_suffix = std::min(b.min_suffix, b.total + a.min_suffix);\n    return c;\n}\n\nState compute_chunk_state(const int64_t* a, size_t len) {\n    State state;\n    if (len == 0) {\n        state.total = 0;\n        state.best = std::numeric_limits<int64_t>::max();\n        state.min_prefix = std::numeric_limits<int64_t>::max();\n        state.min_suffix = std::numeric_limits<int64_t>::max();\n        return state;\n    }\n\n    state.total = 0;\n    for (size_t i = 0; i < len; ++i) {\n        state.total += a[i];\n    }\n\n    int64_t min_ending_here = a[0];\n    state.best = a[0];\n    state.min_prefix = a[0];\n    int64_t current_prefix = a[0];\n\n    for (size_t i = 1; i < len; ++i) {\n        min_ending_here = std::min(a[i], min_ending_here + a[i]);\n        state.best = std::min(state.best, min_ending_here);\n        current_prefix += a[i];\n        state.min_prefix = std::min(state.min_prefix, current_prefix);\n    }\n\n    state.min_suffix = a[len - 1];\n    int64_t current_suffix = a[len - 1];\n    for (int i = len - 2; i >= 0; --i) {\n        current_suffix = a[i] + current_suffix;\n        state.min_suffix = std::min(state.min_suffix, current_suffix);\n    }\n\n    return state;\n}\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) {\n        return 0;\n    }\n\n    size_t avl = n;\n    size_t vl;\n    State state;\n    bool first = true;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e64m1(avl);\n        int64_t *chunk_data = new int64_t[vl];\n        vint64m1_t v_nums = vle64_v_i64m1(&nums[i], vl);\n        vse64_v_i64m1(chunk_data, v_nums, vl);\n        State chunk_state = compute_chunk_state(chunk_data, vl);\n        delete[] chunk_data;\n\n        if (first) {\n            state = chunk_state;\n            first = false;\n        } else {\n            state = combine_states(state, chunk_state);\n        }\n        i += vl;\n        avl -= vl;\n    }\n\n    return state.best;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    std::vector<int64_t> P(n + 1);\n    P[0] = 0;\n    for (size_t i = 0; i < n; ++i) {\n        P[i + 1] = P[i] + nums[i];\n    }\n\n    std::vector<int64_t> Q(n + 1);\n    Q[0] = P[0];\n    for (size_t i = 1; i <= n; ++i) {\n        Q[i] = (P[i] > Q[i - 1]) ? P[i] : Q[i - 1];\n    }\n\n    int64_t min_sum = INT64_MAX;\n    size_t vl;\n    vint64m1_t v_min_vec = vmv_v_x_i64m1(min_sum, 1);\n\n    for (size_t j = 1; j <= n; ) {\n        vl = vsetvl_e64m1(n - j + 1);\n        vint64m1_t v_P = vle64_v_i64m1(&P[j], vl);\n        vint64m1_t v_Q = vle64_v_i64m1(&Q[j - 1], vl);\n        vint64m1_t v_candidate = vsub_vv_i64m1(v_P, v_Q, vl);\n        v_min_vec = vredmin_vs_i64m1_i64m1(v_candidate, v_min_vec, vl);\n        j += vl;\n    }\n    min_sum = vmv_x_s_i64m1_i64(v_min_vec);\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <algorithm>\n#include <vector>\n#include <riscv_vector.h>\n\nstruct Tuple {\n    int64_t total;\n    int64_t max_prefix;\n    int64_t max_suffix;\n    int64_t max_subarray;\n};\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    if (nums.empty()) {\n        return 0;\n    }\n    size_t n = nums.size();\n    int64_t first = -nums[0];\n    Tuple current_tuple = {first, first, first, first};\n    size_t i = 1;\n    while (i < n) {\n        size_t vl = vsetvl_e64m1(n - i);\n        vint64m1_t nums_vec = vle64_v_i64m1(&nums[i], vl);\n        vint64m1_t b_vec = vrsub_vx_i64m1(nums_vec, 0, vl);\n        int64_t b_chunk[vl];\n        vse64_v_i64m1(b_chunk, b_vec, vl);\n        Tuple chunk_tuple = {b_chunk[0], b_chunk[0], b_chunk[0], b_chunk[0]};\n        for (size_t j = 1; j < vl; j++) {\n            int64_t x = b_chunk[j];\n            int64_t total = chunk_tuple.total + x;\n            int64_t max_prefix = std::max(chunk_tuple.max_prefix, chunk_tuple.total + x);\n            int64_t max_suffix = std::max(x, x + chunk_tuple.max_suffix);\n            int64_t option3 = chunk_tuple.max_suffix + x;\n            int64_t max_subarray = std::max({chunk_tuple.max_subarray, x, option3});\n            chunk_tuple = {total, max_prefix, max_suffix, max_subarray};\n        }\n        int64_t left_right = current_tuple.max_suffix + chunk_tuple.max_prefix;\n        int64_t total = current_tuple.total + chunk_tuple.total;\n        int64_t max_prefix = std::max(current_tuple.max_prefix, current_tuple.total + chunk_tuple.max_prefix);\n        int64_t max_suffix = std::max(chunk_tuple.max_suffix, chunk_tuple.total + current_tuple.max_suffix);\n        int64_t max_subarray = std::max({current_tuple.max_subarray, chunk_tuple.max_subarray, left_right});\n        current_tuple = {total, max_prefix, max_suffix, max_subarray};\n        i += vl;\n    }\n    return -current_tuple.max_subarray;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cstdint>\n\nint max_fill_simd(const std::vector<std::vector<int> > & grid, int capacity) {\n    int64_t total_ops = 0;\n    int n_rows = grid.size();\n    if (n_rows == 0) return 0;\n    int n_cols = grid[0].size();\n\n    for (int i = 0; i < n_rows; i++) {\n        const int* row_ptr = grid[i].data();\n        vint32m1_t v_row_sum_scalar = vmv_v_x_i32m1(0, 1);\n        size_t j = 0;\n        size_t vl;\n\n        while (j < n_cols) {\n            vl = vsetvl_e32m1(n_cols - j);\n            vint32m1_t v_data = vle32_v_i32m1(row_ptr + j, vl);\n            v_row_sum_scalar = vredsum_vs_i32m1_i32m1(v_row_sum_scalar, v_data, v_row_sum_scalar, vl);\n            j += vl;\n        }\n        int row_sum = vmv_x_s_i32m1_i32(v_row_sum_scalar);\n        if (row_sum > 0) {\n            total_ops += (static_cast<int64_t>(row_sum) + capacity - 1) / capacity;\n        }\n    }\n\n    return static_cast<int>(total_ops);\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int> > & grid, int capacity) {\n    if (grid.empty()) \n        return 0;\n    int n = grid.size();\n    int m = grid[0].size();\n    int total_ops = 0;\n\n    for (int i = 0; i < n; i++) {\n        const int* ptr = grid[i].data();\n        size_t j = 0;\n        int row_sum = 0;\n        size_t vl;\n\n        while (j < m) {\n            vl = __riscv_vsetvl_e32m1(m - j);\n            vint32m1_t v_data = __riscv_vle32_v_i32m1(ptr + j, vl);\n            vint32m1_t v_scalar = __riscv_vmv_v_x_i32m1(0, 1);\n            v_scalar = __riscv_vredsum_vs_i32m1_i32m1(v_data, v_scalar, vl);\n            int chunk_sum = __riscv_vmv_x_s_i32m1_i32(v_scalar);\n            row_sum += chunk_sum;\n            j += vl;\n        }\n        total_ops += (row_sum + capacity - 1) / capacity;\n    }\n\n    return total_ops;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int> > & grid, int capacity) {\n    if (grid.empty()) {\n        return 0;\n    }\n    long long total_times = 0;\n    int cols = grid[0].size();\n\n    for (const auto& row : grid) {\n        const int* row_ptr = row.data();\n        long long row_sum = 0;\n        size_t avl = cols;\n        while (avl > 0) {\n            size_t vl = __riscv_vsetvl_e32m1(avl);\n            vint32m1_t v = __riscv_vle32_v_i32m1(row_ptr, vl);\n            vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n            vint32m1_t v_red = __riscv_vredsum_vs_i32m1_i32m1(v, v_zero, vl);\n            int seg_sum = __riscv_vmv_x_s_i32m1_i32(v_red);\n            row_sum += seg_sum;\n            row_ptr += vl;\n            avl -= vl;\n        }\n        total_times += (row_sum + capacity - 1) / capacity;\n    }\n    return static_cast<int>(total_times);\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int> > & grid, int capacity) {\n    int total_bucket_lowers = 0;\n    int M = grid.size();\n    if (M == 0) \n        return 0;\n    \n    for (int i = 0; i < M; i++) {\n        const std::vector<int>& row = grid[i];\n        const int *ptr = row.data();\n        size_t n = row.size();\n        size_t vl_one = vsetvl_e32m1(1);\n        vint32m1_t v_acc = vmv_v_x_i32m1(0, vl_one);\n        size_t avl = n;\n        size_t vl;\n        while (avl > 0) {\n            vl = vsetvl_e32m1(avl);\n            vint32m1_t v_seg = vle32_v_i32m1(ptr, vl);\n            v_acc = vredsum_vs_i32m1_i32m1(v_seg, v_acc, vl);\n            ptr += vl;\n            avl -= vl;\n        }\n        int row_sum = vmv_x_s_i32m1_i32(v_acc);\n        total_bucket_lowers += (row_sum + capacity - 1) / capacity;\n    }\n    return total_bucket_lowers;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int> > & grid, int capacity) {\n    if (grid.empty()) return 0;\n    size_t nrows = grid.size();\n    size_t ncols = grid[0].size();\n    int total_operations = 0;\n\n    for (size_t i = 0; i < nrows; i++) {\n        const int* row_ptr = grid[i].data();\n        size_t n = ncols;\n        vint32m1_t sum_v = vmv_v_x_i32m1(0, 1);\n\n        size_t vl;\n        while (n > 0) {\n            vl = vsetvl_e32m8(n);\n            vint32m8_t v = vle32_v_i32m8(row_ptr, vl);\n            sum_v = vredsum_vs_i32m8_i32m1(sum_v, v, sum_v, vl);\n            row_ptr += vl;\n            n -= vl;\n        }\n\n        int row_sum = vmv_x_s_i32m1_i32(sum_v);\n        total_operations += (row_sum + capacity - 1) / capacity;\n    }\n\n    return total_operations;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    int64_t total_sum = 0;\n    size_t n = lst.size();\n    size_t i = 0;\n    int phase = 0;\n\n    while (i < n) {\n        size_t vl = vsetvl_e16m1(n - i);\n        vint16m1_t v_data = vle16_v_i16m1(&lst[i], vl);\n        vuint16m1_t v_seg_index = vid_v_u16m1(vl);\n        vuint16m1_t v_lsb = vand_vx_u16m1(v_seg_index, 1, vl);\n\n        vbool16_t mask_even;\n        if (phase == 0) {\n            mask_even = vmseq_vx_u16m1_b16(v_lsb, 0, vl);\n        } else {\n            mask_even = vmseq_vx_u16m1_b16(v_lsb, 1, vl);\n        }\n\n        vint16m1_t v_data_lsb = vand_vx_i16m1(v_data, 1, vl);\n        vbool16_t mask_odd = vmsne_vx_i16m1_b16(v_data_lsb, 0, vl);\n        vbool16_t mask = vmand_mm(mask_even, mask_odd);\n\n        vint64m1_t v_sum_seg = vmv_v_x_i64m1(0, vl);\n        v_sum_seg = vwredsum_vs_i16m1_i64m1_m(mask, v_data, v_sum_seg, vl);\n        int64_t seg_sum = vmv_x_s_i64m1_i64(v_sum_seg);\n        total_sum += seg_sum;\n\n        i += vl;\n        phase = (phase + vl) % 2;\n    }\n\n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    if (n == 0) return 0;\n    int64_t total = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e16m1((n - i + 1) / 2);\n        vint16m1_t data = __riscv_vlse16_v_i16m1(lst.data() + i, 2 * sizeof(int16_t), vl);\n        vint16m1_t and_result = __riscv_vand_vx_i16m1(data, 1, vl);\n        vbool16_t mask = __riscv_vmsne_vx_i16m1_b16(and_result, 0, vl);\n        vint16m1_t masked_data = __riscv_vmerge_vxm_i16m1(__riscv_vmv_v_x_i16m1(0, vl), data, mask, vl);\n        vint32m1_t masked_data32 = __riscv_vwadd_vx_i32m1(masked_data, 0, vl);\n        vint32m1_t vec_zero = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t seg_sum32 = __riscv_vredsum_vs_i32m1_i32m1(masked_data32, vec_zero, vl);\n        int32_t seg_sum = __riscv_vmv_x_s_i32m1_i32(seg_sum32);\n        total += (int64_t)seg_sum;\n        i += 2 * vl;\n    }\n    return total;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst){\n    size_t n = lst.size();\n    int64_t total_sum = 0;\n    size_t idx = 0;\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e16m1(avl);\n        vint16m1_t vec = vle16_v_i16m1(&lst[idx], vl);\n\n        vuint16m1_t local_index = vid_v_u16m1(vl);\n        vbool16_t even_mask;\n        if (idx % 2 == 0) {\n            even_mask = vmseq_vx_u16m1_b16(vand_vx_u16m1(local_index, 1, vl), 0, vl);\n        } else {\n            even_mask = vmseq_vx_u16m1_b16(vand_vx_u16m1(local_index, 1, vl), 1, vl);\n        }\n\n        vbool16_t odd_mask = vmsne_vx_i16m1_b16(vand_vx_i16m1(vec, 1, vl), 0, vl);\n        vbool16_t combined_mask = vmand_mm_b16(even_mask, odd_mask, vl);\n\n        vint16m1_t selected = vmerge_vxm_i16m1(combined_mask, vec, 0, vl);\n        vint32m1_t red_dest = vmv_v_x_i32m1(0, 1);\n        red_dest = vwredsum_vs_i16m1_i32m1(selected, red_dest, vl);\n        int32_t seg_sum = vmv_x_s_i32m1_i32(red_dest);\n        total_sum += (int64_t)seg_sum;\n\n        idx += vl;\n        avl -= vl;\n    }\n\n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    if (n == 0) return 0;\n    const int16_t* data_ptr = lst.data();\n    int64_t total = 0;\n    size_t i = 0;\n\n    while (i < n) {\n        size_t vl = __riscv_vsetvl_e16m1(n - i);\n        vint16m1_t v_data = __riscv_vle16_v_i16m1(data_ptr + i, vl);\n        uint16_t base_parity = i & 1;\n        vuint16m1_t v_local_idx = __riscv_vid_v_u16m1(vl);\n        vuint16m1_t v_local_parity = __riscv_vand_vx_u16m1(v_local_idx, 1, vl);\n        vbool16_t mask_even = __riscv_vmseq_vx_u16m1_b16(v_local_parity, base_parity, vl);\n        vint16m1_t v_mod_data = __riscv_vand_vx_i16m1(v_data, 1, vl);\n        vbool16_t mask_odd = __riscv_vmsne_vx_i16m1_b16(v_mod_data, 0, vl);\n        vbool16_t mask_comb = __riscv_vmand_mm(mask_even, mask_odd, vl);\n        vint16m1_t v_zero = __riscv_vmv_v_x_i16m1(0, vl);\n        vint16m1_t v_sum = __riscv_vredsum_vs_i16m1_i16m1_m(mask_comb, v_data, v_zero, vl);\n        int16_t seg_sum = __riscv_vmv_x_s_i16m1_i16(v_sum);\n        total += (int64_t)seg_sum;\n        i += vl;\n    }\n\n    return total;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst){\n    int64_t total = 0;\n    size_t n = lst.size();\n    if (n == 0) return 0;\n    size_t M = (n + 1) / 2;\n    size_t vl;\n    for (size_t i = 0; i < M; ) {\n        vl = __riscv_vsetvl_e16m1(M - i);\n        vint16m1_t even_chunk = __riscv_vlse16_v_i16m1(lst.data() + 2 * i, 4, vl);\n        vint16m1_t and_result = __riscv_vand_vx_i16m1(even_chunk, 1, vl);\n        vbool16_t mask_odd = __riscv_vmsne_vx_i16m1_b16(and_result, 0, vl);\n        vint32m1_t red_vec = __riscv_vmv_v_x_i32m1(0, vl);\n        red_vec = __riscv_vwredsum_vs_i16m1_i32m1(even_chunk, red_vec, mask_odd, vl);\n        int32_t chunk_sum = __riscv_vmv_x_s_i32m1_i32(red_vec);\n        total += chunk_sum;\n        i += vl;\n    }\n    return total;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int *ptr = arr.data();\n    int n = k;\n    vint32m1_t vsum = vmv_v_x_i32m1(0, 1);\n    size_t vl;\n    for (; n > 0; n -= vl, ptr += vl) {\n        vl = vsetvl_e32m1(n);\n        vint32m1_t vec = vle32_v_i32m1(ptr, vl);\n        vbool32_t mask_ge = vmnot_m_b32(vmslt_vx_i32m1_b32(vec, -99, vl), vl);\n        vbool32_t mask_le = vmsle_vx_i32m1_b32(vec, 99, vl);\n        vbool32_t mask_cond = vand_mm_b32(mask_ge, mask_le, vl);\n        vsum = vredsum_vs_i32m1_i32m1_m(mask_cond, vec, vsum, vl);\n    }\n    return vmv_x_s_i32m1_i32(vsum);\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int total = 0;\n    const int *ptr = arr.data();\n    size_t avl = k;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t v_arr = __riscv_vle32_v_i32m1(ptr, vl);\n        \n        vbool32_t mask_ge = __riscv_vmsge_vx_i32m1_b32(v_arr, -99, vl);\n        vbool32_t mask_le = __riscv_vmsle_vx_i32m1_b32(v_arr, 99, vl);\n        vbool32_t mask_cond = __riscv_vmand_mm_b32(mask_ge, mask_le, vl);\n        \n        vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t v_red = __riscv_vredsum_vs_i32m1_i32m1_m(mask_cond, v_arr, v_zero, vl);\n        \n        total += __riscv_vmv_x_s_i32m1_i32(v_red);\n        ptr += vl;\n        avl -= vl;\n    }\n    \n    return total;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    size_t n = static_cast<size_t>(k);\n    size_t vl;\n    vint32m1_t v_red = vmv_v_x_i32m1(0, 1);\n    int *ptr = arr.data();\n    size_t i = 0;\n\n    while (i < n) {\n        vl = vsetvl_e32m8(n - i);\n        vint32m8_t v_arr = vle32_v_i32m8(ptr + i, vl);\n        vbool4_t mask_ge = vmsge_vx_i32m8_b4(v_arr, -99, vl);\n        vbool4_t mask_le = vmsle_vx_i32m8_b4(v_arr, 99, vl);\n        vbool4_t mask = vmand_mm_b4(mask_ge, mask_le, vl);\n        v_red = vredsum_vs_i32m8_i32m1_m(mask, v_arr, v_red, vl);\n        i += vl;\n    }\n\n    int sum = vmv_x_s_i32m1(v_red);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int total = 0;\n    int *ptr = arr.data();\n    size_t avl = k;\n\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t vec = __riscv_vle32_v_i32m1(ptr, vl);\n\n        vbool32_t mask1 = __riscv_vmsgt_vx_i32m1_b32(vec, -100, vl);\n        vbool32_t mask2 = __riscv_vmslt_vx_i32m1_b32(vec, 100, vl);\n        vbool32_t mask_cond = __riscv_vmand_mm_b32(mask1, mask2, vl);\n\n        vint32m1_t v_zero = __riscv_vmv_v_x_i32m1(0, vl);\n        vint32m1_t selected = __riscv_vmerge_vvm_i32m1(v_zero, vec, mask_cond, vl);\n\n        vint32m1_t v_red = __riscv_vmv_v_x_i32m1(0, 1);\n        v_red = __riscv_vredsum_vs_i32m1_i32m1(selected, v_red, vl);\n        int seg_sum = __riscv_vmv_x_s_i32m1_i32(v_red);\n\n        total += seg_sum;\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return total;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    size_t n = k;\n    const int32_t *ptr = arr.data();\n    vint32m1_t accumulator = vmv_v_x_i32m1(0, 1);\n    size_t vl;\n\n    for (; n > 0; ) {\n        vl = vsetvl_e32m1(n);\n        vint32m1_t v = vle32_v_i32m1(ptr, vl);\n        vbool32_t mask1 = vmslt_vx_i32m1_b32(v, 100, vl);\n        vbool32_t mask2 = vmsgt_vx_i32m1_b32(v, -100, vl);\n        vbool32_t final_mask = vmand_mm_b32(mask1, mask2, vl);\n        accumulator = vredsum_vs_i32m1_i32m1_m(final_mask, v, accumulator, vl);\n        ptr += vl;\n        n -= vl;\n    }\n\n    int sum = vmv_x_s_i32m1_i32(accumulator);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) {\n        return true;\n    }\n\n    size_t vl;\n    for (size_t i = 0; i < n - 1; ) {\n        vl = vsetvl_e32m8(n - 1 - i);\n        vint32m8_t v_current = vle32_v_i32m8(&lst[i], vl);\n        vint32m8_t v_next = vle32_v_i32m8(&lst[i + 1], vl);\n        vbool4_t mask = vmsgt_vv_i32m8_b4(v_current, v_next, vl);\n        if (vfirst_m_b4(mask, vl) != -1) {\n            return false;\n        }\n        i += vl;\n    }\n\n    if (n < 3) {\n        return true;\n    }\n\n    for (size_t i = 0; i < n - 2; ) {\n        vl = vsetvl_e32m8(n - 2 - i);\n        vint32m8_t v0 = vle32_v_i32m8(&lst[i], vl);\n        vint32m8_t v1 = vle32_v_i32m8(&lst[i + 1], vl);\n        vint32m8_t v2 = vle32_v_i32m8(&lst[i + 2], vl);\n        vbool4_t mask1 = vmseq_vv_i32m8_b4(v0, v1, vl);\n        vbool4_t mask2 = vmseq_vv_i32m8_b4(v1, v2, vl);\n        vbool4_t mask = vmand_mm_b4(mask1, mask2, vl);\n        if (vfirst_m_b4(mask, vl) != -1) {\n            return false;\n        }\n        i += vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) {\n        return true;\n    }\n    const int *base = lst.data();\n    size_t avl = n - 1;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t v_current = vle32_v_i32m1(base, vl);\n        vint32m1_t v_next = vle32_v_i32m1(base + 1, vl);\n        vbool32_t mask = vmslt_vv_i32m1_b32(v_next, v_current, vl);\n        if (vfirst_m_b32(mask, vl) != -1) {\n            return false;\n        }\n        base += vl;\n        avl -= vl;\n    }\n    if (n < 3) {\n        return true;\n    }\n    base = lst.data();\n    avl = n - 2;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t v0 = vle32_v_i32m1(base, vl);\n        vint32m1_t v1 = vle32_v_i32m1(base + 1, vl);\n        vint32m1_t v2 = vle32_v_i32m1(base + 2, vl);\n        vbool32_t cmp1 = vmseq_vv_i32m1_b32(v0, v1, vl);\n        vbool32_t cmp2 = vmseq_vv_i32m1_b32(v0, v2, vl);\n        vbool32_t mask = vmand_mm_b32(cmp1, cmp2, vl);\n        if (vfirst_m_b32(mask, vl) != -1) {\n            return false;\n        }\n        base += vl;\n        avl -= vl;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) {\n        return true;\n    }\n\n    size_t vl;\n    vint32m8_t v1, v2;\n    vbool4_t mask;\n    for (size_t i = 0; i < n - 1; ) {\n        vl = vsetvl_e32m8(n - 1 - i);\n        v1 = vle32_v_i32m8(&lst[i], vl);\n        v2 = vle32_v_i32m8(&lst[i + 1], vl);\n        mask = vmslt_vv_i32m8_b4(v2, v1, vl);\n        if (vfirst_m_b4(mask, vl) != -1) {\n            return false;\n        }\n        i += vl;\n    }\n\n    if (n < 3) {\n        return true;\n    }\n\n    vint32m8_t v3;\n    vbool4_t mask1, mask2;\n    for (size_t i = 0; i < n - 2; ) {\n        vl = vsetvl_e32m8(n - 2 - i);\n        v1 = vle32_v_i32m8(&lst[i], vl);\n        v2 = vle32_v_i32m8(&lst[i + 1], vl);\n        v3 = vle32_v_i32m8(&lst[i + 2], vl);\n        mask1 = vmseq_vv_i32m8_b4(v1, v2, vl);\n        mask2 = vmseq_vv_i32m8_b4(v2, v3, vl);\n        mask = vmand_mm_b4(mask1, mask2, vl);\n        if (vfirst_m_b4(mask, vl) != -1) {\n            return false;\n        }\n        i += vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) return true;\n    if (n == 2) {\n        return lst[0] <= lst[1];\n    }\n\n    size_t avl = n - 1;\n    size_t vl;\n    for (size_t i = 0; avl > 0; ) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t current = __riscv_vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t next = __riscv_vle32_v_i32m1(&lst[i+1], vl);\n        vbool32_t leq = __riscv_vmsle_vv_i32m1_b32(current, next, vl);\n        int all_leq = __riscv_vcpop_m_b32(leq, vl);\n        if (all_leq != (int)vl) {\n            return false;\n        }\n        i += vl;\n        avl -= vl;\n    }\n\n    size_t avl2 = n - 2;\n    for (size_t i = 0; avl2 > 0; ) {\n        vl = __riscv_vsetvl_e32m1(avl2);\n        vint32m1_t v0 = __riscv_vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v1 = __riscv_vle32_v_i32m1(&lst[i+1], vl);\n        vint32m1_t v2 = __riscv_vle32_v_i32m1(&lst[i+2], vl);\n        vbool32_t eq01 = __riscv_vmseq_vv_i32m1_b32(v0, v1, vl);\n        vbool32_t eq12 = __riscv_vmseq_vv_i32m1_b32(v1, v2, vl);\n        vbool32_t triplet = __riscv_vmand_mm_b32(eq01, eq12, vl);\n        if (__riscv_vcpop_m_b32(triplet, vl) > 0) {\n            return false;\n        }\n        i += vl;\n        avl2 -= vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) {\n        return true;\n    }\n    const int *ptr = lst.data();\n    size_t n1 = n - 1;\n\n    for (size_t vl; n1 > 0; ) {\n        vl = vsetvl_e32m8(n1);\n        vint32m8_t v1 = vle32_v_i32m8(ptr, vl);\n        vint32m8_t v2 = vle32_v_i32m8(ptr + 1, vl);\n        vbool4_t cmp = vmsle_vv_i32m8_b4(v1, v2, vl);\n        if (vpopc_v_b4(cmp, vl) != vl) {\n            return false;\n        }\n        ptr += vl;\n        n1 -= vl;\n    }\n\n    if (n < 3) {\n        return true;\n    }\n\n    ptr = lst.data();\n    size_t n2 = n - 2;\n\n    for (size_t vl; n2 > 0; ) {\n        vl = vsetvl_e32m8(n2);\n        vint32m8_t v1 = vle32_v_i32m8(ptr, vl);\n        vint32m8_t v2 = vle32_v_i32m8(ptr + 2, vl);\n        vbool4_t cmp = vmseq_vv_i32m8_b4(v1, v2, vl);\n        if (vpopc_v_b4(cmp, vl) > 0) {\n            return false;\n        }\n        ptr += vl;\n        n2 -= vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n    size_t n = arr.size();\n    const int *ptr = arr.data();\n    size_t avl = n;\n    bool found_zero = false;\n    vint32m1_t vs_abs = vmv_v_x_i32m1(0, 1);\n    int neg_count = 0;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t v = vle32_v_i32m1(ptr, vl);\n        vbool32_t zero_mask = vmseq_vx_i32m1_b32(v, 0, vl);\n        if (vpopc_b32(zero_mask, vl)) {\n            found_zero = true;\n            break;\n        }\n        vint32m1_t abs_v = vabs_v_i32m1(v, vl);\n        vs_abs = vredsum_vs_i32m1_i32m1(vs_abs, abs_v, vs_abs, vl);\n        vbool32_t neg_mask = vmslt_vx_i32m1_b32(v, 0, vl);\n        neg_count += vpopc_b32(neg_mask, vl);\n        ptr += vl;\n        avl -= vl;\n    }\n\n    if (found_zero) {\n        return 0;\n    }\n\n    int abs_sum = vmv_x_s_i32m1_i32(vs_abs);\n    int sign_product = (neg_count % 2) ? -1 : 1;\n    return sign_product * abs_sum;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n    \n    int zero_found = 0;\n    int neg_count = 0;\n    int abs_sum = 0;\n    const int *arr_ptr = arr.data();\n    size_t avl = arr.size();\n    size_t vl;\n\n    for (; avl > 0; avl -= vl, arr_ptr += vl) {\n        vl = __riscv_vsetvl_e32m8(avl);\n        vint32m8_t v = __riscv_vle32_v_i32m8(arr_ptr, vl);\n        \n        vbool4_t mask_zero = __riscv_vmseq_vx_i32m8_b4(v, 0, vl);\n        if (__riscv_vcpop_m_b4(mask_zero, vl)) {\n            zero_found = 1;\n            break;\n        }\n        \n        vbool4_t mask_neg = __riscv_vmslt_vx_i32m8_b4(v, 0, vl);\n        neg_count += __riscv_vcpop_m_b4(mask_neg, vl);\n        \n        vint32m8_t v_neg = __riscv_vneg_v_i32m8(v, vl);\n        vint32m8_t v_abs = __riscv_vmerge_vvm_i32m8(mask_neg, v, v_neg, vl);\n        \n        vint32m1_t v_red = __riscv_vmv_v_x_i32m1(0, vl);\n        v_red = __riscv_vredsum_vs_i32m8_i32m1(v_abs, v_red, vl);\n        \n        int32_t sum_chunk;\n        __riscv_vse32_v_i32m1(&sum_chunk, v_red, 1);\n        abs_sum += sum_chunk;\n    }\n    \n    if (zero_found) {\n        return 0;\n    }\n    \n    int sign = (neg_count & 1) ? -1 : 1;\n    return sign * abs_sum;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int has_zero = 0;\n    unsigned long count_neg = 0;\n    size_t n = arr.size();\n    const int *arr_ptr = arr.data();\n\n    vint32m1_t v_abs_sum_red = __riscv_vmv_v_x_i32m1(0, 1);\n\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t v_arr = __riscv_vle32_v_i32m1(arr_ptr, vl);\n        arr_ptr += vl;\n\n        vbool32_t mask_zero = __riscv_vmseq_vx_i32m1_b32(v_arr, 0, vl);\n        if (__riscv_vcpop_m_b32(mask_zero, vl)) {\n            has_zero = 1;\n            break;\n        }\n\n        vbool32_t mask_neg = __riscv_vmslt_vx_i32m1_b32(v_arr, 0, vl);\n        count_neg += __riscv_vcpop_m_b32(mask_neg, vl);\n\n        vint32m1_t v_abs = __riscv_vabs_v_i32m1(v_arr, vl);\n        v_abs_sum_red = __riscv_vredsum_vs_i32m1_i32m1(v_abs, v_abs_sum_red, vl);\n    }\n\n    if (has_zero) {\n        return 0;\n    }\n\n    int abs_sum = __riscv_vmv_x_s_i32m1_i32(v_abs_sum_red);\n    return (count_neg & 1) ? -abs_sum : abs_sum;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n    size_t n = arr.size();\n    const int *ptr = arr.data();\n    size_t avl = n;\n    vint32m1_t abs_red = vmv_v_x_i32m1(0, 1);\n    int neg_count = 0;\n    bool has_zero = false;\n\n    for (size_t vl; avl > 0; avl -= vl, ptr += vl) {\n        vl = vsetvl_e32m8(avl);\n        vint32m8_t v = vle32_v_i32m8(ptr, vl);\n\n        vbool4_t mask_zero = vmseq_vx_i32m8_b4(v, 0, vl);\n        if (vpopc_v_b4(mask_zero, vl)) {\n            has_zero = true;\n            break;\n        }\n\n        vbool4_t mask_neg = vmslt_vx_i32m8_b4(v, 0, vl);\n        neg_count += vpopc_v_b4(mask_neg, vl);\n\n        vint32m8_t abs_v = vabs_v_i32m8(v, vl);\n        abs_red = vredsum_vs_i32m8_i32m1(abs_red, abs_v, abs_red, vl);\n    }\n\n    if (has_zero) {\n        return 0;\n    }\n\n    int abs_sum = vmv_x_s_i32m1_i32(abs_red);\n    int sign_value = (neg_count % 2 == 0) ? 1 : -1;\n    return sign_value * abs_sum;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n == 0) {\n        return -32768;\n    }\n\n    const int *ptr = arr.data();\n    size_t avl = n;\n    int abs_sum = 0;\n    bool any_zero = false;\n    bool negative_parity = false;\n\n    for (size_t vl; avl > 0; avl -= vl, ptr += vl) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t v_data = __riscv_vle32_v_i32m1(ptr, vl);\n\n        vbool32_t mask_zero = __riscv_vmseq_vx_i32m1_b32(v_data, 0, vl);\n        any_zero = any_zero || (__riscv_vmpopc_m_b32(mask_zero, vl) > 0;\n\n        vbool32_t mask_neg = __riscv_vmslt_vx_i32m1_b32(v_data, 0, vl);\n        unsigned long neg_count_seg = __riscv_vmpopc_m_b32(mask_neg, vl);\n        negative_parity ^= (neg_count_seg & 1);\n\n        vint32m1_t v_abs = __riscv_vabs_v_i32m1(v_data, vl);\n        vint32m1_t v_abs_red = __riscv_vmv_v_x_i32m1(0, vl);\n        v_abs_red = __riscv_vredsum_vs_i32m1_i32m1(v_abs, v_abs_red, vl);\n        abs_sum += __riscv_vmv_x_s_i32m1_i32(v_abs_red);\n    }\n\n    if (any_zero) {\n        return 0;\n    } else {\n        int sign_product = negative_parity ? -1 : 1;\n        return sign_product * abs_sum;\n    }\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <vector>\n#include <climits>\n#include <riscv_vector.h>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    if (n == 0) {\n        return {};\n    }\n    int min_val = INT_MAX;\n    int min_r = -1, min_c = -1;\n    for (int i = 0; i < n; i++) {\n        const int *row_data = grid[i].data();\n        int j = 0;\n        while (j < n) {\n            size_t vl = vsetvl_e32m1(n - j);\n            vint32m1_t v_data = vle32_v_i32m1(row_data + j, vl);\n            vint32m1_t v_dest = vmv_s_x_i32m1(min_val, vl);\n            v_dest = vredmin_vs_i32m1_i32m1(v_data, v_dest, vl);\n            int candidate = vmv_x_s_i32m1_i32(v_dest);\n            if (candidate < min_val) {\n                min_val = candidate;\n                vbool32_t mask = vmseq_vx_i32m1_b32(v_data, candidate, vl);\n                int index_in_seg = vfirst_m_b32(mask, vl);\n                if (index_in_seg != -1) {\n                    min_r = i;\n                    min_c = j + index_in_seg;\n                }\n            }\n            j += vl;\n        }\n    }\n    std::vector<int> path;\n    path.push_back(min_val);\n    int r = min_r, c = min_c;\n    int dr[] = {-1, 1, 0, 0};\n    int dc[] = {0, 0, -1, 1};\n    for (int step = 1; step < k; step++) {\n        int next_val = INT_MAX;\n        int next_r = -1, next_c = -1;\n        for (int d = 0; d < 4; d++) {\n            int nr = r + dr[d];\n            int nc = c + dc[d];\n            if (nr >= 0 && nr < n && nc >= 0 && nc < n) {\n                int val = grid[nr][nc];\n                if (val < next_val) {\n                    next_val = val;\n                    next_r = nr;\n                    next_c = nc;\n                }\n            }\n        }\n        path.push_back(next_val);\n        r = next_r;\n        c = next_c;\n    }\n    return path;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k) {\n    int N = grid.size();\n    int i0 = 0, j0 = 0;\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (grid[i][j] == 1) {\n                i0 = i;\n                j0 = j;\n            }\n        }\n    }\n\n    std::vector<int> res;\n    res.push_back(1);\n    if (k == 1) {\n        return res;\n    }\n\n    int i = i0, j = j0;\n    int di[4] = {-1, 1, 0, 0};\n    int dj[4] = {0, 0, -1, 1};\n\n    for (int step = 1; step < k; step++) {\n        int values[4] = {INT_MAX, INT_MAX, INT_MAX, INT_MAX};\n        for (int d = 0; d < 4; d++) {\n            int ni = i + di[d];\n            int nj = j + dj[d];\n            if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                values[d] = grid[ni][nj];\n            }\n        }\n\n        size_t vl = 4;\n        vint32m1_t v_val = vle32_v_i32m1(values, vl);\n        vint32m1_t vmin_initial = vmv_v_x_i32m1(INT_MAX, 1);\n        vint32m1_t vmin_result = vredmin_vs_i32m1_i32m1(vmin_initial, v_val, vmin_initial, vl);\n        int min_val = vmv_x_s_i32m1_i32(vmin_result);\n        vbool32_t mask = vmseq_vx_i32m1_b32(v_val, min_val, vl);\n        int index = vfirst_m_b32(mask, vl);\n\n        i += di[index];\n        j += dj[index];\n        res.push_back(min_val);\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <vector>\n#include <climits>\n#include <riscv_vector.h>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    int r0 = -1, c0 = -1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                r0 = i;\n                c0 = j;\n                break;\n            }\n        }\n        if (r0 != -1) break;\n    }\n\n    std::vector<int> path;\n    path.push_back(1);\n    if (k == 1) {\n        return path;\n    }\n\n    int r = r0, c = c0;\n    for (int step = 1; step < k; step++) {\n        int dr[] = {-1, 1, 0, 0};\n        int dc[] = {0, 0, -1, 1};\n        int values[4];\n        for (int i = 0; i < 4; i++) {\n            int nr = r + dr[i];\n            int nc = c + dc[i];\n            if (nr >= 0 && nr < n && nc >= 0 && nc < n) {\n                values[i] = grid[nr][nc];\n            } else {\n                values[i] = INT_MAX;\n            }\n        }\n\n        size_t vl = vsetvl_e32m1(4);\n        vint32m1_t vec = vle32_v_i32m1(values, vl);\n        size_t vl_red = vsetvl_e32m1(1);\n        vint32m1_t vmin_init = vmv_v_x_i32m1(INT_MAX, vl_red);\n        vl = vsetvl_e32m1(4);\n        vint32m1_t min_result = vredmin_vs_i32m1(vmin_init, vec, vmin_init, vl);\n        vl_red = vsetvl_e32m1(1);\n        int min_val = vmv_x_s_i32m1_i32(min_result);\n        vl = vsetvl_e32m1(4);\n        vbool32_t mask = vmseq_vx_i32m1_b32(vec, min_val, vl);\n        long index = vfirst_m_b32(mask, vl);\n        if (index < 0) {\n            break;\n        }\n        r = r + dr[index];\n        c = c + dc[index];\n        path.push_back(min_val);\n    }\n    return path;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <vector>\n#include <climits>\n#include <riscv_vector.h>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k){\n    int n = grid.size();\n    if (n == 0) {\n        return {};\n    }\n    int r0 = -1, c0 = -1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                r0 = i;\n                c0 = j;\n            }\n        }\n    }\n    if (r0 == -1) {\n        return {};\n    }\n    std::vector<int> path;\n    path.push_back(1);\n    if (k == 1) {\n        return path;\n    }\n    int current_r = r0;\n    int current_c = c0;\n    const int dr[4] = {-1, 1, 0, 0};\n    const int dc[4] = {0, 0, -1, 1};\n    for (int step = 1; step < k; step++) {\n        int values[4] = {INT_MAX, INT_MAX, INT_MAX, INT_MAX};\n        int positions[4][2];\n        for (int d = 0; d < 4; d++) {\n            int nr = current_r + dr[d];\n            int nc = current_c + dc[d];\n            positions[d][0] = nr;\n            positions[d][1] = nc;\n            if (nr >= 0 && nr < n && nc >= 0 && nc < n) {\n                values[d] = grid[nr][nc];\n            }\n        }\n        size_t vl = 4;\n        vint32m1_t vec_val = vle32_v_i32m1(values, vl);\n        vint32m1_t vmin = vmv_v_x_i32m1(INT_MAX, vl);\n        vint32m1_t vred = vredmin_vs_i32m1_i32m1(vec_val, vmin, vl);\n        int min_val = vmv_x_s_i32m1_i32(vred);\n        vbool32_t mask = vmseq_vx_i32m1_b32(vec_val, min_val, vl);\n        int index = vfirst_m_b32(mask, vl);\n        if (index < 0) {\n            break;\n        }\n        current_r = positions[index][0];\n        current_c = positions[index][1];\n        path.push_back(min_val);\n    }\n    return path;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n#include <cstdlib>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k) {\n    int n = grid.size();\n    if (n == 0) {\n        return std::vector<int>();\n    }\n    int total = n * n;\n    std::vector<int> flat(total);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            flat[i * n + j] = grid[i][j];\n        }\n    }\n\n    int start_i = -1, start_j = -1;\n    int *data = flat.data();\n    size_t vl;\n    for (int i = 0; i < total; ) {\n        vl = vsetvl_e32m1(total - i);\n        vint32m1_t v_data = vle32_v_i32m1(data + i, vl);\n        vint32m1_t v_ones = vmv_v_x_i32m1(1, vl);\n        vbool32_t mask = vmseq_vv_i32m1_b32(v_data, v_ones, vl);\n        int index_in_seg = vfirst_m_b32(mask, vl);\n        if (index_in_seg != -1) {\n            int pos = i + index_in_seg;\n            start_i = pos / n;\n            start_j = pos % n;\n            break;\n        }\n        i += vl;\n    }\n\n    std::vector<int> res;\n    res.push_back(1);\n    if (k == 1) {\n        return res;\n    }\n\n    int dx[4] = {-1, 1, 0, 0};\n    int dy[4] = {0, 0, -1, 1};\n    int cur_i = start_i, cur_j = start_j;\n\n    for (int step = 1; step < k; step++) {\n        int neighbors_val[4] = {INT_MAX, INT_MAX, INT_MAX, INT_MAX};\n        for (int d = 0; d < 4; d++) {\n            int ni = cur_i + dx[d];\n            int nj = cur_j + dy[d];\n            if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                neighbors_val[d] = grid[ni][nj];\n            }\n        }\n\n        vl = vsetvl_e32m1(4);\n        vint32m1_t vec_vals = vle32_v_i32m1(neighbors_val, vl);\n        vint32m1_t vec_init = vmv_v_x_i32m1(INT_MAX, vl);\n        vint32m1_t vec_dest = vundefined_i32m1();\n        vec_dest = vredmin_vs_i32m1_i32m1(vec_dest, vec_vals, vec_init, vl);\n        int min_val = vmv_x_s_i32m1_i32(vec_dest);\n        vbool32_t mask_min = vmseq_vx_i32m1_b32(vec_vals, min_val, vl);\n        int min_index = vfirst_m_b32(mask_min, vl);\n\n        cur_i = cur_i + dx[min_index];\n        cur_j = cur_j + dy[min_index];\n        res.push_back(min_val);\n    }\n\n    return res;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n\nuint64_t digits_simd(uint64_t n) {\n    if (n == 0) {\n        return 0;\n    }\n    uint8_t digits[20];\n    int count = 0;\n    uint64_t num = n;\n    while (num) {\n        digits[count++] = num % 10;\n        num /= 10;\n    }\n    size_t vl = (size_t)count;\n\n    vuint8m1_t v_digits = vle8_v_u8m1(digits, vl);\n    vuint8m1_t v_lsb = vand_vx_u8m1(v_digits, 1, vl);\n    vbool8_t mask = vmseq_vx_u8m1_b8(v_lsb, 1, vl);\n\n    long first_odd = vfirst_m_b8(mask, vl);\n    if (first_odd < 0) {\n        return 0;\n    }\n\n    vuint8m1_t v_ones = vmv_v_x_u8m1(1, vl);\n    vuint8m1_t v_operands = vmerge_vvm_u8m1(mask, v_digits, v_ones, vl);\n    vuint64m1_t v_wide = vzext_vf8_u64m1(v_operands, vl);\n    vuint64m1_t v_scalar = vmv_v_x_u64m1(1, 1);\n    vuint64m1_t v_product = vredmul_vs_u64m1_u64m1(v_wide, v_scalar, vl);\n    uint64_t product = vmv_x_s_u64m1_u64(v_product);\n\n    return product;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n){\n    uint64_t digits[20] = {0};\n    int count = 0;\n    if (n == 0) {\n        digits[count++] = 0;\n    } else {\n        uint64_t num = n;\n        while (num) {\n            digits[count++] = num % 10;\n            num /= 10;\n        }\n    }\n\n    if (count == 0) {\n        return 0;\n    }\n\n    size_t vl = vsetvl_e64m1(count);\n    vuint64m1_t v_digits = vle64_v_u64m1(digits, vl);\n\n    vuint64m1_t v_lsb = vand_vx_u64m1(v_digits, 1, vl);\n    vbool64_t mask = vmseq_vx_u64m1_b64(v_lsb, 1, vl);\n\n    size_t num_odd = vpopc_m_b64(mask, vl);\n    if (num_odd == 0) {\n        return 0;\n    }\n\n    vuint64m1_t v_scalar = vmv_v_x_u64m1(1, 1);\n    vuint64m1_t v_dest = vmv_v_x_u64m1(0, vl);\n    v_dest = vredmul_vs_u64m1_m(mask, v_dest, v_digits, v_scalar, vl);\n    uint64_t product = vmv_x_s_u64m1_u64(v_dest);\n\n    return product;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    uint8_t digits[20] = {0};\n    int count = 0;\n    uint64_t temp = n;\n    while (temp) {\n        digits[count++] = temp % 10;\n        temp /= 10;\n    }\n\n    size_t vl = 20;\n    vuint8m1_t v_digits = vle8_v_u8m1(digits, vl);\n    vuint8m1_t v_index = vid_v_u8m1(vl);\n    vbool8_t mask_valid = vmsltu_vx_u8m1_b8(v_index, count, vl);\n    vuint8m1_t v_ones = vmv_v_x_u8m1(1, vl);\n    vuint8m1_t v_mod2 = vand_vv_u8m1(v_digits, v_ones, vl);\n    v_mod2 = vmerge_vxm_u8m1(v_mod2, 0, vmnot_m_b8(mask_valid, vl), vl);\n    vbool8_t mask_odd = vmseq_vx_u8m1_b8(v_mod2, 1, vl);\n    vuint8m1_t v_factors = vmerge_vvm_u8m1(v_ones, v_digits, mask_odd, vl);\n\n    vuint8m1_t v_red = vmv_v_x_u8m1(0, 1);\n    v_red = vredsum_vs_u8m1_u8m1(v_mod2, v_red, vl);\n    uint8_t sum_odd = vmv_x_s_u8m1_u8(v_red);\n    if (sum_odd == 0) {\n        return 0;\n    }\n\n    vuint64m1_t v_factors64 = vzext_vf8_u64m1(v_factors, vl);\n    uint64_t factors64[20];\n    vse64_v_u64m1(factors64, v_factors64, vl);\n\n    uint64_t product = 1;\n    for (int i = 0; i < 20; i++) {\n        product *= factors64[i];\n    }\n    return product;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    uint8_t digits[20];\n    int cnt = 0;\n    uint64_t t = n;\n    while (t) {\n        digits[cnt++] = t % 10;\n        t /= 10;\n    }\n    \n    size_t vl = cnt;\n    vuint8m1_t v_digits = vle8_v_u8m1(digits, vl);\n    vuint8m1_t v_ones = vmv_v_x_u8m1(1, vl);\n    vuint8m1_t v_lsb = vand_vx_u8m1(v_digits, 1, vl);\n    vbool8_t mask = vmseq_vx_u8m1_b8(v_lsb, 1, vl);\n    vuint8m1_t v_sel = vmerge_vvm_u8m1(mask, v_digits, v_ones, vl);\n    \n    unsigned long has_odd = vpopc_b8(mask, vl);\n    if (!has_odd) {\n        return 0;\n    }\n    \n    uint64_t prod = 1;\n    for (int i = 0; i < vl; i++) {\n        prod *= v_sel[i];\n    }\n    return prod;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    if (n == 0) {\n        return 0;\n    }\n    uint8_t digits[20];\n    int d = 0;\n    while (n) {\n        digits[d++] = n % 10;\n        n /= 10;\n    }\n    size_t vl = vsetvl_e8m1(d);\n    vuint8m1_t v_digits = vle8_v_u8m1(digits, vl);\n    vuint8m1_t v_ones = vmv_v_x_u8m1(1, vl);\n    vuint8m1_t v_lsb = vand_vx_u8m1(v_digits, 1, vl);\n    vbool8_t mask = vmseq_vx_u8m1_b8(v_lsb, 1, vl);\n    if (vfirst_m_b8(mask, vl) < 0) {\n        return 0;\n    }\n    vuint8m1_t factors = vmerge_vvm_u8m1(mask, v_digits, v_ones, vl);\n    uint8_t factors_arr[20];\n    vse8_v_u8m1(factors_arr, factors, vl);\n    uint64_t product = 1;\n    for (int i = 0; i < d; i++) {\n        product *= factors_arr[i];\n    }\n    return product;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    const float *ptr = lst.data();\n    vint64m1_t v_accum = __riscv_vmv_v_x_i64m1(0, 1);\n    size_t vl;\n\n    while (n > 0) {\n        vl = __riscv_vsetvl_e32m1(n);\n        vfloat32m1_t v_f = __riscv_vle32_v_f32m1(ptr, vl);\n        vfloat32m1_t v_ceil = __riscv_vfceil_v_f32m1(v_f, vl);\n        vint32m1_t v_i32 = __riscv_vfcvt_rtz_x_f_v_i32m1(v_ceil, vl);\n        vint64m2_t v_i64 = __riscv_vwcvt_x_x_v_i64m2(v_i32, vl);\n        vint64m2_t v_sq = __riscv_vmul_vv_i64m2(v_i64, v_i64, vl);\n        v_accum = __riscv_vredsum_vs_i64m2_i64m1(v_sq, v_accum, vl);\n        ptr += vl;\n        n -= vl;\n    }\n\n    int64_t s = __riscv_vmv_x_s_i64m1_i64(v_accum);\n    return (uint64_t)s;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <stdint.h>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    size_t n = lst.size();\n    const float *ptr = lst.data();\n    unsigned int frm_rup = 3;\n\n    while (n > 0) {\n        size_t vl = vsetvl_e32m1(n);\n        vfloat32m1_t vf = vle32_v_f32m1(ptr, vl);\n        vint32m1_t vi = vfcvt_x_f_v_i32m1_rm(vf, vl, frm_rup);\n        vint64m2_t vsquare = vwmul_vv_i64m2(vi, vi, vl);\n        vuint64m2_t vsquare_u = (vuint64m2_t) vsquare;\n        vuint64m1_t v_zero = vmv_v_x_u64m1(0, vl);\n        vuint64m1_t vsum_part = vredsum_vs_u64m2_u64m1(v_zero, vsquare_u, v_zero, vl);\n        uint64_t part_sum = vmv_x_s_u64m1_u64(vsum_part);\n        sum += part_sum;\n        n -= vl;\n        ptr += vl;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    uint64_t total = 0;\n    size_t n = lst.size();\n    const float *ptr = lst.data();\n    while (n > 0) {\n        size_t vl = vsetvl_e32m1(n);\n        vfloat32m1_t vec = vle32_v_f32m1(ptr, vl);\n        vfloat32m1_t ceiled = vfceil_vv_f32m1(vec, vl);\n        vint32m1_t int_vec = vfcvt_x_f_v_i32m1(ceiled, vl);\n        vint64m2_t int64_vec = vwadd_vx_i64m2(int_vec, 0, vl);\n        vint64m2_t squared_64 = vmul_vv_i64m2(int64_vec, int64_vec, vl);\n        vint64m1_t v_zero = vmv_v_x_i64m1(0, 1);\n        vint64m1_t red = vredsum_vs_i64m2_i64m1(squared_64, v_zero, vl);\n        uint64_t chunk_sum = vmv_x_s_i64m1_i64(red);\n        total += chunk_sum;\n        n -= vl;\n        ptr += vl;\n    }\n    return total;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n    const float *ptr = lst.data();\n    uint64_t total_sum = 0;\n    size_t avl = n;\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vfloat32m1_t v_f = vle32_v_f32m1(ptr, vl);\n        vint32m1_t v_i32 = vfcvt_x_f_v_i32m1_ru(v_f, vl);\n        vint64m2_t v_i64 = vwcvt_x_x_v_i64m2(v_i32, vl);\n        vint64m2_t v_sq = vmul_vv_i64m2(v_i64, v_i64, vl);\n        vuint64m2_t v_sq_u = vreinterpret_v_i64m2_u64m2(v_sq);\n        vuint64m1_t v_zero = vmv_v_x_u64m1(0, 1);\n        vuint64m1_t v_sum_seg = vredsumu_vs_u64m2_u64m1(v_sq_u, v_zero, vl);\n        uint64_t seg_sum = vmv_x_s_u64m1_u64(v_sum_seg);\n        total_sum += seg_sum;\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    uint64_t total = 0;\n    size_t n = lst.size();\n    const float* ptr = lst.data();\n    size_t vl;\n\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = vsetvl_e32m1(avl);\n        vfloat32m1_t vf = vle32_v_f32m1(ptr, vl);\n        ptr += vl;\n        \n        vint32m1_t vi32 = vfcvt_x_f_v_i32m1_rm(vf, 3, vl);\n        vint64m2_t vi64 = vwcvt_x_x_v_i64m2(vi32, vl);\n        vint64m2_t vsquare = vmul_vv_i64m2(vi64, vi64, vl);\n        \n        vint64m1_t vred = vredsum_vs_i64m2_i64m1(vsquare, vmv_v_x_i64m1(0, 1), vl);\n        total += vmv_x_s_i64m1_i64(vred);\n    }\n\n    return total;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n <= 1) {\n        return -1;\n    }\n    size_t i = 1;\n    int candidate = -1;\n    while (i < n) {\n        size_t vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t vx = __riscv_vle32_v_i32m1(arr.data() + i, vl);\n        vint32m1_t vy = __riscv_vle32_v_i32m1(arr.data() + i - 1, vl);\n        vbool32_t mask = __riscv_vmslt_vv_i32m1_b32(vx, vy, vl);\n        int last_in_segment = __riscv_vlast_m_b32(mask, vl);\n        if (last_in_segment >= 0) {\n            candidate = i + last_in_segment;\n        }\n        i += vl;\n    }\n    return candidate;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    int n = arr.size();\n    if (n < 2) {\n        return -1;\n    }\n    size_t vl;\n    long candidate_index = -1;\n    for (int i = 1; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t prev = __riscv_vle32_v_i32m1(arr.data() + i - 1, vl);\n        vint32m1_t curr = __riscv_vle32_v_i32m1(arr.data() + i, vl);\n        vbool32_t mask = __riscv_vmsle_vv_i32m1_b32(curr, prev, vl);\n        long last_in_seg = __riscv_vlast_m_b32(mask, vl);\n        if (last_in_seg != -1) {\n            candidate_index = i + last_in_seg;\n        }\n        i += vl;\n    }\n    return candidate_index;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <alloca.h>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    int n = arr.size();\n    if (n < 2) {\n        return -1;\n    }\n\n    int last_index = -1;\n    size_t vl;\n    size_t max_vl = vsetvlmax_e32m8();\n    size_t max_vl_bytes = (max_vl + 7) / 8;\n    uint8_t *mask_store = (uint8_t *)alloca(max_vl_bytes);\n\n    int i = 1;\n    while (i < n) {\n        vl = vsetvl_e32m8(n - i);\n        const int *base_prev = arr.data() + i - 1;\n        const int *base_curr = arr.data() + i;\n        vint32m8_t v_prev = vle32_v_i32m8(base_prev, vl);\n        vint32m8_t v_curr = vle32_v_i32m8(base_curr, vl);\n        vbool4_t mask = vmslt_vv_i32m8_b4(v_curr, v_prev, vl);\n\n        vsm_v_b4(mask_store, mask, vl);\n\n        for (int j = 0; j < vl; j++) {\n            int byte_index = j / 8;\n            int bit_index = j % 8;\n            if (mask_store[byte_index] & (1 << bit_index)) {\n                last_index = i + j;\n            }\n        }\n\n        i += vl;\n    }\n\n    return last_index;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) {\n        return -1;\n    }\n    \n    int last_index = -1;\n    size_t vl;\n    for (size_t i = 1; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_prev = __riscv_vle32_v_i32m1(arr.data() + i - 1, vl);\n        vint32m1_t v_curr = __riscv_vle32_v_i32m1(arr.data() + i, vl);\n        vbool32_t mask = __riscv_vmslt_vv_i32m1_b32(v_curr, v_prev, vl);\n        long last_in_seg = __riscv_vlast_m_b32(mask, vl);\n        \n        if (last_in_seg >= 0) {\n            last_index = i + last_in_seg;\n        }\n        \n        i += vl;\n    }\n    \n    return last_index;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\nusing std::vector;\n\nint can_arrange_simd(const vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) {\n        return -1;\n    }\n    const int *data = arr.data();\n    int max_index = -1;\n    size_t vl;\n    for (size_t i = 1; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t prev_vec = vle32_v_i32m1(data + i - 1, vl);\n        vint32m1_t curr_vec = vle32_v_i32m1(data + i, vl);\n        vbool32_t mask = vmsle_vv_i32m1_b32(curr_vec, prev_vec, vl);\n        vint32m1_t indices = vid_v_i32m1(vl);\n        indices = vadd_vx_i32m1(indices, i, vl);\n        vint32m1_t candidate = vmerge_vxm_i32m1(mask, indices, -1, vl);\n        vint32m1_t vred = vredmax_vs_i32m1_i32m1(\n            vundefined_i32m1(),\n            candidate,\n            vmv_s_x_i32m1(-1, 1),\n            vl\n        );\n        int seg_max = vmv_x_s_i32m1_i32(vred);\n        if (seg_max > max_index) {\n            max_index = seg_max;\n        }\n        i += vl;\n    }\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <climits>\n#include <vector>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    int neg_max = INT_MIN;\n    int pos_min = INT_MAX;\n    const int* ptr = lst.data();\n    size_t n = lst.size();\n    size_t vl;\n\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vle32_v_i32m1(ptr, vl);\n        ptr += vl;\n\n        vbool32_t neg_mask = vmslt_vx_i32m1_b32(vec, 0, vl);\n        vbool32_t pos_mask = vmsgt_vx_i32m1_b32(vec, 0, vl);\n\n        vint32m1_t neg_init = vmv_v_x_i32m1(neg_max, vl);\n        vint32m1_t neg_red = vredmax_vs_i32m1_i32m1_m(neg_mask, vec, neg_init, vl);\n        neg_max = vmv_x_s_i32m1_i32(neg_red);\n\n        vint32m1_t pos_init = vmv_v_x_i32m1(pos_min, vl);\n        vint32m1_t pos_red = vredmin_vs_i32m1_i32m1_m(pos_mask, vec, pos_init, vl);\n        pos_min = vmv_x_s_i32m1_i32(pos_red);\n    }\n\n    if (neg_max == INT_MIN) neg_max = 0;\n    if (pos_min == INT_MAX) pos_min = 0;\n\n    return {neg_max, pos_min};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n    \n    const int* ptr = lst.data();\n    size_t n = lst.size();\n    int max_neg = INT_MIN;\n    int min_pos = INT_MAX;\n    size_t avl = n;\n    \n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t vec = vle32_v_i32m1(ptr, vl);\n        \n        vbool32_t mask_neg = vmslt_vx_i32m1_b32(vec, 0, vl);\n        vbool32_t mask_pos = vmsgt_vx_i32m1_b32(vec, 0, vl);\n        \n        vint32m1_t max_neg_vec = vmv_s_x_i32m1(max_neg);\n        max_neg_vec = vredmax_vs_i32m1_i32m1_m(mask_neg, max_neg_vec, vec, max_neg_vec, vl);\n        max_neg = vmv_x_s_i32m1_i32(max_neg_vec);\n        \n        vint32m1_t min_pos_vec = vmv_s_x_i32m1(min_pos);\n        min_pos_vec = vredmin_vs_i32m1_i32m1_m(mask_pos, min_pos_vec, vec, min_pos_vec, vl);\n        min_pos = vmv_x_s_i32m1_i32(min_pos_vec);\n        \n        ptr += vl;\n        avl -= vl;\n    }\n    \n    if (max_neg == INT_MIN) max_neg = 0;\n    if (min_pos == INT_MAX) min_pos = 0;\n    \n    return {max_neg, min_pos};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <climits>\n#include <vector>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n\n    size_t n = lst.size();\n    const int* ptr = lst.data();\n    vint32m1_t v_max_neg = vmv_s_x_i32m1(INT_MIN, 1);\n    vint32m1_t v_min_pos = vmv_s_x_i32m1(INT_MAX, 1);\n    int any_neg = 0;\n    int any_pos = 0;\n\n    size_t vl;\n    for (; n > 0; n -= vl, ptr += vl) {\n        vl = vsetvl_e32m8(n);\n        vint32m8_t vec = vle32_v_i32m8(ptr, vl);\n        vbool4_t mask_neg = vmslt_vx_i32m8(vec, 0, vl);\n        vbool4_t mask_pos = vmsgt_vx_i32m8(vec, 0, vl);\n\n        any_neg |= (vpopc_b4(mask_neg, vl) > 0);\n        any_pos |= (vpopc_b4(mask_pos, vl) > 0);\n\n        v_max_neg = vredmax_vs_i32m8_m(mask_neg, v_max_neg, vec, v_max_neg, vl);\n        v_min_pos = vredmin_vs_i32m8_m(mask_pos, v_min_pos, vec, v_min_pos, vl);\n    }\n\n    int max_neg_val = vmv_x_s_i32m1_i32(v_max_neg);\n    int min_pos_val = vmv_x_s_i32m1_i32(v_min_pos);\n\n    if (!any_neg) max_neg_val = 0;\n    if (!any_pos) min_pos_val = 0;\n\n    return {max_neg_val, min_pos_val};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```cpp\n#include <vector>\n#include <climits>\n#include <riscv_vector.h>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n    \n    const int* ptr = lst.data();\n    size_t n = lst.size();\n    int max_neg = INT_MIN;\n    int min_pos = INT_MAX;\n    \n    vint32m1_t neg_red = vmv_s_x_i32m1(max_neg);\n    vint32m1_t pos_red = vmv_s_x_i32m1(min_pos);\n    \n    size_t vl;\n    for (size_t avl = n; avl > 0; ) {\n        vl = vsetvl_e32m8(avl);\n        vint32m8_t vec = vle32_v_i32m8(ptr, vl);\n        \n        vbool4_t neg_mask = vmslt_vx_i32m8_b4(vec, 0, vl);\n        vbool4_t pos_mask = vmsgt_vx_i32m8_b4(vec, 0, vl);\n        \n        neg_red = vredmax_vs_i32m8_i32m1_m(neg_mask, neg_red, vec, neg_red, vl);\n        pos_red = vredmin_vs_i32m8_i32m1_m(pos_mask, pos_red, vec, pos_red, vl);\n        \n        ptr += vl;\n        avl -= vl;\n    }\n    \n    max_neg = vmv_x_s_i32m1_i32(neg_red);\n    min_pos = vmv_x_s_i32m1_i32(pos_red);\n    \n    if (max_neg == INT_MIN) max_neg = 0;\n    if (min_pos == INT_MAX) min_pos = 0;\n    \n    return {max_neg, min_pos};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <climits>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n    \n    int max_neg = INT_MIN;\n    int min_pos = INT_MAX;\n    bool found_neg = false;\n    bool found_pos = false;\n    \n    size_t n = lst.size();\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t vec = vle32_v_i32m1(&lst[i], vl);\n        i += vl;\n        \n        vbool32_t neg_mask = vmslt_vx_i32m1_b32(vec, 0, vl);\n        vbool32_t pos_mask = vmsgt_vx_i32m1_b32(vec, 0, vl);\n        \n        found_neg |= (vpopc_m_b32(neg_mask, vl) > 0;\n        found_pos |= (vpopc_m_b32(pos_mask, vl) > 0;\n        \n        vint32m1_t neg_vec = vmerge_vxm_i32m1(neg_mask, vec, max_neg, vl);\n        vint32m1_t neg_red = vmv_s_x_i32m1(max_neg, vl);\n        neg_red = vredmax_vs_i32m1_i32m1(neg_vec, neg_red, vl);\n        max_neg = vmv_x_s_i32m1_i32(neg_red);\n        \n        vint32m1_t pos_vec = vmerge_vxm_i32m1(pos_mask, vec, min_pos, vl);\n        vint32m1_t pos_red = vmv_s_x_i32m1(min_pos, vl);\n        pos_red = vredmin_vs_i32m1_i32m1(pos_vec, pos_red, vl);\n        min_pos = vmv_x_s_i32m1_i32(pos_red);\n    }\n    \n    if (!found_neg) max_neg = 0;\n    if (!found_pos) min_pos = 0;\n    \n    return {max_neg, min_pos};\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    if (n == 0) {\n        return 1;\n    }\n    size_t avl = n;\n    vuint64m1_t v_base = __riscv_vid_v_u64m1(avl);\n    v_base = __riscv_vadd_vx_u64m1(v_base, 1, avl);\n    vuint64m1_t v_exp = __riscv_vrsub_vx_u64m1(v_base, n+1, avl);\n    vuint64m1_t v_term = __riscv_vmv_v_x_u64m1(1, avl);\n    vuint64m1_t v_one = __riscv_vmv_v_x_u64m1(1, avl);\n\n    for (uint64_t exp_val = 1; exp_val <= n; exp_val++) {\n        vbool64_t mask = __riscv_vmsgeu_vx_u64m1_b64(v_exp, exp_val, avl);\n        vuint64m1_t v_multiplier = __riscv_vmerge_vvm_u64m1(v_one, v_base, mask, avl);\n        v_term = __riscv_vmul_vv_u64m1(v_term, v_multiplier, avl);\n    }\n\n    uint64_t tmp[avl];\n    __riscv_vse64_v_u64m1(tmp, v_term, avl);\n    uint64_t result = 1;\n    for (size_t i = 0; i < avl; i++) {\n        result *= tmp[i];\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    if (n == 0) {\n        return 1;\n    }\n    uint64_t facts[20];\n    facts[0] = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        facts[i-1] = facts[i-2] * i;\n    }\n    uint64_t total = 1;\n    size_t vl;\n    uint64_t *ptr = facts;\n    size_t avl = n;\n    while (avl > 0) {\n        vl = vsetvl_e64m1(avl);\n        vuint64m1_t vec = vle64_v_u64m1(ptr, vl);\n        vuint64m1_t scalar_vec = vmv_v_x_u64m1(total, vl);\n        scalar_vec = vredmul_vs_u64m1(scalar_vec, vec, scalar_vec, vl);\n        total = vmv_x_s_u64m1_u64(scalar_vec);\n        ptr += vl;\n        avl -= vl;\n    }\n    return total;\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    if (n == 0) {\n        return 1;\n    }\n    uint64_t facts[32];\n    facts[0] = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        facts[i-1] = facts[i-2] * i;\n    }\n    size_t avl = n;\n    while (avl > 1) {\n        size_t pairs = avl / 2;\n        size_t leftover = avl % 2;\n        size_t vl = vsetvl_e64m1(pairs);\n        if (pairs > 0) {\n            vuint64m1_t even = vlse64_v_u64m1(facts, 2 * sizeof(uint64_t), vl);\n            vuint64m1_t odd = vlse64_v_u64m1(facts + 1, 2 * sizeof(uint64_t), vl);\n            vuint64m1_t prod = vmul_vv_u64m1(even, odd, vl);\n            vse64_v_u64m1(facts, prod, vl);\n        }\n        if (leftover) {\n            facts[pairs] = facts[avl-1];\n        }\n        avl = pairs + leftover;\n    }\n    return facts[0];\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t facts[8];\n    facts[0] = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        facts[i-1] = facts[i-2] * i;\n    }\n\n    size_t vl = n;\n    vuint64m1_t vec = vle64_v_u64m1(facts, vl);\n    vuint64m1_t v_red = vmv_v_x_u64m1(1, 1);\n    v_red = vredmul_vs_u64m1(v_red, vec, v_red, vl);\n    uint64_t result = vmv_x_s_u64m1_u64(v_red);\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdint.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    if (n == 0) {\n        return 1;\n    }\n\n    uint64_t F[100];\n    F[0] = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        F[i-1] = i * F[i-2];\n    }\n\n    size_t total_elements = n;\n    const uint64_t *ptr = F;\n    vuint64m1_t vd = vmv_v_x_u64m1(1, 1);\n\n    while (total_elements > 0) {\n        size_t vl = vsetvl_e64m1(total_elements);\n        vuint64m1_t vec = vle64_v_u64m1(ptr, vl);\n        vd = vredmul_vs_u64m1_u64m1(vec, vd, vl);\n        ptr += vl;\n        total_elements -= vl;\n    }\n\n    uint64_t result = vmv_x_s_u64m1(vd);\n    return result;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint sum_squares_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    int total_sum = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        const int *ptr = &lst[i];\n        vint32m1_t v = vle32_v_i32m1(ptr, vl);\n        vuint32m1_t v_idx = vid_v_u32m1(vl);\n        v_idx = vadd_vx_u32m1(v_idx, i, vl);\n        vuint32m1_t rem3 = vremu_vx_u32m1(v_idx, 3, vl);\n        vbool32_t mask3 = vmseq_vx_u32m1_b32(rem3, 0, vl);\n        vuint32m1_t rem4 = vremu_vx_u32m1(v_idx, 4, vl);\n        vbool32_t mask4 = vmseq_vx_u32m1_b32(rem4, 0, vl);\n        vbool32_t not_mask3 = vmnot_m_b32(mask3, vl);\n        vbool32_t mask4_not3 = vmand_mm_b32(mask4, not_mask3, vl);\n        vint32m1_t square = vmul_vv_i32m1(v, v, vl);\n        vint32m1_t cube = vmul_vv_i32m1(square, v, vl);\n        vint32m1_t res = v;\n        res = vmerge_vvm_i32m1(mask3, square, res, res, vl);\n        res = vmerge_vvm_i32m1(mask4_not3, cube, res, res, vl);\n        vint32m1_t v_zero = vmv_v_x_i32m1(0, vl);\n        vint32m1_t vred = vredsum_vs_i32m1_i32m1(res, v_zero, vl);\n        int seg_sum = vmv_x_s_i32m1_i32(vred);\n        total_sum += seg_sum;\n        i += vl;\n    }\n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint sum_squares_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    int sum = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m4(n - i);\n        vint32m4_t v_data = vle32_v_i32m4(&lst[i], vl);\n        vint32m4_t v_orig = v_data;\n        uint8_t mask_a_arr[vl];\n        uint8_t mask_b_arr[vl];\n        for (size_t j = 0; j < vl; j++) {\n            size_t idx = i + j;\n            bool cond_a = (idx % 3 == 0);\n            bool cond_b = (idx % 4 == 0) && (idx % 3 != 0);\n            mask_a_arr[j] = cond_a;\n            mask_b_arr[j] = cond_b;\n        }\n        vbool8_t mask_a = vlm_v_b8(mask_a_arr, vl);\n        vbool8_t mask_b = vlm_v_b8(mask_b_arr, vl);\n        vint32m4_t v_squared = vmul_vv_i32m4(v_orig, v_orig, vl);\n        vint32m4_t v_result = vmerge_vvm_i32m4(mask_a, v_squared, v_orig, v_orig, vl);\n        vint32m4_t v_cubed = vmul_vv_i32m4(v_squared, v_orig, vl);\n        v_result = vmerge_vvm_i32m4(mask_b, v_cubed, v_result, v_result, vl);\n        vint32m1_t v_sum = vmv_v_x_i32m1(0, 1);\n        v_sum = vredsum_vs_i32m4_i32m1(v_result, v_sum, vl);\n        sum += vmv_x_s_i32m1_i32(v_sum);\n        i += vl;\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint sum_squares_simd(const std::vector<int> & lst) {\n    int n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n    const int* lst_ptr = lst.data();\n    int base_index = 0;\n    int sum = 0;\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t data = vle32_v_i32m1(lst_ptr, vl);\n        vint32m1_t indices = vid_v_i32m1(vl);\n        vint32m1_t base_vec = vmv_v_x_i32m1(base_index, vl);\n        indices = vadd_vv_i32m1(indices, base_vec, vl);\n        vint32m1_t rem3 = vrem_vx_i32m1(indices, 3, vl);\n        vbool32_t mask1 = vmseq_vx_i32m1_b32(rem3, 0, vl);\n        vint32m1_t rem4 = vrem_vx_i32m1(indices, 4, vl);\n        vbool32_t mask2 = vmseq_vx_i32m1_b32(rem4, 0, vl);\n        mask2 = vmandn_mm_b32(mask2, mask1, vl);\n        vint32m1_t square = vmul_vv_i32m1(data, data, vl);\n        vint32m1_t cube = vmul_vv_i32m1(square, data, vl);\n        vint32m1_t tmp = vmerge_vvm_i32m1(mask1, data, square, vl);\n        vint32m1_t new_data = vmerge_vvm_i32m1(mask2, tmp, cube, vl);\n        vint32m1_t v_acc = vmv_v_x_i32m1(sum, 1);\n        v_acc = vredsum_vs_i32m1_i32m1(v_acc, new_data, v_acc, vl);\n        sum = vmv_x_s_i32m1_i32(v_acc);\n        lst_ptr += vl;\n        base_index += vl;\n        avl -= vl;\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint sum_squares_simd(const std::vector<int> & lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    size_t avl = n;\n    size_t vl;\n\n    for (; (vl = vsetvl_e32m1(avl)) > 0; avl -= vl) {\n        const int *ptr = lst.data() + n - avl;\n        vint32m1_t data = vle32_v_i32m1(ptr, vl);\n        vuint32m1_t index = vid_v_u32m1(vl);\n        index = vadd_vx_u32m1(index, n - avl, vl);\n\n        vuint32m1_t rem3 = vremu_vx_u32m1(index, 3, vl);\n        vbool32_t mask3 = vmseq_vx_u32m1_b32(rem3, 0, vl);\n\n        vuint32m1_t rem4 = vremu_vx_u32m1(index, 4, vl);\n        vbool32_t mask4 = vmseq_vx_u32m1_b32(rem4, 0, vl);\n        mask4 = vmandn_mm_b32(mask4, mask3, vl);\n\n        vint32m1_t squared = vmul_vv_i32m1(data, data, vl);\n        vint32m1_t cubed = vmul_vv_i32m1(squared, data, vl);\n\n        vint32m1_t res = vmerge_vvm_i32m1(mask3, data, squared, vl);\n        res = vmerge_vvm_i32m1(mask4, res, cubed, vl);\n\n        vint32m1_t v_zero = vmv_v_x_i32m1(0, 1);\n        vint32m1_t v_sum_chunk = vredsum_vs_i32m1_i32m1(v_zero, res, v_zero, vl);\n        int chunk_sum = vmv_x_s_i32m1_i32(v_sum_chunk);\n        sum += chunk_sum;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint sum_squares_simd(const std::vector<int> & lst){\n    int total_sum = 0;\n    const int *ptr = lst.data();\n    size_t base = 0;\n    size_t n = lst.size();\n    while (n > 0) {\n        size_t vl = vsetvl_e32m1(n);\n        vint32m1_t v_data = vle32_v_i32m1(ptr, vl);\n        \n        vuint32m1_t v_index = vid_v_u32m1(vl);\n        v_index = vadd_vx_u32m1(v_index, base, vl);\n        \n        vuint32m1_t v_div3 = vdivu_vx_u32m1(v_index, 3, vl);\n        vuint32m1_t v_rem3 = vsub_vv_u32m1(v_index, vmul_vx_u32m1(v_div3, 3, vl), vl);\n        vbool32_t mask_mult3 = vmseq_vx_u32m1_b32(v_rem3, 0, vl);\n        \n        vuint32m1_t v_div4 = vdivu_vx_u32m1(v_index, 4, vl);\n        vuint32m1_t v_rem4 = vsub_vv_u32m1(v_index, vmul_vx_u32m1(v_div4, 4, vl), vl);\n        vbool32_t mask_mult4 = vmseq_vx_u32m1_b32(v_rem4, 0, vl);\n        mask_mult4 = vand_mm_b32(mask_mult4, vmnot_m_b32(mask_mult3, vl), vl);\n        \n        vint32m1_t v_square = vmul_vv_i32m1(v_data, v_data, vl);\n        vint32m1_t v_cube = vmul_vv_i32m1(v_square, v_data, vl);\n        \n        v_data = vmerge_vvm_i32m1(mask_mult4, v_data, v_cube, vl);\n        v_data = vmerge_vvm_i32m1(mask_mult3, v_data, v_square, vl);\n        \n        vint32m1_t v_dest = vmv_v_x_i32m1(0, vl);\n        v_dest = vredsum_vs_i32m1_i32m1(v_dest, v_data, v_dest, vl);\n        total_sum += vmv_x_s_i32m1_i32(v_dest);\n        \n        ptr += vl;\n        base += vl;\n        n -= vl;\n    }\n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint specialFilter_simd(const std::vector<int> & nums){\n    size_t n = nums.size();\n    int count = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&nums[i], vl);\n        i += vl;\n\n        vbool32_t mask_a = vmsgt_vx_i32m1_b32(v, 10, vl);\n        vint32m1_t v_low = vand_vx_i32m1(v, 1, vl);\n        vbool32_t mask_b1 = vmseq_vx_i32m1_b32(v_low, 1, vl);\n        vbool32_t combined_mask = vmand_mm_b32(mask_a, mask_b1, vl);\n\n        int num_candidates = vcpop_m_b32(combined_mask, vl);\n        if (num_candidates > 0) {\n            int candidate_arr[num_candidates];\n            vint32m1_t candidate_vec = vundefined_i32m1();\n            candidate_vec = vcompress_vm_i32m1(combined_mask, candidate_vec, v, vl);\n            vse32_v_i32m1(candidate_arr, candidate_vec, num_candidates);\n\n            for (int j = 0; j < num_candidates; j++) {\n                int num = candidate_arr[j];\n                int temp = num;\n                while (temp >= 10) {\n                    temp /= 10;\n                }\n                if (temp % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint specialFilter_simd(const std::vector<int> & nums) {\n    int n = nums.size();\n    int count = 0;\n    const int *ptr = nums.data();\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = vsetvl_e32m1(avl);\n        vint32m1_t v = vle32_v_i32m1(ptr, vl);\n        ptr += vl;\n\n        vbool32_t mask1 = vmsgt_vx_i32m1_b32(v, 10, vl);\n        if (vfirst_m_b32(mask1, vl) < 0) {\n            continue;\n        }\n\n        vint32m1_t last_digit = vrem_vx_i32m1(v, 10, vl);\n        vbool32_t mask_last_odd = vmseq_vx_i32m1_b32(last_digit, 1, vl);\n        mask_last_odd = vmor_mm_b32(mask_last_odd, vmseq_vx_i32m1_b32(last_digit, 3, vl), vl);\n        mask_last_odd = vmor_mm_b32(mask_last_odd, vmseq_vx_i32m1_b32(last_digit, 5, vl), vl);\n        mask_last_odd = vmor_mm_b32(mask_last_odd, vmseq_vx_i32m1_b32(last_digit, 7, vl), vl);\n        mask_last_odd = vmor_mm_b32(mask_last_odd, vmseq_vx_i32m1_b32(last_digit, 9, vl), vl);\n\n        vint32m1_t n_val = v;\n        vint32m1_t ten = vmv_v_x_i32m1(10, vl);\n        for (int i = 0; i < 10; i++) {\n            vbool32_t mask_ge10 = vmsge_vx_i32m1_b32(n_val, 10, vl);\n            n_val = vdiv_vv_i32m1_m(mask_ge10, n_val, n_val, ten, vl);\n        }\n\n        vbool32_t mask_first_odd = vmseq_vx_i32m1_b32(n_val, 1, vl);\n        mask_first_odd = vmor_mm_b32(mask_first_odd, vmseq_vx_i32m1_b32(n_val, 3, vl), vl);\n        mask_first_odd = vmor_mm_b32(mask_first_odd, vmseq_vx_i32m1_b32(n_val, 5, vl), vl);\n        mask_first_odd = vmor_mm_b32(mask_first_odd, vmseq_vx_i32m1_b32(n_val, 7, vl), vl);\n        mask_first_odd = vmor_mm_b32(mask_first_odd, vmseq_vx_i32m1_b32(n_val, 9, vl), vl);\n\n        vbool32_t mask_final = vmand_mm_b32(mask1, mask_last_odd, vl);\n        mask_final = vmand_mm_b32(mask_final, mask_first_odd, vl);\n        count += vcpop_m_b32(mask_final, vl);\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint specialFilter_simd(const std::vector<int> & nums) {\n    int count = 0;\n    size_t n = nums.size();\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v = __riscv_vle32_v_i32m1(&nums[i], vl);\n        i += vl;\n\n        vbool32_t mask1 = __riscv_vmsgt_vx_i32m1_b32(v, 10, vl);\n        vint32m1_t last = __riscv_vrem_vx_i32m1(v, 10, vl);\n        vint32m1_t last_odd = __riscv_vand_vx_i32m1(last, 1, vl);\n        vbool32_t mask2 = __riscv_vmsne_vx_i32m1_b32(last_odd, 0, vl);\n\n        vint32m1_t temp = v;\n        for (int j = 0; j < 9; j++) {\n            vbool32_t mask_step = __riscv_vmsgt_vx_i32m1_b32(temp, 9, vl);\n            temp = __riscv_vdiv_vx_i32m1_m(mask_step, temp, temp, 10, vl);\n        }\n        vint32m1_t first_odd = __riscv_vand_vx_i32m1(temp, 1, vl);\n        vbool32_t mask3 = __riscv_vmsne_vx_i32m1_b32(first_odd, 0, vl);\n\n        vbool32_t mask = __riscv_vmand_mm_b32(mask1, mask2, vl);\n        mask = __riscv_vmand_mm_b32(mask, mask3, vl);\n        count += __riscv_vcpop_m_b32(mask, vl);\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint specialFilter_simd(const std::vector<int> & nums) {\n    int n = nums.size();\n    int result = 0;\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v = __riscv_vle32_v_i32m1(&nums[i], vl);\n        i += vl;\n\n        vbool32_t mask_gt10 = __riscv_vmsgt_vx_i32m1_b32(v, 10, vl);\n        vint32m1_t v_lsb = __riscv_vand_vx_i32m1(v, 1, vl);\n        vbool32_t mask_odd = __riscv_vmseq_vx_i32m1_b32(v_lsb, 1, vl);\n\n        vint32m1_t v_first = v;\n        for (int j = 0; j < 10; j++) {\n            vbool32_t mask_ge10 = __riscv_vmsgt_vx_i32m1_b32(v_first, 9, vl);\n            if (__riscv_vcpop_m_b32(mask_ge10, vl) == 0) break;\n            v_first = __riscv_vdiv_vx_i32m1_m(mask_ge10, v_first, v_first, 10, vl);\n        }\n\n        vint32m1_t v_first_lsb = __riscv_vand_vx_i32m1(v_first, 1, vl);\n        vbool32_t mask_first_odd = __riscv_vmseq_vx_i32m1_b32(v_first_lsb, 1, vl);\n\n        vbool32_t mask_valid = __riscv_vmand_mm_b32(mask_gt10, mask_odd, vl);\n        mask_valid = __riscv_vmand_mm_b32(mask_valid, mask_first_odd, vl);\n        result += __riscv_vcpop_m_b32(mask_valid, vl);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint specialFilter_simd(const std::vector<int> & nums) {\n    size_t n = nums.size();\n    int count = 0;\n    const int *ptr = nums.data();\n    size_t avl = n;\n\n    const int divisors[] = {1000000000, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100, 10};\n    const int num_divisors = sizeof(divisors) / sizeof(divisors[0]);\n\n    while (avl > 0) {\n        size_t vl = vsetvl_e32m1(avl);\n        vint32m1_t v = vle32_v_i32m1(ptr, vl);\n\n        vbool32_t mask_gt10 = vmsgt_vx_i32m1_b32(v, 10, vl);\n\n        vint32m1_t quotient = vdiv_vx_i32m1(v, 10, vl);\n        vint32m1_t last_digit = vsub_vv_i32m1(v, vmul_vx_i32m1(quotient, 10, vl), vl);\n\n        vint32m1_t first_digit = vmv_v_x_i32m1(0, vl);\n        vbool32_t mask_unset = mask_gt10;\n\n        for (int i = 0; i < num_divisors; i++) {\n            int d = divisors[i];\n            vbool32_t mask_d = vmsge_vx_i32m1_b32(v, d, vl);\n            mask_d = vand_vv_b32(mask_d, mask_unset, vl);\n\n            first_digit = vdiv_vx_i32m1_m(mask_d, first_digit, v, d, vl);\n            mask_unset = vand_vv_b32(mask_unset, vmnot_m_b32(mask_d, vl), vl);\n        }\n\n        vint32m1_t first_odd = vand_vx_i32m1(first_digit, 1, vl);\n        vbool32_t mask_odd_first = vmseq_vx_i32m1_b32(first_odd, 1, vl);\n\n        vint32m1_t last_odd = vand_vx_i32m1(last_digit, 1, vl);\n        vbool32_t mask_odd_last = vmseq_vx_i32m1_b32(last_odd, 1, vl);\n\n        vbool32_t mask_combined = vand_vv_b32(mask_odd_first, mask_odd_last, vl);\n        vbool32_t mask_final = vand_vv_b32(mask_gt10, mask_combined, vl);\n\n        count += vcpop_m_b32(mask_final, vl);\n\n        ptr += vl;\n        avl -= vl;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    if (n < 3) {\n        return 0;\n    }\n\n    uint64_t total = n;\n    uint64_t count0 = 0;\n    uint64_t i = 1;\n    size_t vl;\n    while (n > 0) {\n        vl = vsetvl_e64m1(n);\n        n -= vl;\n\n        vuint64m1_t v_j = vid_v_u64m1();\n        vuint64m1_t v_i = vadd_vx_u64m1(v_j, i, vl);\n\n        uint64_t base_res = i % 3;\n        vuint64m1_t v_res = vadd_vx_u64m1(v_j, base_res, vl);\n\n        vbool64_t mask_ge3 = vmsgeu_vx_u64m1(v_res, 3, vl);\n        vuint64m1_t v_res_sub = vsub_vx_u64m1(v_res, 3, vl);\n        v_res = vmerge_vvm_u64m1(mask_ge3, v_res_sub, v_res, vl);\n\n        vbool64_t mask0 = vmseq_vx_u64m1(v_res, 2, vl);\n        count0 += vpopc(mask0);\n\n        i += vl;\n    }\n\n    uint64_t count1 = total - count0;\n    uint64_t triples0 = (count0 < 3) ? 0 : (count0 * (count0 - 1) * (count0 - 2)) / 6;\n    uint64_t triples1 = (count1 < 3) ? 0 : (count1 * (count1 - 1) * (count1 - 2)) / 6;\n\n    return triples0 + triples1;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    if (n > 10000000) {\n        uint64_t count0 = (n + 1) / 3;\n        uint64_t count1 = n - count0;\n        uint64_t triples = 0;\n        if (count0 >= 3) {\n            uint64_t a0 = count0, b0 = count0 - 1, c0 = count0 - 2;\n            if (a0 % 2 == 0) a0 /= 2;\n            else if (b0 % 2 == 0) b0 /= 2;\n            else c0 /= 2;\n            if (a0 % 3 == 0) a0 /= 3;\n            else if (b0 % 3 == 0) b0 /= 3;\n            else c0 /= 3;\n            triples = a0 * b0 * c0;\n        }\n        if (count1 >= 3) {\n            uint64_t a1 = count1, b1 = count1 - 1, c1 = count1 - 2;\n            if (a1 % 2 == 0) a1 /= 2;\n            else if (b1 % 2 == 0) b1 /= 2;\n            else c1 /= 2;\n            if (a1 % 3 == 0) a1 /= 3;\n            else if (b1 % 3 == 0) b1 /= 3;\n            else c1 /= 3;\n            triples += a1 * b1 * c1;\n        }\n        return triples;\n    } else {\n        uint64_t cnt0 = 0;\n        size_t vl;\n        for (uint64_t i = 1; i <= n; ) {\n            vl = vsetvl_e64m1(n - i + 1);\n            vuint64m1_t vec_i = vid_v_u64m1(vl);\n            vec_i = vadd_vx_u64m1(vec_i, i, vl);\n            vuint64m1_t vec_mod = vremu_vx_u64m1(vec_i, 3, vl);\n            vbool64_t mask = vmseq_vx_u64m1_b64(vec_mod, 2, vl);\n            cnt0 += vcpop_m_b64(mask, vl);\n            i += vl;\n        }\n        uint64_t cnt1 = n - cnt0;\n        uint64_t triples = 0;\n        if (cnt0 >= 3) {\n            uint64_t a0 = cnt0, b0 = cnt0 - 1, c0 = cnt0 - 2;\n            if (a0 % 2 == 0) a0 /= 2;\n            else if (b0 % 2 == 0) b0 /= 2;\n            else c0 /= 2;\n            if (a0 % 3 == 0) a0 /= 3;\n            else if (b0 % 3 == 0) b0 /= 3;\n            else c0 /= 3;\n            triples = a0 * b0 * c0;\n        }\n        if (cnt1 >= 3) {\n            uint64_t a1 = cnt1, b1 = cnt1 - 1, c1 = cnt1 - 2;\n            if (a1 % 2 == 0) a1 /= 2;\n            else if (b1 % 2 == 0) b1 /= 2;\n            else c1 /= 2;\n            if (a1 % 3 == 0) a1 /= 3;\n            else if (b1 % 3 == 0) b1 /= 3;\n            else c1 /= 3;\n            triples += a1 * b1 * c1;\n        }\n        return triples;\n    }\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdlib.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    if (n == 0) {\n        return 0;\n    }\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n    if (a == NULL) {\n        return 0;\n    }\n\n    size_t vl;\n    uint64_t i = 0;\n\n    for (; i < n; ) {\n        vl = __riscv_vsetvl_e64m1(n - i);\n        vuint64m1_t v_index = __riscv_vid_v_u64m1(vl);\n        vuint64m1_t v_j = __riscv_vadd_vx_u64m1(v_index, i+1, vl);\n        vuint64m1_t v_sq = __riscv_vmul_vv_u64m1(v_j, v_j, vl);\n        vuint64m1_t v_t = __riscv_vsub_vv_u64m1(v_sq, v_j, vl);\n        vuint64m1_t v_a = __riscv_vadd_vx_u64m1(v_t, 1, vl);\n        __riscv_vse64_v_u64m1(a + i, v_a, vl);\n        i += vl;\n    }\n\n    uint64_t cnt0 = 0;\n    i = 0;\n    for (; i < n; ) {\n        vl = __riscv_vsetvl_e64m1(n - i);\n        vuint64m1_t v_a = __riscv_vle64_v_u64m1(a + i, vl);\n        vuint64m1_t v_rem = __riscv_vremu_vx_u64m1(v_a, 3, vl);\n        vbool64_t mask = __riscv_vmseq_vx_u64m1_b64(v_rem, 0, vl);\n        cnt0 += __riscv_vcpop_m_b64(mask, vl);\n        i += vl;\n    }\n\n    free(a);\n\n    uint64_t cnt1 = n - cnt0;\n    uint64_t triples0 = 0;\n    if (cnt0 >= 3) {\n        triples0 = (cnt0 * (cnt0 - 1)) / 2;\n        triples0 = (triples0 * (cnt0 - 2)) / 3;\n    }\n    uint64_t triples1 = 0;\n    if (cnt1 >= 3) {\n        triples1 = (cnt1 * (cnt1 - 1)) / 2;\n        triples1 = (triples1 * (cnt1 - 2)) / 3;\n    }\n\n    return triples0 + triples1;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    if (n == 0) return 0;\n    uint64_t count0 = 0;\n    size_t vl;\n    uint64_t i = 1;\n    while (i <= n) {\n        vl = vsetvl_e64m1(n - i + 1);\n        vuint64m1_t vec_index = vid_v_u64m1(vl);\n        vuint64m1_t vec_i = vadd_vx_u64m1(vec_index, i, vl);\n        vuint64m1_t quotient = vdivu_vx_u64m1(vec_i, 3, vl);\n        vuint64m1_t remainder = vsub_vv_u64m1(vec_i, vmul_vx_u64m1(quotient, 3, vl), vl);\n        vbool64_t mask = vmseq_vx_u64m1_b64(remainder, 2, vl);\n        count0 += vpopc_b64(mask, vl);\n        i += vl;\n    }\n    uint64_t count1 = n - count0;\n    uint64_t ans = 0;\n    if (count0 >= 3) {\n        ans += count0 * (count0 - 1) * (count0 - 2) / 6;\n    }\n    if (count1 >= 3) {\n        ans += count1 * (count1 - 1) * (count1 - 2) / 6;\n    }\n    return ans;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    if (n == 0) {\n        return 0;\n    }\n\n    uint64_t count0 = 0;\n    uint64_t count1 = 0;\n    uint64_t i = 1;\n    size_t vl;\n\n    while (i <= n) {\n        vl = vsetvl_e64m1(n - i + 1);\n        vuint64m1_t v_index = vid_v_u64m1(vl);\n        vuint64m1_t v_base = vmv_v_x_u64m1(i, vl);\n        v_index = vadd_vv_u64m1(v_index, v_base, vl);\n        vuint64m1_t v_mod = vremu_vx_u64m1(v_index, 3, vl);\n        vbool64_t mask = vmseq_vx_u64m1_b64(v_mod, 2, vl);\n        uint64_t seg_count0 = vcpop_m_b64(mask, vl);\n        count0 += seg_count0;\n        count1 += vl - seg_count0;\n        i += vl;\n    }\n\n    uint64_t triples0 = (count0 >= 3) ? (count0 * (count0 - 1) * (count0 - 2)) / 6 : 0;\n    uint64_t triples1 = (count1 >= 3) ? (count1 * (count1 - 1) * (count1 - 2)) / 6 : 0;\n    return triples0 + triples1;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    if (n <= 1) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n\n    int sqrt_n = 1;\n    while (sqrt_n <= n / sqrt_n) {\n        sqrt_n++;\n    }\n    sqrt_n--;\n\n    int current = 3;\n    size_t vl;\n    while (current <= sqrt_n) {\n        unsigned long num_divisors = (sqrt_n - current) / 2 + 1;\n        vl = __riscv_vsetvl_e32m1(num_divisors);\n        \n        vint32m1_t indices = __riscv_vid_v_i32m1(vl);\n        vint32m1_t step_vec = __riscv_vsll_vx_i32m1(indices, 1, vl);\n        vint32m1_t divisor_vec = __riscv_vadd_vx_i32m1(step_vec, current, vl);\n        \n        vint32m1_t n_vec = __riscv_vmv_v_x_i32m1(n, vl);\n        vint32m1_t rem_vec = __riscv_vrem_vv_i32m1(n_vec, divisor_vec, vl);\n        \n        vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(rem_vec, 0, vl);\n        if (__riscv_vfirst_m_b32(mask, vl) >= 0) {\n            return y;\n        }\n        \n        current += 2 * vl;\n    }\n    \n    return x;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    if (n <= 1) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n\n    int max_divisor = 2;\n    while (max_divisor <= n / max_divisor) {\n        max_divisor++;\n    }\n    max_divisor--;\n\n    if (max_divisor < 3) {\n        return x;\n    }\n\n    if (max_divisor % 2 == 0) {\n        max_divisor--;\n    }\n\n    int total_candidates = ((max_divisor - 3) / 2) + 1;\n    size_t vl;\n    unsigned long found = 0;\n\n    for (int i = 0; i < total_candidates; ) {\n        vl = __riscv_vsetvl_e32m1(total_candidates - i);\n        vuint32m1_t index_vec = __riscv_vadd_vx_u32m1(__riscv_vid_v_u32m1(vl), i, vl);\n        vuint32m1_t divisor_vec = __riscv_vadd_vx_u32m1(__riscv_vsll_vx_u32m1(index_vec, 1, vl), 3, vl);\n        vuint32m1_t n_vec = __riscv_vmv_v_x_u32m1(n, vl);\n        vuint32m1_t rem_vec = __riscv_vremu_vv_u32m1(n_vec, divisor_vec, vl);\n        vbool32_t mask = __riscv_vmseq_vx_u32m1_b32(rem_vec, 0, vl);\n        found |= __riscv_vpopc_b32(mask, vl);\n\n        if (found) break;\n        i += vl;\n    }\n\n    return found ? y : x;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    if (n <= 1) {\n        return y;\n    }\n    if (n == 2) {\n        return x;\n    }\n    if (n % 2 == 0) {\n        return y;\n    }\n    \n    int max_divisor = 1;\n    while (max_divisor <= n / max_divisor) {\n        max_divisor++;\n    }\n    max_divisor--;\n    \n    size_t vl;\n    for (int i = 3; i <= max_divisor; ) {\n        size_t remaining = (max_divisor - i) / 2 + 1;\n        vl = vsetvl_e32m1(remaining);\n        \n        vuint32m1_t vec_idx = vid_v_u32m1(vl);\n        vuint32m1_t vec_div = vsll_vx_u32m1(vec_idx, 1, vl);\n        vec_div = vadd_vx_u32m1(vec_div, i, vl);\n        \n        vuint32m1_t vec_n = vmv_v_x_u32m1((unsigned int)n, vl);\n        vuint32m1_t vec_rem = vremu_vv_u32m1(vec_n, vec_div, vl);\n        \n        vbool32_t mask = vmseq_vx_u32m1_b32(vec_rem, 0, vl);\n        int first = vfirst_m_b32(mask, vl);\n        if (first >= 0) {\n            return y;\n        }\n        \n        i += 2 * vl;\n    }\n    \n    return x;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    if (n <= 1) {\n        return y;\n    }\n    if (n == 2) {\n        return x;\n    }\n    if (n % 2 == 0) {\n        return y;\n    }\n\n    int max_divisor = 1;\n    while ((long)max_divisor * max_divisor < n) {\n        max_divisor++;\n    }\n\n    size_t vl;\n    for (int i = 3; i <= max_divisor; ) {\n        vl = __riscv_vsetvl_e32m1((max_divisor - i) / 2 + 1);\n        \n        vuint32m1_t index_vec = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t step_vec = __riscv_vsll_vx_u32m1(index_vec, 1, vl);\n        vuint32m1_t divisor_vec = __riscv_vadd_vx_u32m1(step_vec, i, vl);\n        \n        vuint32m1_t n_vec = __riscv_vmv_v_x_u32m1(n, vl);\n        vuint32m1_t rem_vec = __riscv_vremu_vv_u32m1(n_vec, divisor_vec, vl);\n        \n        vbool32_t mask = __riscv_vmseq_vx_u32m1_b32(rem_vec, 0, vl);\n        if (__riscv_vfirst_m_b32(mask, vl) >= 0) {\n            return y;\n        }\n        \n        i += 2 * vl;\n    }\n    \n    return x;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    if (n <= 1) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n\n    int sqrt_n = 1;\n    if (n <= (1 << 30)) {\n        while (sqrt_n * sqrt_n <= n) sqrt_n++;\n        sqrt_n--;\n    } else {\n        while (sqrt_n <= n / sqrt_n) sqrt_n++;\n        sqrt_n--;\n    }\n\n    if (sqrt_n < 3) return x;\n    size_t avl = (sqrt_n - 1) / 2;\n    int current = 3;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vuint32m1_t v_index = __riscv_vid_v_u32m1(vl);\n        vuint32m1_t v_div = __riscv_vadd_vx_u32m1(__riscv_vsll_vx_u32m1(v_index, 1, vl), current, vl);\n        uint32_t d_arr[vl];\n        __riscv_vse32_v_u32m1(d_arr, v_div, vl);\n\n        for (size_t j = 0; j < vl; j++) {\n            if (n % d_arr[j] == 0) {\n                return y;\n            }\n        }\n\n        current += 2 * vl;\n        avl -= vl;\n    }\n\n    return x;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n\n    vuint64m1_t v_sum = vmv_v_x_u64m1(0, 1);\n    size_t vl;\n\n    for (size_t i = 0; i < n; ) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v = vle32_v_f32m1(&lst[i], vl);\n        \n        vbool32_t mask_positive = vmfgt_vf_f32m1_b32(v, 0.0f, vl);\n        vint32m1_t v_int = vfcvt_rtz_x_f_v_i32m1(v, vl);\n        vfloat32m1_t v_trunc = vfcvt_f_x_v_f32m1(v_int, vl);\n        vbool32_t mask_integer = vfeq_vv_f32m1_b32(v, v_trunc, vl);\n        vbool32_t mask_pos_int = vmand_mm_b32(mask_positive, mask_integer, vl);\n        \n        vint32m1_t lsb = vand_vx_i32m1(v_int, 1, vl);\n        vbool32_t mask_odd = vmseq_vx_i32m1_b32(lsb, 1, vl);\n        vbool32_t mask_final = vmand_mm_b32(mask_pos_int, mask_odd, vl);\n        \n        vint64m2_t square = vwmul_vv_i64m2(v_int, v_int, vl);\n        vint64m2_t square_masked = vmerge_vxm_i64m2(mask_final, square, 0, vl);\n        vuint64m2_t square_unsigned = vreinterpret_u64m2_i64m2(square_masked);\n        v_sum = vredsum_vs_u64m2_u64m1(v_sum, square_unsigned, v_sum, vl);\n        \n        i += vl;\n    }\n\n    return vmv_x_s_u64m1_u64(v_sum);\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n\n    uint64_t total_sum = 0;\n    size_t vl;\n    for (size_t avl = n; avl > 0; avl -= vl) {\n        vl = __riscv_vsetvl_e32m8(avl);\n        const float *start = lst.data() + (n - avl);\n        vfloat32m8_t v = __riscv_vle32_v_f32m8(start, vl);\n\n        vbool4_t mask_nonneg = __riscv_vmfge_vf_f32m8_b4(v, 0.0f, vl);\n        vint32m8_t v_int = __riscv_vfcvt_rtz_x_f_v_i32m8(v, vl);\n        vfloat32m8_t v_floor = __riscv_vfcvt_f_x_v_f32m8(v_int, vl);\n        vbool4_t mask_integer = __riscv_vmfeq_vv_f32m8_b4(v, v_floor, vl);\n        vint32m8_t v_lsb = __riscv_vand_vx_i32m8(v_int, 1, vl);\n        vbool4_t mask_odd = __riscv_vmsne_vx_i32m8_b4(v_lsb, 0, vl);\n\n        vbool4_t mask = __riscv_vmand_mm_b4(mask_nonneg, mask_integer, vl);\n        mask = __riscv_vmand_mm_b4(mask, mask_odd, vl);\n\n        size_t selected_count = __riscv_vcpop_m_b4(mask, vl);\n        if (selected_count == 0) {\n            continue;\n        }\n\n        vint32m8_t v_int_compressed = __riscv_vundefined_i32m8();\n        v_int_compressed = __riscv_vcompress_vm_i32m8(mask, v_int_compressed, v_int, vl);\n        size_t vl64 = __riscv_vsetvl_e64m4(selected_count);\n        vint64m4_t v_int64 = __riscv_vwcvt_x_x_v_i64m4(v_int_compressed, vl64);\n        vint64m4_t v_sq = __riscv_vmul_vv_i64m4(v_int64, v_int64, vl64);\n        vint64m1_t v_sum_red = __riscv_vmv_v_x_i64m1(0, 1);\n        v_sum_red = __riscv_vredsum_vs_i64m4_i64m1(v_sq, v_sum_red, vl64);\n        int64_t sum_part = __riscv_vmv_x_s_i64m1_i64(v_sum_red);\n        total_sum += (uint64_t)sum_part;\n    }\n\n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nuint64_t double_the_difference_simd(const std::vector<float> &lst) {\n    uint64_t sum = 0;\n    size_t n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n    const float *ptr = lst.data();\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vfloat32m1_t vf = __riscv_vle32_v_f32m1(ptr + i, vl);\n        vbool32_t mask_pos = __riscv_vmfgt_vf_f32m1_b32(vf, 0.0f, vl);\n        vint32m1_t vi32 = __riscv_vfcvt_rtz_x_f_v_i32m1(vf, vl);\n        vfloat32m1_t vf_int = __riscv_vfcvt_f_x_v_f32m1(vi32, vl);\n        vbool32_t mask_int = __riscv_vmfeq_vv_f32m1_b32(vf, vf_int, vl);\n        vbool32_t mask_pos_int = __riscv_vmand_mm_b32(mask_pos, mask_int, vl);\n        vint32m1_t vones = __riscv_vmv_v_x_i32m1(1, vl);\n        vint32m1_t vand = __riscv_vand_vv_i32m1(vi32, vones, vl);\n        vbool32_t mask_odd = __riscv_vmseq_vx_i32m1_b32(vand, 1, vl);\n        vbool32_t mask_final = __riscv_vmand_mm_b32(mask_pos_int, mask_odd, vl);\n        vint32m1_t v_compressed = __riscv_vundefined_i32m1();\n        v_compressed = __riscv_vcompress_vm_i32m1(v_compressed, vi32, mask_final, vl);\n        size_t vl_comp = __riscv_vcpop_m_b32(mask_final, vl);\n        if (vl_comp > 0) {\n            vuint32m1_t vu32_comp = __riscv_vreinterpret_v_i32m1_u32m1(v_compressed);\n            vuint64m2_t vu64_comp = __riscv_vwcvtu_x_x_v_u64m2(vu32_comp, vl_comp);\n            vuint64m2_t vsquare = __riscv_vmul_vv_u64m2(vu64_comp, vu64_comp, vl_comp);\n            vuint64m1_t vred = __riscv_vmv_s_x_u64m1(0, 1);\n            vred = __riscv_vredsum_vs_u64m2_u64m1(vsquare, vred, vl_comp);\n            uint64_t seg_sum = __riscv_vmv_x_s_u64m1_u64(vred);\n            sum += seg_sum;\n        }\n        i += vl;\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    size_t n = lst.size();\n    if (n == 0) {\n        return 0;\n    }\n\n    size_t vl;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t vf = vle32_v_f32m1(&lst[i], vl);\n        \n        vbool32_t mask_pos = vmfgt_vf_f32m1_b32(vf, 0.0f, vl);\n        vint32m1_t vi32 = vfcvt_rtz_x_f_v_i32m1(vf, vl);\n        vfloat32m1_t vf2 = vfcvt_f_x_v_f32m1(vi32, vl);\n        vbool32_t mask_int = vmfeq_vv_f32m1_b32(vf, vf2, vl);\n        vbool32_t mask_int_pos = vmand_mm_b32(mask_pos, mask_int, vl);\n        \n        vint32m1_t vones = vmv_v_x_i32m1(1, vl);\n        vint32m1_t vlsb = vand_vv_i32m1(vi32, vones, vl);\n        vbool32_t mask_odd = vmseq_vx_i32m1_b32(vlsb, 1, vl);\n        vbool32_t mask_final = vmand_mm_b32(mask_int_pos, mask_odd, vl);\n        \n        vuint32m1_t vu32 = vreinterpret_v_i32m1_u32m1(vi32);\n        vuint64m2_t vu64 = vwcvtu_x_x_v_u64m2(vu32, vl);\n        vuint64m2_t vu64_sq = vmul_vv_u64m2(vu64, vu64, vl);\n        vuint64m2_t vu64_masked = vmerge_vvm_u64m2(vmv_v_x_u64m2(0, vl), vu64_sq, mask_final, vl);\n        \n        vuint64m1_t vd_red = vundefined_u64m1();\n        vd_red = vmv_s_x_u64m1(vd_red, sum, 1);\n        vd_red = vredsum_vs_u64m2_u64m1(vd_red, vu64_masked, vd_red, vl);\n        sum = vmv_x_s_u64m1_u64(vd_red);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <climits>\n\nuint64_t double_the_difference_simd(const std::vector<float> & lst){\n    if (lst.empty()) {\n        return 0;\n    }\n    uint64_t sum = 0;\n    const float* ptr = lst.data();\n    size_t n = lst.size();\n    size_t vl;\n    const float int32_max = static_cast<float>(INT32_MAX);\n    for (size_t avl = n; avl > 0; avl -= vl, ptr += vl) {\n        vl = vsetvl_e32m1(avl);\n        vfloat32m1_t v_float = vle32_v_f32m1(ptr, vl);\n        \n        vbool32_t mask1 = vmfge_vf_f32m1_b32(v_float, 0.0f, vl);\n        \n        vint32m1_t v_int = vfcvt_rtz_x_f_v_i32m1(v_float, vl);\n        vfloat32m1_t v_float2 = vfcvt_f_x_v_f32m1(v_int, vl);\n        \n        vbool32_t mask_eq = vmfeq_vv_f32m1_b32(v_float, v_float2, vl);\n        vfloat32m1_t max_vec = vfmv_v_f_f32m1(int32_max, vl);\n        vbool32_t mask_le = vmfle_vv_f32m1_b32(v_float, max_vec, vl);\n        vbool32_t mask2 = vmand_mm_b32(mask_eq, mask_le, vl);\n        \n        vint32m1_t one = vmv_v_x_i32m1(1, vl);\n        vint32m1_t and_result = vand_vv_i32m1(v_int, one, vl);\n        vbool32_t mask_odd = vmseq_vx_i32m1_b32(and_result, 1, vl);\n        \n        vbool32_t mask = vmand_mm_b32(mask1, mask2, vl);\n        mask = vmand_mm_b32(mask, mask_odd, vl);\n        \n        vuint32m1_t v_uint32 = vreinterpret_v_i32m1_u32m1(v_int);\n        vuint32m1_t masked_v_uint32 = vmerge_vxm_u32m1(v_uint32, 0, mask, vl);\n        \n        vuint64m2_t square = vwmulu_vv_u64m2(masked_v_uint32, masked_v_uint32, vl);\n        \n        vuint64m1_t v_zero = vmv_v_x_u64m1(0, 1);\n        vuint64m1_t red_temp = vredsumu_vs_u64m2_u64m1(square, v_zero, vl);\n        uint64_t chunk_sum = vmv_x_s_u64m1_u64(red_temp);\n        \n        sum += chunk_sum;\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n    size_t vl;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t game_vec = __riscv_vle32_v_i32m1(&game[i], vl);\n        vint32m1_t guess_vec = __riscv_vle32_v_i32m1(&guess[i], vl);\n        vint32m1_t diff_vec = __riscv_vsub_vv_i32m1(game_vec, guess_vec, vl);\n        vint32m1_t abs_vec = __riscv_vabs_v_i32m1(diff_vec, vl);\n        __riscv_vse32_v_i32m1(&result[i], abs_vec, vl);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> res(n);\n    size_t vl;\n    for (size_t i = 0; i < n; ) {\n        vl = __riscv_vsetvl_e32m8(n - i);\n        vint32m8_t v_game = __riscv_vle32_v_i32m8(&game[i], vl);\n        vint32m8_t v_guess = __riscv_vle32_v_i32m8(&guess[i], vl);\n        vint32m8_t v_sub = __riscv_vsub_vv_i32m8(v_game, v_guess, vl);\n        vbool4_t mask = __riscv_vmslt_vx_i32m8_b4(v_sub, 0, vl);\n        vint32m8_t v_neg = __riscv_vrsub_vx_i32m8(v_sub, 0, vl);\n        vint32m8_t v_abs = __riscv_vmerge_vvm_i32m8(v_neg, v_sub, mask, vl);\n        __riscv_vse32_v_i32m8(&res[i], v_abs, vl);\n        i += vl;\n    }\n    return res;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n    if (n == 0) {\n        return result;\n    }\n    const int* game_ptr = game.data();\n    const int* guess_ptr = guess.data();\n    int* res_ptr = result.data();\n    size_t avl = n;\n    while (avl > 0) {\n        size_t vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t a = __riscv_vle32_v_i32m1(game_ptr, vl);\n        vint32m1_t b = __riscv_vle32_v_i32m1(guess_ptr, vl);\n        vint32m1_t diff_ab = __riscv_vsub_vv_i32m1(a, b, vl);\n        vint32m1_t diff_ba = __riscv_vsub_vv_i32m1(b, a, vl);\n        vbool32_t mask = __riscv_vmslt_vv_i32m1_b32(a, b, vl);\n        vint32m1_t abs_diff = __riscv_vmerge_vvm_i32m1(diff_ab, diff_ba, mask, vl);\n        __riscv_vse32_v_i32m1(res_ptr, abs_diff, vl);\n        game_ptr += vl;\n        guess_ptr += vl;\n        res_ptr += vl;\n        avl -= vl;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n    const int* game_ptr = game.data();\n    const int* guess_ptr = guess.data();\n    int* res_ptr = result.data();\n    size_t avl = n;\n    size_t vl;\n\n    while (avl > 0) {\n        vl = __riscv_vsetvl_e32m1(avl);\n        vint32m1_t g_vec = __riscv_vle32_v_i32m1(game_ptr, vl);\n        vint32m1_t u_vec = __riscv_vle32_v_i32m1(guess_ptr, vl);\n        vint32m1_t diff = __riscv_vsub_vv_i32m1(g_vec, u_vec, vl);\n        vbool32_t mask = __riscv_vmslt_vx_i32m1_b32(diff, 0, vl);\n        vint32m1_t abs_diff = __riscv_vneg_v_i32m1_m(mask, diff, vl);\n        __riscv_vse32_v_i32m1(res_ptr, abs_diff, vl);\n        game_ptr += vl;\n        guess_ptr += vl;\n        res_ptr += vl;\n        avl -= vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> res(n);\n    size_t vl;\n    for (size_t pos = 0; pos < n; ) {\n        vl = vsetvl_e32m1(n - pos);\n        vint32m1_t game_vec = vle32_v_i32m1(&game[pos], vl);\n        vint32m1_t guess_vec = vle32_v_i32m1(&guess[pos], vl);\n        vint32m1_t diff = vsub_vv_i32m1(game_vec, guess_vec, vl);\n        vbool32_t mask = vmslt_vx_i32m1_b32(diff, 0, vl);\n        vint32m1_t abs_diff = vneg_v_i32m1_m(mask, diff, vl);\n        vse32_v_i32m1(&res[pos], abs_diff, vl);\n        pos += vl;\n    }\n    return res;\n}\n```"}

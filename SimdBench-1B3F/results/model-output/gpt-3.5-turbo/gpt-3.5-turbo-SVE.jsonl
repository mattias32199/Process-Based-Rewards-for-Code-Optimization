{"task_id": "SimdBench_0_SVE", "completion": "```\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    for (; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t src_vec = svld1(pg, &src[i]);\n        svbool_t mask_vec = svld1_b8(pg, &mask[i]);\n        svint64_t result = svsel_s64(src_vec, svdup_n_s64(0), mask_vec);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl = svcntd(); \n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t src_vec = svld1(pg, &src[i]);\n        svint64_t dst_vec = svld1(pg, &dst[i]);\n        svbool_t mask_vec = svld1(pg, &mask[i]);\n        dst_vec = svsel(pg, src_vec, dst_vec, mask_vec);\n        svst1(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    for (; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t src_vec = svld1(pg, &src[i]);\n        svbool_t mask_vec = svld1(pg, &mask[i]);\n        svint64_t result = svsel(src_vec, svld1(pg, &dst[i]), mask_vec);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    for (; i < length; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t src_vec = svld1(pg, &src[i]);\n        svbool_t mask_vec = svld1_b8(pg, &mask[i]);\n        svint64_t result = svsel(src_vec, svdup_n_s64(0), mask_vec);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t mask_sv = svld1(pg, mask + i);\n        svint64_t src_sv = svld1(pg, src + i);\n        svint64_t dst_sv = svld1(pg, dst + i);\n        dst_sv = svsel(pg, src_sv, dst_sv, svreinterpret_s64_u64(mask_sv));\n        svst1(pg, dst + i, dst_sv);\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, length); // Predicate for the loop\n\n    for (size_t i = 0; i < length; i += vl) {\n        svint32_t src_vec = svld1_s32(pg, &src[i]); // Load vector of src elements\n        svint32_t tmp1 = svmul_n_s32_z(pg, src_vec, scale, 3); // Calculate tmp1\n        svint32_t tmp2 = svmul_n_s32_z(pg, src_vec, scale, -3); // Calculate tmp2\n        svint32_t result = svdiv_s32_z(pg, svadd_s32_z(pg, src_vec, svmul_s32_z(pg, tmp1, tmp2)), 7); // Compute final result\n        svst1_s32(pg, &dst[i], result); // Store the result in dst\n        pg = svwhilelt_b32(i + vl, length); // Update predicate for the next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, length); // Predicate to iterate over the arrays\n\n    for (size_t i = 0; i < length; i += vl) {\n        svint32_t src_vec = svld1_s32(pg, &src[i]); // Load elements from src array\n        svint32_t tmp1 = svmul_n_s32_z(pg, src_vec, scale, 3); // Calculate tmp1\n        svint32_t tmp2 = svmul_n_s32_z(pg, src_vec, scale, -3); // Calculate tmp2\n        svint32_t result = svdiv_n_s32_z(pg, svadd_n_s32_z(pg, src_vec, svmul_s32_z(pg, tmp1, tmp2)), 7); // Compute final result\n        svst1_s32(pg, &dst[i], result); // Store the result in dst array\n        pg = svwhilelt_b32(i + vl, length); // Update predicate for next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, length); // Predicate for the loop\n\n    for (size_t i = 0; i < length; i += vl) {\n        svint32_t src_vec = svld1_s32(pg, &src[i]); // Load elements from src array\n        svint32_t tmp1 = svmul_n_s32_z(pg, src_vec, scale, 3); // Calculate tmp1\n        svint32_t tmp2 = svmul_n_s32_z(pg, src_vec, scale, -3); // Calculate tmp2\n        svint32_t result = svdiv_n_s32_z(pg, svadd_n_s32_z(pg, src_vec, svmul_s32_z(pg, tmp1, tmp2)), 7); // Compute the final result\n        svst1_s32(pg, &dst[i], result); // Store the result in dst array\n        pg = svwhilelt_b32(i + vl, length); // Update the predicate for the next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, length); // Predicate for the main loop\n\n    for (size_t i = 0; i < length; i += vl) {\n        svint32_t src_vec = svld1_s32(pg, &src[i]); // Load vector of src elements\n        svint32_t tmp1 = svmul_n_s32_z(pg, src_vec, scale, 3); // Calculate tmp1\n        svint32_t tmp2 = svmul_n_s32_z(pg, src_vec, scale, -3); // Calculate tmp2\n        svint32_t result = svdiv_n_s32_z(pg, svadd_n_s32_z(pg, src_vec, svmul_s32_z(pg, tmp1, tmp2)), 7); // Compute final result\n        svst1_s32(pg, &dst[i], result); // Store the result in dst\n        pg = svwhilelt_b32(i + vl, length); // Update predicate for next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, length); // Predicate for the loop\n\n    for (size_t i = 0; i < length; i += vl) {\n        svint32_t src_vec = svld1_s32(pg, &src[i]); // Load vector of src elements\n        svint32_t tmp1 = svmul_n_s32_z(pg, src_vec, scale, 3); // Calculate tmp1\n        svint32_t tmp2 = svmul_n_s32_z(pg, src_vec, scale, -3); // Calculate tmp2\n        svint32_t result = svdiv_s32_z(pg, svadd_s32_z(pg, src_vec, svmul_s32_z(pg, tmp1, tmp2)), 7); // Compute final result\n        svst1_s32(pg, &dst[i], result); // Store the result in dst\n        pg = svwhilelt_b32(i + vl, length); // Update predicate for the next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t i;\n    for (i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t src_vec = svld1(pg, &src[i * cols + stride]);\n        svst1(pg, &dst[i], src_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t i;\n    for (i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t src_vec = svld1(pg, &src[i * cols + stride]);\n        svst1(pg, &dst[i], src_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t col_blocks = cols / svcntd();\n    svbool_t pg = svwhilelt_b64(0, cols);\n    \n    for (size_t r = 0; r < rows; r++) {\n        for (size_t cb = 0; cb < col_blocks; cb++) {\n            svfloat64_t src_vec = svld1(pg, &src[r * cols + cb * svcntd() + stride]);\n            svst1(pg, &dst[r], src_vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t col_blocks = cols / svcntd();\n    svbool_t pg = svwhilelt_b64(0, cols);\n    \n    for (size_t r = 0; r < rows; r++) {\n        for (size_t cb = 0; cb < col_blocks; cb++) {\n            size_t offset = r * cols + cb * svcntd() + stride;\n            svfloat64_t src_vec = svld1(pg, &src[offset]);\n            svst1(pg, &dst[r], src_vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t col_blocks = cols / svcntd();\n    svbool_t pg = svwhilelt_b64(0, cols);\n    \n    for (size_t r = 0; r < rows; r++) {\n        for (size_t cb = 0; cb < col_blocks; cb++) {\n            svfloat64_t src_vec = svld1(pg, &src[r * cols + cb * svcntd() + stride]);\n            svst1(pg, &dst[r], src_vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl = svcntw(); \n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        \n        svuint32_t index = svld1(pg, indices + i);\n        svfloat32_t value = svld1(pg, src + i);\n        \n        svfloat32_t gathered = svindexa_b32(value, index);\n        svst1(pg, dst + i, gathered);\n        \n        svst1(pg, dst + index, value);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        \n        // Gather operation\n        svfloat32_t src_values = svld1(pg, &src[i]);\n        svint32_t gather_indices = svld1(pg, &indices[i]);\n        svfloat32_t gathered_values = svindexa_s32(src_values, gather_indices);\n        svst1(pg, &dst[i], gathered_values);\n        \n        // Scatter operation\n        svfloat32_t scatter_values = svld1(pg, &src[i]);\n        svint32_t scatter_indices = svld1(pg, &indices[i]);\n        svst1(pg, &dst[i], scatter_values, scatter_indices);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        \n        // Gather operation\n        svfloat32_t src_values = svld1(pg, &src[i]);\n        svint32_t gather_indices = svld1(pg, &indices[i]);\n        svfloat32_t gathered_values = svindexa_s32(src_values, gather_indices);\n        \n        // Scatter operation\n        svst1(pg, &dst[i], gathered_values);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = length;\n\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        // Gather operation\n        svfloat32_t src_values = svld1(pg, &src[i]);\n        svint32_t gather_indices = svld1(pg, &indices[i]);\n        svfloat32_t gathered_values = svindexa_s32(src_values, gather_indices);\n\n        // Scatter operation\n        svst1(pg, &dst[i], gathered_values);\n\n        remaining -= vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b32(length - vl, length);\n\n        // Gather operation for remaining elements\n        svfloat32_t src_values = svld1(pg, &src[length - vl]);\n        svint32_t gather_indices = svld1(pg, &indices[length - vl]);\n        svfloat32_t gathered_values = svindexa_s32(src_values, gather_indices);\n\n        // Scatter operation for remaining elements\n        svst1(pg, &dst[length - vl], gathered_values);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        \n        // Gather operation\n        svuint32_t index_gather = svld1(pg, indices + i);\n        svfloat32_t src_gather = svld1_gather(pg, index_gather, src);\n        svst1(pg, dst + i, src_gather);\n        \n        // Scatter operation\n        svuint32_t index_scatter = svld1(pg, indices + i);\n        svfloat32_t src_scatter = svld1(pg, src + i);\n        svst1_scatter(pg, index_scatter, src_scatter, dst);\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    svbool_t pg = svwhilelt_b16(start, end+1);\n    svint16_t *arr_ptr = (svint16_t*)arr;\n    svint16_t tmp, tmp2;\n\n    for (uint64_t i = start; i <= end; i += svcntw()) {\n        tmp = svld1(pg, &arr_ptr[i]);\n        tmp2 = svld1(pg, &arr_ptr[end - (i - start)]);\n        svst1(pg, &arr_ptr[i], tmp2);\n        svst1(pg, &arr_ptr[end - (i - start)], tmp);\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    svbool_t pg = svwhilelt_b16(start, end+1);\n    svint16_t *arr_sve = (svint16_t *)arr;\n    svint16_t *start_ptr = arr_sve + start;\n    svint16_t *end_ptr = arr_sve + end;\n    \n    while(svptest_any(svptrue_b16(), pg)) {\n        svint16_t tmp = svld1(pg, start_ptr);\n        svst1(pg, start_ptr, svld1(pg, end_ptr));\n        svst1(pg, end_ptr, tmp);\n        \n        start_ptr = svadd_n_s16_x(pg, start_ptr, 1);\n        end_ptr = svsub_n_s16_x(pg, end_ptr, 1);\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    svbool_t pg = svwhilelt_b16(start, end+1);\n    svint16_t *arr_ptr = (svint16_t*)arr;\n    svint16_t tmp, tmp_start, tmp_end;\n\n    tmp_start = svld1(pg, &arr[start]);\n    tmp_end = svld1(pg, &arr[end]);\n    tmp = svrev(tmp_end);\n\n    svst1(pg, &arr[start], tmp);\n    svst1(pg, &arr[end], svrev(tmp_start));\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    svbool_t pg = svwhilelt_b16(start, end+1);\n    svuint64_t indices = svindex_u64(start, 1);\n    svint16_t *ptr = (svint16_t*)(arr + start);\n    svint16_t vec = svld1_s16(pg, ptr);\n\n    while (svptest_any(svptrue_b16(), pg)) {\n        svst1_s16(pg, ptr, svrev_s16_z(pg, vec));\n        indices = svadd_u64_z(pg, indices, svindex_u64(0, 1));\n        ptr = (svint16_t*)(arr + svaddv_u64(pg, indices));\n        vec = svld1_s16(pg, ptr);\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    svbool_t pg = svwhilelt_b16(start, end+1);\n    svint16_t *arr_ptr = (svint16_t*)arr;\n    \n    svint16_t *start_ptr = arr_ptr + start;\n    svint16_t *end_ptr = arr_ptr + end;\n    \n    while(svptest_any(svptrue_b16(), pg)) {\n        svint16_t tmp = svld1(pg, start_ptr);\n        svst1(pg, start_ptr, svld1(pg, end_ptr));\n        svst1(pg, end_ptr, tmp);\n        \n        start_ptr = svadd_n_s16_x(pg, start_ptr, 1);\n        end_ptr = svsub_n_s16_x(pg, end_ptr, 1);\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < dim1; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, dim1);\n        \n        const uint8_t *src_ptr = &tensor[start_idx + i * dim2 * dim3];\n        uint8_t *dst_ptr = &slice[i * dim2];\n        \n        for (size_t j = 0; j < dim2; j += svcntb()) {\n            svbool_t pg_inner = svwhilelt_b8(j, dim2);\n            \n            const uint8_t *src_ptr_inner = &src_ptr[j * dim3];\n            uint8_t *dst_ptr_inner = &dst_ptr[j];\n            \n            svuint8_t loaded_data = svld1_u8(pg_inner, src_ptr_inner);\n            svst1_u8(pg_inner, dst_ptr_inner, loaded_data);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < dim1; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, dim1);\n        const uint8_t *input_ptr = tensor + start_idx + i * dim2;\n        uint8_t *output_ptr = slice + i * dim2;\n        \n        for (size_t j = 0; j < dim2; j += svcntb()) {\n            svuint8_t input_values = svld1_u8(pg, input_ptr + j);\n            svst1_u8(pg, output_ptr + j, input_values);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < slice_size; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, slice_size);\n        svuint8_t tensor_slice = svld1_u8(pg, &tensor[start_idx + i]);\n        svst1_u8(pg, &slice[i], tensor_slice);\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    \n    for (size_t i = 0; i < slice_size; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, slice_size);\n        svuint8_t tensor_slice = svld1_u8(pg, &tensor[start_idx + i]);\n        svst1_u8(pg, &slice[i], tensor_slice);\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n\n    for (size_t i = 0; i < dim1; i += svcntb()) {\n        svbool_t pg = svwhilelt_b8(i, dim1);\n\n        const uint8_t *src_ptr = &tensor[start_idx + i * dim2 * dim3];\n        uint8_t *dst_ptr = &slice[i * dim2];\n\n        for (size_t j = 0; j < dim2; j += svcntb()) {\n            svuint8_t src_values = svld1_u8(pg, src_ptr + j * dim3);\n            svst1_u8(pg, dst_ptr + j, src_values);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t i, j, ii, jj;\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (ii = i; ii < i + block_size && ii < rows; ii += svcntw()) {\n                for (jj = j; jj < j + block_size && jj < cols; jj += svcntw()) {\n                    svbool_t pg = svwhilelt_b16(jj, j + block_size < cols ? jj + svcntw() : cols);\n                    svint16_t vec = svld1(pg, &src[ii * cols + jj]);\n                    svtranspose_s16(svtrn1_s16(vec, vec), svtrn2_s16(vec, vec));\n                    svst1(pg, &dst[jj * rows + ii], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t i, j, ii, jj;\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (ii = i; ii < i + block_size && ii < rows; ii += svcntw()) {\n                for (jj = j; jj < j + block_size && jj < cols; jj += svcntw()) {\n                    svbool_t pg = svwhilelt_b16(jj, j + block_size < cols ? jj + svcntw() : cols);\n                    svint16_t vec = svld1(pg, &src[ii * cols + jj]);\n                    svst1(pg, &dst[jj * rows + ii], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t i, j, ii, jj;\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (ii = i; ii < i + block_size && ii < rows; ii += svcntw()) {\n                for (jj = j; jj < j + block_size && jj < cols; jj += svcntw()) {\n                    svbool_t pg = svwhilelt_b16(jj, j + block_size < cols ? jj + svcntw() : cols);\n                    svint16_t vec = svld1(pg, &src[ii * cols + jj]);\n                    svst1(pg, &dst[jj * rows + ii], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t i, j, ii, jj;\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (ii = i; ii < i + block_size && ii < rows; ii += svcntw()) {\n                for (jj = j; jj < j + block_size && jj < cols; jj += svcntw()) {\n                    svbool_t pg = svwhilelt_b16(jj, j + block_size < cols ? jj + svcntw() : cols);\n                    svint16_t vec = svld1(pg, &src[ii * cols + jj]);\n                    svst1(pg, &dst[jj * rows + ii], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t i, j, ii, jj;\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (ii = i; ii < i + block_size && ii < rows; ii += svcntw()) {\n                for (jj = j; jj < j + block_size && jj < cols; jj += svcntw()) {\n                    svbool_t pg = svwhilelt_b16(jj, j + block_size < cols ? jj + svcntw() : cols);\n                    svint16_t vec = svld1(pg, &src[ii * cols + jj]);\n                    svst1(pg, &dst[jj * rows + ii], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t total_elements = dim * dim * dim;\n    size_t elements_per_sve = svcntw(); // Get the number of elements that can be processed in one SVE vector\n    size_t num_vectors = total_elements / elements_per_sve;\n\n    svfloat32_t sum = svdup_n_f32(0.0f);\n    for (size_t i = 0; i < num_vectors; i++) {\n        svbool_t pg = svwhilelt_b32(i * elements_per_sve, total_elements);\n        svfloat32_t vec = svld1(pg, &array[i * elements_per_sve]);\n        sum = svadd_f32_z(pg, sum, vec);\n    }\n\n    float result = 0.0f;\n    for (size_t i = 0; i < svcntw(); i++) {\n        result += svget_f32(sum, i);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t total_elements = dim * dim * dim;\n    size_t elements_per_vector = svcntw();\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    float32_t result_sum = svdup_n_f32(0.0f);\n    for (size_t i = 0; i < total_elements; i += elements_per_vector) {\n        svfloat32_t vec_elements = svld1(pg, &array[i]);\n        svfloat32_t diagonal_elements = svtrn1_f32(vec_elements, vec_elements);\n        result_sum = svadd_f32_z(pg, result_sum, diagonal_elements);\n    }\n\n    float sum = 0.0f;\n    for (size_t i = 0; i < svcntw(); i++) {\n        sum += svaddv_n_f32(pg, result_sum, 0);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t total_elements = dim * dim * dim;\n    size_t elements_per_block = svcntw();\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    float32_t sum = svdup_n_f32(0.0f);\n    for (size_t i = 0; i < total_elements; i += elements_per_block) {\n        svfloat32_t vec_array = svld1(pg, &array[i]);\n        svfloat32_t mask = svcmpeq_f32(vec_array, svindex_u32(0, 1));\n        sum = svadd_f32_m(pg, sum, svmul_f32(mask, vec_array));\n    }\n\n    float result = 0.0f;\n    for (size_t i = 0; i < svcntw(); i++) {\n        result += svaddv_f32(svptrue_b32(), sum);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t total_elements = dim * dim * dim;\n    size_t elements_per_vector = svcntw();\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    float32_t sum = svdup_n_f32(0.0f);\n    for (size_t i = 0; i < total_elements; i += elements_per_vector) {\n        svfloat32_t vec = svld1(pg, &array[i]);\n        sum = svadd_f32_z(pg, sum, svadd_f32_z(pg, svdup_f32(0), vec));\n    }\n\n    float result;\n    svst1(pg, &result, sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t total_elements = dim * dim * dim;\n    size_t elements_per_block = svcntw();\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    float32_t sum = svdup_n_f32(0.0f);\n    for (size_t i = 0; i < total_elements; i += elements_per_block) {\n        svfloat32_t vec_elements = svld1(pg, &array[i]);\n        sum = svadd_f32_m(pg, sum, vec_elements);\n    }\n\n    float result = 0.0f;\n    for (size_t i = 0; i < svcntw(); i++) {\n        result += svaddv_n_f32(svptrue_b32(), sum, i);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t elements = rows * cols;\n    size_t remaining = elements % svcntd();\n    svbool_t pg = svwhilelt_b64(0, elements);\n\n    for (size_t i = 0; i < elements - remaining; i += svcntd()) {\n        svfloat64_t src_vec = svld1(pg, &src[i]);\n        svbool_t pred = svcmpgt_f64(pg, src_vec, svdup_n_f64(threshold));\n        svfloat64_t result = svsel_f64(pred, svmul_n_f64(src_vec, scale), src_vec);\n        svst1(pg, &dst[i], result);\n    }\n\n    if (remaining > 0) {\n        svbool_t pg_remain = svwhilelt_b64(0, remaining);\n        svfloat64_t src_vec = svld1(pg_remain, &src[elements - remaining]);\n        svbool_t pred = svcmpgt_f64(pg_remain, src_vec, svdup_n_f64(threshold));\n        svfloat64_t result = svsel_f64(pred, svmul_n_f64(src_vec, scale), src_vec);\n        svst1(pg_remain, &dst[elements - remaining], result);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b64();\n    \n    for (size_t i = 0; i < elements; i += svcntd()) {\n        svfloat64_t src_vec = svld1(pg, &src[i]);\n        svbool_t pred = svcgt(pg, src_vec, svdup_n_f64(threshold));\n        svfloat64_t result = svsel(pred, svmul_z(pg, src_vec, svdup_n_f64(scale)), src_vec);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b64();\n    \n    for (size_t i = 0; i < elements; i += svcntd()) {\n        svfloat64_t src_vec = svld1(pg, &src[i]);\n        svbool_t pred = svcgt(pg, src_vec, svdup_n_f64(threshold));\n        svfloat64_t result = svsel(pred, svmul_n_f64(src_vec, scale), src_vec);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b64();\n    \n    for (size_t i = 0; i < elements; i += svcntd()) {\n        svfloat64_t src_vec = svld1(pg, &src[i]);\n        svbool_t pred = svcgt(pg, src_vec, svdup_n_f64(threshold));\n        svfloat64_t result = svsel(pred, svmul_n_f64(src_vec, scale), src_vec);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t elements = rows * cols;\n    size_t remaining = elements % svcntd();\n    svbool_t pg = svwhilelt_b64(0, elements);\n\n    for (size_t i = 0; i < elements - remaining; i += svcntd()) {\n        svfloat64_t src_vec = svld1(pg, &src[i]);\n        svbool_t pred = svcgt_f64(pg, src_vec, svdup_n_f64(threshold));\n        svfloat64_t result = svsel_f64(pred, svmul_n_f64(src_vec, scale), src_vec);\n        svst1(pg, &dst[i], result);\n    }\n\n    if (remaining > 0) {\n        svbool_t pg_remain = svwhilelt_b64(0, remaining);\n        svfloat64_t src_vec = svld1(pg_remain, &src[elements - remaining]);\n        svbool_t pred = svcgt_f64(pg_remain, src_vec, svdup_n_f64(threshold));\n        svfloat64_t result = svsel_f64(pred, svmul_n_f64(src_vec, scale), src_vec);\n        svst1(pg_remain, &dst[elements - remaining], result);\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t i;\n    for (i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svuint64_t index = svld1(pg, &indices[i]);\n        svfloat64_t *src_ptr = (svfloat64_t *)&src[index];\n        svst1(pg, &dst[i * cols], svld1(pg, src_ptr));\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t i;\n    for (i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        size_t indices_offset = i * cols;\n        svuint64_t index_vec = svld1(pg, &indices[i]);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svbool_t pg_inner = svwhilelt_b64(j, cols);\n            svfloat64_t src_vec = svld1(pg_inner, &src[indices_offset + j]);\n            svst1(pg_inner, &dst[i * cols + j], src_vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t col_blocks = cols / svcntd();\n    svbool_t pg = svptrue_b64();\n\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        size_t index = indices[i / svcntd()];\n        const double *src_ptr = src + index * cols;\n        double *dst_ptr = dst + i * cols;\n\n        for (size_t j = 0; j < col_blocks; j++) {\n            svfloat64_t src_vec = svld1(pg, &src_ptr[j * svcntd()]);\n            svst1(pg, &dst_ptr[j * svcntd()], src_vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t col_blocks = cols / svcntd();\n    svbool_t pg = svptrue_b64();\n    \n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg_inner = svwhilelt_b64(i, rows);\n        \n        for (size_t j = 0; j < col_blocks; ++j) {\n            svuint64_t index_vec = svld1(pg, &indices[i]);\n            svfloat64_t src_vec = svld1(pg_inner, &src[index_vec * cols + j * svcntd()]);\n            svst1(pg_inner, &dst[i * cols + j * svcntd()], src_vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t i;\n    for (i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        size_t indices_offset = i * cols;\n        svuint64_t index_vec = svld1(pg, &indices[indices_offset]);\n        for (size_t j = 0; j < cols; j++) {\n            svfloat64_t src_vec = svld1(pg, &src[i * cols + j]);\n            svst1(pg, &dst[index_vec * cols + j], src_vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t vec1 = svld1(pg, &src1[i]);\n        svint64_t vec2 = svld1(pg, &src2[i]);\n        svint64_t result = svadd_s64_z(pg, vec1, vec2);\n        svint64_t scalar_vec = svdup_n_s64(scalar);\n        result = svadd_s64_z(pg, result, scalar_vec);\n        result = svqshrn_n_s64_z(pg, result, result, 1);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t vec1 = svld1(pg, &src1[i]);\n        svint64_t vec2 = svld1(pg, &src2[i]);\n        svint64_t result = svadd_s64_z(pg, vec1, vec2);\n        svint64_t scalar_vec = svdup_n_s64(scalar);\n        result = svadd_s64_z(pg, result, scalar_vec);\n        result = svqrdmulh_n_s64_z(pg, result, 1);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n\n        svint64_t vec1 = svld1(pg, &src1[i]);\n        svint64_t vec2 = svld1(pg, &src2[i]);\n\n        svint64_t result = svadd_s64_z(pg, vec1, vec2);\n        result = svadd_s64_z(pg, result, svdup_n_s64(scalar));\n        result = svqshrn_n_s64_z(pg, result, result, 1);\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n\n        svint64_t vec1 = svld1(pg, &src1[i]);\n        svint64_t vec2 = svld1(pg, &src2[i]);\n        svint64_t result = svadd_s64_z(pg, vec1, vec2);\n\n        svint64_t scalar_vec = svdup_n_s64(scalar);\n        result = svadd_s64_z(pg, result, scalar_vec);\n\n        result = svqshrn_n_s64_z(pg, result, result, 1);\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl = svcntd(); // Length of the vectors for the current SVE implementation\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n\n        svint64_t vec1 = svld1(pg, &src1[i]);\n        svint64_t vec2 = svld1(pg, &src2[i]);\n\n        svint64_t result = svadd_n_s64_z(pg, vec1, vec2, scalar);\n        result = svqdmulh_n_s64(result, result, 1); // Divide by 2 (round-toward-zero)\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```\nint vector_even_min_simd(const int *src, size_t length){\n    if (length == 0) {\n        return -1;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t min_val = svdup_n_s32(INT_MAX);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t vec = svld1(pg, &src[i]);\n        svbool_t even_mask = svptrue_b32();\n        svint32_t even_vec = svindex_s32(0, 2);\n        svint32_t even_elements = svtrn2_s32(svunpklo(vec), svunpkhi(vec));\n        svint32_t even_values = svsel(even_mask, even_elements, even_vec);\n        min_val = svmin_s32(min_val, even_values);\n    }\n\n    int result;\n    svst1(pg, &result, min_val);\n    return result;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```\nint vector_even_min_simd(const int *src, size_t length){\n    if (length == 0) {\n        return -1;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t min_val = svdup_n_s32(INT_MAX);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t vec = svld1(pg, &src[i]);\n        svbool_t even_mask = svptrue_b32();\n        svint32_t even_vec = svindex_s32(0, 2);\n        svint32_t even_elements = svtrn2_s32(svunpklo(vec), svunpkhi(vec));\n        svint32_t even_values = svsel(even_mask, even_elements, even_vec);\n        min_val = svmin_s32(min_val, even_values);\n    }\n\n    int result = svminv_s32(pg, min_val);\n    return result;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```\nint vector_even_min_simd(const int *src, size_t length){\n    if (length == 0) {\n        return -1;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t min_val = svdup_n_s32(INT_MAX);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t vec = svld1(pg, &src[i]);\n        svbool_t even_mask = svptrue_b32();\n        svint32_t even_vec = svindex_s32(0, 2);\n        svint32_t even_elements = svtrn2_s32(svunpklo(vec), svunpkhi(vec));\n        svint32_t even_values = svsel(even_mask, even_elements, even_vec);\n        min_val = svmin_s32(min_val, even_values);\n    }\n\n    int result;\n    svst1(pg, &result, min_val);\n    return result;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```\nint vector_even_min_simd(const int *src, size_t length){\n    if (length == 0) {\n        return -1;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t min_val = svdup_n_s32(INT_MAX);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t vec = svld1(pg, &src[i]);\n        svbool_t even_mask = svptrue_b32();\n        svint32_t even_vec = svindex_s32(0, 2);\n        svint32_t even_elements = svtrn1_s32(vec, vec);\n        svint32_t even_values = svsel(even_mask, even_elements, even_vec);\n        min_val = svmin_s32(min_val, even_values);\n    }\n\n    int result;\n    svst1(pg, &result, min_val);\n    return result;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```\nint vector_even_min_simd(const int *src, size_t length){\n    if (length == 0) {\n        return -1;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t min_val = svdup_n_s32(INT_MAX);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t vec = svld1(pg, &src[i]);\n        svbool_t even_mask = svptrue_b32();\n        svint32_t even_vec = svindex_s32(0, 2);\n        svint32_t even_elements = svtrn2_s32(svunpklo(vec), svunpkhi(vec));\n        svint32_t even_values = svsel(even_mask, even_elements, even_vec);\n        min_val = svmin_s32(min_val, even_values);\n    }\n\n    int result;\n    svst1(pg, &result, min_val);\n    return result;\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svint32_t src_vec = svld1_s32(pg, src + i); // Load vector of int32 values\n        svuint32_t src_uint_vec = svreinterpret_u32_s32(src_vec); // Convert int to uint\n        svint32_t arith_shifted = svasr_n_s32(src_vec, shift); // Arithmetic right shift\n        svuint32_t log_shifted = svlsr_n_u32(src_uint_vec, shift); // Logical right shift\n        svint32_t result = svqadd_s32(arith_shifted, svreinterpret_s32_u32(log_shifted)); // Add results\n        svst1_s32(pg, dst + i, result); // Store the result\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, length); // Predicate for the loop\n\n    for (size_t i = 0; i < length; i += vl) {\n        svint32_t src_vec = svld1_s32(pg, &src[i]); // Load vector of int32 values\n        svuint32_t src_uint_vec = svreinterpret_u32_s32(src_vec); // Convert int to uint\n        svint32_t arith_shifted = svasr_n_s32(src_vec, shift); // Arithmetic right shift\n        svuint32_t log_shifted = svlsr_n_u32(src_uint_vec, shift); // Logical right shift\n        svint32_t result = svqadd_s32(arith_shifted, svreinterpret_s32_u32(log_shifted)); // Add results\n        svst1_s32(pg, &dst[i], result); // Store the result\n        pg = svwhilelt_b32(i + vl, length); // Update predicate\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, length); // Predicate for the main loop\n\n    for (size_t i = 0; i < length; i += vl) {\n        svint32_t src_vec = svld1_s32(pg, &src[i]); // Load vector of int32 values\n        svuint32_t src_uint_vec = svreinterpret_u32_s32(src_vec); // Convert int to uint\n        svint32_t arith_shifted = svasr_n_s32_z(pg, src_vec, shift); // Arithmetic right shift\n        svuint32_t log_shifted = svlsr_n_u32_z(pg, src_uint_vec, shift); // Logical right shift\n        svint32_t result = svqadd_s32_z(pg, arith_shifted, svreinterpret_s32_u32(log_shifted)); // Add the results\n        svst1_s32(pg, &dst[i], result); // Store the result\n        pg = svwhilelt_b32(i + vl, length); // Update predicate for the next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svint32_t src_vec = svld1_s32(pg, src + i); // Load vector of int32 values from src\n        svuint32_t src_uint_vec = svreinterpret_u32_s32(src_vec); // Convert int32 vector to uint32 vector\n        svint32_t arith_shifted = svasr_n_s32(src_vec, shift); // Arithmetic right shift\n        svuint32_t log_shifted = svlsr_n_u32(src_uint_vec, shift); // Logical right shift\n        svint32_t result = svqadd_s32(arith_shifted, svreinterpret_s32_u32(log_shifted)); // Add results\n        svst1_s32(pg, dst + i, result); // Store the result in dst\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svint32_t src_vec = svld1_s32(pg, src + i); // Load vector of int32 values\n        svuint32_t src_uint_vec = svreinterpret_u32_s32(src_vec); // Convert int to uint\n        svint32_t arith_shifted = svasr_n_s32(src_vec, shift); // Arithmetic right shift\n        svuint32_t log_shifted = svlsr_n_u32(src_uint_vec, shift); // Logical right shift\n        svint32_t result = svqadd_s32(arith_shifted, svreinterpret_s32_u32(log_shifted)); // Add results\n        svst1_s32(pg, dst + i, result); // Store the result\n    }\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    svint32_t sum = svdup_s32(0);\n    \n    for (size_t i = 0; i < rows * cols; i += svcntw()) {\n        svint32_t data = svld1(pg, &matrix[i]);\n        sum = svadd_s32_z(pg, sum, data);\n    }\n    \n    int32_t temp[SV_CNT_NUM(int32_t)] = {0};\n    svst1(pg, temp, sum);\n    \n    int64_t total_sum = 0;\n    for (int i = 0; i < svcntw(); i++) {\n        total_sum += temp[i];\n    }\n    \n    return total_sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    svint64_t sum = svdup_s64(0);\n\n    for (size_t i = 0; i < rows * cols; i += svcntw()) {\n        svint32_t data = svld1_s32(pg, &matrix[i]);\n        sum = svaddv_s64_z(pg, sum, svreinterpret_s64_s32(data));\n    }\n\n    return svaddv_s64(pg, sum);\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    int64_t sum = 0;\n\n    for (size_t i = 0; i < rows * cols; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &matrix[i]);\n        sum += svaddv_s32(pg, vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    int64_t sum = 0;\n\n    for (size_t i = 0; i < rows * cols; i += svcntw()) {\n        svint32_t vec = svld1(pg, &matrix[i]);\n        sum += svaddv_s64(pg, svreinterpret_s64_s32(vec));\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    svint64_t sum = svdup_s64(0);\n\n    for (size_t i = 0; i < rows * cols; i += svcntw()) {\n        svint32_t input = svld1_s32(pg, &matrix[i]);\n        sum = svaddv_s64_z(pg, sum, svmovlb_s64(svaddv_s32_z(pg, svcreate_s32(svptrue_b32()), input)));\n    }\n\n    return svaddv_s64(svptrue_b64(), sum);\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t max_val = svld1_s8(pg, src);\n\n    size_t index = 0;\n    int8_t max_value = svmaxv_s8(pg, max_val);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg_temp = svwhilelt_b8_s64(i, length);\n        svint8_t current_val = svld1_gather_s8(pg_temp, src + i, svindex_s8(0));\n\n        svbool_t pg_mask = svcmpeq_s8(pg_temp, current_val, max_value);\n        index = svsel(pg_mask, i, index);\n        max_value = svsel(pg_mask, current_val, max_value);\n    }\n\n    return index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n\n    int8_t max_val = src[0];\n    size_t max_idx = 0;\n\n    for (size_t i = svcntb(); i <= length; i += svcntb()) {\n        svbool_t pg_next = svwhilelt_b8_s64(i, length);\n\n        svint8_t vec_src = svld1(pg, &src[i]);\n        svint8_t mask = svcmpgt_n_s8(vec_src, max_val);\n        max_val = svmaxv_n_s8(pg_next, vec_src, max_val);\n        max_idx = svsel(max_idx, i + svcntb() - 1 - svclt_s8(pg_next, max_val, vec_src), mask);\n    }\n\n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t max_val = svld1(pg, src);\n\n    size_t max_index = 0;\n    int8_t max_value = svmaxv_s8(pg, max_val);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        pg = svwhilelt_b8_s64(i, length);\n        max_val = svld1(pg, &src[i]);\n\n        svbool_t pred = svcmpeq_n_s8(pg, max_val, max_value);\n        size_t index = svindex_s8(pred, 0);\n        max_index = (index != svcntb()) ? i + index : max_index;\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t max_val = svld1_s8(pg, src);\n\n    size_t max_index = 0;\n    int8_t max_value = svget1_s8(max_val, 0);\n\n    for (size_t i = 1; i < length; i += svcntb()) {\n        pg = svwhilelt_b8_s64(i, length);\n        svint8_t current_val = svld1_s8(pg, &src[i]);\n        svbool_t cmp = svcmpgt_s8(svsel_s8(pg, current_val, max_val), max_val);\n        max_val = svsel_s8(cmp, current_val, max_val);\n        max_index += svcntb() - svcntb(svclt_s8_z(pg, max_val, max_value));\n        max_value = svmax_s8_z(pg, max_val, max_value);\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    svbool_t pg = svwhilelt_b8((uint64_t)0, length);\n    svint8_t max_val = svld1_s8(pg, src);\n\n    size_t max_idx = 0;\n    int8_t max_value = svmaxv_s8(pg, max_val);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg_temp = svwhilelt_b8((uint64_t)i, length);\n        svint8_t current_val = svld1_s8(pg_temp, &src[i]);\n        svbool_t pg_mask = svcmpgt_s8(pg_temp, current_val, max_value);\n        max_idx = svsel(pg_mask, i, max_idx);\n        max_value = svsel(pg_mask, current_val, max_value);\n    }\n\n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    uint16_t* src1_ptr = (uint16_t*)src1;\n    uint16_t* src2_ptr = (uint16_t*)src2;\n    uint16_t* dst_ptr = (uint16_t*)dst;\n\n    for (; svptest_any(svptrue_b16(), pg); svprch_pg(pg)) {\n        svuint16_t index = svindex_u16(0, 1);\n        svuint16_t mask_vec = svdup_n_u16(mask);\n        svuint16_t and_result = svand_n_u16(index, mask);\n        svbool_t pred = svptest_first(svptrue_b16(), svcmpeq_n_u16(and_result, 0));\n\n        svuint16_t src1_val = svld1_u16(pg, src1_ptr);\n        svuint16_t src2_val = svld1_u16(pg, src2_ptr);\n\n        svuint16_t result = svsel_u16(pred, src2_val, src1_val);\n\n        svst1_u16(pg, dst_ptr, result);\n\n        src1_ptr += svcntw();\n        src2_ptr += svcntw();\n        dst_ptr += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t loops = length / svcntw();\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < loops; i++) {\n        svuint16_t vec_src1 = svld1_u16(pg, &src1[i * svcntw()]);\n        svuint16_t vec_src2 = svld1_u16(pg, &src2[i * svcntw()]);\n        svuint16_t vec_dst = svsel_u16(svand_u16_z(pg, svindex_u16(), mask), vec_src1, vec_src2);\n        svst1_u16(pg, &dst[i * svcntw()], vec_dst);\n    }\n\n    size_t remaining = length % svcntw();\n    if (remaining > 0) {\n        svbool_t pg_remain = svwhilelt_b16(0, remaining);\n        svuint16_t vec_src1 = svld1_u16(pg_remain, &src1[loops * svcntw()]);\n        svuint16_t vec_src2 = svld1_u16(pg_remain, &src2[loops * svcntw()]);\n        svuint16_t vec_dst = svsel_u16(svand_u16_z(pg_remain, svindex_u16(), mask), vec_src1, vec_src2);\n        svst1_u16(pg_remain, &dst[loops * svcntw()], vec_dst);\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    svbool_t pg;\n    svuint16_t mask_vec = svdup_n_u16(mask);\n    \n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b16(i, length);\n        \n        svuint16_t index = svindex_u16(i, 1);\n        svuint16_t condition = svand_n_u16(index, mask);\n        \n        svuint16_t src1_vec = svld1(pg, &src1[i]);\n        svuint16_t src2_vec = svld1(pg, &src2[i]);\n        \n        svuint16_t result = svsel_u16(condition, src1_vec, src2_vec);\n        \n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b16(0, length); // Predicate for the loop\n\n    for (size_t i = 0; i < length; i += vl) {\n        svuint16_t index = svindex_u16(i, 1); // Generate indices\n        svuint16_t mask_vec = svdup_n_u16(mask); // Broadcast mask to a vector\n\n        svbool_t p = svtest_first_bit(svand_n_u16(index, mask_vec)); // Check the condition\n\n        svuint16_t src1_vec = svld1_u16(pg, &src1[i]); // Load from src1\n        svuint16_t src2_vec = svld1_u16(pg, &src2[i]); // Load from src2\n\n        svuint16_t result = svsel_u16(p, src1_vec, src2_vec); // Select values based on the condition\n\n        svst1_u16(pg, &dst[i], result); // Store the result\n        pg = svwhilelt_b16(i + vl, length); // Update predicate for the next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    svbool_t pg = svptrue_b16();\n    uint16_t* dst_end = dst + length;\n\n    for (; dst < dst_end; dst += svcntw()) {\n        svuint16_t index = svindex_u16(0, 1);\n        svuint16_t mask_vec = svdup_n_u16(mask);\n        svuint16_t condition = svand_n_u16(index, mask);\n        svbool_t p_active = svwhilelt_b16(index, length);\n\n        svuint16_t src1_vec = svld1(pg, src1 + svcntw() * svindex_u16(0, 1));\n        svuint16_t src2_vec = svld1(pg, src2 + svcntw() * svindex_u16(0, 1));\n\n        svuint16_t result = svsel(condition, src1_vec, src2_vec);\n\n        svst1(pg, dst, result);\n        src1 += svcntw();\n        src2 += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i;\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svuint32_t data = svld1(pg, &src[i]); // Load data from source array\n        svuint32_t result = svcntp_b32(data); // Count the number of bits set in each element\n        svst1(pg, &dst[i], result); // Store the result in the destination array\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i;\n    for (i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t data = svld1(pg, &src[i]);\n        svuint32_t result = vcnt(data);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i;\n    for (i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t data = svld1(pg, &src[i]);\n        svuint32_t result = vcnt(data);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, length);\n    \n    for (; i < length; i += svcntw()) {\n        svuint32_t data = svld1(pg, &src[i]);\n        svuint32_t result = vcnt(data);\n        svst1(pg, &dst[i], result);\n        pg = svwhilelt_b32(i + svcntw(), length);\n    }\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n    \n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t input = svld1(pg, &src[i]);\n        svuint32_t result = vcnt(input);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t loops = length / svcntw();\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < loops; i++) {\n        svuint16_t vec1 = svld1_u16(pg, &src1[i * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg, &src2[i * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg, vec1, vec2);\n        svst1_u16(pg, &dst[i * svcntw()], result);\n    }\n\n    size_t remaining = length % svcntw();\n    if (remaining > 0) {\n        svbool_t pg_remain = svwhilelt_b16(0, remaining);\n        svuint16_t vec1 = svld1_u16(pg_remain, &src1[loops * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg_remain, &src2[loops * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg_remain, vec1, vec2);\n        svst1_u16(pg_remain, &dst[loops * svcntw()], result);\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t loops = length / svcntw();\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < loops; i++) {\n        svuint16_t vec1 = svld1_u16(pg, &src1[i * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg, &src2[i * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg, vec1, vec2);\n        svst1_u16(pg, &dst[i * svcntw()], result);\n    }\n\n    size_t remaining = length % svcntw();\n    if (remaining > 0) {\n        svbool_t pg_rem = svwhilelt_b16(0, remaining);\n        svuint16_t vec1 = svld1_u16(pg_rem, &src1[loops * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg_rem, &src2[loops * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg_rem, vec1, vec2);\n        svst1_u16(pg_rem, &dst[loops * svcntw()], result);\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t loops = length / svcntw();\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < loops; i++) {\n        svuint16_t vec1 = svld1_u16(pg, &src1[i * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg, &src2[i * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg, vec1, vec2);\n        svst1_u16(pg, &dst[i * svcntw()], result);\n    }\n\n    size_t remaining = length % svcntw();\n    if (remaining > 0) {\n        svbool_t pg_remainder = svwhilelt_b16(0, remaining);\n        svuint16_t vec1 = svld1_u16(pg_remainder, &src1[loops * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg_remainder, &src2[loops * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg_remainder, vec1, vec2);\n        svst1_u16(pg_remainder, &dst[loops * svcntw()], result);\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t i;\n    for (i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t vec1 = svld1_u16(pg, &src1[i]);\n        svuint16_t vec2 = svld1_u16(pg, &src2[i]);\n        svuint16_t result = svqadd_u16_z(pg, vec1, vec2);\n        svst1_u16(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t loops = length / svcntw();\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < loops; i++) {\n        svuint16_t vec1 = svld1_u16(pg, &src1[i * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg, &src2[i * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg, vec1, vec2);\n        svst1_u16(pg, &dst[i * svcntw()], result);\n    }\n\n    size_t remaining = length % svcntw();\n    if (remaining > 0) {\n        svbool_t pg_remainder = svwhilelt_b16(0, remaining);\n        svuint16_t vec1 = svld1_u16(pg_remainder, &src1[loops * svcntw()]);\n        svuint16_t vec2 = svld1_u16(pg_remainder, &src2[loops * svcntw()]);\n        svuint16_t result = svqadd_u16_z(pg_remainder, vec1, vec2);\n        svst1_u16(pg_remainder, &dst[loops * svcntw()], result);\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svbool_t pg = svwhilelt_b64(k, n);\n                svfloat64_t a_vec = svld1(pg, &A[i * n + k]);\n                svfloat64_t b_vec = svld1(pg, &B[k * p + j]);\n                svfloat64_t mask_a = svcmpge_n_f64(a_vec, -100.0);\n                svfloat64_t mask_b = svcmpge_n_f64(b_vec, -100.0);\n                svfloat64_t mask = svand_z(pg, mask_a, mask_b);\n                svfloat64_t mul = svmul_z(pg, a_vec, b_vec);\n                svfloat64_t filtered_mul = svsel(mask, mul, svdup_n_f64(0.0));\n                acc = svadd_z(pg, acc, filtered_mul);\n            }\n            C[i * p + j] = svaddv_n_f64(svptrue_b64(), acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svbool_t pg = svwhilelt_b64(0, n);\n            svfloat64_t acc = svdup_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svfloat64_t a = svld1(pg, &A[i * n + k]);\n                svfloat64_t b = svld1(pg, &B[k * p + j]);\n                svbool_t mask = svcmpge_f64(a, svdup_n_f64(-100.0)) && svcmple_f64(a, svdup_n_f64(100.0)) &&\n                                svcmpge_f64(b, svdup_n_f64(-100.0)) && svcmple_f64(b, svdup_n_f64(100.0));\n                svfloat64_t prod = svmul_f64_z(pg, a, b, mask);\n                acc = svadd_f64(acc, prod);\n            }\n            C[i * p + j] = svaddv_n_f64(pg, acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svfloat64_t a_vec = svld1_f64(svptrue_b64(), &A[i * n + k]);\n                svfloat64_t b_vec = svld1_f64(svptrue_b64(), &B[k * p + j]);\n                svbool_t mask = svcmpge_f64_mask(a_vec, svdup_n_f64(-100.0)) & svcmple_f64_mask(a_vec, svdup_n_f64(100.0)) &\n                                svcmpge_f64_mask(b_vec, svdup_n_f64(-100.0)) & svcmple_f64_mask(b_vec, svdup_n_f64(100.0));\n                svfloat64_t mul = svmul_f64_x(svptrue_b64(), a_vec, b_vec);\n                acc = svmla_f64_x(mask, acc, a_vec, b_vec);\n            }\n            C[i * p + j] = svaddv_n_f64(svptrue_b64(), acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svbool_t pg = svwhilelt_b64(0, n);\n            svfloat64_t acc = svdup_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svfloat64_t a = svld1(pg, &A[i * n + k]);\n                svfloat64_t b = svld1(pg, &B[k * p + j]);\n                svbool_t mask = svcmpge_f64(a, svdup_n_f64(-100.0)) && svcmple_f64(a, svdup_n_f64(100.0)) &&\n                                svcmpge_f64(b, svdup_n_f64(-100.0)) && svcmple_f64(b, svdup_n_f64(100.0));\n                svfloat64_t prod = svmul_f64_x(pg, a, b);\n                acc = svadd_x(pg, acc, svsel(mask, prod, svdup_f64(0.0)));\n            }\n            C[i * p + j] = svaddv_n_f64(svptrue_b64(), acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            svbool_t pg = svwhilelt_b64(0, n);\n            svfloat64_t acc = svdup_f64(0.0);\n\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svfloat64_t a = svld1(pg, &A[i * n + k]);\n                svfloat64_t b = svld1(pg, &B[k * p + j]);\n                svbool_t mask = svcmpge_f64_z(pg, a, svdup_f64(-100.0)) && svcmple_f64_z(pg, a, svdup_f64(100.0)) &&\n                                svcmpge_f64_z(pg, b, svdup_f64(-100.0)) && svcmple_f64_z(pg, b, svdup_f64(100.0));\n                svfloat64_t prod = svmul_f64_x(pg, a, b);\n                acc = svmla_f64_x(pg, acc, mask, prod);\n            }\n\n            double result = svaddv_n_f64(svptrue_b64(), acc);\n            C[i * p + j] = result;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntd();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b64(i, total_size);\n        \n        svint64_t vecA = svld1(pg, &A[i]);\n        svint64_t vecB = svld1(pg, &B[i]);\n        svint64_t vecC = svadd_s64_z(pg, vecA, vecB);\n        \n        svst1(pg, &C[i], vecC);\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntd();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b64(i, total_size);\n        \n        svint64_t a = svld1(pg, &A[i]);\n        svint64_t b = svld1(pg, &B[i]);\n        svint64_t result = svadd_s64_z(pg, a, b);\n        \n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntd();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b64(i, total_size);\n        \n        svint64_t a = svld1(pg, &A[i]);\n        svint64_t b = svld1(pg, &B[i]);\n        svint64_t c = svadd_s64_z(pg, a, b);\n        \n        svst1(pg, &C[i], c);\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntd();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b64(i, total_size);\n        \n        svint64_t a = svld1(pg, &A[i]);\n        svint64_t b = svld1(pg, &B[i]);\n        svint64_t c = svadd_s64_z(pg, a, b);\n        \n        svst1(pg, &C[i], c);\n    }\n}\n```  "}
{"task_id": "SimdBench_19_SVE", "completion": "```\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntd();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b64(i, total_size);\n        \n        svint64_t a = svld1(pg, &A[i]);\n        svint64_t b = svld1(pg, &B[i]);\n        svint64_t c = svadd_s64_z(pg, a, b);\n        \n        svst1(pg, &C[i], c);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n        svfloat32_t result = svadd_f32_z(pg, vec1, vec2);\n        svint32_t rounded_result = svrinta_f32_z(pg, result);\n        svst1(pg, &dst[i], rounded_result);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = length;\n\n    while (remaining >= vl) {\n        svbool_t pg = svwhilelt_b32(0, vl);\n\n        svfloat32_t vec1 = svld1(pg, src1);\n        svfloat32_t vec2 = svld1(pg, src2);\n\n        svfloat32_t result = svadd_f32_z(pg, vec1, vec2);\n        result = svrinta_f32_z(pg, result, SV_ROUND_NEAREST);\n\n        svst1(pg, dst, result);\n\n        src1 += vl;\n        src2 += vl;\n        dst += vl;\n        remaining -= vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b32(0, remaining);\n\n        svfloat32_t vec1 = svld1(pg, src1);\n        svfloat32_t vec2 = svld1(pg, src2);\n\n        svfloat32_t result = svadd_f32_z(pg, vec1, vec2);\n        result = svrinta_f32_z(pg, result, SV_ROUND_NEAREST);\n\n        svst1(pg, dst, result);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n\n        svfloat32_t result = svadd_f32_z(pg, vec1, vec2);\n        svint32_t rounded_result = svrinta_f32_z(pg, result);\n\n        svst1(pg, &dst[i], rounded_result);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n\n        svfloat32_t result = svadd_f32_z(pg, vec1, vec2);\n        svint32_t rounded_result = svrinta_f32_z(pg, result);\n\n        svst1(pg, &dst[i], rounded_result);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = length;\n\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n\n        svfloat32_t result = svadd_f32_z(pg, vec1, vec2);\n        svint32_t rounded_result = svrinta_f32_z(pg, result);\n\n        svst1(pg, &dst[i], rounded_result);\n\n        remaining -= vl;\n        if (remaining < vl) {\n            vl = remaining;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length){\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n        svbool_t pg_mask = svwhilelt_b32(i, length);\n        svfloat32_t diff = svabs_f32_z(pg_mask, svsub_f32_z(pg_mask, vec1, vec2));\n        svbool_t cond1 = svcmpge_f32_z(pg_mask, diff, svdup_n_f32(50.0f));\n        svbool_t cond2 = svcmpeq_n_s32_z(pg_mask, svmul_n_s32_z(pg_mask, svindex_s32(0, 1), 2), 0);\n        svbool_t cond = svand_z(pg_mask, cond1, cond2);\n        svfloat32_t result = svsel_f32(cond, svrintp_f32_z(pg_mask, svmul_f32_z(pg_mask, vec1, vec2)), svdup_n_f32(-1.0f));\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length){\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n        svfloat32_t result = svmul_n_f32_z(pg, vec1, vec2, -1.0f);\n        svbool_t mask = svand_z(pg, svcmpeq_n_f32(vec1, vec2, 0.0f), svwhilelt_b32(i, 50));\n        result = svrinta_z(pg, result, 0, SV_ROUND_UP);\n        result = svsel(mask, result, svdup_n_f32(-1.0f));\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length){\n    size_t loops = length / svcntw();\n    svbool_t pg = svptrue_b32();\n    \n    for (size_t i = 0; i < loops; i++) {\n        svfloat32_t vec1 = svld1(pg, &src1[i * svcntw()]);\n        svfloat32_t vec2 = svld1(pg, &src2[i * svcntw()]);\n        \n        svbool_t mask = svwhilelt_b32(0, svcntw());\n        svfloat32_t result = svmul_n_f32_z(pg, vec1, vec2, -1);\n        result = svrinta_f32_z(pg, result, SV_ROUND_UP);\n        \n        svst1(pg, &dst[i * svcntw()], result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length){\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n        svbool_t pg_mask = svwhilelt_b32(i, length);\n\n        svfloat32_t diff = svabs_f32(svsub_f32_z(pg_mask, vec1, vec2));\n        svbool_t cond1 = svcmpge_f32(diff, svdup_n_f32(50.0));\n        svbool_t cond2 = svcmpeq_n_s32_z(pg_mask, i % 2, 0);\n\n        svfloat32_t result = svsel_f32(cond1, svdup_n_f32(-1.0), svmul_f32_z(pg_mask, vec1, vec2));\n        result = svrintp_f32_z(pg_mask, result);\n\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length){\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svfloat32_t vec1 = svld1(pg, &src1[i]);\n        svfloat32_t vec2 = svld1(pg, &src2[i]);\n        svbool_t mask = svand(svcmpge_n_f32(pg, vec1, 0), svcmpge_n_f32(pg, vec2, 0));\n        svfloat32_t result = svmul_n_f32_x(pg, mask, vec1, vec2);\n        svfloat32_t rounded_result = svrinta_f32_x(pg, result, SV_ROUND_UP);\n        svfloat32_t final_result = svsel(mask, rounded_result, svdup_n_f32(-1));\n        svst1(pg, &dst[i], final_result);\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t i;\n    size_t total_elems = m * n;\n    svbool_t pg = svwhilelt_b64(total_elems, svcntd());\n    \n    for (i = 0; i < total_elems; i += svcntd()) {\n        svfloat64_t vec_mat = svld1(pg, &mat[i]);\n        svfloat64_t vec_result = svmul_n_f64_z(pg, vec_mat, scalar);\n        svst1(pg, &dst[i], vec_result);\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t i;\n    for (i = 0; i < m*n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, m*n);\n        svfloat64_t vec_mat = svld1(pg, &mat[i]);\n        svfloat64_t vec_scalar = svdup_n_f64(scalar);\n        svfloat64_t vec_result = svmul_n_f64_z(pg, vec_mat, scalar);\n        svst1(pg, &dst[i], vec_result);\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t i;\n    for (i = 0; i < m*n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, m*n);\n        svfloat64_t vec_mat = svld1(pg, &mat[i]);\n        svfloat64_t vec_scalar = svdup_n_f64(scalar);\n        svfloat64_t vec_result = svmul_f64_x(pg, vec_mat, vec_scalar);\n        svst1(pg, &dst[i], vec_result);\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t i;\n    size_t j;\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t sv_scalar = svdup_n_f64(scalar);\n\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j += svcntd()) {\n            svfloat64_t sv_mat = svld1(pg, &mat[i * n + j]);\n            svfloat64_t sv_result = svmul_n_f64_z(pg, sv_mat, sv_scalar, sv_scalar);\n            svst1(pg, &dst[i * n + j], sv_result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t i;\n    size_t j;\n    svbool_t pg = svwhilelt_b64(0, n);\n    \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j += svcntd()) {\n            svfloat64_t vec_mat = svld1(pg, &mat[i * n + j]);\n            svfloat64_t vec_scalar = svdup_n_f64(scalar);\n            svfloat64_t vec_result = svmul_n_f64_z(pg, vec_mat, vec_scalar, pg);\n            svst1(pg, &dst[i * n + j], vec_result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i++) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        svfloat32_t sum = svdup_n_f32(0.0f);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            sum = svadd_m(pg, sum, svmul_n_f32(vec, vec));\n        }\n        svfloat32_t norm = svsqrt_x(pg, svaddv_x(pg, sum));\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            svst1(pg, &mat[i * n + j], svdiv_n_f32(vec, norm));\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i++) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        svfloat32_t norm = svdup_f32(0.0f);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            norm = svadd_f32(norm, svmul_f32(vec, vec));\n        }\n        float norm_scalar = 0.0f;\n        for (int k = 0; k < svcntw(); k++) {\n            norm_scalar += svget_f32(norm, k);\n        }\n        norm_scalar = 1.0f / sqrtf(norm_scalar);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            vec = svmul_n_f32(vec, norm_scalar);\n            svst1(pg, &mat[i * n + j], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i++) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        svfloat32_t sum = svdup_f32(0.0f);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            sum = svadd_f32_z(pg, sum, svmul_f32_z(pg, vec, vec));\n        }\n        float norm;\n        svst1(pg, &norm, svsqrt_f32_z(pg, svaddv_f32(pg, sum)));\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            svst1(pg, &mat[i * n + j], svdiv_f32_z(pg, vec, svdup_f32(norm)));\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i++) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        svfloat32_t sum = svdup_f32(0.0f);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            sum = svadd_f32_z(pg, sum, svmul_f32_z(pg, vec, vec));\n        }\n        float norm = 0.0f;\n        for (int k = 0; k < svcntw(); k++) {\n            norm += svaddv(svptrue_b32(), sum);\n        }\n        norm = sqrtf(norm);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            vec = svdiv_f32_z(pg, vec, svdup_f32(norm));\n            svst1(pg, &mat[i * n + j], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i++) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        svfloat32_t norm = svdup_f32(0.0f);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            norm = svadd_f32(norm, svmul_f32(vec, vec));\n        }\n        svfloat32_t sum = svaddv_f32(pg, norm);\n        sum = svrsqrte_f32(sum);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t vec = svld1(pg, &mat[i * n + j]);\n            vec = svmul_f32(vec, sum);\n            svst1(pg, &mat[i * n + j], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svfloat64_t vec1 = svld1_f64(mat1 + i * n + k);\n                svfloat64_t vec2 = svld1_f64(mat2 + k * p + j);\n                acc = svmla_f64(acc, vec1, vec2);\n            }\n            double result = svaddv_n_f64(acc);\n            dst[i * p + j] = (double)round(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svfloat64_t vec1 = svld1_f64(mat1 + i * n + k);\n                svfloat64_t vec2 = svld1_f64(mat2 + k * p + j);\n                acc = svmla_f64(acc, vec1, vec2);\n            }\n            double result = svaddv_n_f64(acc);\n            dst[i * p + j] = (double)round(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svfloat64_t vec1 = svld1_f64(mat1 + i * n + k);\n                svfloat64_t vec2 = svld1_f64(mat2 + k * p + j);\n                acc = svmla_f64(acc, vec1, vec2);\n            }\n            double result = svaddv_n_f64(acc);\n            dst[i * p + j] = (double)(int)(result + 0.5);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svfloat64_t vec1 = svld1_f64(mat1 + i * n + k);\n                svfloat64_t vec2 = svld1_f64(mat2 + k * p + j);\n                acc = svmla_f64(acc, vec1, vec2);\n            }\n            double result = svaddv_n_f64(acc);\n            dst[i * p + j] = (double)round(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t i, j, k;\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < p; j++) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (k = 0; k < n; k += svcntd()) {\n                svfloat64_t vec1 = svld1_f64(mat1 + i * n + k);\n                svfloat64_t vec2 = svld1_f64(mat2 + k * p + j);\n                acc = svmla_n_f64(acc, vec1, svtrn1_f64(vec2, vec2));\n            }\n            double result = svaddv_n_f64(acc);\n            dst[i * p + j] = (double)round(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    svbool_t pg = svptrue_b32();\n    for (i = 0; i < rows; i += svcntw()) {\n        for (j = 0; j < cols; j += svcntw()) {\n            svfloat32_t in = svld1(pg, &src[i * cols + j]);\n            svfloat32_t out = svrinta_f32_z(pg, in, 2);\n            svst1(pg, &dst[j * rows + i], out);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    for (i = 0; i < rows; i += svcntw()) {\n        for (j = 0; j < cols; j += svcntw()) {\n            svfloat32_t in = svld1_f32(svptrue_b32(), &src[i * cols + j]);\n            svfloat32_t out = svrinta_f32_z(svptrue_b32(), svdiv_f32_z(svptrue_b32(), in, svdup_n_f32(0.25)));\n            svst1_f32(svptrue_b32(), &dst[j * rows + i], out);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    svbool_t pg = svptrue_b32();\n    for (i = 0; i < rows; i += svcntw()) {\n        for (j = 0; j < cols; j += svcntw()) {\n            svfloat32_t in = svld1(pg, &src[i * cols + j]);\n            svfloat32_t transposed = svtrn1_f32(in, in);\n            svfloat32_t rounded = svrinta_f32_z(pg, transposed, 0);\n            svst1(pg, &dst[j * rows + i], rounded);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    for (i = 0; i < rows; i += svcntw()) {\n        for (j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(i, rows);\n            svfloat32_t in = svld1(pg, &src[i * cols + j]);\n            svfloat32_t out = svrinta_f32_z(pg, in, 2);\n            svst1(pg, &dst[j * rows + i], out);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    for (i = 0; i < rows; i += svcntw()) {\n        for (j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(i, rows);\n            svfloat32_t in = svld1(pg, &src[i * cols + j]);\n            svfloat32_t out = svtrn1_f32(in, in);\n            out = svrinta_f32(out, 1);\n            svst1(pg, &dst[j * rows + i], out);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svfloat32_t vec1 = svld1(pg, &tensor1[i]);\n        svfloat32_t vec2 = svld1(pg, &tensor2[i]);\n        \n        svfloat32_t result = svsub_f32_z(pg, vec1, vec2);\n        svint32_t result_int = svrintz_f32(result);\n        \n        svst1(pg, &dst[i], result_int);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svfloat32_t vec1 = svld1(pg, &tensor1[i]);\n        svfloat32_t vec2 = svld1(pg, &tensor2[i]);\n        \n        svfloat32_t result = svsub_f32_z(pg, vec1, vec2);\n        svint32_t result_int = svrintz_f32(result);\n        \n        svst1(pg, &dst[i], result_int);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svfloat32_t vec1 = svld1(pg, &tensor1[i]);\n        svfloat32_t vec2 = svld1(pg, &tensor2[i]);\n        \n        svfloat32_t result = svsub_f32_z(pg, vec1, vec2);\n        svint32_t result_int = svrintz_f32(result);\n        \n        svst1(pg, &dst[i], result_int);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svfloat32_t vec1 = svld1(pg, &tensor1[i]);\n        svfloat32_t vec2 = svld1(pg, &tensor2[i]);\n        \n        svfloat32_t result = svsub_f32_z(pg, vec1, vec2);\n        svint32_t rounded_result = svrintz_f32_z(pg, result);\n        \n        svst1(pg, &dst[i], rounded_result);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svfloat32_t vec1 = svld1(pg, &tensor1[i]);\n        svfloat32_t vec2 = svld1(pg, &tensor2[i]);\n        \n        svfloat32_t result = svsub_f32_z(pg, vec1, vec2);\n        svint32_t result_int = svrintz_f32(result);\n        \n        svst1(pg, &dst[i], result_int);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    size_t size = m * n;\n    svbool_t pg = svwhilelt_b64(0, size);\n\n    for (i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec1 = svld1(pg, &mat1[i]);\n        svfloat64_t vec2 = svld1(pg, &mat2[i]);\n        svfloat64_t result = svmul_z(pg, vec1, vec2);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    size_t size = m * n;\n    svbool_t pg = svptrue_b64();\n\n    for (i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec1 = svld1(pg, &mat1[i]);\n        svfloat64_t vec2 = svld1(pg, &mat2[i]);\n        svfloat64_t result = svmul_f64_x(pg, vec1, vec2);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    size_t size = m * n;\n    svbool_t pg = svptrue_b64();\n\n    for (i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec1 = svld1(pg, &mat1[i]);\n        svfloat64_t vec2 = svld1(pg, &mat2[i]);\n        svfloat64_t result = svmul_z(pg, vec1, vec2);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    size_t elems = m * n;\n    size_t vl = svcntd();\n    \n    for (i = 0; i < elems; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, elems);\n        svfloat64_t vec1 = svld1(pg, &mat1[i]);\n        svfloat64_t vec2 = svld1(pg, &mat2[i]);\n        svfloat64_t result = svmul_z(pg, vec1, vec2);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    size_t size = m * n;\n    svbool_t pg = svptrue_b64();\n\n    for (i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec1 = svld1(pg, &mat1[i]);\n        svfloat64_t vec2 = svld1(pg, &mat2[i]);\n        svfloat64_t result = svmul_f64_x(pg, vec1, vec2);\n        svst1(pg, &dst[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i += svcntw()) {\n        svfloat32_t acc = svdup_n_f32(0.0f);\n        for (j = 0; j < n; j++) {\n            svfloat32_t mat_val = svld1_f32(mat + i * n + j);\n            svfloat32_t vec_val = svdup_n_f32(vec[j]);\n            acc = svmla_n_f32(acc, mat_val, svdup_n_f32(vec[j]));\n        }\n        svst1_f32(svptrue_b32(), dst + i, acc);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t acc = svdup_n_f32(0.0f);\n            size_t k_end = svcntw() < n - j ? svcntw() : n - j;\n            for (size_t k = 0; k < k_end; k++) {\n                svfloat32_t mat_val = svld1(pg, &mat[i * n + j + k]);\n                svfloat32_t vec_val = svdup_n_f32(vec[j + k]);\n                acc = svmla_n_f32(acc, mat_val, svget1(vec_val, 0));\n            }\n            svst1(pg, &dst[i], acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t acc = svdup_f32(0.0f);\n            size_t k_end = svcntw() < n - j ? svcntw() : n - j;\n            for (size_t k = 0; k < k_end; k++) {\n                svfloat32_t mat_val = svld1(pg, &mat[i * n + j + k]);\n                svfloat32_t vec_val = svdup_f32(vec[j + k]);\n                acc = svmla_n_f32(acc, mat_val, svget1(vec_val, 0));\n            }\n            svst1(pg, &dst[i], acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t acc = svdup_n_f32(0.0f);\n            size_t k_end = svcntw() < n - j ? svcntw() : n - j;\n            for (size_t k = 0; k < k_end; k++) {\n                svfloat32_t mat_val = svld1(pg, &mat[i * n + j + k]);\n                svfloat32_t vec_val = svdup_n_f32(vec[j + k]);\n                acc = svmla_n_f32(acc, mat_val, svget1(vec_val, 0));\n            }\n            svst1(pg, &dst[i], acc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; i += svcntw()) {\n        svfloat32_t result = svdup_n_f32(0.0f);\n        for (j = 0; j < n; j++) {\n            svfloat32_t matrix_values = svld1_f32(mat + i * n + j);\n            svfloat32_t vector_value = svdup_n_f32(vec[j]);\n            result = svmla_n_f32(result, matrix_values, svget1(vector_value, 0));\n        }\n        svst1_f32(svptrue_b32(), dst + i, result);\n    }\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t remaining_elements = total_elements % svcntd();\n    svbool_t pg = svwhilelt_b64(total_elements - remaining_elements, svcntd());\n\n    svfloat64_t sum = svdup_f64(0.0);\n    for (size_t i = 0; i < total_elements - remaining_elements; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &mat[i]);\n        sum = svadd_f64_m(pg, sum, vec);\n    }\n\n    double result = svaddv_n_f64(pg, sum);\n\n    // Calculate the average of remaining elements\n    if (remaining_elements > 0) {\n        double remaining_sum = 0.0;\n        for (size_t i = total_elements - remaining_elements; i < total_elements; i++) {\n            remaining_sum += mat[i];\n        }\n        result += remaining_sum;\n        result /= total_elements;\n    } else {\n        result /= total_elements;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t remaining_elements = total_elements % svcntd();\n    svbool_t pg = svwhilelt_b64(total_elements - remaining_elements, svcntd());\n\n    svfloat64_t avg = svdup_f64(0.0);\n    svfloat64_t sum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < total_elements - remaining_elements; i += svcntd()) {\n        svfloat64_t data = svld1(pg, &mat[i]);\n        sum = svadd_f64_z(pg, sum, data);\n    }\n\n    double result = svaddv_f64(pg, sum) / total_elements;\n\n    if (remaining_elements > 0) {\n        svbool_t pg_remain = svwhilelt_b64(0, remaining_elements);\n        svfloat64_t data_remain = svld1(pg_remain, &mat[total_elements - remaining_elements]);\n        sum = svadd_f64_z(pg_remain, sum, data_remain);\n        result += svaddv_f64(pg_remain, sum) / total_elements;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    svbool_t pg = svwhilelt_b64(total_elements, svcntd());\n    svfloat64_t sum = svdup_f64(0.0);\n    \n    for (size_t i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &mat[i]);\n        sum = svadd_f64_z(pg, sum, vec);\n    }\n    \n    svfloat64_t avg = svdiv_f64_z(pg, sum, svdup_f64(total_elements));\n    \n    return svaddv_n_f64(pg, avg);\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t remaining_elements = total_elements % svcntd();\n    svbool_t pg = svwhilelt_b64(total_elements - remaining_elements, svcntd());\n\n    svfloat64_t sum = svdup_f64(0.0);\n    for (size_t i = 0; i < total_elements - remaining_elements; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &mat[i]);\n        sum = svadd_f64_m(pg, sum, vec);\n    }\n\n    double total_sum = svaddv_n_f64(pg, sum);\n\n    if (remaining_elements > 0) {\n        svbool_t pg_remainder = svwhilelt_b64(0, remaining_elements);\n        svfloat64_t vec_remainder = svld1(pg_remainder, &mat[total_elements - remaining_elements]);\n        total_sum += svaddv_n_f64(pg_remainder, vec_remainder);\n    }\n\n    return total_sum / total_elements;\n}\n```  "}
{"task_id": "SimdBench_29_SVE", "completion": "```\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elems = m * n;\n    size_t remaining_elems = total_elems % svcntd();\n    svbool_t pg = svwhilelt_b64(0, total_elems);\n\n    svfloat64_t avg = svdup_f64(0.0);\n    svfloat64_t sum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < total_elems - remaining_elems; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &mat[i]);\n        sum = svadd_f64_z(pg, sum, vec);\n    }\n\n    svbool_t pg_remain = svwhilelt_b64(0, remaining_elems);\n    svfloat64_t sum_remain = svdup_f64(0.0);\n\n    if (remaining_elems > 0) {\n        svfloat64_t vec_remain = svld1(pg_remain, &mat[total_elems - remaining_elems]);\n        sum_remain = svadd_f64_z(pg_remain, sum_remain, vec_remain);\n    }\n\n    sum = svadd_f64_z(pg, sum, sum_remain);\n    avg = svdiv_f64_z(pg, sum, svdup_f64(total_elems));\n\n    return svaddv_n_f64(pg, avg);\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg = svptrue_b32();\n        svint32_t current_row = svld1(pg, &matrix[i * cols]);\n        bool ascending = directions[i];\n\n        for (size_t j = 1; j < cols; ++j) {\n            svint32_t next_element = svld1(pg, &matrix[i * cols + j]);\n            svbool_t cmp_result;\n            if (ascending) {\n                cmp_result = svcgt(pg, next_element, current_row);\n            } else {\n                cmp_result = svclt(pg, next_element, current_row);\n            }\n            if (svptest_any(svptrue_b32(), cmp_result)) {\n                return false;\n            }\n            current_row = next_element;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        svbool_t pg = svwhilelt_b32(i, rows);\n        svbool_t dir = svptrue_b32();\n        if (!directions[i]) {\n            dir = svdup_n_b32(false);\n        }\n        for (size_t j = 0; j < cols - svcntw(); j += svcntw()) {\n            svint32_t data = svld1_s32(pg, &matrix[i * cols + j]);\n            svint32_t next_data = svld1_s32(pg, &matrix[i * cols + j + svcntw()]);\n            svbool_t cmp_result = svcmpgt_s32(data, next_data);\n            if (svptest_any(svptrue_b32(), cmp_result != dir)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        svbool_t pg = svwhilelt_b32(i, rows);\n        svbool_t dir = svdup_n_b32(directions[i] ? 0xFFFFFFFF : 0x00000000);\n        for (size_t j = 0; j < cols - 1; j += svcntw()) {\n            svbool_t pg_col = svwhilelt_b32(j, cols - 1);\n            svint32_t current = svld1(pg_col, &matrix[i * cols + j]);\n            svint32_t next = svld1(pg_col, &matrix[i * cols + j + 1]);\n            svbool_t cmp_result = svcmpge_n_s32(pg_col, current, next);\n            svbool_t final_result = svsel(pg_col, dir, cmp_result);\n            if (!svptest_any(svptrue_b32(), final_result)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        svbool_t pg = svwhilelt_b32(i, rows);\n        svbool_t dir = svptrue_b32();\n        if (!directions[i]) {\n            dir = svdup_n_b32(false);\n        }\n        for (size_t j = 0; j < cols - 1; j += svcntw()) {\n            svbool_t pg_inner = svwhilelt_b32(j, cols - 1);\n            svint32_t current = svld1(pg_inner, &matrix[i * cols + j]);\n            svint32_t next = svld1(pg_inner, &matrix[i * cols + j + 1]);\n            svbool_t cmp_result = svcmplt(dir, current, next);\n            if (!svptest_any(svptrue_b32(), cmp_result)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        svbool_t pg = svptrue_b32();\n        svint32_t current_row = svld1(pg, &matrix[i * cols]);\n        bool ascending = directions[i];\n\n        for (size_t j = 1; j < cols; j += svcntw()) {\n            svbool_t pg_inner = svwhilelt_b32(j, cols);\n            svint32_t next_elements = svld1(pg_inner, &matrix[i * cols + j]);\n\n            if (ascending) {\n                svbool_t sorted = svcmplt(pg_inner, current_row, next_elements);\n                if (svptest_any(svptrue_b32(), sorted)) {\n                    return false;\n                }\n            } else {\n                svbool_t sorted = svcmpgt(pg_inner, current_row, next_elements);\n                if (svptest_any(svptrue_b32(), sorted)) {\n                    return false;\n                }\n            }\n\n            current_row = next_elements;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svuint16_t bases = svdup_n_u16(base);\n    \n    for (; svptest_any(pg); svprf(pg)) {\n        svint16_t src_values = svld1_s16(pg, src);\n        svint16_t multiples = svmul_n_s16_z(pg, src_values / bases, base);\n        svst1_s16(pg, dst, multiples);\n        \n        src += svcntw();\n        dst += svcntw();\n        length -= svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t base_v = svdup_n_s16(base);\n    for (; svptest_first(pg); svprfw(pg)) {\n        svint16_t src_v = svld1_s16(pg, src);\n        svint16_t div = svdiv_s16_z(pg, src_v, base_v);\n        svint16_t mul = svmul_n_s16_z(pg, div, base);\n        svst1_s16(pg, dst, mul);\n        src += svcntw();\n        dst += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svuint16_t bases = svdup_n_u16(base);\n    \n    for (; svptest_any(pg); svprv(pg, pg)) {\n        svint16_t src_values = svld1_s16(pg, src);\n        svint16_t multiples = svmul_n_s16_z(pg, src_values / bases, base);\n        svst1_s16(pg, dst, multiples);\n        src += svcntw();\n        dst += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t base_vec = svdup_n_s16(base);\n    for (; svptest_any(pg); svprff(pg)) {\n        svint16_t src_vec = svld1_s16(pg, src);\n        svint16_t div_result = svdiv_s16_z(pg, src_vec, base_vec);\n        svint16_t mul_result = svmul_n_s16_z(pg, div_result, base);\n        svst1_s16(pg, dst, mul_result);\n        src += svcntw();\n        dst += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svuint16_t bases = svdup_n_u16(base);\n    \n    for (; svptest_any(pg); svprff(pg)) {\n        svint16_t src_values = svld1_s16(pg, src);\n        svint16_t multiples = svmul_n_s16_z(pg, src_values / bases, bases);\n        svst1_s16(pg, dst, multiples);\n        \n        src += svcntw();\n        dst += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t pattern = svld1(pg, vector);\n\n    for (size_t i = 0; i < rows; i++) {\n        const double* row = matrix + i * cols;\n        svfloat64_t row_vec = svld1(pg, row);\n\n        if (svptest_any(svptrue_b64(), svcmpeq(pg, row_vec, pattern))) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t vec = svld1(pg, &vector[0]);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svbool_t pg_inner = svwhilelt_b64(j, cols);\n            svfloat64_t mat = svld1(pg_inner, &matrix[i * cols + j]);\n            svbool_t result = svcmpeq_f64(pg_inner, mat, vec);\n            if (svptest_any(svptrue_b64(), result)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t mat = svld1(pg, &matrix[i * cols + j]);\n            svfloat64_t vec = svld1(pg, vector);\n            svbool_t match = svcmpeq_n_f64(mat, vec);\n            if (svptest_any(svptrue_b64(), match)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t vec = svld1(pg, &vector[0]);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svbool_t pg_inner = svwhilelt_b64(j, cols);\n            svfloat64_t mat = svld1(pg_inner, &matrix[i * cols + j]);\n            svbool_t result = svcmpeq_f64(pg_inner, mat, vec);\n            if (svptest_any(svptrue_b64(), result)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t vec = svld1(pg, &vector[0]);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t mat = svld1(pg, &matrix[i * cols + j]);\n            svbool_t match = svcmpeq_n_f64(mat, vec);\n            if (svptest_any(svptrue_b64(), match)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t equal_count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < total_elements; i += svcntw()) {\n        svuint8_t vecA = svld1_u8(pg, &A[i]);\n        svuint8_t vecB = svld1_u8(pg, &B[i]);\n        svbool_t pred = svcmpeq_n_u8(pg, vecA, vecB);\n        equal_count += svcntw() - svtbl(pred, 0);\n\n        if (i + svcntw() >= total_elements) {\n            break;\n        }\n    }\n\n    return equal_count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t equal_count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < total_elements; i += svcntb()) {\n        svuint8_t vecA = svld1_u8(pg, &A[i]);\n        svuint8_t vecB = svld1_u8(pg, &B[i]);\n        svbool_t pred = svcmpeq_n_u8(pg, vecA, vecB);\n        equal_count += svcntw(pred);\n    }\n\n    return equal_count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    svbool_t pg = svwhilelt_b8_u64(0, total_elements);\n\n    for (size_t i = 0; i < total_elements; i += svcntb()) {\n        svuint8_t vecA = svld1_u8(pg, &A[i]);\n        svuint8_t vecB = svld1_u8(pg, &B[i]);\n        svbool_t p_eq = svcmpeq_n_u8(pg, vecA, vecB);\n        count += svcntw(p_eq);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    svbool_t pg = svwhilelt_b8(0, dims[0]*dims[1]*dims[2]*dims[3]);\n    \n    for (size_t i = 0; i < dims[0]*dims[1]*dims[2]*dims[3]; i += svcntb()) {\n        svuint8_t va = svld1_u8(pg, &A[i]);\n        svuint8_t vb = svld1_u8(pg, &B[i]);\n        svbool_t p = svcmpeq_u8(va, vb);\n        count += svcntw(p);\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    svbool_t pg = svwhilelt_b8(0, dims[0]*dims[1]*dims[2]*dims[3]);\n    for (size_t i = 0; i < dims[0]*dims[1]*dims[2]*dims[3]; i += svcntb()) {\n        svuint8_t va = svld1_u8(pg, &A[i]);\n        svuint8_t vb = svld1_u8(pg, &B[i]);\n        svbool_t p = svcmpeq_u8(va, vb);\n        count += svcntw(p);\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl = svcntd(); // Get the maximum vector length\n\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n\n        svint64_t vec_x = svld1(pg, x + i);\n        svint64_t vec_a = svdup_n_s64(a);\n\n        svint64_t vec_result = svmul_n_s64_x(pg, vec_x, a, 0);\n        svint64_t vec_abs_result = svabs_s64_x(pg, vec_result);\n\n        svst1(pg, y + i, vec_abs_result);\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        \n        svint64_t vec_x = svld1(pg, x + i);\n        svint64_t vec_a = svdup_n_s64(a);\n        \n        svint64_t result = svmul_n_s64_z(pg, vec_x, a, vl);\n        svint64_t abs_result = svabs_s64_z(pg, result);\n        \n        svst1(pg, y + i, abs_result);\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b64(0, length); // Predicate for the main loop\n\n    int64_t a_splat = svdup_n_s64(a); // Splat the scalar 'a' to a vector\n\n    for (; svptest_first(pg, length); pg = svwhilelt_b64(svwhilelt_b64(0, length), length)) {\n        size_t vl_actual = svcntd();\n        if (vl_actual > length) {\n            vl_actual = length;\n        }\n\n        svbool_t pg_actual = svwhilelt_b64(0, vl_actual);\n\n        svint64_t x_vec = svld1(pg_actual, x);\n        svint64_t ax = svmul_n_s64_z(pg_actual, x_vec, a_splat);\n\n        svint64_t y_abs = svabs_s64_z(pg_actual, ax);\n\n        svst1(pg_actual, y, y_abs);\n\n        x += vl_actual;\n        y += vl_actual;\n        length -= vl_actual;\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        \n        svint64_t vec_x = svld1(pg, x + i);\n        svint64_t vec_a = svdup_n_s64(a);\n        \n        svint64_t result = svmul_n_s64_z(pg, vec_x, a, vl);\n        svint64_t abs_result = svabs_s64_z(pg, result);\n        \n        svst1(pg, y + i, abs_result);\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t vec_x = svld1(pg, x + i);\n        svint64_t vec_a = svdup_n_s64(a);\n        svint64_t vec_mul = svmul_n_s64_x(pg, vec_x, a, 0);\n        svint64_t vec_abs = svabs_s64_x(pg, vec_mul);\n        svst1(pg, y + i, vec_abs);\n    }\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t sv_vec = svld1_s16(pg, vec);\n\n    int16_t min_val = svminv_s16(pg, sv_vec);\n    int16_t max_val = svmaxv_s16(pg, sv_vec);\n\n    MinMaxPair result;\n    result.min_num = min_val;\n    result.max_num = max_val;\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t sv_vec = svld1_s16(pg, vec);\n    \n    int16_t min_val = svminv_s16(pg, sv_vec);\n    int16_t max_val = svmaxv_s16(pg, sv_vec);\n\n    MinMaxPair result = {min_val, max_val};\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\n#include <arm_sve.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t sv_vec = svld1_s16(pg, vec);\n\n    int16_t min_val = svminv_s16(pg, sv_vec);\n    int16_t max_val = svmaxv_s16(pg, sv_vec);\n\n    MinMaxPair result;\n    result.min_num = min_val;\n    result.max_num = max_val;\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t sv_vec = svld1_s16(pg, vec);\n    \n    int16_t min_val = svminv_s16(pg, sv_vec);\n    int16_t max_val = svmaxv_s16(pg, sv_vec);\n\n    MinMaxPair result = {min_val, max_val};\n    return result;\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t sv_vec = svld1_s16(pg, vec);\n    \n    int16_t min_val = svminv_s16(pg, sv_vec);\n    int16_t max_val = svmaxv_s16(pg, sv_vec);\n\n    MinMaxPair result = {min_val, max_val};\n    return result;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i++) {\n        const int* row = matrix + i * cols;\n        svbool_t pg_all_true = svdup_n_b32(true);\n        for (size_t j = 0; j < cols - 1; j += svcntw()) {\n            svbool_t pg_mask = svwhilelt_b32(j, cols - 1);\n            svbool_t pg_cmp = svcmpgt_n_s32(pg_mask, svld1(pg_mask, &row[j + 1]), svld1(pg_mask, &row[j]));\n            pg_all_true = svand_z(pg_all_true, pg_all_true, pg_cmp);\n        }\n        if (!svptest_any(svptrue_b32(), pg_all_true)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        svbool_t pg_all_true = svdup_n_b32(true);\n        for (size_t j = 0; j < cols - 1; j += svcntw()) {\n            svbool_t pg_mask = svwhilelt_b32(j, cols - 1);\n            svbool_t pg_cmp = svcmpgt_n_s32(pg_mask, svld1(pg_mask, row_ptr + j), svld1(pg_mask, row_ptr + j + 1));\n            pg_all_true = svand_m(pg_all_true, pg_all_true, pg_cmp);\n        }\n        if (!svptest_any(svptrue_b32(), pg_all_true)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        svbool_t pg_all_true = svdup_n_b32(true);\n        for (size_t j = 0; j < cols - 1; j += svcntw()) {\n            svbool_t pg_mask = svwhilelt_b32(j, cols - 1);\n            svbool_t pg_inc = svcmpwslt_n_s32(pg_mask, svld1(pg, &row_ptr[j]), svld1(pg, &row_ptr[j + 1]));\n            pg_all_true = svand_z(pg_all_true, pg_mask, pg_inc);\n        }\n        if (!svptest_any(svptrue_b32(), pg_all_true)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        svbool_t pg_all_true = svdup_n_b32(true);\n        for (size_t j = 0; j < cols - 1; j += svcntw()) {\n            svbool_t pg_mask = svwhilelt_b32(j, cols - 1);\n            svbool_t pg_cmp = svcmpgt_n_s32(pg_mask, svld1(pg_mask, row_ptr + j), svld1(pg_mask, row_ptr + j + 1));\n            pg_all_true = svand_m(pg_all_true, pg_all_true, pg_cmp);\n        }\n        if (!svptest_any(svptrue_b32(), pg_all_true)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i++) {\n        const int* row_ptr = matrix + i * cols;\n        svbool_t pg_all_true = svptrue_b32();\n        for (size_t j = 0; j < cols - 1; j += svcntw()) {\n            svint32_t vec_a = svld1(pg, &row_ptr[j]);\n            svint32_t vec_b = svld1(pg, &row_ptr[j + 1]);\n            svbool_t pg_less_than = svcmplt(pg, vec_a, vec_b);\n            pg_all_true = svand_m(pg_all_true, pg_all_true, pg_less_than);\n        }\n        if (!svptest_any(svptrue_b32(), pg_all_true)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            int32_t first_element = matrix[i * cols + j];\n            for (size_t ii = i; ii < i + block_size; ii++) {\n                for (size_t jj = j; jj < j + block_size; jj += svcntw()) {\n                    svbool_t pg_inner = svwhilelt_b32(jj, j + block_size);\n                    svint32_t block_elements = svld1(pg_inner, &matrix[ii * cols + jj]);\n                    svint32_t compare_result = svcmpeq_n_s32(pg_inner, block_elements, first_element);\n                    if (!svptest_any(svptrue_b32(), compare_result)) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            svint32_t first_block = svld1(pg, &matrix[i * cols + j]);\n            for (size_t ii = i; ii < i + block_size; ii++) {\n                for (size_t jj = j; jj < j + block_size; jj++) {\n                    svint32_t current_block = svld1(pg, &matrix[ii * cols + jj]);\n                    if (!svcmpeq(pg, first_block, current_block)) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    int32_t* first_block = (int32_t*)matrix;\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            int32_t* current_block = (int32_t*)(matrix + i * cols + j);\n            svbool_t pg_all_equal = svwhilelt_b32(0, block_size * block_size);\n            svbool_t pg_equal = svptrue_b32();\n            svint32_t first_block_vec = svld1(pg, first_block);\n            svint32_t current_block_vec = svld1(pg, current_block);\n            pg_equal = svcmpeq(pg_equal, first_block_vec, current_block_vec);\n            if (!svptest_any(svptrue_b32(), pg_equal)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            const int* block_start = matrix + i * cols + j;\n            int first_element = *block_start;\n            for (size_t k = 0; k < block_size; ++k) {\n                for (size_t l = 0; l < block_size; l += svcntw()) {\n                    svbool_t pg_inner = svwhilelt_b32(l, block_size);\n                    svint32_t block_elements = svld1(pg_inner, block_start + k * cols + l);\n                    svint32_t first_element_vec = svdup_n_s32(first_element);\n                    if (!svcmpeq(pg_inner, block_elements, first_element_vec)) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            const int* block_start = matrix + i * cols + j;\n            svint32_t first_block = svld1(pg, block_start);\n\n            for (size_t ii = 0; ii < block_size; ii++) {\n                for (size_t jj = 0; jj < block_size; jj++) {\n                    const int* current_block = block_start + ii * cols + jj;\n                    svint32_t current_value = svld1(pg, current_block);\n                    if (!svcmpeq(first_block, current_value)) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (length % block_size != 0 || block_size == 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t first_block = svld1(pg, &vec[0]);\n\n    for (size_t i = block_size; i < length; i += block_size) {\n        svfloat64_t current_block = svld1(pg, &vec[i]);\n        svbool_t cmp_result = svcmpeq_n_f64(pg, current_block, first_block, tolerance);\n        if (!svptest_any(svptrue_b64(), cmp_result)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (length % block_size != 0 || block_size == 0) {\n        return false;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, length);\n    svfloat64_t first_block = svld1(pg, vec);\n\n    for (size_t i = block_size; i < length; i += block_size) {\n        svbool_t pg_block = svwhilelt_b64(i, length);\n        svfloat64_t current_block = svld1(pg_block, &vec[i]);\n\n        svbool_t pg_equal = svcmpeq_f64(pg_block, current_block, first_block, tolerance);\n        if (!svptest_any(svptrue_b64(), pg_equal)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (length % block_size != 0 || block_size == 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t first_block = svld1(pg, &vec[0]);\n\n    for (size_t i = block_size; i < length; i += block_size) {\n        svfloat64_t current_block = svld1(pg, &vec[i]);\n        svbool_t cmp_result = svcgt(pg, svabs_f64(svsub_f64(pg, first_block, current_block)), svdup_n_f64(tolerance));\n        if (svptest_any(svptrue_b64(), cmp_result)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (length < block_size || length % block_size != 0) {\n        return false;\n    }\n\n    svbool_t pg = svptrue_b64();\n    svfloat64_t first_block = svld1(pg, &vec[0]);\n\n    for (size_t i = block_size; i < length; i += block_size) {\n        svfloat64_t current_block = svld1(pg, &vec[i]);\n        svbool_t cmp_result = svcgt(pg, svabs_f64(svsub_f64(pg, first_block, current_block)), svdup_n_f64(tolerance));\n        if (svptest_any(svptrue_b64(), cmp_result)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (length % block_size != 0 || block_size == 0) {\n        return false;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, length);\n\n    svfloat64_t first_block = svld1(pg, &vec[0]);\n    for (size_t i = block_size; i < length; i += block_size) {\n        svfloat64_t current_block = svld1(pg, &vec[i]);\n        svbool_t cmp_result = svcmpeq_f64(pg, current_block, first_block);\n        svbool_t within_tolerance = svcgt_f64(pg, svabs_f64(svsub_f64(pg, current_block, first_block)), svdup_n_f64(tolerance));\n        if (!svptest_any(svptrue_b64(), svand_z(svptrue_b64(), cmp_result, within_tolerance))) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        size_t elements = svcntd();\n        if (i + elements > rows) {\n            elements = rows - i;\n            pg = svwhilelt_b64(0, elements);\n        }\n        \n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (size_t k = 0; k < elements; k++) {\n                svfloat64_t mat_row = svld1(pg, &matrix[(i + k) * cols + j]);\n                svfloat64_t threshold = svld1(pg, &thresholds[j]);\n                svfloat64_t diff = svmad_f64_x(pg, mat_row, mat_row, -threshold);\n                svfloat64_t norm = svsqrt_f64_x(pg, svadd_f64_x(pg, diff, diff));\n                svbool_t cmp = svcmpgt_f64(pg, norm, threshold);\n                svst1(pg, &result[i + k], cmp);\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t matrix_vec = svld1(pg, &matrix[i * cols + j]);\n            svfloat64_t threshold_vec = svld1(pg, &thresholds[j]);\n            svfloat64_t squared_diff = svmul_n_f64_x(pg, matrix_vec, matrix_vec);\n            svfloat64_t sum_squared_diff = svaddv_x(pg, squared_diff);\n            svfloat64_t norm = svsqrt_x(pg, sum_squared_diff);\n            svbool_t cmp_result = svcgt_f64(pg, norm, threshold_vec);\n            svst1(pg, &result[i], cmp_result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        size_t elements = svcntd();\n        if (i + elements > rows) {\n            elements = rows - i;\n            pg = svwhilelt_b64(0, elements);\n        }\n        \n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t acc = svdup_n_f64(0.0);\n            for (size_t k = 0; k < elements; k++) {\n                svfloat64_t matrix_row = svld1(pg, &matrix[(i + k) * cols + j]);\n                svfloat64_t threshold = svld1(pg, &thresholds[j]);\n                svfloat64_t diff = svmad_f64_x(pg, matrix_row, matrix_row, svdup_n_f64(-1.0 * svdup_f64(threshold)));\n                svfloat64_t norm = svsqrt_f64_x(pg, svadd_f64_x(pg, svdot_f64_x(pg, diff, diff, acc), acc));\n                svbool_t cmp = svcmpgt_f64(norm, threshold);\n                svst1(pg, &result[i + k], cmp);\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t matrix_vec = svld1(pg, &matrix[i * cols + j]);\n            svfloat64_t threshold_vec = svld1(pg, &thresholds[j]);\n            svfloat64_t squared_diff = svmul_x(pg, matrix_vec, matrix_vec);\n            svfloat64_t sum_squared_diff = svaddv_x(pg, squared_diff);\n            svfloat64_t norm = svsqrt_x(pg, sum_squared_diff);\n            svbool_t cmp_result = svcgt_f64(pg, norm, threshold_vec);\n            svst1(pg, &result[i], cmp_result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t matrix_vec = svld1(pg, &matrix[i * cols + j]);\n            svfloat64_t threshold_vec = svld1(pg, &thresholds[j]);\n            svfloat64_t squared_diff = svmul_n_f64_z(pg, svsub_f64_z(pg, matrix_vec, threshold_vec), svdup_n_f64(2.0));\n            svfloat64_t row_norm = svaddv_n_f64_z(pg, squared_diff);\n            svbool_t row_result = svcmpgt_f64(pg, row_norm, svdup_n_f64(1.0));\n            svst1(pg, &result[i], row_result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t va = svld1(pg, &A[i]);\n        svuint32_t vb = svld1(pg, &B[i]);\n        svuint32_t vc = svorr_u32(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t va = svld1(pg, &A[i]);\n        svuint32_t vb = svld1(pg, &B[i]);\n        svuint32_t vc = svorr_u32(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svuint32_t a_vec = svld1(pg, &A[i]);\n        svuint32_t b_vec = svld1(pg, &B[i]);\n        svuint32_t result = svorr_u32_x(pg, a_vec, a_vec, b_vec);\n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t va = svld1(pg, &A[i]);\n        svuint32_t vb = svld1(pg, &B[i]);\n        svuint32_t vc = svorr_u32(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n        svuint32_t va = svld1(pg, &A[i]);\n        svuint32_t vb = svld1(pg, &B[i]);\n        svuint32_t vc = svorr_u32(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svptrue_b8();\n    svint8_t *a_ptr = (svint8_t *)A;\n    svint8_t *b_ptr = (svint8_t *)B;\n    svint16_t sum_squares = svdup_n_s16(0);\n    svint32_t sum_products = svdup_n_s32(0);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svint8_t a_values = svld1(pg, &a_ptr[i]);\n        svint8_t b_values = svld1(pg, &b_ptr[i]);\n\n        svint16_t a_squared = svmul_s16_x(pg, a_values, a_values);\n        svint32_t a_b_product = svmul_s32_x(pg, svreinterpret_s32_s16(a_values), svreinterpret_s32_s16(b_values));\n\n        sum_squares = svadd_s16_x(pg, sum_squares, a_squared);\n        sum_products = svadd_s32_x(pg, sum_products, a_b_product);\n    }\n\n    int64_t result = svaddv_s64(svptrue_b64(), svsub_s64_x(svptrue_b64(), svreinterpret_s64_s32(sum_products), svmul_n_s64(sum_squares, length)));\n    return result;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n\n    svint8_t *a_ptr = (svint8_t*) A;\n    svint8_t *b_ptr = (svint8_t*) B;\n\n    svint16_t sum_of_squares = svdup_n_s16(0);\n    svint32_t sum_of_products = svdup_n_s32(0);\n\n    for (; svptest_any(pg); svprff(pg)) {\n        svint8_t a_vec = svld1_s8(pg, a_ptr);\n        svint8_t b_vec = svld1_s8(pg, b_ptr);\n\n        svint16_t a_squared = svmul_s8(pg, a_vec, a_vec);\n        svint32_t a_times_b = svmul_s8(pg, a_vec, b_vec);\n\n        sum_of_squares = svqadd_s16(sum_of_squares, a_squared);\n        sum_of_products = svqadd_s32(sum_of_products, a_times_b);\n\n        a_ptr = svld1_gather_s8offset_s64(pg, a_ptr, 64);\n        b_ptr = svld1_gather_s8offset_s64(pg, b_ptr, 64);\n    }\n\n    svint64_t result = svsub_s64_z(pg, svext_s32(sum_of_squares, sum_of_squares, 1), sum_of_products);\n    return svaddv_s64(pg, result);\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svptrue_b8();\n    svint8_t accum_sq = svdup_n_s8(0);\n    svint8_t accum_prod = svdup_n_s8(0);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svint8_t vecA = svld1_s8(pg, &A[i]);\n        svint8_t vecB = svld1_s8(pg, &B[i]);\n\n        accum_sq = svqadd_s8_z(pg, accum_sq, svmul_s8_z(pg, vecA, vecA));\n        accum_prod = svqadd_s8_z(pg, accum_prod, svmul_s8_z(pg, vecA, vecB));\n    }\n\n    int64_t sum_sq = svaddv_s8(pg, accum_sq);\n    int64_t sum_prod = svaddv_s8(pg, accum_prod);\n\n    return sum_sq * sum_sq - sum_prod;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svptrue_b8();\n    svint8_t *a_ptr = (svint8_t *)A;\n    svint8_t *b_ptr = (svint8_t *)B;\n    svint16_t sum_sq = svdup_n_s16(0);\n    svint32_t sum_prod = svdup_n_s32(0);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svint8_t a_vec = svld1_s8(pg, a_ptr + i);\n        svint8_t b_vec = svld1_s8(pg, b_ptr + i);\n\n        svint16_t a_sq = svmul_s16_x(pg, a_vec, a_vec);\n        svint16_t b_sq = svmul_s16_x(pg, b_vec, b_vec);\n        sum_sq = svadd_s16_x(pg, sum_sq, a_sq);\n        sum_sq = svadd_s16_x(pg, sum_sq, b_sq);\n\n        svint16_t prod = svmul_s16_x(pg, a_vec, b_vec);\n        sum_prod = svadd_s32_x(pg, sum_prod, svmovlb_x(pg, prod));\n    }\n\n    int64_t result = svaddv_s64(pg, svmull_s32(pg, sum_sq, sum_sq)) - svaddv_s64(pg, sum_prod);\n    return result;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svptrue_b8();\n    svint8_t *a_ptr = (svint8_t *)A;\n    svint8_t *b_ptr = (svint8_t *)B;\n    \n    svint16_t sum_squares = svdup_n_s16(0);\n    svint32_t sum_products = svdup_n_s32(0);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svint8_t a_vec = svld1_s8(pg, a_ptr + i);\n        svint8_t b_vec = svld1_s8(pg, b_ptr + i);\n\n        svint16_t a_squares = svmul_s8(pg, a_vec, a_vec);\n        svint16_t b_squares = svmul_s8(pg, b_vec, b_vec);\n        sum_squares = svadd_s16_z(pg, sum_squares, a_squares);\n        sum_squares = svadd_s16_z(pg, sum_squares, b_squares);\n\n        svint16_t products = svmul_s8(pg, a_vec, b_vec);\n        sum_products = svadd_s32_z(pg, sum_products, sxtb_s32(svaddv_s8(pg, products)));\n    }\n\n    int64_t result = svaddv_s32(pg, sum_squares) - svaddv_s32(pg, sum_products);\n    return result;\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t a = svld1(pg, &A[i]);\n        svuint64_t b = svld1(pg, &B[i]);\n        svuint64_t result = svand_n_u64_z(pg, svnot_u64_z(svnot_u64(a)), b);\n        svst1(pg, &C[i], result);\n    }\n}\n```  "}
{"task_id": "SimdBench_42_SVE", "completion": "```\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vecA = svld1(pg, &A[i]);\n        svuint64_t vecB = svld1(pg, &B[i]);\n        svuint64_t result = svand_n_u64_z(pg, vecA, ~vecB);\n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vecA = svld1(pg, &A[i]);\n        svuint64_t vecB = svld1(pg, &B[i]);\n        svuint64_t result = svand_n_u64_z(pg, svnot_u64_z(svsel(pg, vecB, vecB, vecB)), vecA);\n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t vecA = svld1(pg, &A[i]);\n        svuint64_t vecB = svld1(pg, &B[i]);\n        svuint64_t result = svand_n_u64_z(pg, svnot_u64_z(pg, vecB), vecA);\n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t a = svld1(pg, &A[i]);\n        svuint64_t b = svld1(pg, &B[i]);\n        svuint64_t result = svand_n_u64_z(pg, svnot_u64_z(svnot_u64(a)), b);\n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t vl = svcntb(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        \n        svint8_t a = svld1(pg, &A[i]);\n        svint8_t b = svld1(pg, &B[i]);\n        \n        svint8_t positive_mask = svcmpgt_s8(a, 0) && svcmpgt_s8(b, 0);\n        svint8_t negative_mask = svcmplt_s8(a, 0) && svcmplt_s8(b, 0);\n        \n        svint8_t result = svsel_s8(positive_mask, svdup_n_s8(1), svsel_s8(negative_mask, svdup_n_s8(-1), svdup_n_s8(0)));\n        \n        svst1(pg, &C[i], result);\n    }\n}\n```  "}
{"task_id": "SimdBench_43_SVE", "completion": "```\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t vl = svcntb(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        \n        svint8_t a = svld1(pg, &A[i]);\n        svint8_t b = svld1(pg, &B[i]);\n        \n        svint8_t result = svmul_n_s8_z(pg, svand_z(pg, svcmpgt_n_s8(a, 0), svcmpgt_n_s8(b, 0)), 1);\n        result = svmla_n_s8_z(pg, result, svand_z(pg, svcmplt_n_s8(a, 0), svcmplt_n_s8(b, 0)), -1);\n        \n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t vl = svcntb(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b8(i, length);\n\n        svint8_t a = svld1_s8(pg, &A[i]);\n        svint8_t b = svld1_s8(pg, &B[i]);\n\n        svint8_t result = svmul_n_s8_z(pg, svand_z(pg, svcmpgt_n_s8(a, 0), svcmpgt_n_s8(b, 0)), 1);\n        result = svmla_n_s8_z(pg, result, svand_z(pg, svcmplt_n_s8(a, 0), svcmplt_n_s8(b, 0)), -1);\n\n        svst1_s8(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t vl = svcntb(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b8(i, length);\n\n        svint8_t a = svld1(pg, &A[i]);\n        svint8_t b = svld1(pg, &B[i]);\n\n        svint8_t positive_mask = svcmpgt_s8(a, 0) && svcmpgt_s8(b, 0);\n        svint8_t negative_mask = svcmplt_s8(a, 0) && svcmplt_s8(b, 0);\n\n        svint8_t result = svsel_s8(positive_mask, svdup_n_s8(1), svsel_s8(negative_mask, svdup_n_s8(-1), svdup_n_s8(0)));\n\n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t vl = svcntb(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b8(i, length);\n        \n        svint8_t a = svld1(pg, &A[i]);\n        svint8_t b = svld1(pg, &B[i]);\n        \n        svint8_t result = svmul_n_s8_z(pg, svand_z(pg, svcmpgt_n_s8(a, 0), svcmpgt_n_s8(b, 0)), 1);\n        result = svmla_n_s8_z(pg, result, svand_z(pg, svcmplt_n_s8(a, 0), svcmplt_n_s8(b, 0)), -1);\n        \n        svst1(pg, &C[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < mid; i += svcntw()) {\n        svuint16_t va = svld1_u16(pg, &A[i]);\n        svuint16_t vb = svld1_u16(pg, &B[i]);\n        svuint16_t result = svorr_u16(va, vb);\n        svst1_u16(pg, &C[i], result);\n    }\n\n    if (length % 2 != 0) {\n        C[mid] = A[mid];\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < mid; i += svcntw()) {\n        svuint16_t va = svld1_u16(pg, &A[i]);\n        svuint16_t vb = svld1_u16(pg, &B[i]);\n        svuint16_t result = svand_u16(va, vb);\n        svst1_u16(pg, &C[i], result);\n    }\n\n    if (length % 2 != 0) {\n        C[mid] = A[mid];\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < mid; i += svcntw()) {\n        svuint16_t va = svld1_u16(pg, &A[i]);\n        svuint16_t vb = svld1_u16(pg, &B[i]);\n\n        svuint16_t result = svand_u16(va, vb);\n        svst1_u16(pg, &C[i], result);\n    }\n\n    if (length % 2 != 0) {\n        C[mid] = A[mid];\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < mid; i += svcntw()) {\n        svuint16_t va = svld1_u16(pg, &A[i]);\n        svuint16_t vb = svld1_u16(pg, &B[i]);\n        svuint16_t result = svand_u16(va, vb);\n        svst1_u16(pg, &C[i], result);\n    }\n\n    if (length % 2 != 0) {\n        C[mid] = A[mid];\n    }\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    svbool_t pg = svwhilelt_b16(0, length);\n\n    for (size_t i = 0; i < mid; i += svcntw()) {\n        svuint16_t va = svld1_u16(pg, &A[i]);\n        svuint16_t vb = svld1_u16(pg, &B[i]);\n        svuint16_t result = svand_u16(va, vb);\n        svst1_u16(pg, &C[i], result);\n    }\n\n    if (length % 2 != 0) {\n        C[mid] = A[mid];\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    svbool_t pg_true = svptrue_b32();\n    for (size_t i = 0; i < dim1 * dim2 * dim3; i += svcntw()) {\n        svbool_t pg1 = svld1(pg_true, &cond1[i]);\n        svbool_t pg2 = svld1(pg_true, &cond2[i]);\n\n        svfloat32_t va = svld1(pg1, &A[i]);\n        svfloat32_t vb = svld1(pg1, &B[i]);\n        svfloat32_t vc = svld1(svnot_z(pg1, pg1), &C[i]);\n        svfloat32_t vd = svld1(svnot_z(pg1, pg1), &D[i]);\n\n        svfloat32_t result = svsel(va, vb, vc, pg2);\n        result = svsel(result, vd, result, svnot_z(pg2, pg2));\n\n        svst1(pg_true, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    svbool_t pg_true = svptrue_b32();\n    for (size_t i = 0; i < dim1 * dim2 * dim3; i += svcntw()) {\n        svbool_t pg_cond1 = svld1(pg_true, &cond1[i]);\n        svbool_t pg_cond2 = svld1(pg_true, &cond2[i]);\n\n        svfloat32_t vecA = svld1(pg_cond1, &A[i]);\n        svfloat32_t vecB = svld1(pg_cond1, &B[i]);\n        svfloat32_t vecC = svld1(svnot_z(pg_cond1), &C[i]);\n        svfloat32_t vecD = svld1(svnot_z(pg_cond1), &D[i]);\n\n        svfloat32_t result = svsel(vecA, vecB, vecC);\n        result = svsel(result, vecD, svnot_z(pg_cond2));\n\n        svst1(pg_true, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    svbool_t pg_true = svptrue_b32();\n    for (size_t i = 0; i < dim1 * dim2 * dim3; i += svcntw()) {\n        svbool_t pg1 = svld1(pg_true, &cond1[i]);\n        svbool_t pg2 = svld1(pg_true, &cond2[i]);\n\n        svfloat32_t a = svld1(pg1, &A[i]);\n        svfloat32_t b = svld1(pg1, &B[i]);\n        svfloat32_t c = svld1(svnot_z(pg1, pg1), &C[i]);\n        svfloat32_t d = svld1(svnot_z(pg1, pg1), &D[i]);\n\n        svfloat32_t result = svsel(a, b, c);\n        result = svsel(result, d, pg2);\n\n        svst1(pg_true, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    svbool_t pg_true = svptrue_b32();\n    size_t total_size = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        svbool_t cond1_vec = svld1(pg_true, &cond1[i]);\n        svbool_t cond2_vec = svld1(pg_true, &cond2[i]);\n\n        svfloat32_t A_vec = svld1(pg_true, &A[i]);\n        svfloat32_t B_vec = svld1(pg_true, &B[i]);\n        svfloat32_t C_vec = svld1(pg_true, &C[i]);\n        svfloat32_t D_vec = svld1(pg_true, &D[i]);\n\n        svfloat32_t result = svsel(cond1_vec && cond2_vec, A_vec, svsel(cond1_vec && !cond2_vec, B_vec, svsel(!cond1_vec && cond2_vec, C_vec, D_vec)));\n\n        svst1(pg_true, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < dim1 * dim2 * dim3; i += svcntw()) {\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n        svfloat32_t c = svld1(pg, &C[i]);\n        svfloat32_t d = svld1(pg, &D[i]);\n        svbool_t cond1_vec = svld1(pg, &cond1[i]);\n        svbool_t cond2_vec = svld1(pg, &cond2[i]);\n        \n        svfloat32_t result = svsel(cond1_vec && cond2_vec, a, svsel(cond1_vec && !cond2_vec, b, svsel(!cond1_vec && cond2_vec, c, d)));\n        \n        svst1(pg, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t num_blocks = svcntw(); // Get the number of elements in one SVE vector\n\n    for (size_t i = 0; i < total_size; i += num_blocks) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n\n        svuint32_t input_values = svld1(pg, &A[i]);\n        svuint8_t bit_counts = svcntp_b32(svpopcountuw(input_values));\n\n        svst1(pg, &out[i], bit_counts);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svuint32_t input_values = svld1(pg, &A[i]);\n        svuint8_t bit_counts = svcntp_b32(svpopcount_u32(pg, input_values));\n        \n        svst1(pg, &out[i], bit_counts);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svuint32_t A_vec = svld1(pg, &A[i]);\n        svuint8_t count_vec = svcntp_b8(svpopcount_u32(pg, A_vec));\n        \n        svst1(pg, &out[i], count_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t block_size = svcntw();\n    \n    for (size_t i = 0; i < total_size; i += block_size) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        \n        svuint32_t input_values = svld1(pg, &A[i]);\n        svuint8_t bit_counts = svcntp_b32(svpopcount_u32(pg, input_values));\n        \n        svst1(pg, &out[i], bit_counts);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t num_elements = total_size / svcntw();\n\n    svbool_t pg = svwhilelt_b32(0, total_size);\n\n    for (size_t i = 0; i < num_elements; i++) {\n        svuint32_t a_values = svld1_u32(pg, &A[i * svcntw()]);\n        svuint8_t count = svcntp_b32(svpopcount_u32(a_values));\n        svst1_u8(pg, &out[i * svcntw()], count);\n    }\n\n    size_t remaining_elements = total_size % svcntw();\n    if (remaining_elements > 0) {\n        svbool_t pg_remainder = svwhilelt_b32(num_elements * svcntw(), total_size);\n        svuint32_t a_values_remainder = svld1_u32(pg_remainder, &A[num_elements * svcntw()]);\n        svuint8_t count_remainder = svcntp_b32(svpopcount_u32(a_values_remainder));\n        svst1_u8(pg_remainder, &out[num_elements * svcntw()], count_remainder);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < elements; i += svcntw()) {\n        svint32_t a = svld1(pg, &A[i]);\n        svbool_t cond = svmul_n_b32_z(pg, a, 1/3);\n        svint32_t result = svabs_s32_z(svnot_z(cond), a);\n        svst1(pg, &B[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < elements; i += svcntw()) {\n        svint32_t a = svld1(pg, &A[i]);\n        svbool_t cond = svcmpeq_n_s32(a, 0) && svcmpeq_n_s32(a, 3);\n        svint32_t result = svabs_s32_z(a, a, cond);\n        svst1(pg, &B[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < elements; i += svcntw()) {\n        svint32_t a = svld1(pg, &A[i]);\n        svbool_t cond = svcmpeq_n_s32(a, 0) && svcmpeq_n_s32(a, 3);\n        svint32_t result = svabs_s32_z(a, a, cond);\n        svst1(pg, &B[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < elements; i += svcntw()) {\n        svint32_t a = svld1(pg, &A[i]);\n        svbool_t cond = svmul_n_b32_z(pg, a, 1/3);\n        svint32_t result = svabs_z(pg, a);\n        B[i] = svsel_s32(cond, result, a);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t elements = rows * cols;\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < elements; i += svcntw()) {\n        svint32_t a = svld1_s32(pg, &A[i]);\n        svbool_t cond = svcmpeq_n_s32(a, 0) && svcmpeq_n_s32(a, 3);\n        svint32_t result = svabs_s32_z(a, a, cond);\n        svst1_s32(pg, &B[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    svbool_t pg;\n    svuint32_t src_vec, dst_vec, mask, rotated_vec;\n    svuint32_t rotate_bits_vec = svdup_n_u32(rotate_bits);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b32(i, length);\n\n        src_vec = svld1(pg, &src[i]);\n        mask = svand_n_u32(src_vec, 0xF);\n        svbool_t cond = svcmpeq_n_u32(mask, 0xF);\n\n        rotated_vec = svbsl_u32(cond, svror_n_u32(src_vec, rotate_bits), svnot_u32(src_vec));\n        dst_vec = svsel_u32(cond, rotated_vec, svnot_u32(src_vec));\n\n        svst1(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    svbool_t pg;\n    svuint32_t src_vec, dst_vec, mask;\n    svuint32_t rotate_bits_vec = svdup_n_u32(rotate_bits);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b32(i, length);\n\n        src_vec = svld1(pg, &src[i]);\n        mask = svand_n_u32(src_vec, 0xF); // Extract low 4 bits\n        mask = svcmpeq_n_u32(mask, 0xF); // Check if low 4 bits are all 1\n\n        dst_vec = svbsl_u32(mask, svror_n_u32(src_vec, rotate_bits), svnot_u32(src_vec));\n\n        svst1(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    svbool_t pg;\n    svuint32_t src_vec, dst_vec, mask;\n    svint32_t rotate = svdup_s32(rotate_bits);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b32(i, length);\n\n        src_vec = svld1(pg, &src[i]);\n        mask = svand_n_u32_z(pg, src_vec, 0xF);\n        dst_vec = svbsl_u32_z(pg, svror_n_u32_z(pg, src_vec, rotate_bits), svnot_u32_z(pg, src_vec), mask);\n\n        svst1(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    svbool_t pg;\n    svuint32_t src_vec, dst_vec, mask;\n    svint32_t rotate = svdup_n_s32(rotate_bits);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b32(i, length);\n\n        src_vec = svld1(pg, &src[i]);\n        mask = svand_n_u32(src_vec, 0xF);\n        svbool_t cond = svcmpeq_n_u32(mask, 0xF);\n\n        dst_vec = svbsl_u32(cond, svror_n_u32(src_vec, rotate_bits), svnot_u32(src_vec));\n\n        svst1(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    svbool_t pg;\n    svuint32_t src_vec, dst_vec, rotate_mask, rotate_value, neg_mask;\n    svint32_t rotate_bits_vec = svdup_s32(rotate_bits);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b32(i, length);\n\n        src_vec = svld1(pg, &src[i]);\n        rotate_mask = svand_n_u32_z(pg, src_vec, 0xF);\n        rotate_value = svdup_n_u32(rotate_bits);\n        dst_vec = svbsl_u32_z(pg, svror_n_u32_z(pg, src_vec, rotate_bits_vec), src_vec, rotate_mask);\n\n        neg_mask = svcmpeq_n_u32_z(pg, rotate_mask, 0xF);\n        dst_vec = svnot_u32_z(pg, svsel_u32_z(pg, dst_vec, src_vec, neg_mask));\n\n        svst1(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n\n        svfloat32_t diff = svsub_f32_z(pg, a, b);\n        svfloat32_t abs_diff = svabs_f32_z(pg, diff);\n\n        svfloat32_t epsilon_vec = svdup_n_f32(epsilon);\n        svfloat32_t abs_epsilon = svdup_n_f32(fabsf(epsilon));\n\n        svbool_t cmp_gt = svcgt_f32_z(pg, diff, epsilon_vec);\n        svbool_t cmp_lt = svcmplt_f32_z(pg, diff, svneg_f32_z(pg, epsilon_vec));\n\n        svint8_t result = svsel_s8_z(cmp_gt, svdup_n_s8(1), svsel_s8_z(cmp_lt, svdup_n_s8(-1), svdup_n_s8(0)));\n\n        svst1(pg, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n\n        svfloat32_t diff = svsub_f32_z(pg, a, b);\n        svfloat32_t abs_diff = svabs_f32_z(pg, diff);\n\n        svfloat32_t epsilon_vec = svdup_n_f32(epsilon);\n        svfloat32_t abs_epsilon = svdup_n_f32(fabsf(epsilon));\n\n        svbool_t cmp_gt = svcgt_f32_z(pg, diff, epsilon_vec);\n        svbool_t cmp_lt = svcmplt_f32_z(pg, diff, svneg_f32_z(pg, epsilon_vec));\n        svbool_t cmp_le = svcmple_f32_z(pg, abs_diff, abs_epsilon);\n\n        svint8_t result = svsel_s8_z(cmp_gt, 1, svsel_s8_z(cmp_lt, -1, 0));\n\n        svst1(pg, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n\n        svfloat32_t diff = svsub_f32_z(pg, a, b);\n        svfloat32_t abs_diff = svabs_f32_z(pg, diff);\n\n        svfloat32_t epsilon_vec = svdup_n_f32(epsilon);\n        svfloat32_t abs_epsilon = svabs_f32_z(pg, epsilon_vec);\n\n        svbool_t cmp_gt = svcgt_f32_z(pg, diff, abs_epsilon);\n        svbool_t cmp_lt = svcmplt_f32_z(pg, diff, svneg_f32_z(pg, abs_epsilon));\n\n        svint8_t result = svsel_s8_z(cmp_gt, svdup_n_s8(1), svsel_s8_z(cmp_lt, svdup_n_s8(-1), svdup_n_s8(0)));\n\n        svst1(pg, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = length;\n\n    while (remaining >= vl) {\n        svbool_t pg = svwhilelt_b32(0, vl);\n\n        svfloat32_t a_vec = svld1(pg, &A[0]);\n        svfloat32_t b_vec = svld1(pg, &B[0]);\n\n        svfloat32_t diff = svsub_f32_z(pg, a_vec, b_vec);\n        svfloat32_t abs_diff = svabs_f32_z(pg, diff);\n\n        svfloat32_t epsilon_vec = svdup_n_f32(epsilon);\n        svbool_t cmp_result = svcmple_f32(pg, abs_diff, epsilon_vec);\n\n        svint8_t out_vec = svsel_s8(cmp_result, svdup_n_s8(0), svsel_s8(svcmpgt_f32(pg, diff, epsilon_vec), svdup_n_s8(1), svdup_n_s8(-1)));\n\n        svst1(pg, &out[0], out_vec);\n\n        A += vl;\n        B += vl;\n        out += vl;\n        remaining -= vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b32(0, remaining);\n\n        svfloat32_t a_vec = svld1(pg, &A[0]);\n        svfloat32_t b_vec = svld1(pg, &B[0]);\n\n        svfloat32_t diff = svsub_f32_z(pg, a_vec, b_vec);\n        svfloat32_t abs_diff = svabs_f32_z(pg, diff);\n\n        svfloat32_t epsilon_vec = svdup_n_f32(epsilon);\n        svbool_t cmp_result = svcmple_f32(pg, abs_diff, epsilon_vec);\n\n        svint8_t out_vec = svsel_s8(cmp_result, svdup_n_s8(0), svsel_s8(svcmpgt_f32(pg, diff, epsilon_vec), svdup_n_s8(1), svdup_n_s8(-1)));\n\n        svst1(pg, &out[0], out_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, length);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n\n        svfloat32_t diff = svsub_f32_z(pg, a, b);\n        svfloat32_t abs_diff = svabs_f32_z(pg, diff);\n\n        svfloat32_t epsilon_vec = svdup_n_f32(epsilon);\n        svfloat32_t abs_epsilon = svabs_f32_z(pg, epsilon_vec);\n\n        svbool_t cmp_gt = svcgt_f32_z(pg, diff, abs_epsilon);\n        svbool_t cmp_lt = svcmplt_f32_z(pg, diff, svneg_f32_z(pg, abs_epsilon));\n\n        svint8_t result = svsel_s8_z(cmp_gt, svdup_n_s8(1), svsel_s8_z(cmp_lt, svdup_n_s8(-1), svdup_n_s8(0)));\n\n        svst1(pg, &out[i], result);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = size;\n\n    for (; remaining >= vl; remaining -= vl) {\n        svfloat32_t a_vec = svld1_f32(A);\n        svint32_t b_vec = svcvtps_s32(a_vec);\n        b_vec = svmul_n_s32_x(b_vec, b_vec, INT32_MAX, SV_VL1);\n        b_vec = svmul_n_s32_x(b_vec, b_vec, INT32_MIN, SV_VL1);\n        svst1_s32(B, b_vec);\n        A += vl;\n        B += vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b32(0, remaining);\n        svfloat32_t a_vec = svld1_vnum_f32(pg, A, 0);\n        svint32_t b_vec = svcvtps_s32(a_vec);\n        b_vec = svmul_n_s32_x(b_vec, b_vec, INT32_MAX, SV_VL1);\n        b_vec = svmul_n_s32_x(b_vec, b_vec, INT32_MIN, SV_VL1);\n        svst1_vnum_s32(pg, B, 0, b_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svint32_t b = svcvt_s32_f32(a);\n\n        svint32_t min_val = svdup_n_s32(INT32_MIN);\n        svint32_t max_val = svdup_n_s32(INT32_MAX);\n\n        b = svmul_n_s32_z(pg, b, b, 1); // Saturate values to INT32_MIN\n        b = svmul_n_s32_z(pg, b, b, -1); // Saturate values to INT32_MAX\n\n        b = svmin_s32_z(pg, b, max_val); // Saturate values to INT32_MAX\n        b = svmax_s32_z(pg, b, min_val); // Saturate values to INT32_MIN\n\n        svst1(pg, &B[i], b);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svint32_t b = svcvt_s32_f32(a);\n\n        svint32_t min_val = svdup_n_s32(INT32_MIN);\n        svint32_t max_val = svdup_n_s32(INT32_MAX);\n\n        b = svmul_n_s32_z(pg, b, b, 1); // Saturate values to INT32_MIN\n        b = svmin_s32_z(pg, b, max_val, b); // Saturate values to INT32_MAX\n        b = svmax_s32_z(pg, b, min_val, b); // Saturate values to INT32_MIN\n\n        svst1(pg, &B[i], b);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = size;\n\n    while (remaining >= vl) {\n        svbool_t pg = svwhilelt_b32(0, vl);\n\n        svfloat32_t a_vec = svld1(pg, A);\n        svint32_t b_vec = svcvt_s32_f32(a_vec);\n\n        svint32_t int32_max = svdup_n_s32(INT32_MAX);\n        svint32_t int32_min = svdup_n_s32(INT32_MIN);\n\n        b_vec = svmul_n_s32_z(pg, b_vec, b_vec, INT32_MAX);\n        b_vec = svmul_n_s32_z(pg, b_vec, b_vec, INT32_MIN);\n\n        b_vec = svmin_s32_z(pg, b_vec, int32_max);\n        b_vec = svmax_s32_z(pg, b_vec, int32_min);\n\n        svst1(pg, B, b_vec);\n\n        A += vl;\n        B += vl;\n        remaining -= vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b32(0, remaining);\n\n        svfloat32_t a_vec = svld1(pg, A);\n        svint32_t b_vec = svcvt_s32_f32(a_vec);\n\n        svint32_t int32_max = svdup_n_s32(INT32_MAX);\n        svint32_t int32_min = svdup_n_s32(INT32_MIN);\n\n        b_vec = svmul_n_s32_z(pg, b_vec, b_vec, INT32_MAX);\n        b_vec = svmul_n_s32_z(pg, b_vec, b_vec, INT32_MIN);\n\n        b_vec = svmin_s32_z(pg, b_vec, int32_max);\n        b_vec = svmax_s32_z(pg, b_vec, int32_min);\n\n        svst1(pg, B, b_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svfloat32_t vecA = svld1(pg, &A[i]);\n        svint32_t vecB = svcvt_s32_f32_z(pg, vecA);\n\n        svint32_t max_val = svdup_n_s32(INT32_MAX);\n        svint32_t min_val = svdup_n_s32(INT32_MIN);\n\n        vecB = svmul_n_s32_z(pg, vecB, 1); // Clamp values to INT32_MAX\n        vecB = svmin_s32_z(pg, vecB, max_val); // Clamp values to INT32_MAX\n        vecB = svmax_s32_z(pg, vecB, min_val); // Clamp values to INT32_MIN\n\n        svst1(pg, &B[i], vecB);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t i;\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    int32_t* ptr_A = (int32_t*) A;\n    float* ptr_B = (float*) B;\n\n    svint32_t vec_A;\n    svfloat32_t vec_B;\n\n    svint32_t scale_vec = svdup_n_s32((int32_t)scale);\n\n    for (i = 0; i < size; i += svcntw()) {\n        size_t elements = svcntw();\n        if (i + elements > size) {\n            elements = size - i;\n        }\n\n        vec_A = svld1(pg, &ptr_A[i]);\n        vec_B = svcvt_f32_s32_z(pg, vec_A);\n        vec_B = svmul_n_f32_z(pg, vec_B, (float)scale);\n        svst1(pg, &ptr_B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    svbool_t pg = svwhilelt_b32(0, size); // Predicate to iterate over the arrays\n\n    for (size_t i = 0; i < size; i += vl) {\n        svint32_t input_int = svld1_s32(pg, &A[i]); // Load int32_t values\n        svfloat32_t scaled_float = svcvt_f32_s32(input_int) * svcvt_f32_s32(svdup_n_s32(scale)); // Convert and scale\n        svst1_f32(pg, &B[i], scaled_float); // Store the result in float array\n        pg = svwhilelt_b32(i + vl, size); // Update predicate for next iteration\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t i;\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    int32_t* ptr_A = (int32_t*) A;\n    float* ptr_B = (float*) B;\n    svint32_t vec_A;\n    svfloat32_t vec_B;\n\n    for (i = 0; i < size; i += svcntw()) {\n        vec_A = svld1(pg, &ptr_A[i]);\n        vec_B = svcvt_f32_s32(pg, vec_A);\n        vec_B = svmul_n_f32_x(pg, vec_B, scale);\n        svst1(pg, &ptr_B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t i;\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    int32_t* ptr_A = (int32_t*) A;\n    float* ptr_B = (float*) B;\n\n    svint32_t vec_A;\n    svfloat32_t vec_B;\n\n    svint32_t scale_vec = svdup_n_s32((int32_t)scale);\n\n    for (i = 0; i < size; i += svcntw()) {\n        size_t elements = svcntw();\n        if (i + elements > size) {\n            elements = size - i;\n        }\n\n        vec_A = svld1(pg, &ptr_A[i]);\n        vec_B = svcvt_f32_s32(pg, vec_A);\n        vec_B = svmul_n_f32_z(pg, vec_B, vec_B, (float)scale);\n        svst1(pg, &ptr_B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t i;\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    int32_t* ptr_A = (int32_t*) A;\n    float* ptr_B = (float*) B;\n\n    svint32_t vec_A;\n    svfloat32_t vec_B;\n\n    svint32_t vec_scale = svdup_n_s32((int32_t) scale);\n\n    for (i = 0; i < size; i += svcntw()) {\n        size_t elements = svcntw();\n        if (i + elements > size) {\n            elements = size - i;\n        }\n\n        vec_A = svld1(pg, &ptr_A[i]);\n        vec_B = svcvt_f32_s32(pg, vec_A);\n        vec_B = svmul_n_f32_z(pg, vec_B, vec_scale, 1);\n\n        svst1(pg, &ptr_B[i], vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, size);\n\n    for (; i < size; i += svcntw()) {\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n\n        svfloat32_t result = svdiv_z(pg, a, b);\n        svint32_t rounded_result = svrinta_z(pg, result);\n\n        svst1(pg, &C[i], rounded_result);\n        pg = svwhilelt_b32(i + svcntw(), size);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t loops = size / svcntw();\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    for (size_t i = 0; i < loops; i++) {\n        svfloat32_t a_vec = svld1(pg, &A[i * svcntw()]);\n        svfloat32_t b_vec = svld1(pg, &B[i * svcntw()]);\n        svint32_t c_vec = svrinta_z(pg, svdiv_z(pg, svreinterpret_f32(a_vec), svreinterpret_f32(b_vec)));\n        svst1(pg, &C[i * svcntw()], c_vec);\n    }\n\n    size_t remaining = size % svcntw();\n    if (remaining > 0) {\n        svbool_t pg_remain = svwhilelt_b32(0, remaining);\n        svfloat32_t a_vec = svld1(pg_remain, &A[loops * svcntw()]);\n        svfloat32_t b_vec = svld1(pg_remain, &B[loops * svcntw()]);\n        svint32_t c_vec = svrinta_z(pg_remain, svdiv_z(pg_remain, svreinterpret_f32(a_vec), svreinterpret_f32(b_vec)));\n        svst1(pg_remain, &C[loops * svcntw()], c_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n\n        svfloat32_t result = svdiv_z(pg, a, b);\n        svint32_t rounded = svrinta_z(pg, result, SV_ROUND_NEAREST, SV_UINT32);\n\n        svst1(pg, &C[i], rounded);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, size);\n    \n    for (; i < size; i += svcntw()) {\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n        \n        svfloat32_t result = svdiv_z(pg, a, b);\n        svint32_t rounded_result = svrinta_z(pg, result);\n        \n        svst1(pg, &C[i], rounded_result);\n        pg = svwhilelt_b32(i + svcntw(), size);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svfloat32_t a = svld1(pg, &A[i]);\n        svfloat32_t b = svld1(pg, &B[i]);\n\n        svfloat32_t result = svdiv_z(pg, a, b);\n        svint32_t rounded = svrinta_z(pg, result);\n\n        svst1(pg, &C[i], rounded);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, size);\n\n        svfloat64_t vecA = svld1(pg, &A[i]);\n        svfloat32_t vecB = svcvt_f32_f64_m(pg, vecA);\n\n        svfloat32_t max_val = svdup_n_f32(FLT_MAX);\n        svfloat32_t min_val = svdup_n_f32(-FLT_MAX);\n\n        vecB = svmul_n_f32_x(pg, vecB, max_val, svcmpgt_f32(vecB, max_val));\n        vecB = svmul_n_f32_x(pg, vecB, min_val, svcmplt_f32(vecB, min_val));\n\n        svst1(pg, &B[i], vecB);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = size;\n\n    for (; remaining >= vl; remaining -= vl) {\n        svbool_t pg = svwhilelt_b64(0, vl);\n\n        svfloat64_t vec_A = svld1(pg, A);\n        svfloat32_t vec_B = svcvt_f32_f64(vec_A);\n\n        svfloat32_t max_val = svdup_n_f32(FLT_MAX);\n        svfloat32_t min_val = svdup_n_f32(-FLT_MAX);\n\n        vec_B = svmul_n_f32_z(pg, vec_B, max_val, svcmpgt_f32_z(pg, vec_B, max_val));\n        vec_B = svmul_n_f32_z(pg, vec_B, min_val, svcgt_f32_z(pg, vec_B, min_val));\n\n        svst1(pg, B, vec_B);\n\n        A += vl;\n        B += vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b64(0, remaining);\n\n        svfloat64_t vec_A = svld1(pg, A);\n        svfloat32_t vec_B = svcvt_f32_f64(vec_A);\n\n        svfloat32_t max_val = svdup_n_f32(FLT_MAX);\n        svfloat32_t min_val = svdup_n_f32(-FLT_MAX);\n\n        vec_B = svmul_n_f32_z(pg, vec_B, max_val, svcmpgt_f32_z(pg, vec_B, max_val));\n        vec_B = svmul_n_f32_z(pg, vec_B, min_val, svcgt_f32_z(pg, vec_B, min_val));\n\n        svst1(pg, B, vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = size;\n\n    for (; remaining >= vl; remaining -= vl) {\n        svbool_t pg = svwhilelt_b64(0, vl);\n\n        svfloat64_t vec_A = svld1(pg, A);\n        svfloat32_t vec_B = svcvt_f32_f64_m(pg, vec_A);\n\n        svfloat32_t max_val = svdup_n_f32(FLT_MAX);\n        svfloat32_t min_val = svdup_n_f32(-FLT_MAX);\n\n        vec_B = svmul_n_f32_x(pg, vec_B, max_val, svcmpgt_n_f64(pg, vec_A, FLT_MAX));\n        vec_B = svmul_n_f32_x(pg, vec_B, min_val, svcmplt_n_f64(pg, vec_A, -FLT_MAX));\n\n        svst1(pg, B, vec_B);\n\n        A += vl;\n        B += vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b64(0, remaining);\n\n        svfloat64_t vec_A = svld1(pg, A);\n        svfloat32_t vec_B = svcvt_f32_f64_m(pg, vec_A);\n\n        svfloat32_t max_val = svdup_n_f32(FLT_MAX);\n        svfloat32_t min_val = svdup_n_f32(-FLT_MAX);\n\n        vec_B = svmul_n_f32_x(pg, vec_B, max_val, svcmpgt_n_f64(pg, vec_A, FLT_MAX));\n        vec_B = svmul_n_f32_x(pg, vec_B, min_val, svcmplt_n_f64(pg, vec_A, -FLT_MAX));\n\n        svst1(pg, B, vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (size_t i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, size);\n\n        svfloat64_t vecA = svld1(pg, &A[i]);\n        svfloat32_t vecB = svcvt_f32_f64_m(pg, vecA);\n\n        svfloat32_t max_val = svdup_n_f32(FLT_MAX);\n        svfloat32_t min_val = svdup_n_f32(-FLT_MAX);\n\n        vecB = svmul_n_f32_x(pg, vecB, max_val, svcmpgt_n_f64(vecA, (double)FLT_MAX));\n        vecB = svmul_n_f32_x(pg, vecB, min_val, svcmplt_n_f64(vecA, (double)(-FLT_MAX)));\n\n        svst1(pg, &B[i], vecB);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, size);\n        svfloat64_t vecA = svld1(pg, &A[i]);\n        svfloat32_t vecB = svcvt_f32_f64_m(pg, vecA);\n        svfloat32_t max_val = svdup_n_f32(FLT_MAX);\n        svfloat32_t min_val = svdup_n_f32(-FLT_MAX);\n        vecB = svmul_n_f32_z(pg, vecB, max_val, svcmpgt_n_f64_z(pg, vecA, svdup_n_f64(FLT_MAX)));\n        vecB = svmul_n_f32_z(pg, vecB, min_val, svcmplt_n_f64_z(pg, vecA, svdup_n_f64(-FLT_MAX)));\n        svst1(pg, &B[i], vecB);\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i;\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b16(i, size);\n\n        svint32_t vecA = svld1_s32(pg, &A[i]);\n        svst1_s32(pg, &B[i], svreinterpret_s32_s16(vecA));\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i;\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (i = 0; i < size; i += vl) {\n        svint16_t vec16 = svld1_s16(&A[i]); // Load 16-bit integers from A\n        svint32_t vec32 = svmovlb_s32(svreinterpret_s32_s16(vec16)); // Sign-extend 16-bit integers to 32-bit integers\n        svst1_s32(&B[i], vec32); // Store 32-bit integers to B\n    }\n\n    // Handle remaining elements\n    for (; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = size;\n\n    while (remaining >= vl) {\n        svint32_t vec_int32 = svld1_s32(svptrue_b32(), B); // Load int32 values from B\n        svint16_t vec_int16 = svld1_s16(svptrue_b16(), A); // Load int16 values from A\n        vec_int32 = svmovl_s16(vec_int16); // Convert int16 to int32\n        svst1_s32(svptrue_b32(), B, vec_int32); // Store int32 values to B\n        A += vl;\n        B += vl;\n        remaining -= vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b32(0, remaining);\n        svint32_t vec_int32 = svld1_s32(pg, B); // Load int32 values from B\n        svint16_t vec_int16 = svld1_s16(pg, A); // Load int16 values from A\n        vec_int32 = svmovl_s16_z(pg, vec_int16); // Convert int16 to int32\n        svst1_s32(pg, B, vec_int32); // Store int32 values to B\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i;\n    size_t remaining = size;\n    svbool_t pg = svwhilelt_b16(0, size);\n\n    for (i = 0; i < size; i += svcntw()) {\n        svint16_t vec16 = svld1_s16(pg, &A[i]);\n        svint32_t vec32 = svmovlb_s32(svreinterpret_s32_s16(vec16));\n        svst1_s32(pg, &B[i], vec32);\n        remaining -= svcntw();\n        pg = svwhilelt_b16(0, remaining);\n    }\n}\n```  "}
{"task_id": "SimdBench_54_SVE", "completion": "```\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b16(i, size);\n    \n    for (; i < size; i += svcntw()) {\n        svint16_t a = svld1_s16(pg, &A[i]);\n        svint32_t b = svmovlb_s32(svreinterpret_s32_s16(a));\n        svst1_s32(pg, &B[i], b);\n        pg = svwhilelt_b16(i + svcntw(), size);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svbool_t pg;\n    svfloat32_t sve_min_val = svdup_f32(min_val);\n    svfloat32_t sve_max_val = svdup_f32(max_val);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        pg = svwhilelt_b32(i, size);\n\n        svint32_t control_value = svld1_s32(pg, control + i);\n        svfloat32_t A_value = svld1_f32(pg, A + i);\n        svfloat32_t B_value = svdup_f32(0.0f);\n\n        svbool_t mask = svcmpgt_s32(pg, control_value, svdup_s32(0));\n\n        svfloat32_t normalized_value = svdiv_f32_z(pg, svsub_f32_z(pg, A_value, sve_min_val), svsub_f32_z(pg, sve_max_val, sve_min_val));\n        normalized_value = svmul_f32_z(pg, normalized_value, svsel_f32(mask, svdup_f32(1.0f), svdup_f32(0.0f)));\n\n        B_value = svsel_f32(mask, normalized_value, A_value);\n\n        svst1_f32(pg, B + i, B_value);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svbool_t pg;\n    svfloat32_t sve_min_val = svdup_f32(min_val);\n    svfloat32_t sve_max_val = svdup_f32(max_val);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        pg = svwhilelt_b32(i, size);\n\n        svint32_t control_value = svld1_s32(pg, control + i);\n        svfloat32_t A_value = svld1_f32(pg, A + i);\n        svfloat32_t B_value = svdup_f32(0.0f);\n\n        svbool_t mask = svcmpgt_s32(pg, control_value, svdup_s32(0));\n\n        svfloat32_t normalized_value = svdiv_f32_z(pg, svsub_f32_z(pg, A_value, sve_min_val), svsub_f32_z(pg, sve_max_val, sve_min_val));\n        normalized_value = svmul_f32_z(pg, normalized_value, svsel_f32(mask, svdup_f32(1.0f), svdup_f32(0.0f)));\n\n        B_value = svsel_f32(mask, normalized_value, A_value);\n\n        svst1_f32(pg, B + i, B_value);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svbool_t pg;\n    svfloat32_t sve_min_val = svdup_f32(min_val);\n    svfloat32_t sve_max_val = svdup_f32(max_val);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        pg = svwhilelt_b32(i, size);\n\n        svint32_t control_value = svld1_s32(pg, control + i);\n        svfloat32_t A_value = svld1_f32(pg, A + i);\n        svfloat32_t B_value = svdup_f32(0.0f);\n\n        svbool_t mask = svcmpgt_s32(pg, control_value, svdup_s32(0));\n\n        svfloat32_t normalized_value = svdiv_f32_z(pg, svsub_f32_z(pg, A_value, sve_min_val), svsub_f32_z(pg, sve_max_val, sve_min_val));\n        normalized_value = svmul_f32_z(pg, normalized_value, svsel_f32(mask, svdup_f32(1.0f), svdup_f32(0.0f)));\n\n        svst1_f32(pg, B + i, svsel_f32(mask, normalized_value, A_value));\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svbool_t pg;\n    svfloat32_t sve_min_val = svdup_f32(min_val);\n    svfloat32_t sve_max_val = svdup_f32(max_val);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        pg = svwhilelt_b32(i, size);\n\n        svint32_t control_value = svld1_s32(pg, control + i);\n        svfloat32_t A_value = svld1_f32(pg, A + i);\n        svfloat32_t B_value;\n\n        svbool_t mask = svcmpgt_s32(pg, control_value, svdup_s32(0));\n        svfloat32_t normalized_value = svdiv_f32_z(pg, svsub_f32_z(pg, A_value, sve_min_val), svsub_f32_z(pg, sve_max_val, sve_min_val));\n        svfloat32_t zero = svdup_f32(0.0f);\n        svfloat32_t one = svdup_f32(1.0f);\n        B_value = svsel_f32(mask, svmin_f32_z(pg, svmax_f32_z(pg, normalized_value, zero), one), A_value);\n\n        svst1_f32(pg, B + i, B_value);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svbool_t pg;\n    svfloat32_t sve_min_val = svdup_f32(min_val);\n    svfloat32_t sve_max_val = svdup_f32(max_val);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        pg = svwhilelt_b32(i, size);\n\n        svint32_t control_value = svld1_s32(pg, control + i);\n        svfloat32_t A_value = svld1_f32(pg, A + i);\n        svfloat32_t B_value;\n\n        svbool_t mask = svcmpgt_s32(pg, control_value, svdup_s32(0));\n        svfloat32_t normalized_value = svdiv_f32_z(pg, svsub_f32_z(pg, A_value, sve_min_val), svsub_f32_z(pg, sve_max_val, sve_min_val));\n        svfloat32_t clamped_value = svmin_f32_z(svmax_f32_z(normalized_value, svdup_f32(0.0f)), svdup_f32(1.0f));\n\n        B_value = svsel_f32(mask, clamped_value, A_value);\n\n        svst1_f32(pg, B + i, B_value);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    for (size_t i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svuint32_t a_u32 = svld1(pg, A + i);\n        svfloat32_t a_f32 = svcvt_f32_u32_m(pg, svshl_n_u32(a_u32, a_u32, 16));\n        svfloat32_t result = svsqrt_f32(a_f32);\n        svst1(pg, B + i, result);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (size_t i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svuint32_t a_u32 = svld1(pg, A + i);\n        svfloat32_t a_f32 = svcvt_f32_u32_m(pg, svshl_n_u32(a_u32, a_u32, 16));\n\n        svfloat32_t result = svsqrt_f32(a_f32);\n\n        svst1(pg, B + i, result);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (size_t i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svuint32_t a_u32 = svld1(pg, &A[i]); // Load uint32_t values from A\n        svfloat32_t a_f32 = svcvt_f32_u32(a_u32); // Convert uint32_t to float\n        svfloat32_t sqrt_result = svmul_f32_z(pg, svsqrt_f32_z(pg, a_f32), a_f32); // Square root of the float value\n        svst1(pg, &B[i], sqrt_result); // Store the result in B\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (size_t i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svuint32_t a_u32 = svld1(pg, A + i);\n        svfloat32_t a_f32 = svcvt_f32_u32_m(pg, svshl_n_u32(a_u32, a_u32, 16));\n\n        svfloat32_t result = svsqrt_f32(a_f32);\n\n        svst1(pg, B + i, result);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svuint32_t a_u32 = svld1(pg, &A[i]); // Load uint32_t values\n        svfloat32_t a_f32 = svcvt_f32_u32_m(pg, a_u32); // Convert uint32_t to float\n        svfloat32_t sqrt_result = svsqrt_f32(a_f32); // Square root of float values\n        svst1(pg, &B[i], sqrt_result); // Store the result in B\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t i;\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svuint32_t input_u32 = svld1(pg, A + i);\n        svfloat32_t result_f32 = svreinterpret_f32_u32(input_u32);\n        \n        svst1(pg, B + i, result_f32);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t remaining = size;\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    while (remaining >= svcntw()) {\n        svuint32_t vec_A = svld1(pg, A);\n        svfloat32_t vec_B = svreinterpret_f32_u32(vec_A);\n        svst1(pg, B, vec_B);\n\n        A += svcntw();\n        B += svcntw();\n        remaining -= svcntw();\n    }\n\n    if (remaining > 0) {\n        svbool_t pg_remain = svwhilelt_b32(0, remaining);\n        svuint32_t vec_A = svld1(pg_remain, A);\n        svfloat32_t vec_B = svreinterpret_f32_u32(vec_A);\n        svst1(pg_remain, B, vec_B);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t i;\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svuint32_t input_u32 = svld1(pg, A + i);\n        svfloat32_t output_f32 = svreinterpret_f32_u32(input_u32);\n        \n        svst1(pg, B + i, output_f32);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t i;\n    size_t vl = svcntw(); // Get the maximum vector length\n\n    for (i = 0; i < size; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svuint32_t input_u32 = svld1(pg, &A[i]);\n        svfloat32_t output_f32 = svreinterpret_f32_u32(input_u32);\n        \n        svst1(pg, &B[i], output_f32);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl = svcntw(); // Get the maximum vector length\n    size_t remaining = size;\n\n    for (; remaining >= vl; remaining -= vl) {\n        svuint32_t a_vec = svld1_u32(svptrue_b32(), A);\n        svfloat32_t b_vec = svreinterpret_f32_u32(a_vec);\n        svst1_f32(svptrue_b32(), B, b_vec);\n\n        A += vl;\n        B += vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b32(0, remaining);\n        svuint32_t a_vec = svld1_u32(pg, A);\n        svfloat32_t b_vec = svreinterpret_f32_u32(a_vec);\n        svst1_f32(pg, B, b_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint32_t prev = svdup_n_s32(0);\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t p = svptrue_b32();\n        svint32_t current = svld1_s32(p, &A[i]);\n        svbool_t mask = svwhilelt_b8(i, size);\n        svbool_t cond_mask = svld1_b8(mask, &cond[i]);\n        svint32_t diff_int = svsub_s32_z(p, current, prev, cond_mask);\n        svfloat32_t diff_float = svcvt_f32_s32(diff_int);\n        svst1_f32(p, &diff[i], diff_float);\n        prev = svsel_s32(cond_mask, current, prev);\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svptrue_b32();\n    svfloat32_t prev = svdup_n_f32(0.0f);\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t p = svwhilelt_b32(i, size);\n        svint32_t a = svld1_s32(pg, &A[i]);\n        svbool_t c = svld1(pg, &cond[i]);\n        svint32_t a_prev = svext_s32_z(pg, prev, a, 1);\n        svint32_t diff_int = svsub_s32_z(p, a, a_prev);\n        svfloat32_t diff_float = svcvt_f32_s32_z(p, diff_int);\n        svfloat32_t result = svsel_f32(c, diff_float, svdup_n_f32(0.0f));\n        svst1(pg, &diff[i], result);\n        prev = svreinterpret_f32_s32(svext_s32_z(pg, svreinterpret_s32_f32(result), a, -1));\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svptrue_b32();\n    svint32_t a_prev = svld1_s32(pg, &A[0]);\n    svfloat32_t diff_prev = svdup_n_f32(0.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg_cond = svwhilelt_b32(i, size);\n        svint32_t a = svld1_s32(pg_cond, &A[i]);\n        svbool_t pg_true = svptrue_b32();\n        svbool_t pg_false = svnot_z(pg_true);\n\n        svbool_t pg_cond_shifted = svand_z(pg_true, pg_cond, svext_z(pg_true, pg_false, pg_cond, -1));\n        svbool_t pg_cond_true = svand_z(pg_true, pg_cond, cond[i]);\n        \n        svint32_t a_diff = svsub_s32_z(pg_cond_shifted, a, a_prev);\n        svfloat32_t diff_float = svcvt_f32_s32_z(pg_cond_true, a_diff);\n        svst1_f32(pg_cond_true, &diff[i], diff_float);\n\n        a_prev = svsel_s32(pg_cond_shifted, a, a_prev);\n        diff_prev = svsel_f32(pg_cond_shifted, diff_float, diff_prev);\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svptrue_b32();\n    svint32_t prev = svdup_n_s32(0);\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t p = svwhilelt_b32(i, size);\n        svint32_t a = svld1_s32(p, &A[i]);\n        svbool_t c = svld1(p, &cond[i]);\n        \n        svint32_t diff_int = svsub_s32_z(pg, a, prev);\n        svfloat32_t diff_float = svcvt_f32_s32(diff_int);\n        \n        svfloat32_t result = svsel_f32(c, diff_float, svdup_n_f32(0.0f));\n        \n        svst1_f32(p, &diff[i], result);\n        \n        prev = svsel_s32(c, a, prev);\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svptrue_b32();\n    svint32_t prev = svdup_n_s32(0);\n    svfloat32_t zero = svdup_n_f32(0.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t p = svwhilelt_b32(i, size);\n        svint32_t a = svld1_s32(pg, &A[i]);\n        svbool_t c = svld1(p, cond + i);\n        svint32_t diff_int = svsub_s32_z(p, a, prev);\n        svfloat32_t diff_float = svcvt_f32_s32_z(p, diff_int);\n        svfloat32_t result = svsel(zero, diff_float, c);\n        svst1(pg, diff + i, result);\n\n        prev = svsel(prev, a, c);\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    size_t remaining = length;\n\n    while (remaining >= vl) {\n        svuint64_t vec_src = svld1_u64(src);\n        svuint64_t vec_dst = svreinterpret_u64_u32(svqmovn_u32(svshl_n_u32(vec_src, 32)));\n        svst1_u64(dst, vec_dst);\n\n        src += vl;\n        dst += vl;\n        remaining -= vl;\n    }\n\n    if (remaining > 0) {\n        svbool_t pg = svwhilelt_b64(0, remaining);\n        svuint64_t vec_src = svld1_u64(pg, src);\n        svuint64_t vec_dst = svreinterpret_u64_u32(svqmovn_u32(svshl_n_u32(vec_src, 32)));\n        svst1_u64(pg, dst, vec_dst);\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n\n        svuint32_t src_vec = svld1(pg, &src[i]); // Load 32-bit unsigned integers\n        svuint64_t dst_vec = svmovl_u32(pg, src_vec); // Convert to 64-bit unsigned integers\n        dst_vec = svorr_n_u64_z(pg, dst_vec, 0xFFFFFFFF00000000, 32); // Set high 32 bits to 1\n        svst1(pg, &dst[i], dst_vec); // Store the results\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    size_t i = 0;\n\n    for (; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n\n        svuint32_t src_vec = svld1(pg, &src[i]); // Load 32-bit integers from src\n        svuint64_t dst_vec = svmovl_u32(pg, src_vec); // Convert to 64-bit integers\n        dst_vec = svorr_n_u64_x(pg, dst_vec, 0xFFFFFFFF00000000); // Set high 32 bits to 1\n        svst1(pg, &dst[i], dst_vec); // Store the results in dst\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl = svcntd();\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint32_t src_vec = svld1_u32(pg, src + i);\n        svuint64_t dst_vec = svmovl_u32(pg, src_vec);\n        dst_vec = svorr_n_u64(pg, dst_vec, 0xFFFFFFFF00000000);\n        svst1_u64(pg, dst + i, dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl = svcntd(); // Get the maximum vector length\n    for (size_t i = 0; i < length; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint32_t src_vec = svld1(pg, &src[i]);\n        svuint64_t dst_vec = svmovl_u32(src_vec);\n        dst_vec = svorr_n_u64_z(pg, dst_vec, dst_vec, 0xFFFFFFFF00000000);\n        svst1(pg, &dst[i], dst_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_n_f64(0.0);\n    \n    for (size_t i = 0; i < length; i += svcntd()) {\n        svint16_t indices = svld1_s16(pg, &index[i]);\n        svfloat64_t values = svld1_gather_s64offset_f64(pg, vec, indices);\n        sum = svadd_f64_z(pg, sum, values);\n    }\n    \n    return svaddv_f64(pg, sum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svfloat64_t sum = svdup_n_f64(0.0);\n    \n    for (size_t i = 0; i < length; i += svcntd()) {\n        svint16_t indices = svld1_s16(pg, &index[i]);\n        svfloat64_t values = svld1_f64(pg, &vec[0]);\n        svfloat64_t selected_values = svindexa_f64(values, indices);\n        sum = svadd_f64_z(pg, sum, selected_values);\n    }\n    \n    return svaddv_f64(pg, sum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_n_f64(0.0);\n    \n    for (size_t i = 0; i < length; i += svcntd()) {\n        svint16_t indices = svld1_s16(pg, &index[i]);\n        svfloat64_t values = svld1_f64(pg, &vec[0]);\n        svfloat64_t selected_values = svindex_f64(values, indices);\n        sum = svadd_f64_z(pg, sum, selected_values);\n    }\n    \n    return svaddv_f64(pg, sum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_n_f64(0.0);\n    \n    for (size_t i = 0; i < length; i += svcntd()) {\n        svint16_t indices = svld1_s16(pg, &index[i]);\n        svfloat64_t values = svld1_gather_s64index_f64(pg, vec, indices);\n        sum = svadd_f64_z(pg, sum, values);\n    }\n    \n    return svaddv_f64(pg, sum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_n_f64(0.0);\n    \n    for (size_t i = 0; i < length; i += svcntd()) {\n        svint16_t indices = svld1_s16(pg, &index[i]);\n        svfloat64_t values = svld1_gather_s64index_f64(pg, vec, indices);\n        sum = svadd_f64_z(pg, sum, values);\n    }\n    \n    return svaddv_f64(pg, sum);\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            svbool_t pg = svptrue_b64();\n            svfloat64_t result = svdup_n_f64(0.0);\n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    size_t input_index = (i + ki) * input_size + (j + kj);\n                    size_t kernel_index = ki * kernel_size + kj;\n                    svfloat64_t input_val = svld1(pg, &input[input_index]);\n                    svfloat64_t kernel_val = svdup_n_f64(kernel[kernel_index]);\n                    result = svmla_n_f64(result, input_val, kernel_val);\n                }\n            }\n            svfloat64_t zero = svdup_n_f64(0.0);\n            result = svmul_n_f64_z(pg, result, result, 0.0);\n            svst1(pg, &output[i * output_size + j], result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            svbool_t pg = svptrue_b64();\n            svfloat64_t result = svdup_n_f64(0.0);\n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    svfloat64_t input_val = svld1(pg, &input[(i + ki) * input_size + j + kj]);\n                    svfloat64_t kernel_val = svdup_n_f64(kernel[ki * kernel_size + kj]);\n                    result = svmla_n_f64_z(pg, result, input_val, kernel_val, 0);\n                }\n            }\n            svfloat64_t zero = svdup_n_f64(0.0);\n            result = svmul_n_f64_z(pg, result, svsel(pg, result, zero, svcmpge_n_f64_z(pg, result, zero, 0)), 1.0);\n            svst1(pg, &output[i * output_size + j], result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    int output_size = input_size - kernel_size + 1;\n    for (int i = 0; i < output_size; i++) {\n        for (int j = 0; j < output_size; j++) {\n            svbool_t pg = svwhilelt_b64(i * output_size + j, output_size * output_size);\n            svfloat64_t result = svdup_n_f64(0.0);\n            for (int ki = 0; ki < kernel_size; ki++) {\n                for (int kj = 0; kj < kernel_size; kj++) {\n                    svfloat64_t input_val = svld1(pg, &input[(i + ki) * input_size + j + kj]);\n                    svfloat64_t kernel_val = svdup_n_f64(kernel[ki * kernel_size + kj]);\n                    result = svmla_m(pg, result, input_val, kernel_val);\n                }\n            }\n            svfloat64_t zero = svdup_n_f64(0.0);\n            result = svmax_z(pg, result, zero);\n            svst1(pg, &output[i * output_size + j], result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            svbool_t pg = svptrue_b64();\n            svfloat64_t result = svdup_n_f64(0.0);\n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    svfloat64_t input_val = svld1(pg, &input[(i + ki) * input_size + j + kj]);\n                    svfloat64_t kernel_val = svdup_n_f64(kernel[ki * kernel_size + kj]);\n                    result = svmla_n_f64_z(pg, result, input_val, kernel_val, 0);\n                }\n            }\n            svfloat64_t zero = svdup_n_f64(0.0);\n            result = svmul_n_f64_z(pg, result, svcmpeq_n_f64_z(pg, result, zero, 0), result, 0);\n            svst1(pg, &output[i * output_size + j], result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            svfloat64_t result = svdup_n_f64(0.0);\n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    svfloat64_t input_val = svld1_f64(&input[(i + ki) * input_size + j + kj]);\n                    svfloat64_t kernel_val = svdup_n_f64(kernel[ki * kernel_size + kj]);\n                    result = svmla_n_f64(result, input_val, kernel_val);\n                }\n            }\n            svfloat64_t zero = svdup_n_f64(0.0);\n            result = svmax_f64_z(zero, result, svdup_n_f64(0.0));\n            svst1_f64(output + i * output_size + j, result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```cpp\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b64(0, size);\n\n    svfloat64_t threshold_sve = svdup_f64(threshold);\n\n    for(size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t num1 = svld1(pg, &numbers[i]);\n        for(size_t j = i + svcntd(); j < size; j += svcntd()) {\n            svfloat64_t num2 = svld1(pg, &numbers[j]);\n            svfloat64_t diff = svabs_z(pg, svsub_f64_z(pg, num1, num2));\n            svbool_t close = svcmplt_f64(diff, threshold_sve);\n            if (svptest_any(svptrue_b64(), close)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```cpp\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold){\n    size_t size = numbers.size();\n    svbool_t pg = svptrue_b64();\n    svfloat64_t threshold_sve = svdup_f64(threshold);\n    \n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t num = svld1(pg, &numbers[i]);\n        svbool_t close = svcmplt_f64(num, svadd_f64(threshold_sve, svld1(pg, &numbers[i+1])));\n        if (svptest_any(svptrue_b64(), close)) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```cpp\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold){\n    size_t size = numbers.size();\n    svbool_t pg = svptrue_b64();\n    svfloat64_t threshold_sve = svdup_f64(threshold);\n    \n    for(size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &numbers[i]);\n        svbool_t mask = svwhilelt_b64(i, size);\n        svfloat64_t diff = svabs_f64(svsub_f64_z(pg, vec, svld1(pg, &numbers[i+1]), mask));\n        if(svptest_any(svptrue_b64(), svcmplt_f64(diff, threshold_sve))) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```cpp\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b64(size, svcntd());\n    \n    svfloat64_t threshold_sve = svdup_f64(threshold);\n    \n    for(size_t i = 0; i < size; i += svcntd()){\n        svfloat64_t num1 = svld1(pg, &numbers[i]);\n        for(size_t j = i + svcntd(); j < size; j += svcntd()){\n            svfloat64_t num2 = svld1(pg, &numbers[j]);\n            svfloat64_t diff = svabs_f64(svsub_f64(num1, num2));\n            svbool_t close = svcmplt_f64(diff, threshold_sve);\n            if(svptest_any(svptrue_b64(), close)){\n                return true;\n            }\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```cpp\nbool has_close_elements_simd(const std::vector<double> & numbers, double threshold){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b64(size, svcntd());\n    svfloat64_t threshold_sve = svdup_n_f64(threshold);\n    \n    for(size_t i=0; i<size-1; i+=svptrue_b64()){\n        svfloat64_t vec1 = svld1(pg, &numbers[i]);\n        svfloat64_t vec2 = svld1(pg, &numbers[i+1]);\n        svbool_t close_elements = svcmplt_f64(svabs_f64(svsub_f64(vec1, vec2)), threshold_sve);\n        if(svptest_any(svptrue_b64(), close_elements)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool below_zero_simd(std::vector<int> operations){\n    svbool_t pg = svptrue_b32();\n    svint32_t balance = svdup_s32(0);\n\n    for (size_t i = 0; i < operations.size(); i += svcntw()) {\n        svint32_t vec_operations = svld1_s32(pg, &operations[i]);\n        balance = svadd_s32_z(pg, balance, vec_operations);\n\n        svbool_t below_zero = svcmpgt_s32(pg, balance, svdup_s32(0));\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```cpp\nbool below_zero_simd(std::vector<int> operations){\n    svbool_t pg = svptrue_b32();\n    svint32_t balance = svdup_s32(0);\n\n    for (size_t i = 0; i < operations.size(); i += svcntw()) {\n        svint32_t op = svld1(pg, &operations[i]);\n        balance = svadd_s32_z(pg, balance, op);\n\n        svbool_t below_zero = svcmplt_s32(svdup_n_s32(0), balance);\n        if (!svptest_any(svptrue_b32(), below_zero)) {\n            continue;\n        } else {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```cpp\nbool below_zero_simd(std::vector<int> operations){\n    svbool_t pg = svptrue_b32();\n    svint32_t balance = svdup_s32(0);\n\n    for(size_t i = 0; i < operations.size(); i += svcntw()) {\n        svint32_t vec_operations = svld1_s32(pg, &operations[i]);\n        balance = svadd_s32_z(pg, balance, vec_operations);\n\n        svbool_t below_zero = svcmplt_s32(svsel(pg, svdup(true), pg), balance, svdup_s32(0));\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool below_zero_simd(std::vector<int> operations){\n    svbool_t pg = svwhilelt_b32(0, operations.size());\n    svint32_t balance = svdup_s32(0);\n\n    for (size_t i = 0; i < operations.size(); i += svcntw()) {\n        svint32_t op = svld1_s32(pg, &operations[i]);\n        balance = svadd_s32_z(pg, balance, op);\n\n        svbool_t below_zero = svcmplt_s32(pg, balance, svdup_s32(0));\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```cpp\nbool below_zero_simd(std::vector<int> operations){\n    svbool_t pg = svptrue_b32();\n    svint32_t balance = svdup_s32(0);\n\n    for(size_t i = 0; i < operations.size(); i += svcntw()) {\n        svint32_t op = svld1(pg, &operations[i]);\n        balance = svadd_s32_z(pg, balance, op);\n\n        svbool_t below_zero = svcmplt_s32(svdup_n_s32(0), balance);\n        if (!svptest_any(below_zero)) {\n            continue;\n        } else {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```cpp\ndouble mean_absolute_deviation_simd(std::vector<double> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_f64(0.0);\n    svfloat64_t mean = svdup_f64(0.0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &numbers[i]);\n        sum = svadd_z(pg, sum, vec);\n    }\n\n    mean = svdiv_z(pg, sum, svdup_f64(size));\n\n    svfloat64_t mad_sum = svdup_f64(0.0);\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &numbers[i]);\n        svfloat64_t diff = svabd_z(pg, vec, mean);\n        mad_sum = svadd_z(pg, mad_sum, diff);\n    }\n\n    svfloat64_t mad = svdiv_z(pg, mad_sum, svdup_f64(size));\n    return svaddv_n_f64(pg, mad, 0);\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```cpp\ndouble mean_absolute_deviation_simd(std::vector<double> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_f64(0.0);\n    svfloat64_t mean = svdup_f64(0.0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t data = svld1(pg, &numbers[i]);\n        sum = svadd_z(pg, sum, data);\n    }\n\n    mean = svdiv_z(pg, sum, svdup_f64(size));\n\n    svfloat64_t mad_sum = svdup_f64(0.0);\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t data = svld1(pg, &numbers[i]);\n        svfloat64_t diff = svabsub_f64_z(pg, data, mean);\n        mad_sum = svadd_z(pg, mad_sum, diff);\n    }\n\n    svfloat64_t mad = svdiv_z(pg, mad_sum, svdup_f64(size));\n    return svaddv_n_f64(pg, mad, 0);\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```cpp\ndouble mean_absolute_deviation_simd(std::vector<double> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_f64(0.0);\n    svfloat64_t mean, mad, diff;\n    \n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &numbers[i]);\n        sum = svadd_m(pg, sum, vec, sum);\n    }\n    \n    mean = svdiv_n_f64_z(pg, sum, size);\n    sum = svdup_f64(0.0);\n    \n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &numbers[i]);\n        diff = svabs_z(pg, svsub_z(pg, vec, mean));\n        sum = svadd_m(pg, sum, diff, sum);\n    }\n    \n    mad = svdiv_n_f64_z(pg, sum, size);\n    \n    return svaddv_n_f64(pg, mad);\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```cpp\ndouble mean_absolute_deviation_simd(std::vector<double> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_n_f64(0.0);\n    svfloat64_t mean = svdup_n_f64(0.0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t data = svld1(pg, &numbers[i]);\n        sum = svadd_z(pg, sum, data);\n    }\n\n    mean = svdiv_z(pg, sum, svdup_n_f64(size));\n\n    svfloat64_t mad_sum = svdup_n_f64(0.0);\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t data = svld1(pg, &numbers[i]);\n        svfloat64_t diff = svabs_z(pg, svsub_z(pg, data, mean));\n        mad_sum = svadd_z(pg, mad_sum, diff);\n    }\n\n    svfloat64_t mad = svdiv_z(pg, mad_sum, svdup_n_f64(size));\n    \n    return svaddv_n_f64(pg, mad, 0);\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```cpp\ndouble mean_absolute_deviation_simd(std::vector<double> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svptrue_b64();\n    svfloat64_t sum = svdup_n_f64(0.0);\n    svfloat64_t mean = svdup_n_f64(0.0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t data = svld1(pg, &numbers[i]);\n        sum = svadd_z(pg, sum, data);\n    }\n\n    mean = svdiv_z(pg, sum, svdup_n_f64(size));\n\n    svfloat64_t mad_sum = svdup_n_f64(0.0);\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t data = svld1(pg, &numbers[i]);\n        svfloat64_t diff = svabsub_f64_z(pg, data, mean);\n        mad_sum = svadd_z(pg, mad_sum, diff);\n    }\n\n    svfloat64_t mad = svdiv_z(pg, mad_sum, svdup_n_f64(size));\n    \n    return svaddv_n_f64(pg, mad);\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter){\n    size_t size = numbers.size();\n    size_t new_size = size * 2 - 1;\n    std::vector<int> result(new_size);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sv_delimeter = svdup_n_s32(delimeter);\n\n    for (size_t i = 0; i < size; i++) {\n        svint32_t sv_number = svdup_n_s32(numbers[i]);\n        size_t idx = i * 2;\n        svst1_s32(pg, &result[idx], sv_number);\n        if (idx + 1 < new_size) {\n            svst1_s32(pg, &result[idx + 1], sv_delimeter);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter){\n    size_t num_elements = numbers.size();\n    size_t output_size = num_elements + num_elements - 1;\n    std::vector<int> result(output_size);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sv_delimeter = svdup_s32(delimeter);\n\n    for (size_t i = 0; i < num_elements; ++i) {\n        size_t output_index = i * 2;\n        svint32_t current_number = svdup_s32(numbers[i]);\n        svst1_s32(pg, &result[output_index], current_number);\n        if (output_index + 1 < output_size) {\n            svst1_s32(pg, &result[output_index + 1], sv_delimeter);\n        }\n    }\n\n    return result;\n}\n```  "}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter){\n    size_t num_elements = numbers.size();\n    size_t num_output_elements = num_elements * 2 - 1;\n    std::vector<int> result(num_output_elements);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sv_delimeter = svdup_s32(delimeter);\n\n    for(size_t i = 0; i < num_elements; i++){\n        svint32_t sv_number = svdup_s32(numbers[i]);\n        size_t output_index = i * 2;\n        svst1_s32(pg, &result[output_index], sv_number);\n        if(output_index + 1 < num_output_elements){\n            svst1_s32(pg, &result[output_index + 1], sv_delimeter);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter){\n    size_t num_elements = numbers.size();\n    size_t result_size = num_elements + (num_elements - 1);\n    std::vector<int> result(result_size);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sv_delimeter = svdup_n_s32(delimeter);\n\n    for (size_t i = 0; i < num_elements; ++i) {\n        size_t result_index = i * 2;\n        result[result_index] = numbers[i];\n        if (i < num_elements - 1) {\n            result[result_index + 1] = delimeter;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```cpp\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter){\n    size_t num_elements = numbers.size();\n    size_t new_size = num_elements + (num_elements - 1);\n    std::vector<int> result(new_size);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sv_delimeter = svdup_s32(delimeter);\n\n    size_t i = 0;\n    for (; i < num_elements - svcntw() + 1; i += svcntw()) {\n        svint32_t input = svld1_s32(pg, &numbers[i]);\n        svst1_s32(pg, &result[i * 2], input);\n        svst1_s32(pg, &result[i * 2 + 1], sv_delimeter);\n    }\n\n    if (i < num_elements) {\n        svbool_t pg_tail = svwhilelt_b32(i, num_elements);\n        svint32_t input = svld1_s32(pg_tail, &numbers[i]);\n        svst1_s32(pg_tail, &result[i * 2], input);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers){\n    size_t num_elements = numbers.size();\n    size_t num_lanes = svcntw(); // Get the number of vector lanes\n\n    svbool_t pg = svwhilelt_b16(num_elements, num_lanes); // Predicate for the active elements\n\n    svint16_t vec_numbers = svld1_s16(pg, numbers.data()); // Load input vector\n\n    svint64_t sum = svaddv_s64_z(pg, svdup_n_s64(0), svreinterpret_s64_s16(vec_numbers)); // Calculate sum\n\n    svint64_t product = svmulv_s64_z(pg, svdup_n_s64(1), svreinterpret_s64_s16(vec_numbers)); // Calculate product\n\n    int64_t sum_result;\n    int64_t product_result;\n\n    svst1_s64(pg, &sum_result, sum); // Store sum result\n    svst1_s64(pg, &product_result, product); // Store product result\n\n    return {sum_result, product_result};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers){\n    size_t num_elements = numbers.size();\n    size_t num_lanes = svcntw(); // Get the number of vector lanes\n\n    svbool_t pg = svwhilelt_b16(0, num_elements);\n\n    svint16_t *data_ptr = (svint16_t*)numbers.data();\n    svint64_t sum = svdup_s64(0);\n    svint64_t product = svdup_s64(1);\n\n    for(size_t i = 0; i < num_elements; i += num_lanes){\n        svint16_t data = svld1(pg, &data_ptr[i]);\n        svint32_t data_extend = svmovlb_x(pg, data);\n\n        sum = svaddv_x(pg, sum, svext_x(pg, svreinterpret_s64_s32(data_extend), 0));\n        product = svmul_x(pg, product, svext_x(pg, svreinterpret_s64_s32(data_extend), 0));\n    }\n\n    int64_t sum_result[num_lanes];\n    int64_t product_result[num_lanes];\n    svst1(pg, sum_result, sum);\n    svst1(pg, product_result, product);\n\n    std::vector<int64_t> result = {0, 1};\n    for(size_t i = 0; i < num_lanes; i++){\n        result[0] += sum_result[i];\n        result[1] *= product_result[i];\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b16(size, svcntw());\n    svint16_t sv_numbers = svld1_s16(pg, numbers.data());\n    \n    svint32_t sum = svaddv_s32_z(pg, sv_numbers);\n    svint32_t product = svdup_n_s32(1);\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint16_t chunk = svld1_gather_s16offset_s32(pg, numbers.data(), svindex_s32(i));\n        product = svmul_n_s32_z(pg, product, svaddv_s32_z(pg, chunk));\n    }\n    \n    int64_t sum_scalar = svaddv_s32_z(svptrue_b32(), sum);\n    int64_t product_scalar = svaddv_s32_z(svptrue_b32(), product);\n    \n    return {sum_scalar, product_scalar};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```cpp\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b16(size, svcntw());\n    \n    svint16_t sv_numbers = svld1(pg, numbers.data());\n    \n    svint32_t sum = svaddv_n_s32_z(pg, 0, sv_numbers);\n    svint32_t product = svdup_n_s32(1);\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg_inner = svwhilelt_b16(i + svcntw(), size);\n        svint16_t sv_numbers_inner = svld1(pg_inner, numbers.data() + i);\n        \n        product = svmul_n_s32_z(pg_inner, product, svaddv_n_s32_z(pg_inner, 0, sv_numbers_inner));\n    }\n    \n    int32_t product_scalar = svaddv_n_s32_z(pg, 1, product);\n    \n    return {svaddv_n_s32_z(pg, 0, sum), product_scalar};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```cpp\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b16(0, size);\n    svint16_t vec_numbers = svld1(pg, numbers.data());\n    \n    svint32_t sum = svaddv_s32_z(pg, svreinterpret_s32_s16(vec_numbers));\n    svint32_t product = svdup_n_s32(1);\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg_inner = svwhilelt_b16(i, size);\n        svint16_t chunk = svld1(pg_inner, numbers.data() + i);\n        product = svmul_n_s32_z(pg_inner, product, svaddv_s32_z(pg_inner, svreinterpret_s32_s16(chunk)));\n    }\n    \n    int64_t sum_scalar = svaddv_s32_z(pg, sum);\n    int64_t product_scalar = svaddv_s32_z(pg, product);\n    \n    return {sum_scalar, product_scalar};\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers){\n    size_t size = numbers.size();\n    std::vector<int> result(size);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t current_max = svdup_n_s32(0);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t input = svld1_s32(pg, &numbers[i]);\n        current_max = svmax_s32_z(pg, current_max, input);\n        svst1_s32(pg, &result[i], current_max);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers){\n    size_t size = numbers.size();\n    std::vector<int> result(size);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t current_max = svdup_n_s32(0);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t input = svld1_s32(pg, &numbers[i]);\n        current_max = svmax_s32_z(pg, current_max, input);\n        svst1_s32(pg, &result[i], current_max);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers){\n    std::vector<int> result(numbers.size());\n    svbool_t pg = svptrue_b32();\n    svint32_t current_max = svdup_s32(0);\n\n    for (size_t i = 0; i < numbers.size(); i += svcntw()) {\n        svint32_t input = svld1_s32(pg, &numbers[i]);\n        current_max = svmax_s32_z(pg, current_max, input);\n        svst1_s32(pg, &result[i], current_max);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```cpp\nstd::vector<int> rolling_max_simd(std::vector<int> numbers){\n    std::vector<int> result(numbers.size());\n    svbool_t pg = svptrue_b32();\n    svint32_t current_max = svdup_s32(0);\n    \n    for (size_t i = 0; i < numbers.size(); i += svcntw()) {\n        svint32_t input = svld1(pg, &numbers[i]);\n        current_max = svmax_s32_z(pg, current_max, input);\n        svst1(pg, &result[i], current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers){\n    size_t size = numbers.size();\n    std::vector<int> result(size);\n\n    svbool_t pg = svptrue_b32();\n    svint32_t current_max = svdup_n_s32(0);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t input = svld1(pg, &numbers[i]);\n        current_max = svmax_s32_z(pg, current_max, input);\n        svst1(pg, &result[i], current_max);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```cpp\nstd::string string_xor_simd(std::string a, std::string b){\n    std::string result = \"\";\n    size_t length = a.length();\n    svbool_t pg = svwhilelt_b8(length, length);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t va = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&a[i]));\n        svuint8_t vb = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&b[i]));\n        svuint8_t res = svxor_u8(va, vb);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), res);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```cpp\nstd::string string_xor_simd(std::string a, std::string b){\n    size_t length = a.length();\n    std::string result(length, '0');\n    \n    svbool_t pg = svptrue_b8();\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t va = svld1(pg, reinterpret_cast<const uint8_t*>(&a[i]));\n        svuint8_t vb = svld1(pg, reinterpret_cast<const uint8_t*>(&b[i]));\n        svuint8_t vr = svxor_u8(va, vb);\n        svst1(pg, &result[i], vr);\n    }\n    \n    return result;\n}\n```  "}
{"task_id": "SimdBench_68_SVE", "completion": "```cpp\nstd::string string_xor_simd(std::string a, std::string b){\n    std::string result = \"\";\n    size_t length = a.length();\n    size_t num_lanes = svcntd();\n\n    for (size_t i = 0; i < length; i += num_lanes) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svuint64_t va = svld1(pg, reinterpret_cast<const uint64_t*>(&a[i]));\n        svuint64_t vb = svld1(pg, reinterpret_cast<const uint64_t*>(&b[i]));\n        svuint64_t res = svxor_u64_z(pg, va, vb);\n        svst1(pg, &result[i], res);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```cpp\nstd::string string_xor_simd(std::string a, std::string b){\n    size_t length = a.length();\n    std::string result(length, '0');\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t va = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&a[i]));\n        svuint8_t vb = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&b[i]));\n        svuint8_t res = svorr_u8(va, vb);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), res);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```cpp\nstd::string string_xor_simd(std::string a, std::string b){\n    std::string result = \"\";\n    size_t length = a.length();\n    svbool_t pg = svwhilelt_b8(length, length);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svbool_t pg_inner = svwhilelt_b8(i + svcntb(), length);\n\n        svuint8_t va = svld1_u8(pg_inner, reinterpret_cast<const uint8_t*>(&a[i]));\n        svuint8_t vb = svld1_u8(pg_inner, reinterpret_cast<const uint8_t*>(&b[i]));\n        svuint8_t res = svxor_u8_z(pg_inner, va, vb);\n\n        svst1_u8(pg_inner, reinterpret_cast<uint8_t*>(&result[i]), res);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```cpp\nstd::string longest_simd(const std::vector<std::string> & strings){\n    if(strings.empty()) {\n        return \"None\";\n    }\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    svbool_t pg = svwhilelt_b64(0, strings.size());\n    for(size_t i = 0; svptest_first(pg); i += svcntw(), svprfw(pg)) {\n        svbool_t pg_inner = svwhilelt_b64(i, strings.size());\n        svuint64_t lengths = svindex_s64(0);\n        for(size_t j = i; svptest_first(pg_inner); j++, svprfw(pg_inner)) {\n            const std::string& str = strings[j];\n            svbool_t pg_str = svwhilelt_b64(0, str.size());\n            svuint64_t length = svindex_s64(0);\n            for(size_t k = 0; svptest_first(pg_str); k += svcntw(), svprfw(pg_str)) {\n                svbool_t pg_char = svwhilelt_b64(k, str.size());\n                svuint64_t is_char = svdup_n_u64(1);\n                svbool_t pg_eq = svwhilelt_b64(k, str.size());\n                for(size_t l = 0; svptest_first(pg_eq); l += svcntw(), svprfw(pg_eq)) {\n                    svuint64_t mask = svcmpeq_n_u8(svld1(pg_char, &str[l], SV_PLDL1KEEP), 0);\n                    is_char = svand_n_u64(is_char, svnot_z(svptrue_b64(), mask));\n                }\n                length = svadd_n_u64(length, is_char);\n            }\n            lengths = svadd_n_u64(lengths, length);\n        }\n        svbool_t pg_max = svcmpge_n_u64(lengths, max_length);\n        max_length = svsel(max_length, lengths, pg_max);\n        max_index = svsel(max_index, svindex_s64(i), pg_max);\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```cpp\nstd::string longest_simd(const std::vector<std::string> & strings){\n    if(strings.empty()) return \"None\";\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    svbool_t pg = svwhilelt_b8(0, strings.size());\n    for(size_t i = 0; i < strings.size(); i += svcntw()) {\n        svbool_t pg_next = svwhilelt_b8(i + svcntw(), strings.size());\n        svbool_t pg_mask = svptrue_b8();\n\n        svuint64_t lengths = svindex_s8(pg, i);\n        svbool_t valid = svwhilelt_b8(i, strings.size());\n\n        svbool_t cmp_mask = svcmpge_n_u64(valid, lengths, max_length);\n        svbool_t cmp_mask_dup = svdup_n_b8(cmp_mask, 8);\n\n        svbool_t max_mask = svsel_b8(cmp_mask_dup, pg_mask, svptrue_b8());\n        svuint64_t max_indices = svsel_u64(max_mask, lengths, svdup_n_u64(max_index, 8));\n\n        max_length = svmaxv_u64_z(max_mask, max_length, lengths);\n        max_index = svminv_u64_z(max_mask, max_index, max_indices);\n\n        pg = pg_next;\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```cpp\nstd::string longest_simd(const std::vector<std::string> & strings){\n    if(strings.empty()) return \"None\";\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    svbool_t pg = svptrue_b8();\n    for(size_t i = 0; i < strings.size(); i += svcntw()){\n        svbool_t pg_inner = svwhilelt_b8(i, strings.size());\n        svuint64_t lengths = svindex_u64(pg_inner, 0);\n        for(size_t j = 0; j < svcntw(); ++j){\n            if(i + j < strings.size()){\n                lengths = svadd_u64_z(pg_inner, lengths, svindex_u64(pg_inner, strings[i + j].size()));\n            }\n        }\n        svuint64_t max_length_v = svumax_n_u64_x(pg_inner, lengths, max_length, pg_inner);\n        svbool_t mask = svcmpeq_u64(pg_inner, max_length_v, lengths);\n        max_index = svsel_u64(max_index, svindex_u64(pg_inner, i), mask);\n        max_length = svsel_u64(max_length, max_length_v, mask);\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```cpp\nstd::string longest_simd(const std::vector<std::string> & strings){\n    if(strings.empty()) return \"None\";\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    svbool_t pg = svwhilelt_b64(0, strings.size());\n    for(size_t i = 0; svptest_first(pg); i += svcntd(), svprfw(pg, i)){\n        svbool_t pg_inner = svwhilelt_b64(0, svcntd());\n        for(size_t j = 0; svptest_first(pg_inner); j += svcntd(), svprfw(pg_inner, j)){\n            svbool_t pg_mask = svptrue_b64();\n            svbool_t pg_cmp = svwhilelt_b64(0, strings.size());\n            for(size_t k = 0; svptest_first(pg_cmp); k += svcntd(), svprfw(pg_cmp, k)){\n                svbool_t pg_cmp_inner = svcmpge_n_s64(svadd_n_s64(svindex_s64(), max_length), svindex_s64());\n                svbool_t pg_final = svand_z(pg_mask, pg_cmp_inner);\n                svbool_t pg_true = svptrue_b64();\n                svbool_t pg_max = svsel(pg_final, pg_true, svpfalse_b64());\n                svbool_t pg_str = svwhilelt_b64(0, svcntd());\n                for(size_t l = 0; svptest_first(pg_str); l += svcntd(), svprfw(pg_str, l)){\n                    svbool_t pg_str_inner = svcmpne_n_u64(svld1uw_u64(pg_final, &strings[k + l].size()), 0);\n                    pg_max = svand_z(pg_max, pg_str_inner);\n                }\n                if(svptest_any(pg_max)){\n                    max_length = strings[k].size();\n                    max_index = k;\n                }\n            }\n        }\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```cpp\nstd::string longest_simd(const std::vector<std::string> & strings){\n    if(strings.empty()) return \"None\";\n\n    size_t max_length = 0;\n    size_t max_index = 0;\n\n    svbool_t pg = svptrue_b8();\n    for(size_t i = 0; i < strings.size(); i += svcntw()){\n        svbool_t pg_next = svwhilelt_b8(i, strings.size());\n        svuint64_t lengths = svindex_s8(pg_next, i);\n        svbool_t pg_mask = svcmpgt_n_u64(pg_next, strings.size(), i);\n        svbool_t pg_active = svwhilelt_b8(i, strings.size());\n\n        svbool_t pg_match = svcmpeq_n_u64(pg_active, lengths, max_length);\n        svbool_t pg_update = svcmpgt_n_u64(pg_active, lengths, max_length);\n\n        for(size_t j = 0; j < svcntw(); ++j){\n            if(svptest_first(pg_match, j)){\n                max_index = i + j;\n                break;\n            }\n            if(svptest_first(pg_update, j)){\n                max_length = svuint64_index(lengths, j);\n                max_index = i + j;\n            }\n        }\n    }\n\n    return strings[max_index];\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b){\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n    \n    while (a != b) {\n        svbool_t p = svcmpgt_n_u64(pg, a, b);\n        a = svsel_u64(p, a - b, a);\n        b = svsel_u64(p, b, b - a);\n    }\n    \n    return a;\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b){\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n    \n    while (a != b) {\n        svbool_t p = svcmpgt_n_u64(pg, a, b);\n        a = svsel_u64(p, a - b, a);\n        b = svsel_u64(p, b, b - a);\n    }\n    \n    return a;\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b){\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n    \n    while (a != b) {\n        svbool_t p = svcmpgt_n_u64(pg, a, b);\n        a = svsel_u64(p, a - b, a);\n        b = svsel_u64(p, b, b - a);\n    }\n    \n    return a;\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b){\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n    \n    while (a != b) {\n        svbool_t p = svcmpgt_n_u64(pg, a, b);\n        a = svsel_u64(p, a - b, a);\n        b = svsel_u64(p, b, b - a);\n    }\n    \n    return a;\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b){\n    svbool_t pg = svptrue_b64();\n    svuint64_t va = svdup_n_u64(a);\n    svuint64_t vb = svdup_n_u64(b);\n    \n    while (a != b) {\n        svbool_t p = svcmpgt_n_u64(pg, a, b);\n        a = svsel_u64(p, a - b, a);\n        b = svsel_u64(p, b, b - a);\n    }\n    \n    return a;\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers){\n    size_t n = numbers.size();\n    svbool_t pg = svptrue_b32();\n    svfloat32_t closest_diff = svdup_f32(FLT_MAX);\n    svfloat32_t closest_num1 = svdup_f32(0.0f);\n    svfloat32_t closest_num2 = svdup_f32(0.0f);\n\n    for(size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t num1 = svld1(pg, &numbers[i]);\n        svfloat32_t num2 = svld1(pg, &numbers[i + svcntw()]);\n\n        svfloat32_t diff = svabs_f32(svsub_f32(num1, num2));\n        svbool_t mask = svcmplt_f32(diff, closest_diff);\n\n        closest_diff = svsel(mask, diff, closest_diff);\n        closest_num1 = svsel(mask, num1, closest_num1);\n        closest_num2 = svsel(mask, num2, closest_num2);\n    }\n\n    float closest[2];\n    svst1(pg, closest, closest_num1);\n    svst1(pg, closest + 1, closest_num2);\n\n    return {closest[0], closest[1]};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers){\n    size_t n = numbers.size();\n    svbool_t pg = svptrue_b32();\n    svfloat32_t closest_diff = svdup_f32(FLT_MAX);\n    svfloat32_t closest_a = svdup_f32(0.0);\n    svfloat32_t closest_b = svdup_f32(0.0);\n\n    for(size_t i = 0; i < n-1; i++){\n        svfloat32_t a = svld1(pg, &numbers[i]);\n        for(size_t j = i+1; j < n; j++){\n            svfloat32_t b = svld1(pg, &numbers[j]);\n            svfloat32_t diff = svabs_f32(svsub_f32(a, b));\n            svbool_t mask = svcmplt_f32(diff, closest_diff);\n            closest_diff = svsel(mask, diff, closest_diff);\n            closest_a = svsel(mask, a, closest_a);\n            closest_b = svsel(mask, b, closest_b);\n        }\n    }\n\n    std::vector<float> result = {svget1(closest_a, 0), svget1(closest_b, 0)};\n    return result;\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers){\n    size_t n = numbers.size();\n    svbool_t pg = svptrue_b32();\n    svfloat32_t closest_diff = svdup_f32(FLT_MAX);\n    svfloat32_t closest_num1 = svdup_f32(0.0);\n    svfloat32_t closest_num2 = svdup_f32(0.0);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t num1 = svld1(pg, &numbers[i]);\n        svfloat32_t num2 = svld1(pg, &numbers[i + svcntw()]);\n\n        svfloat32_t diff = svabs_f32(svsub_f32(num1, num2));\n        svbool_t mask = svcmplt_f32(diff, closest_diff);\n\n        closest_diff = svsel(mask, diff, closest_diff);\n        closest_num1 = svsel(mask, num1, closest_num1);\n        closest_num2 = svsel(mask, num2, closest_num2);\n    }\n\n    float closest_num1_scalar = svget1(closest_num1, 0);\n    float closest_num2_scalar = svget1(closest_num2, 0);\n\n    return {closest_num1_scalar, closest_num2_scalar};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers){\n    size_t n = numbers.size();\n    size_t num_vectors = svcntw(); // Get the number of elements that can be processed in parallel\n    size_t num_chunks = (n + num_vectors - 1) / num_vectors;\n    \n    svbool_t pg = svptrue_b32();\n    svfloat32_t closest_diff = svdup_f32(FLT_MAX);\n    svfloat32_t closest_num1 = svdup_f32(0.0);\n    svfloat32_t closest_num2 = svdup_f32(0.0);\n    \n    for (size_t i = 0; i < num_chunks; ++i) {\n        size_t chunk_start = i * num_vectors;\n        size_t chunk_end = (chunk_start + num_vectors) < n ? (chunk_start + num_vectors) : n;\n        \n        svfloat32_t chunk_nums = svld1(pg, &numbers[chunk_start]);\n        \n        for (size_t j = chunk_start + 1; j < chunk_end; ++j) {\n            svfloat32_t diff = svabs_f32(svsub_f32(chunk_nums, svdup_n_f32(numbers[j], pg)));\n            svbool_t cmp_mask = svcmplt_f32(diff, closest_diff);\n            closest_diff = svsel_f32(cmp_mask, diff, closest_diff);\n            closest_num1 = svsel_f32(cmp_mask, chunk_nums, closest_num1);\n            closest_num2 = svsel_f32(cmp_mask, svdup_n_f32(numbers[j], pg), closest_num2);\n        }\n    }\n    \n    std::vector<float> result = {svget1(closest_num1, 0), svget1(closest_num2, 0)};\n    return result;\n}\n```  "}
{"task_id": "SimdBench_71_SVE", "completion": "```cpp\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers){\n    size_t n = numbers.size();\n    svbool_t pg = svptrue_b32();\n    svfloat32_t closest_diff = svdup_f32(FLT_MAX);\n    svfloat32_t closest_a = svdup_f32(0.0);\n    svfloat32_t closest_b = svdup_f32(0.0);\n\n    for(size_t i = 0; i < n-1; i += svcntw()) {\n        svfloat32_t a = svld1(pg, &numbers[i]);\n        svfloat32_t b = svld1(pg, &numbers[i+1]);\n        svfloat32_t diff = svabdf_f32_z(pg, a, b);\n        svbool_t mask = svcmplt_f32_z(svcmpgt_f32_z(pg, diff, closest_diff), diff, closest_diff);\n        closest_diff = svsel_f32(mask, diff, closest_diff);\n        closest_a = svsel_f32(mask, a, closest_a);\n        closest_b = svsel_f32(mask, b, closest_b);\n    }\n\n    float closest_a_scalar, closest_b_scalar;\n    svst1(pg, &closest_a_scalar, closest_a);\n    svst1(pg, &closest_b_scalar, closest_b);\n\n    return {closest_a_scalar, closest_b_scalar};\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers){\n    size_t size = numbers.size();\n    size_t num_vectors = (size + svcntw() - 1) / svcntw();\n    std::vector<float> result(size);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * svcntw(), size);\n\n        svfloat32_t input = svld1(pg, &numbers[i * svcntw()]);\n        float min_val = svminv(pg, input);\n        float max_val = svmaxv(pg, input);\n\n        svfloat32_t scaled = svsub_z(pg, input, svdup_n_f32(min_val));\n        scaled = svdiv_z(pg, scaled, svdup_n_f32(max_val - min_val));\n\n        svst1(pg, &result[i * svcntw()], scaled);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b32(0, size);\n    \n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    \n    for (size_t i = 1; i < size; i++) {\n        min_val = std::min(min_val, numbers[i]);\n        max_val = std::max(max_val, numbers[i]);\n    }\n    \n    float scale = 1.0 / (max_val - min_val);\n    float offset = -min_val * scale;\n    \n    svfloat32_t sve_scale = svdup_f32(scale);\n    svfloat32_t sve_offset = svdup_f32(offset);\n    \n    svfloat32_t *input_ptr = (svfloat32_t*)numbers.data();\n    svfloat32_t *output_ptr = (svfloat32_t*)malloc(size * sizeof(svfloat32_t));\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t input = svld1(pg, &input_ptr[i]);\n        svfloat32_t rescaled = svmul_n_f32_z(pg, svadd_n_f32_z(pg, input, sve_offset), sve_scale);\n        svst1(pg, &output_ptr[i], rescaled);\n    }\n    \n    std::vector<float> result(size);\n    svbool_t pg_all = svptrue_b32();\n    svfloat32_t *result_ptr = (svfloat32_t*)result.data();\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t output = svld1(pg_all, &output_ptr[i]);\n        svst1(pg_all, &result_ptr[i], output);\n    }\n    \n    free(output_ptr);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b32(0, size);\n    \n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    for (size_t i = 1; i < size; i++) {\n        min_val = std::min(min_val, numbers[i]);\n        max_val = std::max(max_val, numbers[i]);\n    }\n    \n    float scale = 1.0 / (max_val - min_val);\n    float offset = -min_val * scale;\n    \n    svfloat32_t sve_scale = svdup_f32(scale);\n    svfloat32_t sve_offset = svdup_f32(offset);\n    \n    svfloat32_t *input_ptr = (svfloat32_t*)numbers.data();\n    svfloat32_t *output_ptr = (svfloat32_t*)malloc(size * sizeof(svfloat32_t));\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t input = svld1(pg, &input_ptr[i]);\n        svfloat32_t rescaled = svmul_f32_z(pg, svadd_f32_z(pg, input, sve_offset), sve_scale);\n        svst1(pg, &output_ptr[i], rescaled);\n    }\n    \n    std::vector<float> result(size);\n    svfloat32_t *result_ptr = (svfloat32_t*)output_ptr;\n    for (size_t i = 0; i < size; i++) {\n        result[i] = svget1_f32(result_ptr, i);\n    }\n    \n    free(output_ptr);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers){\n    size_t size = numbers.size();\n    size_t num_vectors = (size + svcntw() - 1) / svcntw();\n    std::vector<float> result(size);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * svcntw(), size);\n\n        svfloat32_t input = svld1(pg, &numbers[i * svcntw()]);\n        float min_val = svminv(pg, input);\n        float max_val = svmaxv(pg, input);\n\n        svfloat32_t scaled = svsub_z(pg, input, svdup_n_f32(min_val));\n        scaled = svdiv_z(pg, scaled, svdup_n_f32(max_val - min_val));\n        \n        svst1(pg, &result[i * svcntw()], scaled);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers){\n    size_t size = numbers.size();\n    svbool_t pg = svwhilelt_b32(0, size);\n    \n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    for (size_t i = 1; i < size; i++) {\n        min_val = std::min(min_val, numbers[i]);\n        max_val = std::max(max_val, numbers[i]);\n    }\n    \n    float scale = 1.0 / (max_val - min_val);\n    float offset = -min_val * scale;\n    \n    svfloat32_t scale_sve = svdup_f32(scale);\n    svfloat32_t offset_sve = svdup_f32(offset);\n    \n    svfloat32_t* numbers_ptr = (svfloat32_t*)numbers.data();\n    svfloat32_t* result_ptr = (svfloat32_t*)malloc(size * sizeof(svfloat32_t));\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t input = svld1(pg, &numbers_ptr[i]);\n        svfloat32_t rescaled = svmul_n_f32_z(pg, svadd_n_f32_z(pg, input, offset_sve), scale_sve, 1);\n        svst1(pg, &result_ptr[i], rescaled);\n    }\n    \n    std::vector<float> result(size);\n    svfloat32_t* result_ptr_float = (svfloat32_t*)result.data();\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t output = svld1(pg, &result_ptr[i]);\n        svst1(pg, &result_ptr_float[i], output);\n    }\n    \n    free(result_ptr);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input = svdup_n_u64(n);\n    svuint64_t divisors = svindex_u64(1, 1);\n    svuint64_t mask = svcmpeq_n_u64(divisors, 0);\n\n    svuint64_t result = svwhilelt_b64_u64(divisors, input);\n    result = svsel_u64(mask, result, svld1_u64(pg, &divisors));\n\n    svuint64_t max_divisor = svlasta_u64(pg, result, 1);\n    return svcntd(max_divisor) - 1;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n){\n    svbool_t pg = svwhilelt_b64_u64(1, n);\n    svuint64_t input = svdup_n_u64(n);\n    svuint64_t divisors = svindex_u64(1, 1);\n    svuint64_t result = svwhilelt_u64_z(pg, divisors, input);\n    return svget_u64(result, svindex_first_u64(result));\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input = svdup_n_u64(n);\n    svuint64_t divisors = svindex_u64(1, 1);\n    svuint64_t mask = svcmpge_n_u64(divisors, n);\n    svuint64_t result = svsel_u64(mask, svdup_n_u64(0), svsel_u64(svcmpeq_n_u64(svtrn1_u64(divisors, divisors), input, divisors), divisors, svdup_n_u64(0)));\n    return svmaxv_u64(pg, result);\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n){\n    svbool_t pg = svwhilelt_b64_u64(n-1, n);\n    svuint64_t input = svdup_n_u64(n);\n    svuint64_t divisors = svindex_u64(0, 1);\n    svuint64_t result = svsel_u64_z(pg, svdiv_n_u64(input, 1), divisors);\n    return svmaxv_u64(pg, result);\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\nuint64_t largest_divisor_simd(uint64_t n){\n    svbool_t pg = svwhilelt_b64_u64(1, n);\n    svuint64_t input = svdup_n_u64(n);\n    svuint64_t divisors = svindex_u64(1, 1);\n    svuint64_t result = svsel_u64(svdiv_n_u64(input, 1), svsel_u64(svdiv_n_u64(input, 1), svsel_u64(svdiv_n_u64(input, 2), svdiv_n_u64(input, 2)), svcmpne_n_u64(svdiv_n_u64(input, 2), 1)), svcmpne_n_u64(svdiv_n_u64(input, 1), 1));\n    svuint64_t mask = svcmpgt_n_u64(result, n);\n    svuint64_t masked_result = svsel_u64(svsub_n_u64(result, 1), result, mask);\n    svuint64_t max_divisor = svsel_u64(svmax_u64(masked_result, divisors), divisors, pg);\n    return svaddv_u64_z(pg, max_divisor);\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```cpp\nstd::vector<int> factorize_simd(int n){\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b32();\n    int factor = 2;\n    while (n > 1 && factor <= n) {\n        if (n % factor == 0) {\n            int count = 0;\n            while (n % factor == 0) {\n                n /= factor;\n                count++;\n            }\n            for (int i = 0; i < count; i++) {\n                factors.push_back(factor);\n            }\n        }\n        factor++;\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```cpp\nstd::vector<int> factorize_simd(int n){\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b32();\n    int factor = 2;\n    while (n > 1 && factor <= n) {\n        if (n % factor == 0) {\n            int count = 0;\n            while (n % factor == 0) {\n                n /= factor;\n                count++;\n            }\n            for (int i = 0; i < count; i++) {\n                factors.push_back(factor);\n            }\n        }\n        factor++;\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```cpp\nstd::vector<int> factorize_simd(int n){\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b32();\n    int factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            factors.push_back(factor);\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    svbool_t allActive = svwhilelt_b32(0, factors.size());\n    svbool_t pgu = svwhilelt_b32(0, factors.size());\n    svuint32_t indices = svindex_u32(0, 1);\n    svuint32_t values = svld1(pg, &factors[0]);\n    svbool_t matches = svcmpeq(pg, values, svdup_n_u32(factor));\n    svst1(pgu, &factors[0], svsel(pgu, values, svindex_u32(0, 1), matches));\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```cpp\nstd::vector<int> factorize_simd(int n){\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b32();\n    int factor = 2;\n    while (n > 1 && factor <= n) {\n        if (n % factor == 0) {\n            int count = 0;\n            while (n % factor == 0) {\n                n /= factor;\n                count++;\n            }\n            for (int i = 0; i < count; i++) {\n                factors.push_back(factor);\n            }\n        }\n        factor++;\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::vector<int> factorize_simd(int n){\n    std::vector<int> factors;\n    svbool_t pg = svptrue_b32();\n    int factor = 2;\n    while (n > 1 && factor <= n) {\n        if (n % factor == 0) {\n            factors.push_back(factor);\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    \n    svbool_t pg_all = svwhilelt_b32(0, factors.size());\n    svuint32_t indices = svindex_u32(0, 1);\n    svuint32_t result = svld1(pg_all, &factors[0]);\n    svst1(pg_all, &factors[0], svadd_u32_z(pg_all, result, indices));\n    \n    return factors;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```cpp\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    for(size_t i=0; i<size; i+=svptrue_patcount()){\n        svfloat32_t vec = svld1(pg, &l[i]);\n        svbool_t mask = svcmpgt_f32(pg, vec, 0);\n        svfloat32_t filtered = svsel_f32(mask, vec, svdup_n_f32(0));\n        svst1(pg, &result[i], filtered);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```cpp\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    svbool_t pg = svptrue_b32();\n    size_t size = l.size();\n    for(size_t i=0; i<size; i+=svptrue_pat32()){\n        svfloat32_t vec = svld1(pg, &l[i]);\n        svbool_t pg_positive = svcmpgt(pg, vec, svdup_n_f32(0.0f));\n        svfloat32_t result_vec = svsel(pg_positive, vec, svdup_n_f32(0.0f));\n        svst1(pg, &result[i], result_vec);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```cpp\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    for(size_t i = 0; i < size; i += svcntw()) {\n        svfloat32x_t vec = svld1(pg, &l[i]);\n        svbool_t pg_mask = svcmpgt_f32(pg, vec, svdup_n_f32(0));\n        svfloat32x_t result_vec = svsel(pg_mask, vec, svdup_n_f32(0));\n        svst1(pg, &result[i], result_vec);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```cpp\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    for(size_t i=0; i<size; i+=svptrue_patcount()){\n        svfloat32_t vec = svld1(pg, &l[i]);\n        svbool_t mask = svcmpgt_f32(pg, vec, 0);\n        svfloat32_t result_vec = svsel_f32(mask, vec, svdup_n_f32(0));\n        svst1(pg, &result[i], result_vec);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```cpp\nstd::vector<float> get_positive_simd(const std::vector<float> & l){\n    std::vector<float> result;\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    for(size_t i=0; i<size; i+=svptrue_patcount()){\n        svfloat32_t vec = svld1(pg, &l[i]);\n        svbool_t pred = svcmpgt(pg, vec, svdup_n_f32(0.0f));\n        svfloat32_t res = svsel(pred, vec, svdup_n_f32(0.0f));\n        svst1(pg, &result[i], res);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool is_prime_simd(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t input = svdup_s64(n);\n    \n    if (n == 2) {\n        return true;\n    }\n    \n    if (n % 2 == 0) {\n        return false;\n    }\n    \n    svint64_t divisors = svindex_s64(2, 1);\n    svbool_t all_primes = svdup_n_b64(true);\n    \n    while (svptest_any(all_primes)) {\n        svint64_t mask = svcmpeq_s64(pg, svindex_s64(0, 1), svdup_s64(0));\n        svbool_t prime_mask = svwhilelt_b64_s64(pg, svindex_s64(0, 1));\n        svint64_t current_divisor = svsel_s64(mask, svdup_s64(2), divisors);\n        \n        svbool_t divisible = svcmpeq_n_s64(pg, svindex_s64(0, 1), svdup_s64(0));\n        svbool_t not_done = svtest_any(all_primes);\n        \n        svbool_t is_prime = svand_z(pg, not_done, svnot_z(divisible));\n        all_primes = svand_z(all_primes, is_prime, svcmpne_n_s64(prime_mask, current_divisor, svdup_s64(0)));\n        \n        divisors = svadd_s64_z(pg, divisors, svdup_s64(1));\n    }\n    \n    svbool_t result_mask = svcmpeq_n_s64(pg, svindex_s64(0, 1), svdup_s64(1));\n    return svptest_first(result_mask);\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool is_prime_simd(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t sv_n = svdup_s64(n);\n    svint64_t sv_i = svindex_s64(2, 1);\n    svbool_t prime_mask = svwhilelt_b64(sv_i, sv_n);\n    \n    while (svptest_any(prime_mask)) {\n        svint64_t sv_mod = svmul_n_s64_z(prime_mask, sv_n, sv_i, pg);\n        svbool_t divisible_mask = svcmpeq_n_s64(sv_mod, 0, pg);\n        if (svptest_any(divisible_mask)) {\n            return false;\n        }\n        sv_i = svadd_n_s64_z(prime_mask, sv_i, 1, pg);\n        prime_mask = svwhilelt_b64(sv_i, sv_n);\n    }\n    \n    return true;\n}\n```  "}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool is_prime_simd(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t divisor = svindex_s64(2, 1);\n    svint64_t limit = svdup_s64(n);\n    svbool_t prime_mask = svcmpeq_n_s64(pg, n, 2);\n    \n    while (svptest_any(svptrue_b64(), prime_mask)) {\n        svint64_t remainder = svmul_n_s64_z(prime_mask, svdiv_n_s64_z(prime_mask, limit, svtrue_b64()), 2);\n        svbool_t divisible = svcmpeq_n_s64(prime_mask, n, 2);\n        if (svptest_any(svptrue_b64(), divisible)) {\n            return false;\n        }\n        prime_mask = svwhilelt_b64(prime_mask, remainder);\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool is_prime_simd(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t num = svdup_s64(n);\n    svint64_t div = svindex_s64(2, 1);\n    svbool_t prime = svdup_n_b64(true);\n    \n    svwhilelt_b64(num, svdup_s64(4)) {\n        prime = svand_z(pg, prime, svcmpeq_n_s64(num, svdup_s64(2)));\n        prime = svand_z(pg, prime, svcmpeq_n_s64(num, svdup_s64(3)));\n    }\n    \n    svint64_t sqrt_n = svsqrt_s64_z(pg, num);\n    svwhilelt_b64(div, sqrt_n) {\n        svbool_t divisible = svcmpeq_n_s64_z(pg, svindex_s64(0, 1), svindex_s64(0, 1));\n        svbool_t not_prime = svcmpeq_n_s64_z(pg, num, svindex_s64(0, 1));\n        prime = svand_z(pg, prime, svnot_z(svorr_z(pg, divisible, not_prime)));\n        div = svadd_s64_z(pg, div, svindex_s64(1, 1));\n    }\n    \n    return svptest_any(svptrue_b64(), prime);\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool is_prime_simd(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t divisor = svindex_s64(2, 1);\n    svint64_t limit = svdup_n_s64(n);\n    svbool_t all_primes = svwhilelt_b64_s64(divisor, limit);\n    \n    while (svptest_any(all_primes)) {\n        svint64_t remainder = svdiv_n_s64_z(all_primes, n, svld1_s64(pg, &divisor));\n        svbool_t is_divisible = svcmpeq_n_s64(remainder, 0);\n        if (svptest_any(is_divisible)) {\n            return false;\n        }\n        divisor = svadd_s64_z(pg, divisor, svindex_s64(1, 1));\n        all_primes = svwhilelt_b64_s64(divisor, limit);\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```\nstd::string solve_simd(const std::string & s){\n    size_t size = s.size();\n    size_t numLanes = svcntb();\n    size_t fullLanes = size / numLanes * numLanes;\n    \n    svbool_t pg = svwhilelt_b8(0, size);\n    \n    for (size_t i = 0; i < fullLanes; i += numLanes) {\n        svuint8_t input = svld1(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t isLetter = svdup_n_u8(0x1F);\n        svuint8_t isNotLetter = svdup_n_u8(0x60);\n        svuint8_t mask = svand_z(pg, svcmpge_n_u8(input, 'A'), svcmplt_n_u8(input, 'z'));\n        svuint8_t output = svsel(mask, svsub_z(pg, input, svsel(mask, isLetter, isNotLetter)), input);\n        svst1(pg, reinterpret_cast<uint8_t*>(&s[i]), output);\n    }\n    \n    for (size_t i = fullLanes; i < size; ++i) {\n        if (isalpha(s[i])) {\n            s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n        }\n    }\n    \n    std::reverse(s.begin(), s.end());\n    \n    return s;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```\nstd::string solve_simd(const std::string & s){\n    std::string result = s;\n    size_t size = s.size();\n    svbool_t pg = svwhilelt_b8(size, size);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t is_letter = svdup_n_u8(0);\n        svbool_t letter_mask = svcmpge_n_u8(input, 'A') && svcmplt_n_u8(input, 'z');\n        is_letter = svsel_u8(letter_mask, svdup_n_u8(1), is_letter);\n\n        svuint8_t upper_mask = svdup_n_u8('A' - 'a');\n        svuint8_t case_mask = svsel_u8(svcmpge_n_u8(input, 'a') && svcmplt_n_u8(input, 'z'), upper_mask, svdup_n_u8(0));\n        svuint8_t result_vec = svsel_u8(is_letter, svsub_u8(input, case_mask), input);\n\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), result_vec);\n    }\n\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```\nstd::string solve_simd(const std::string & s){\n    size_t size = s.size();\n    std::string result(size, ' ');\n\n    svbool_t pg = svptrue_b8();\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t is_letter = svdup_n_u8(0);\n        svbool_t letter_mask = svcmpge_n_u8_z(pg, input, 'a') && svcmplt_n_u8_z(pg, input, 'z');\n        is_letter = svsel_u8(letter_mask, svdup_n_u8(1), is_letter);\n        letter_mask = svcmpge_n_u8_z(pg, input, 'A') && svcmplt_n_u8_z(pg, input, 'Z');\n        is_letter = svsel_u8(letter_mask, svdup_n_u8(1), is_letter);\n\n        svuint8_t case_diff = svdup_n_u8('a' - 'A');\n        svuint8_t diff = svsel_u8(is_letter, case_diff, svdup_n_u8(0));\n        svuint8_t result_char = svsub_u8_z(pg, input, diff);\n\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), result_char);\n    }\n\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```\nstd::string solve_simd(const std::string & s){\n    std::string result = s;\n    svbool_t pg = svwhilelt_b8(s.size(), svcntb());\n    \n    svuint8_t is_letter_mask = svdup_n_u8(0);\n    svuint8_t upper_case_mask = svdup_n_u8(0x5F);\n    svuint8_t lower_case_mask = svdup_n_u8(0x20);\n    \n    for (size_t i = 0; i < s.size(); i += svcntb()) {\n        svuint8_t input_chars = svld1(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t is_letter = svdup_n_u8(0);\n        \n        svbool_t is_alpha = svcmpge_n_u8(pg, input_chars, 'A') && svcmplt_n_u8(pg, input_chars, 'Z');\n        is_letter = svsel(is_alpha, svdup_n_u8(1), is_letter);\n        \n        is_alpha = svcmpge_n_u8(pg, input_chars, 'a') && svcmplt_n_u8(pg, input_chars, 'z');\n        is_letter = svsel(is_alpha, svdup_n_u8(1), is_letter);\n        \n        svuint8_t upper_case = svand(is_letter, upper_case_mask);\n        svuint8_t lower_case = svand(is_letter, lower_case_mask);\n        \n        svuint8_t result_chars = svsel(is_letter, svsel(svcmpeq(is_letter, upper_case), svsub(input_chars, upper_case_mask), svadd(input_chars, lower_case_mask)), input_chars);\n        \n        svst1(pg, reinterpret_cast<uint8_t*>(&result[i]), result_chars);\n    }\n    \n    std::reverse(result.begin(), result.end());\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```\nstd::string solve_simd(const std::string & s){\n    std::string result = s;\n    size_t size = s.size();\n    svbool_t pg = svwhilelt_b8(size, size);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t is_letter = svdup_n_u8(0);\n        svbool_t letter_mask = svcmpge_n_u8(input, 'A') && svcmplt_n_u8(input, 'Z') || svcmpge_n_u8(input, 'a') && svcmplt_n_u8(input, 'z');\n        is_letter = svsel_u8(letter_mask, svdup_n_u8(1), is_letter);\n\n        svuint8_t case_diff = svdup_n_u8('a' - 'A');\n        svuint8_t upper_mask = svcmpge_n_u8(input, 'A') && svcmplt_n_u8(input, 'Z');\n        svuint8_t lower_mask = svcmpge_n_u8(input, 'a') && svcmplt_n_u8(input, 'z');\n        svuint8_t new_input = svsel_u8(upper_mask, svsub_u8_z(pg, input, case_diff, pg), input);\n        new_input = svsel_u8(lower_mask, svadd_u8_z(pg, input, case_diff, pg), new_input);\n\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), new_input);\n    }\n\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```cpp\nstd::vector<int> sort_third_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *input_ptr = (svint32_t*)l.data();\n    svint32_t *output_ptr = (svint32_t*)malloc(size * sizeof(svint32_t));\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t input_vec = svld1(pg, &input_ptr[i]);\n        svint32_t mask = svdup_n_s32(0x80000002); // 0b10000000000000000000000000000010\n        svint32_t sorted_vec = svtrn1_s32(input_vec, input_vec);\n        svint32_t result = svsel_s32(mask, sorted_vec, input_vec);\n        svst1(pg, &output_ptr[i], result);\n    }\n\n    std::vector<int> result(size);\n    svbool_t pg_all = svwhilelt_b32(0, size);\n    svint32_t *result_ptr = (svint32_t*)result.data();\n    svst1(pg_all, result_ptr, svld1(pg_all, output_ptr));\n\n    free(output_ptr);\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```cpp\nstd::vector<int> sort_third_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *input = (svint32_t*)l.data();\n    svint32_t *output = (svint32_t*)malloc(size * sizeof(svint32_t));\n\n    for(size_t i=0; i<size; i+=svcntw()) {\n        svint32_t data = svld1(pg, &input[i]);\n        svint32_t mask = svmul_n_s32_z(pg, svindex_s32(0, 1), 3);\n        svint32_t sorted_data = svtrn1_s32(data, data);\n        svint32_t result = svsel_s32(mask, sorted_data, data);\n        svst1(pg, &output[i], result);\n    }\n\n    std::vector<int> result_vec(size);\n    svbool_t pg_all = svwhilelt_b32(0, size);\n    svint32_t *result_ptr = (svint32_t*)output;\n    for(size_t i=0; i<size; i+=svcntw()) {\n        svint32_t result = svld1(pg_all, &result_ptr[i]);\n        svst1(pg_all, &result_vec[i], result);\n    }\n\n    free(output);\n    return result_vec;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```cpp\nstd::vector<int> sort_third_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    svint32_t *ldata = (svint32_t*)l.data();\n    \n    for(size_t i=0; i<size; i+=svcntw()){\n        svint32_t data = svld1(pg, &ldata[i]);\n        svbool_t mask = svcmpeq_n_s32(pg, svmul_n_s32_z(pg, svindex_s32(0, 1), 3), 0);\n        svint32_t sorted_data = svtrn1_s32(svunpklo_s32(data, data), svunpkhi_s32(data, data));\n        svst1(pg, &ldata[i], svsel(mask, sorted_data, data));\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```cpp\nstd::vector<int> sort_third_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *data = (svint32_t*)l.data();\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1(pg, &data[i]);\n        svint32_t mask = svdup_s32(0x80000002);\n        svint32_t sorted = svtrn1_s32(vec, vec);\n        svint32_t result = svsel_s32(mask, sorted, vec);\n        svst1(pg, &data[i], result);\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```cpp\nstd::vector<int> sort_third_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    \n    svint32_t *input = (svint32_t*)l.data();\n    svint32_t *output = (svint32_t*)malloc(size * sizeof(svint32_t));\n\n    for(size_t i=0; i<size; i+=svcntw()){\n        svint32_t vec_l = svld1(pg, &input[i]);\n        svint32_t mask = svdup_s32(0xFFFFFFFF);\n        svint32_t mask_divisible_by_three = svindex_s32(0, 3);\n        svint32_t is_divisible_by_three = svmul_n_s32_z(pg, vec_l, mask_divisible_by_three, 1);\n        svint32_t sorted_divisible_by_three = svtrn1_s32(is_divisible_by_three, is_divisible_by_three);\n        svint32_t result = svsel(is_divisible_by_three, sorted_divisible_by_three, vec_l);\n        svst1(pg, &output[i], result);\n    }\n\n    std::vector<int> result_vector(size);\n    svbool_t pg_all = svptrue_b32();\n    svint32_t *result_ptr = (svint32_t*)output;\n    for(size_t i=0; i<size; i+=svcntw()){\n        svint32_t vec_result = svld1(pg_all, &result_ptr[i]);\n        svst1(pg_all, &result_vector[i], vec_result);\n    }\n\n    free(output);\n    return result_vector;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```cpp\nfloat max_element_simd(std::vector<float> l){\n    size_t size = l.size();\n    size_t vl = svcntw(); // Get the vector length\n    size_t full_chunks = size / vl;\n    size_t remainder = size % vl;\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t max_val = svdup_f32(-__FLT_MAX__);\n\n    for (size_t i = 0; i < full_chunks; i++) {\n        svfloat32_t vec = svld1(pg, &l[i * vl]);\n        max_val = svmax_f32_x(pg, max_val, vec);\n    }\n\n    if (remainder > 0) {\n        svfloat32_t tail = svld1(pg, &l[full_chunks * vl]);\n        svbool_t pg_tail = svwhilelt_b32(0, remainder);\n        max_val = svmax_f32_x(pg_tail, max_val, tail);\n    }\n\n    float result;\n    svst1(pg, &result, max_val);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```cpp\nfloat max_element_simd(std::vector<float> l){\n    size_t size = l.size();\n    size_t vl = svcntw(); // Get the vector length\n    size_t num_vectors = (size + vl - 1) / vl;\n    \n    svbool_t pg = svwhilelt_b32(0, size);\n    svfloat32_t max_val = svdup_f32(-__builtin_inff());\n    \n    for(size_t i=0; i<num_vectors; i++){\n        size_t start = i * vl;\n        size_t end = (start + vl) > size ? size : (start + vl);\n        \n        svfloat32_t vec = svld1(pg, &l[start]);\n        max_val = svmax_f32_x(pg, max_val, vec);\n    }\n    \n    float result;\n    svst1(pg, &result, max_val);\n    \n    return result;\n}\n```  "}
{"task_id": "SimdBench_79_SVE", "completion": "```cpp\nfloat max_element_simd(std::vector<float> l){\n    size_t size = l.size();\n    size_t vl = svcntw(); // Get the maximum size of the vector length\n    size_t full_chunks = size / vl;\n    size_t remainder = size % vl;\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t max_val = svdup_f32(-__FLT_MAX__);\n\n    for (size_t i = 0; i < full_chunks; i++) {\n        svfloat32_t chunk = svld1(pg, &l[i * vl]);\n        max_val = svmax_f32(max_val, chunk);\n    }\n\n    if (remainder > 0) {\n        svfloat32_t tail = svld1(pg, &l[full_chunks * vl]);\n        svbool_t pg_tail = svwhilelt_b32(0, remainder);\n        max_val = svmax_f32(max_val, svsel(pg_tail, tail, svdup_f32(-__FLT_MAX__)));\n    }\n\n    float result;\n    svst1(pg, &result, max_val);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```cpp\nfloat max_element_simd(std::vector<float> l){\n    size_t size = l.size();\n    size_t vl = svcntw(); // Get the maximum size of vector length\n    size_t full_chunks = size / vl;\n    size_t remaining_elements = size % vl;\n    \n    svbool_t pg = svptrue_b32();\n    svfloat32_t max_val = svdup_f32(-__FLT_MAX__);\n    \n    for(size_t i = 0; i < full_chunks; i++){\n        svfloat32_t chunk = svld1(pg, &l[i * vl]);\n        max_val = svmax_f32_x(pg, max_val, chunk);\n    }\n    \n    if(remaining_elements > 0){\n        svfloat32_t remaining_chunk = svld1(pg, &l[full_chunks * vl]);\n        svbool_t pg_rem = svwhilelt_b32(0, remaining_elements);\n        max_val = svmax_f32_x(pg_rem, max_val, remaining_chunk);\n    }\n    \n    float result;\n    svst1(pg, &result, max_val);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```cpp\nfloat max_element_simd(std::vector<float> l){\n    size_t size = l.size();\n    size_t num_lanes = svcntw(); \n    size_t num_vectors = (size + num_lanes - 1) / num_lanes;\n    \n    svbool_t pg = svwhilelt_b32(0, size);\n    svfloat32_t max_val = svdup_f32(-__FLT_MAX__);\n    \n    for (size_t i = 0; i < num_vectors; i++) {\n        size_t start = i * num_lanes;\n        size_t end = (start + num_lanes) < size ? (start + num_lanes) : size;\n        \n        svfloat32_t vec = svld1(pg, &l[start]);\n        max_val = svmax_f32_x(pg, max_val, vec);\n    }\n    \n    float result;\n    svst1(pg, &result, max_val);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n){\n    svbool_t pg = svptrue_b8();\n    svuint64_t count = svdup_n_u64(0);\n    \n    for (int i = 0; i < n; i += svcntd()) {\n        svuint64_t indices = svindex_u64(i, 1);\n        svuint64_t values = svadd_n_u64_z(pg, indices, 7);\n        \n        svbool_t cond1 = svcmpeq_n_u64(values, 7);\n        svbool_t cond2 = svcmpeq_n_u64(values, 17);\n        svbool_t cond3 = svcmpeq_n_u64(values, 27);\n        \n        svbool_t cond = svorr_z(pg, cond1, cond2, cond3);\n        \n        count = svsel(count, svadd_z(pg, count, svcnt_true(cond)), cond);\n    }\n    \n    uint64_t result;\n    svst1_u64(pg, &result, count);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\nint fizz_buzz_simd(int n){\n    svbool_t pg = svptrue_b8();\n    svuint64_t count = svdup_n_u64(0);\n    \n    for (int i = 0; i < n; i += svcntd()) {\n        svuint64_t indices = svindex_u64(i, 1);\n        svuint64_t values = svadd_n_u64_z(pg, indices, 1);\n        \n        svbool_t cond1 = svcge_n_u64_b8(values, n);\n        svbool_t cond2 = svorr_z(pg, svdiv_n_u64_z(pg, values, 11), svdiv_n_u64_z(pg, values, 13));\n        svbool_t cond = svand_z(pg, svnot_z(pg, cond1), cond2);\n        \n        svuint64_t result = svsel_u64(cond, svdup_n_u64(1), svdup_n_u64(0));\n        count = svadd_u64_z(pg, count, result);\n    }\n    \n    uint64_t total_count = svaddv_u64(pg, count);\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n){\n    svbool_t pg = svwhilelt_b32(n, svcntw());\n    svuint64_t count = svdup_u64(0);\n    \n    for (int i = 0; i < n; i += svcntw()) {\n        svuint64_t indices = svindex_u64(i, 1);\n        svuint64_t values = svadd_u64_z(pg, indices, svdup_n_u64(1));\n        \n        svbool_t cond_7 = svcmpeq_n_u64(values % 10, 7);\n        svbool_t cond_11 = svcmpeq_n_u64(values % 11, 0);\n        svbool_t cond_13 = svcmpeq_n_u64(values % 13, 0);\n        \n        svbool_t cond = svorr_z(pg, cond_11, cond_13);\n        svuint64_t selected = svsel_u64(cond, svdup_n_u64(1), svdup_n_u64(0));\n        \n        count = svadd_u64_z(pg, count, selected);\n    }\n    \n    uint64_t result = svaddv_u64(svptrue_b64(), count);\n    return (int)result;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\nint fizz_buzz_simd(int n){\n    svbool_t pg = svptrue_b8();\n    svuint64_t count = svdup_n_u64(0);\n    \n    for (int i = 0; i < n; i += svcntd()) {\n        svuint64_t indices = svindex_u64(i, 1);\n        svuint64_t values = svadd_n_u64_z(pg, indices, 7);\n        \n        svbool_t cond1 = svcmpeq_n_u64(values, 7);\n        svbool_t cond2 = svcmpeq_n_u64(values, 17);\n        svbool_t cond3 = svcmpeq_n_u64(values, 27);\n        \n        svbool_t cond = svorr_b_z(pg, cond1, cond2);\n        cond = svorr_b_z(cond, cond, cond3);\n        \n        count = svsel_u64(count, svadd_n_u64_z(pg, count, 1), cond);\n    }\n    \n    uint64_t result = svaddv_u64(pg, count);\n    return (int)result;\n}\n```  "}
{"task_id": "SimdBench_80_SVE", "completion": "```c\nint fizz_buzz_simd(int n){\n    svbool_t pg = svptrue_b8();\n    svuint64_t count = svdup_u64(0);\n    \n    for (int i = 0; i < n; i += svcntd()) {\n        svuint64_t indices = svindex_u64(i, 1);\n        svuint64_t values = svadd_u64_z(pg, indices, svdup_n_u64(1, pg));\n        svbool_t mask = svorr_b_z(pg, svdiv_n_u64_z(pg, values, 11, 0), svdiv_n_u64_z(pg, values, 13, 0));\n        svuint64_t sevens = svmul_n_u64_z(pg, svsel_u64(mask, svdup_n_u64(1, pg), svdup_n_u64(0, pg)), 7);\n        count = svadd_u64_z(pg, count, svaddv_u64_z(pg, sevens));\n    }\n    \n    return svcntd() * svaddv_u64(svptrue_b64(), count);\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```cpp\nstd::vector<float> sort_even_simd(std::vector<float> l){\n    size_t size = l.size();\n    size_t num_vectors = (size + svcntw() - 1) / svcntw();\n    std::vector<float> result(size);\n\n    for(size_t i = 0; i < num_vectors; i++){\n        svbool_t pg = svwhilelt_b32(i * svcntw(), size);\n        svfloat32_t l_vec = svld1(pg, &l[i * svcntw()]);\n\n        svfloat32_t sorted_vec = svdup_n_f32(0);\n        for(int j = 0; j < svcntw(); j += 2){\n            svfloat32_t even_values = svindex_f32(l_vec, j);\n            sorted_vec = svadd_f32(sorted_vec, svtrn1_f32(even_values, even_values));\n        }\n\n        svst1(pg, &result[i * svcntw()], sorted_vec);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```cpp\nstd::vector<float> sort_even_simd(std::vector<float> l){\n    size_t size = l.size();\n    std::vector<float> result(size);\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t *l_ptr = (svfloat32_t*)l.data();\n    svfloat32_t *result_ptr = (svfloat32_t*)result.data();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t l_vec = svld1(pg, &l_ptr[i]);\n        svfloat32_t even_indices = svindex_u32(0, 2);\n        svfloat32_t sorted_even = svtrn1_f32(l_vec, l_vec);\n        svst1(pg, &result_ptr[i], svsel(pg, l_vec, sorted_even, even_indices));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```cpp\nstd::vector<float> sort_even_simd(std::vector<float> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svfloat32_t *input_ptr = (svfloat32_t*)l.data();\n    svfloat32_t *output_ptr = (svfloat32_t*)malloc(size * sizeof(svfloat32_t));\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t input_vec = svld1(pg, &input_ptr[i]);\n        svfloat32_t even_indices = svindex_u32(0, 2);\n        svfloat32_t sorted_even = svtrn1_f32(input_vec, input_vec);\n        svst1(pg, &output_ptr[i], svsel(pg, input_vec, sorted_even, even_indices));\n    }\n\n    std::vector<float> result(size);\n    svfloat32_t *result_ptr = (svfloat32_t*)output_ptr;\n    for (size_t i = 0; i < size; i++) {\n        result[i] = svaddv(svwhilelt_b32(0, svcntw()), result_ptr);\n        result_ptr += svcntw();\n    }\n\n    free(output_ptr);\n    return result;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```cpp\nstd::vector<float> sort_even_simd(std::vector<float> l){\n    size_t size = l.size();\n    size_t num_vectors = (size + svcntw() - 1) / svcntw();\n    std::vector<float> result(size);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * svcntw(), size);\n\n        svfloat32_t l_vec = svld1(pg, &l[i * svcntw()]);\n        svfloat32_t l_even = svindex_s32(0, 2);\n        svfloat32_t l_even_sorted = svtrn1_f32(l_vec, l_vec);\n        svst1(pg, &result[i * svcntw()], svsel(pg, l_vec, l_even_sorted, l_even));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```cpp\nstd::vector<float> sort_even_simd(std::vector<float> l){\n    size_t size = l.size();\n    std::vector<float> result(size);\n\n    svbool_t pg = svptrue_b32();\n    svfloat32_t *l_ptr = (svfloat32_t*)l.data();\n    svfloat32_t *result_ptr = (svfloat32_t*)result.data();\n\n    for(size_t i=0; i<size; i+=svptrue_patcount()){\n        svfloat32_t vec_l = svld1(pg, &l_ptr[i]);\n        svfloat32_t vec_sorted = svtrn1_f32(vec_l, vec_l);\n        svst1(pg, &result_ptr[i], vec_sorted);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```cpp\nbool triples_sum_to_zero_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *data = (svint32_t*) l.data();\n\n    for (size_t i = 0; i < size - 2; ++i) {\n        svint32_t a = svld1(pg, &data[i]);\n        for (size_t j = i + 1; j < size - 1; ++j) {\n            svint32_t b = svld1(pg, &data[j]);\n            for (size_t k = j + 1; k < size; ++k) {\n                svint32_t c = svld1(pg, &data[k]);\n                svint32_t sum = svadd_x(pg, svadd_x(pg, a, b), c);\n                uint32_t mask = svtest_all(sveq_n_s32_x(pg, sum, 0));\n                if (mask) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```cpp\nbool triples_sum_to_zero_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *data = (svint32_t*)l.data();\n\n    for (size_t i = 0; i < size - 2; ++i) {\n        svint32_t a = svld1(pg, &data[i]);\n        for (size_t j = i + 1; j < size - 1; ++j) {\n            svint32_t b = svld1(pg, &data[j]);\n            for (size_t k = j + 1; k < size; ++k) {\n                svint32_t c = svld1(pg, &data[k]);\n                svint32_t sum = svadd_x(pg, svadd_x(pg, a, b), c);\n                svbool_t pred = svcmpeq_n_s32(pg, sum, 0);\n                if (svptest_any(svptrue_b32(), pred)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```cpp\nbool triples_sum_to_zero_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *data = (svint32_t*)l.data();\n\n    for (size_t i = 0; i < size - 2; ++i) {\n        svint32_t a = svld1(pg, &data[i]);\n        for (size_t j = i + 1; j < size - 1; ++j) {\n            svint32_t b = svld1(pg, &data[j]);\n            for (size_t k = j + 1; k < size; ++k) {\n                svint32_t c = svld1(pg, &data[k]);\n                svint32_t sum = svadd_s32_z(pg, svadd_s32_z(pg, a, b), c);\n                uint32_t mask = svtest_all_true(svcmpeq_n_s32(sum, 0));\n                if (mask) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```cpp\nbool triples_sum_to_zero_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    \n    for (size_t i = 0; i < size - 2; ++i) {\n        int32_t a = l[i];\n        svint32_t va = svdup_s32(a);\n        \n        for (size_t j = i + 1; j < size - 1; ++j) {\n            int32_t b = l[j];\n            svint32_t vb = svdup_s32(b);\n            \n            for (size_t k = j + 1; k < size; ++k) {\n                int32_t c = l[k];\n                svint32_t vc = svdup_s32(c);\n                \n                svint32_t sum = svadd_s32_z(pg, va, svadd_s32_z(pg, vb, vc));\n                svbool_t mask = svcmpeq_n_s32(pg, sum, 0);\n                \n                if (svptest_any(svptrue_b32(), mask)) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```cpp\nbool triples_sum_to_zero_simd(std::vector<int> l){\n    const int size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1_s32(pg, l.data());\n    \n    for (int i = 0; i < size - 2; ++i) {\n        for (int j = i + 1; j < size - 1; ++j) {\n            for (int k = j + 1; k < size; ++k) {\n                svint32_t sum = svadd_s32_z(pg, svadd_s32_z(pg, svindex_s32(i), svindex_s32(j)), svindex_s32(k));\n                svbool_t mask = svcmpeq_n_s32(pg, sum, 0);\n                if (svptest_any(svptrue_b32(), mask)) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```cpp\nstd::vector<int> incr_list_simd(std::vector<int> l){\n    size_t size = l.size();\n    size_t num_lanes = svcntw(); \n    svbool_t pg = svwhilelt_b32(size, num_lanes);\n    \n    for (size_t i = 0; i < size; i += num_lanes) {\n        svbool_t pg_actual = svwhilelt_b32(i + num_lanes, size);\n        svint32_t vec_l = svld1_s32(pg_actual, &l[i]);\n        svint32_t vec_incr = svadd_s32_z(pg_actual, vec_l, svdup_n_s32(1));\n        svst1_s32(pg, &l[i], vec_incr);\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```cpp\nstd::vector<int> incr_list_simd(std::vector<int> l){\n    size_t size = l.size();\n    size_t num_lanes = svcntw(); \n    size_t num_vectors = (size + num_lanes - 1) / num_lanes;\n    std::vector<int> result(size);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * num_lanes, size);\n        svint32_t input = svld1_s32(pg, &l[i * num_lanes]);\n        svint32_t output = svadd_s32_z(pg, input, svdup_n_s32(1));\n        svst1_s32(pg, &result[i * num_lanes], output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```cpp\nstd::vector<int> incr_list_simd(std::vector<int> l){\n    size_t size = l.size();\n    size_t num_lanes = svcntw(); \n    size_t num_vectors = (size + num_lanes - 1) / num_lanes;\n    std::vector<int> result(size);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * num_lanes, size);\n        svint32_t input = svld1_s32(pg, &l[i * num_lanes]);\n        svint32_t output = svadd_s32_z(pg, input, svdup_n_s32(1));\n        svst1_s32(pg, &result[i * num_lanes], output);\n    }\n\n    return result;\n}\n```  "}
{"task_id": "SimdBench_83_SVE", "completion": "```cpp\nstd::vector<int> incr_list_simd(std::vector<int> l){\n    size_t size = l.size();\n    size_t num_lanes = svcntw(); \n    size_t num_vectors = (size + num_lanes - 1) / num_lanes;\n    std::vector<int> result(size);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * num_lanes, size);\n        svint32_t input = svld1(pg, &l[i * num_lanes]);\n        svint32_t one = svdup_n_s32(1);\n        svint32_t output = svadd_s32_z(pg, input, one);\n        svst1(pg, &result[i * num_lanes], output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```cpp\nstd::vector<int> incr_list_simd(std::vector<int> l){\n    size_t size = l.size();\n    size_t num_lanes = svcntw(); \n    size_t num_vectors = (size + num_lanes - 1) / num_lanes;\n    std::vector<int> result(size);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * num_lanes, size);\n        svint32_t input = svld1(pg, &l[i * num_lanes]);\n        svint32_t one = svdup_n_s32(1);\n        svint32_t output = svadd_s32_z(pg, input, one);\n        svst1(pg, &result[i * num_lanes], output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```cpp\nbool pairs_sum_to_zero_simd(std::vector<int> l){\n    svbool_t pg = svptrue_b32();\n    size_t size = l.size();\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &l[i]);\n        for (size_t j = i + 1; j < size; j++) {\n            svint32_t vec2 = svld1_s32(pg, &l[j]);\n            svint32_t result = svadd_s32_z(pg, vec, vec2);\n            if (svptest_any(svptrue_b32(), svcmpeq_n_s32(result, 0))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```cpp\nbool pairs_sum_to_zero_simd(std::vector<int> l){\n    svbool_t pg = svptrue_b32();\n    size_t size = l.size();\n    for(size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &l[i]);\n        for(size_t j = i + 1; j < size; j++) {\n            svint32_t vec2 = svld1_s32(pg, &l[j]);\n            svint32_t result = svadd_s32_z(pg, vec, vec2);\n            if(svptest_any(svptrue_b32(), svcmpeq_n_s32(result, 0))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```cpp\nbool pairs_sum_to_zero_simd(std::vector<int> l){\n    svbool_t pg = svptrue_b32();\n    size_t size = l.size();\n    for(size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &l[i]);\n        for(size_t j = i + 1; j < size; j++) {\n            svint32_t vec2 = svld1_s32(pg, &l[j]);\n            svint32_t result = svadd_s32_z(pg, vec, vec2);\n            svbool_t p_all_zero = svcmpeq_n_s32(pg, result, 0);\n            if(svptest_any(svptrue_b32(), p_all_zero)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```cpp\nbool pairs_sum_to_zero_simd(std::vector<int> l){\n    svbool_t pg = svptrue_b32();\n    size_t size = l.size();\n    for(size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &l[i]);\n        svint32_t neg_vec = svneg_s32_z(pg, vec);\n        for(size_t j = i + svcntw(); j < size; j += svcntw()) {\n            svint32_t next_vec = svld1_s32(pg, &l[j]);\n            svint32_t sum = svadd_s32_z(pg, vec, next_vec);\n            svbool_t mask = svcmpeq_s32(pg, sum, neg_vec);\n            if (svptest_any(svptrue_b32(), mask)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```cpp\nbool pairs_sum_to_zero_simd(std::vector<int> l){\n    size_t size = l.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *data = (svint32_t*) l.data();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1(pg, &data[i]);\n        svint32_t neg_vec = svneg_s32_z(pg, vec);\n\n        for (size_t j = i + 1; j < size; j++) {\n            svbool_t pg_inner = svwhilelt_b32(j, size);\n            svint32_t vec_inner = svld1(pg_inner, &data[j]);\n            svint32_t result = svadd_s32_z(pg_inner, vec, vec_inner);\n            if (svptest_any(svptrue_b32(), svcmpeq_n_s32(result, 0))) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```cpp\nstd::string change_base_simd(int64_t x, int8_t base){\n    svbool_t pg = svptrue_b8();\n    svint64_t input = svdup_n_s64(x);\n    svint64_t quotient = input;\n    svint64_t remainder;\n    svint64_t result = svwhilelt_b64_s64(quotient, svdup_n_s64(0));\n    svint64_t base_sve = svdup_n_s64(base);\n    svint64_t zero = svdup_n_s64(0);\n    svint64_t one = svdup_n_s64(1);\n    svint64_t ten = svdup_n_s64(10);\n    svint64_t ascii_offset = svdup_n_s64(48);\n    svint64_t ascii_offset_a = svdup_n_s64(87);\n    svint64_t ascii_offset_A = svdup_n_s64(55);\n    svint64_t ascii_offset_0 = svdup_n_s64(48);\n\n    svint64_t temp_result = svwhilelt_b64_s64(quotient, svdup_n_s64(0));\n    svint64_t i = svdup_n_s64(0);\n\n    while (svptest_any(svptrue_b64(), svcmpgt_s64(quotient, zero))) {\n        svdivmod_s64(&quotient, &remainder, quotient, base_sve, pg);\n        svbool_t is_digit = svcmpge_s64(remainder, ten);\n        svint64_t digit = svmul_n_s64(svsel_s64(remainder + ascii_offset, remainder + ascii_offset_a - ten, is_digit), !is_digit);\n        result = svsel_s64(digit, result, pg);\n        pg = svwhilelt_b64_s64(quotient, zero);\n        i = svsel_s64(i + one, i, pg);\n    }\n\n    svint64_t str_length = i + one;\n    svint64_t str_length_copy = str_length;\n    svint64_t str_length_minus_one = str_length - one;\n    svint64_t str = svwhilelt_b64_s64(str_length, svdup_n_s64(0));\n    svint64_t str_result = svwhilelt_b64_s64(str_length, svdup_n_s64(0));\n\n    while (svptest_any(svptrue_b64(), svcmpgt_s64(str_length, zero))) {\n        svint64_t index = str_length_minus_one - i;\n        svint64_t current_digit = svsel_s64(result, zero, svcmpge_s64(i, str_length_copy));\n        svbool_t is_digit = svcmpge_s64(current_digit, ten);\n        svint64_t digit = svmul_n_s64(svsel_s64(current_digit + ascii_offset, current_digit + ascii_offset_a - ten, is_digit), !is_digit);\n        svbool_t is_upper = svcmpge_s64(digit, svdup_n_s64(97));\n        svbool_t is_lower = svcmpge_s64(digit, svdup_n_s64(65));\n        svint64_t ascii_offset_final = svsel_s64(ascii_offset_A, ascii_offset_0, is_lower);\n        ascii_offset_final = svsel_s64(ascii_offset_final, ascii_offset_a, is_upper);\n        svint64_t final_digit = digit + ascii_offset_final;\n        str_result = svsel_s64(final_digit, str_result, pg);\n        str = svsel_b64(svsel_b64(str, str_result, pg), str, pg);\n        pg = svwhilelt_b64_s64(str_length, zero);\n        i = i + one;\n    }\n\n    char str_array[16];\n    svst1_s8(pg, &str_array[0], str);\n    str_array[str_length_copy] = '\\0';\n\n    return std::string(str_array);\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```cpp\nstd::string change_base_simd(int64_t x, int8_t base){\n    svbool_t pg = svptrue_b64();\n    svint64_t input = svdup_n_s64(x);\n    svint64_t result = svwhilelt_b64_s64(input, svdup_n_s64(0));\n    svint64_t quotient = svdiv_n_s64_z(pg, input, base);\n    svint64_t remainder = svdiv_n_s64_z(pg, input, base);\n    svint64_t reversed_result = svunpklo_s64(svtrn1_s64(quotient, remainder), svtrn2_s64(quotient, remainder));\n    svint64_t final_result = svreinterpret_s64_s8(reversed_result);\n    svbool_t pred = svcmpgt_n_s64(pg, final_result, svdup_n_s64(0));\n    svint64_t final_result_masked = svsel_s64(pred, final_result, svdup_n_s64(48));\n    svuint8_t final_result_uint8 = svreinterpret_u8_s64(final_result_masked);\n    uint8_t final_result_array[16];\n    svst1_u8(pg, final_result_array, final_result_uint8);\n    final_result_array[svcntb() - 1] = '\\0';\n    return std::string(reinterpret_cast<char*>(final_result_array));\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```cpp\nstd::string change_base_simd(int64_t x, int8_t base){\n    svbool_t pg = svptrue_b8();\n    svint64_t input = svdup_n_s64(x);\n    svint64_t quotient = input;\n    svint64_t remainder = svwhilelt_b64(quotient, svdup_n_s64(base));\n    svint64_t result = svwhilelt_b64(quotient, svdup_n_s64(base));\n    svint64_t zero = svdup_n_s64(0);\n    svint64_t one = svdup_n_s64(1);\n    svint64_t base_sve = svdup_n_s64(base);\n    svint64_t ten = svdup_n_s64(10);\n    svint64_t index = zero;\n    svint64_t temp;\n\n    while (!svptest_any(svptrue_b64(), svcmpeq_s64(quotient, zero))) {\n        svdivmod_s64(&quotient, &remainder, quotient, base_sve, pg);\n        result = svadd_s64_z(pg, result, svmul_n_s64_z(pg, remainder, svindex_s64(quotient, 0, pg), pg), pg);\n        index = svadd_s64_z(pg, index, one, pg);\n    }\n\n    svint64_t result_rev = svwhilelt_b64(result, svdup_n_s64(10));\n    svint64_t result_final = svwhilelt_b64(result, svdup_n_s64(10));\n    svint64_t result_temp = result;\n    index = svsub_s64_z(pg, index, one, pg);\n\n    while (!svptest_any(svptrue_b64(), svcmpeq_s64(result_temp, zero))) {\n        svdivmod_s64(&result_temp, &temp, result_temp, ten, pg);\n        result_final = svadd_s64_z(pg, result_final, svlsl_n_s64_z(pg, temp, svindex_s64(index, 0, pg), pg), pg);\n        index = svsub_s64_z(pg, index, one, pg);\n    }\n\n    svint64_t result_final_rev = svwhilelt_b64(result_final, svdup_n_s64(10));\n    svint64_t result_final_temp = result_final;\n    svint64_t result_final_index = zero;\n\n    while (!svptest_any(svptrue_b64(), svcmpeq_s64(result_final_temp, zero))) {\n        svdivmod_s64(&result_final_temp, &temp, result_final_temp, ten, pg);\n        result_final_rev = svadd_s64_z(pg, result_final_rev, svlsl_n_s64_z(pg, temp, svindex_s64(result_final_index, 0, pg), pg), pg);\n        result_final_index = svadd_s64_z(pg, result_final_index, one, pg);\n    }\n\n    int64_t result_array[8];\n    svst1_s64(pg, result_array, result_final_rev);\n\n    std::string result_str = \"\";\n    for (int i = 0; i < 8; i++) {\n        if (result_array[i] != 0) {\n            result_str += std::to_string(result_array[i]);\n        }\n    }\n\n    return result_str;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```cpp\nstd::string change_base_simd(int64_t x, int8_t base){\n    svbool_t pg = svptrue_b8();\n    svint64_t input = svdup_n_s64(x);\n    svint64_t quotient = input;\n    svint64_t remainder = svwhilelt_b64(quotient, svdup_n_s64(base));\n    svint64_t result = svwhilelt_b64(quotient, svdup_n_s64(base));\n    svint64_t divisor = svdup_n_s64(base);\n\n    while (!svptest_any(svptrue_b64(), svcmpeq_n_s64(quotient, svdup_n_s64(0)))) {\n        quotient = svdiv_s64_z(pg, quotient, divisor);\n        remainder = svdiv_s64_z(pg, quotient, divisor);\n        result = svadd_s64_z(pg, result, svreinterpret_s64_s32(svand_s32(svreinterpret_s32_s64(remainder), svdup_n_s32(255)));\n    }\n\n    int64_t size = svcntd();\n    std::vector<int64_t> output(size);\n    svst1_s64(pg, output.data(), result);\n\n    std::string str_result = \"\";\n    for (int i = 0; i < size; i++) {\n        str_result += std::to_string(output[i]);\n    }\n\n    return str_result;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```cpp\nstd::string change_base_simd(int64_t x, int8_t base){\n    svbool_t pg = svptrue_b8();\n    svint64_t input = svdup_n_s64(x);\n    svint64_t quotient = input;\n    svint64_t remainder;\n    svint64_t result = svdup_n_s64(0);\n    svint64_t base_sve = svdup_n_s64(base);\n    svint64_t zero = svdup_n_s64(0);\n    svint64_t one = svdup_n_s64(1);\n\n    int count = 0;\n    while (!svptest_any(svptrue_b64(), svcmpeq_s64_z(pg, quotient, zero))) {\n        svdivmod_s64_z(pg, svptrue_b64(), quotient, remainder, quotient, base_sve);\n        result = svadd_s64_z(pg, result, svmul_n_s64(remainder, pow(base, count)), result);\n        count++;\n    }\n\n    int size = svcntd();\n    std::vector<int64_t> output(size);\n    svst1_s64(pg, output.data(), result);\n\n    std::string str_output = \"\";\n    for (int i = 0; i < size; i++) {\n        str_output += std::to_string(output[i]);\n    }\n\n    return str_output;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool is_palindrome_simd(std::string text){\n    size_t length = text.length();\n    size_t half_length = length / 2;\n\n    svbool_t pg = svwhilelt_b64(0, half_length);\n\n    for (size_t i = 0; i < half_length; i += svcntw()) {\n        svbool_t pg_step = svwhilelt_b64(i, half_length);\n\n        svuint8_t input = svld1_u8(pg, (const uint8_t*)&text[i]);\n        svuint8_t reversed_input = svld1_u8(pg, (const uint8_t*)&text[length - i - 1]);\n\n        svbool_t is_equal = svcmpeq_n_u8(pg_step, input, reversed_input);\n        if (!svptest_any(svptrue_b8(), is_equal)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```cpp\nbool is_palindrome_simd(std::string text){\n    size_t length = text.length();\n    size_t half_length = length / 2;\n    \n    svbool_t pg = svptrue_b8();\n    svbool_t pg_end = svwhilelt_b8(length / svcntb(), svindex_s8(0));\n    \n    for (size_t i = 0; i < half_length; i += svcntb()) {\n        svuint8_t input = svld1(pg, reinterpret_cast<const uint8_t*>(&text[i]), svcntb());\n        svuint8_t reverse_input = svld1(pg, reinterpret_cast<const uint8_t*>(&text[length - i - svcntb()]), svcntb());\n        \n        svbool_t palindrome_check = svcmpeq_n_u8(input, reverse_input);\n        if (!svptest_any(svptrue_b8(), palindrome_check)) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```cpp\nbool is_palindrome_simd(std::string text){\n    size_t length = text.length();\n    size_t half_length = length / 2;\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t result = svdup_n_u8(1);\n\n    for (size_t i = 0; i < half_length; i += svcntb()) {\n        svuint8_t first_chars = svld1_u8(pg, (const uint8_t*)(text.data() + i), svcntb());\n        svuint8_t last_chars = svld1_u8(pg, (const uint8_t*)(text.data() + length - i - svcntb()), svcntb());\n        svbool_t cmp_result = svcmpeq_n_u8(pg, first_chars, last_chars);\n        result = svand_u8_z(pg, result, cmp_result, result);\n    }\n\n    uint8_t final_result[SV_CNT_MAX];\n    svst1_u8(pg, final_result, result);\n\n    for (int i = 0; i < svcntb(); i++) {\n        if (final_result[i] == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```cpp\nbool is_palindrome_simd(std::string text){\n    size_t len = text.length();\n    size_t half_len = len / 2;\n    \n    svbool_t pg = svptrue_b8();\n    svbool_t pg_end = svwhilelt_b8(len / svcntb(), 0);\n    \n    for (size_t i = 0; i < half_len; i += svcntb()) {\n        svuint8_t vec_left = svld1_u8(pg, (const uint8_t*)(text.data() + i));\n        svuint8_t vec_right = svld1_u8(pg, (const uint8_t*)(text.data() + len - i - svcntb()));\n        \n        svbool_t pg_eq = svcmpeq_n_u8(pg, vec_left, vec_right);\n        if (!svptest_any(svptrue_b8(), pg_eq)) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```cpp\nbool is_palindrome_simd(std::string text){\n    size_t len = text.length();\n    size_t half_len = len / 2;\n    svbool_t pg = svptrue_b8();\n    \n    for (size_t i = 0; i < half_len; i += svcntw()) {\n        svuint8_t vec1 = svld1_u8(pg, (const uint8_t*)(text.data() + i));\n        svuint8_t vec2 = svld1_u8(pg, (const uint8_t*)(text.data() + len - i - svcntw()));\n        svbool_t cmp = svcmpeq_n_u8(pg, vec1, vec2);\n        if (!svptest_any(svptrue_b8(), cmp)) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```\nstd::string decode_shift_simd(std::string s){\n    std::string out;\n    size_t i;\n    svbool_t pg = svwhilelt_b8(s.length(), i);\n    for (i = 0; svptest_first(pg); i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, (const uint8_t*)&s[i]);\n        svuint8_t shifted = svmul_n_u8_z(pg, input - 'a', 21);\n        svuint8_t decoded = svmov_n_u8(5) + shifted;\n        svuint8_t result = svadd_n_u8_z(pg, decoded, 'a');\n        svst1_u8(pg, (uint8_t*)&out[i], result);\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```\nstd::string decode_shift_simd(std::string s){\n    std::string out;\n    size_t length = s.length();\n    svbool_t pg = svwhilelt_b8(length, length);\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svuint8_t input = svld1_u8(pg, (const uint8_t*)&s[i]);\n        svuint8_t shifted = svmul_n_u8_z(pg, input - 'a', 1);\n        svuint8_t decoded = svmovlb_u8_z(pg, shifted + 21);\n        svuint8_t result = decoded + 'a';\n        svst1_u8(pg, (uint8_t*)&out[i], result);\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```\nstd::string decode_shift_simd(std::string s){\n    std::string out;\n    int i;\n    svbool_t pg = svptrue_b8();\n    for (i = 0; i < s.length(); i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, (const uint8_t*)&s[i]);\n        svuint8_t shifted = svmov_n_u8(5);\n        svuint8_t a_val = svmov_n_u8('a');\n        svuint8_t z_val = svmov_n_u8('z');\n        svuint8_t diff = svsub_n_u8_z(pg, input, a_val, 5);\n        svuint8_t mod = svmul_n_u8_z(pg, diff, 26);\n        svuint8_t result = svadd_n_u8_z(pg, mod, a_val);\n        svst1_u8(pg, (uint8_t*)&out[i], result);\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```\nstd::string decode_shift_simd(std::string s){\n    std::string out;\n    size_t len = s.length();\n    svbool_t pg = svwhilelt_b8(len, len);\n    for (size_t i = 0; i < len; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, (const uint8_t*)&s[i]);\n        svuint8_t shifted = svmul_n_u8_z(pg, input - 'a' + 21, 1);\n        svuint8_t decoded = svmovlb_u8(shifted) + 'a';\n        svst1_u8(pg, (uint8_t*)&out[i], decoded);\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```\nstd::string decode_shift_simd(std::string s){\n    std::string out;\n    size_t i;\n    svbool_t pg = svptrue_b8();\n    for (i = 0; i < s.length(); i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, (const uint8_t*)&s[i]);\n        svuint8_t shifted = svmov_n_u8(5);\n        svuint8_t a_val = svmov_n_u8('a');\n        svuint8_t z_val = svmov_n_u8('z');\n        svuint8_t diff = svsub_n_u8(a_val, 5);\n        svuint8_t shifted_input = svadd_u8_z(pg, input, shifted);\n        svuint8_t decoded = svadd_u8_z(pg, shifted_input, diff);\n        svuint8_t mask1 = svcmpge_n_u8_z(pg, decoded, a_val);\n        svuint8_t mask2 = svcmplt_n_u8_z(pg, decoded, a_val);\n        svuint8_t decoded_final = svsel_u8(mask1, decoded, svadd_n_u8_z(pg, decoded, 26));\n        svuint8_t decoded_final2 = svsel_u8(mask2, decoded_final, svadd_n_u8_z(pg, decoded_final, 26));\n        svst1_u8(pg, (uint8_t*)&out[i], decoded_final2);\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool below_threshold_simd(std::vector<int> l, int t){\n    svbool_t pg = svwhilelt_b32(0, l.size());\n    svint32_t threshold = svdup_s32(t);\n    svbool_t result = svwhilelt_b32(0, l.size());\n    \n    svint32_t *data_ptr = l.data();\n    svint32_t data = svld1(pg, data_ptr);\n    svbool_t cmp_result = svcmpslt_n_s32(pg, data, threshold);\n    result = svand_m(pg, result, cmp_result);\n    \n    return svptest_any(svptrue_b32(), result);\n}\n```  "}
{"task_id": "SimdBench_88_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool below_threshold_simd(std::vector<int> l, int t){\n    svbool_t pg = svwhilelt_b32(0, l.size());\n    svint32_t threshold = svdup_s32(t);\n    svbool_t result = svptrue_b32();\n\n    for (size_t i = 0; i < l.size(); i += svcntw()) {\n        svint32_t vec_l = svld1_s32(pg, &l[i]);\n        svbool_t cmp = svcmpslt_n_s32(pg, vec_l, threshold);\n        result = svand_m(result, result, cmp);\n    }\n\n    return svptest_any(svptrue_b32(), result);\n}\n```  "}
{"task_id": "SimdBench_88_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool below_threshold_simd(std::vector<int> l, int t){\n    svbool_t pg = svwhilelt_b32(0, l.size());\n    svint32_t threshold = svdup_n_s32(t);\n    svbool_t result = svwhilelt_b32(0, l.size());\n    svint32_t* ptr = l.data();\n    svint32_t values = svld1(pg, ptr);\n    svbool_t cmp = svcmpgt_s32(values, threshold);\n    result = svand_m(pg, result, cmp);\n    return !svptest_any(svptrue_b32(), result);\n}\n```  "}
{"task_id": "SimdBench_88_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool below_threshold_simd(std::vector<int> l, int t){\n    svbool_t pg = svwhilelt_b32(0, l.size());\n    svint32_t threshold = svdup_n_s32(t);\n    svbool_t result = svptrue_b32();\n\n    for (size_t i = 0; i < l.size(); i += svcntw()) {\n        svint32_t vec_l = svld1_s32(pg, &l[i]);\n        svbool_t cmp = svcmpgt_s32(pg, vec_l, threshold);\n        result = svand_z(pg, result, cmp);\n    }\n\n    return !svptest_any(svptrue_b32(), result);\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool below_threshold_simd(std::vector<int> l, int t){\n    svbool_t pg = svwhilelt_b32(0, l.size());\n    svint32_t threshold = svdup_n_s32(t);\n    svbool_t result = svptrue_b32();\n\n    for(size_t i=0; i<l.size(); i+=svptrue_b32().scalblen()){\n        svint32_t vec = svld1_s32(pg, &l[i]);\n        svbool_t cmp = svcmpgt_s32(pg, vec, threshold);\n        result = svand_m(result, result, cmp);\n    }\n\n    return !svptest_any(svptrue_b32(), result);\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t size = brackets.size();\n    size_t i = 0;\n    svint8_t count = svdup_n_s8(0);\n\n    for (; i < size; i += svcntb()) {\n        svuint8_t bracket = svld1_u8(pg, (const uint8_t*)&brackets[i]);\n        svint8_t increment = svreinterpret_s8_u8(svcmpgt_u8_z(pg, bracket, 0));\n\n        count = svadd_s8_z(pg, count, increment, count);\n    }\n\n    int8_t result = svaddv_s8(pg, count);\n\n    return (result == 0);\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t size = brackets.size();\n    svbool_t pg = svptrue_b8();\n    svbool_t all_true = svdup_n_b8(true);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t opening = svcmpeq_n_u8_z(pg, svld1_u8(pg, &brackets[i]), '<');\n        svuint8_t closing = svcmpeq_n_u8_z(pg, svld1_u8(pg, &brackets[i]), '>');\n        svbool_t mismatch = svcmpne_n_u8(pg, svcnt_u32(opening), svcnt_u32(closing));\n        if (!svptest_any(all_true, mismatch)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t size = brackets.size();\n    size_t i = 0;\n    svint8_t count = svdup_n_s8(0);\n\n    for (; i < size; i += svcntb()) {\n        svuint8_t input = svld1(pg, reinterpret_cast<const uint8_t*>(&brackets[i]));\n        svint8_t increment = svreinterpret_s8_u8(svcmpge_n_u8_z(pg, input, '<'));\n        svint8_t decrement = svreinterpret_s8_u8(svcmpge_n_u8_z(pg, input, '>'));\n\n        count = svadd_s8_z(pg, count, increment, count);\n        count = svsub_s8_z(pg, count, decrement, count);\n    }\n\n    int8_t result = svaddv_s8(pg, count);\n\n    return result == 0;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t size = brackets.size();\n    size_t i = 0;\n    svbool_t result = svdup_b8(true);\n\n    for (; i < size; i += svcntb()) {\n        svbool_t mask = svwhilelt_b8(i, size);\n        svuint8_t bracket = svld1(pg, (const uint8_t*)&brackets[i]);\n        svuint8_t opening = svdup_n_u8('<');\n        svuint8_t closing = svdup_n_u8('>');\n\n        svbool_t cmp_opening = svcmpeq_n_u8(bracket, opening);\n        svbool_t cmp_closing = svcmpeq_n_u8(bracket, closing);\n\n        result = svand_z(pg, result, svcmpeq_m(pg, cmp_opening, cmp_closing));\n    }\n\n    bool final_result = svptest_any(svptrue_b8(), result);\n    return final_result;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t size = brackets.size();\n    size_t i = 0;\n    svbool_t result = svdup_b8(true);\n\n    for (; i < size; i += svcntb()) {\n        svuint8_t bracket_chars = svld1_u8(pg, (const uint8_t*)&brackets[i]);\n        svbool_t opening_bracket = svcmpeq_n_u8(bracket_chars, '<');\n        svbool_t closing_bracket = svcmpeq_n_u8(bracket_chars, '>');\n        svbool_t valid_bracket = svorr_b_z(pg, opening_bracket, closing_bracket);\n\n        result = svand_z(pg, result, valid_bracket);\n    }\n\n    uint8_t final_result[svcntb()];\n    svst1_u8(pg, final_result, result);\n\n    for (size_t j = 0; j < svcntb(); ++j) {\n        if (final_result[j] == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t size = brackets.size();\n    size_t i = 0;\n    svint8_t count = svdup_n_s8(0);\n\n    for (; i < size; i += svcntb()) {\n        svuint8_t bracket = svld1_u8(pg, (const uint8_t*)&brackets[i]);\n        svint8_t increment = svreinterpret_s8_u8(svcmpgt_u8_z(pg, bracket, 40) - svcmpgt_u8_z(pg, bracket, 41));\n        count = svadd_s8_z(pg, count, increment, count);\n    }\n\n    int8_t result = svaddv_s8(pg, count);\n\n    return (result == 0);\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t size = brackets.size();\n    size_t i = 0;\n    svbool_t all_true = svdup_n_b8(true);\n\n    while (i < size) {\n        svbool_t p = svwhilelt_b8(i, size);\n        svuint8_t bracket = svld1_u8(pg, (const uint8_t*)&brackets[i]);\n        svuint8_t open = svdup_n_u8('(');\n        svuint8_t close = svdup_n_u8(')');\n        svbool_t is_open = svcmpeq_u8_m(pg, bracket, open);\n        svbool_t is_close = svcmpeq_u8_m(pg, bracket, close);\n        svbool_t is_valid = svsel_b8(is_open, is_close, all_true);\n        if (!svptest_any(all_true, is_valid)) {\n            return false;\n        }\n        i += svcntb();\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t length = brackets.length();\n    size_t i = 0;\n    svbool_t all_true = svdup_n_b8(true);\n\n    while (i < length) {\n        svbool_t pred = svwhilelt_b8(i, length);\n        svuint8_t bracket = svld1_u8(pg, (const uint8_t*)&brackets[i]);\n        svuint8_t open = svcmpeq_u8_m(pg, bracket, '(');\n        svuint8_t close = svcmpeq_u8_m(pg, bracket, ')');\n        svint8_t balance = svcnt_u8_m(pg, open) - svcnt_u8_m(pg, close);\n        if (svptest_any(all_true, svcmpeq_n_s8(balance, -1))) {\n            return false;\n        }\n        i += svcntw();\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t length = brackets.length();\n    size_t i = 0;\n    svbool_t all_true = svdup_b8(true);\n\n    for (; i < length - svcntw() + 1; i += svcntw()) {\n        svuint8_t bracket_chars = svld1_u8(pg, (const uint8_t*)&brackets[i]);\n        svuint8_t open_brackets = svcmpeq_u8(bracket_chars, '(');\n        svuint8_t close_brackets = svcmpeq_u8(bracket_chars, ')');\n        svbool_t is_valid = svptrue_b8();\n\n        for (size_t j = 0; j < svcntw(); j++) {\n            is_valid = svand_b8(is_valid, svcmpgt_u8_z(pg, svindex_u8(j), svindex_u8(svadd_u64_z(pg, i, j)));\n        }\n\n        svbool_t open_count = svwhilelt_b8_u64(is_valid, svcntw());\n        svbool_t close_count = svwhilelt_b8_u64(is_valid, svcntw());\n\n        open_count = svand_b8(open_count, open_brackets);\n        close_count = svand_b8(close_count, close_brackets);\n\n        if (svptest_any(all_true, open_count) != 0 || svptest_any(all_true, close_count) != 0) {\n            return false;\n        }\n    }\n\n    for (; i < length; i++) {\n        if (brackets[i] == '(' || brackets[i] == ')') {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    svbool_t pg = svptrue_b8();\n    size_t length = brackets.length();\n    size_t i = 0;\n    svbool_t all_true = svdup_n_b8(true);\n\n    for (; i < length - svcntw() + 1; i += svcntw()) {\n        svuint8_t bracket_chars = svld1_u8(pg, (const uint8_t*)&brackets[i]);\n        svbool_t open_brackets = svcmpeq_n_u8(bracket_chars, '(');\n        svbool_t close_brackets = svcmpeq_n_u8(bracket_chars, ')');\n        svbool_t mismatch = svsel_b8(svorr_b8(open_brackets, close_brackets), all_true, open_brackets);\n\n        if (svptest_any(all_true, mismatch)) {\n            return false;\n        }\n    }\n\n    for (; i < length; i++) {\n        if (brackets[i] == '(') {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::vector<float> derivative_simd(std::vector<float> xs){\n    size_t n = xs.size();\n    size_t num_vectors = (n + svcntw() - 1) / svcntw();\n    std::vector<float> result;\n    result.resize(n - 1);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        svbool_t pg = svwhilelt_b32(i * svcntw(), n);\n        svfloat32_t xs_vec = svld1(pg, &xs[i * svcntw()]);\n\n        svfloat32_t indices = svindex_s32(0, 1);\n        svfloat32_t powers = svmul_n_f32_z(pg, indices, 1.0f);\n\n        svfloat32_t derivative = svmul_n_f32_z(pg, svmul_f32_z(pg, xs_vec, powers), svcntw());\n\n        svst1(pg, &result[i * svcntw()], derivative);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```cpp\nstd::vector<float> derivative_simd(std::vector<float> xs){\n    size_t n = xs.size();\n    size_t num_lanes = svcntw(); \n    size_t num_chunks = (n + num_lanes - 1) / num_lanes;\n    std::vector<float> result(n - 1);\n\n    for (size_t i = 0; i < num_chunks; ++i) {\n        svbool_t pg = svwhilelt_b32(i * num_lanes, n);\n        svfloat32x2_t xs_vec = svld2(pg, &xs[i * num_lanes]);\n\n        svfloat32x2_t indices = svindex_f32(pg, i * num_lanes * 2);\n        svfloat32x2_t derivative = svmul_n_f32_z(pg, xs_vec, 2.0f);\n        \n        svst1(pg, &result[i * num_lanes], derivative);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::vector<float> derivative_simd(std::vector<float> xs){\n    size_t n = xs.size();\n    size_t num_lanes = svcntw(); // Get the number of vector lanes\n\n    // Load coefficients into SVE vectors\n    svbool_t pg = svptrue_b32();\n    svfloat32_t coef = svld1(pg, xs.data());\n\n    // Calculate derivative of the polynomial\n    svfloat32_t indices = svindex_f32(0, 1);\n    svfloat32_t derivative = svmul_x(pg, coef, indices);\n\n    // Store the result back to a vector\n    std::vector<float> result(n - 1);\n    svst1(pg, result.data(), derivative);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```cpp\nstd::vector<float> derivative_simd(std::vector<float> xs){\n    size_t n = xs.size();\n    size_t num_lanes = svcntw(); \n    size_t num_chunks = (n + num_lanes - 1) / num_lanes;\n    std::vector<float> result;\n    result.reserve(n - 1);\n\n    for (size_t i = 0; i < num_chunks; ++i) {\n        svbool_t pg = svwhilelt_b32(i * num_lanes, n);\n        svfloat32x2_t xs_vec = svld1(pg, &xs[i * num_lanes]);\n        svfloat32x2_t indices = svindex_f32(num_lanes, -1);\n        svfloat32x2_t derivative = svmul_x(pg, indices, xs_vec);\n        svst1(pg, &result[i * num_lanes], derivative);\n    }\n\n    return result;\n}\n```  "}
{"task_id": "SimdBench_91_SVE", "completion": "```cpp\nstd::vector<float> derivative_simd(std::vector<float> xs){\n    size_t n = xs.size();\n    size_t num_lanes = svcntw(); \n    size_t num_chunks = (n + num_lanes - 1) / num_lanes;\n    \n    std::vector<float> result;\n    result.reserve(n - 1);\n    \n    for (size_t i = 0; i < num_chunks; ++i) {\n        svbool_t pg = svwhilelt_b32(i * num_lanes, n);\n        svfloat32_t xs_vec = svld1(pg, &xs[i * num_lanes]);\n        svfloat32_t indices = svindex_f32(pg, i * num_lanes);\n        svfloat32_t derivative = svmul_x(pg, indices, xs_vec);\n        \n        if (i > 0) {\n            svst1(pg, &result[(i - 1) * num_lanes], derivative);\n        }\n    }\n    \n    return result;\n}\n```  "}
{"task_id": "SimdBench_92_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint vowels_count_simd(std::string s){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    \n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t chars = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t is_vowel = svcmpeq_n_u8(chars, 'a') | svcmpeq_n_u8(chars, 'e') | svcmpeq_n_u8(chars, 'i') | svcmpeq_n_u8(chars, 'o') | svcmpeq_n_u8(chars, 'u');\n        \n        if(i + svcntw() > length) {\n            svbool_t tail = svwhilelt_b8(i, length);\n            is_vowel = svsel_b8(tail, is_vowel, svptrue_b8());\n        }\n        \n        count += svcntw() - svcntb(svclt_u8(is_vowel, svcntb()));\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint vowels_count_simd(std::string s){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    svuint8_t vowels = svdup_n_u8(0);\n    vowels = svadd_u8(vowels, svdup_n_u8('a'));\n    vowels = svadd_u8(vowels, svdup_n_u8('e'));\n    vowels = svadd_u8(vowels, svdup_n_u8('i'));\n    vowels = svadd_u8(vowels, svdup_n_u8('o'));\n    vowels = svadd_u8(vowels, svdup_n_u8('u'));\n    vowels = svadd_u8(vowels, svdup_n_u8('y'));\n\n    for (size_t i = 0; i < s.size(); i += svcntb()) {\n        svuint8_t input = svld1(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t is_vowel = svcmpge_n_u8(input, 'A') && svcmpge_n_u8('z', input) && svcmpgt_n_u8(vowels, input);\n        count += svcntw(is_vowel);\n    }\n\n    return count;\n}\n```  "}
{"task_id": "SimdBench_92_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint vowels_count_simd(std::string s){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    const char* str = s.c_str();\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svuint8_t chars = svld1_u8(pg, (const uint8_t*)(str + i));\n        svbool_t is_vowel = svcmpeq_n_u8(chars, 'a') | svcmpeq_n_u8(chars, 'e') | svcmpeq_n_u8(chars, 'i') | svcmpeq_n_u8(chars, 'o') | svcmpeq_n_u8(chars, 'u');\n        svbool_t is_y_vowel = svand_n_u8(is_vowel, svcmpeq_n_u8(chars, 'y'));\n        svbool_t is_last_y = svcmpeq_n_u8(svld1_u8(pg, (const uint8_t*)(str + i + svcntb() - 1)), 'y');\n        svbool_t is_vowel_or_last_y = svorr_b_z(is_vowel, is_y_vowel, is_last_y);\n        count += svcntb() - svclb(is_vowel_or_last_y);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint vowels_count_simd(std::string s){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    \n    for (size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t chars = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t is_vowel = svcmpeq_n_u8(chars, 'a', pg);\n        is_vowel = svorr_u8(is_vowel, svcmpeq_n_u8(chars, 'e', pg), pg);\n        is_vowel = svorr_u8(is_vowel, svcmpeq_n_u8(chars, 'i', pg), pg);\n        is_vowel = svorr_u8(is_vowel, svcmpeq_n_u8(chars, 'o', pg), pg);\n        is_vowel = svorr_u8(is_vowel, svcmpeq_n_u8(chars, 'u', pg), pg);\n        \n        if (i + svcntw() > length) {\n            svbool_t pg_tail = svwhilelt_b8(i, length);\n            is_vowel = svsel_u8(pg_tail, is_vowel, svdup_n_u8(0, pg_tail));\n        }\n        \n        count += svcntw() - svclz_u32(svcmpgt_n_u8(is_vowel, 0, pg));\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint vowels_count_simd(std::string s){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    const char* str = s.c_str();\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svuint8_t chars = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&str[i]));\n\n        svuint8_t vowels = svdup_n_u8('a') | svdup_n_u8('e') | svdup_n_u8('i') | svdup_n_u8('o') | svdup_n_u8('u');\n        svuint8_t y_vowel = svdup_n_u8('y');\n\n        svbool_t is_vowel = svcmpeq_n_u8(chars, vowels);\n        svbool_t is_y_vowel = svand_n_b8(svcmpeq_n_u8(chars, y_vowel), svcmpeq_n_u8(svindex_s8(length - i - 1), svdup_n_s8(0)));\n\n        count += svcntb() - svcntb(svsel_b8(is_vowel, svdup_n_b8(0), is_y_vowel));\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint digitSum_simd(std::string s){\n    int sum = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    \n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t chars = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t upper_case = svcmpge_n_u8(pg, chars, 'A') && svcmplt_n_u8(pg, chars, 'Z');\n        svuint8_t upper_chars = svsel_u8(upper_case, chars, svdup_n_u8(0));\n        sum += svaddv_n_u8_z(pg, upper_chars, 0);\n    }\n    \n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint digitSum_simd(std::string s){\n    int sum = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    const char* str = s.c_str();\n\n    for (size_t i = 0; i < length; i += svcntb()) {\n        svuint8_t ascii = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&str[i]));\n        svbool_t upper_mask = svcmpge_n_u8(pg, ascii, 'A') && svcmplt_n_u8(pg, ascii, 'Z');\n        svuint8_t upper_ascii = svand_u8_z(pg, ascii, upper_mask);\n        sum += svmul_x(pg, upper_ascii, svcntb());\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint digitSum_simd(std::string s){\n    int sum = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    \n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t ascii_codes = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t upper_case_mask = svcmpge_n_u8(pg, ascii_codes, 'A') && svcmplt_n_u8(pg, ascii_codes, 'Z');\n        svuint8_t upper_case_codes = svsel_u8(upper_case_mask, ascii_codes, svdup_n_u8(0));\n        sum += svaddv_n_u8_x(pg, upper_case_codes, 0);\n    }\n    \n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint digitSum_simd(std::string s){\n    int sum = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    \n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t chars = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t upper_mask = svcmpge_n_u8(pg, chars, 'A') && svcmplt_n_u8(pg, chars, 'Z');\n        svuint8_t upper_chars = svsel_u8(upper_mask, chars, svdup_n_u8(0));\n        sum += svmad_u8_x(pg, sum, upper_chars, 1);\n    }\n    \n    return sum;\n}\n```  "}
{"task_id": "SimdBench_93_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint digitSum_simd(std::string s){\n    int sum = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    \n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t ascii = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t upper_case_mask = svcmpge_n_u8(pg, ascii, 'A') && svcmplt_n_u8(pg, ascii, 'Z');\n        svuint8_t upper_case_ascii = svsel_u8(upper_case_mask, ascii, svdup_n_u8(0));\n        sum += svaddv_n_u8_z(pg, upper_case_ascii, 0);\n    }\n    \n    return sum;\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```\nstd::vector<int> pluck_simd(std::vector<int> arr){\n    if(arr.empty()) {\n        return {};\n    }\n    \n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n    \n    svbool_t even_mask = svcmpeq_n_s32(pg, input % 2, 0);\n    svint32_t even_values = svsel(pg, input, svdup_n_s32(10001), even_mask);\n    \n    svint32_t min_even_value = svminv(svptrue_b32(), even_values);\n    svbool_t min_mask = svcmpeq(pg, even_values, min_even_value);\n    \n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t min_index = svsel(min_mask, indices, svdup_n_s32(10001));\n    \n    svint32_t result = svsel(min_mask, svzip1(min_even_value, min_index), svdup_n_s32(10001));\n    \n    std::vector<int> output(SV_CNT<int>());\n    svst1(pg, output.data(), result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```cpp\nstd::vector<int> pluck_simd(std::vector<int> arr){\n    if (arr.empty()) {\n        return {};\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n\n    svbool_t even_mask = svcmpeq_n_s32(pg, input % 2, 0);\n    svint32_t even_values = svsel(even_mask, input, svdup_n_s32(2147483647)); // Set odd values to INT_MAX\n    int32_t min_even = svminv(svptrue_b32(), even_values);\n\n    svbool_t min_mask = svcmpeq_n_s32(pg, even_values, min_even);\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t min_indices = svsel(min_mask, indices, svdup_n_s32(2147483647)); // Set non-minimum indices to INT_MAX\n    int32_t min_index = svminv(svptrue_b32(), min_indices);\n\n    std::vector<int> result = {min_even, min_index};\n    return result;\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```cpp\nstd::vector<int> pluck_simd(std::vector<int> arr){\n    if(arr.empty()){\n        return {};\n    }\n    \n    svbool_t pg = svptrue_b32();\n    svint32_t min_val = svdup_n_s32(INT_MAX);\n    svint32_t min_idx = svdup_n_s32(INT_MAX);\n    \n    for(size_t i = 0; i < arr.size(); i += svcntw()){\n        svbool_t pg_tmp = svwhilelt_b32(i, arr.size());\n        svint32_t nodes = svld1(pg_tmp, &arr[i]);\n        svbool_t even_mask = svcmpeq_n_s32_z(pg_tmp, nodes, 0) & svtest1_b32(nodes & 1);\n        svint32_t even_nodes = svsel(even_mask, nodes, svdup_n_s32(INT_MAX));\n        svint32_t idx = svindex_s32(0, 1);\n        svint32_t min_val_mask = svcmplt_n_s32_z(pg_tmp, even_nodes, svminv(even_mask, even_nodes));\n        min_val = svsel(min_val_mask, even_nodes, min_val);\n        min_idx = svsel(min_val_mask, idx, min_idx);\n    }\n    \n    svint32_t min_val_final = svminv(svwhilelt_b32(0, svcntw()), min_val);\n    svint32_t min_idx_final = svminv(svwhilelt_b32(0, svcntw()), min_idx);\n    \n    int result[2];\n    svst1(svbool_t(true), &result[0], min_val_final);\n    svst1(svbool_t(true), &result[1], min_idx_final);\n    \n    return {result[0], result[1]};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```cpp\nstd::vector<int> pluck_simd(std::vector<int> arr){\n    if(arr.empty()) return {};\n\n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n\n    svbool_t even_mask = svcmpeq_n_s32(pg, input % 2, 0);\n    svint32_t even_values = svsel(pg, input, svdup_n_s32(10001), even_mask);\n\n    int32_t min_even_value = svminv(svptrue_b32(), even_values);\n    svbool_t min_mask = svcmpeq_n_s32(pg, even_values, min_even_value);\n    svint32_t min_indices = svsel(pg, svindex_s32(0, 1), svdup_n_s32(10001), min_mask);\n\n    int32_t min_index = svminv(svptrue_b32(), min_indices);\n\n    std::vector<int> result = {min_even_value, min_index};\n    return result;\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```cpp\nstd::vector<int> pluck_simd(std::vector<int> arr){\n    if(arr.empty()) return {};\n\n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n\n    svbool_t even_mask = svcmpeq_n_s32(pg, input % 2, 0);\n    svint32_t even_values = svsel(even_mask, input, svdup_n_s32(2147483647));\n\n    int32_t min_even_value = svminv(svptrue_b32(), even_values);\n    svbool_t min_even_mask = svcmpeq_n_s32(pg, even_values, min_even_value);\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t min_indices = svsel(min_even_mask, indices, svdup_n_s32(2147483647));\n\n    int32_t min_index = svminv(svptrue_b32(), min_indices);\n\n    std::vector<int> result = {min_even_value, min_index};\n    return result;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```\nint search_simd(std::vector<int> lst){\n    svbool_t pg;\n    svint32_t input = svld1_s32(pg, lst.data());\n    svint32_t unique_values, freq_count, result;\n    \n    unique_values = svindex_s32(0, 1);\n    freq_count = svcntw_s32(input, unique_values);\n    result = svsel_s32_z(svcmpgt_n_s32(freq_count, 0), unique_values, svdup_n_s32(-1));\n    \n    int32_t output;\n    svst1_s32(pg, &output, result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```\nint search_simd(std::vector<int> lst){\n    svbool_t pg;\n    svint64_t frequencies = svdup_s64(0);\n    svint64_t values = svld1_s64(pg, (const int64_t*)lst.data());\n    svint64_t unique_values = svindexa_s64(0, 1);\n    svbool_t p_all = svptrue_b64();\n\n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b64(i, lst.size());\n        svint64_t current_values = svld1_gather_s64(pg, &lst[i], svindex_s64(unique_values, pg));\n        svint64_t mask = svcmpge_n_s64(svcount_true_b64(svcmpeq_s64(values, current_values)), svcntw());\n        frequencies = svsel_s64(mask, svadd_s64_z(p_all, frequencies, svdup_n_s64(1)), frequencies);\n    }\n\n    svint64_t max_freq = svmaxv_s64(p_all, frequencies);\n    svbool_t mask_max = svcmpeq_n_s64(max_freq, values);\n    svbool_t mask_gt_zero = svcmpgt_n_s64(values, 0);\n    svbool_t mask_final = svand_n_b64(mask_max, mask_gt_zero);\n\n    int64_t result = svsel_b_s64(mask_final, values, svdup_n_s64(-1));\n    return svget1_s64(result);\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```cpp\nint search_simd(std::vector<int> lst){\n    svbool_t pg;\n    svint64_t frequencies = svdup_s64(0);\n    svint64_t values = svld1_s64(pg, (const int64_t*)lst.data());\n    svbool_t pred = svptrue_b64();\n\n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b64(i, lst.size());\n        svint64_t current_values = svld1_s64(pg, (const int64_t*)&lst[i]);\n        svint64_t mask = svcmpeq_s64(pred, current_values, values);\n        frequencies = svadd_s64_z(pg, frequencies, mask, svdup_s64(1));\n    }\n\n    svint64_t result_mask = svcmpge_s64(pred, frequencies, values);\n    svint64_t result_values = svsel_s64(pred, values, svdup_s64(-1), result_mask);\n    int result = svget1_s64(result_values, 0);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```\nint search_simd(std::vector<int> lst){\n    svbool_t pg;\n    svint64_t frequencies = svdup_s64(0);\n    svint64_t values = svld1_s64(pg, &lst[0]);\n    svint64_t result = svdup_s64(-1);\n\n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b64(i, lst.size());\n        svint64_t chunk = svld1_s64(pg, &lst[i]);\n\n        svbool_t match = svcmpeq_n_s64(pg, chunk, values);\n        frequencies = svadd_z_s64(frequencies, pg, frequencies, svsel_s64(match, svdup_s64(1), svdup_s64(0)));\n\n        svbool_t greater_freq = svcmpge_n_s64(match, frequencies, 1);\n        svbool_t greater_value = svcmpge_n_s64(match, chunk, 1);\n        svbool_t greater_freq_value = svand_z(greater_freq, greater_value, pg);\n\n        result = svsel_s64(greater_freq_value, svsel_s64(greater_freq_value, chunk, result), result);\n    }\n\n    int res = svget1_s64(result, 0);\n    return res;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```\nint search_simd(std::vector<int> lst){\n    svbool_t pg;\n    svint64_t freq = svdup_s64(0);\n    svint64_t max_val = svdup_s64(-1);\n    svint64_t indices = svindex_s64(0, 1);\n    \n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b64(i, lst.size());\n        \n        svint64_t input = svld1(pg, &lst[i]);\n        svint64_t mask = svcmpeq_n_s64(input, 0);\n        svint64_t counts = svcntw(mask);\n        \n        svint64_t values = svsel(max_val, input, svcmpge_n_s64(counts, input));\n        max_val = svsel(max_val, values, svcmpgt(values, max_val));\n        freq = svsel(freq, counts, svcmpgt(counts, freq));\n    }\n    \n    int result = -1;\n    svbool_t p_all_true = svptrue_b64();\n    svint64_t cmp_result = svcmpgt(freq, max_val);\n    if (svptest_any(svptrue_b64(), cmp_result)) {\n        svbool_t p_true = svwhilelt_b64(0, svcntw());\n        svint64_t indices_true = svsel(max_val, indices, cmp_result);\n        svint64_t result_vec = svsel(max_val, indices_true, svcmpgt(freq, max_val));\n        result = svsel(0, svaddv_s64(p_true, result_vec), svptrue_b64());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```\nbool will_it_fly_simd(std::vector<int> q, int w){\n    size_t size = q.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t vec_q = svld1(pg, q.data());\n    \n    svint32_t sum = svaddv_n_s32_x(pg, pg, vec_q, 0);\n    \n    bool is_balanced = svptrue_b32();\n    for (size_t i = 0; i < size/2; i++) {\n        svint32_t first = svindex_s32(0, 1);\n        svint32_t second = svindex_s32(size-1, -1);\n        svbool_t pg_balanced = svcmpeq_n_s32(pg, svindex_s32(0, 1), svindex_s32(size-1, -1));\n        is_balanced = svand(is_balanced, svcmpeq_n_s32(pg_balanced, svld1(pg_balanced, q.data() + i), svld1(pg_balanced, q.data() + size - 1 - i)));\n    }\n    \n    return (svtesta(is_balanced) && sum <= w);\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```\nbool will_it_fly_simd(std::vector<int> q, int w){\n    size_t size = q.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t vec_q = svld1_s32(pg, q.data());\n    \n    // Check if the vector is balanced (palindromic)\n    svbool_t pg_balanced = svcmpeq_n_s32(pg, vec_q, svrev(vec_q));\n    \n    // Calculate the sum of elements\n    svint32_t vec_sum = svaddv_s32(pg, vec_q);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    svbool_t pg_weight = svcmple_n_s32(pg, vec_sum, w);\n    \n    // Combine the conditions to determine if the object will fly\n    svbool_t pg_fly = svand(pg_balanced, pg_weight);\n    \n    return svptest_any(svptrue_b32(), pg_fly);\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```\nbool will_it_fly_simd(std::vector<int> q, int w){\n    size_t size = q.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t vec_q = svld1_s32(pg, q.data());\n    \n    svint32_t sum = svaddv_s32(pg, vec_q);\n    \n    bool is_balanced = svcmpeq_n_s32(pg, sum, 0);\n    bool is_weight_ok = svcmpge_n_s32(pg, sum, w);\n    \n    return is_balanced && !is_weight_ok;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```cpp\nbool will_it_fly_simd(std::vector<int> q, int w){\n    size_t size = q.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t vec_q = svld1(pg, q.data());\n    \n    svint32_t reversed_vec_q = svrev(vec_q);\n    svbool_t is_balanced = svcmpeq(pg, vec_q, reversed_vec_q);\n    \n    svint32_t sum = svaddv_n_s32_x(pg, pg, vec_q);\n    bool is_sum_less_than_w = (svaddv_n_s32_x(pg, pg, sum) <= w);\n    \n    return svptest_any(is_balanced) && is_sum_less_than_w;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```\nbool will_it_fly_simd(std::vector<int> q, int w){\n    size_t size = q.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1_s32(pg, q.data());\n    \n    svint32_t sum = svaddv_s32(pg, vec);\n    \n    bool is_balanced = svptrue_b32();\n    for(size_t i = 0; i < size/2; i++){\n        svbool_t pg_bal = svwhilelt_b32(i, size/2);\n        svint32_t left = svindex_s32(pg_bal, vec, i);\n        svint32_t right = svindex_s32(pg_bal, vec, size-1-i);\n        is_balanced = svand_b32(is_balanced, svcmpeq_n_s32(left, right));\n    }\n    \n    bool is_sum_less = svcmpge_n_s32(sum, w);\n    \n    return svptest_any(is_balanced) && !svptest_any(is_sum_less);\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```\nint smallest_change_simd(std::vector<int> arr){\n    size_t size = arr.size();\n    svbool_t pg = svptrue_b32();\n    int count = 0;\n    \n    for (size_t i = 0; i < size/2; i += svcntw()) {\n        svint32_t vec1 = svld1(pg, &arr[i], svcntw());\n        svint32_t vec2 = svld1(pg, &arr[size-1-i], svcntw());\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        count += svcntw() - svcntw(svptest_any(svptrue_b32(), cmp));\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```\nint smallest_change_simd(std::vector<int> arr){\n    size_t size = arr.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1(pg, &arr[0]);\n    \n    int changes = 0;\n    for (size_t i = 0; i < size / 2; i++) {\n        svint32_t left = svindex_s32(i, 1);\n        svint32_t right = svindex_s32(size - i - 1, 1);\n        svint32_t val_left = svld1_gather_s32(pg, &arr[0], left);\n        svint32_t val_right = svld1_gather_s32(pg, &arr[0], right);\n        svbool_t cmp = svcmpeq_n_s32(pg, val_left, val_right);\n        changes += svcntp_b32(cmp);\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```\nint smallest_change_simd(std::vector<int> arr){\n    size_t size = arr.size();\n    svbool_t pg = svptrue_b32();\n    int count = 0;\n    \n    for (size_t i = 0; i < size/2; i += svcntw()) {\n        svint32_t vec1 = svld1(pg, &arr[i], svcntw());\n        svint32_t vec2 = svld1(pg, &arr[size-1-i], svcntw());\n        svbool_t cmp = svcmpeq_n_s32(pg, vec1, vec2);\n        count += svcntw() - svtbl(svget_u32(svptrue_b32()), cmp);\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```cpp\nint smallest_change_simd(std::vector<int> arr){\n    size_t size = arr.size();\n    svbool_t pg = svptrue_b32();\n    int changes = 0;\n    \n    for (size_t i = 0; i < size/2; i += svcntw()) {\n        svint32_t vec1 = svld1(pg, &arr[i], svcntw());\n        svint32_t vec2 = svld1(pg, &arr[size-1-i], svcntw());\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        changes += svcntw() - svcntw(svptest_any(svptrue_b32(), cmp));\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```\nint smallest_change_simd(std::vector<int> arr){\n    size_t size = arr.size();\n    svbool_t pg = svptrue_b32();\n    int changes = 0;\n    \n    for(size_t i = 0; i < size/2; i += svcntw()) {\n        svint32_t vec1 = svld1(pg, &arr[i], svcntw());\n        svint32_t vec2 = svld1(pg, &arr[size-1-i], svcntw());\n        svbool_t cmp = svcmpeq(pg, vec1, vec2);\n        changes += svcntw() - svcntw(svptest_any(svptrue_b32(), cmp));\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    uint64_t total_chars1 = 0, total_chars2 = 0;\n    for (const auto &str : lst1) {\n        total_chars1 += str.size();\n    }\n    for (const auto &str : lst2) {\n        total_chars2 += str.size();\n    }\n\n    svbool_t pg = svwhilelt_b64_u64(total_chars1, total_chars2);\n    return svptest_first(pg) ? lst1 : lst2;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    svbool_t pg = svptrue_b8();\n    svuint64_t total_chars_lst1 = svdup_n_u64(0);\n    svuint64_t total_chars_lst2 = svdup_n_u64(0);\n\n    for (size_t i = 0; i < lst1.size(); i += svcntd()) {\n        svbool_t pg1 = svwhilelt_b64(i, lst1.size());\n        svbool_t pg2 = svwhilelt_b64(i, lst2.size());\n\n        svuint64_t chars_count1 = svindex_u64(0);\n        svuint64_t chars_count2 = svindex_u64(0);\n\n        for (size_t j = 0; j < svcntd(); j++) {\n            svbool_t pg1_lane = svwhilelt_b64(j, lst1[i + j].size());\n            svbool_t pg2_lane = svwhilelt_b64(j, lst2[i + j].size());\n\n            svuint8_t chars1 = svld1_u8(pg1_lane, (const uint8_t*)lst1[i + j].c_str());\n            svuint8_t chars2 = svld1_u8(pg2_lane, (const uint8_t*)lst2[i + j].c_str());\n\n            chars_count1 = svadd_u64_z(pg1_lane, chars_count1, svmovlb_u64_z(pg1_lane, svindex_u64(1)));\n            chars_count2 = svadd_u64_z(pg2_lane, chars_count2, svmovlb_u64_z(pg2_lane, svindex_u64(1)));\n        }\n\n        total_chars_lst1 = svadd_u64_z(pg1, total_chars_lst1, chars_count1);\n        total_chars_lst2 = svadd_u64_z(pg2, total_chars_lst2, chars_count2);\n    }\n\n    svbool_t result_mask = svcmpge_n_u64(pg, total_chars_lst1, total_chars_lst2);\n    std::vector<std::string> result;\n    for (size_t i = 0; i < svcntd(); i++) {\n        if (svptest_first(result_mask, i)) {\n            result.push_back(lst1[i]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    svbool_t pg = svptrue_b8();\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    for (const auto &str : lst1) {\n        total_chars_lst1 += str.size();\n    }\n\n    for (const auto &str : lst2) {\n        total_chars_lst2 += str.size();\n    }\n\n    if (total_chars_lst1 < total_chars_lst2 || (total_chars_lst1 == total_chars_lst2 && lst1.size() > 0)) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    svbool_t pg = svptrue_b8();\n    svuint64_t total_chars_lst1 = svdup_n_u64(0);\n    svuint64_t total_chars_lst2 = svdup_n_u64(0);\n\n    for (size_t i = 0; i < lst1.size(); i += svcntd()) {\n        svbool_t pg1 = svwhilelt_b8(i, lst1.size());\n        svbool_t pg2 = svwhilelt_b8(i, lst2.size());\n\n        svuint64_t chars1 = svindex_u64(0);\n        svuint64_t chars2 = svindex_u64(0);\n\n        for (size_t j = 0; j < svcntd(); j++) {\n            svbool_t pg1_lane = svwhilelt_b8(j, lst1[i + j].size());\n            svbool_t pg2_lane = svwhilelt_b8(j, lst2[i + j].size());\n\n            svuint8_t chars1_lane = svld1_u8(pg1_lane, (const uint8_t*)(lst1[i + j].c_str()));\n            svuint8_t chars2_lane = svld1_u8(pg2_lane, (const uint8_t*)(lst2[i + j].c_str()));\n\n            chars1 = svadd_n_u64_z(pg1_lane, chars1, svcntd(), vmovlbh_u64(chars1_lane));\n            chars2 = svadd_n_u64_z(pg2_lane, chars2, svcntd(), vmovlbh_u64(chars2_lane));\n        }\n\n        total_chars_lst1 = svadd_n_u64_z(pg1, total_chars_lst1, svcntd(), chars1);\n        total_chars_lst2 = svadd_n_u64_z(pg2, total_chars_lst2, svcntd(), chars2);\n    }\n\n    svbool_t result_mask = svcmp_n_u64(pg, total_chars_lst1, total_chars_lst2, SV_CMP_LT);\n    svbool_t result_mask_first = svand_n_b8(result_mask, pg);\n\n    std::vector<std::string> result;\n    for (size_t i = 0; i < lst1.size(); i += svcntd()) {\n        svbool_t pg_result = svwhilelt_b8(i, lst1.size());\n        svbool_t pg_result_first = svand_b8(pg_result, result_mask_first);\n\n        if (svptest_any(svptrue_b8(), pg_result_first)) {\n            for (size_t j = 0; j < svcntd(); j++) {\n                if (i + j < lst1.size()) {\n                    result.push_back(lst1[i + j]);\n                }\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```cpp\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    svbool_t pg = svptrue_b8();\n    svuint64_t total_chars_lst1 = svdup_n_u64(0);\n    svuint64_t total_chars_lst2 = svdup_n_u64(0);\n\n    for (size_t i = 0; i < lst1.size(); i += svcntd()) {\n        svbool_t pg1 = svwhilelt_b64(i, lst1.size());\n        svbool_t pg2 = svwhilelt_b64(i, lst2.size());\n\n        svuint64_t chars_count1 = svindex_u64(0);\n        svuint64_t chars_count2 = svindex_u64(0);\n\n        for (size_t j = 0; j < svcntd(); j++) {\n            svbool_t pg1_lane = svwhilelt_b64(j, lst1[i + j].size());\n            svbool_t pg2_lane = svwhilelt_b64(j, lst2[i + j].size());\n\n            svuint8_t str1 = svld1(pg1_lane, &lst1[i + j][0]);\n            svuint8_t str2 = svld1(pg2_lane, &lst2[i + j][0]);\n\n            chars_count1 = svadd_u64_z(pg1_lane, chars_count1, svcnt_u64(str1));\n            chars_count2 = svadd_u64_z(pg2_lane, chars_count2, svcnt_u64(str2));\n        }\n\n        total_chars_lst1 = svadd_u64_z(pg1, total_chars_lst1, chars_count1);\n        total_chars_lst2 = svadd_u64_z(pg2, total_chars_lst2, chars_count2);\n    }\n\n    svbool_t result_mask = svcmp_n_u64(pg, total_chars_lst1, total_chars_lst2, SV_CMP_LT);\n    svbool_t result_mask_first = svnot_z(pg, result_mask);\n\n    std::vector<std::string> result;\n    for (size_t i = 0; i < lst1.size(); i += svcntd()) {\n        svbool_t pg_result = svwhilelt_b64(i, lst1.size());\n        svbool_t pg_result_first = svand_z(pg_result, result_mask_first);\n\n        for (size_t j = 0; j < svcntd(); j++) {\n            if (svptest_first(svwhilelt_b64(j, lst1[i + j].size()), pg_result_first)) {\n                result.push_back(lst1[i + j]);\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```\nbool is_simple_power_simd(uint64_t x, uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t x_vec = svdup_n_u64(x);\n    svuint64_t n_vec = svdup_n_u64(n);\n    \n    svuint64_t result = svptrue_b64();\n    result = svptrue_b64();\n    result = svptrue_b64();\n    result = svptrue_b64();\n    result = svptrue_b64();\n    result = svptrue_b64();\n    result = svptrue_b64();\n    result = svptrue_b64();\n    \n    svuint64_t pow = svpow_n_u64_z(pg, n_vec, 1);\n    svbool_t cmp = svcmpeq_n_u64(pg, x_vec, pow);\n    \n    return svptest_any(svptrue_b64(), cmp);\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```\nbool is_simple_power_simd(uint64_t x, uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t x_vec = svdup_n_u64(x);\n    svuint64_t n_vec = svdup_n_u64(n);\n    \n    svuint64_t pow_result = svptrue_b64();\n    svbool_t cmp_result = svptrue_b64();\n    \n    for (int i = 1; i <= 64; i++) {\n        pow_result = svmul_n_u64_z(pg, n_vec, i);\n        cmp_result = svcmpeq_n_u64(pg, x_vec, pow_result);\n        if (svptest_any(svptrue_b64(), cmp_result)) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```\nbool is_simple_power_simd(uint64_t x, uint64_t n){\n    svbool_t pg = svptrue_b64();\n    uint64_t exp = 1;\n    while (exp <= x) {\n        if (exp == x) {\n            return true;\n        }\n        exp *= n;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```\nbool is_simple_power_simd(uint64_t x, uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input_x = svdup_n_u64(x);\n    svuint64_t input_n = svdup_n_u64(n);\n    \n    svuint64_t result = svpow_n_u64_z(pg, input_n, input_x);\n    svbool_t cmp_result = svcmpeq_n_u64(pg, result, input_x);\n    \n    return svptest_any(svptrue_b64(), cmp_result);\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\nbool is_simple_power_simd(uint64_t x, uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input_x = svdup_n_u64(x);\n    svuint64_t input_n = svdup_n_u64(n);\n    \n    svuint64_t result = svptrue_b64();\n    svuint64_t power = svdup_n_u64(1);\n    \n    while (svptest_any(svptrue_b64(), pg)) {\n        pg = svwhilelt_b64(svindex_u64(0), input_x);\n        result = svmul_n_u64_z(pg, result, n);\n        power = svmul_n_u64_z(pg, power, n);\n    }\n    \n    svbool_t cmp = svcmpeq_n_u64(pg, result, input_x);\n    return svptest_all(svptrue_b64(), cmp);\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```cpp\nint hex_key_simd(const std::string & num){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    svuint8_t primes = svdup_n_u8(0);\n    svuint8_t hex_values = svld1_u8(pg, (const uint8_t*)num.c_str());\n    \n    svuint8_t is_prime = svdup_n_u8(0);\n    is_prime = svcmpge_n_u8_z(pg, hex_values, 2) && svcmpge_n_u8_z(pg, 16, hex_values);\n    is_prime = is_prime && (svcmpeq_n_u8_z(pg, hex_values, 2) || svcmpeq_n_u8_z(pg, hex_values, 3) || svcmpeq_n_u8_z(pg, hex_values, 5) || svcmpeq_n_u8_z(pg, hex_values, 7) || svcmpeq_n_u8_z(pg, hex_values, 11) || svcmpeq_n_u8_z(pg, hex_values, 13));\n    \n    count = svcntp_b8(pg, is_prime);\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```cpp\nint hex_key_simd(const std::string & num){\n    svbool_t pg;\n    svuint8_t input = svld1_u8(pg, (const uint8_t*)num.c_str());\n    svuint8_t primes = svdup_n_u8(0);\n    svuint8_t mask = svdup_n_u8(1);\n    \n    svuint8_t is_prime = svdup_n_u8(0);\n    is_prime = svorr_u8_z(pg, is_prime, is_prime, svcmpeq_n_u8(input, '2'));\n    is_prime = svorr_u8_z(pg, is_prime, is_prime, svcmpeq_n_u8(input, '3'));\n    is_prime = svorr_u8_z(pg, is_prime, is_prime, svcmpeq_n_u8(input, '5'));\n    is_prime = svorr_u8_z(pg, is_prime, is_prime, svcmpeq_n_u8(input, '7'));\n    is_prime = svorr_u8_z(pg, is_prime, is_prime, svcmpeq_n_u8(input, 'B'));\n    is_prime = svorr_u8_z(pg, is_prime, is_prime, svcmpeq_n_u8(input, 'D'));\n    \n    primes = svsel_u8(pg, primes, mask, is_prime);\n    \n    uint8_t count = svcntb();\n    svbool_t all_true = svwhilelt_b8(count, svcntb());\n    svuint8_t result = svaddv_u8_z(all_true, primes);\n    \n    return result[0];\n}\n```  "}
{"task_id": "SimdBench_100_SVE", "completion": "```cpp\nint hex_key_simd(const std::string & num){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    svuint8_t primes = svdup_n_u8(0);\n    svuint8_t hex_values = svld1_u8(pg, (const uint8_t*)num.c_str());\n    \n    svuint8_t is_prime = svdup_n_u8(0);\n    is_prime = svcmpge_n_u8_z(pg, hex_values, 2) && svcmpge_n_u8_z(pg, 16, hex_values);\n    is_prime = is_prime && (svcmpeq_n_u8_z(pg, hex_values, 2) || svcmpeq_n_u8_z(pg, hex_values, 3) || svcmpeq_n_u8_z(pg, hex_values, 5) || svcmpeq_n_u8_z(pg, hex_values, 7) || svcmpeq_n_u8_z(pg, hex_values, 11) || svcmpeq_n_u8_z(pg, hex_values, 13));\n    \n    count = svcntw(is_prime);\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```cpp\nint hex_key_simd(const std::string & num){\n    svbool_t pg;\n    svuint8_t primes = svdup_n_u8(0x00);\n    svuint8_t hex_values = svdup_n_u8(0x00);\n    \n    svuint8_t prime_mask = svdup_n_u8(0x00);\n    prime_mask = svadd_u8_z(pg, prime_mask, svdup_n_u8(0x02), svcmpeq_n_u8(num, svdup_n_u8(0x02)));\n    prime_mask = svadd_u8_z(pg, prime_mask, svdup_n_u8(0x04), svcmpeq_n_u8(num, svdup_n_u8(0x03)));\n    prime_mask = svadd_u8_z(pg, prime_mask, svdup_n_u8(0x08), svcmpeq_n_u8(num, svdup_n_u8(0x05)));\n    prime_mask = svadd_u8_z(pg, prime_mask, svdup_n_u8(0x10), svcmpeq_n_u8(num, svdup_n_u8(0x07)));\n    prime_mask = svadd_u8_z(pg, prime_mask, svdup_n_u8(0x20), svcmpeq_n_u8(num, svdup_n_u8(0x0B)));\n    prime_mask = svadd_u8_z(pg, prime_mask, svdup_n_u8(0x40), svcmpeq_n_u8(num, svdup_n_u8(0x0D)));\n    \n    for (size_t i = 0; i < num.size(); i += svcntb()) {\n        pg = svwhilelt_b8(i, num.size());\n        hex_values = svld1_u8(pg, (const uint8_t*)&num[i]);\n        primes = svsel_u8(prime_mask, primes, hex_values);\n    }\n    \n    svuint8_t result = svaddv_u8(svptrue_b8(), primes);\n    return svcntb();\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```cpp\nint hex_key_simd(const std::string & num){\n    svbool_t pg;\n    svuint8_t primes = svdup_n_u8(0x00);\n    svuint8_t input = svld1_u8(pg, (const uint8_t*)num.c_str());\n    \n    svuint8_t is_prime = svcmpge_n_u8(input, 0x02) & svcmpge_n_u8(0x0F, input);\n    is_prime = is_prime & (svdup_n_u8(0x01) ^ svdup_n_u8(0x02)) & (svdup_n_u8(0x01) ^ svdup_n_u8(0x04)) & (svdup_n_u8(0x01) ^ svdup_n_u8(0x06)) & (svdup_n_u8(0x01) ^ svdup_n_u8(0x0B)) & (svdup_n_u8(0x01) ^ svdup_n_u8(0x0D));\n    \n    svuint8_t count = svcnt_u8(is_prime);\n    \n    return svcntb(count);\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```cpp\nbool is_happy_simd(const std::string & s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    size_t len = s.length();\n    svbool_t pg = svwhilelt_b8(len-2, 0);\n    \n    for(size_t i = 0; i < len-2; i += svcntw()){\n        svuint8_t vec = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t all_unique = svdup_n_b8(true);\n        \n        for(size_t j = 0; j < svcntw(); ++j){\n            svuint8_t cmp = svcmpne_u8(vec, svext_u8_z(pg, vec, j));\n            all_unique = svand_b8(all_unique, cmp);\n        }\n        \n        if(!svptest_any(all_unique)){\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool is_happy_simd(const std::string & s){\n    if(s.length() < 3){\n        return false;\n    }\n\n    const int size = s.length();\n    const int remaining = size % svcntw();\n    const int full_vectors = size - remaining;\n\n    svbool_t pg = svptrue_b8();\n    svuint8_t mask = svdup_n_u8(1);\n\n    for(int i = 0; i < full_vectors; i += svcntw()){\n        svuint8_t input = svld1(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t shifted1 = svext_u8_z(pg, input, input, 1);\n        svuint8_t shifted2 = svext_u8_z(pg, input, input, 2);\n        svbool_t happy = svcmpne_n_u8(svand_n_u8(svcmpne_n_u8(input, shifted1), svcmpne_n_u8(shifted1, shifted2)), 0);\n        if(!svptest_any(svptrue_b8(), happy)){\n            return false;\n        }\n    }\n\n    if(remaining > 0){\n        svbool_t pg_remain = svwhilelt_b8(0, remaining);\n        svuint8_t input = svld1(pg_remain, reinterpret_cast<const uint8_t*>(&s[full_vectors]));\n        svuint8_t shifted1 = svext_u8_z(pg_remain, input, input, 1);\n        svuint8_t shifted2 = svext_u8_z(pg_remain, input, input, 2);\n        svbool_t happy = svcmpne_n_u8(svand_n_u8(svcmpne_n_u8(input, shifted1), svcmpne_n_u8(shifted1, shifted2)), 0);\n        if(!svptest_any(svptrue_b8(), happy)){\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool is_happy_simd(const std::string & s){\n    if(s.size() < 3){\n        return false;\n    }\n\n    size_t n = s.size();\n    svbool_t pg = svwhilelt_b8(n-2, 0);\n\n    for(size_t i = 0; i < n-2; i += svcntw()){\n        svbool_t pg_temp = svwhilelt_b8(i+svcntw(), 0);\n        svuint8_t vec = svld1(pg_temp, (const uint8_t*)&s[i], svcntw());\n        svuint8_t vec_next = svld1(pg_temp, (const uint8_t*)&s[i+1], svcntw());\n        svuint8_t vec_next_next = svld1(pg_temp, (const uint8_t*)&s[i+2], svcntw());\n        svbool_t all_distinct = svcmpeq_n_u8_m(pg_temp, vec, vec_next) && svcmpeq_n_u8_m(pg_temp, vec, vec_next_next) && svcmpeq_n_u8_m(pg_temp, vec_next, vec_next_next);\n        if(!svptest_any(all_distinct)){\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```cpp\nbool is_happy_simd(const std::string & s){\n    if(s.length() < 3){\n        return false;\n    }\n\n    size_t length = s.length();\n    svbool_t pg = svwhilelt_b8(length-2, 0);\n\n    for(size_t i = 0; i < length-2; i += svcntw()){\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t all_different = svdup_n_b8(true);\n\n        for(int j = 0; j < svcntw(); ++j){\n            svuint8_t chunk = svreinterpret_u8_u32(svindex_u32(i+j, 0));\n            svbool_t equal = svcmpeq_n_u8_z(all_different, input, svadd_u8_z(all_different, chunk, 1));\n            all_different = svand_z(all_different, all_different, equal);\n        }\n\n        if(!svptest_any(all_different)){\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```\nbool is_happy_simd(const std::string & s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    size_t n = s.length();\n    svbool_t pg = svwhilelt_b8(n-2, 0);\n    \n    for(size_t i = 0; i < n-2; i += svcntw()){\n        svbool_t pg_next = svwhilelt_b8(i+svcntw(), n-2);\n        \n        svuint8_t v0 = svld1(pg, &s[i], svpattern_u8());\n        svuint8_t v1 = svld1(pg, &s[i+1], svpattern_u8());\n        svuint8_t v2 = svld1(pg, &s[i+2], svpattern_u8());\n        \n        svbool_t all_different = svcmpeq_n_u8(pg, v0, v1) && svcmpeq_n_u8(pg, v1, v2) && svcmpeq_n_u8(pg, v0, v2);\n        \n        if(svptest_any(all_different)){\n            return false;\n        }\n        \n        pg = pg_next;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```\nbool prime_length_simd(const std::string & str){\n    size_t length = str.length();\n    svbool_t pg = svptrue_b64();\n    svuint64_t indices = svindex_u64(0, 1);\n    svbool_t prime_check = svdup_n_b64(length) == indices;\n    svbool_t result = svptest_any(svptrue_b64(), prime_check);\n    return svptest_all(pg, result);\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool prime_length_simd(const std::string & str){\n    size_t length = str.length();\n    svbool_t pg = svptrue_b64();\n    svuint64_t indices = svindex_u64(0, 1);\n    svbool_t mask = svwhilelt_b64_u64(indices, length);\n    svbool_t prime = svdup_n_b64(length == 2 || length == 3);\n    for (size_t i = 2; i * i <= length; ++i) {\n        svbool_t divisible = svdup_n_b64(length % i == 0);\n        prime = svand_z_b64(prime, svnot_z(divisible, mask), pg);\n    }\n    return svptest_any(svptrue_b64(), prime);\n}\n```  "}
{"task_id": "SimdBench_102_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool prime_length_simd(const std::string & str){\n    size_t length = str.length();\n    if (length <= 1) {\n        return false;\n    }\n    \n    svbool_t pg = svptrue_b8();\n    svuint64_t indices = svindex_u64(0, 1);\n    svbool_t prime = svdup_n_b8(1);\n    \n    for (size_t i = 2; i * i <= length; i++) {\n        svbool_t cond = svcmpeq_n_u64(pg, length % i, 0);\n        prime = svand_z(pg, prime, svnot_z(pg, cond));\n    }\n    \n    return svptest_any(prime);\n}\n```  "}
{"task_id": "SimdBench_102_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str){\n    size_t length = str.length();\n    svbool_t pg = svptrue_b8();\n    svbool_t pg_all_true = svdup_n_b8(true);\n    svbool_t pg_all_false = svdup_n_b8(false);\n\n    svuint64_t indices = svindex_u64(0, 1);\n    svbool_t pg_mask = svwhilelt_b64_u64(indices, length);\n\n    svbool_t pg_result = svwhilelt_b8_b64(pg, length);\n    svbool_t pg_prime = svdup_n_b8(false);\n\n    while (svptest_any(pg_result)) {\n        svbool_t pg_active = svptrue_b8();\n        svuint64_t active_indices = svindex_u64(0, 1);\n        svbool_t pg_active_mask = svwhilelt_b64_u64(active_indices, length);\n\n        svbool_t pg_length_prime = svcmpeq_n_u64(pg_active_mask, length);\n        svbool_t pg_is_prime = svdup_n_b8(false);\n\n        svbool_t pg_not_length_prime = svnot_b(pg_length_prime);\n        svbool_t pg_not_prime = svnot_b(pg_prime);\n\n        svbool_t pg_check_prime = svand_b(pg_not_length_prime, pg_not_prime);\n\n        svbool_t pg_check_prime_all = svwhilelt_b8_b64(pg_check_prime, length);\n        svbool_t pg_check_prime_active = svand_b(pg_check_prime_all, pg_active_mask);\n\n        svuint64_t prime_indices = svsel_u64(pg_check_prime_active, active_indices, svdup_n_u64(0));\n        svbool_t pg_prime_indices = svcmpne_n_u64(prime_indices, 0);\n\n        svbool_t pg_prime_indices_any = svptest_any(pg_prime_indices);\n\n        if (svptest_any(pg_prime_indices_any)) {\n            svbool_t pg_prime_length = svdup_n_b8(true);\n            svbool_t pg_not_prime_length = svnot_b(pg_prime_length);\n            svbool_t pg_not_prime_length_all = svsel_b(pg_prime_indices_any, pg_not_prime_length, pg_prime_length);\n\n            svbool_t pg_not_prime_length_any = svptest_any(pg_not_prime_length_all);\n            if (svptest_any(pg_not_prime_length_any)) {\n                svbool_t pg_not_prime_length_active = svand_b(pg_not_prime_length_any, pg_active_mask);\n                svbool_t pg_not_prime_length_active_all = svsel_b(pg_not_prime_length_active, pg_all_true, pg_all_false);\n\n                svbool_t pg_not_prime_length_active_any = svptest_any(pg_not_prime_length_active_all);\n                if (svptest_any(pg_not_prime_length_active_any)) {\n                    svbool_t pg_not_prime_length_active_indices = svsel_b(pg_not_prime_length_active_any, active_indices, svdup_n_u64(0));\n                    svbool_t pg_not_prime_length_active_indices_all = svsel_b(pg_not_prime_length_active_indices, pg_all_true, pg_all_false);\n\n                    svbool_t pg_not_prime_length_active_indices_any = svptest_any(pg_not_prime_length_active_indices_all);\n                    if (svptest_any(pg_not_prime_length_active_indices_any)) {\n                        svbool_t pg_not_prime_length_active_indices_prime = svand_b(pg_not_prime_length_active_indices_any, pg_prime_indices);\n                        svbool_t pg_not_prime_length_active_indices_prime_all = svsel_b(pg_not_prime_length_active_indices_prime, pg_all_true, pg_all_false);\n\n                        svbool_t pg_not_prime_length_active_indices_prime_any = svptest_any(pg_not_prime_length_active_indices_prime_all);\n                        if (svptest_any(pg_not_prime_length_active_indices_prime_any)) {\n                            svbool_t pg_not_prime_length_active_indices_prime_indices = svsel_b(pg_not_prime_length_active_indices_prime_any, prime_indices, svdup_n_u64(0));\n                            svbool_t pg_not_prime_length_active_indices_prime_indices_all = svsel_b(pg_not_prime_length_active_indices_prime_indices, pg_all_true, pg_all_false);\n\n                            svbool_t pg_not_prime_length_active_indices_prime_indices_any = svptest_any(pg_not_prime_length_active_indices_prime_indices_all);\n                            if (svptest_any(pg_not_prime_length_active_indices_prime_indices_any)) {\n                                svbool_t pg_not_prime_length_active_indices_prime_indices_result = svsel_b(pg_not_prime_length_active_indices_prime_indices_any, pg_all_false, pg_all_true);\n                                pg_prime = svorr_b(pg_prime, pg_not_prime_length_active_indices_prime_indices_result);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        pg_result = svwhilelt_b8_b64(pg, length);\n    }\n\n    bool result = svptest_any(pg_prime);\n    return result;\n}\n```  "}
{"task_id": "SimdBench_102_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nbool prime_length_simd(const std::string & str){\n    size_t length = str.length();\n    svbool_t pg = svptrue_b64();\n    svuint64_t indices = svindex_u64(0, 1);\n    svbool_t mask = svwhilelt_b64_u64(indices, length);\n    svuint64_t divisors = svindex_u64(0, 1);\n    svbool_t prime = svdup_n_b64(true);\n\n    while (svptest_any(mask)) {\n        svuint64_t current_divisor = svadd_n_u64_z(pg, divisors, 2);\n        svbool_t divisible = svcmpeq_n_u64_z(pg, length, 0);\n        prime = svand_z(pg, prime, svnot_z(pg, divisible));\n        mask = svwhilelt_b64_u64(current_divisor, length);\n        divisors = svadd_n_u64_z(pg, divisors, 1);\n    }\n\n    return svptest_all(prime);\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```\nstd::string solve_simd(uint64_t N){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input = svdup_n_u64(N);\n    svuint64_t sum = svwhilelt_b64_u64(0, N);\n    svuint64_t result = svindex_u64(0, 1);\n    \n    while (svptest_any(svptrue_b64(), sum)) {\n        svuint64_t digit = svmul_n_u64_z(pg, sum, 1);\n        result = svadd_n_u64_z(pg, result, 1);\n        sum = svdiv_n_u64_z(pg, sum, 2);\n    }\n    \n    svuint64_t mask = svdup_n_u64(1);\n    svuint64_t output = svand_n_u64_z(pg, result, 1);\n    \n    for (int i = 1; i < 64; i++) {\n        mask = svlsl_n_u64_z(pg, mask, 1);\n        svuint64_t temp = svand_n_u64_z(pg, result, mask);\n        output = svorr_u64_z(pg, output, temp);\n    }\n    \n    return std::bitset<64>(output).to_string();\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```\nstd::string solve_simd(uint64_t N){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input = svdup_n_u64(N);\n    svuint64_t sum = svwhilelt_b64_u64(0, N, pg);\n    svuint64_t result = svaddv_u64(pg, sum);\n\n    std::string binary_result = std::bitset<64>(result).to_string();\n    return binary_result.substr(binary_result.find('1'));\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```\nstd::string solve_simd(uint64_t N){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input = svdup_n_u64(N);\n    svuint64_t sum = svwhilelt_b64_u64(0, N);\n    svuint64_t result = svindex_u64(0, 1);\n    svuint64_t zero = svdup_n_u64(0);\n\n    while (svptest_any(svptrue_b64(), svcmpne_n_u64(sum, zero))) {\n        svuint64_t digit = svmul_n_u64(svld1(pg, &input), 1);\n        result = svadd_n_u64(result, digit);\n        input = svdiv_n_u64(input, 10);\n        sum = svadd_n_u64(sum, svld1(pg, &digit));\n    }\n\n    svuint64_t mask = svdup_n_u64(1);\n    svuint64_t binary = svdup_n_u64(0);\n    while (svptest_any(svptrue_b64(), svcmpne_n_u64(result, zero))) {\n        svuint64_t remainder = svand_n_u64(result, 1);\n        binary = svorr(binary, svlsl_n_u64(remainder, mask), mask);\n        result = srl(result, mask);\n        mask = svlsl_n_u64(mask, 1);\n    }\n\n    uint64_t binary_array[svcntd()];\n    svst1(pg, binary_array, binary);\n    \n    std::string binary_str = \"\";\n    for (int i = 0; i < svcntd(); i++) {\n        binary_str += std::to_string(binary_array[i]);\n    }\n    \n    return binary_str;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```\nstd::string solve_simd(uint64_t N){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input = svdup_n_u64(N);\n    svuint64_t sum = svaddv_u64_z(pg, svpopcount_u64_z(pg, input));\n    \n    std::string result = \"\";\n    while (sum > 0) {\n        result = std::to_string(sum % 2) + result;\n        sum /= 2;\n    }\n    \n    return result.empty() ? \"0\" : result;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```\nstd::string solve_simd(uint64_t N){\n    svbool_t pg = svptrue_b64();\n    svuint64_t input = svdup_n_u64(N);\n    svuint64_t sum = svaddv_u64_z(pg, svpopcount_u64_z(pg, input));\n    \n    std::string result = \"\";\n    while (sum > 0) {\n        result = std::to_string(sum % 2) + result;\n        sum /= 2;\n    }\n    \n    return result.empty() ? \"0\" : result;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```cpp\nint add_simd(std::vector<int> lst){\n    int result = 0;\n    svbool_t pg = svptrue_b32();\n    svint32_t sum = svdup_s32(0);\n\n    for (size_t i = 1; i < lst.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &lst[i]);\n        svbool_t mask = svcmpeq_s32(pg, svindex_s32(0, 1), 0);\n        sum = svadd_s32_m(sum, sum, svsel_s32(mask, vec, svdup_s32(0)), pg);\n    }\n\n    result = svaddv_s32(pg, sum);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```cpp\nint add_simd(std::vector<int> lst){\n    int result = 0;\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1_s32(pg, lst.data());\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t even_elements = svtrn1_s32(vec, vec);\n    svint32_t odd_elements = svtrn2_s32(vec, vec);\n    svint32_t selected_elements = svsel_s32(pg, odd_elements, even_elements, svcmpeq_s32(indices, 1));\n    result = svaddv_s32(pg, selected_elements);\n    return result;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```cpp\nint add_simd(std::vector<int> lst){\n    int result = 0;\n    svbool_t pg = svptrue_b32();\n    svint32_t acc = svdup_s32(0);\n\n    for (size_t i = 1; i < lst.size(); i += svcntw()) {\n        svint32_t vec = svld1(pg, &lst[i]);\n        svbool_t even = svcmpeq_n_s32(pg, i % 2, 1);\n        svint32_t even_elements = svsel(even, vec, svdup_s32(0));\n        acc = svadd_m(acc, acc, even_elements, even);\n    }\n\n    result = svaddv_s32(pg, acc);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```cpp\nint add_simd(std::vector<int> lst){\n    int result = 0;\n    svbool_t pg = svptrue_b32();\n    svint32_t acc = svdup_s32(0);\n\n    for (size_t i = 1; i < lst.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &lst[i]);\n        svbool_t pg_even = svptrue_b32();\n        svbool_t pg_odd = svnot_b32(pg_even);\n        svint32_t even_elements = svindex_s32(0, 2);\n        svint32_t odd_elements = svindex_s32(1, 2);\n        svint32_t even = svsel_s32(pg_even, svtrn1_s32(even_elements, odd_elements), svdup_n_s32(0));\n        acc = svadd_s32_x(pg, acc, svsel_s32(pg_odd, even, svdup_n_s32(0)));\n    }\n\n    result = svaddv_s32(pg, acc);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```cpp\nint add_simd(std::vector<int> lst){\n    int result = 0;\n    svbool_t pg = svptrue_b32();\n    svint32_t sum = svdup_s32(0);\n\n    for (size_t i = 1; i < lst.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &lst[i]);\n        svbool_t even_indices = svcmpeq_s32(pg, svindex_s32(0, 1), 0);\n        svbool_t odd_indices = svnot_z(svptrue_b32(), even_indices);\n        svint32_t even_elements = svsel_s32(odd_indices, vec, svdup_s32(0));\n        sum = svadd_s32_z(pg, sum, even_elements);\n    }\n\n    result = svaddv_s32(svptrue_b32(), sum);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s){\n    std::string result = s;\n    size_t size = s.size();\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t shifted = svmul_n_u8_z(pg, input, 2);\n        svuint8_t rotated = svadd_n_u8_z(pg, shifted, 2);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), rotated);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s){\n    std::string result = s;\n    size_t size = s.size();\n    svbool_t pg = svptrue_b8();\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t shift = svdup_n_u8(2 * 2);\n        svuint8_t encrypted = svmad_u8_z(pg, input, shift, input);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), encrypted);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s){\n    std::string result = s;\n    size_t size = s.size();\n    svbool_t pg = svwhilelt_b8(size, size);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t shifted = svmul_n_u8_z(pg, input, 2);\n        svuint8_t rotated = svadd_n_u8_z(pg, shifted, 2);\n        svst1_u8(pg, &result[i], rotated);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string & s){\n    std::string result = s;\n    size_t size = s.size();\n    svbool_t pg = svwhilelt_b8(size, size);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t offset = svdup_n_u8(2 * 2);\n        svuint8_t encrypted = svmad_u8_z(pg, input, offset, input);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), encrypted);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::string encrypt_simd(const std::string & s){\n    std::string result = s;\n    size_t size = s.size();\n\n    svbool_t pg = svptrue_b8();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t shifted = svmul_n_u8_z(pg, input, 2);\n        svuint8_t rotated = svadd_n_u8_z(pg, shifted, 2);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), rotated);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```\nstd::string encode_simd(const std::string & message){\n    std::string result = message;\n    svbool_t pg = svptrue_b8();\n    size_t length = message.length();\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&message[i]));\n        svuint8_t upper_case = svmov_n_u8('A');\n        svuint8_t lower_case = svmov_n_u8('a');\n        svuint8_t vowels = svdup_n_u8(0);\n\n        vowels = svsel_u8_z(pg, svdup_n_u8('A'), vowels, svcmpeq_n_u8(input, 'A'));\n        vowels = svsel_u8_z(pg, svdup_n_u8('E'), vowels, svcmpeq_n_u8(input, 'E'));\n        vowels = svsel_u8_z(pg, svdup_n_u8('I'), vowels, svcmpeq_n_u8(input, 'I'));\n        vowels = svsel_u8_z(pg, svdup_n_u8('O'), vowels, svcmpeq_n_u8(input, 'O'));\n        vowels = svsel_u8_z(pg, svdup_n_u8('U'), vowels, svcmpeq_n_u8(input, 'U'));\n\n        svuint8_t swapped_case = svsel_u8_z(pg, svsub_u8(upper_case, svsub_u8(input, lower_case)), input, svcmpge_u8(input, lower_case));\n        svuint8_t encoded = svsel_u8_z(pg, svadd_u8(swapped_case, svdup_n_u8(2)), input, svcmpge_u8(input, vowels));\n\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), encoded);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nstd::string encode_simd(const std::string & message){\n    std::string result = message;\n    svbool_t pg = svptrue_b8();\n    size_t length = message.length();\n\n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&message[i]));\n        svuint8_t upper_case = svsub_u8_z(pg, svand_n_u8_z(pg, input, 0x5F), 0x41);\n        svuint8_t lower_case = svsub_u8_z(pg, input, 0x61);\n        svuint8_t is_vowel = svsel_u8_z(pg, svcmpge_n_u8_z(pg, input, 0x41), svcmpge_n_u8_z(pg, input, 0x61), svdup_n_u8(0));\n        svuint8_t vowel_offset = svadd_u8_z(pg, svsel_u8_z(pg, svdup_n_u8(2), svdup_n_u8(0), svcmpeq_n_u8(is_vowel, 1)), is_vowel);\n        svuint8_t swapped_case = svsel_u8_z(pg, svsel_u8_z(pg, upper_case, lower_case, svcmpge_n_u8_z(pg, input, 0x41)), input, svcmpeq_n_u8(is_vowel, 0));\n        svuint8_t encoded = svadd_u8_z(pg, swapped_case, vowel_offset);\n        svst1_u8(pg, &result[i], encoded);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```\nstd::string encode_simd(const std::string & message){\n    std::string result = message;\n    svbool_t pg = svptrue_b8();\n    size_t length = message.length();\n\n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&message[i]));\n        svuint8_t upper_case = svmov_n_u8('A');\n        svuint8_t lower_case = svmov_n_u8('a');\n        svuint8_t mask_upper = svcmpge_n_u8(pg, input, 'A');\n        svuint8_t mask_lower = svcmpge_n_u8(pg, input, 'a');\n        svuint8_t is_upper = svand_n_u8(mask_upper, 1);\n        svuint8_t is_lower = svand_n_u8(mask_lower, 1);\n        svuint8_t diff = svsub_n_u8(pg, input, 'A');\n        svuint8_t is_vowel = svdup_n_u8(0);\n        is_vowel = svorr(is_vowel, svcmpeq_n_u8(pg, input, 'A'), is_vowel);\n        is_vowel = svorr(is_vowel, svcmpeq_n_u8(pg, input, 'E'), is_vowel);\n        is_vowel = svorr(is_vowel, svcmpeq_n_u8(pg, input, 'I'), is_vowel);\n        is_vowel = svorr(is_vowel, svcmpeq_n_u8(pg, input, 'O'), is_vowel);\n        is_vowel = svorr(is_vowel, svcmpeq_n_u8(pg, input, 'U'), is_vowel);\n        svuint8_t vowel_offset = svadd_n_u8(pg, input, 2);\n        svuint8_t new_char = svsel(is_vowel, vowel_offset, input);\n        svuint8_t swapped_case = svsel(is_upper, svsub_u8_z(pg, upper_case, diff), svsub_u8_z(pg, lower_case, diff));\n        svuint8_t encoded_char = svsel(is_vowel, new_char, swapped_case);\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), encoded_char);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```\nstd::string encode_simd(const std::string & message){\n    std::string result = message;\n    svbool_t pg = svptrue_b8();\n    size_t length = message.length();\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&message[i]));\n        svuint8_t upper_case = svmov_n_u8('A');\n        svuint8_t lower_case = svmov_n_u8('a');\n        svuint8_t vowels = svdup_n_u8(0);\n        vowels = svadd_n_u8(vowels, 'A' - 2); // 'A' - 2 = 'Y'\n        vowels = svadd_n_u8(vowels, 'E' - 2); // 'E' - 2 = 'C'\n        vowels = svadd_n_u8(vowels, 'I' - 2); // 'I' - 2 = 'G'\n        vowels = svadd_n_u8(vowels, 'O' - 2); // 'O' - 2 = 'M'\n        vowels = svadd_n_u8(vowels, 'U' - 2); // 'U' - 2 = 'S'\n\n        svuint8_t is_upper = svcmpge_n_u8(input, 'A') && svcmplt_n_u8(input, 'Z');\n        svuint8_t is_lower = svcmpge_n_u8(input, 'a') && svcmplt_n_u8(input, 'z');\n        svuint8_t is_vowel = svcmpeq_n_u8(vowels, input);\n\n        svuint8_t swapped_case = svsel(is_upper, svsub_u8_z(pg, input, upper_case), svsub_u8_z(pg, input, lower_case));\n        svuint8_t encoded = svsel(is_vowel, vowels, swapped_case);\n\n        svst1_u8(pg, reinterpret_cast<uint8_t*>(&result[i]), encoded);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```\nstd::string encode_simd(const std::string & message){\n    std::string result = message;\n    svbool_t pg = svptrue_b8();\n    size_t length = message.length();\n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t input = svld1_u8(pg, (const uint8_t*)&message[i]);\n        \n        // Swap case\n        svuint8_t lower_case_mask = svcmpge_n_u8(pg, input, 'a');\n        svuint8_t upper_case_mask = svcmpge_n_u8(pg, input, 'A') && svcmplt_n_u8(pg, input, 'a');\n        svuint8_t case_mask = svsel_u8(pg, lower_case_mask, svsub_u8_z(pg, input, 32), input);\n        case_mask = svsel_u8(pg, upper_case_mask, svadd_u8_z(pg, input, 32), case_mask);\n        \n        // Replace vowels\n        svuint8_t vowel_mask = svdup_n_u8('a') | svdup_n_u8('e') | svdup_n_u8('i') | svdup_n_u8('o') | svdup_n_u8('u') |\n                               svdup_n_u8('A') | svdup_n_u8('E') | svdup_n_u8('I') | svdup_n_u8('O') | svdup_n_u8('U');\n        svuint8_t replacement = svadd_u8_z(pg, case_mask, 2);\n        svuint8_t result_mask = svsel_u8(pg, svcmpeq_n_u8(vowel_mask, case_mask), replacement, case_mask);\n        \n        svst1_u8(pg, (uint8_t*)&result[i], result_mask);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```\nbool check_dict_case_simd(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    svbool_t pg = svptrue_b8();\n    svbool_t all_lower = svptrue_b8();\n    svbool_t all_upper = svptrue_b8();\n    \n    for(auto const& pair : dict){\n        std::string key = pair.first;\n        svbool_t key_lower = svdup_n_b8(std::all_of(key.begin(), key.end(), ::islower));\n        svbool_t key_upper = svdup_n_b8(std::all_of(key.begin(), key.end(), ::isupper));\n        \n        all_lower = svand_b8(all_lower, key_lower);\n        all_upper = svand_b8(all_upper, key_upper);\n    }\n    \n    return svptest_any(all_lower, pg) || svptest_any(all_upper, pg);\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```\nbool check_dict_case_simd(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    svbool_t pg = svptrue_b8();\n    svbool_t all_lower = svptrue_b8();\n    svbool_t all_upper = svptrue_b8();\n    \n    for(auto const& pair : dict){\n        std::string key = pair.first;\n        bool is_lower = true;\n        bool is_upper = true;\n        \n        for(char c : key){\n            is_lower = is_lower && islower(c);\n            is_upper = is_upper && isupper(c);\n        }\n        \n        all_lower = svand_b_z(pg, all_lower, svdup_n_b8(is_lower));\n        all_upper = svand_b_z(pg, all_upper, svdup_n_b8(is_upper));\n    }\n    \n    return svptest_any(all_lower) || svptest_any(all_upper);\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```\nbool check_dict_case_simd(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n\n    svbool_t pg = svptrue_b8();\n    svbool_t all_lower = svptrue_b8();\n    svbool_t all_upper = svptrue_b8();\n\n    for(auto const& entry : dict){\n        std::string key = entry.first;\n        svbool_t key_lower = svwhilelt_b8<char>(key.c_str(), key.c_str() + key.size(), 'a');\n        svbool_t key_upper = svwhilelt_b8<char>(key.c_str(), key.c_str() + key.size(), 'A');\n\n        all_lower = svand_b8(all_lower, key_lower);\n        all_upper = svand_b8(all_upper, key_upper);\n    }\n\n    return svptest_any(all_lower) || svptest_any(all_upper);\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```\nbool check_dict_case_simd(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    svbool_t pg = svptrue_b8();\n    svbool_t all_lower = svptrue_b8();\n    svbool_t all_upper = svptrue_b8();\n    \n    for(auto const& entry : dict){\n        std::string key = entry.first;\n        bool is_lower = true;\n        bool is_upper = true;\n        \n        for(char c : key){\n            is_lower = is_lower && islower(c);\n            is_upper = is_upper && isupper(c);\n        }\n        \n        all_lower = svand_b_z(pg, all_lower, svdup_n_b8(is_lower));\n        all_upper = svand_b_z(pg, all_upper, svdup_n_b8(is_upper));\n    }\n    \n    return svptest_any(all_lower) || svptest_any(all_upper);\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```\nbool check_dict_case_simd(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    svbool_t pg = svptrue_b8();\n    svbool_t all_lower = svptrue_b8();\n    svbool_t all_upper = svptrue_b8();\n    \n    for(auto const& entry : dict){\n        std::string key = entry.first;\n        svbool_t key_is_lower = svwhilelt_b8<char>(key.c_str(), key.c_str() + key.size(), 'a');\n        svbool_t key_is_upper = svwhilelt_b8<char>(key.c_str(), key.c_str() + key.size(), 'A');\n        \n        all_lower = svand_b8(all_lower, key_is_lower);\n        all_upper = svand_b8(all_upper, key_is_upper);\n    }\n    \n    return svptest_any(all_lower, pg) || svptest_any(all_upper, pg);\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```\nstd::vector<int> count_up_to_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svuint32_t primes = svindex_u32(pg, 0);\n    svuint32_t result = svdup_n_u32(0);\n    \n    for (int i = 2; i < n; i++) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svbool_t is_prime = svdup_n_b32(1);\n        \n        for (int j = 2; j*j <= i; j++) {\n            if (i % j == 0) {\n                is_prime = svdup_n_b32(0);\n                break;\n            }\n        }\n        \n        svuint32_t prime_mask = svsel_u32(is_prime, primes, svdup_n_u32(0));\n        result = svsel_u32(is_prime, svadd_u32_z(pg, result, prime_mask), result);\n    }\n    \n    int count = svcntw();\n    std::vector<int> output(count);\n    svst1_u32(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```cpp\nstd::vector<int> count_up_to_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svuint32_t primes = svindex_u32(pg, 0);\n    svuint32_t result = svdup_n_u32(0);\n    \n    for (int i = 2; i < n; i++) {\n        svbool_t prime_check = svdup_n_b32(1);\n        for (int j = 2; j*j <= i; j++) {\n            if (i % j == 0) {\n                prime_check = svdup_n_b32(0);\n                break;\n            }\n        }\n        svuint32_t current_num = svdup_n_u32(i);\n        svbool_t match = svcmpeq_n_u32(prime_check, 1);\n        result = svsel_u32(match, current_num, result);\n    }\n    \n    int count = svcntw();\n    std::vector<int> output(count);\n    svst1_u32(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```cpp\nstd::vector<int> count_up_to_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svuint32_t primes = svindex_u32(0, 1);\n    svuint32_t result = svdup_n_u32(0);\n\n    for (int i = 2; i < n; i++) {\n        svbool_t pg_temp = svdup_n_b32(1);\n        for (int j = 2; j*j <= i; j++) {\n            if (i % j == 0) {\n                pg_temp = svdup_n_b32(0);\n                break;\n            }\n        }\n        svuint32_t mask = svwhilelt_b32(0, n);\n        pg_temp = svand_b32(pg_temp, mask);\n        svuint32_t temp = svsel_u32(pg_temp, primes, result);\n        result = svsel_u32(pg_temp, svadd_n_u32(temp, i, pg), result);\n    }\n\n    int count = svcntw();\n    std::vector<int> output(count);\n    svst1_s32(pg, &output[0], result);\n\n    return output;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```cpp\nstd::vector<int> count_up_to_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svuint32_t primes = svindex_u32(pg, 0);\n    svuint32_t result = svdup_n_u32(0);\n    svuint32_t mask = svdup_n_u32(1);\n\n    for (int i = 2; i < n; i++) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svuint32_t div = svdup_n_u32(i);\n        svuint32_t rem = svmul_n_u32(primes, i);\n        svbool_t is_prime = svcmpeq_n_u32(rem, 0);\n        svuint32_t new_result = svsel_u32(is_prime, svadd_n_u32(result, mask), result);\n        result = svsel_u32(is_prime, new_result, result);\n        primes = svsel_u32(is_prime, result, primes);\n    }\n\n    int count = svcntw();\n    std::vector<int> output(count);\n    svst1_u32(pg, &output[0], result);\n\n    return output;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```cpp\nstd::vector<int> count_up_to_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svuint32_t primes = svindex_u32(pg, 0);\n    svuint32_t result = svdup_n_u32(0);\n    \n    for (int i = 2; i < n; i++) {\n        svbool_t prime_mask = svdup_n_b32(1);\n        for (int j = 2; j*j <= i; j++) {\n            if (i % j == 0) {\n                prime_mask = svand_n_b32(prime_mask, 0);\n                break;\n            }\n        }\n        svuint32_t prime_check = svwhilelt_b32(0, i);\n        svbool_t prime = svand_b32(prime_mask, svcmpeq_n_u32(prime_check, i));\n        result = svsel_u32(prime, svindex_u32(pg, i), result);\n    }\n    \n    int count = svcntw();\n    std::vector<int> output(count);\n    svst1_u32(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```cpp\nint count_upper_simd(const std::string & s){\n    int count = 0;\n    svbool_t pg = svptrue_b8();\n    size_t length = s.length();\n    \n    for(size_t i = 0; i < length; i += svcntw()) {\n        svuint8_t chars = svld1_u8(pg, (const uint8_t*)&s[i]);\n        svbool_t upper_mask = svcmpge_n_u8(pg, chars, 'A') && svcmple_n_u8(pg, chars, 'Z');\n        svbool_t even_indices = svcmpeq_n_siz(pg, svindex_siz(0, 1), 0);\n        svbool_t combined_mask = upper_mask && even_indices;\n        count += svcntw() - svclb(combined_mask);\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```cpp\nint count_upper_simd(const std::string & s){\n    svbool_t pg = svptrue_b8();\n    svuint8_t vowels = svdup_n_u8(0x55); // Uppercase vowels in binary: A=01000001, E=01000101, I=01001001, O=01001111, U=01010101\n    svuint8_t result = svdup_n_u8(0);\n\n    for (size_t i = 0; i < s.size(); i += svcntb()) {\n        svuint8_t input = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t uppercase = svand_u8_z(pg, input, svdup_n_u8(0x20)); // Mask to convert lowercase to uppercase\n        svuint8_t is_vowel = svqtb_u8(uppercase, vowels); // Check if the character is an uppercase vowel\n        svuint8_t mask = svindex_u8(pg, i); // Mask to select even indices\n        result = svadd_u8_z(pg, result, svand_u8_z(mask, is_vowel, is_vowel));\n    }\n\n    uint8_t count = svaddv_u8(svptrue_b8(), result);\n    return count;\n}\n```  "}
{"task_id": "SimdBench_109_SVE", "completion": "```cpp\nint count_upper_simd(const std::string & s){\n    svbool_t pg;\n    svuint8_t vowels = svdup_n_u8(0x55); // Bitmask for uppercase vowels (A, E, I, O, U)\n    int count = 0;\n\n    for (size_t i = 0; i < s.size(); i += svcntb()) {\n        pg = svwhilelt_b8(i, s.size());\n        svuint8_t input = svld1(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n\n        svuint8_t uppercase = svmovlb_u8(input) & vowels;\n        svbool_t even_indices = svcmpeq_n_siz(pg, i % 2, 0);\n\n        count += svcntw(even_indices) - svcntw(svand_z(svptrue_b8(), uppercase, even_indices));\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```cpp\nint count_upper_simd(const std::string & s){\n    svbool_t pg = svptrue_b8();\n    svuint8_t vowels = svdup_n_u8(0x55); // Uppercase vowels mask: A=0x41, E=0x45, I=0x49, O=0x4F, U=0x55\n    svint32_t count = svdup_n_s32(0);\n\n    for (size_t i = 0; i < s.size(); i += svcntb()) {\n        svuint8_t str_chars = svld1(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svbool_t upper_mask = svcmpge_n_u8(pg, str_chars, 0x41) && svcmplt_n_u8(pg, str_chars, 0x5B);\n        svbool_t even_indices = svindex_b(pg, i) % 2 == 0;\n        svbool_t mask = upper_mask && even_indices;\n        count = svaddv_s32_z(pg, count, svpopcount_m(pg, mask));\n    }\n\n    return svaddv_s32(svptrue_s32(), count);\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```cpp\nint count_upper_simd(const std::string & s){\n    svbool_t pg = svptrue_b8();\n    svuint8_t vowels = svdup_n_u8(0x55); // 'A', 'E', 'I', 'O', 'U' in binary\n    svuint8_t result = svdup_n_u8(0);\n\n    for (size_t i = 0; i < s.size(); i += svcntb()) {\n        svuint8_t input = svld1(pg, reinterpret_cast<const uint8_t*>(&s[i]));\n        svuint8_t upper_mask = svcmpge_n_u8(input, 'A') & svcmplt_n_u8(input, 'Z');\n        svuint8_t even_indices = svindex_u8(i) & 1;\n        svuint8_t mask = upper_mask & even_indices;\n        result = result + svcnt_u32(svpopcnt(mask & vowels));\n    }\n\n    uint8_t count = svaddv_u8(pg, result);\n    return count;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```\nstd::vector<int> make_a_pile_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svint32_t stones = svdup_n_s32(n);\n    svint32_t result = stones;\n    \n    for(int i=1; i<n; i++){\n        stones = (n % 2 == 0) ? svadd_n_s32_z(pg, stones, 2) : svadd_n_s32_z(pg, stones, 2);\n        svbool_t pg_next = svwhilelt_b32(i, n);\n        result = svadd_n_s32_z(pg_next, result, stones);\n    }\n    \n    std::vector<int> output(n);\n    svst1_s32(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```\nstd::vector<int> make_a_pile_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svint32_t stones = svdup_n_s32(n);\n    svint32_t result = stones;\n    \n    for(int i=1; i<n; i++){\n        stones = (n % 2 == 0) ? svadd_n_s32_z(pg, stones, 2) : svadd_n_s32_z(pg, stones, 2);\n        svbool_t pg_next = svwhilelt_b32(i, n);\n        result = svadd_n_s32_z(pg_next, result, stones);\n    }\n    \n    std::vector<int> output(n);\n    svst1_s32(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```\nstd::vector<int> make_a_pile_simd(int n){\n    std::vector<int> result(n);\n    svbool_t pg = svptrue_b32();\n    svint32_t stones = svdup_s32(n);\n    \n    for (int i = 0; i < n; i++) {\n        svint32_t next_stones = svmad_s32_z(pg, svindex_s32(0, 1), stones, stones);\n        svst1_s32(pg, &result[i], next_stones);\n        stones = next_stones;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```\nstd::vector<int> make_a_pile_simd(int n){\n    std::vector<int> result(n);\n    svbool_t pg = svptrue_b32();\n    svint32_t stones = svdup_s32(n);\n    \n    for (int i = 0; i < n; i++) {\n        svint32_t next_stones = svadd_s32_z(pg, stones, svindex_s32(1, 1));\n        svst1_s32(pg, &result[i], next_stones);\n        stones = next_stones;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```\nstd::vector<int> make_a_pile_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svint32_t stones = svdup_n_s32(n);\n    svint32_t result = stones;\n    \n    for(int i=1; i<n; i++){\n        stones = (n % 2 == 0) ? svadd_n_s32_z(pg, stones, 2) : svadd_n_s32_z(pg, stones, 2);\n        svbool_t pg_next = svwhilelt_b32(i, n);\n        result = svadd_n_s32_z(pg_next, result, stones);\n    }\n    \n    std::vector<int> output(n);\n    svst1_s32(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```\nstd::string rounded_avg_simd(int64_t n, int64_t m){\n    if(n > m){\n        return \"-1\";\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t indices = svindex_s64(pg, n);\n    svint64_t sum = svadd_n_s64_z(pg, indices, m - n, pg);\n    svint64_t avg = svdiv_n_s64_z(pg, sum, m - n + 1, pg);\n    int64_t rounded_avg = svrinta_s64_z(pg, avg, pg);\n    \n    std::string binary = \"\";\n    while(rounded_avg > 0){\n        binary = std::to_string(rounded_avg % 2) + binary;\n        rounded_avg /= 2;\n    }\n    \n    return binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```\nstd::string rounded_avg_simd(int64_t n, int64_t m){\n    if(n > m){\n        return \"-1\";\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t indices = svindex_s64(pg, n);\n    svint64_t sum = svadd_s64_z(pg, indices, svindex_s64(pg, m));\n    svint64_t count = svmad_s64_z(pg, svdup_n_s64(1, pg), svdup_n_s64(1, pg), sum);\n    svint64_t avg = svdiv_s64_z(pg, sum, count);\n    int64_t rounded_avg = svcvt_s64_f64_z(pg, svrintn_f64_z(pg, svcvt_f64_s64_z(pg, avg)));\n    \n    std::string binary_avg = \"\";\n    while(rounded_avg > 0){\n        binary_avg = std::to_string(rounded_avg % 2) + binary_avg;\n        rounded_avg /= 2;\n    }\n    \n    return binary_avg;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```\nstd::string rounded_avg_simd(int64_t n, int64_t m){\n    if(n > m){\n        return \"-1\";\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t indices = svindex_s64(pg, n);\n    svint64_t values = svadd_s64_z(pg, indices, svindex_s64(pg, m));\n    svint64_t sum = svaddv_s64(pg, values);\n    int64_t avg = (svcntd() + sum) / 2;\n    \n    std::string binary_avg = std::bitset<64>(avg).to_string();\n    size_t pos = binary_avg.find('1');\n    return binary_avg.substr(pos);\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```\nstd::string rounded_avg_simd(int64_t n, int64_t m){\n    if(n > m) {\n        return \"-1\";\n    }\n    \n    svbool_t pg = svptrue_b64();\n    svint64_t indices = svindex_s64(pg, n);\n    svint64_t sum = svadd_n_s64_z(pg, indices, m - n, pg);\n    svint64_t avg = svdiv_n_s64_z(pg, sum, m - n + 1, pg);\n    int64_t rounded_avg = svcvt_s64_s32_z(pg, svrinta_n_f64_z(pg, svcvt_f64_s64(avg), 0, pg));\n    \n    std::string binary_avg = \"\";\n    while(rounded_avg > 0) {\n        binary_avg = std::to_string(rounded_avg % 2) + binary_avg;\n        rounded_avg /= 2;\n    }\n    \n    return binary_avg;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```\nstd::string rounded_avg_simd(int64_t n, int64_t m){\n    if(n > m){\n        return \"-1\";\n    }\n\n    int64_t sum = 0;\n    int64_t count = m - n + 1;\n\n    svbool_t pg = svptrue_b64();\n    svint64_t result = svindex_s64(pg, n);\n    svint64_t increment = svdup_n_s64(1);\n\n    for(int i = n + 1; i <= m; i++){\n        result = svadd_s64_z(pg, result, increment);\n    }\n\n    sum = svaddv_s64(pg, result);\n\n    int64_t avg = sum / count;\n\n    std::string binary = \"\";\n    while(avg > 0){\n        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\n    return binary;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```cpp\nstd::vector<int> func_simd(int n){\n    svbool_t pg = svptrue_b32();\n    std::vector<int> result(n);\n    svint32_t factorial = svdup_n_s32(1);\n    svint32_t sum = svdup_n_s32(0);\n    \n    for (int i = 1; i <= n; i++) {\n        svint32_t index = svdup_n_s32(i);\n        svbool_t even = svcmpeq_n_s32(pg, i % 2, 0);\n        \n        svint32_t factorial_masked = svsel_s32(even, svumul_n_s32_z(pg, factorial, i), sum);\n        svint32_t sum_masked = svsel_s32(even, sum, svadd_n_s32_z(pg, sum, i));\n        \n        svst1_s32(pg, &result[i-1], svsel_s32(even, factorial_masked, sum_masked));\n        \n        factorial = svmul_n_s32_z(pg, factorial, index);\n        sum = svadd_n_s32_z(pg, sum, index);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```\nstd::vector<int> func_simd(int n){\n    std::vector<int> result(n);\n    svbool_t pg = svptrue_b32();\n    svint32_t factorial = svdup_n_s32(1);\n    svint32_t sum = svdup_n_s32(0);\n\n    for (int i = 1; i <= n; i += svcntw()) {\n        svbool_t pg_next = svwhilelt_b32(i, n);\n\n        svint32_t indices = svindex_s32(0, 1);\n        svint32_t values = svadd_n_s32_z(pg_next, svdup_n_s32(1), svdup_n_s32(i));\n        svint32_t mask = svcmpge_n_s32(pg_next, svdup_n_s32(2));\n\n        svint32_t factorial_masked = svmul_n_s32_z(pg_next, factorial, svsel(mask, values, svdup_n_s32(1)));\n        svint32_t sum_masked = svadd_n_s32_z(pg_next, sum, svsel(mask, svadd_n_s32_z(pg_next, sum, values), svdup_n_s32(0)));\n\n        svst1_s32(pg_next, &result[i - 1], svsel(mask, factorial_masked, sum_masked));\n\n        factorial = svmul_n_s32_z(pg_next, factorial, svsel(mask, values, svdup_n_s32(1)));\n        sum = svadd_n_s32_z(pg_next, sum, svsel(mask, svadd_n_s32_z(pg_next, sum, values), svdup_n_s32(0)));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```cpp\nstd::vector<int> func_simd(int n){\n    svbool_t pg = svptrue_b32();\n    std::vector<int> result(n);\n    svint32_t factorial = svdup_n_s32(1);\n    svint32_t sum = svdup_n_s32(0);\n\n    for (int i = 1; i <= n; i++) {\n        svint32_t index = svdup_n_s32(i);\n        svbool_t even = svcmpeq_n_s32_z(pg, index, 0) & svptrue_b32();\n\n        svint32_t fact_mul = svwhilelt_b32(0, i);\n        svint32_t sum_add = svindexadd_s32_z(pg, sum, index);\n\n        factorial = svmul_n_s32_z(even, factorial, i);\n        sum = svadd_n_s32_z(!even, sum, sum_add);\n\n        svst1_s32(pg, &result[0], svsel_s32(pg, sum, factorial, even));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```\nstd::vector<int> func_simd(int n){\n    std::vector<int> result(n);\n    svbool_t pg = svptrue_b32();\n    svint32_t factorial = svdup_n_s32(1);\n    svint32_t sum = svdup_n_s32(0);\n\n    for (int i = 1; i <= n; i++) {\n        svint32_t index = svdup_n_s32(i);\n        svbool_t even_mask = svcmpeq_n_s32_z(pg, index, 0) & svptrue_b32();\n\n        svint32_t factorial_masked = svsel_s32(even_mask, svptrue_b32(), factorial);\n        svint32_t sum_masked = svsel_s32(even_mask, sum, svaddv_s32_z(pg, svindex_s32(1, i), svptrue_b32()));\n\n        factorial = svmul_s32_z(pg, factorial_masked, index);\n        sum = svadd_s32_z(pg, sum_masked, svindex_s32(1, i));\n\n        svst1_s32(pg, &result[i-1], svsel_s32(even_mask, factorial_masked, sum_masked));\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```cpp\nstd::vector<int> func_simd(int n){\n    svbool_t pg = svptrue_b32();\n    std::vector<int> result(n);\n    svint32_t factorial = svdup_n_s32(1);\n    svint32_t sum = svdup_n_s32(0);\n\n    for (int i = 1; i <= n; i++) {\n        svint32_t index = svdup_n_s32(i);\n        svbool_t even = svcmpeq_n_s32_z(pg, index, 0) & svptrue_b32();\n        svint32_t factorial_masked = svsel_s32(even, svumul_n_s32_z(pg, factorial, i), sum);\n        svint32_t sum_masked = svsel_s32(even, sum, svadd_n_s32_z(pg, sum, i));\n        svst1_s32(pg, &result[i-1], svadd_n_s32_z(pg, factorial_masked, 0));\n        factorial = svmul_n_s32_z(pg, factorial, index);\n        sum = sum_masked;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```cpp\nstd::vector<int> even_odd_palindrome_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svint32_t even_count = svdup_s32(0);\n    svint32_t odd_count = svdup_s32(0);\n\n    for (int i = 1; i <= n; ++i) {\n        svint32_t input = svdup_s32(i);\n        svint32_t reversed = svrev32_s32(input);\n        svbool_t is_palindrome = svcmpeq_n_s32(pg, input, reversed);\n        svint32_t is_even = svmul_n_s32_z(pg, is_palindrome, 1);\n        svint32_t is_odd = svmul_n_s32_z(pg, is_palindrome, 1);\n        even_count = svadd_s32_z(pg, even_count, is_even);\n        odd_count = svadd_s32_z(pg, odd_count, is_odd);\n    }\n\n    std::vector<int> result(2);\n    svst1_s32(pg, &result[0], even_count);\n    svst1_s32(pg, &result[1], odd_count);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```cpp\nstd::vector<int> even_odd_palindrome_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svint32_t even_count = svdup_s32(0);\n    svint32_t odd_count = svdup_s32(0);\n\n    for (int i = 1; i <= n; i++) {\n        svint32_t num = svdup_s32(i);\n        svint32_t reverse_num = svrevb_s32(num);\n        svbool_t is_palindrome = svcmpeq_n_s32(pg, num, reverse_num);\n        svbool_t is_odd = svcmpeq_n_s32(pg, num, svmul_n_s32(pg, num, 2));\n        even_count = svadd_s32_m(pg, even_count, is_palindrome, even_count);\n        odd_count = svadd_s32_m(pg, odd_count, is_palindrome & is_odd, odd_count);\n    }\n\n    int even_result, odd_result;\n    svst1_s32(pg, &even_result, even_count);\n    svst1_s32(pg, &odd_result, odd_count);\n\n    return {even_result, odd_result};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```cpp\nstd::vector<int> even_odd_palindrome_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svint32_t even_count = svdup_s32(0);\n    svint32_t odd_count = svdup_s32(0);\n\n    for (int i = 1; i <= n; i++) {\n        svint32_t num = svdup_s32(i);\n        svint32_t reverse_num = svrevb_s32(num);\n\n        svint32_t is_palindrome = svcmpeq_n_s32(pg, num, reverse_num);\n        svint32_t is_even = svand_n_s32(is_palindrome, 1);\n\n        even_count = svadd_s32_m(pg, even_count, is_even);\n        odd_count = svadd_s32_m(pg, odd_count, svnot_s32(is_even));\n    }\n\n    int result[2];\n    svst1_s32(pg, result, even_count);\n    svst1_s32(pg, result + 1, odd_count);\n\n    return {result[0], result[1]};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```cpp\nstd::vector<int> even_odd_palindrome_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svuint32_t even_count = svdup_u32(0);\n    svuint32_t odd_count = svdup_u32(0);\n\n    for (int i = 1; i <= n; i++) {\n        svuint32_t num = svdup_n_u32(i);\n        svuint32_t reversed = svrevw_u32(num);\n\n        svbool_t is_palindrome = svcmpeq_n_u32(pg, num, reversed);\n        svbool_t is_odd = svcmpge_n_u32(pg, num, svdup_n_u32(10));\n\n        even_count = svadd_u32_m(pg, even_count, is_palindrome, even_count);\n        odd_count = svadd_u32_m(pg, odd_count, svand_n_u32(is_palindrome, is_odd), odd_count);\n    }\n\n    uint32_t even_result;\n    uint32_t odd_result;\n    svst1_u32(pg, &even_result, even_count);\n    svst1_u32(pg, &odd_result, odd_count);\n\n    return {even_result, odd_result};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```cpp\nstd::vector<int> even_odd_palindrome_simd(int n){\n    svbool_t pg = svptrue_b32();\n    svint32_t even_count = svdup_s32(0);\n    svint32_t odd_count = svdup_s32(0);\n\n    for (int i = 1; i <= n; i++) {\n        svint32_t num = svdup_s32(i);\n        svint32_t rev_num = svrevb_s32(num);\n\n        svint32_t is_palindrome = svcmpeq_n_s32(num, rev_num);\n        svint32_t is_even = svcmpeq_n_s32(svtbl_s32(num, pg, 0), 0);\n\n        even_count = svadd_s32_m(pg, even_count, is_palindrome & is_even);\n        odd_count = svadd_s32_m(pg, odd_count, is_palindrome & !is_even);\n    }\n\n    std::vector<int> result(2);\n    svst1_s32(pg, &result[0], even_count);\n    svst1_s32(pg, &result[1], odd_count);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint count_nums_simd(std::vector<int> n){\n    svbool_t pg = svptrue_b32();\n    svint32_t count = svdup_s32(0);\n\n    for (size_t i = 0; i < n.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &n[i]);\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n\n        svint32_t sum_digits = svaddv_s32_z(pg, svget_s32(pg, abs_vec));\n        svbool_t mask = svcmpgt_n_s32(pg, sum_digits, 0);\n\n        count = svadd_s32_z(count, count, mask);\n    }\n\n    int result = svaddv_s32(svptrue_b32(), count);\n    return result;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint count_nums_simd(std::vector<int> n){\n    svbool_t pg = svptrue_b32();\n    svint32_t count = svdup_s32(0);\n\n    for (size_t i = 0; i < n.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &n[i]);\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n        svint32_t sum_digits = svaddv_s32_z(pg, svget_s32(svtbl_s32(pg, abs_vec, svindex_s32(0))), svget_s32(svtbl_s32(pg, abs_vec, svindex_s32(1))));\n        svbool_t pg_sum_gt_zero = svcmpgt_n_s32(pg, sum_digits, 0);\n        count = svaddv_s32_z(pg_sum_gt_zero, count, svdup_s32(1));\n    }\n\n    int result = svaddv_s32(svptrue_b32(), count);\n    return result;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint count_nums_simd(std::vector<int> n){\n    svbool_t pg = svptrue_b32();\n    int count = 0;\n    \n    for (size_t i = 0; i < n.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &n[i]);\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n        \n        svint32_t sum_digits = svaddv_s32_z(pg, svindex_s32(0), abs_vec);\n        svbool_t mask = svcmpgt_n_s32(pg, sum_digits, 0);\n        \n        count += svcntw() - __builtin_popcount(svptest_any(svptrue_b32(), mask));\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint count_nums_simd(std::vector<int> n){\n    svbool_t pg = svptrue_b32();\n    svint32_t sum_digits = svdup_s32(0);\n    \n    for (size_t i = 0; i < n.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &n[i]);\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n        \n        svint32_t sum = svaddv_s32_z(pg, abs_vec);\n        svbool_t mask = svcmpgt_n_s32(pg, sum, 0);\n        \n        sum_digits = svadd_s32_z(sum_digits, mask, sum_digits, svdup_s32(0));\n    }\n    \n    int count = svcntw() - svclz(sum_digits);\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint count_nums_simd(std::vector<int> n){\n    svbool_t pg = svptrue_b32();\n    int count = 0;\n\n    for (size_t i = 0; i < n.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &n[i]);\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n\n        svint32_t sum_digits = svaddv_s32_z(pg, abs_vec);\n\n        svbool_t greater_than_zero = svcmpgt_n_s32(pg, sum_digits, 0);\n        count += svcntw() - svtbl_count(greater_than_zero, 0);\n\n        pg = svwhilelt_b32(i + svcntw(), n.size());\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```cpp\nbool move_one_ball_simd(std::vector<int> arr){\n    size_t N = arr.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n    \n    svint32_t sorted = svdup_n_s32(0);\n    for (size_t i = 0; i < N; ++i) {\n        svint32_t shifted = svext_s32_z(svindex_s32(0, -i), input, N - i);\n        sorted = svmax_s32(sorted, shifted);\n    }\n    \n    svbool_t result = svcmpeq_n_s32(sorted, svindex_s32(0, N - 1));\n    return svptest_any(svptrue_b32(), result);\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```cpp\nbool move_one_ball_simd(std::vector<int> arr){\n    size_t N = arr.size();\n    if(N == 0){\n        return true;\n    }\n    \n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n    \n    svint32_t sorted = svindex_s32(N, 1);\n    svbool_t result = svcmpeq_n_s32(pg, input, sorted);\n    \n    return svptest_any(svptrue_b32(), result);\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```cpp\nbool move_one_ball_simd(std::vector<int> arr){\n    size_t N = arr.size();\n    if(N == 0){\n        return true;\n    }\n    \n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n    \n    svint32_t sorted = svadd_n_s32_z(pg, input, 0);\n    for(int i = 1; i < N; i++){\n        svint32_t shifted = svext_s32_z(pg, input, input, N-i);\n        sorted = svmin_s32_z(pg, sorted, svadd_n_s32_z(pg, shifted, i));\n    }\n    \n    svbool_t result = svcmpeq_n_s32(sorted, arr[0]);\n    return svptest_any(svptrue_b32(), result);\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```cpp\nbool move_one_ball_simd(std::vector<int> arr){\n    size_t N = arr.size();\n    if (N == 0) {\n        return true;\n    }\n    \n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1_s32(pg, arr.data());\n    \n    svint32_t sorted_vec = svadd_s32_z(pg, vec, svindex_s32(N, -1));\n    \n    svint32_t cmp_result = svcmpgt_s32_z(pg, vec, sorted_vec);\n    \n    return !svptest_any(svptrue_b32(), cmp_result);\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```cpp\nbool move_one_ball_simd(std::vector<int> arr){\n    size_t N = arr.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t input = svld1(pg, arr.data());\n    svint32_t sorted = svindex_s32(N, 1);\n    svbool_t result = svcmpeq_n_s32(pg, input, sorted);\n    return svptest_any(svptrue_b32(), result);\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    size_t size = lst1.size();\n    svbool_t pg = svptrue_b32();\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec1 = svld1_s32(pg, &lst1[i]);\n        svint32_t vec2 = svld1_s32(pg, &lst2[i]);\n\n        svbool_t even_mask = svcmpeq_n_s32(pg, vec1, 0) & svcmpeq_n_s32(pg, vec2, 0);\n        if (!svptest_any(svptrue_b32(), even_mask)) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    size_t size = lst1.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *vec1 = (svint32_t*)lst1.data();\n    svint32_t *vec2 = (svint32_t*)lst2.data();\n    \n    svbool_t result = svwhilelt_b32(0, size);\n    svbool_t all_even = svptrue_b32();\n    \n    svint32_t mask = svdup_s32(1);\n    svint32_t even_mask = svdup_s32(0);\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t val1 = svld1(pg, &vec1[i]);\n        svint32_t val2 = svld1(pg, &vec2[i]);\n        \n        svint32_t odd1 = svtst_s32(val1, mask);\n        svint32_t odd2 = svtst_s32(val2, mask);\n        \n        svbool_t any_odd = svorr_b32(all_even, odd1, odd2);\n        all_even = svand_n(all_even, any_odd, 0);\n        \n        if (!svptest_any(all_even)) {\n            return \"NO\";\n        }\n    }\n    \n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    size_t size = lst1.size();\n    svbool_t pg = svptrue_b32();\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec1 = svld1(pg, &lst1[i]);\n        svint32_t vec2 = svld1(pg, &lst2[i]);\n        \n        svbool_t even_mask = svcmpeq_n_s32(pg, vec1, 0) & svcmpeq_n_s32(pg, vec2, 0);\n        if (!svptest_any(svptrue_b32(), even_mask)) {\n            return \"NO\";\n        }\n    }\n    \n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    size_t size = lst1.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *vec1 = (svint32_t*)lst1.data();\n    svint32_t *vec2 = (svint32_t*)lst2.data();\n    \n    svbool_t result = svwhilelt_b32(0, size);\n    svbool_t all_even = svptrue_b32();\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t val1 = svld1(pg, &vec1[i]);\n        svint32_t val2 = svld1(pg, &vec2[i]);\n        \n        svbool_t is_even1 = svcmpeq_n_s32(pg, val1, 0);\n        svbool_t is_even2 = svcmpeq_n_s32(pg, val2, 0);\n        \n        all_even = svand(all_even, svorr(is_even1, is_even2));\n    }\n    \n    if (svptest_any(all_even)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    size_t size = lst1.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t *vec1 = (svint32_t*)lst1.data();\n    svint32_t *vec2 = (svint32_t*)lst2.data();\n    \n    svbool_t result = svwhilelt_b32(0, size);\n    svbool_t all_even = svptrue_b32();\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t val1 = svld1(pg, &vec1[i]);\n        svint32_t val2 = svld1(pg, &vec2[i]);\n        \n        svbool_t is_even1 = svcmpeq_n_s32(pg, val1, 0);\n        svbool_t is_even2 = svcmpeq_n_s32(pg, val2, 0);\n        \n        all_even = svand(all_even, svorr(is_even1, is_even2));\n    }\n    \n    if (svptest_any(all_even)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```cpp\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    result.resize(lst.size());\n\n    for (size_t i = 0; i < lst.size(); ++i) {\n        svbool_t pg = svptrue_b8();\n        size_t odd_count = 0;\n        for (size_t j = 0; j < lst[i].size(); ++j) {\n            svuint8_t input = svdup_n_u8(lst[i][j] - '0');\n            svbool_t odd_mask = svcmpge_n_u8(pg, input, 1);\n            odd_count += svcntw(odd_mask);\n        }\n        result[i] = \"the number of odd elements \" + std::to_string(odd_count) + \"n the str\" + std::to_string(i+1) + \"ng \" + std::to_string(i+1) + \" of the \" + std::to_string(i+1) + \"nput.\";\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```cpp\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for (const std::string& str : lst) {\n        svbool_t pg = svptrue_b8();\n        svuint8_t odd_count = svdup_n_u8(0);\n        for (size_t i = 0; i < str.size(); ++i) {\n            svuint8_t digits = svdup_n_u8(str[i] - '0');\n            svbool_t odd_mask = svtest1_b8(digits, 1);\n            odd_count = svadd_u8_z(pg, odd_count, odd_mask, odd_count, svdup_n_u8(1));\n        }\n        uint8_t count = svaddv_u8(pg, odd_count);\n        result.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + str + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```cpp\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for (const std::string& str : lst) {\n        svbool_t pg = svptrue_b8();\n        svuint8_t odd_count = svdup_n_u8(0);\n        for (size_t i = 0; i < str.size(); ++i) {\n            svuint8_t digits = svdup_n_u8(str[i] - '0');\n            svbool_t odd_mask = svtest1_b8(digits, SV_POW2);\n            odd_count = svadd_u8_z(pg, odd_count, odd_mask, odd_count, svdup_n_u8(1));\n        }\n        uint8_t count[SV_CNT_U8()] = {0};\n        svst1_u8(pg, count, odd_count);\n        std::string res = \"the number of odd elements \";\n        for (size_t i = 0; i < str.size(); ++i) {\n            res += std::to_string(count[i]);\n        }\n        res += \"n the str\" + std::to_string(result.size() + 1) + \"ng \" + std::to_string(result.size() + 1) + \" of the \" + std::to_string(result.size() + 1) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```cpp\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for (const std::string& str : lst) {\n        svbool_t pg = svptrue_b8();\n        size_t odd_count = 0;\n        for (size_t i = 0; i < str.size(); ++i) {\n            svuint8_t input = svdup_n_u8(str[i] - '0');\n            svbool_t odd_mask = svcmpge_n_u8_z(pg, input, 1) && svcmpeq_n_u8(pg, svand_z(pg, input, 1), 1);\n            odd_count += svcntw(odd_mask);\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(odd_count) + \"n the str\" + std::to_string(odd_count) + \"ng \" + str + \" of the \" + std::to_string(odd_count) + \"nput.\");\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```cpp\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    size_t numStrings = lst.size();\n    result.resize(numStrings);\n\n    for (size_t i = 0; i < numStrings; ++i) {\n        const std::string& str = lst[i];\n        size_t strLen = str.size();\n        svbool_t pg = svwhilelt_b8(strLen, svcntb());\n        svuint8_t oddCount = svdup_n_u8(0);\n\n        for (size_t j = 0; j < strLen; ++j) {\n            svuint8_t digits = svld1_u8(pg, reinterpret_cast<const uint8_t*>(&str[j]));\n            svuint8_t oddMask = svmul_x(pg, digits, svdup_n_u8(1));\n            oddCount = svadd_x(pg, oddCount, oddMask);\n        }\n\n        uint8_t oddCountScalar;\n        svst1_u8(pg, &oddCountScalar, oddCount);\n\n        std::string resStr = \"the number of odd elements \" + std::to_string(oddCountScalar) + \"n the str\" + std::to_string(i+1) + \"ng \" + str + \" of the \" + std::to_string(i+1) + \"nput.\";\n        result[i] = resStr;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```cpp\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums){\n    size_t size = nums.size();\n    svbool_t pg = svptrue_b64();\n    svint64_t min_sum = svdup_s64(0);\n    svint64_t current_sum = svdup_s64(0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svint64_t vec_nums = svld1(pg, &nums[i]);\n        current_sum = svadd_m(pg, current_sum, vec_nums);\n\n        min_sum = svmin_m(pg, min_sum, current_sum);\n        current_sum = svmax_z(pg, current_sum, svdup_s64(0));\n    }\n\n    int64_t result = svminv_s64(pg, min_sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums){\n    size_t size = nums.size();\n    svbool_t pg = svptrue_b64();\n    svint64_t min_sum = svdup_s64(0);\n    svint64_t current_sum = svdup_s64(0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svint64_t vec_nums = svld1(pg, &nums[i]);\n        current_sum = svadd_s64_z(pg, current_sum, vec_nums);\n\n        min_sum = svmin_s64_z(pg, min_sum, current_sum);\n        current_sum = svmin_s64_z(pg, current_sum, svdup_s64(0));\n    }\n\n    int64_t result = svminv_s64(pg, min_sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```cpp\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums){\n    size_t size = nums.size();\n    svbool_t pg = svptrue_b64();\n    svint64_t min_sum = svdup_s64(0);\n    svint64_t current_sum = svdup_s64(0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svint64_t vec_nums = svld1(pg, &nums[i]);\n        current_sum = svadd_z(pg, current_sum, vec_nums);\n        min_sum = svmin_z(pg, min_sum, current_sum);\n        current_sum = svmin_z(pg, current_sum, svdup_s64(0));\n    }\n\n    int64_t result = svminv_s64(pg, min_sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```cpp\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums){\n    size_t size = nums.size();\n    svbool_t pg = svptrue_b64();\n    svint64_t min_sum = svdup_s64(0);\n    svint64_t current_sum = svdup_s64(0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svint64_t vec_nums = svld1(pg, &nums[i]);\n        current_sum = svadd_s64_z(pg, current_sum, vec_nums);\n        min_sum = svmin_s64_z(pg, min_sum, current_sum);\n        current_sum = svsel_s64(svcmpgt_s64_z(pg, min_sum, current_sum), svdup_s64(0), current_sum);\n    }\n\n    int64_t result;\n    svst1(pg, &result, min_sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums){\n    size_t size = nums.size();\n    svbool_t pg = svptrue_b64();\n    svint64_t min_sum = svdup_s64(0);\n    svint64_t current_sum = svdup_s64(0);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svint64_t vec_nums = svld1(pg, &nums[i]);\n        current_sum = svadd_s64_z(pg, current_sum, vec_nums);\n\n        min_sum = svmin_s64_z(pg, min_sum, current_sum);\n        current_sum = svsel_s64_z(svcmpgt_s64_z(pg, min_sum, current_sum), svdup_s64(0), current_sum);\n    }\n\n    int64_t result = svminv_s64(pg, min_sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    int num_rows = grid.size();\n    int num_cols = grid[0].size();\n    int total_buckets = 0;\n    \n    svbool_t pg = svptrue_b8();\n    \n    for (int j = 0; j < num_cols; j += svcntw()) {\n        svint32_t sum = svdup_n_s32(0);\n        \n        for (int i = 0; i < num_rows; i++) {\n            svbool_t pg_row = svwhilelt_b32(i, num_rows);\n            svint32_t row_data = svld1(pg_row, &grid[i][j]);\n            sum = svadd_m(pg_row, sum, row_data);\n        }\n        \n        svint32_t buckets_needed = svqrdmulh_n_s32(sum, capacity);\n        total_buckets += svcntw() - svaddv(buckets_needed);\n    }\n    \n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```\nint max_fill_simd(const std::vector<std::vector<int> > & grid, int capacity) {\n    int num_rows = grid.size();\n    int num_cols = grid[0].size();\n    int total_ops = 0;\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sv_capacity = svdup_s32(capacity);\n\n    for (int i = 0; i < num_rows; i += svcntw()) {\n        svint32_t sv_total = svdup_s32(0);\n\n        for (int j = 0; j < num_cols; j += svcntw()) {\n            svint32_t sv_grid = svld1_s32(pg, &grid[i][j]);\n            svint32_t sv_diff = svmul_n_s32_z(pg, sv_grid, -1);\n            svint32_t sv_clamped = svqadd_n_s32_z(pg, sv_diff, 0);\n            svint32_t sv_ops = svqadd_s32_z(pg, sv_clamped, sv_capacity);\n            sv_total = svqadd_s32_z(pg, sv_total, sv_ops);\n        }\n\n        total_ops += svaddv_s32(pg, sv_total);\n    }\n\n    return total_ops;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```\nint max_fill_simd(const std::vector<std::vector<int> > & grid, int capacity) {\n    int num_rows = grid.size();\n    int num_cols = grid[0].size();\n    int total_ops = 0;\n\n    svbool_t pg = svptrue_b32();\n\n    for (int j = 0; j < num_cols; j += svcntw()) {\n        svbool_t pg_inner = svwhilelt_b32(j, num_cols);\n\n        svint32_t buckets = svdup_s32(capacity);\n        svint32_t ops = svdup_s32(0);\n\n        for (int i = 0; i < num_rows; i++) {\n            svint32_t well = svld1(pg_inner, &grid[i][j]);\n            svint32_t to_extract = svmin_s32(buckets, well);\n            ops = svadd_s32(ops, to_extract);\n            buckets = svsub_s32(buckets, to_extract);\n        }\n\n        total_ops += svaddv_s32(pg, ops);\n    }\n\n    return total_ops;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    int num_rows = grid.size();\n    int num_cols = grid[0].size();\n    int total_ops = 0;\n\n    svbool_t pg = svptrue_b32();\n\n    for (int j = 0; j < num_cols; j += svcntw()) {\n        svbool_t pg_inner = svwhilelt_b32(j, num_cols);\n\n        svint32_t buckets = svdup_s32(capacity);\n        svint32_t ops = svdup_s32(0);\n\n        for (int i = 0; i < num_rows; i++) {\n            svint32_t wells = svld1(pg_inner, &grid[i][j]);\n            svint32_t to_extract = svmin_s32(buckets, wells);\n            ops = svadd_s32(ops, to_extract);\n            buckets = svsub_s32(buckets, to_extract);\n        }\n\n        total_ops += svaddv_s32(pg, ops);\n    }\n\n    return total_ops;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    int num_rows = grid.size();\n    int num_cols = grid[0].size();\n    int total_ops = 0;\n\n    svbool_t pg = svptrue_b32();\n\n    for (int j = 0; j < num_cols; j += svcntw()) {\n        svbool_t pg_inner = svwhilelt_b32(j, num_cols);\n\n        svint32_t water_levels = svdup_n_s32(0);\n        svint32_t capacity_splat = svdup_n_s32(capacity);\n\n        for (int i = 0; i < num_rows; i++) {\n            svint32_t row_data = svld1(pg_inner, &grid[i][j]);\n            water_levels = svadd_n_s32_z(pg_inner, water_levels, row_data, 1);\n            svbool_t full_buckets = svcgt_n_s32(water_levels, capacity_splat);\n            water_levels = svsel(full_buckets, svsub_n_s32(water_levels, capacity_splat, 1), water_levels);\n            total_ops += svcntp_b32(full_buckets);\n        }\n    }\n\n    return total_ops;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```\nint64_t solution_simd(const std::vector<int16_t>& lst){\n    svbool_t pg = svptrue_b16();\n    svint16_t sum = svdup_n_s16(0);\n    \n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        svint16_t vec = svld1(pg, &lst[i]);\n        svbool_t odd_positions = svcmpeq_n_s16_z(pg, i % 2, 0);\n        svbool_t odd_values = svcmpge_n_s16_z(pg, vec, 1);\n        svbool_t mask = svand_z(pg, odd_positions, odd_values);\n        sum = svaddv_z_s16(sum, mask, vec);\n    }\n    \n    return svaddv_s16(pg, sum);\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```\nint64_t solution_simd(const std::vector<int16_t>& lst){\n    svbool_t pg = svptrue_b16();\n    svint16_t sum = svdup_n_s16(0);\n    \n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        svint16_t vec = svld1_s16(pg, &lst[i]);\n        svbool_t odd_positions = svcmpeq_n_s16_z(pg, svindex_s16(0, 1), 0);\n        svint16_t odd_elements = svsel_s16(odd_positions, vec, svdup_n_s16(0));\n        sum = svadd_s16_z(pg, sum, odd_elements);\n    }\n    \n    int16_t result[svcntw()];\n    svst1_s16(pg, result, sum);\n    \n    int64_t final_sum = 0;\n    for (int i = 0; i < svcntw(); i++) {\n        final_sum += result[i];\n    }\n    \n    return final_sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```cpp\nint64_t solution_simd(const std::vector<int16_t>& lst){\n    svbool_t pg = svptrue_b16();\n    svint16_t sum = svdup_n_s16(0);\n    \n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        svint16_t vec = svld1(pg, &lst[i]);\n        svbool_t odd_positions = svptrue_b16();\n        svbool_t even_positions = svptrue_b16();\n        svbool_t odd_elements = svwhilelt_b16(0, svcntw());\n        svbool_t even_elements = svwhilelt_b16(1, svcntw());\n        \n        svbool_t odd_positions_mask = svcmpeq_n_s16(odd_positions, i % 2, pg);\n        svbool_t even_positions_mask = svcmpeq_n_s16(even_positions, i % 2 == 0 ? 0 : 1, pg);\n        svbool_t odd_elements_mask = svand_n_b16(odd_elements, 1, pg);\n        svbool_t even_elements_mask = svand_n_b16(even_elements, 1, pg);\n        \n        svint16_t odd_elements_vec = svsel(odd_positions_mask, svsel(odd_elements_mask, vec, svdup_n_s16(0)), svdup_n_s16(0));\n        svint16_t even_elements_vec = svsel(even_positions_mask, svsel(even_elements_mask, vec, svdup_n_s16(0)), svdup_n_s16(0));\n        \n        sum = svadd_m(sum, sum, odd_elements_vec, odd_elements_mask);\n    }\n    \n    int16_t result[svcntw()];\n    svst1(pg, result, sum);\n    \n    int64_t final_sum = 0;\n    for (int i = 0; i < svcntw(); i++) {\n        final_sum += result[i];\n    }\n    \n    return final_sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```\nint64_t solution_simd(const std::vector<int16_t>& lst){\n    svbool_t pg = svptrue_b16();\n    svint16_t vec = svld1(pg, lst.data());\n    svint16_t even_positions = svindex_s16(0, 2);\n    svint16_t even_elements = svindex_z(vec, even_positions);\n    svint16_t odd_elements = svsel(vec, svdup_n_s16(0), even_elements);\n    svint16_t odd_elements_positive = svsel(odd_elements, svdup_n_s16(0), svcmpge_n_s16(odd_elements, 0));\n    svint16_t odd_elements_sum = svaddv_n_s16(pg, odd_elements_positive);\n    return odd_elements_sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```cpp\nint64_t solution_simd(const std::vector<int16_t>& lst){\n    svbool_t pg = svptrue_b16();\n    svint16_t vec = svld1(pg, lst.data());\n    svint16_t even_positions = svindex_s16(0, 2);\n    svint16_t even_elements = svindex_z(vec, even_positions);\n    svint16_t odd_elements = svsel(vec, svdup_n_s16(0), even_elements);\n    svint16_t odd_elements_mask = svcmpge_n_s16(even_positions, lst.size());\n    svint16_t odd_elements_in_even_positions = svsel(odd_elements, svdup_n_s16(0), odd_elements_mask);\n    svint64_t sum = svaddv_n_s16_z(pg, odd_elements_in_even_positions, 0);\n    return svaddv_n_s64_z(pg, sum, 0);\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```\nint add_elements_simd(std::vector<int> arr, int k){\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, k);\n    svint32_t sv_sum = svdup_s32(0);\n\n    for (int i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t sv_arr = svld1_s32(pg, &arr[i]);\n        svbool_t pg_digit = svcmpge_n_s32(pg, sv_abs_s32(sv_arr), 10);\n        sv_arr = svsel_s32(pg_digit, svdup_s32(0), sv_arr);\n        sv_sum = svadd_s32_z(pg, sv_sum, sv_arr);\n        pg = svwhilelt_b32(i + svcntw(), k);\n    }\n\n    sum = svaddv_s32(svptrue_b32(), sv_sum);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```\nint add_elements_simd(std::vector<int> arr, int k){\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, k);\n    svbool_t pg2 = svptrue_b32();\n\n    svint32_t acc = svdup_s32(0);\n\n    for (size_t i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &arr[i]);\n        svbool_t pred = svcmpgt_n_s32(pg, vec, 9);\n        vec = svsel_s32(pred, vec, svdup_s32(0));\n        pred = svcmpgt_n_s32(pg, vec, 99);\n        vec = svsel_s32(pred, vec, svdup_s32(0));\n        acc = svadd_s32_m(pg2, acc, vec);\n        pg = svwhilelt_b32(i + svcntw(), k);\n    }\n\n    sum = svaddv_s32(pg2, acc);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```\nint add_elements_simd(std::vector<int> arr, int k){\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, k);\n    svint32_t sv_sum = svdup_s32(0);\n\n    for (int i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t sv_arr = svld1_s32(pg, &arr[i]);\n        svbool_t pg_digit = svcmpge_n_s32(pg, sv_abs_s32(sv_arr), 10);\n        sv_arr = svsel_s32(pg_digit, svdup_s32(0), sv_arr);\n        sv_sum = svadd_s32_z(pg, sv_sum, sv_arr);\n        pg = svwhilelt_b32(i + svcntw(), k);\n    }\n\n    sum = svaddv_s32(svptrue_b32(), sv_sum);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```\nint add_elements_simd(std::vector<int> arr, int k){\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, k);\n    svint32_t sv_sum = svdup_s32(0);\n\n    for (int i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t sv_arr = svld1_s32(pg, &arr[i]);\n        svbool_t pg_digit = svcmpge_n_s32(pg, sv_abs_s32(sv_arr), 10);\n        sv_arr = svsel_s32(pg_digit, svdup_s32(0), sv_arr);\n        sv_sum = svadd_s32_z(pg, sv_sum, sv_arr);\n    }\n\n    sum = svaddv_s32(pg, sv_sum);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```\nint add_elements_simd(std::vector<int> arr, int k){\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, k);\n    svbool_t pg2 = svptrue_b32();\n\n    svint32_t acc = svdup_s32(0);\n\n    for (size_t i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &arr[i]);\n        svbool_t pred = svcmpgt_n_s32(pg2, vec, 9);\n        vec = svsel_s32(pred, svdup_s32(0), vec);\n        acc = svadd_s32_m(pg, acc, vec);\n        pg = svwhilelt_b32(i + svcntw(), k);\n    }\n\n    sum = svaddv_s32(pg, acc);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```\nbool is_sorted_simd(const std::vector<int> & lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    \n    svint32_t input = svld1(pg, &lst[0]);\n    svbool_t sorted = svcmpeq_n_s32(svindex_s32(0, 1), input);\n    \n    for (size_t i = 1; i < size; i++) {\n        svint32_t next = svld1(pg, &lst[i]);\n        sorted = svand(sorted, svcle_s32_z(pg, input, next));\n        input = next;\n    }\n    \n    return svptest_any(sorted);\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```\nbool is_sorted_simd(const std::vector<int> & lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(0, size);\n    svbool_t all_true = svptrue_b32();\n\n    if (size <= svcntw()) {\n        for (size_t i = 1; i < size; ++i) {\n            if (lst[i] <= lst[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    svint32_t vec = svld1_s32(pg, &lst[0]);\n    svint32_t vec_shifted = svext_s32_z(all_true, vec, vec, size - 1);\n\n    svbool_t cmp_result = svcmpgt_s32(vec, vec_shifted);\n    bool result = svptest_any(all_true, cmp_result);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```\nbool is_sorted_simd(const std::vector<int> & lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    svint32_t vec = svld1(pg, &lst[0]);\n    svbool_t sorted = svcmpeq_n_s32(pg, vec, svindex_s32(0, svcntw()));\n    for (size_t i = 1; i < size; i++) {\n        svint32_t next = svld1(pg, &lst[i]);\n        sorted = svand_z(pg, sorted, svcgt_n_s32(pg, next, svadd_n_s32_z(pg, vec, 1)));\n        vec = next;\n    }\n    return !svptest_any(svptrue_b32(), sorted);\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```\nbool is_sorted_simd(const std::vector<int> & lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    \n    if (size < 2) {\n        return true;\n    }\n    \n    svint32_t input = svld1(pg, &lst[0]);\n    svbool_t sorted = svdup_n_b32(true);\n    \n    for (size_t i = 0; i < size - 1; i++) {\n        svint32_t current = svindex_s32(0) + i;\n        svint32_t next = svindex_s32(0) + i + 1;\n        \n        svbool_t cmp = svcmpgt_n_s32(input, svtrue_s32());\n        svbool_t cmp_next = svcmpgt_n_s32(svtrue_s32(), svindex_s32(0));\n        \n        sorted = svand(sorted, svcmpge_n_s32(input, svld1(pg, &lst[0], current)));\n        sorted = svand(sorted, svcmpge_n_s32(svld1(pg, &lst[0], next), input));\n        \n        input = svld1(pg, &lst[0], next);\n    }\n    \n    return svptest_any(svptrue_b32(), sorted);\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```\nbool is_sorted_simd(const std::vector<int> & lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    \n    svint32_t vec = svld1(pg, &lst[0]);\n    svbool_t sorted = svcmpgt_n_s32(pg, vec, svext_s32_x(pg, vec, 1));\n    \n    return !svptest_any(all, sorted);\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```cpp\nint prod_signs_simd(const std::vector<int> & arr){\n    if(arr.empty()) {\n        return -32768;\n    }\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sum = svdup_s32(0);\n    svint32_t signs_product = svdup_s32(1);\n\n    for(size_t i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t vec = svld1(pg, &arr[i]);\n        svint32_t signs = svmul_n_s32_z(pg, vec, 1);\n        signs = svsel_s32_z(pg, vec, signs, svcmpeq_n_s32_z(pg, vec, 0));\n        signs_product = svmul_n_s32_z(pg, signs_product, 1);\n        sum = svaddw_s32_z(pg, sum, svmul_s32_z(pg, vec, signs));\n    }\n\n    int result = svaddv_s32(pg, sum) * svaddv_s32(pg, signs_product);\n    return result;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```cpp\nint prod_signs_simd(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sum = svdup_s32(0);\n    svint32_t signs_product = svdup_s32(1);\n\n    for(size_t i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t vec = svld1(pg, &arr[i]);\n        svint32_t signs = svdup_s32(1);\n        signs = svsel_s32_z(pg, vec, signs, svcmpgt_n_s32_z(pg, vec, 0));\n        signs = svsel_s32_z(pg, svdup_s32(-1), signs, svcmplt_n_s32_z(pg, vec, 0));\n        signs_product = svmul_n_s32_x(pg, signs_product, signs_product, svaddv_s32(pg, signs));\n\n        svint32_t abs_vec = svabs_s32_x(pg, vec);\n        sum = svmla_n_s32_x(pg, sum, abs_vec, svaddv_s32(pg, signs));\n    }\n\n    int result = svaddv_s32(svptrue_b32(), svmul_n_s32(signs_product, svaddv_s32(svptrue_b32(), sum)));\n    return result;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```cpp\nint prod_signs_simd(const std::vector<int> & arr){\n    if(arr.empty()) {\n        return -32768;\n    }\n\n    size_t size = arr.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    svint32_t sum = svdup_s32(0);\n    svint32_t signs_product = svdup_s32(1);\n\n    for(size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1(pg, &arr[i]);\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n        svint32_t signs = svsign_s32_z(pg, vec);\n        signs_product = svmul_n_s32_x(pg, signs_product, signs, signs_product);\n        sum = svmla_n_s32_x(pg, sum, abs_vec, 1);\n    }\n\n    int result = svaddv_s32(pg, sum) * svaddv_s32(pg, signs_product);\n    return result;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```cpp\nint prod_signs_simd(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n\n    int64_t result = 0;\n    svbool_t pg = svwhilelt_b64(0, arr.size());\n    svint64_t sum = svdup_s64(0);\n\n    for(size_t i = 0; i < arr.size(); i += svcntw()) {\n        svint64_t vec = svld1(pg, &arr[i]);\n        svint64_t signs = svdup_s64(1);\n        svbool_t positive = svcmpgt_n_s64(pg, vec, 0);\n        svbool_t negative = svcmplt_n_s64(pg, vec, 0);\n        signs = svsel_s64(positive, signs, svdup_s64(-1));\n        signs = svsel_s64(negative, signs, svdup_s64(-1));\n        sum = svmla_n_s64_z(pg, sum, svabs_s64_z(pg, vec), svsel_s64(positive, signs, svdup_s64(0)));\n    }\n\n    result = svaddv_n_s64(pg, sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```cpp\nint prod_signs_simd(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n\n    svbool_t pg = svptrue_b32();\n    svint32_t sum = svdup_n_s32(0);\n    svint32_t signs_product = svdup_n_s32(1);\n\n    for(size_t i = 0; i < arr.size(); i += svcntw()) {\n        svint32_t vec = svld1(pg, &arr[i]);\n        svint32_t abs_vec = svabs_s32_z(pg, vec);\n        svint32_t signs = svdup_n_s32(1) - svsel_s32_z(pg, svdup_n_s32(0), svdup_n_s32(-1), svcmpgt_s32_z(pg, vec, svdup_n_s32(0)));\n        signs_product = svmul_n_s32_z(pg, signs_product, signs_product, svadd_n_s32_z(pg, signs, 1));\n        sum = svmla_n_s32_z(pg, sum, abs_vec, svmul_n_s32_z(pg, vec, signs));\n    }\n\n    int result = svaddv_s32(pg, sum) * svaddv_s32(pg, signs_product);\n    return result;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k){\n    const int N = grid.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t result = svdup_s32(0);\n    svint32_t indices = svindex_s32(0, 1);\n    \n    for (int i = 0; i < k; ++i) {\n        svint32_t values = svld1(pg, &grid[0][0] + i);\n        svint32_t min_val = svmin(values, svext_s32_z(pg, values, values, 1));\n        svint32_t min_indices = svsel(min_val == values, indices, svext_s32_z(pg, indices, indices, 1));\n        result = svadd_s32_z(pg, result, min_val);\n        indices = min_indices;\n    }\n    \n    std::vector<int> res(k);\n    svst1(pg, &res[0], result);\n    \n    return res;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k){\n    const int N = grid.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t result = svdup_s32(0);\n\n    for (int step = 0; step < k; ++step) {\n        svint32_t current_val = svdup_s32(0);\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < N; ++j) {\n                svint32_t val = svdup_s32(grid[i][j]);\n                svbool_t pred = svcmpeq_s32(pg, val, result);\n                current_val = svsel_s32(pred, val, current_val);\n            }\n        }\n        result = svadd_s32_z(pg, result, current_val);\n    }\n\n    std::vector<int> output(k);\n    svst1_s32(pg, &output[0], result);\n    return output;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k){\n    const int N = grid.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t result = svdup_s32(0);\n    for (int i = 0; i < k; i++) {\n        svint32_t min_val = svdup_s32(N * N + 1);\n        svint32_t min_idx = svdup_s32(0);\n        for (int r = 0; r < N; r++) {\n            for (int c = 0; c < N; c++) {\n                svint32_t val = svld1(pg, &grid[r][c]);\n                svbool_t cmp = svcmplt(pg, val, min_val);\n                min_val = svsel(cmp, val, min_val);\n                min_idx = svsel(cmp, svdup_s32(r * N + c + 1), min_idx);\n            }\n        }\n        result = svadd_m(pg, result, min_idx, result);\n    }\n    std::vector<int> res(k);\n    svst1(pg, &res[0], result);\n    return res;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>>& grid, int k){\n    const int N = grid.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t result = svdup_s32(0);\n    svint32_t indices = svindex_s32(0, 1);\n    \n    for(int i = 0; i < k; i++){\n        svint32_t values = svld1(pg, &grid[0][0] + i);\n        svint32_t min_val = svminv_s32(pg, values);\n        svint32_t mask = svcmpeq_n_s32(pg, values, min_val);\n        svint32_t new_indices = svmul_n_s32_z(pg, indices, mask, 1);\n        result = svadd_n_s32_z(pg, result, new_indices, 1);\n        indices = svadd_n_s32_z(pg, indices, svdup_s32(1), 1);\n    }\n    \n    std::vector<int> output(k);\n    svst1(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k){\n    const int N = grid.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t result = svdup_s32(0);\n    svint32_t indices = svindex_s32(0, 1);\n    svint32_t min_values = svdup_s32(N * N + 1);\n    \n    for (int step = 0; step < k; ++step) {\n        svint32_t current_values = svld1(pg, &grid[0][0] + svadd_n_s32_z(pg, indices, step * N, pg));\n        svbool_t mask = svcmplt_n_s32(pg, current_values, min_values);\n        min_values = svmin_s32_z(pg, min_values, current_values, mask);\n        result = svsel_s32(mask, svadd_n_s32_z(pg, indices, step * N, pg), result);\n    }\n    \n    std::vector<int> output(k);\n    svst1(pg, &output[0], result);\n    \n    return output;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    \n    while(n > 0){\n        uint64_t digit = n % 10;\n        if(digit % 2 != 0){\n            result = svmul_n_u64_z(pg, result, digit);\n        }\n        n /= 10;\n    }\n    \n    uint64_t final_result = 0;\n    for(int i = 0; i < svcntd(); i++){\n        final_result += svaddv_u64(svptrue_b64(), svwhilelt_b64(i, svcntd()), svreinterpret_u64(svget_u64(result, i)));\n    }\n    \n    return final_result;\n}\n```  "}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n\n    while(n > 0){\n        uint64_t digit = n % 10;\n        if(digit % 2 != 0){\n            result = svmul_n_u64_z(pg, result, digit);\n        }\n        n /= 10;\n    }\n\n    uint64_t final_result = 0;\n    for(int i = 0; i < svcntd(); i++){\n        final_result += svaddv_u64(svptrue_b64(), svwhilelt_b64(i), result);\n    }\n\n    return final_result;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    \n    while(n > 0){\n        uint64_t digit = n % 10;\n        if(digit % 2 != 0){\n            result = svmul_n_u64_z(pg, result, digit);\n        }\n        n /= 10;\n    }\n    \n    uint64_t final_result = 0;\n    for(int i = 0; i < svcntd(); i++){\n        final_result += svaddv_u64(svptrue_b64(), svwhilelt_b64(i, svcntd()), result);\n    }\n    \n    return final_result;\n}\n```  "}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    \n    while(n > 0){\n        uint64_t digit = n % 10;\n        if(digit % 2 != 0){\n            result = svmul_n_u64_z(pg, result, digit);\n        }\n        n /= 10;\n    }\n    \n    uint64_t final_result = 0;\n    svst1_u64(pg, &final_result, result);\n    \n    return final_result;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\nuint64_t digits_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    \n    while(n > 0){\n        uint64_t digit = n % 10;\n        if(digit % 2 != 0){\n            result = svmul_n_u64_z(pg, result, digit);\n        }\n        n /= 10;\n    }\n    \n    uint64_t final_result = 0;\n    svst1_u64(pg, &final_result, result);\n    \n    return final_result;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```\nuint64_t sum_squares_simd(const std::vector<float> & lst){\n    uint64_t result = 0;\n    svbool_t pg = svwhilelt_b32(0, lst.size());\n    svfloat32_t vec = svld1(pg, &lst[0]);\n    svint32_t rounded = svcvtnt_f32_s32_z(pg, svceil_f32_z(pg, vec));\n    svint64_t squared = svmul_n_s32_z(pg, rounded, rounded);\n    svint64_t sum = svaddv_n_s64_x(pg, squared, 0);\n    result = svaddv_n_s64_x(pg, sum, 0);\n    return result;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```\nuint64_t sum_squares_simd(const std::vector<float> & lst){\n    uint64_t result = 0;\n    svbool_t pg = svptrue_b32();\n    svfloat32_t vec = svld1(pg, &lst[0]);\n    svint32_t ceiled = svcvtnt_s32_z(pg, svceil_f32_z(pg, vec));\n    svint32_t squared = svmul_n_s32_z(pg, ceiled, ceiled, 1);\n    svint64_t sum = svaddv_s32_z(pg, squared);\n    result = svaddv_s64(pg, sum);\n    return result;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```\nuint64_t sum_squares_simd(const std::vector<float> & lst){\n    uint64_t result = 0;\n    svbool_t pg = svwhilelt_b32(0, lst.size());\n    svfloat32_t vec = svld1(pg, &lst[0]);\n    svint32_t ceil_vec = svcvtnt_s32_z(pg, svceil_f32_z(pg, vec));\n    svint64_t squared = svmul_n_s64_x(pg, svcvt_s64_f64_z(pg, svmul_f64_z(pg, svcvt_f64_f32_z(pg, ceil_vec), svcvt_f64_f32_z(pg, ceil_vec))), 1);\n    result = svaddv_x(pg, squared);\n    return result;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```\nuint64_t sum_squares_simd(const std::vector<float> & lst){\n    uint64_t result = 0;\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    svfloat32_t *data = (svfloat32_t*)lst.data();\n    svint32_t sum = svdup_n_s32(0);\n\n    for(size_t i=0; i<size; i+=svptrue_b32()){\n        svfloat32_t vec = svceil_f32_z(pg, svld1(pg, &data[i]));\n        svint32_t squared = svmul_n_s32_z(pg, svcvt_s32_f32_z(pg, vec), svcvt_s32_f32_z(pg, vec));\n        sum = svadd_s32_z(pg, sum, squared);\n    }\n\n    result = svaddv_s32(pg, sum);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```\nuint64_t sum_squares_simd(const std::vector<float> & lst){\n    uint64_t result = 0;\n    svbool_t pg = svptrue_b32();\n    size_t size = lst.size();\n    size_t remaining = size % svcntw();\n    \n    for(size_t i = 0; i < size - remaining; i += svcntw()){\n        svfloat32_t vec = svld1(pg, &lst[i]);\n        svint32_t rounded = svcvtnt_f32_s32_z(pg, svceil_f32_z(pg, vec));\n        svint64_t squared = svmul_n_s32_z(pg, rounded, rounded);\n        result += svaddv_n_s64_z(pg, squared, 0);\n    }\n    \n    if(remaining > 0){\n        svbool_t pg_remain = svwhilelt_b32(0, remaining);\n        svfloat32_t vec_remain = svld1(pg_remain, &lst[size - remaining]);\n        svint32_t rounded_remain = svcvtnt_f32_s32_z(pg_remain, svceil_f32_z(pg_remain, vec_remain));\n        svint64_t squared_remain = svmul_n_s32_z(pg_remain, rounded_remain, rounded_remain);\n        result += svaddv_n_s64_z(pg_remain, squared_remain, 0);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint can_arrange_simd(const std::vector<int> &arr) {\n    svbool_t pg = svptrue_b32();\n    size_t size = arr.size();\n    int result = -1;\n\n    if (size < 2) {\n        return result;\n    }\n\n    svbool_t pg1 = svwhilelt_b32(0, size - 1);\n    svbool_t pg2 = svwhilelt_b32(1, size);\n\n    svbool_t mask = svcmpgt_n_s32(pg1, svld1(pg, &arr[1], size - 1), svld1(pg, &arr[0], size - 1));\n    size_t index = svcntp_b32(pg2, mask);\n\n    if (index > 0) {\n        result = index - 1;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint can_arrange_simd(const std::vector<int> & arr){\n    svbool_t pg;\n    svint32_t input = svld1_s32(pg, arr.data());\n    svbool_t p_all = svptrue_b32();\n    svint32_t prev = svext_s32_z(svwhilelt_b32(1, arr.size()), input, -1);\n    svint32_t cmp = svcmpgt_s32(input, prev);\n    svint32_t index = svindex_s32(cmp, -1);\n    int result = svmaxv_s32(p_all, index);\n    return result;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint can_arrange_simd(const std::vector<int> &arr) {\n    svbool_t pg;\n    svint32_t input = svld1_s32(pg, arr.data());\n    svint32_t prev = svext_s32_z(pg, input, svdup_n_s32(0), arr.size()-1);\n    svbool_t cmp = svcmpgt_n_s32(pg, input, prev);\n    int index = svcntp_b32(cmp, svptrue_b32());\n    return (index == arr.size()) ? -1 : index;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```cpp\n#include <arm_sve.h>\n\nint can_arrange_simd(const std::vector<int> &arr) {\n    svbool_t pg;\n    svint32_t input = svld1_s32(pg, arr.data());\n    svbool_t pg1 = svwhilelt_b32(0, arr.size() - 1);\n    svint32_t prev = svld1_gather_s32(pg1, input, -1);\n    svint32_t diff = svsub_s32_z(pg1, input, prev);\n    svbool_t pg2 = svcmpgt_s32_z(pg1, diff, 0);\n    int index = svcntp_b(pg2);\n    return index == arr.size() - 1 ? -1 : index;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```cpp\nint can_arrange_simd(const std::vector<int> & arr){\n    svbool_t pg = svptrue_b32();\n    svint32_t result = svindex_s32(pg, 0);\n    \n    for (size_t i = svcntw() - 1; i < arr.size(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, arr.size());\n        svint32_t current = svld1(pg, &arr[i]);\n        svint32_t prev = svld1(pg, &arr[i - 1]);\n        svbool_t cmp = svcmplt_n_s32(pg, current, prev);\n        svint32_t index = svindex_s32(pg, 0);\n        svint32_t masked_index = svmul_n_s32_z(pg, index, i, cmp);\n        result = svsel(pg, result, masked_index, cmp);\n    }\n    \n    int res[svcntw()];\n    svst1(pg, res, result);\n    \n    for (int i = svcntw() - 1; i >= 0; i--) {\n        if (res[i] != 0) {\n            return i;\n        }\n    }\n    \n    return -1;\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```cpp\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n\n    svint32_t largest_negative = svdup_n_s32(0);\n    svint32_t smallest_positive = svdup_n_s32(0);\n\n    for(size_t i = 0; i < size; i += svcntw()){\n        svint32_t vec = svld1(pg, &lst[i]);\n\n        svbool_t neg_mask = svcmpgt_n_s32(svdup_n_s32(0), vec);\n        svbool_t pos_mask = svcmpgt_n_s32(vec, svdup_n_s32(0));\n\n        largest_negative = svmax(largest_negative, svsel(neg_mask, vec, largest_negative));\n        smallest_positive = svmin(smallest_positive, svsel(pos_mask, vec, smallest_positive));\n    }\n\n    std::vector<int> result(2);\n    svst1(pg, &result[0], largest_negative);\n    svst1(pg, &result[1], smallest_positive);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```cpp\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst){\n    size_t size = lst.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t largest_neg = svdup_n_s32(0x80000000);\n    svint32_t smallest_pos = svdup_n_s32(0x7FFFFFFF);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1(pg, &lst[i]);\n        largest_neg = svmax(largest_neg, svsel(pg, vec, largest_neg, svcmpgt_n_s32(vec, largest_neg)));\n        smallest_pos = svmin(smallest_pos, svsel(pg, vec, smallest_pos, svcmpgt_n_s32(smallest_pos, vec)));\n    }\n\n    int32_t result[2];\n    svst1(pg, &result[0], largest_neg);\n    svst1(pg, &result[1], smallest_pos);\n\n    return {result[0], result[1]};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```cpp\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    svint32_t largest_negative = svdup_n_s32(0);\n    svint32_t smallest_positive = svdup_n_s32(0);\n\n    for(size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg_actual = svwhilelt_b32(i + svcntw(), size);\n\n        svint32_t input = svld1(pg_actual, &lst[i]);\n\n        svint32_t is_negative = svcmpgt_n_s32_z(pg_actual, input, -1);\n        svint32_t is_positive = svcmpgt_n_s32_z(pg_actual, input, 0);\n\n        largest_negative = svsel(is_negative, svmax(largest_negative, input), largest_negative);\n        smallest_positive = svsel(is_positive, svmin(smallest_positive, input), smallest_positive);\n    }\n\n    std::vector<int> result(2);\n    svst1(pg, &result[0], largest_negative);\n    svst1(pg, &result[1], smallest_positive);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```cpp\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst){\n    size_t size = lst.size();\n    svbool_t pg = svwhilelt_b32(size, svcntw());\n    svint32_t largest_neg = svdup_n_s32(0);\n    svint32_t smallest_pos = svdup_n_s32(0);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1(pg, &lst[i]);\n        svbool_t neg_mask = svcmpgt_n_s32_z(pg, vec, 0);\n        svbool_t pos_mask = svcmplt_n_s32_z(pg, vec, 0);\n\n        largest_neg = svmax(largest_neg, svsel(neg_mask, vec, largest_neg));\n        smallest_pos = svmin(smallest_pos, svsel(pos_mask, vec, smallest_pos));\n    }\n\n    std::vector<int> result(2);\n    svst1(pg, &result[0], largest_neg);\n    svst1(pg, &result[1], smallest_pos);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst){\n    size_t size = lst.size();\n    svbool_t pg = svptrue_b32();\n    svint32_t largest_neg = svdup_s32(0x80000000);\n    svint32_t smallest_pos = svdup_s32(0x7FFFFFFF);\n\n    for(size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &lst[i]);\n        largest_neg = svmax_s32_z(pg, largest_neg, svsel_s32_z(pg, vec, largest_neg, svcmpgt_n_s32_z(pg, vec, largest_neg)));\n        smallest_pos = svmin_s32_z(pg, smallest_pos, svsel_s32_z(pg, vec, smallest_pos, svcmpgt_n_s32_z(pg, smallest_pos, vec)));\n    }\n\n    int result[2];\n    svst1_s32(pg, &result[0], largest_neg);\n    svst1_s32(pg, &result[1], smallest_pos);\n\n    return {result[0], result[1]};\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```\nuint64_t special_factorial_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n\n    for (uint64_t i = 1; i <= n; i++) {\n        svuint64_t current = svindex_u64(pg, i);\n        result = svmul_n_u64_z(pg, result, i, result);\n    }\n\n    return svaddv_u64(pg, result);\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```\nuint64_t special_factorial_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    for (uint64_t i = 1; i <= n; i++) {\n        svuint64_t current = svindex_u64(pg, i);\n        result = svmul_n_u64_z(pg, result, i, result);\n        result = svmul_n_u64_z(pg, result, current, result);\n    }\n    return svaddv_u64(pg, result);\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```\nuint64_t special_factorial_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    for (uint64_t i = 1; i <= n; i++) {\n        svuint64_t current = svindex_u64(pg, i);\n        result = svmul_n_u64_z(pg, result, i, result);\n        result = svmul_n_u64_z(pg, result, current, result);\n    }\n    return svaddv_u64(pg, result);\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```\nuint64_t special_factorial_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    \n    for (uint64_t i = 1; i <= n; i++) {\n        svuint64_t current_factorial = svdup_n_u64(i);\n        result = svmul_n_u64_z(pg, result, i, result);\n    }\n    \n    uint64_t final_result = 1;\n    for (int i = 0; i < svcntd(); i++) {\n        final_result *= svaddv_u64(svptrue_b64(), svwhilelt_b64(i, result));\n    }\n    \n    return final_result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```\nuint64_t special_factorial_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    svuint64_t result = svdup_n_u64(1);\n    for (uint64_t i = 1; i <= n; i++) {\n        svuint64_t current_factorial = svdup_n_u64(i);\n        result = svmul_n_u64_z(pg, result, current_factorial, pg);\n    }\n    return svaddv_u64(pg, result);\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```\nint sum_squares_simd(const std::vector<int> & lst){\n    int size = lst.size();\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, size);\n    svbool_t pg3 = svptrue_b32();\n    svbool_t pg4 = svptrue_b32();\n    \n    for (int i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &lst[i]);\n        svint32_t index = svindex_s32(0, 1);\n        \n        svbool_t cond3 = svcmpeq_n_s32(pg3, index, 3);\n        svbool_t cond4 = svcmpeq_n_s32(pg4, index, 4);\n        \n        svint32_t squared = svmul_n_s32_z(pg, vec, vec, cond3);\n        svint32_t cubed = svmul_n_s32_z(pg, vec, svmul_n_s32_z(pg, vec, vec, cond4), svnot_z(pg, cond3));\n        \n        vec = svadd_s32_z(pg, squared, cubed);\n        \n        sum += svaddv_s32(svwhilelt_b32(0, svcntw()), vec);\n    }\n    \n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```\nint sum_squares_simd(const std::vector<int> & lst){\n    int size = lst.size();\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, size);\n    svbool_t pg3 = svptrue_b32();\n    svbool_t pg4 = svptrue_b32();\n    \n    for (int i = 0; i < size; i += svcntw()) {\n        svint32_t vec = svld1(pg, &lst[i]);\n        \n        svbool_t cond3 = svcmpeq(pg3, svmul_n_s32_z(pg3, i, 3), 0);\n        svbool_t cond4 = svcmpeq(pg4, svmul_n_s32_z(pg4, i, 4), 0);\n        \n        svint32_t squared = svmul_s32_z(svsel(pg, vec, svmul_n_s32_z(vec, vec, vec), cond3), cond3);\n        svint32_t cubed = svmul_s32_z(svsel(pg, vec, svmul_n_s32_z(vec, vec, vec), cond4), cond4);\n        \n        vec = svadd_s32_z(squared, cubed, svorr_z(pg, cond3, cond4));\n        \n        sum += svaddv_n_s32_z(pg, vec, 0);\n    }\n    \n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```\nint sum_squares_simd(const std::vector<int> & lst){\n    int sum = 0;\n    svbool_t pg = svptrue_b32();\n    svint32_t vec = svld1_s32(pg, &lst[0]);\n\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            vec = svmul_n_s32_z(pg, vec, vec, vec);\n        } else if (i % 4 == 0) {\n            vec = svmul_n_s32_z(pg, vec, vec, vec);\n            vec = svmul_n_s32_z(pg, vec, vec, vec);\n        }\n        sum += svaddv_s32_z(pg, vec);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```\nint sum_squares_simd(const std::vector<int> & lst){\n    int size = lst.size();\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint32_t *data_ptr = (svint32_t *)lst.data();\n\n    for (int i = 0; i < size; i += svcntw()) {\n        svint32_t data = svld1(pg, &data_ptr[i]);\n        svbool_t cond_mul3 = svcmpeq_n_s32(pg, i % 3, 0);\n        svbool_t cond_mul4 = svcmpeq_n_s32(pg, i % 4, 0);\n        svint32_t square = svmul_n_s32_z(pg, data, data, cond_mul3);\n        svint32_t cube = svmul_n_s32_z(pg, svmul_n_s32_z(pg, data, data, cond_mul4), data, svnot_z(cond_mul3));\n        svint32_t result = svadd_s32_z(pg, square, cube);\n        sum += svaddv_n_s32_z(pg, result, 0);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```\nint sum_squares_simd(const std::vector<int> & lst){\n    int size = lst.size();\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    for (int i = 0; i < size; i += svcntw()) {\n        svbool_t pg_next = svwhilelt_b32(i + svcntw(), size);\n        svint32_t vec = svld1_s32(pg, &lst[i]);\n\n        svint32_t index = svindex_s32(0, 1);\n        svbool_t is_multiple_of_3 = svcmpeq_n_s32(pg, index, 3);\n        svbool_t is_multiple_of_4 = svcmpeq_n_s32(pg, index, 4);\n\n        svint32_t squared = svmul_n_s32_z(pg, vec, vec, is_multiple_of_3);\n        svint32_t cubed = svmul_n_s32_z(pg, vec, svmul_n_s32_z(pg, vec, vec, is_multiple_of_4), svnot_z(pg, is_multiple_of_3));\n\n        vec = svadd_s32_z(pg, squared, cubed);\n\n        sum += svaddv_s32(pg, vec);\n\n        pg = pg_next;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```\nint specialFilter_simd(const std::vector<int> & nums){\n    svbool_t pg;\n    svint32_t vec_nums = svld1_s32(pg, nums.data());\n    svint32_t first_digit = svabs_s32(svdiv_n_s32_z(pg, vec_nums, 10));\n    svint32_t last_digit = svabs_s32(svld1_s32(pg, svptrue_b32(), nums.data() + nums.size() - 1) % 10);\n    svint32_t odd_digits = svand_s32_z(pg, svcmpge_n_s32_z(pg, first_digit, 1), svcmpge_n_s32_z(pg, last_digit, 1));\n    svint32_t greater_than_10 = svcmpgt_n_s32_z(pg, vec_nums, 10);\n    svint32_t result = svsel_s32_z(pg, odd_digits, greater_than_10, svdup_n_s32(0));\n    return svcntw(result);\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```\nint specialFilter_simd(const std::vector<int> & nums){\n    svbool_t pg = svptrue_b32();\n    svint32_t count = svdup_s32(0);\n    \n    for (size_t i = 0; i < nums.size(); i += svcntw()) {\n        svint32_t input = svld1_s32(pg, &nums[i]);\n        svint32_t first_digit = svabs_s32(svdiv_n_s32_z(pg, input, 10));\n        svint32_t last_digit = svabs_s32(svld1_s32(pg, &nums[i + svcntw() - 1]) % 10);\n        \n        svbool_t odd_first_digit = svcmpeq_n_s32(pg, first_digit, 1) || svcmpeq_n_s32(pg, first_digit, 3) || svcmpeq_n_s32(pg, first_digit, 5) || svcmpeq_n_s32(pg, first_digit, 7) || svcmpeq_n_s32(pg, first_digit, 9);\n        svbool_t odd_last_digit = svcmpeq_n_s32(pg, last_digit, 1) || svcmpeq_n_s32(pg, last_digit, 3) || svcmpeq_n_s32(pg, last_digit, 5) || svcmpeq_n_s32(pg, last_digit, 7) || svcmpeq_n_s32(pg, last_digit, 9);\n        \n        svbool_t greater_than_10 = svgt_n_s32(pg, input, 10);\n        \n        svbool_t condition = svand_z(pg, svand_z(pg, odd_first_digit, odd_last_digit), greater_than_10);\n        \n        count = svadd_x(pg, count, svcntp_b32(condition));\n    }\n    \n    int result = svaddv_s32(pg, count);\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```cpp\nint specialFilter_simd(const std::vector<int> & nums){\n    svbool_t pg = svptrue_b32();\n    svint32_t count = svdup_s32(0);\n    \n    for(size_t i = 0; i < nums.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &nums[i]);\n        svint32_t first_digit = svabs_s32(svdup_n_s32(svld1_s32(pg, &nums[i]), 0));\n        svint32_t last_digit = svabs_s32(svld1_s32(pg, &nums[i] + svcntw() - 1));\n        \n        svbool_t odd_first_digit = svcmpeq_n_s32(first_digit, 1) | svcmpeq_n_s32(first_digit, 3) | svcmpeq_n_s32(first_digit, 5) | svcmpeq_n_s32(first_digit, 7) | svcmpeq_n_s32(first_digit, 9);\n        svbool_t odd_last_digit = svcmpeq_n_s32(last_digit, 1) | svcmpeq_n_s32(last_digit, 3) | svcmpeq_n_s32(last_digit, 5) | svcmpeq_n_s32(last_digit, 7) | svcmpeq_n_s32(last_digit, 9);\n        \n        svbool_t greater_than_10 = svgt_n_s32(vec, 10);\n        svbool_t condition = svand_s32(odd_first_digit, odd_last_digit);\n        \n        svbool_t result = svand_s32(greater_than_10, condition);\n        count = svadd_s32_z(pg, count, svcntp_b32(result), count, 1);\n    }\n    \n    int result_count = svaddv_s32(pg, count);\n    return result_count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```cpp\nint specialFilter_simd(const std::vector<int> & nums){\n    svbool_t pg;\n    svint64_t count = svdup_s64(0);\n    \n    for(size_t i = 0; i < nums.size(); i += svcntw()) {\n        svint64_t vec = svld1_s64(pg, &nums[i]);\n        svbool_t odd_first = svcmp_s64_mask(vec % 10, 1, SV_POW2, pg);\n        svbool_t odd_last = svcmp_s64_mask(vec / 10, 1, SV_POW2, pg);\n        svbool_t greater_than_10 = svcmp_s64_mask(vec, 10, SV_GT, pg);\n        svbool_t filter = svand_s64(odd_first, odd_last);\n        filter = svand_s64(filter, greater_than_10);\n        count = svadd_s64_m(pg, count, svcntp_b64(filter), count);\n    }\n    \n    int result = 0;\n    for (int i = 0; i < svcntw(); ++i) {\n        result += svaddv_s64(svptrue_b64(), count);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```cpp\nint specialFilter_simd(const std::vector<int> & nums){\n    svbool_t pg = svptrue_b32();\n    svint32_t count = svdup_s32(0);\n    \n    for(size_t i = 0; i < nums.size(); i += svcntw()) {\n        svint32_t vec = svld1_s32(pg, &nums[i]);\n        svint32_t first_digit = svabs_s32(svdup_n_s32(svld1_s32(pg, &nums[i]), 0));\n        svint32_t last_digit = svabs_s32(svld1_s32(pg, &nums[i] + svcntw() - 1));\n        \n        svbool_t cond = svand_z(pg, svcmpgt_n_s32(vec, 10), svand_n_s32(svcmpne(first_digit, 0), svcmpne(last_digit, 0)));\n        count = svadd_x(pg, count, svcntw(), svsel(pg, count, svdup_s32(1), cond));\n    }\n    \n    int result = svaddv_s32(pg, count);\n    return result;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```\nuint64_t get_max_triples_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    uint64_t count = 0;\n    \n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_n_u64(indices, n) - indices + 1;\n    \n    for (uint64_t i = 0; i < n - 2; i++) {\n        svuint64_t a_i = svindex_u64(i, 1);\n        svuint64_t a_j = svindex_u64(i + 1, 1);\n        svuint64_t a_k = svindex_u64(i + 2, 1);\n        \n        svuint64_t sum = svadd_n_u64(svadd_n_u64(a_i, a_j), a_k);\n        svbool_t divisible_by_3 = svcmpeq_n_u64_z(pg, sum, 0, SV_MUL_BY_3);\n        \n        count += svcntd(divisible_by_3);\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```\nuint64_t get_max_triples_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    uint64_t count = 0;\n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_n_u64_z(pg, indices, n) - indices + 1;\n\n    for (uint64_t i = 0; i < n - 2; i++) {\n        svuint64_t a_i = svindex_u64(0, i);\n        svuint64_t a_i_values = svsel_u64_z(pg, a, a_i, svwhilelt_b64(i, n));\n        \n        for (uint64_t j = i + 1; j < n - 1; j++) {\n            svuint64_t a_j = svindex_u64(0, j);\n            svuint64_t a_j_values = svsel_u64_z(pg, a, a_j, svwhilelt_b64(j, n));\n            svuint64_t sum_ij = a_i_values + a_j_values;\n\n            for (uint64_t k = j + 1; k < n; k++) {\n                svuint64_t a_k = svindex_u64(0, k);\n                svuint64_t a_k_values = svsel_u64_z(pg, a, a_k, svwhilelt_b64(k, n));\n                svuint64_t sum_ijk = sum_ij + a_k_values;\n\n                svuint64_t mod3 = svmul_n_u64_z(pg, sum_ijk, 1) % 3;\n                svbool_t is_multiple_of_3 = svcmpeq_n_u64_z(pg, mod3, 0);\n                count += svcnt_true(is_multiple_of_3);\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```\nuint64_t get_max_triples_simd(uint64_t n){\n    svbool_t pg;\n    svuint64_t a = svcreate_n_u64(0, SV_VL1);\n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t increment = svdup_n_u64(1);\n    svuint64_t result = svcreate_n_u64(0, SV_VL1);\n    uint64_t count = 0;\n\n    for (uint64_t i = 0; i < n; i += svcntd()) {\n        pg = svwhilelt_b64(i, n);\n        a = svmad_u64_z(pg, indices, indices, a);\n        indices = svadd_n_u64_z(pg, indices, increment);\n\n        svuint64_t sum = svadd_n_u64_z(pg, a, svadd_n_u64_z(pg, svext_n_u64_x(pg, a, 1), svext_n_u64_x(pg, a, 2)));\n        svuint64_t divisible_by_3 = svcmpeq_n_u64_z(pg, svmul_n_u64_z(pg, sum, 43691), 0); // 43691 is the modular inverse of 3 modulo 2^64\n\n        svuint64_t valid_indices = svand_n_u64_z(pg, svand_n_u64_z(pg, svcmpne_n_u64(a, 0), svcmpne_n_u64(svext_n_u64_x(pg, a, 1), 0)), svcmpne_n_u64(svext_n_u64_x(pg, a, 2), 0));\n        svuint64_t valid_triples = svsel_u64_z(pg, svand_n_u64_z(pg, svand_n_u64_z(pg, svext_n_u64_x(pg, divisible_by_3, 1), svext_n_u64_x(pg, divisible_by_3, 2)), divisible_by_3), valid_indices, svcreate_u64(0));\n\n        result = svadd_n_u64_z(pg, result, valid_triples);\n    }\n\n    svbool_t pg_all = svptrue_b64();\n    count = svaddv_u64(pg_all, result);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```\nuint64_t get_max_triples_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    uint64_t count = 0;\n    \n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_n_u64_z(pg, indices, n) - indices + svdup_n_u64(1);\n    \n    for (uint64_t i = 0; i < n - 2; i++) {\n        svuint64_t a_i = svindex_u64(i, 1);\n        svuint64_t a_j = svindex_u64(i + 1, 1);\n        \n        for (uint64_t j = i + 1; j < n - 1; j++) {\n            svuint64_t sum_ij = svadd_n_u64_z(pg, a_i, a_j);\n            svuint64_t a_k = svindex_u64(j + 1, 1);\n            \n            for (uint64_t k = j + 1; k < n; k++) {\n                svuint64_t sum_ijk = svadd_n_u64_z(pg, sum_ij, a_k);\n                svuint64_t mod_3 = svmul_n_u64_z(pg, sum_ijk, 1) % svdup_n_u64(3);\n                \n                if (svptest_any(sveq_n_u64_z(pg, mod_3, 0))) {\n                    count++;\n                }\n                \n                a_k = svadd_n_u64_z(pg, a_k, 1);\n            }\n            \n            a_j = svadd_n_u64_z(pg, a_j, 1);\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```\nuint64_t get_max_triples_simd(uint64_t n){\n    svbool_t pg = svptrue_b64();\n    uint64_t count = 0;\n    \n    svuint64_t indices = svindex_u64(0, 1);\n    svuint64_t a = svmul_n_u64_z(pg, indices, n) - indices + 1;\n\n    for (uint64_t i = 0; i < n - 2; i++) {\n        svuint64_t a_i = svindex_u64(i, 1);\n        for (uint64_t j = i + 1; j < n - 1; j++) {\n            svuint64_t a_j = svindex_u64(j, 1);\n            for (uint64_t k = j + 1; k < n; k++) {\n                svuint64_t a_k = svindex_u64(k, 1);\n                svuint64_t sum = svadd_n_u64_z(pg, svadd_n_u64_z(pg, a_i, a_j), a_k);\n                svuint64_t mod3 = svmul_n_u64_z(pg, svdiv_n_u64_z(pg, sum, 3), 3);\n                svbool_t cmp = svcmpeq_n_u64(pg, sum, mod3);\n                count += svcntd_b64(cmp);\n            }\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y){\n    svbool_t pg = svptrue_b32();\n    svbool_t pg_prime = svptest_b32(n);\n\n    int result;\n    if (svptest_any(svptrue_b32(), pg_prime)) {\n        result = x;\n    } else {\n        result = y;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y){\n    svbool_t pg = svptrue_b32();\n    svbool_t pg_prime = svptest_first(svindex_s32(1, 1), svindex_s32(1, 1), pg);\n\n    if (n <= 1) {\n        return y;\n    }\n\n    for (int i = 2; i*i <= n; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n\n    return svsel_s32(pg_prime, x, y);\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y){\n    svbool_t pg = svptrue_b32();\n    svbool_t pg_prime = svptest_first(svptrue_b32(), n > 1);\n    int result;\n\n    if (svptest_any(pg_prime)) {\n        result = x;\n    } else {\n        result = y;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y){\n    svbool_t pg = svptrue_b32();\n    svbool_t pg_prime = svptest_b32(n, pg);\n\n    int result;\n    if (svptest_any(svptrue_b32(), pg_prime)) {\n        result = x;\n    } else {\n        result = y;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y){\n    svbool_t pg = svptrue_b32();\n    svbool_t pg_prime = svptest_first(svptrue_b32(), n > 1);\n    \n    if (n > 1) {\n        for (int i = 2; i*i <= n; i++) {\n            svbool_t pg_divisible = svptest_first(svptrue_b32(), n % i == 0);\n            pg_prime = svand_z(pg_prime, pg_divisible);\n        }\n    }\n    \n    int result;\n    if (svptest_any(pg_prime)) {\n        result = y;\n    } else {\n        result = x;\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```\nuint64_t double_the_difference_simd(const std::vector<float> & lst){\n    svbool_t pg;\n    svfloat32_t vec;\n    svint32_t mask, odd_mask;\n    svfloat32_t squared_vec;\n    svint32_t is_odd_mask;\n    svint32_t is_negative_mask;\n    svint32_t is_integer_mask;\n    svfloat32_t result = svdup_f32(0.0f);\n    \n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b32(i, lst.size());\n        vec = svld1(pg, &lst[i]);\n        \n        mask = svcmpeq_f32(svrinta_f32_z(pg, vec), vec);\n        odd_mask = svand_n_s32_z(pg, mask, 1);\n        \n        squared_vec = svmul_f32_z(pg, vec, vec);\n        \n        is_odd_mask = svsel_s32(pg, svdup_s32(0), svdup_s32(1), odd_mask);\n        is_negative_mask = svcmpgt_f32_z(pg, vec, svdup_f32(0.0f));\n        is_integer_mask = svcmpeq_f32_z(pg, svrinta_f32_z(pg, vec), vec);\n        \n        svbool_t valid_mask = svand_n_b32(pg, svand_n_b32(pg, is_odd_mask, is_negative_mask), is_integer_mask);\n        \n        result = svmla_f32_z(pg, result, squared_vec, svsel_f32(valid_mask, vec, svdup_f32(0.0f)));\n    }\n    \n    return svcntw()*svaddv_u64(svptrue_b64(), svreinterpret_u64_f32(result));\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```\nuint64_t double_the_difference_simd(const std::vector<float> & lst){\n    svbool_t pg;\n    svfloat32_t vec;\n    svint32_t mask, indices;\n    uint64_t result = 0;\n\n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b32(i, lst.size());\n        vec = svld1(pg, &lst[i]);\n        mask = svcmpeq_n_f32_z(pg, vec, svrint_z_f32(vec));\n        indices = svindex_z(pg, 0, 1);\n        svbool_t odd_mask = svand_z(pg, svcmpge_n_s32_z(pg, svreinterpret_s32_f32(vec), 0), svmul_n_s32_z(pg, svreinterpret_s32_f32(vec), 2));\n        svfloat32_t odd_vec = svsel_f32(odd_mask, vec, svdup_f32(0));\n        svint32_t odd_indices = svsel_s32(odd_mask, indices, svdup_s32(0));\n        svfloat32_t odd_squares = svmul_f32_z(pg, odd_vec, odd_vec);\n        svint32_t odd_result = svaddv_s32_z(pg, odd_indices, odd_squares);\n        result += svaddv_s32(odd_result);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```\nuint64_t double_the_difference_simd(const std::vector<float> & lst){\n    svbool_t pg;\n    svfloat32_t vec;\n    svint32_t mask, indices;\n    uint64_t result = 0;\n\n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b32(i, lst.size());\n        vec = svld1(pg, &lst[i]);\n        mask = svcmpeq_n_f32(pg, svrint_z_f32(vec), vec);\n        indices = svindex_s32(0, 1);\n        mask = svand_n_s32_z(pg, mask, 1);\n        indices = svmul_n_s32_z(pg, indices, 2);\n        vec = svmul_f32_z(svptrue_b32(), vec, vec);\n        vec = svmul_f32_z(svptrue_b32(), vec, svsel(mask, indices, indices));\n        result += svaddv_n_f32(svptrue_b32(), vec, 0);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```\nuint64_t double_the_difference_simd(const std::vector<float> & lst){\n    uint64_t result = 0;\n    svbool_t pg = svwhilelt_b64(0, lst.size());\n    svfloat32_t zero = svdup_f32(0.0f);\n    svint32_t one = svdup_s32(1);\n    svint32_t two = svdup_s32(2);\n    \n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        svfloat32_t vec = svld1(pg, &lst[i]);\n        svbool_t odd_mask = svcmpeq_n_f32_z(pg, svrint_z_f32(vec), vec);\n        svbool_t positive_mask = svcmpgt_n_f32_z(pg, vec, zero);\n        svbool_t integer_mask = svcmpeq_n_f32_z(pg, svrint_z_f32(vec), vec);\n        svbool_t valid_mask = svand_z(pg, svand_z(pg, odd_mask, positive_mask), integer_mask);\n        \n        svfloat32_t squared = svmul_f32_z(pg, vec, vec);\n        svfloat32_t valid_squared = svsel_z(pg, zero, squared, valid_mask);\n        \n        svint32_t odd_int = svsel_z(pg, two, one, odd_mask);\n        svint32_t valid_odd_int = svsel_z(pg, zero, odd_int, valid_mask);\n        \n        svint64_t result_part = svmul_n_s32_z(pg, valid_odd_int, svreinterpret_s32_f32(valid_squared));\n        result += svaddv(result_part);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```\nuint64_t double_the_difference_simd(const std::vector<float> & lst){\n    svbool_t pg;\n    svfloat32_t vec;\n    svint32_t mask;\n    uint64_t result = 0;\n\n    for (size_t i = 0; i < lst.size(); i += svcntw()) {\n        pg = svwhilelt_b32(i, lst.size());\n        vec = svld1(pg, &lst[i]);\n        mask = svcmpgt_n_s32_z(pg, svreinterpret_s32_f32(vec), 0);\n        svfloat32_t squared = svmul_f32_z(pg, svreinterpret_f32_s32(mask), vec);\n        svint32_t odd = svsel_s32(pg, mask, svdup_n_s32(0), mask);\n        svfloat32_t squared_odd = svmul_f32_z(pg, svreinterpret_f32_s32(odd), squared);\n        svfloat32_t squared_odd_squared = svmul_f32_z(pg, squared_odd, squared_odd);\n        svint64_t squared_odd_squared_int = svreinterpret_s64_f32(squared_odd_squared);\n        result += svaddv_n_s64_z(pg, squared_odd_squared_int, 0);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess){\n    size_t size = game.size();\n    std::vector<int> result(size);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        \n        svint32_t game_vec = svld1_s32(pg, &game[i]);\n        svint32_t guess_vec = svld1_s32(pg, &guess[i]);\n        \n        svint32_t diff = svabd_s32_z(pg, game_vec, guess_vec);\n        \n        svst1_s32(pg, &result[i], diff);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess){\n    size_t size = game.size();\n    std::vector<int> result(size);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svint32_t game_vec = svld1_s32(pg, &game[i]);\n        svint32_t guess_vec = svld1_s32(pg, &guess[i]);\n\n        svint32_t diff = svabd_s32_z(pg, game_vec, guess_vec);\n\n        svst1_s32(pg, &result[i], diff);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess){\n    size_t size = game.size();\n    std::vector<int> result(size);\n    \n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        \n        svint32_t game_vec = svld1_s32(pg, &game[i]);\n        svint32_t guess_vec = svld1_s32(pg, &guess[i]);\n        \n        svint32_t diff = svabd_s32_z(pg, svsub_s32_z(pg, game_vec, guess_vec), svdup_n_s32(0));\n        \n        svst1_s32(pg, &result[i], diff);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess){\n    size_t size = game.size();\n    std::vector<int> result(size);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        \n        svint32_t game_vec = svld1(pg, &game[i]);\n        svint32_t guess_vec = svld1(pg, &guess[i]);\n        \n        svint32_t diff = svabd_s32_z(pg, game_vec, guess_vec);\n        \n        svst1(pg, &result[i], diff);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess){\n    size_t size = game.size();\n    std::vector<int> result(size);\n\n    svbool_t pg = svptrue_b32();\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t game_vec = svld1(pg, &game[i]);\n        svint32_t guess_vec = svld1(pg, &guess[i]);\n        svint32_t diff = svabs_s32(svsub_s32_z(pg, game_vec, guess_vec));\n        svst1(pg, &result[i], diff);\n    }\n\n    return result;\n}\n```"}

{"task_id": "SimdBench_0", "completion": "```cpp\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```cpp\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```cpp\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```cpp\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```cpp\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```cpp\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```cpp\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```cpp\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```cpp\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```cpp\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; ++r) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```cpp\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]];\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```cpp\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]];\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```cpp\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]];\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```cpp\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]];\n    }\n    for (size_t i = 0; i < length; ++i) {\n        src[indices[i]] = dst[i];\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```cpp\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]];\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i];\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    for (size_t i = 0; i < slice_size; i++) {\n        slice[i] = tensor[start_idx + i];\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    size_t end_idx = start_idx + slice_size;\n    for (size_t i = start_idx, j = 0; i < end_idx; i++, j++) {\n        slice[j] = tensor[i];\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    size_t end_idx = start_idx + slice_size;\n    for (size_t i = start_idx, j = 0; i < end_idx; i++, j++) {\n        slice[j] = tensor[i];\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```cpp\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n    size_t end_idx = start_idx + slice_size;\n    memcpy(slice, &tensor[start_idx], slice_size * sizeof(uint8_t));\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```cpp\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size * dim3;\n    for (size_t i = 0; i < slice_size; i++) {\n        for (size_t j = 0; j < dim3; j++) {\n            slice[i * dim3 + j] = tensor[start_idx + i * dim3 + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < rows && ii < i + block_size; ii++) {\n                for (size_t jj = j; jj < cols && jj < j + block_size; jj++) {\n                    dst[jj * rows + ii] = src[ii * cols + jj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < rows && ii < i + block_size; ++ii) {\n                for (size_t jj = j; jj < cols && jj < j + block_size; ++jj) {\n                    dst[jj * rows + ii] = src[ii * cols + jj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < rows && ii < i + block_size; ii++) {\n                for (size_t jj = j; jj < cols && jj < j + block_size; jj++) {\n                    dst[jj * rows + ii] = src[ii * cols + jj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```cpp\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < rows && ii < i + block_size; ++ii) {\n                for (size_t jj = j; jj < cols && jj < j + block_size; ++jj) {\n                    dst[jj * rows + ii] = src[ii * cols + jj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t ii = i; ii < rows && ii < i + block_size; ++ii) {\n                for (size_t jj = j; jj < cols && jj < j + block_size; ++jj) {\n                    dst[jj * rows + ii] = src[ii * cols + jj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```cpp\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0;\n    for (size_t i = 0; i < dim; i++) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```cpp\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; i++) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```cpp\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```cpp\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            if (src[index] > threshold) {\n                dst[index] = src[index] * scale;\n            } else {\n                dst[index] = src[index];\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```cpp\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            if (src[index] > threshold) {\n                dst[index] = src[index] * scale;\n            } else {\n                dst[index] = src[index];\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```cpp\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            if (src[index] > threshold) {\n                dst[index] = src[index] * scale;\n            } else {\n                dst[index] = src[index];\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```cpp\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            if (src[index] > threshold) {\n                dst[index] = src[index] * scale;\n            } else {\n                dst[index] = src[index];\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```cpp\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            if (src[index] > threshold) {\n                dst[index] = src[index] * scale;\n            } else {\n                dst[index] = src[index];\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```cpp\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        size_t dst_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_index + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```cpp\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        size_t dst_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_index + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```cpp\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t new_index = indices[i];\n        for (size_t j = 0; j < cols; ++j) {\n            dst[new_index * cols + j] = src[i * cols + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```cpp\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        size_t dst_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_index + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```cpp\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row_index = indices[i] * cols;\n        size_t dst_row_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_row_index + j] = src[src_row_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```\nint vector_even_min(const int *src, size_t length){\n    if(length == 0){\n        return -1;\n    }\n    \n    int min = INT_MAX;\n    for(size_t i = 0; i < length; i += 2){\n        if(src[i] % 2 == 0 && src[i] < min){\n            min = src[i];\n        }\n    }\n    \n    if(min == INT_MAX){\n        return -1;\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```\nint vector_even_min(const int *src, size_t length){\n    if(length == 0){\n        return -1;\n    }\n    \n    int min = INT_MAX;\n    for(size_t i = 0; i < length; i += 2){\n        if(src[i] % 2 == 0 && src[i] < min){\n            min = src[i];\n        }\n    }\n    \n    if(min == INT_MAX){\n        return -1;\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```\nint vector_even_min(const int *src, size_t length){\n    if(length == 0){\n        return -1;\n    }\n    \n    int min = INT_MAX;\n    for(size_t i = 0; i < length; i += 2){\n        if(src[i] % 2 == 0 && src[i] < min){\n            min = src[i];\n        }\n    }\n    \n    if(min == INT_MAX){\n        return -1;\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```\nint vector_even_min(const int *src, size_t length){\n    if(length == 0){\n        return -1;\n    }\n    \n    int min = INT_MAX;\n    for(size_t i = 0; i < length; i += 2){\n        if(src[i] % 2 == 0 && src[i] < min){\n            min = src[i];\n        }\n    }\n    \n    if(min == INT_MAX){\n        return -1;\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```\nint vector_even_min(const int *src, size_t length){\n    if(length == 0){\n        return -1;\n    }\n    \n    int min = INT_MAX;\n    for(size_t i = 0; i < length; i += 2){\n        if(src[i] % 2 == 0 && src[i] < min){\n            min = src[i];\n        }\n    }\n    \n    if(min == INT_MAX){\n        return -1;\n    }\n    \n    return min;\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arith_shift = src[i] >> shift;\n        int logical_shift = (uint32_t)src[i] >> shift;\n        dst[i] = arith_shift + logical_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arith_shift = src[i] >> shift;\n        uint32_t temp = (uint32_t)src[i];\n        int logic_shift = (int)(temp >> shift);\n        dst[i] = arith_shift + logic_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arith_shift = src[i] >> shift;\n        int logical_shift = (uint32_t)src[i] >> shift;\n        dst[i] = arith_shift + logical_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arith_shift = src[i] >> shift;\n        uint32_t temp = (uint32_t)src[i];\n        int logic_shift = (int)(temp >> shift);\n        dst[i] = arith_shift + logic_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arith_shift = src[i] >> shift;\n        uint32_t temp = (uint32_t)src[i];\n        int logic_shift = (int)(temp >> shift);\n        dst[i] = arith_shift + logic_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```cpp\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows * cols; ++i) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```cpp\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows * cols; ++i) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```cpp\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows * cols; ++i) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```cpp\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows * cols; ++i) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```cpp\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows * cols; ++i) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t maxIndex = 0;\n    int8_t maxValue = src[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > maxValue) {\n            maxValue = src[i];\n            maxIndex = i;\n        }\n    }\n\n    return maxIndex;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t maxIndex = 0;\n    int8_t maxValue = src[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > maxValue) {\n            maxValue = src[i];\n            maxIndex = i;\n        }\n    }\n\n    return maxIndex;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```cpp\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t maxIndex = 0;\n    int8_t maxValue = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > maxValue) {\n            maxValue = src[i];\n            maxIndex = i;\n        }\n    }\n    \n    return maxIndex;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n\n    size_t maxIndex = 0;\n    int8_t maxValue = src[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > maxValue) {\n            maxValue = src[i];\n            maxIndex = i;\n        }\n    }\n\n    return maxIndex;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```cpp\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t maxIndex = 0;\n    int8_t maxValue = src[0];\n    \n    for (size_t i = 1; i < length; ++i) {\n        if (src[i] > maxValue) {\n            maxValue = src[i];\n            maxIndex = i;\n        }\n    }\n    \n    return maxIndex;\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (i & mask) ? src1[i] : src2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t num = src[i];\n        uint32_t count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t num = src[i];\n        uint32_t count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t num = src[i];\n        uint32_t count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t num = src[i];\n        uint32_t count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t num = src[i];\n        uint32_t count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```cpp\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```cpp\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```cpp\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```cpp\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```cpp\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```cpp\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    sum += A[i * n + k] * B[k * p + j];\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```cpp\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    sum += A[i * n + k] * B[k * p + j];\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```cpp\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    sum += A[i * n + k] * B[k * p + j];\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```cpp\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    sum += A[i * n + k] * B[k * p + j];\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```cpp\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    sum += A[i * n + k] * B[k * p + j];\n                }\n            }\n            C[i * p + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```cpp\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```cpp\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```cpp\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```cpp\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```cpp\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```cpp\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```cpp\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```cpp\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```cpp\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```cpp\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```cpp\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if(abs(src1[i] - src2[i]) <= 50 && i % 2 == 0){\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```cpp\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if(abs(src1[i] - src2[i]) <= 50 && i % 2 == 0){\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```cpp\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if(abs(src1[i] - src2[i]) <= 50 && i % 2 == 0){\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```cpp\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if(abs(src1[i] - src2[i]) <= 50 && i % 2 == 0){\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```cpp\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if(abs(src1[i] - src2[i]) <= 50 && i % 2 == 0){\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```cpp\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```cpp\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```cpp\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```cpp\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```cpp\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_squares = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = std::sqrt(sum_squares);\n        for (size_t j = 0; j < n; ++j) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_squares = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = std::sqrt(sum_squares);\n        for (size_t j = 0; j < n; ++j) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_squares = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = std::sqrt(sum_squares);\n        for (size_t j = 0; j < n; ++j) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_squares = 0.0;\n        for (size_t j = 0; j < n; ++j) {\n            sum_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = std::sqrt(sum_squares);\n        for (size_t j = 0; j < n; ++j) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_squares = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = std::sqrt(sum_squares);\n        for (size_t j = 0; j < n; ++j) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```cpp\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```cpp\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; i++) {\n        for (size_t j = 0; j < p; j++) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; k++) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```cpp\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```cpp\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            dst[j * rows + i] = roundf(src[i * cols + j] * 4.0) / 4.0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```cpp\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            dst[j * rows + i] = roundf(src[i * cols + j] * 4) / 4;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```cpp\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            dst[j * rows + i] = roundf(src[i * cols + j] * 4.0) / 4.0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```cpp\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            dst[j * rows + i] = roundf(src[i * cols + j] * 4) / 4;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```cpp\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            dst[j * rows + i] = roundf(src[i * cols + j] * 4.0) / 4.0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```cpp\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        dst[i] = (float)((int)tensor1[i] - (int)tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```cpp\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        dst[i] = (float)((int)tensor1[i] - (int)tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```cpp\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        dst[i] = (float)((int)tensor1[i] - (int)tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```cpp\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        dst[i] = (float)((int)tensor1[i] - (int)tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```cpp\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        dst[i] = (float)((int)tensor1[i] - (int)tensor2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```cpp\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```cpp\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```cpp\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```cpp\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```cpp\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m * n; ++i) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```cpp\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```cpp\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```cpp\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```cpp\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```cpp\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```cpp\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n    \n    for (size_t i = 0; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n    \n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```cpp\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    for (size_t i = 0; i < m * n; ++i) {\n        sum += mat[i];\n    }\n    return sum / (m * n);\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```cpp\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    for (size_t i = 0; i < m * n; ++i) {\n        sum += mat[i];\n    }\n    return sum / (m * n);\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```cpp\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    for (size_t i = 0; i < m * n; ++i) {\n        sum += mat[i];\n    }\n    return sum / (m * n);\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```cpp\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    for (size_t i = 0; i < m * n; ++i) {\n        sum += mat[i];\n    }\n    return sum / (m * n);\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```cpp\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool isSorted = true;\n        for (size_t j = 0; j < cols - 1; ++j) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] > matrix[i * cols + j + 1]) {\n                    isSorted = false;\n                    break;\n                }\n            } else {\n                if (matrix[i * cols + j] < matrix[i * cols + j + 1]) {\n                    isSorted = false;\n                    break;\n                }\n            }\n        }\n        if (!isSorted) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```cpp\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool isSorted = true;\n        for (size_t j = 0; j < cols - 1; ++j) {\n            int current = *(matrix + i * cols + j);\n            int next = *(matrix + i * cols + j + 1);\n            if ((directions[i] && current > next) || (!directions[i] && current < next)) {\n                isSorted = false;\n                break;\n            }\n        }\n        if (!isSorted) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```cpp\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool isSorted = true;\n        for (size_t j = 0; j < cols - 1; ++j) {\n            int current = *(matrix + i * cols + j);\n            int next = *(matrix + i * cols + j + 1);\n            if ((directions[i] && current > next) || (!directions[i] && current < next)) {\n                isSorted = false;\n                break;\n            }\n        }\n        if (!isSorted) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```cpp\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool ascending = directions[i];\n        bool sorted = true;\n        for (size_t j = 1; j < cols; ++j) {\n            int current = *(matrix + i * cols + j);\n            int previous = *(matrix + i * cols + j - 1);\n            if ((ascending && current < previous) || (!ascending && current > previous)) {\n                sorted = false;\n                break;\n            }\n        }\n        if (!sorted) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```cpp\n#include <iostream>\n\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool sorted = true;\n        for (size_t j = 0; j < cols - 1; ++j) {\n            if ((directions[i] && matrix[i * cols + j] > matrix[i * cols + j + 1]) ||\n                (!directions[i] && matrix[i * cols + j] < matrix[i * cols + j + 1])) {\n                sorted = false;\n                break;\n            }\n        }\n        if (!sorted) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```cpp\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool match = true;\n        for (size_t j = 0; j < cols; ++j) {\n            if (matrix[i * cols + j] != vector[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```cpp\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool match = true;\n        for (size_t j = 0; j < cols; ++j) {\n            if (matrix[i * cols + j] != vector[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```cpp\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool match = true;\n        for (size_t j = 0; j < cols; ++j) {\n            if (matrix[i * cols + j] != vector[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```cpp\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool match = true;\n        for (size_t j = 0; j < cols; ++j) {\n            if (matrix[i * cols + j] != vector[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```cpp\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        bool match = true;\n        for (size_t j = 0; j < cols; ++j) {\n            if (matrix[i * cols + j] != vector[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```cpp\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    \n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```cpp\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```cpp\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t size = dims[0] * dims[1] * dims[2] * dims[3];\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```cpp\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t size = dims[0] * dims[1] * dims[2] * dims[3];\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```cpp\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    \n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        y[i] = llabs(a * x[i]);\n        y[i] -= y[i] < 0 ? 2 * y[i] : 0;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        y[i] = llabs(a * x[i]);\n        y[i] = llabs(y[i]);\n        y[i] = a - y[i];\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        y[i] = llabs(a * x[i]);\n        y[i] -= y[i] < 0 ? 2 * y[i] : 0;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        y[i] = llabs(a * x[i]);\n        y[i] -= y[i] < 0 ? 2 * y[i] : 0;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        y[i] = llabs(a * x[i]);\n        y[i] = llabs(y[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n    \n    for (size_t i = 1; i < length; ++i) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```cpp\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 1; j < cols; ++j) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```cpp\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 1; j < cols; ++j) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```cpp\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 1; j < cols; ++j) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 1; j < cols; ++j) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```cpp\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 1; j < cols; ++j) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t k = 0; k < block_size; ++k) {\n                for (size_t l = 0; l < block_size; ++l) {\n                    if (matrix[i * cols + j + k * cols + l] != matrix[j + k * cols + l]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t k = 0; k < block_size; ++k) {\n                for (size_t l = 0; l < block_size; ++l) {\n                    if (matrix[i * cols + j + k * cols + l] != matrix[j + k * cols + l]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t k = 0; k < block_size; ++k) {\n                for (size_t l = 0; l < block_size; ++l) {\n                    if (matrix[i * cols + j + k * cols + l] != matrix[j + k * cols + l]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t k = 0; k < block_size; ++k) {\n                for (size_t l = 0; l < block_size; ++l) {\n                    if (matrix[i * cols + j + k * cols + l] != matrix[j + k * cols + l]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```cpp\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t k = 0; k < block_size; ++k) {\n                for (size_t l = 0; l < block_size; ++l) {\n                    if (matrix[i * cols + j + k * cols + l] != matrix[j + k * cols + l]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks == 0) {\n        return false;\n    }\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::abs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks == 0) {\n        return false;\n    }\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::fabs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::abs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::abs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    if (num_blocks < 2) {\n        return false;\n    }\n\n    for (size_t i = 1; i < num_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::abs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            sum += matrix[i * cols + j] * matrix[i * cols + j];\n        }\n        double norm = std::sqrt(sum);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```cpp\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            double val = matrix[i * cols + j];\n            sum += val * val;\n        }\n        result[i] = sqrt(sum) > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double norm = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            norm += matrix[i * cols + j] * matrix[i * cols + j];\n        }\n        norm = std::sqrt(norm);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```cpp\n#include <cmath>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double norm = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            norm += matrix[i * cols + j] * matrix[i * cols + j];\n        }\n        norm = std::sqrt(norm);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```cpp\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double sum = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            sum += matrix[i * cols + j] * matrix[i * cols + j];\n        }\n        result[i] = (sqrt(sum) > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```cpp\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```cpp\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```cpp\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```cpp\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```cpp\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n\n    for (size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n\n    return sum_squares - sum_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n    \n    for (size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n    \n    return sum_squares - sum_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n\n    for (size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n\n    return sum_squares - sum_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n    \n    for (size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n    \n    return sum_squares - sum_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_squares = 0;\n    int64_t sum_products = 0;\n    \n    for (size_t i = 0; i < length; i++) {\n        sum_squares += (int64_t)A[i] * A[i];\n        sum_products += (int64_t)A[i] * B[i];\n    }\n    \n    return sum_squares - sum_products;\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```cpp\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```cpp\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```cpp\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```cpp\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```cpp\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```cpp\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```cpp\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```cpp\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```cpp\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```cpp\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```cpp\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    C[midpoint] = A[midpoint];\n    \n    for (size_t i = 0; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n    \n    for (size_t i = midpoint + 1; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```cpp\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    C[midpoint] = A[midpoint];\n    \n    for (size_t i = 0; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n    \n    for (size_t i = midpoint + 1; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```cpp\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    C[midpoint] = A[midpoint];\n    \n    for (size_t i = 0; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n    \n    for (size_t i = midpoint + 1; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```cpp\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    C[midpoint] = A[midpoint];\n    \n    for (size_t i = 0; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n    \n    for (size_t i = midpoint + 1; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```cpp\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    C[midpoint] = A[midpoint];\n    \n    for (size_t i = 0; i < midpoint; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n    \n    for (size_t i = midpoint + 1; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            for (size_t k = 0; k < dim3; ++k) {\n                size_t idx = i * dim2 * dim3 + j * dim3 + k;\n                if (cond1[idx] && cond2[idx]) {\n                    out[idx] = A[idx];\n                } else if (cond1[idx] && !cond2[idx]) {\n                    out[idx] = B[idx];\n                } else if (!cond1[idx] && cond2[idx]) {\n                    out[idx] = C[idx];\n                } else {\n                    out[idx] = D[idx];\n                }\n            }\n        }\n    }\n}\n```  "}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            for (size_t k = 0; k < dim3; ++k) {\n                size_t index = i * dim2 * dim3 + j * dim3 + k;\n                if (cond1[index] && cond2[index]) {\n                    out[index] = A[index];\n                } else if (cond1[index] && !cond2[index]) {\n                    out[index] = B[index];\n                } else if (!cond1[index] && cond2[index]) {\n                    out[index] = C[index];\n                } else {\n                    out[index] = D[index];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            for (size_t k = 0; k < dim3; ++k) {\n                size_t idx = i * dim2 * dim3 + j * dim3 + k;\n                if (cond1[idx] && cond2[idx]) {\n                    out[idx] = A[idx];\n                } else if (cond1[idx] && !cond2[idx]) {\n                    out[idx] = B[idx];\n                } else if (!cond1[idx] && cond2[idx]) {\n                    out[idx] = C[idx];\n                } else {\n                    out[idx] = D[idx];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            for (size_t k = 0; k < dim3; ++k) {\n                size_t index = i * dim2 * dim3 + j * dim3 + k;\n                if (cond1[index] && cond2[index]) {\n                    out[index] = A[index];\n                } else if (cond1[index] && !cond2[index]) {\n                    out[index] = B[index];\n                } else if (!cond1[index] && cond2[index]) {\n                    out[index] = C[index];\n                } else {\n                    out[index] = D[index];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            for (size_t k = 0; k < dim3; ++k) {\n                size_t index = i * dim2 * dim3 + j * dim3 + k;\n                if (cond1[index] && cond2[index]) {\n                    out[index] = A[index];\n                } else if (cond1[index] && !cond2[index]) {\n                    out[index] = B[index];\n                } else if (!cond1[index] && cond2[index]) {\n                    out[index] = C[index];\n                } else {\n                    out[index] = D[index];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```cpp\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        uint32_t val = A[i];\n        uint8_t count = 0;\n        while (val) {\n            count += val & 1;\n            val >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```cpp\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        uint32_t val = A[i];\n        uint8_t count = 0;\n        while (val) {\n            count += val & 1;\n            val >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```cpp\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        uint32_t val = A[i];\n        uint8_t count = 0;\n        while (val) {\n            count += val & 1;\n            val >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```cpp\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        uint32_t val = A[i];\n        uint8_t count = 0;\n        while (val) {\n            count += val & 1;\n            val >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```cpp\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1 * dim2 * dim3; ++i) {\n        uint32_t val = A[i];\n        uint8_t count = 0;\n        while (val) {\n            count += val & 1;\n            val >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```cpp\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows * cols; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```cpp\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows * cols; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```cpp\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows * cols; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```cpp\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows * cols; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```cpp\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows * cols; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```cpp\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if((src[i] & 0x0F) == 0x0F){\n            dst[i] = (src[i] << rotate_bits) | (src[i] >> (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```cpp\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if((src[i] & 0x0F) == 0x0F){\n            dst[i] = (src[i] << rotate_bits) | (src[i] >> (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```cpp\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if((src[i] & 0x0F) == 0x0F){\n            dst[i] = (src[i] << rotate_bits) | (src[i] >> (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```cpp\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if((src[i] & 0x0F) == 0x0F){\n            dst[i] = (src[i] << rotate_bits) | (src[i] >> (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```cpp\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length){\n    for(size_t i = 0; i < length; ++i){\n        if((src[i] & 0xF) == 0xF){\n            dst[i] = (src[i] << rotate_bits) | (src[i] >> (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```cpp\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > epsilon) {\n            out[i] = 1;\n        } else if (diff < -epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```cpp\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > fabs(epsilon)) {\n            out[i] = 1;\n        } else if (diff < -fabs(epsilon)) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```cpp\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > std::abs(epsilon)) {\n            out[i] = 1;\n        } else if (diff < -std::abs(epsilon)) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```cpp\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > epsilon) {\n            out[i] = 1;\n        } else if (diff < -epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```cpp\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > std::abs(epsilon)) {\n            out[i] = 1;\n        } else if (diff < -std::abs(epsilon)) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```cpp\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = static_cast<int32_t>(A[i]);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * pow(10, scale);\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * pow(10, scale);\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * pow(10, scale);\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * pow(10, scale);\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * pow(10, scale);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```cpp\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        C[i] = static_cast<int32_t>(round(A[i] / B[i]));\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```cpp\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        C[i] = (int32_t)round(A[i] / B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        C[i] = (int32_t)round(A[i] / B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        C[i] = (int32_t)round(A[i] / B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        C[i] = (int32_t)round(A[i] / B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```cpp\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = static_cast<float>(A[i]);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```cpp\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = static_cast<float>(A[i]);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```cpp\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = static_cast<float>(A[i]);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```cpp\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = static_cast<float>(A[i]);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```cpp\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > (double)FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < (double)(-FLT_MAX)) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; i++) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / (max_val - min_val);\n            B[i] = (val < 0) ? 0.0f : ((val > 1) ? 1.0f : val);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; ++i) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / (max_val - min_val);\n            B[i] = (val < 0.0f) ? 0.0f : (val > 1.0f) ? 1.0f : val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; i++) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / (max_val - min_val);\n            B[i] = (val < 0) ? 0.0f : (val > 1) ? 1.0f : val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; i++) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / (max_val - min_val);\n            B[i] = (val < 0) ? 0.0f : (val > 1) ? 1.0f : val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; i++) {\n        if (control[i] > 0) {\n            float val = (A[i] - min_val) / (max_val - min_val);\n            B[i] = (val < 0) ? 0.0f : (val > 1) ? 1.0f : val;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        uint32_t high_bits = A[i] >> 16;\n        float float_value = (float)high_bits;\n        float sqrt_value = sqrtf(float_value);\n        B[i] = sqrt_value;\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        uint32_t high_bits = A[i] >> 16;\n        float float_value = (float)high_bits;\n        float sqrt_value = sqrtf(float_value);\n        B[i] = sqrt_value;\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        uint32_t high_bits = A[i] >> 16;\n        float float_value = (float)high_bits;\n        float sqrt_value = sqrtf(float_value);\n        B[i] = sqrt_value;\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        uint32_t high_bits = A[i] >> 16;\n        float float_value = (float)high_bits;\n        float sqrt_value = sqrtf(float_value);\n        B[i] = sqrt_value;\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        uint32_t high_bits = A[i] >> 16;\n        float float_value = (float)high_bits;\n        float sqrt_value = sqrtf(float_value);\n        B[i] = sqrt_value;\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *((float*)&A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *((float*)&A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *((float*)&A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *((float*)&A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *((float*)&A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```cpp\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```cpp\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```cpp\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```cpp\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```cpp\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = static_cast<float>(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i] << 32) | 0xFFFFFFFF;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i] << 32) | 0xFFFFFFFF;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i] << 32) | 0xFFFFFFFF;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i] << 32) | 0xFFFFFFFF;\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i] << 32) | 0xFFFFFFFF;\n    }\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```cpp\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```cpp\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```cpp\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```cpp\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```cpp\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```cpp\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ++ki) {\n                for (size_t kj = 0; kj < kernel_size; ++kj) {\n                    size_t input_index = (i + ki) * input_size + j + kj;\n                    size_t kernel_index = ki * kernel_size + kj;\n                    sum += input[input_index] * kernel[kernel_index];\n                }\n            }\n            output[i * output_size + j] = sum > 0 ? sum : 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```cpp\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ++ki) {\n                for (size_t kj = 0; kj < kernel_size; ++kj) {\n                    size_t input_index = (i + ki) * input_size + j + kj;\n                    size_t kernel_index = ki * kernel_size + kj;\n                    sum += input[input_index] * kernel[kernel_index];\n                }\n            }\n            output[i * output_size + j] = (sum > 0.0) ? sum : 0.0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```cpp\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ++ki) {\n                for (size_t kj = 0; kj < kernel_size; ++kj) {\n                    size_t input_index = (i + ki) * input_size + j + kj;\n                    size_t kernel_index = ki * kernel_size + kj;\n                    sum += input[input_index] * kernel[kernel_index];\n                }\n            }\n            output[i * output_size + j] = sum > 0 ? sum : 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```cpp\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ++ki) {\n                for (size_t kj = 0; kj < kernel_size; ++kj) {\n                    size_t input_index = (i + ki) * input_size + (j + kj);\n                    size_t kernel_index = ki * kernel_size + kj;\n                    sum += input[input_index] * kernel[kernel_index];\n                }\n            }\n            output[i * output_size + j] = sum > 0.0 ? sum : 0.0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```cpp\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_index = (i + k) * input_size + (j + l);\n                    size_t kernel_index = k * kernel_size + l;\n                    sum += input[input_index] * kernel[kernel_index];\n                }\n            }\n            output[i * output_size + j] = sum > 0 ? sum : 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold){\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold){\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold){\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold){\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold){\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations){\n    int balance = 0;\n    for(int op : operations){\n        balance += op;\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations){\n    int balance = 0;\n    for(int op : operations){\n        balance += op;\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations){\n    int balance = 0;\n    for(int op : operations){\n        balance += op;\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations){\n    int balance = 0;\n    for(int op : operations){\n        balance += op;\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\nbool below_zero(std::vector<int> operations){\n    int balance = 0;\n    for(int op : operations){\n        balance += op;\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers){\n    double sum = 0.0;\n    double mean = 0.0;\n    \n    for (double num : numbers) {\n        sum += num;\n    }\n    \n    mean = sum / numbers.size();\n    \n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    \n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers){\n    double sum = 0.0;\n    double mean = 0.0;\n    \n    for (double num : numbers) {\n        mean += num;\n    }\n    mean /= numbers.size();\n    \n    for (double num : numbers) {\n        sum += std::abs(num - mean);\n    }\n    \n    return sum / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers){\n    double sum = 0;\n    double mean = 0;\n    \n    for (double num : numbers) {\n        sum += num;\n    }\n    \n    mean = sum / numbers.size();\n    \n    double mad = 0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    \n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers){\n    double sum = 0.0;\n    double mean = 0.0;\n    \n    for (double num : numbers) {\n        sum += num;\n    }\n    mean = sum / numbers.size();\n    \n    double deviation_sum = 0.0;\n    for (double num : numbers) {\n        deviation_sum += std::abs(num - mean);\n    }\n    \n    return deviation_sum / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers){\n    double sum = 0.0;\n    double mean = 0.0;\n    \n    for (double num : numbers) {\n        sum += num;\n    }\n    \n    mean = sum / numbers.size();\n    \n    double deviation_sum = 0.0;\n    for (double num : numbers) {\n        deviation_sum += std::abs(num - mean);\n    }\n    \n    return deviation_sum / numbers.size();\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter){ \n    std::vector<int> result;\n    if(numbers.empty()) {\n        return result;\n    }\n    \n    result.push_back(numbers[0]);\n    for(size_t i = 1; i < numbers.size(); ++i) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter){ \n    std::vector<int> result;\n    for(size_t i = 0; i < numbers.size(); ++i){\n        result.push_back(numbers[i]);\n        if(i < numbers.size() - 1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter){ \n    std::vector<int> result;\n    if(numbers.empty()) {\n        return result;\n    }\n    \n    result.push_back(numbers[0]);\n    for(size_t i = 1; i < numbers.size(); ++i) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter){ \n    std::vector<int> result;\n    if(numbers.empty()) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for(size_t i = 1; i < numbers.size(); ++i) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter){ \n    std::vector<int> result;\n    if(numbers.empty()) {\n        return result;\n    }\n    result.push_back(numbers[0]);\n    for(size_t i = 1; i < numbers.size(); ++i) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers){\n    int64_t sum = 0;\n    int64_t product = 1;\n    \n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers){\n    int64_t sum = 0;\n    int64_t product = 1;\n    \n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers){\n    int64_t sum = 0;\n    int64_t product = 1;\n    \n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers){\n    int64_t sum = 0;\n    int64_t product = 1;\n    \n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers){\n    int64_t sum = 0;\n    int64_t product = 1;\n    \n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers){\n    std::vector<int> result;\n    int current_max = INT_MIN;\n    for(int num : numbers){\n        current_max = std::max(current_max, num);\n        result.push_back(current_max);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers){\n    std::vector<int> result;\n    int max_val = INT_MIN;\n    for(int i = 0; i < numbers.size(); i++){\n        max_val = std::max(max_val, numbers[i]);\n        result.push_back(max_val);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers){\n    std::vector<int> result;\n    int max_so_far = INT_MIN;\n    for(int i = 0; i < numbers.size(); ++i){\n        max_so_far = std::max(max_so_far, numbers[i]);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers){\n    std::vector<int> result;\n    int maxSoFar = INT_MIN;\n    for(int num : numbers){\n        maxSoFar = std::max(maxSoFar, num);\n        result.push_back(maxSoFar);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\nstd::vector<int> rolling_max(std::vector<int> numbers){\n    std::vector<int> result;\n    int maxSoFar = INT_MIN;\n    for (int num : numbers) {\n        maxSoFar = std::max(maxSoFar, num);\n        result.push_back(maxSoFar);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b){\n    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != b[i]) {\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b){\n    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != b[i]) {\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b){\n    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != b[i]) {\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b){\n    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != b[i]) {\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\nstd::string string_xor(std::string a, std::string b){\n    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != b[i]) {\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```\nstd::string longest(const std::vector<std::string> & strings){\n    if(strings.empty()) {\n        return \"None\";\n    }\n    \n    std::string longestStr = strings[0];\n    for(const std::string & str : strings) {\n        if(str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    \n    return longestStr;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string longest(const std::vector<std::string> & strings){\n    if(strings.empty()) {\n        return \"None\";\n    }\n    \n    std::string longestStr = strings[0];\n    for(const std::string & str : strings) {\n        if(str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    \n    return longestStr;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```\nstd::string longest(const std::vector<std::string> & strings){\n    if(strings.empty()) {\n        return \"None\";\n    }\n    \n    std::string longestStr = strings[0];\n    for(const std::string & str : strings) {\n        if(str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)) {\n            longestStr = str;\n        }\n    }\n    \n    return longestStr;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```\nstd::string longest(const std::vector<std::string> & strings){\n    if(strings.empty()){\n        return \"None\";\n    }\n    \n    std::string longestStr = strings[0];\n    for(const std::string & str : strings){\n        if(str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)){\n            longestStr = str;\n        }\n    }\n    \n    return longestStr;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```\nstd::string longest(const std::vector<std::string> & strings){\n    if(strings.empty()){\n        return \"None\";\n    }\n    \n    std::string longestStr = strings[0];\n    for(const std::string & str : strings){\n        if(str.length() > longestStr.length() || (str.length() == longestStr.length() && str < longestStr)){\n            longestStr = str;\n        }\n    }\n    \n    return longestStr;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```cpp\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b){\n    while (a != b) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```cpp\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b){\n    while (a != b) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```cpp\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b){\n    while (a != b) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```cpp\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```cpp\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b){\n    while (a != b) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <utility>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float minDiff = numbers[1] - numbers[0];\n    std::pair<float, float> result = {numbers[0], numbers[1]};\n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < minDiff) {\n            minDiff = diff;\n            result = {numbers[i], numbers[i + 1]};\n        }\n    }\n    return result;\n}\n```  "}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nstd::vector<float> find_closest_elements(std::vector<float> numbers){\n    std::sort(numbers.begin(), numbers.end());\n    float minDiff = std::abs(numbers[1] - numbers[0]);\n    std::vector<float> result = {numbers[0], numbers[1]};\n    for(size_t i = 1; i < numbers.size() - 1; ++i){\n        float diff = std::abs(numbers[i+1] - numbers[i]);\n        if(diff < minDiff){\n            minDiff = diff;\n            result = {numbers[i], numbers[i+1]};\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nstd::vector<float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float minDiff = std::abs(numbers[1] - numbers[0]);\n    std::vector<float> result = {numbers[0], numbers[1]};\n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = std::abs(numbers[i + 1] - numbers[i]);\n        if (diff < minDiff) {\n            minDiff = diff;\n            result = {numbers[i], numbers[i + 1]};\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <utility>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float minDiff = numbers[1] - numbers[0];\n    std::pair<float, float> result = {numbers[0], numbers[1]};\n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        if (numbers[i + 1] - numbers[i] < minDiff) {\n            minDiff = numbers[i + 1] - numbers[i];\n            result = {numbers[i], numbers[i + 1]};\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float minDiff = numbers[1] - numbers[0];\n    std::pair<float, float> result = {numbers[0], numbers[1]};\n    \n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < minDiff) {\n            minDiff = diff;\n            result = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers){\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n    \n    std::vector<float> rescaled;\n    for (float num : numbers) {\n        float scaled = (num - min_val) / range;\n        rescaled.push_back(scaled);\n    }\n    \n    return rescaled;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```\nstd::vector<float> rescale_to_unit(std::vector<float> numbers){\n    float min_num = *min_element(numbers.begin(), numbers.end());\n    float max_num = *max_element(numbers.begin(), numbers.end());\n    \n    for (float &num : numbers) {\n        num = (num - min_num) / (max_num - min_num);\n    }\n    \n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers){\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n    \n    for (float &num : numbers) {\n        num = (num - min_val) / (max_val - min_val);\n    }\n    \n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers){\n    float min_num = *std::min_element(numbers.begin(), numbers.end());\n    float max_num = *std::max_element(numbers.begin(), numbers.end());\n    \n    for (float& num : numbers) {\n        num = (num - min_num) / (max_num - min_num);\n    }\n    \n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\nstd::vector<float> rescale_to_unit(std::vector<float> numbers){\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    for (float& num : numbers) {\n        num = (num - min_val) / (max_val - min_val);\n    }\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n){\n    for(uint64_t i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n){\n    for(uint64_t i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n){\n    for(uint64_t i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n){\n    for(uint64_t i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```cpp\nuint64_t largest_divisor(uint64_t n){\n    for(uint64_t i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n){\n    std::vector<int> factors;\n    for (int i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n){\n    std::vector<int> factors;\n    for (int i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n){\n    std::vector<int> factors;\n    for (int i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n){\n    std::vector<int> factors;\n    for (int i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\nstd::vector<int> factorize(int n){\n    std::vector<int> factors;\n    for (int i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l){\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l){\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l){\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l){\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\nstd::vector<float> get_positive(const std::vector<float> & l){\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int64_t i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int64_t i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\nbool is_prime(int64_t n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int64_t i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s){\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(char &c : result){\n        if(std::isalpha(c)){\n            hasLetter = true;\n            if(std::islower(c)){\n                c = std::toupper(c);\n            } else {\n                c = std::tolower(c);\n            }\n        }\n    }\n    \n    if(!hasLetter){\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nstd::string solve(const std::string & s){\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(char &c : result){\n        if(std::isalpha(c)){\n            hasLetter = true;\n            c = std::islower(c) ? std::toupper(c) : std::tolower(c);\n        }\n    }\n    \n    if(!hasLetter){\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s){\n    std::string result = s;\n    if(std::all_of(result.begin(), result.end(), [](char c){ return !isalpha(c); })){\n        std::reverse(result.begin(), result.end());\n    } else {\n        for(char &c : result){\n            if(isalpha(c)){\n                c = islower(c) ? toupper(c) : tolower(c);\n            }\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s){\n    std::string result = s;\n    bool hasLetter = false;\n    for(char &c : result){\n        if(std::isalpha(c)){\n            hasLetter = true;\n            c = std::islower(c) ? std::toupper(c) : std::tolower(c);\n        }\n    }\n    if(!hasLetter){\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s){\n    std::string result = s;\n    bool hasLetter = false;\n    \n    for(char &c : result){\n        if(std::isalpha(c)){\n            hasLetter = true;\n            c = std::islower(c) ? std::toupper(c) : std::tolower(c);\n        }\n    }\n    \n    if(!hasLetter){\n        std::reverse(result.begin(), result.end());\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l){\n    std::vector<int> l_prime = l;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            l_prime[i] = l[i];\n        }\n    }\n    std::sort(l_prime.begin(), l_prime.end());\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l){\n    std::vector<int> result = l;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            std::sort(result.begin() + i - 2, result.begin() + i + 1);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l){\n    std::vector<int> result = l;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            std::sort(result.begin() + i - 2, result.begin() + i + 1);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l){\n    std::vector<int> l_prime = l;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            std::vector<int> temp = {l[i - 2], l[i - 1], l[i]};\n            std::sort(temp.begin(), temp.end());\n            l_prime[i - 2] = temp[0];\n            l_prime[i - 1] = temp[1];\n            l_prime[i] = temp[2];\n        }\n    }\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l){\n    std::vector<int> l_prime = l;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            std::vector<int> temp = {l[i], l_prime[i]};\n            std::sort(temp.begin(), temp.end());\n            l_prime[i] = temp[1];\n        }\n    }\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l){\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l){\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l){\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l){\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\nfloat max_element(std::vector<float> l){\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```cpp\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i % 10 == 7){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```cpp\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find('7') != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i % 10 == 7){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```cpp\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i % 10 == 7){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && i != 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l){\n    std::vector<float> result = l;\n    std::vector<float> even_values;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 2 == 0){\n            even_values.push_back(l[i]);\n        }\n    }\n    std::sort(even_values.begin(), even_values.end());\n    int even_index = 0;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 2 == 0){\n            result[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l){\n    std::vector<float> result = l;\n    std::vector<float> even_values;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n    std::sort(even_values.begin(), even_values.end());\n    int even_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l){\n    std::vector<float> result = l;\n    std::vector<float> even_values;\n\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n\n    std::sort(even_values.begin(), even_values.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l){\n    std::vector<float> result = l;\n    std::vector<float> even_values;\n\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n\n    std::sort(even_values.begin(), even_values.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\nstd::vector<float> sort_even(std::vector<float> l){\n    std::vector<float> result = l;\n    std::vector<float> even_values;\n\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_values.push_back(l[i]);\n        }\n    }\n\n    std::sort(even_values.begin(), even_values.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l){\n    int n = l.size();\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l){\n    int n = l.size();\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l){\n    int n = l.size();\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l){\n    int n = l.size();\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\nbool triples_sum_to_zero(std::vector<int> l){\n    int n = l.size();\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l){\n    std::vector<int> result;\n    for (int num : l) {\n        result.push_back(num + 1);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l){\n    std::vector<int> result;\n    for (int num : l) {\n        result.push_back(num + 1);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l){\n    std::vector<int> result;\n    for(int num : l){\n        result.push_back(num + 1);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l){\n    std::vector<int> result;\n    for (int i = 0; i < l.size(); ++i) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\nstd::vector<int> incr_list(std::vector<int> l){\n    for (int i = 0; i < l.size(); ++i) {\n        l[i]++;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l){\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num) > 0) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l){\n    std::unordered_set<int> s;\n    for(int num : l){\n        if(s.count(-num) > 0){\n            return true;\n        }\n        s.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l){\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num) > 0) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l){\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num) > 0) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\nbool pairs_sum_to_zero(std::vector<int> l){\n    std::unordered_set<int> seen;\n    for(int num : l){\n        if(seen.count(-num) > 0){\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base){\n    if (x == 0) {\n        return \"0\";\n    }\n    std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base){\n    if (x == 0) {\n        return \"0\";\n    }\n    std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base){\n    if (x == 0) {\n        return \"0\";\n    }\n    std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base){\n    if (x == 0) {\n        return \"0\";\n    }\n    std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\nstd::string change_base(int64_t x, int8_t base){\n    if (x == 0) {\n        return \"0\";\n    }\n    std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\nbool is_palindrome(std::string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\nstd::string decode_shift(std::string s){\n    std::string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int> l, int t){\n    for(int num : l){\n        if(num >= t){\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int> l, int t){\n    for(int num : l){\n        if(num >= t){\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int> l, int t){\n    for(int num : l){\n        if(num >= t){\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int> l, int t){\n    for(int num : l){\n        if(num >= t){\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\nbool below_threshold(std::vector<int> l, int t){\n    for(int num : l){\n        if(num >= t){\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets){\n    int count = 0;\n    for(char c : brackets){\n        if(c == '<'){\n            count++;\n        } else if(c == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets){\n    int count = 0;\n    for(char c : brackets){\n        if(c == '<'){\n            count++;\n        } else if(c == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets){\n    int count = 0;\n    for(char c : brackets){\n        if(c == '<'){\n            count++;\n        } else if(c == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets){\n    int count = 0;\n    for(char c : brackets){\n        if(c == '<'){\n            count++;\n        } else if(c == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\nbool correct_bracketing(std::string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```\nstd::vector<float> derivative(std::vector<float> xs){\n    std::vector<float> result;\n    for (int i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```\nstd::vector<float> derivative(std::vector<float> xs){\n    std::vector<float> result;\n    for (int i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```\nstd::vector<float> derivative(std::vector<float> xs){\n    std::vector<float> result;\n    for (int i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```\nstd::vector<float> derivative(std::vector<float> xs){\n    std::vector<float> result;\n    for (int i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```\nstd::vector<float> derivative(std::vector<float> xs){\n    std::vector<float> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s){\n    int count = 0;\n    for(char c : s){\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || (tolower(c) == 'u' && &c == &s.back())){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s){\n    int count = 0;\n    for(char c : s){\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u'){\n            count++;\n        }\n    }\n    if(!s.empty() && tolower(s.back()) == 'y'){\n        count++;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s){\n    int count = 0;\n    for(char c : s){\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || (tolower(c) == 'u' && (&c - &s[0] == s.length()-1))){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s){\n    int count = 0;\n    char lastChar = s.back();\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && c == lastChar)){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\nint vowels_count(std::string s){\n    int count = 0;\n    for(char c : s){\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || (tolower(c) == 'u' && (&c - &s[0] == s.length()-1))){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\nint digitSum(std::string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr){\n    std::vector<int> result;\n    int smallestValue = -1;\n    int smallestIndex = -1;\n    \n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && (smallestValue == -1 || arr[i] < smallestValue || (arr[i] == smallestValue && i < smallestIndex))) {\n            smallestValue = arr[i];\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestValue != -1) {\n        result.push_back(smallestValue);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr){\n    std::vector<int> result;\n    int smallestValue = -1, smallestIndex = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (smallestValue == -1 || arr[i] < smallestValue || (arr[i] == smallestValue && i < smallestIndex))) {\n            smallestValue = arr[i];\n            smallestIndex = i;\n        }\n    }\n    if (smallestValue != -1) {\n        result.push_back(smallestValue);\n        result.push_back(smallestIndex);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr){\n    std::vector<int> result;\n    int smallestValue = -1;\n    int smallestIndex = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (smallestValue == -1 || arr[i] < smallestValue || (arr[i] == smallestValue && i < smallestIndex))) {\n            smallestValue = arr[i];\n            smallestIndex = i;\n        }\n    }\n    if (smallestValue != -1) {\n        result.push_back(smallestValue);\n        result.push_back(smallestIndex);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr){\n    std::vector<int> result;\n    int smallestValue = -1;\n    int smallestIndex = -1;\n    \n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && (smallestValue == -1 || arr[i] < smallestValue || (arr[i] == smallestValue && i < smallestIndex))) {\n            smallestValue = arr[i];\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestValue != -1) {\n        result.push_back(smallestValue);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\nstd::vector<int> pluck(std::vector<int> arr){\n    std::vector<int> result;\n    int smallestEven = -1;\n    int smallestIndex = -1;\n    \n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && (smallestEven == -1 || arr[i] < smallestEven || (arr[i] == smallestEven && i < smallestIndex))) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n    \n    if (smallestEven != -1) {\n        result.push_back(smallestEven);\n        result.push_back(smallestIndex);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst){\n    std::unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    int result = -1;\n    for (auto it = freq.begin(); it != freq.end(); ++it) {\n        if (it->first > 0 && it->second >= it->first) {\n            result = std::max(result, it->first);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint search(std::vector<int> lst){\n    std::unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for (auto it = freq.begin(); it != freq.end(); ++it) {\n        if (it->first > it->second && it->first > result) {\n            result = it->first;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst){\n    std::unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    int result = -1;\n    for (auto it = freq.begin(); it != freq.end(); ++it) {\n        if (it->first > it->second && it->second >= it->first) {\n            result = std::max(result, it->first);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst){\n    std::unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    int result = -1;\n    for (auto it = freq.begin(); it != freq.end(); ++it) {\n        if (it->first > it->second && it->second >= it->first) {\n            result = std::max(result, it->first);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\nint search(std::vector<int> lst){\n    std::unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    int result = -1;\n    for (auto it = freq.begin(); it != freq.end(); ++it) {\n        if (it->first > it->second && it->second >= it->first) {\n            result = std::max(result, it->first);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nbool will_it_fly(std::vector<int> q, int w) {\n    if (q.size() == 1) {\n        return true;\n    }\n    std::vector<int> q_copy = q;\n    std::sort(q_copy.begin(), q_copy.end());\n    if (q != q_copy) {\n        return false;\n    }\n    int sum = std::accumulate(q.begin(), q.end(), 0);\n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w){\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    \n    if(std::equal(q.begin(), q.begin() + q.size() / 2, q.rbegin())){\n        if(sum <= w){\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w){\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    \n    if(std::equal(q.begin(), q.begin() + q.size()/2, q.rbegin())){\n        if(sum <= w){\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w){\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    \n    if(std::equal(q.begin(), q.begin() + q.size()/2, q.rbegin())){\n        if(sum <= w){\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\nbool will_it_fly(std::vector<int> q, int w){\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    \n    if(std::equal(q.begin(), q.begin() + q.size()/2, q.rbegin())){\n        if(sum <= w){\n            return true;\n        }\n    }\n    \n    return false;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-1-i]){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n / 2; i++){\n        if(arr[i] != arr[n - i - 1]){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-1-i]){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n / 2; i++){\n        if(arr[i] != arr[n - 1 - i]){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\nint smallest_change(std::vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n / 2; ++i){\n        if(arr[i] != arr[n - 1 - i]){\n            ++count;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    int totalChars1 = 0, totalChars2 = 0;\n    for(const std::string &str : lst1){\n        totalChars1 += str.size();\n    }\n    for(const std::string &str : lst2){\n        totalChars2 += str.size();\n    }\n    if(totalChars1 < totalChars2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    int total_chars_lst1 = 0, total_chars_lst2 = 0;\n    for(const std::string &str : lst1){\n        total_chars_lst1 += str.size();\n    }\n    for(const std::string &str : lst2){\n        total_chars_lst2 += str.size();\n    }\n    if(total_chars_lst1 < total_chars_lst2){\n        return lst1;\n    }\n    return lst2;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    int total_chars_lst1 = 0, total_chars_lst2 = 0;\n    for(const std::string &str : lst1){\n        total_chars_lst1 += str.size();\n    }\n    for(const std::string &str : lst2){\n        total_chars_lst2 += str.size();\n    }\n    if(total_chars_lst1 < total_chars_lst2){\n        return lst1;\n    }\n    return lst2;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    int total_chars_lst1 = 0, total_chars_lst2 = 0;\n    for(const std::string& str : lst1){\n        total_chars_lst1 += str.size();\n    }\n    for(const std::string& str : lst2){\n        total_chars_lst2 += str.size();\n    }\n    if(total_chars_lst1 < total_chars_lst2){\n        return lst1;\n    }\n    return lst2;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2){\n    int totalChars1 = 0, totalChars2 = 0;\n    for(const std::string &str : lst1){\n        totalChars1 += str.size();\n    }\n    for(const std::string &str : lst2){\n        totalChars2 += str.size();\n    }\n    if(totalChars1 < totalChars2){\n        return lst1;\n    }\n    return lst2;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n){\n    if (x == 1) {\n        return true;\n    }\n    uint64_t power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n){\n    if (x == 1) {\n        return true;\n    }\n    uint64_t power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n){\n    if (x == 1) return true;\n    if (n == 1) return false;\n    uint64_t power = n;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n){\n    if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    uint64_t power = n;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\nbool is_simple_power(uint64_t x, uint64_t n){\n    if (x == 1) {\n        return true;\n    }\n    uint64_t power = n;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> primes = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    for (char c : num) {\n        if (primes.find(c) != primes.end()) {\n            count += isPrime(std::stoi(std::string(1, c), nullptr, 16));\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> primes = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    for (char c : num) {\n        if (primes.find(c) != primes.end()) {\n            count += isPrime(std::stoi(std::string(1, c), nullptr, 16));\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> primes = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    for (char c : num) {\n        if (primes.find(c) != primes.end()) {\n            count += isPrime(std::stoi(std::string(1, c), nullptr, 16));\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> primes = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    for (char c : num) {\n        if (primes.find(c) != primes.end()) {\n            count += isPrime(std::stoi(std::string(1, c), nullptr, 16));\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> primes = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    for (char c : num) {\n        if (primes.find(c) != primes.end()) {\n            count += isPrime(std::stoi(std::string(1, c), nullptr, 16));\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s){\n    if(s.length() < 3) {\n        return false;\n    }\n    for(int i = 0; i < s.length() - 2; ++i) {\n        if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s){\n    if(s.length() < 3) {\n        return false;\n    }\n    for(int i = 0; i < s.length() - 2; ++i) {\n        if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s){\n    if(s.length() < 3) {\n        return false;\n    }\n    for(int i = 0; i < s.length() - 2; ++i) {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s){\n    if(s.length() < 3) return false;\n    for(int i = 0; i < s.length() - 2; ++i){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\nbool is_happy(const std::string & s){\n    if(s.length() < 3) {\n        return false;\n    }\n    for(int i = 0; i <= s.length() - 3; ++i) {\n        if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\n#include <string>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool prime_length(const std::string & str){\n    return is_prime(str.length());\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str){\n    int length = str.length();\n    if(length <= 1) return false;\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str){\n    int length = str.length();\n    if(length <= 1) return false;\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\nbool prime_length(const std::string & str){\n    int length = str.length();\n    if(length <= 1) return false;\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool prime_length(const std::string & str){\n    return is_prime(str.length());\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N /= 2;\n    }\n    return std::bitset<64>(sum).to_string().substr(64 - sum);\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N /= 2;\n    }\n    return std::bitset<64>(sum).to_string();\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N /= 2;\n    }\n    return std::bitset<64>(sum).to_string().substr(64 - sum);\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N /= 2;\n    }\n    return std::bitset<64>(sum).to_string().substr(64 - sum);\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\nstd::string solve(uint64_t N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N /= 2;\n    }\n    return std::bitset<64>(sum).to_string();\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\nint add(std::vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```\nint add(std::vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s){\n    std::string result = \"\";\n    for(char c : s){\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            result += (c - base + 2 * 2) % 26 + base;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s){\n    std::string result = \"\";\n    for(char c : s){\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            result += (c - base + 2 * 2) % 26 + base;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s){\n    std::string result = \"\";\n    for(char c : s){\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            result += (c - base + 2 * 2) % 26 + base;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s){\n    std::string result = \"\";\n    for(char c : s){\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            result += (c - base + 2 * 2) % 26 + base;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\nstd::string encrypt(const std::string & s){\n    std::string result = \"\";\n    for(char c : s){\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            result += (c - base + 2 * 2) % 26 + base;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n\nstd::string encode(const std::string & message){\n    std::string encodedMessage = \"\";\n    for(char c : message){\n        if(isalpha(c)){\n            if(islower(c)){\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                c += 2;\n            }\n        }\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n\nstd::string encode(const std::string & message){\n    std::string encodedMessage = \"\";\n    for(char c : message){\n        if(isalpha(c)){\n            if(islower(c)){\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                c += 2;\n            }\n        }\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n\nstd::string encode(const std::string & message){\n    std::string encodedMessage = \"\";\n    for(char c : message){\n        if(isalpha(c)){\n            if(islower(c)){\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                c += 2;\n            }\n        }\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n\nstd::string encode(const std::string & message){\n    std::string encodedMessage = message;\n    for(char &c : encodedMessage){\n        if(std::isalpha(c)){\n            c = std::islower(c) ? std::toupper(c) : std::tolower(c);\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                c = c + 2;\n            }\n        }\n    }\n    return encodedMessage;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n\nstd::string encode(const std::string & message){\n    std::string encodedMessage = \"\";\n    for(char c : message){\n        if(isalpha(c)){\n            if(islower(c)){\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                c += 2;\n            }\n        }\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    bool all_lower = true;\n    bool all_upper = true;\n    \n    for(const auto& pair : dict){\n        for(char c : pair.first){\n            if(islower(c)){\n                all_upper = false;\n            } else if(isupper(c)){\n                all_lower = false;\n            }\n        }\n    }\n    \n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    bool all_lower = true;\n    bool all_upper = true;\n    \n    for(const auto& pair : dict){\n        for(char c : pair.first){\n            if(islower(c)){\n                all_upper = false;\n            } else if(isupper(c)){\n                all_lower = false;\n            }\n        }\n    }\n    \n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    bool all_lower = true;\n    bool all_upper = true;\n    \n    for(const auto& entry : dict){\n        for(char c : entry.first){\n            if(islower(c)){\n                all_upper = false;\n            } else if(isupper(c)){\n                all_lower = false;\n            }\n        }\n    }\n    \n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    bool all_lower = true;\n    bool all_upper = true;\n    \n    for(auto const& pair : dict){\n        std::string key = pair.first;\n        bool is_lower = std::all_of(key.begin(), key.end(), ::islower);\n        bool is_upper = std::all_of(key.begin(), key.end(), ::isupper);\n        \n        if(!is_lower) all_lower = false;\n        if(!is_upper) all_upper = false;\n        \n        if(!all_lower && !all_upper) return false;\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\nbool check_dict_case(std::map<std::string, std::string> dict){\n    if(dict.empty()) return false;\n    \n    bool all_lower = true;\n    bool all_upper = true;\n    \n    for(auto const& pair : dict){\n        for(auto const& c : pair.first){\n            if(islower(c)){\n                all_upper = false;\n            } else if(isupper(c)){\n                all_lower = false;\n            }\n        }\n    }\n    \n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n){\n    std::vector<int> primes;\n    for (int i = 2; i < n; ++i) {\n        bool is_prime = true;\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n){\n    std::vector<int> primes;\n    for (int i = 2; i < n; ++i) {\n        bool is_prime = true;\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n){\n    std::vector<int> primes;\n    if(n < 2) return primes;\n    \n    std::vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n    \n    for(int i = 2; i * i < n; ++i){\n        if(isPrime[i]){\n            for(int j = i * i; j < n; j += i){\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    for(int i = 2; i < n; ++i){\n        if(isPrime[i]){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n){\n    std::vector<int> primes;\n    for (int i = 2; i < n; ++i) {\n        bool is_prime = true;\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\nstd::vector<int> count_up_to(int n){\n    std::vector<int> primes;\n    if (n < 2) {\n        return primes;\n    }\n    \n    std::vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false;\n    \n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n            for (int j = i * 2; j < n; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n    \n    return primes;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```\nint count_upper(const std::string & s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\nint count_upper(const std::string & s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    int stones = n;\n    for(int i = 0; i < n; ++i){\n        result.push_back(stones);\n        stones += (n % 2 == 0) ? 2 : 1;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    for(int i = 0; i < n; ++i){\n        result.push_back(n + 2*i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    for(int i = 0; i < n; ++i){\n        result.push_back(n + 2*i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    for(int i = 0; i < n; ++i){\n        result.push_back(n + 2*i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\nstd::vector<int> make_a_pile(int n){\n    std::vector<int> result;\n    for(int i = 0; i < n; ++i){\n        result.push_back(n + 2*i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m){\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    int avg = std::round((double)sum / (m - n + 1));\n    \n    return std::bitset<64>(avg).to_string().substr(64 - (m - n + 1));\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m){\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    int64_t sum = 0;\n    for (int64_t i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    int64_t avg = std::round(static_cast<double>(sum) / (m - n + 1));\n    \n    return std::bitset<64>(avg).to_string().substr(64 - (m - n + 1));\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m){\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    int avg = round((double)sum / (m - n + 1));\n    \n    return std::bitset<sizeof(int) * 8>(avg).to_string();\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m){\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    int64_t sum = 0;\n    for (int64_t i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    int64_t avg = std::round(static_cast<double>(sum) / (m - n + 1));\n    \n    return std::bitset<64>(avg).to_string().substr(64 - (m - n + 1));\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m){\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    int avg = round((double)sum / (m - n + 1));\n    \n    return std::bitset<sizeof(avg) * 8>(avg).to_string();\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n){\n    std::vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for(int i = 1; i <= n; ++i){\n        if(i % 2 == 0){\n            factorial *= i;\n            factorial %= 10000;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n){\n    std::vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for(int i = 1; i <= n; ++i){\n        if(i % 2 == 0){\n            factorial *= i;\n            factorial %= 10000;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> func(int n){\n    std::vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            factorial *= i;\n            factorial %= 10000;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n){\n    std::vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for(int i = 1; i <= n; ++i){\n        if(i % 2 == 0){\n            factorial *= i;\n            factorial %= 10000;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\nstd::vector<int> func(int n){\n    std::vector<int> result;\n    int factorial = 1;\n    int sum = 0;\n    for(int i = 1; i <= n; ++i){\n        if(i % 2 == 0){\n            factorial *= i;\n            factorial %= 10000;\n            result.push_back(factorial);\n        } else {\n            sum += i;\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n){\n    int even = 0, odd = 0;\n    for(int i = 1; i <= n; ++i){\n        std::string num = std::to_string(i);\n        std::string rev_num = num;\n        std::reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return {even, odd};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n){\n    int even = 0, odd = 0;\n    for(int i = 1; i <= n; ++i){\n        std::string num = std::to_string(i);\n        std::string rev_num = num;\n        std::reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return {even, odd};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n){\n    int even = 0, odd = 0;\n    for(int i = 1; i <= n; ++i){\n        std::string num = std::to_string(i);\n        std::string rev_num = num;\n        std::reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return {even, odd};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n){\n    int even = 0, odd = 0;\n    for(int i = 1; i <= n; ++i){\n        std::string num = std::to_string(i);\n        std::string rev_num = num;\n        std::reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return {even, odd};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\nstd::vector<int> even_odd_palindrome(int n){\n    int even = n / 2;\n    int odd = n - even;\n    return {even, odd};\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nint count_nums(std::vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = num;\n        if (temp < 0) temp = -temp;\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) count++;\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = num;\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nint count_nums(std::vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\nint count_nums(std::vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = num;\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr){\n    if(arr.empty()) {\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for(int i = 0; i < n; ++i) {\n        if(arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    for(int i = 0; i < n; ++i) {\n        if(arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr){\n    if(arr.empty()) {\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for(int i=0; i<n; i++){\n        if(arr[i] < arr[minIndex]){\n            minIndex = i;\n        }\n    }\n    \n    for(int i=0; i<n; i++){\n        if(arr[(minIndex+i)%n] != i+1){\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr){\n    if(arr.empty()) {\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    for(int i = 0; i < n; i++) {\n        if(arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr){\n    if(arr.empty()) {\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    for(int i = 0; i < n; i++) {\n        if(arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\nbool move_one_ball(std::vector<int> arr){\n    if(arr.empty()) {\n        return true;\n    }\n    \n    int n = arr.size();\n    int minIndex = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n    \n    for(int i = 0; i < n; i++) {\n        if(arr[(minIndex + i) % n] != i + 1) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2){\n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for(const std::string& str : lst){\n        int count = 0;\n        for(char c : str){\n            if((c - '0') % 2 != 0){\n                count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + str + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for (const std::string& str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if (c >= '0' && c <= '9' && (c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + str + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for (const std::string& str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if (c >= '0' && c <= '9' && (c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + str + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for (const std::string& str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if (c >= '0' && c <= '9' && (c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + str + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst){\n    std::vector<std::string> result;\n    for (const std::string& str : lst) {\n        int oddCount = 0;\n        for (char c : str) {\n            if (c >= '0' && c <= '9' && (c - '0') % 2 != 0) {\n                oddCount++;\n            }\n        }\n        std::string res = \"the number of odd elements \" + std::to_string(oddCount) + \"n the str\" + std::to_string(oddCount) + \"ng \" + str + \" of the \" + std::to_string(oddCount) + \"nput.\";\n        result.push_back(res);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums){\n    int64_t min_sum = nums[0];\n    int64_t current_sum = 0;\n    \n    for (int64_t num : nums) {\n        current_sum = std::min(num, current_sum + num);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    \n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums){\n    int64_t minSum = nums[0];\n    int64_t currentSum = 0;\n    \n    for (int64_t num : nums) {\n        currentSum = std::min(num, currentSum + num);\n        minSum = std::min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums){\n    int64_t minSum = nums[0];\n    int64_t currentSum = 0;\n    \n    for (int i = 0; i < nums.size(); ++i) {\n        currentSum = std::min(nums[i], currentSum + nums[i]);\n        minSum = std::min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums){\n    int64_t minSum = nums[0];\n    int64_t currentSum = 0;\n    \n    for (int64_t num : nums) {\n        currentSum = std::min(num, currentSum + num);\n        minSum = std::min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\nint64_t minSubArraySum(const std::vector<int64_t>& nums){\n    int64_t minSum = nums[0];\n    int64_t currentSum = 0;\n    \n    for (int64_t num : nums) {\n        currentSum = std::min(num, currentSum + num);\n        minSum = std::min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid, int capacity){\n    int count = 0;\n    for(const auto& row : grid){\n        int current = 0;\n        for(int well : row){\n            current += well;\n            if(current >= capacity){\n                count++;\n                current = 0;\n            }\n        }\n        if(current > 0){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid,int capacity){\n    int count = 0;\n    for (const auto &row : grid) {\n        int current = 0;\n        for (int well : row) {\n            current += well;\n            if (current > capacity) {\n                count++;\n                current = well;\n            }\n        }\n        if (current > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid,int capacity){\n    int count = 0;\n    for (const auto &row : grid) {\n        int current = 0;\n        for (int well : row) {\n            current += well;\n            if (current > capacity) {\n                count++;\n                current = well;\n            }\n        }\n        if (current > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid,int capacity){\n    int count = 0;\n    for (const auto &row : grid) {\n        int current = 0;\n        for (int well : row) {\n            current += well;\n            if (current > capacity) {\n                count++;\n                current = well;\n            }\n        }\n        if (current > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\nint max_fill(const std::vector<std::vector<int> > & grid, int capacity){\n    int count = 0;\n    for(const auto &row : grid){\n        int current = 0;\n        for(int well : row){\n            current += well;\n            if(current >= capacity){\n                count++;\n                current = 0;\n            }\n        }\n        if(current > 0){\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```\nint64_t solution(const std::vector<int16_t>& lst){\n    int64_t sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```\nint64_t solution(const std::vector<int16_t>& lst){\n    int64_t sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```\nint64_t solution(const std::vector<int16_t>& lst){\n    int64_t sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```\nint64_t solution(const std::vector<int16_t>& lst){\n    int64_t sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```\nint64_t solution(const std::vector<int16_t>& lst){\n    int64_t sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k){\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k){\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k){\n    int sum = 0;\n    for(int i = 0; i < k; ++i){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k){\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\nint add_elements(std::vector<int> arr, int k){\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= 10 && arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst){\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <= lst[i - 1]) {\n            return false;\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < lst.size(); j++) {\n            if (lst[j] == lst[i]) {\n                count++;\n                if (count > 1) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst){\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <= lst[i - 1]) {\n            return false;\n        }\n    }\n    return std::set<int>(lst.begin(), lst.end()).size() == lst.size();\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst){\n    for (size_t i = 0; i < lst.size() - 1; ++i) {\n        if (lst[i] >= lst[i + 1]) {\n            return false;\n        }\n        if (i > 0 && lst[i] == lst[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst){\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] <= lst[i - 1]) {\n            return false;\n        }\n    }\n    return std::set<int>(lst.begin(), lst.end()).size() == lst.size();\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\nbool is_sorted(const std::vector<int> & lst){\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] <= lst[i - 1]) {\n            return false;\n        }\n    }\n    std::unordered_set<int> uniqueNumbers(lst.begin(), lst.end());\n    return uniqueNumbers.size() == lst.size();\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0) product *= 1;\n        else if(num < 0) product *= -1;\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0) product *= 1;\n        else if(num < 0) product *= -1;\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0) product *= 1;\n        else if(num < 0) product *= -1;\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0) product *= 1;\n        else if(num < 0) product *= -1;\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\nint prod_signs(const std::vector<int> & arr){\n    if(arr.empty()) return -32768;\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0) product *= 1;\n        else if(num < 0) product *= -1;\n        \n        sum += std::abs(num);\n    }\n    \n    return product * sum;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int> > & grid, int k){\n    int n = grid.size();\n    std::vector<int> result;\n    std::vector<std::vector<std::vector<int>>> dp(k + 1, std::vector<std::vector<int>>(n, std::vector<int>(n, INT_MAX)));\n    std::vector<std::vector<std::vector<std::pair<int, int>>> > prev(k + 1, std::vector<std::vector<std::pair<int, int>>>(n, std::vector<std::pair<int, int>>(n, {-1, -1})));\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            dp[1][i][j] = grid[i][j];\n        }\n    }\n\n    for (int step = 2; step <= k; ++step) {\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                for (int x = 0; x < n; ++x) {\n                    for (int y = 0; y < n; ++y) {\n                        if ((i != x || j != y) && (i == x || j == y || abs(i - x) == abs(j - y))) {\n                            if (dp[step][i][j] > dp[step - 1][x][y] + grid[i][j]) {\n                                dp[step][i][j] = dp[step - 1][x][y] + grid[i][j];\n                                prev[step][i][j] = {x, y};\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    int minVal = INT_MAX;\n    int startX, startY;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (dp[k][i][j] < minVal) {\n                minVal = dp[k][i][j];\n                startX = i;\n                startY = j;\n            }\n        }\n    }\n\n    result.push_back(grid[startX][startY]);\n    for (int step = k; step > 1; --step) {\n        auto [prevX, prevY] = prev[step][startX][startY];\n        result.push_back(grid[prevX][prevY]);\n        startX = prevX;\n        startY = prevY;\n    }\n\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int>>& grid, int k) {\n    int n = grid.size();\n    std::vector<int> path;\n    std::vector<std::vector<int>> dp(k + 1, std::vector<int>(n * n + 1, 0));\n    for (int i = 1; i <= n * n; ++i) dp[1][i] = i;\n\n    for (int len = 2; len <= k; ++len) {\n        for (int i = 1; i <= n * n; ++i) {\n            dp[len][i] = dp[len - 1][i];\n            for (int j : {i - 1, i + 1, i - n, i + n}) {\n                if (j >= 1 && j <= n * n) {\n                    if (dp[len][i] > dp[len - 1][j]) {\n                        dp[len][i] = dp[len - 1][j];\n                    }\n                }\n            }\n        }\n    }\n\n    int curr = 1;\n    for (int i = 2; i <= n * n; ++i) {\n        if (dp[k][i] < dp[k][curr]) {\n            curr = i;\n        }\n    }\n\n    for (int len = k; len >= 1; --len) {\n        path.push_back(curr);\n        for (int j : {curr - 1, curr + 1, curr - n, curr + n}) {\n            if (j >= 1 && j <= n * n && dp[len - 1][j] == dp[len][curr]) {\n                curr = j;\n                break;\n            }\n        }\n    }\n\n    std::reverse(path.begin(), path.end());\n    return path;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int>>& grid, int k) {\n    int n = grid.size();\n    std::vector<int> path;\n    std::vector<std::vector<int>> dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    std::vector<std::vector<bool>> visited(n, std::vector<bool>(n, false));\n\n    auto isValid = [&](int x, int y) {\n        return x >= 0 && x < n && y >= 0 && y < n;\n    };\n\n    std::function<void(int, int, int)> dfs = [&](int x, int y, int steps) {\n        visited[x][y] = true;\n        path.push_back(grid[x][y]);\n        if (steps == k) return;\n\n        for (const auto& dir : dirs) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (isValid(nx, ny) && !visited[nx][ny]) {\n                dfs(nx, ny, steps + 1);\n                path.push_back(grid[x][y]); // backtrack\n            }\n        }\n\n        visited[x][y] = false; // backtrack\n        path.pop_back(); // backtrack\n    };\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            dfs(i, j, 1);\n        }\n    }\n\n    return path;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int>>& grid, int k) {\n    int n = grid.size();\n    std::vector<std::vector<int>> dp(k + 1, std::vector<int>(n * n + 1, INT_MAX));\n    std::vector<std::vector<int>> prev(k + 1, std::vector<int>(n * n + 1, -1));\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            dp[1][grid[i][j]] = 0;\n        }\n    }\n\n    for (int len = 2; len <= k; ++len) {\n        for (int sum = 1; sum <= n * n; ++sum) {\n            for (int p = 1; p < sum; ++p) {\n                if (dp[len][sum] > dp[len - 1][p] + dp[1][sum - p]) {\n                    dp[len][sum] = dp[len - 1][p] + dp[1][sum - p];\n                    prev[len][sum] = p;\n                }\n            }\n        }\n    }\n\n    std::vector<int> path(k);\n    int sum = 1;\n    for (int i = 0; i < k; ++i) {\n        path[i] = prev[k - i][sum];\n        sum -= path[i];\n    }\n\n    return path;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\nstd::vector<int> minPath(const std::vector<std::vector<int> > & grid, int k){\n    int n = grid.size();\n    std::vector<int> path;\n    int row = 0, col = 0;\n    for (int i = 0; i < k; ++i) {\n        path.push_back(grid[row][col]);\n        if ((row + col) % 2 == 0) {\n            if (col == n - 1) {\n                ++row;\n            } else if (row == 0) {\n                ++col;\n            } else {\n                --row;\n                ++col;\n            }\n        } else {\n            if (row == n - 1) {\n                ++col;\n            } else if (col == 0) {\n                ++row;\n            } else {\n                ++row;\n                --col;\n            }\n        }\n    }\n    return path;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n){\n    uint64_t product = 1;\n    while(n > 0){\n        if(n % 2 != 0){\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n    return product == 1 ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n){\n    uint64_t product = 1;\n    while(n > 0){\n        uint64_t digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product == 1 ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n){\n    uint64_t product = 1;\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product == 1 ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n){\n    uint64_t product = 1;\n    while(n > 0){\n        if((n % 10) % 2 != 0){\n            product *= (n % 10);\n        }\n        n /= 10;\n    }\n    return product == 1 ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\nuint64_t digits(uint64_t n){\n    uint64_t product = 1;\n    while(n > 0){\n        if(n % 2 != 0){\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n    return product == 1 ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nuint64_t sum_squares(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += std::ceil(num) * std::ceil(num);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nuint64_t sum_squares(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += std::ceil(num) * std::ceil(num);\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nuint64_t sum_squares(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num) * std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nuint64_t sum_squares(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num) * std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nuint64_t sum_squares(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num)) * static_cast<uint64_t>(std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr){\n    int result = -1;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            result = i - 1;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr){\n    int index = -1;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr){\n    int index = -1;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] < arr[i-1]){\n            index = i - 1;\n        }\n    }\n    return index;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\nint can_arrange(const std::vector<int> & arr){\n    int largestIndex = -1;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            largestIndex = i - 1;\n        }\n    }\n    return largestIndex;\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n\n    for(int num : lst){\n        if(num < 0 && num < largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && (num < smallest_positive || smallest_positive == 0)){\n            smallest_positive = num;\n        }\n    }\n\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    \n    for(int num : lst){\n        if(num < 0 && num < largest_negative){\n            largest_negative = num;\n        }\n        else if(num > 0 && (num < smallest_positive || smallest_positive == 0)){\n            smallest_positive = num;\n        }\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst){\n    int largest_negative = 0, smallest_positive = 0;\n    for (int num : lst) {\n        if (num < 0 && num < largest_negative) {\n            largest_negative = num;\n        } else if (num > 0 && (num < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = num;\n        }\n    }\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst){\n    int largest_negative = 0, smallest_positive = 0;\n    for (int num : lst) {\n        if (num < 0 && num < largest_negative) {\n            largest_negative = num;\n        } else if (num > 0 && (num < smallest_positive || smallest_positive == 0)) {\n            smallest_positive = num;\n        }\n    }\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst){\n    int largest_negative = 0, smallest_positive = 0;\n    for(int num : lst){\n        if(num < 0 && num < largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && (num < smallest_positive || smallest_positive == 0)){\n            smallest_positive = num;\n        }\n    }\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n){\n    uint64_t result = 1;\n    for(uint64_t i = 1; i <= n; ++i){\n        uint64_t factorial = 1;\n        for(uint64_t j = 1; j <= i; ++j){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n){\n    uint64_t result = 1;\n    for(uint64_t i = 1; i <= n; ++i){\n        uint64_t factorial = 1;\n        for(uint64_t j = 1; j <= i; ++j){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```c\nuint64_t special_factorial(uint64_t n){\n    uint64_t result = 1;\n    for(uint64_t i = 1; i <= n; i++){\n        uint64_t factorial = 1;\n        for(uint64_t j = 1; j <= i; j++){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n){\n    uint64_t result = 1;\n    for(uint64_t i = 1; i <= n; ++i){\n        uint64_t factorial = 1;\n        for(uint64_t j = 1; j <= i; ++j){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```cpp\nuint64_t special_factorial(uint64_t n){\n    if(n == 0){\n        return 1;\n    }\n    uint64_t result = 1;\n    for(uint64_t i = 1; i <= n; ++i){\n        uint64_t factorial = 1;\n        for(uint64_t j = 1; j <= i; ++j){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i + 1) % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            lst[i] *= lst[i];\n        } else if ((i + 1) % 4 == 0) {\n            lst[i] *= lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i + 1) % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i + 1) % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\nint sum_squares(const std::vector<int> & lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if ((i + 1) % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i + 1) % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int> & nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            std::string numStr = std::to_string(num);\n            if ((numStr.front() - '0') % 2 != 0 && (numStr.back() - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int> & nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            int firstDigit = abs(num);\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            int lastDigit = abs(num) % 10;\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int> & nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            int firstDigit = abs(num);\n            while(firstDigit >= 10){\n                firstDigit /= 10;\n            }\n            int lastDigit = abs(num) % 10;\n            if((firstDigit % 2 != 0) && (lastDigit % 2 != 0)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int> & nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            int firstDigit = std::abs(num);\n            while(firstDigit >= 10){\n                firstDigit /= 10;\n            }\n            int lastDigit = std::abs(num) % 10;\n            if((firstDigit % 2 != 0) && (lastDigit % 2 != 0)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\nint specialFilter(const std::vector<int> & nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            int firstDigit = abs(num);\n            while(firstDigit >= 10){\n                firstDigit /= 10;\n            }\n            int lastDigit = abs(num) % 10;\n            if((firstDigit % 2 != 0) && (lastDigit % 2 != 0)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n){\n    uint64_t count = 0;\n    std::vector<uint64_t> a(n);\n    for(uint64_t i = 0; i < n; ++i){\n        a[i] = i * i - i + 1;\n    }\n    for(uint64_t i = 0; i < n; ++i){\n        for(uint64_t j = i + 1; j < n; ++j){\n            for(uint64_t k = j + 1; k < n; ++k){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n){\n    uint64_t count = 0;\n    std::vector<uint64_t> a(n);\n    for(uint64_t i = 0; i < n; ++i){\n        a[i] = i * i - i + 1;\n    }\n    for(uint64_t i = 0; i < n - 2; ++i){\n        for(uint64_t j = i + 1; j < n - 1; ++j){\n            for(uint64_t k = j + 1; k < n; ++k){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n){\n    uint64_t count = 0;\n    std::vector<uint64_t> a(n);\n    for(uint64_t i = 0; i < n; ++i){\n        a[i] = i * i - i + 1;\n    }\n    for(uint64_t i = 0; i < n - 2; ++i){\n        for(uint64_t j = i + 1; j < n - 1; ++j){\n            for(uint64_t k = j + 1; k < n; ++k){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n){\n    uint64_t count = 0;\n    std::vector<uint64_t> a(n);\n    for(uint64_t i = 0; i < n; ++i){\n        a[i] = i * i - i + 1;\n    }\n    for(uint64_t i = 0; i < n; ++i){\n        for(uint64_t j = i + 1; j < n; ++j){\n            for(uint64_t k = j + 1; k < n; ++k){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n){\n    uint64_t count = 0;\n    std::vector<uint64_t> a(n);\n    for(uint64_t i = 0; i < n; ++i){\n        a[i] = i * i - i + 1;\n    }\n    for(uint64_t i = 0; i < n; ++i){\n        for(uint64_t j = i + 1; j < n; ++j){\n            for(uint64_t k = j + 1; k < n; ++k){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y){\n    int isPrime = 1;\n    if (n <= 1) {\n        isPrime = 0;\n    } else {\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                isPrime = 0;\n                break;\n            }\n        }\n    }\n    if (isPrime) {\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y){\n    int is_prime = 1;\n    if(n <= 1){\n        is_prime = 0;\n    } else {\n        for(int i = 2; i <= n / 2; i++){\n            if(n % i == 0){\n                is_prime = 0;\n                break;\n            }\n        }\n    }\n    if(is_prime){\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\nint x_or_y(int n, int x, int y){\n    int isPrime = 1;\n    if(n <= 1){\n        isPrime = 0;\n    }\n    for(int i = 2; i <= n / 2; i++){\n        if(n % i == 0){\n            isPrime = 0;\n            break;\n        }\n    }\n    if(isPrime){\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\n#include <vector>\n\nuint64_t double_the_difference(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (const auto &num : lst) {\n        if (num > 0 && num == static_cast<int>(num) && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (const auto &num : lst) {\n        if (num > 0 && num == static_cast<int>(num) && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (const auto &num : lst) {\n        if (num > 0 && num == static_cast<int>(num) && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\nuint64_t double_the_difference(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num > 0 && num == static_cast<int>(num) && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num * num);\n        }\n    }\n    return sum * 2;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\n#include <vector>\n\nuint64_t double_the_difference(const std::vector<float> & lst){\n    uint64_t sum = 0;\n    for (const auto &num : lst) {\n        if (num > 0 && static_cast<int>(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num * num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess){\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess){\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess){\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess){\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess){\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}

{"task_id": "SimdBench_0", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_move(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_1", "completion": "```c\nvoid load_modify_store(const int *src, int *dst, int scale, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int element = src[i];\n        int tmp1 = (element * scale) >> 3;\n        int tmp2 = (element * scale) << 3;\n        dst[i] = (element * scale + tmp1 * tmp2) / 7;\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\n#include <stddef.h>\n\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\n#include <stddef.h>\n\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\n#include <stddef.h>\n\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\n#include <stddef.h>\n\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2", "completion": "```c\n#include <stddef.h>\n\nvoid strided_load_store(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    for (size_t r = 0; r < rows; r++) {\n        dst[r] = src[r * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\n#include <stddef.h>\n\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]]; // Gather operation\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i]; // Scatter operation\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\n#include <stddef.h>\n\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]]; // Gather operation\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i]; // Scatter operation\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\n#include <stddef.h>\n\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]]; // Gather operation\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i]; // Scatter operation\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\n#include <stddef.h>\n\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = src[indices[i]]; // Gather operation\n    }\n    for (size_t i = 0; i < length; i++) {\n        dst[indices[i]] = src[i]; // Scatter operation\n    }\n}\n```"}
{"task_id": "SimdBench_3", "completion": "```c\n#include <stddef.h>\n\nvoid indexed_access(const float *src, const int *indices, float *dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = src[indices[i]]; // Gather operation\n    }\n    for (size_t i = 0; i < length; ++i) {\n        dst[indices[i]] = src[i]; // Scatter operation\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\n#include <stdint.h>\n\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\n#include <stdint.h>\n\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\n#include <stdint.h>\n\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\n#include <stdint.h>\n\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_4", "completion": "```c\n#include <stdint.h>\n\nvoid range_reverse(int16_t *arr, uint64_t start, uint64_t end) {\n    while (start < end) {\n        int16_t temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            size_t tensor_index = (i * dim2 * dim3) + (j * dim3) + slice_idx;\n            slice[i * dim2 + j] = tensor[tensor_index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            size_t tensor_index = (i * dim2 * dim3) + (j * dim3) + slice_idx;\n            slice[i * dim2 + j] = tensor[tensor_index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            size_t tensor_index = (i * dim2 * dim3) + (j * dim3) + slice_idx;\n            slice[i * dim2 + j] = tensor[tensor_index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            size_t tensor_index = (i * dim2 * dim3) + (j * dim3) + slice_idx;\n            slice[i * dim2 + j] = tensor[tensor_index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_5", "completion": "```c\nvoid extract_tensor_slice(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            size_t tensor_index = (i * dim2 * dim3) + (j * dim3) + slice_idx;\n            slice[i * dim2 + j] = tensor[tensor_index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = i; bi < i + block_size && bi < rows; ++bi) {\n                for (size_t bj = j; bj < j + block_size && bj < cols; ++bj) {\n                    dst[bj * rows + bi] = src[bi * cols + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size && (i + bi) < rows; ++bi) {\n                for (size_t bj = 0; bj < block_size && (j + bj) < cols; ++bj) {\n                    dst[j + bj * rows + i + bi] = src[i + bi * cols + j + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size && (i + bi) < rows; ++bi) {\n                for (size_t bj = 0; bj < block_size && (j + bj) < cols; ++bj) {\n                    dst[j + bj * rows + i + bi] = src[i + bi * cols + j + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size && (i + bi) < rows; ++bi) {\n                for (size_t bj = 0; bj < block_size && (j + bj) < cols; ++bj) {\n                    dst[j + bj * rows + i + bi] = src[i + bi * cols + j + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid blocked_matrix_transpose(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = i; bi < i + block_size && bi < rows; ++bi) {\n                for (size_t bj = j; bj < j + block_size && bj < cols; ++bj) {\n                    dst[bj * rows + bi] = src[bi * cols + bj];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7", "completion": "```c\nfloat diagonal_sum_3d(const float *array, size_t dim) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < dim; ++i) {\n        sum += array[i * dim * dim + i * dim + i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\n#include <stddef.h>\n\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            dst[index] = (src[index] > threshold) ? (src[index] * scale) : src[index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\n#include <stddef.h>\n\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            dst[index] = (src[index] > threshold) ? src[index] * scale : src[index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\n#include <stddef.h>\n\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            dst[index] = (src[index] > threshold) ? src[index] * scale : src[index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\n#include <stddef.h>\n\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            dst[index] = (src[index] > threshold) ? src[index] * scale : src[index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_8", "completion": "```c\n#include <stddef.h>\n\nvoid conditional_scale(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            size_t index = i * cols + j;\n            dst[index] = (src[index] > threshold) ? (src[index] * scale) : src[index];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\n#include <stddef.h>\n\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        size_t dst_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_index + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\n#include <stddef.h>\n\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[i * cols + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\n#include <stddef.h>\n\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        size_t dst_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_index + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\n#include <stddef.h>\n\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        size_t dst_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_index + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9", "completion": "```c\n#include <stddef.h>\n\nvoid reorder_matrix_rows(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_index = indices[i] * cols;\n        size_t dst_index = i * cols;\n        for (size_t j = 0; j < cols; ++j) {\n            dst[dst_index + j] = src[src_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_10", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_vector_add(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src1[i] + src2[i] + scalar) / 2;\n    }\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\n#include <limits.h>\n\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int min_even = INT_MAX;\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && src[i] < min_even) {\n            min_even = src[i];\n        }\n    }\n\n    return (min_even == INT_MAX) ? -1 : min_even;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\n#include <limits.h>\n\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int min_value = INT_MAX;\n    for (size_t i = 0; i < length; i += 2) {\n        if (src[i] < min_value) {\n            min_value = src[i];\n        }\n    }\n\n    return (min_value == INT_MAX) ? -1 : min_value;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\n#include <limits.h>\n\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int min_value = INT_MAX;\n    for (size_t i = 0; i < length; i += 2) {\n        if (src[i] < min_value) {\n            min_value = src[i];\n        }\n    }\n\n    return (min_value == INT_MAX) ? -1 : min_value;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\n#include <limits.h>\n\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int min_even = INT_MAX;\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && src[i] < min_even) {\n            min_even = src[i];\n        }\n    }\n\n    return (min_even == INT_MAX) ? -1 : min_even;\n}\n```"}
{"task_id": "SimdBench_11", "completion": "```c\n#include <limits.h>\n\nint vector_even_min(const int *src, size_t length) {\n    if (length == 0) {\n        return -1;\n    }\n\n    int min_even = INT_MAX;\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && src[i] < min_even) {\n            min_even = src[i];\n        }\n    }\n\n    return (min_even == INT_MAX) ? -1 : min_even;\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic_shift = src[i] >> shift;\n        int logical_shift = (uint32_t)src[i] >> shift;\n        dst[i] = arithmetic_shift + logical_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic_shift = src[i] >> shift;\n        int logical_shift = (uint32_t)src[i] >> shift;\n        dst[i] = arithmetic_shift + logical_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic_shift = src[i] >> shift;\n        int logical_shift = (uint32_t)src[i] >> shift;\n        dst[i] = arithmetic_shift + logical_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic_shift = src[i] >> shift;\n        int logical_shift = (uint32_t)src[i] >> shift;\n        dst[i] = arithmetic_shift + logical_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_12", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid mixed_right_shift(const int *src, int *dst, uint8_t shift, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int arithmetic_shift = src[i] >> shift;\n        int logical_shift = (uint32_t)src[i] >> shift;\n        dst[i] = arithmetic_shift + logical_shift;\n    }\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\n#include <stdint.h>\n\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            sum += matrix[i * cols + j];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\n#include <stdint.h>\n\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            sum += matrix[i * cols + j];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\n#include <stdint.h>\n\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows * cols; i++) {\n        sum += matrix[i];\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\n#include <stdint.h>\n\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            sum += matrix[i * cols + j];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13", "completion": "```c\n#include <stdint.h>\n\nint64_t matrix_sum(const int *matrix, size_t rows, size_t cols) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            sum += matrix[i * cols + j];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t max_index = 0;\n    int8_t max_value = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n    \n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t max_index = 0;\n    int8_t max_value = src[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t max_index = 0;\n    int8_t max_value = src[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t max_index = 0;\n    int8_t max_value = src[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t argmax(const int8_t *src, size_t length) {\n    if (length == 0) {\n        return 0;\n    }\n    \n    size_t max_index = 0;\n    int8_t max_value = src[0];\n    \n    for (size_t i = 1; i < length; i++) {\n        if (src[i] > max_value) {\n            max_value = src[i];\n            max_index = i;\n        }\n    }\n    \n    return max_index;\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (i & mask) {\n            dst[i] = src1[i];\n        } else {\n            dst[i] = src2[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (i & mask) {\n            dst[i] = src1[i];\n        } else {\n            dst[i] = src2[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (i & mask) {\n            dst[i] = src1[i];\n        } else {\n            dst[i] = src2[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (i & mask) {\n            dst[i] = src1[i];\n        } else {\n            dst[i] = src2[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_15", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid vector_blend(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (i & mask) {\n            dst[i] = src1[i];\n        } else {\n            dst[i] = src2[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\n#include <stdint.h>\n\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t count = 0;\n        uint32_t value = src[i];\n        while (value) {\n            count += value & 1;\n            value >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\n#include <stdint.h>\n\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t count = 0;\n        uint32_t value = src[i];\n        while (value) {\n            count += value & 1;\n            value >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\n#include <stdint.h>\n\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t count = 0;\n        uint32_t value = src[i];\n        while (value) {\n            count += value & 1;\n            value >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\n#include <stdint.h>\n\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t count = 0;\n        uint32_t value = src[i];\n        while (value) {\n            count += value & 1;\n            value >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_16", "completion": "```c\n#include <stdint.h>\n\nvoid population_count(const uint32_t* src, uint32_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t count = 0;\n        uint32_t value = src[i];\n        while (value) {\n            count += value & 1;\n            value >>= 1;\n        }\n        dst[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_17", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid saturating_add(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        uint32_t sum = (uint32_t)src1[i] + (uint32_t)src2[i];\n        dst[i] = (sum > UINT16_MAX) ? UINT16_MAX : (uint16_t)sum;\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\n#include <stddef.h>\n\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            C[i * p + j] = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    C[i * p + j] += A[i * n + k] * B[k * p + j];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\n#include <stddef.h>\n\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            C[i * p + j] = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    C[i * p + j] += A[i * n + k] * B[k * p + j];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\n#include <stddef.h>\n\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            C[i * p + j] = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    C[i * p + j] += A[i * n + k] * B[k * p + j];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\n#include <stddef.h>\n\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            C[i * p + j] = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    C[i * p + j] += A[i * n + k] * B[k * p + j];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18", "completion": "```c\n#include <stddef.h>\n\nvoid range_matrix_mul(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            C[i * p + j] = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                if (A[i * n + k] >= -100 && A[i * n + k] <= 100 && B[k * p + j] >= -100 && B[k * p + j] <= 100) {\n                    C[i * p + j] += A[i * n + k] * B[k * p + j];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\n#include <stddef.h>\n\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\n#include <stddef.h>\n\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\n#include <stddef.h>\n\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19", "completion": "```c\n#include <stddef.h>\n\nvoid tensor_add_3d(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_20", "completion": "```c\n#include <math.h>\n\nvoid vector_add_round_nearest(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = roundf(src1[i] + src2[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabs(src1[i] - src2[i]) <= 50) {\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabs(src1[i] - src2[i]) <= 50) {\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabs(src1[i] - src2[i]) <= 50) {\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabs(src1[i] - src2[i]) <= 50) {\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid vector_mul_round_up(const float* src1, const float* src2, float* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if (i % 2 == 0 && fabs(src1[i] - src2[i]) <= 50) {\n            dst[i] = ceil(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    for (size_t i = 0; i < total_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    for (size_t i = 0; i < total_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    for (size_t i = 0; i < total_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    for (size_t i = 0; i < total_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_22", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_scalar_mul(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    for (size_t i = 0; i < total_elements; ++i) {\n        dst[i] = mat[i] * scalar;\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\n#include <math.h>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_of_squares = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum_of_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = sqrt(sum_of_squares);\n        if (norm > 0) {\n            for (size_t j = 0; j < n; ++j) {\n                mat[i * n + j] /= norm;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\n#include <math.h>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float norm = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            norm += mat[i * n + j] * mat[i * n + j];\n        }\n        norm = sqrt(norm);\n        for (size_t j = 0; j < n; j++) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\n#include <math.h>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; i++) {\n        float sum_of_squares = 0.0f;\n        for (size_t j = 0; j < n; j++) {\n            sum_of_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = sqrt(sum_of_squares);\n        for (size_t j = 0; j < n; j++) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\n#include <math.h>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_of_squares = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum_of_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = sqrt(sum_of_squares);\n        if (norm > 0) {\n            for (size_t j = 0; j < n; ++j) {\n                mat[i * n + j] /= norm;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23", "completion": "```c\n#include <math.h>\n\nvoid matrix_normalize_rows(float* mat, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        float sum_of_squares = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum_of_squares += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = sqrt(sum_of_squares);\n        if (norm > 0) {\n            for (size_t j = 0; j < n; ++j) {\n                mat[i * n + j] /= norm;\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_mul_round_int(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            for (size_t k = 0; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\n#include <math.h>\n#include <stddef.h>\n\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            float value = src[i * cols + j];\n            float rounded_value = roundf(value * 4.0f) / 4.0f;\n            dst[j * rows + i] = rounded_value;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            float value = src[i * cols + j];\n            float rounded_value = roundf(value * 4.0f) / 4.0f;\n            dst[j * rows + i] = rounded_value;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 0; j < cols; j++) {\n            float value = src[i * cols + j];\n            float rounded_value = roundf(value * 4.0f) / 4.0f;\n            dst[j * rows + i] = rounded_value;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            float value = src[i * cols + j];\n            float rounded_value = roundf(value * 4.0f) / 4.0f;\n            dst[j * rows + i] = rounded_value;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid matrix_transpose_round_quarter(const float* src, float* dst, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            float value = src[i * cols + j];\n            float rounded_value = roundf(value * 4.0f) / 4.0f;\n            dst[j * rows + i] = rounded_value;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floor(result) : ceil(result);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floorf(result) : ceilf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floor(result) : ceil(result);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floor(result) : ceil(result);\n    }\n}\n```"}
{"task_id": "SimdBench_26", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid tensor3d_sub_round_zero(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floor(result) : ceil(result);\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; ++j) {\n            dst[i * n + j] = mat1[i * n + j] * mat2[i * n + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; ++j) {\n            dst[i * n + j] = mat1[i * n + j] * mat2[i * n + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; ++j) {\n            dst[i * n + j] = mat1[i * n + j] * mat2[i * n + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; ++j) {\n            dst[i * n + j] = mat1[i * n + j] * mat2[i * n + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_hadamard_product(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; ++j) {\n            dst[i * n + j] = mat1[i * n + j] * mat2[i * n + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28", "completion": "```c\n#include <stddef.h>\n\nvoid matrix_vector_mul(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    for (size_t i = 0; i < m; ++i) {\n        dst[i] = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            dst[i] += mat[i * n + j] * vec[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n\n    for (size_t i = 0; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n\n    for (size_t i = 0; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n\n    for (size_t i = 0; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n    \n    for (size_t i = 0; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n    \n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29", "completion": "```c\ndouble matrix_average(const double* mat, size_t m, size_t n) {\n    double sum = 0.0;\n    size_t total_elements = m * n;\n\n    for (size_t i = 0; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] < matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] > matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 1; j < cols; ++j) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] < matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] > matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] < matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] > matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] < matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] > matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_sorted_verify(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 1; j < cols; ++j) {\n            if (directions[i]) {\n                if (matrix[i * cols + j] < matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            } else {\n                if (matrix[i * cols + j] > matrix[i * cols + j - 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int16_t value = src[i];\n        dst[i] = (value / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        int16_t value = src[i];\n        dst[i] = (value / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        int16_t value = src[i];\n        dst[i] = (value / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_31", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid nearest_multiple(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = (src[i] / base) * base;\n    }\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        if (memcmp(matrix + i * cols, vector, cols * sizeof(double)) == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        if (memcmp(matrix + i * cols, vector, cols * sizeof(double)) == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        if (memcmp(matrix + i * cols, vector, cols * sizeof(double)) == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        if (memcmp(matrix + i * cols, vector, cols * sizeof(double)) == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\nbool matrix_has_row(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; i++) {\n        if (memcmp(matrix + i * cols, vector, cols * sizeof(double)) == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n\n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n\n    for (size_t i = 0; i < total_elements; i++) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n\n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n\n    for (size_t i = 0; i < total_elements; i++) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33", "completion": "```c\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t tensor_4d_equal_count(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n\n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <stdlib.h>\n\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t scalar_mult = a * x[i];\n        y[i] = (scalar_mult < 0) ? -scalar_mult : scalar_mult;\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <stdlib.h>\n\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t scalar_mult = a * x[i];\n        y[i] = abs(scalar_mult);\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <stdlib.h>\n\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t scalar_mult = a * x[i];\n        y[i] = scalar_mult - abs(x[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <stdlib.h>\n\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        int64_t scalar_mult = a * x[i];\n        y[i] = scalar_mult - abs(x[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_34", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <stdlib.h>\n\nvoid axm_abs(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    for (size_t i = 0; i < length; i++) {\n        y[i] = abs(a * x[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_35", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair(const int16_t* vec, size_t length) {\n    MinMaxPair result;\n    result.min_num = vec[0];\n    result.max_num = vec[0];\n\n    for (size_t i = 1; i < length; i++) {\n        if (vec[i] < result.min_num) {\n            result.min_num = vec[i];\n        }\n        if (vec[i] > result.max_num) {\n            result.max_num = vec[i];\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (*(matrix + i * cols + j) <= *(matrix + i * cols + j - 1)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (*(matrix + i * cols + j) <= *(matrix + i * cols + j - 1)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36", "completion": "```c\n#include <stdbool.h>\n\nbool matrix_rows_strictly_increasing(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) {\n        return false;\n    }\n    \n    for (size_t i = 0; i < rows; i++) {\n        for (size_t j = 1; j < cols; j++) {\n            if (matrix[i * cols + j] <= matrix[i * cols + j - 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            for (size_t bi = 0; bi < block_size; ++bi) {\n                for (size_t bj = 0; bj < block_size; ++bj) {\n                    if (matrix[(i + bi) * cols + (j + bj)] != matrix[0]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n\n    for (size_t block_row = 0; block_row < num_blocks_row; ++block_row) {\n        for (size_t block_col = 0; block_col < num_blocks_col; ++block_col) {\n            const int* first_block = matrix + (block_row * block_size * cols) + (block_col * block_size);\n            for (size_t i = 0; i < block_size; ++i) {\n                for (size_t j = 0; j < block_size; ++j) {\n                    size_t current_row = block_row * block_size + i;\n                    size_t current_col = block_col * block_size + j;\n                    const int* current_block = matrix + (current_row * cols) + current_col;\n                    if (*first_block != *current_block) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    int first_block_value = matrix[0];\n\n    for (size_t block_row = 0; block_row < num_blocks_row; block_row++) {\n        for (size_t block_col = 0; block_col < num_blocks_col; block_col++) {\n            for (size_t i = 0; i < block_size; i++) {\n                for (size_t j = 0; j < block_size; j++) {\n                    size_t index = (block_row * block_size + i) * cols + (block_col * block_size + j);\n                    if (matrix[index] != first_block_value) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    int first_block_value = matrix[0];\n\n    for (size_t block_row = 0; block_row < num_blocks_row; ++block_row) {\n        for (size_t block_col = 0; block_col < num_blocks_col; ++block_col) {\n            for (size_t i = 0; i < block_size; ++i) {\n                for (size_t j = 0; j < block_size; ++j) {\n                    size_t index = (block_row * block_size + i) * cols + (block_col * block_size + j);\n                    if (matrix[index] != first_block_value) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37", "completion": "```c\n#include <stdbool.h>\n#include <stddef.h>\n\nbool matrix_blocks_equal(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n\n    for (size_t block_row = 0; block_row < num_blocks_row; block_row++) {\n        for (size_t block_col = 0; block_col < num_blocks_col; block_col++) {\n            for (size_t i = 0; i < block_size; i++) {\n                for (size_t j = 0; j < block_size; j++) {\n                    size_t current_index = (block_row * block_size + i) * cols + (block_col * block_size + j);\n                    size_t first_block_index = (0 * block_size + i) * cols + (0 * block_size + j);\n                    if (matrix[current_index] != matrix[first_block_index]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || length < block_size) {\n        return false;\n    }\n\n    size_t complete_blocks = length / block_size;\n    for (size_t i = 1; i < complete_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::fabs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || length < block_size) {\n        return false;\n    }\n\n    size_t complete_blocks = length / block_size;\n    for (size_t i = 1; i < complete_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::fabs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || length < block_size) {\n        return false;\n    }\n\n    size_t complete_blocks = length / block_size;\n    for (size_t i = 1; i < complete_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::fabs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || tolerance < 0 || length < block_size) {\n        return false;\n    }\n\n    size_t complete_blocks = length / block_size;\n    for (size_t i = 1; i < complete_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::fabs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_38", "completion": "```cpp\n#include <cstddef>\n#include <cmath>\n\nbool vector_block_equal(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (!vec || length < block_size || block_size == 0) {\n        return false;\n    }\n\n    size_t num_blocks = length / block_size;\n    for (size_t i = 1; i < num_blocks; ++i) {\n        for (size_t j = 0; j < block_size; ++j) {\n            if (std::fabs(vec[j] - vec[i * block_size + j]) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double norm = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            double value = matrix[i * cols + j];\n            norm += value * value;\n        }\n        norm = sqrt(norm);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double norm = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            norm += matrix[i * cols + j] * matrix[i * cols + j];\n        }\n        norm = sqrt(norm);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double norm = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            double value = matrix[i * cols + j];\n            norm += value * value;\n        }\n        norm = sqrt(norm);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double norm = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            norm += matrix[i * cols + j] * matrix[i * cols + j];\n        }\n        norm = sqrt(norm);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39", "completion": "```c\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n\nvoid matrix_row_norm_compare(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    for (size_t i = 0; i < rows; ++i) {\n        double norm = 0.0;\n        for (size_t j = 0; j < cols; ++j) {\n            norm += matrix[i * cols + j] * matrix[i * cols + j];\n        }\n        norm = sqrt(norm);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bitwise_or(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] | B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```c\n#include <stdint.h>\n\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i++) {\n        sum_of_squares += (int64_t)A[i] * A[i];\n        sum_of_products += (int64_t)A[i] * (int64_t)B[i];\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```c\n#include <stdint.h>\n\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; ++i) {\n        sum_of_squares += (int64_t)A[i] * A[i];\n        sum_of_products += (int64_t)A[i] * (int64_t)B[i];\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```c\n#include <stdint.h>\n\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i++) {\n        sum_of_squares += (int64_t)A[i] * A[i];\n        sum_of_products += (int64_t)A[i] * (int64_t)B[i];\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```c\n#include <stdint.h>\n\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i++) {\n        sum_of_squares += (int64_t)A[i] * A[i];\n        sum_of_products += (int64_t)A[i] * (int64_t)B[i];\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41", "completion": "```c\n#include <stdint.h>\n\nint64_t squarediff(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    for (size_t i = 0; i < length; i++) {\n        sum_of_squares += (int64_t)A[i] * A[i];\n        sum_of_products += (int64_t)A[i] * (int64_t)B[i];\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_42", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_bit_clear(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        C[i] = A[i] & ~B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43", "completion": "```c\n#include <stdint.h>\n\nvoid tensor_three_valued_logic(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    for (size_t i = 0; i < length; i++) {\n        if (i < midpoint) {\n            C[i] = A[i] ^ B[i];\n        } else if (i == midpoint) {\n            C[i] = A[i];\n        } else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    for (size_t i = 0; i < length; ++i) {\n        if (i < midpoint) {\n            C[i] = A[i] ^ B[i];\n        } else if (i == midpoint) {\n            C[i] = A[i];\n        } else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    for (size_t i = 0; i < length; i++) {\n        if (i < midpoint) {\n            C[i] = A[i] ^ B[i];\n        } else if (i == midpoint) {\n            C[i] = A[i];\n        } else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    for (size_t i = 0; i < length; ++i) {\n        if (i < midpoint) {\n            C[i] = A[i] ^ B[i];\n        } else if (i == midpoint) {\n            C[i] = A[i];\n        } else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_44", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_op(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    \n    for (size_t i = 0; i < length; i++) {\n        if (i < midpoint) {\n            C[i] = A[i] ^ B[i];\n        } else if (i == midpoint) {\n            C[i] = A[i];\n        } else {\n            C[i] = A[i] & B[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\n#include <cstddef>\n\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            for (size_t k = 0; k < dim3; ++k) {\n                size_t index = i * dim2 * dim3 + j * dim3 + k;\n                if (cond1[index] && cond2[index]) {\n                    out[index] = A[index];\n                } else if (cond1[index] && !cond2[index]) {\n                    out[index] = B[index];\n                } else if (!cond1[index] && cond2[index]) {\n                    out[index] = C[index];\n                } else {\n                    out[index] = D[index];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\n#include <cstddef>\n\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        size_t idx = i; // Flattened index\n        if (cond1[idx]) {\n            out[idx] = cond2[idx] ? A[idx] : B[idx];\n        } else {\n            out[idx] = cond2[idx] ? C[idx] : D[idx];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\n#include <cstddef>\n\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        size_t idx = i; // Flattened index\n        if (cond1[idx]) {\n            out[idx] = cond2[idx] ? A[idx] : B[idx];\n        } else {\n            out[idx] = cond2[idx] ? C[idx] : D[idx];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\n#include <cstddef>\n\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    for (size_t i = 0; i < dim1; ++i) {\n        for (size_t j = 0; j < dim2; ++j) {\n            for (size_t k = 0; k < dim3; ++k) {\n                size_t index = i * dim2 * dim3 + j * dim3 + k;\n                if (cond1[index] && cond2[index]) {\n                    out[index] = A[index];\n                } else if (cond1[index] && !cond2[index]) {\n                    out[index] = B[index];\n                } else if (!cond1[index] && cond2[index]) {\n                    out[index] = C[index];\n                } else {\n                    out[index] = D[index];\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_45", "completion": "```cpp\n#include <cstddef>\n\nvoid tensor_multi_select(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        size_t idx = i;\n        bool c1 = cond1[idx];\n        bool c2 = cond2[idx];\n        \n        if (c1 && c2) {\n            out[idx] = A[idx];\n        } else if (c1 && !c2) {\n            out[idx] = B[idx];\n        } else if (!c1 && c2) {\n            out[idx] = C[idx];\n        } else {\n            out[idx] = D[idx];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        uint32_t value = A[i];\n        out[i] = 0;\n        while (value) {\n            out[i] += value & 1;\n            value >>= 1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        uint32_t value = A[i];\n        out[i] = 0;\n        while (value) {\n            out[i] += value & 1;\n            value >>= 1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        uint32_t value = A[i];\n        out[i] = 0;\n        while (value) {\n            out[i] += value & 1;\n            value >>= 1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        uint32_t value = A[i];\n        out[i] = 0;\n        while (value) {\n            out[i] += value & 1;\n            value >>= 1;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_46", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid tensor_bit_count(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    for (size_t i = 0; i < total_elements; ++i) {\n        uint32_t value = A[i];\n        uint8_t count = 0;\n        while (value) {\n            count += value & 1;\n            value >>= 1;\n        }\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\n#include <stdlib.h>\n\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    for (size_t i = 0; i < total_elements; i++) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\n#include <stdlib.h>\n\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\n#include <stdlib.h>\n#include <stddef.h>\n\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\n#include <stdlib.h>\n#include <stddef.h>\n\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    for (size_t i = 0; i < total_elements; ++i) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_47", "completion": "```c\n#include <stdlib.h>\n\nvoid matrix_conditional_abs(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    for (size_t i = 0; i < total_elements; i++) {\n        if (A[i] % 3 == 0) {\n            B[i] = abs(A[i]);\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if ((src[i] & 0x0F) == 0x0F) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        if ((src[i] & 0x0F) == 0x0F) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if ((src[i] & 0x0F) == 0x0F) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if ((src[i] & 0x0F) == 0x0F) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_48", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid matrix_conditional_bit_rotate(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        if ((src[i] & 0x0F) == 0x0F) {\n            dst[i] = (src[i] >> rotate_bits) | (src[i] << (32 - rotate_bits));\n        } else {\n            dst[i] = ~src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\n#include <math.h>\n#include <stdint.h>\n\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > fabsf(epsilon)) {\n            out[i] = 1;\n        } else if (diff < -fabsf(epsilon)) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    float abs_epsilon = fabsf(epsilon);\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > abs_epsilon) {\n            out[i] = 1;\n        } else if (diff < -abs_epsilon) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > fabsf(epsilon)) {\n            out[i] = 1;\n        } else if (diff < -fabsf(epsilon)) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\n#include <math.h>\n#include <stdint.h>\n\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > fabsf(epsilon)) {\n            out[i] = 1;\n        } else if (diff < -fabsf(epsilon)) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_49", "completion": "```c\n#include <math.h>\n#include <stdint.h>\n\nvoid tensor_ternary_compare(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        float diff = A[i] - B[i];\n        if (diff > fabsf(epsilon)) {\n            out[i] = 1;\n        } else if (diff < -fabsf(epsilon)) {\n            out[i] = -1;\n        } else {\n            out[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <float.h>\n\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_50", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <float.h>\n\nvoid float_to_int_saturate(const float* A, int32_t* B, size_t size) {\n    const int32_t INT32_MAX = 2147483647;\n    const int32_t INT32_MIN = -2147483648;\n\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > INT32_MAX) {\n            B[i] = INT32_MAX;\n        } else if (A[i] < INT32_MIN) {\n            B[i] = INT32_MIN;\n        } else {\n            B[i] = (int32_t)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * (float)(1 << scale);\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * (float)scale;\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * (float)(1 << scale);\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (float)A[i] * (float)scale;\n    }\n}\n```"}
{"task_id": "SimdBench_51", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_to_float_scaled(const int32_t* A, int8_t scale, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        B[i] = (float)A[i] * (float)scale;\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        float result = A[i] / B[i];\n        C[i] = (int32_t)roundf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        float result = A[i] / B[i];\n        C[i] = (int32_t)roundf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        float result = A[i] / B[i];\n        C[i] = (int32_t)roundf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\n#include <math.h>\n#include <stdint.h>\n\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        float result = A[i] / B[i];\n        C[i] = (int32_t)roundf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_52", "completion": "```c\n#include <math.h>\n#include <stdint.h>\n\nvoid float_div_round(const float* A, const float* B, int32_t* C, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        float result = A[i] / B[i];\n        C[i] = (int32_t)roundf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\n#include <float.h>\n#include <stddef.h>\n\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\n#include <float.h>\n#include <stddef.h>\n\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\n#include <float.h>\n#include <stddef.h>\n\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\n#include <float.h>\n#include <stddef.h>\n\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53", "completion": "```c\n#include <float.h>\n#include <stddef.h>\n\nvoid double_to_float_saturate(const double* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        if (A[i] > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (A[i] < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = (float)A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_54", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int16_to_int32(const int16_t* A, int32_t* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = (int32_t)A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; ++i) {\n        if (control[i] > 0) {\n            float normalized = (A[i] - min_val) / (max_val - min_val);\n            if (normalized < 0.0f) {\n                B[i] = 0.0f;\n            } else if (normalized > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = normalized;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; ++i) {\n        if (control[i] > 0) {\n            float normalized_val = (A[i] - min_val) / (max_val - min_val);\n            if (normalized_val < 0.0f) {\n                B[i] = 0.0f;\n            } else if (normalized_val > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = normalized_val;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; ++i) {\n        if (control[i] > 0) {\n            float normalized_val = (A[i] - min_val) / (max_val - min_val);\n            if (normalized_val < 0.0f) {\n                B[i] = 0.0f;\n            } else if (normalized_val > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = normalized_val;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; ++i) {\n        if (control[i] > 0) {\n            float normalized_val = (A[i] - min_val) / (max_val - min_val);\n            if (normalized_val < 0.0f) {\n                B[i] = 0.0f;\n            } else if (normalized_val > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = normalized_val;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_normalize(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    for (size_t i = 0; i < size; ++i) {\n        if (control[i] > 0) {\n            float normalized = (A[i] - min_val) / (max_val - min_val);\n            if (normalized < 0.0f) {\n                B[i] = 0.0f;\n            } else if (normalized > 1.0f) {\n                B[i] = 1.0f;\n            } else {\n                B[i] = normalized;\n            }\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        uint32_t high_16_bits = A[i] >> 16;\n        B[i] = sqrtf((float)high_16_bits);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        uint32_t high_16_bits = A[i] >> 16;\n        B[i] = sqrtf((float)high_16_bits);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        uint32_t high_16_bits = A[i] >> 16;\n        B[i] = sqrtf((float)high_16_bits);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; i++) {\n        uint32_t high_16_bits = A[i] >> 16;\n        B[i] = sqrtf((float)high_16_bits);\n    }\n}\n```"}
{"task_id": "SimdBench_56", "completion": "```c\n#include <stdint.h>\n#include <math.h>\n\nvoid int_to_float_sqrt(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        uint32_t high_16_bits = A[i] >> 16;\n        B[i] = sqrtf((float)high_16_bits);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *(float*)&A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *(float*)&A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *((float*)&A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *((float*)&A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_57", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid int_bits_to_float(const uint32_t* A, float* B, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        B[i] = *(float*)&A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\n#include <stdint.h>\n#include <stdbool.h>\n#include <stddef.h>\n\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    \n    diff[0] = 0.0f;\n    \n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    \n    diff[0] = 0.0f;\n    \n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\n#include <stdint.h>\n#include <stdbool.h>\n#include <stddef.h>\n\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n    \n    diff[0] = 0.0f;\n    \n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid conditional_diff(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    if (size == 0) return;\n\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; i++) {\n        dst[i] = ((uint64_t)src[i] | 0xFFFFFFFF00000000ULL);\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = ((uint64_t)src[i] | 0xFFFFFFFF00000000ULL);\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = ((uint64_t)src[i] | 0xFFFFFFFF00000000ULL);\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = ((uint64_t)src[i] | 0xFFFFFFFF00000000ULL);\n    }\n}\n```"}
{"task_id": "SimdBench_59", "completion": "```c\n#include <stdint.h>\n#include <stddef.h>\n\nvoid widening_uint(const uint32_t* src, uint64_t* dst, size_t length) {\n    for (size_t i = 0; i < length; ++i) {\n        dst[i] = ((uint64_t)src[i] | 0xFFFFFFFF00000000ULL);\n    }\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\n#include <stdint.h>\n\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        int16_t idx = index[i];\n        if (idx >= 0 && idx < length) {\n            sum += vec[idx];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\n#include <stdint.h>\n\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        int16_t idx = index[i];\n        if (idx >= 0 && idx < length) {\n            sum += vec[idx];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\n#include <stdint.h>\n\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        int16_t idx = index[i];\n        if (idx >= 0 && idx < length) {\n            sum += vec[idx];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\n#include <stddef.h>\n\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; ++i) {\n        int16_t idx = index[i];\n        if (idx >= 0 && idx < length) {\n            sum += vec[idx];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60", "completion": "```c\n#include <stdint.h>\n\ndouble indexed_sum(const double* vec, const int16_t* index, size_t length) {\n    double sum = 0.0;\n    for (size_t i = 0; i < length; i++) {\n        if (index[i] >= 0 && index[i] < length) {\n            sum += vec[index[i]];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    sum += input[(i + ki) * input_size + (j + kj)] * kernel[ki * kernel_size + kj];\n                }\n            }\n            output[i * output_size + j] = fmax(0.0, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ++ki) {\n                for (size_t kj = 0; kj < kernel_size; ++kj) {\n                    sum += input[(i + ki) * input_size + (j + kj)] * kernel[ki * kernel_size + kj];\n                }\n            }\n            output[i * output_size + j] = fmax(0.0, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    sum += input[(i + ki) * input_size + (j + kj)] * kernel[ki * kernel_size + kj];\n                }\n            }\n            output[i * output_size + j] = fmax(0.0, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\n#include <stddef.h>\n#include <algorithm>\n\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ++ki) {\n                for (size_t kj = 0; kj < kernel_size; ++kj) {\n                    sum += input[(i + ki) * input_size + (j + kj)] * kernel[ki * kernel_size + kj];\n                }\n            }\n            output[i * output_size + j] = std::max(0.0, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61", "completion": "```c\n#include <stddef.h>\n#include <math.h>\n\nvoid simple_conv2d(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    for (size_t i = 0; i < output_size; i++) {\n        for (size_t j = 0; j < output_size; j++) {\n            double sum = 0.0;\n            for (size_t ki = 0; ki < kernel_size; ki++) {\n                for (size_t kj = 0; kj < kernel_size; kj++) {\n                    sum += input[(i + ki) * input_size + (j + kj)] * kernel[ki * kernel_size + kj];\n                }\n            }\n            output[i * output_size + j] = fmax(0.0, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    if (numbers.size() < 2) return false;\n\n    std::vector<double> sorted_numbers = numbers;\n    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n\n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        if (sorted_numbers[i] - sorted_numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    std::vector<double> sorted_numbers = numbers;\n    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n    \n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        if (sorted_numbers[i] - sorted_numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    if (numbers.size() < 2) return false;\n\n    std::vector<double> sorted_numbers = numbers;\n    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n\n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        if (sorted_numbers[i] - sorted_numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    std::vector<double> sorted_numbers = numbers;\n    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n    \n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        if (sorted_numbers[i] - sorted_numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nbool has_close_elements(const std::vector<double> & numbers, double threshold) {\n    std::vector<double> sorted_numbers = numbers;\n    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n    \n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        if (sorted_numbers[i] - sorted_numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\n#include <vector>\n\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\n#include <vector>\n\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\n#include <vector>\n\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\n#include <vector>\n\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_63", "completion": "```cpp\n#include <vector>\n\nbool below_zero(std::vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <numeric>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    double mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <numeric>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    double mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <numeric>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    double mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double mad = 0.0;\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <numeric>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    double mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double mad = 0.0;\n\n    for (double num : numbers) {\n        mad += std::abs(num - mean);\n    }\n\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_64", "completion": "```cpp\n#include <vector>\n#include <numeric>\n#include <cmath>\n\ndouble mean_absolute_deviation(std::vector<double> numbers) {\n    double mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double mad = 0.0;\n\n    for (const auto& num : numbers) {\n        mad += std::abs(num - mean);\n    }\n\n    return mad / numbers.size();\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) return {};\n\n    std::vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) return {};\n\n    std::vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) return {};\n    \n    std::vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    std::vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_65", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> intersperse(std::vector<int> numbers, int delimeter) {\n    if (numbers.empty()) return {};\n    \n    std::vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    for (int16_t number : numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    if (numbers.empty()) {\n        product = 1;\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    for (int16_t number : numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    return {sum, numbers.empty() ? 1 : product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    for (int16_t number : numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    if (numbers.empty()) {\n        product = 1;\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    for (const auto& number : numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    if (numbers.empty()) {\n        product = 1;\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product(std::vector<int16_t> numbers) {\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    for (int16_t number : numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    return {sum, numbers.empty() ? 1 : product};\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int current_max = INT_MIN;\n    \n    for (int num : numbers) {\n        current_max = std::max(current_max, num);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int current_max = INT_MIN;\n    \n    for (int num : numbers) {\n        current_max = std::max(current_max, num);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int current_max = INT_MIN;\n    \n    for (int num : numbers) {\n        current_max = std::max(current_max, num);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int current_max = INT_MIN;\n    \n    for (int num : numbers) {\n        current_max = std::max(current_max, num);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_67", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int current_max = INT_MIN;\n    \n    for (int num : numbers) {\n        current_max = std::max(current_max, num);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\n#include <string>\n\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\n#include <string>\n\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\n#include <string>\n\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\n#include <string>\n\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_68", "completion": "```cpp\n#include <string>\n\nstd::string string_xor(std::string a, std::string b) {\n    std::string result;\n    for (size_t i = 0; i < a.size(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <optional>\n\nstd::optional<std::string> longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    \n    std::string longestString = strings[0];\n    for (const auto& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    return longestString;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <optional>\n\nstd::optional<std::string> longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    \n    std::string longest_str = strings[0];\n    for (const auto& str : strings) {\n        if (str.length() > longest_str.length()) {\n            longest_str = str;\n        }\n    }\n    return longest_str;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <optional>\n\nstd::optional<std::string> longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    \n    std::string longestStr = strings[0];\n    \n    for (const auto& str : strings) {\n        if (str.length() > longestStr.length()) {\n            longestStr = str;\n        }\n    }\n    \n    return longestStr;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <optional>\n\nstd::optional<std::string> longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    \n    std::string longestString = strings[0];\n    for (const auto& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    return longestString;\n}\n```"}
{"task_id": "SimdBench_69", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <optional>\n\nstd::optional<std::string> longest(const std::vector<std::string> & strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    \n    std::string longestString = strings[0];\n    \n    for (const auto& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    \n    return longestString;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\n#include <stdint.h>\n\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\n#include <stdint.h>\n\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\n#include <stdint.h>\n\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\n#include <stdint.h>\n\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70", "completion": "```c\n#include <stdint.h>\n\nuint64_t greatest_common_divisor(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    std::pair<float, float> closest_pair;\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i - 1], numbers[i]};\n        }\n    }\n    \n    return closest_pair;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    std::pair<float, float> closest_pair;\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i - 1], numbers[i]};\n        }\n    }\n\n    return closest_pair;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <limits>\n#include <utility>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    std::pair<float, float> closest_pair;\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i - 1], numbers[i]};\n        }\n    }\n\n    return closest_pair;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    std::pair<float, float> closest_pair;\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i - 1], numbers[i]};\n        }\n    }\n\n    return closest_pair;\n}\n```"}
{"task_id": "SimdBench_71", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::pair<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    std::pair<float, float> closest_pair;\n\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n\n    return closest_pair;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    \n    std::vector<float> rescaled;\n    for (float num : numbers) {\n        rescaled.push_back((num - min_val) / (max_val - min_val));\n    }\n    \n    return rescaled;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled;\n\n    for (float num : numbers) {\n        rescaled.push_back((num - min_val) / (max_val - min_val));\n    }\n\n    return rescaled;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    \n    std::vector<float> rescaled;\n    for (float num : numbers) {\n        rescaled.push_back((num - min_val) / (max_val - min_val));\n    }\n    \n    return rescaled;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled;\n\n    for (float num : numbers) {\n        rescaled.push_back((num - min_val) / (max_val - min_val));\n    }\n\n    return rescaled;\n}\n```"}
{"task_id": "SimdBench_72", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled;\n\n    for (float num : numbers) {\n        rescaled.push_back((num - min_val) / (max_val - min_val));\n    }\n\n    return rescaled;\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```c\n#include <stdint.h>\n\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // In case n is 1\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```c\n#include <stdint.h>\n\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // In case n is 1\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```c\n#include <stdint.h>\n\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // In case n is 1\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```c\n#include <stdint.h>\n\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // In case n is 1, the largest divisor is 1\n}\n```"}
{"task_id": "SimdBench_73", "completion": "```c\n#include <stdint.h>\n\nuint64_t largest_divisor(uint64_t n) {\n    for (uint64_t i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // In case n is 1\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_75", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> get_positive(const std::vector<float> & l) {\n    std::vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\n#include <cmath>\n\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\n#include <cmath>\n\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\n#include <cmath>\n\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\n#include <cstdint>\n\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_76", "completion": "```cpp\n#include <cmath>\n\nbool is_prime(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int64_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s) {\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    \n    if (!hasLetter) {\n        return std::string(s.rbegin(), s.rend());\n    }\n    \n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s) {\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    \n    if (!hasLetter) {\n        return std::string(s.rbegin(), s.rend());\n    }\n    \n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s) {\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    \n    if (!hasLetter) {\n        return std::string(s.rbegin(), s.rend());\n    }\n    \n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s) {\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (!hasLetter) {\n        return std::string(s.rbegin(), s.rend());\n    }\n\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string & s) {\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    \n    if (!hasLetter) {\n        return std::string(s.rbegin(), s.rend());\n    }\n    \n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                result += toupper(c);\n            } else {\n                result += tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_thirds;\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            sorted_thirds.push_back(l[i]);\n        }\n    }\n    \n    std::sort(sorted_thirds.begin(), sorted_thirds.end());\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            l[i] = sorted_thirds[i / 3];\n        }\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_third;\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            sorted_third.push_back(l[i]);\n        }\n    }\n    \n    std::sort(sorted_third.begin(), sorted_third.end());\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            l[i] = sorted_third.front();\n            sorted_third.erase(sorted_third.begin());\n        }\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_thirds;\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            sorted_thirds.push_back(l[i]);\n        }\n    }\n    \n    std::sort(sorted_thirds.begin(), sorted_thirds.end());\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            l[i] = sorted_thirds[i / 3];\n        }\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_thirds;\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            sorted_thirds.push_back(l[i]);\n        }\n    }\n    \n    std::sort(sorted_thirds.begin(), sorted_thirds.end());\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            l[i] = sorted_thirds.front();\n            sorted_thirds.erase(sorted_thirds.begin());\n        }\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_78", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_thirds;\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            sorted_thirds.push_back(l[i]);\n        }\n    }\n    \n    std::sort(sorted_thirds.begin(), sorted_thirds.end());\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            l[i] = sorted_thirds[i / 3];\n        }\n    }\n    \n    return l;\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nfloat max_element(std::vector<float> l) {\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nfloat max_element(std::vector<float> l) {\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nfloat max_element(std::vector<float> l) {\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nfloat max_element(std::vector<float> l) {\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_79", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nfloat max_element(std::vector<float> l) {\n    return *std::max_element(l.begin(), l.end());\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint count_digit_seven(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            count++;\n        }\n        num /= 10;\n    }\n    return count;\n}\n\nint fizz_buzz(int n) {\n    int total_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            total_count += count_digit_seven(i);\n        }\n    }\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint count_digit_seven(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            count++;\n        }\n        num /= 10;\n    }\n    return count;\n}\n\nint fizz_buzz(int n) {\n    int total_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            total_count += count_digit_seven(i);\n        }\n    }\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint count_digit_seven(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            count++;\n        }\n        num /= 10;\n    }\n    return count;\n}\n\nint fizz_buzz(int n) {\n    int total_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            total_count += count_digit_seven(i);\n        }\n    }\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint count_digit_seven(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            count++;\n        }\n        num /= 10;\n    }\n    return count;\n}\n\nint fizz_buzz(int n) {\n    int total_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            total_count += count_digit_seven(i);\n        }\n    }\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_80", "completion": "```c\nint count_digit_seven(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            count++;\n        }\n        num /= 10;\n    }\n    return count;\n}\n\nint fizz_buzz(int n) {\n    int total_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            total_count += count_digit_seven(i);\n        }\n    }\n    return total_count;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    for (size_t i = 0; i < even_indices.size(); ++i) {\n        l[i * 2] = even_indices[i];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    for (size_t i = 0; i < even_indices.size(); ++i) {\n        l[i * 2] = even_indices[i];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        l[i] = even_indices[i / 2];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        l[i] = even_indices[i / 2];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even(std::vector<float> l) {\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    for (size_t i = 0; i < l.size(); i += 2) {\n        l[i] = even_indices[i / 2];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nbool triples_sum_to_zero(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (size_t i = 0; i < l.size(); ++i) {\n        int target = -l[i];\n        size_t left = i + 1, right = l.size() - 1;\n        while (left < right) {\n            int sum = l[left] + l[right];\n            if (sum == target) {\n                return true;\n            } else if (sum < target) {\n                ++left;\n            } else {\n                --right;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nbool triples_sum_to_zero(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (size_t i = 0; i < l.size(); ++i) {\n        int target = -l[i];\n        size_t left = i + 1, right = l.size() - 1;\n        while (left < right) {\n            int sum = l[left] + l[right];\n            if (sum == target) {\n                return true;\n            } else if (sum < target) {\n                ++left;\n            } else {\n                --right;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nbool triples_sum_to_zero(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (size_t i = 0; i < l.size(); ++i) {\n        int target = -l[i];\n        size_t left = i + 1, right = l.size() - 1;\n        while (left < right) {\n            int sum = l[left] + l[right];\n            if (sum == target) {\n                return true;\n            } else if (sum < target) {\n                ++left;\n            } else {\n                --right;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nbool triples_sum_to_zero(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i > 0 && l[i] == l[i - 1]) continue; // Skip duplicates\n        int left = i + 1, right = l.size() - 1;\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                ++left;\n            } else {\n                --right;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool triples_sum_to_zero(std::vector<int> l) {\n    int n = l.size();\n    for (int i = 0; i < n - 2; i++) {\n        std::unordered_set<int> s;\n        for (int j = i + 1; j < n; j++) {\n            int x = -(l[i] + l[j]);\n            if (s.find(x) != s.end()) {\n                return true;\n            }\n            s.insert(l[j]);\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> incr_list(std::vector<int> l) {\n    for (int& num : l) {\n        num += 1;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> incr_list(std::vector<int> l) {\n    for (int& num : l) {\n        num += 1;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> incr_list(std::vector<int> l) {\n    for (auto& num : l) {\n        num += 1;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> incr_list(std::vector<int> l) {\n    for (auto& num : l) {\n        num += 1;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_83", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> incr_list(std::vector<int> l) {\n    for (auto& num : l) {\n        num += 1;\n    }\n    return l;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool pairs_sum_to_zero(std::vector<int> l) {\n    std::unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\n#include <string>\n\nstd::string change_base(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    std::string result;\n    do {\n        result.insert(result.begin(), '0' + (x % base));\n        x /= base;\n    } while (x > 0);\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\n#include <string>\n\nstd::string change_base(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    std::string result;\n    do {\n        result.insert(result.begin(), '0' + (x % base));\n        x /= base;\n    } while (x > 0);\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\n#include <string>\n\nstd::string change_base(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    std::string result;\n    do {\n        result.insert(result.begin(), '0' + (x % base));\n        x /= base;\n    } while (x > 0);\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\n#include <string>\n\nstd::string change_base(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    std::string result;\n    do {\n        result.insert(result.begin(), '0' + (x % base));\n        x /= base;\n    } while (x > 0);\n    return result;\n}\n```"}
{"task_id": "SimdBench_85", "completion": "```cpp\n#include <string>\n#include <algorithm>\n\nstd::string change_base(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    std::string result;\n    do {\n        result += std::to_string(x % base);\n        x /= base;\n    } while (x > 0);\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\n#include <string>\n\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.size() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\n#include <string>\n\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\n#include <string>\n\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\n#include <string>\n\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_86", "completion": "```cpp\n#include <string>\n\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\n#include <string>\n\nstd::string decode_shift(std::string s) {\n    std::string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\n#include <string>\n\nstd::string decode_shift(std::string s) {\n    std::string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\n#include <string>\n\nstd::string decode_shift(std::string s) {\n    std::string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\n#include <string>\n\nstd::string decode_shift(std::string s) {\n    std::string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_87", "completion": "```cpp\n#include <string>\n\nstd::string encode_shift(std::string s) {\n    std::string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n\nstd::string decode_shift(std::string s) {\n    std::string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\n#include <vector>\n\nbool below_threshold(std::vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\n#include <vector>\n\nbool below_threshold(std::vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\n#include <vector>\n\nbool below_threshold(std::vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\n#include <vector>\n\nbool below_threshold(std::vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88", "completion": "```cpp\n#include <vector>\n\nbool below_threshold(std::vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\n#include <string>\n\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89", "completion": "```cpp\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\n#include <string>\n\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\n#include <string>\n\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\n#include <string>\n\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\n#include <string>\n\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90", "completion": "```cpp\n#include <string>\n\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> derivative(std::vector<float> xs) {\n    std::vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> derivative(std::vector<float> xs) {\n    std::vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> derivative(std::vector<float> xs) {\n    std::vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> derivative(std::vector<float> xs) {\n    std::vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_91", "completion": "```cpp\n#include <vector>\n\nstd::vector<float> derivative(std::vector<float> xs) {\n    std::vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nint vowels_count(std::string s) {\n    int count = 0;\n    int length = s.length();\n    \n    for (int i = 0; i < length; ++i) {\n        char ch = tolower(s[i]);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n        }\n    }\n    \n    if (length > 0 && tolower(s[length - 1]) == 'y') {\n        count++;\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nint vowels_count(std::string s) {\n    int count = 0;\n    int length = s.length();\n    \n    for (int i = 0; i < length; ++i) {\n        char ch = std::tolower(s[i]);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n        }\n    }\n    \n    if (length > 0 && std::tolower(s[length - 1]) == 'y') {\n        count++;\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nint vowels_count(std::string s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); ++i) {\n        char ch = tolower(s[i]);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || (ch == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nint vowels_count(std::string s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); ++i) {\n        char ch = tolower(s[i]);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || (ch == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_92", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nint vowels_count(std::string s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); ++i) {\n        char ch = tolower(s[i]);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || (ch == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\n#include <string>\n\nint digitSum(std::string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\n#include <string>\n\nint digitSum(std::string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\n#include <string>\n\nint digitSum(std::string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\n#include <string>\n\nint digitSum(std::string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93", "completion": "```cpp\n#include <string>\n\nint digitSum(std::string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> pluck(std::vector<int> arr) {\n    int smallest_even = std::numeric_limits<int>::max();\n    int index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n            index = i;\n        }\n    }\n\n    if (index == -1) {\n        return {};\n    }\n\n    return {smallest_even, index};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> pluck(std::vector<int> arr) {\n    int smallest_even = std::numeric_limits<int>::max();\n    int index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n            index = i;\n        }\n    }\n\n    if (index == -1) {\n        return {};\n    }\n\n    return {smallest_even, index};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> pluck(std::vector<int> arr) {\n    int smallest_even = std::numeric_limits<int>::max();\n    int index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n            index = i;\n        }\n    }\n\n    if (index == -1) {\n        return {};\n    }\n\n    return {smallest_even, index};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> pluck(std::vector<int> arr) {\n    int smallest_even = std::numeric_limits<int>::max();\n    int index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n            index = i;\n        }\n    }\n\n    if (index == -1) {\n        return {};\n    }\n\n    return {smallest_even, index};\n}\n```"}
{"task_id": "SimdBench_94", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> pluck(std::vector<int> arr) {\n    int smallest_even = std::numeric_limits<int>::max();\n    int index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n            index = i;\n        }\n    }\n\n    if (index == -1) {\n        return {};\n    }\n\n    return {smallest_even, index};\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> frequency;\n    \n    for (int num : lst) {\n        frequency[num]++;\n    }\n    \n    int result = -1;\n    \n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (num <= freq) {\n            result = std::max(result, num);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> frequency;\n    \n    for (int num : lst) {\n        frequency[num]++;\n    }\n    \n    int result = -1;\n    \n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (num <= freq) {\n            result = std::max(result, num);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> frequency;\n    \n    for (int num : lst) {\n        frequency[num]++;\n    }\n    \n    int result = -1;\n    \n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (num <= freq) {\n            result = std::max(result, num);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> frequency;\n    \n    for (int num : lst) {\n        frequency[num]++;\n    }\n    \n    int result = -1;\n    \n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (num <= freq) {\n            result = std::max(result, num);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_95", "completion": "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint search(std::vector<int> lst) {\n    std::unordered_map<int, int> frequency;\n    \n    for (int num : lst) {\n        frequency[num]++;\n    }\n    \n    int result = -1;\n    \n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (num <= freq) {\n            result = std::max(result, num);\n        }\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\n#include <vector>\n#include <numeric>\n\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = std::accumulate(q.begin(), q.end(), 0);\n    bool is_balanced = std::equal(q.begin(), q.begin() + q.size() / 2, q.rbegin());\n    return is_balanced && (sum <= w);\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\n#include <vector>\n#include <numeric>\n\nbool is_palindromic(const std::vector<int>& q) {\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool will_it_fly(std::vector<int> q, int w) {\n    if (q.empty()) return false;\n    int sum = std::accumulate(q.begin(), q.end(), 0);\n    return is_palindromic(q) && sum <= w;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\n#include <vector>\n#include <numeric>\n\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = std::accumulate(q.begin(), q.end(), 0);\n    bool is_palindrome = std::equal(q.begin(), q.begin() + q.size() / 2, q.rbegin());\n    return is_palindrome && sum <= w;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\n#include <vector>\n#include <numeric>\n\nbool will_it_fly(std::vector<int> q, int w) {\n    int sum = std::accumulate(q.begin(), q.end(), 0);\n    bool is_palindrome = std::equal(q.begin(), q.begin() + q.size() / 2, q.rbegin());\n\n    return is_palindrome && sum <= w;\n}\n```"}
{"task_id": "SimdBench_96", "completion": "```cpp\n#include <vector>\n#include <numeric>\n\nbool is_palindromic(const std::vector<int>& q) {\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool will_it_fly(std::vector<int> q, int w) {\n    if (q.empty()) return false;\n    int sum = std::accumulate(q.begin(), q.end(), 0);\n    return is_palindromic(q) && sum <= w;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\n#include <vector>\n\nint smallest_change(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    \n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\n#include <vector>\n\nint smallest_change(std::vector<int> arr) {\n    int changes = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n\nint smallest_change(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    \n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    \n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\n#include <vector>\n\nint smallest_change(std::vector<int> arr) {\n    int changes = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97", "completion": "```cpp\n#include <vector>\n\nint smallest_change(std::vector<int> arr) {\n    int changes = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int sum1 = 0, sum2 = 0;\n\n    for (const auto & str : lst1) {\n        sum1 += str.size();\n    }\n    for (const auto & str : lst2) {\n        sum2 += str.size();\n    }\n\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int total1 = 0, total2 = 0;\n\n    for (const auto & str : lst1) {\n        total1 += str.size();\n    }\n    for (const auto & str : lst2) {\n        total2 += str.size();\n    }\n\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int sum1 = 0, sum2 = 0;\n\n    for (const auto & str : lst1) {\n        sum1 += str.size();\n    }\n    for (const auto & str : lst2) {\n        sum2 += str.size();\n    }\n\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <numeric>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int total1 = std::accumulate(lst1.begin(), lst1.end(), 0, [](int sum, const std::string &s) { return sum + s.size(); });\n    int total2 = std::accumulate(lst2.begin(), lst2.end(), 0, [](int sum, const std::string &s) { return sum + s.size(); });\n\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    int sum1 = 0, sum2 = 0;\n\n    for (const auto & str : lst1) {\n        sum1 += str.size();\n    }\n    for (const auto & str : lst2) {\n        sum2 += str.size();\n    }\n\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\n#include <cmath>\n\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (n <= 1) return false;\n    uint64_t power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\n#include <cmath>\n\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (n <= 1) return false;\n    uint64_t power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\n#include <cmath>\n#include <cstdint>\n\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (n == 1) return x == 1;\n    if (x < 1 || n < 1) return false;\n    \n    double power = log(x) / log(n);\n    return power == static_cast<int>(power);\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\n#include <cmath>\n\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (n == 1) return x == 1;\n    if (x < 1 || n < 1) return false;\n    \n    double power = log(x) / log(n);\n    return power == static_cast<int>(power);\n}\n```"}
{"task_id": "SimdBench_99", "completion": "```cpp\n#include <cmath>\n\nbool is_simple_power(uint64_t x, uint64_t n) {\n    if (n <= 1) return false;\n    uint64_t power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    \n    for (char digit : num) {\n        if (prime_hex_digits.count(digit)) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    \n    for (char digit : num) {\n        if (prime_hex_digits.find(digit) != prime_hex_digits.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nint hex_key(const std::string & num) {\n    std::unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    for (char digit : num) {\n        if (prime_hex_digits.count(digit)) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n\nint hex_key(const std::string & num) {\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_100", "completion": "```cpp\n#include <string>\n\nint hex_key(const std::string & num) {\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\n#include <string>\n\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) return false;\n    for (size_t i = 0; i <= s.length() - 3; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\n#include <string>\n\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) return false;\n    for (size_t i = 0; i <= s.length() - 3; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\n#include <string>\n#include <unordered_set>\n\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) return false;\n    \n    for (size_t i = 0; i <= s.length() - 3; ++i) {\n        std::unordered_set<char> distinct_chars;\n        distinct_chars.insert(s[i]);\n        distinct_chars.insert(s[i + 1]);\n        distinct_chars.insert(s[i + 2]);\n        \n        if (distinct_chars.size() < 3) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\n#include <string>\n\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) return false;\n    for (size_t i = 0; i <= s.length() - 3; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_101", "completion": "```cpp\n#include <string>\n\nbool is_happy(const std::string & s) {\n    if (s.length() < 3) return false;\n    for (size_t i = 0; i <= s.length() - 3; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\n#include <string>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(const std::string & str) {\n    return is_prime(str.length());\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\n#include <string>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(const std::string & str) {\n    return is_prime(str.length());\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\n#include <string>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(const std::string & str) {\n    return is_prime(str.length());\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\n#include <string>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(const std::string & str) {\n    return is_prime(str.length());\n}\n```"}
{"task_id": "SimdBench_102", "completion": "```cpp\n#include <string>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(const std::string & str) {\n    return is_prime(str.length());\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\n#include <string>\n#include <bitset>\n\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return std::bitset<64>(sum).to_string().substr(std::bitset<64>(sum).to_string().find('1'));\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\n#include <string>\n#include <bitset>\n\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return std::bitset<64>(sum).to_string().substr(std::bitset<64>(sum).to_string().find('1'));\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\n#include <string>\n#include <bitset>\n\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return std::bitset<64>(sum).to_string().substr(std::bitset<64>(sum).to_string().find('1'));\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\n#include <string>\n#include <bitset>\n\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return std::bitset<64>(sum).to_string().substr(std::bitset<64>(sum).to_string().find('1'));\n}\n```"}
{"task_id": "SimdBench_103", "completion": "```cpp\n#include <string>\n\nstd::string solve(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    std::string binary;\n    while (sum > 0) {\n        binary = std::to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    \n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\n#include <vector>\n\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\n#include <vector>\n\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\n#include <vector>\n\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\n#include <vector>\n\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104", "completion": "```cpp\n#include <vector>\n\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\n#include <string>\n\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (base + (c - base + 4) % 26);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\n#include <string>\n\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (base + (c - base + 4) % 26);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\n#include <string>\n\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (base + (c - base + 4) % 26);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\n#include <string>\n\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (c - base + 4) % 26 + base;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_105", "completion": "```cpp\n#include <string>\n\nstd::string encrypt(const std::string & s) {\n    std::string result;\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (base + (c - base + 4) % 26);\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nstd::string encode(const std::string & message) {\n    std::string encoded;\n    for (char ch : message) {\n        if (std::isalpha(ch)) {\n            // Swap case\n            if (std::islower(ch)) {\n                ch = std::toupper(ch);\n            } else {\n                ch = std::tolower(ch);\n            }\n            // Replace vowels\n            switch (std::tolower(ch)) {\n                case 'a': ch = 'c'; break;\n                case 'e': ch = 'g'; break;\n                case 'i': ch = 'k'; break;\n                case 'o': ch = 'q'; break;\n                case 'u': ch = 'w'; break;\n            }\n        }\n        encoded += ch;\n    }\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nstd::string encode(const std::string & message) {\n    std::string encoded;\n    for (char ch : message) {\n        if (std::isalpha(ch)) {\n            // Swap case\n            if (std::islower(ch)) {\n                ch = std::toupper(ch);\n            } else {\n                ch = std::tolower(ch);\n            }\n            // Replace vowels\n            switch (std::tolower(ch)) {\n                case 'a': ch = 'c'; break;\n                case 'e': ch = 'g'; break;\n                case 'i': ch = 'k'; break;\n                case 'o': ch = 'q'; break;\n                case 'u': ch = 'w'; break;\n            }\n        }\n        encoded += ch;\n    }\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nstd::string encode(const std::string & message) {\n    std::string encoded;\n    for (char ch : message) {\n        if (std::isalpha(ch)) {\n            // Swap case\n            if (std::islower(ch)) {\n                ch = std::toupper(ch);\n            } else {\n                ch = std::tolower(ch);\n            }\n            // Replace vowels\n            switch (std::tolower(ch)) {\n                case 'a': ch = 'c'; break;\n                case 'e': ch = 'g'; break;\n                case 'i': ch = 'k'; break;\n                case 'o': ch = 'q'; break;\n                case 'u': ch = 'w'; break;\n            }\n        }\n        encoded += ch;\n    }\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nstd::string encode(const std::string & message) {\n    std::string encoded;\n    for (char ch : message) {\n        if (std::isalpha(ch)) {\n            // Swap case\n            char swapped = std::isupper(ch) ? std::tolower(ch) : std::toupper(ch);\n            // Replace vowels\n            switch (std::tolower(swapped)) {\n                case 'a': swapped = 'c'; break;\n                case 'e': swapped = 'g'; break;\n                case 'i': swapped = 'k'; break;\n                case 'o': swapped = 'q'; break;\n                case 'u': swapped = 'w'; break;\n                default: break;\n            }\n            encoded += swapped;\n        } else {\n            encoded += ch; // Non-letter characters remain unchanged\n        }\n    }\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106", "completion": "```cpp\n#include <string>\n#include <cctype>\n\nstd::string encode(const std::string & message) {\n    std::string encoded;\n    for (char ch : message) {\n        if (std::isalpha(ch)) {\n            // Swap case\n            if (std::islower(ch)) {\n                ch = std::toupper(ch);\n            } else {\n                ch = std::tolower(ch);\n            }\n            // Replace vowels\n            switch (std::tolower(ch)) {\n                case 'a': ch = 'c'; break;\n                case 'e': ch = 'g'; break;\n                case 'i': ch = 'k'; break;\n                case 'o': ch = 'q'; break;\n                case 'u': ch = 'w'; break;\n            }\n        }\n        encoded += ch;\n    }\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        if (!key.empty()) {\n            if (std::islower(key[0])) {\n                all_upper = false;\n            } else if (std::isupper(key[0])) {\n                all_lower = false;\n            } else {\n                all_lower = false;\n                all_upper = false;\n            }\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        if (!key.empty()) {\n            if (std::islower(key[0])) {\n                all_upper = false;\n            } else if (std::isupper(key[0])) {\n                all_lower = false;\n            } else {\n                all_lower = false;\n                all_upper = false;\n            }\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        if (!key.empty()) {\n            if (std::islower(key[0])) {\n                all_upper = false;\n            } else if (std::isupper(key[0])) {\n                all_lower = false;\n            } else {\n                all_lower = false;\n                all_upper = false;\n            }\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        if (!key.empty()) {\n            if (std::islower(key[0])) {\n                all_upper = false;\n            } else if (std::isupper(key[0])) {\n                all_lower = false;\n            } else {\n                all_lower = false;\n                all_upper = false;\n            }\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107", "completion": "```cpp\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        if (!key.empty()) {\n            if (std::islower(key[0])) {\n                all_upper = false;\n            } else if (std::isupper(key[0])) {\n                all_lower = false;\n            } else {\n                all_lower = false;\n                all_upper = false;\n            }\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> count_up_to(int n) {\n    std::vector<int> primes;\n    for (int num = 2; num < n; ++num) {\n        bool is_prime = true;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> count_up_to(int n) {\n    std::vector<int> primes;\n    for (int num = 2; num < n; ++num) {\n        bool is_prime = true;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> count_up_to(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    for (int num = 2; num < n; ++num) {\n        bool is_prime = true;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> count_up_to(int n) {\n    std::vector<int> primes;\n    for (int num = 2; num < n; ++num) {\n        bool is_prime = true;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> count_up_to(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    for (int num = 2; num < n; ++num) {\n        bool is_prime = true;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\n#include <string>\n\nint count_upper(const std::string & s) {\n    int count = 0;\n    for (size_t i = 0; i < s.size(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\n#include <string>\n\nint count_upper(const std::string & s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\n#include <string>\n\nint count_upper(const std::string & s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); i += 2) {\n        if (s[i] >= 'A' && s[i] <= 'Z' && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\n#include <string>\n\nint count_upper(const std::string & s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_109", "completion": "```cpp\n#include <string>\n\nint count_upper(const std::string & s) {\n    int count = 0;\n    for (size_t i = 0; i < s.size(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> result;\n    int stones = n;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(stones);\n        stones += (stones % 2 == 0) ? 2 : 2; // Increment by 2 for both odd and even\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones;\n    int current_stones = n;\n    \n    for (int i = 0; i < n; ++i) {\n        stones.push_back(current_stones);\n        current_stones += (n % 2 == 0) ? 2 : 2; // Increment by 2 for both odd and even\n        if (i == 0) {\n            current_stones += (n % 2 == 0) ? 1 : 0; // Adjust for first level if n is even\n        }\n    }\n    \n    return stones;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones;\n    int current_stones = n;\n    \n    for (int i = 0; i < n; ++i) {\n        stones.push_back(current_stones);\n        current_stones += (n % 2 == 0) ? 2 : 2; // Increment by 2 for both odd and even n\n        if (i == 0) {\n            current_stones += (n % 2 == 0) ? 1 : 0; // Adjust for the first level if n is even\n        }\n    }\n    \n    return stones;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones;\n    int current_stones = n;\n    for (int i = 0; i < n; ++i) {\n        stones.push_back(current_stones);\n        current_stones += (n % 2 == 0) ? 2 : 2; // Increment by 2 for both odd and even\n        if (i == 0) {\n            current_stones += (n % 2 == 0) ? 1 : 0; // Adjust the first increment based on n's parity\n        }\n    }\n    return stones;\n}\n```"}
{"task_id": "SimdBench_110", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones;\n    int current_stones = n;\n    \n    for (int i = 0; i < n; ++i) {\n        stones.push_back(current_stones);\n        current_stones += (n % 2 == 0) ? 2 : 2; // Increment by 2 for both odd and even\n        current_stones += (i % 2 == 0) ? 2 : 0; // Adjust for odd/even levels\n    }\n    \n    return stones;\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    int64_t sum = (m - n + 1) * (n + m) / 2;\n    int64_t count = m - n + 1;\n    int64_t avg = sum / count;\n    return std::to_string(avg);\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    int64_t sum = (m - n + 1) * (n + m) / 2;\n    int64_t count = m - n + 1;\n    int64_t avg = sum / count;\n    return std::to_string(avg);\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    int64_t sum = (m - n + 1) * (n + m) / 2;\n    int64_t count = m - n + 1;\n    int64_t avg = sum / count;\n    return std::to_string(avg);\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    int64_t sum = (m - n + 1) * (n + m) / 2;\n    int64_t count = m - n + 1;\n    int64_t avg = sum / count;\n    return std::to_string(avg);\n}\n```"}
{"task_id": "SimdBench_111", "completion": "```cpp\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n    int64_t sum = (m - n + 1) * (n + m) / 2;\n    int64_t count = m - n + 1;\n    int64_t avg = sum / count;\n    return std::to_string(avg);\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial = (factorial * j) % 10000;\n            }\n            result[i - 1] = factorial;\n        } else {\n            result[i - 1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial = (factorial * j) % 10000;\n            }\n            result[i - 1] = factorial;\n        } else {\n            result[i - 1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial = (factorial * j) % 10000;\n            }\n            result[i - 1] = factorial;\n        } else {\n            result[i - 1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial = (factorial * j) % 10000;\n            }\n            result[i - 1] = factorial;\n        } else {\n            result[i - 1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_112", "completion": "```cpp\n#include <vector>\n\nstd::vector<int> func(int n) {\n    std::vector<int> result(n);\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial = (factorial * j) % 10000;\n            }\n            result[i - 1] = factorial;\n        } else {\n            result[i - 1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\n#include <vector>\n#include <string>\n\nbool is_palindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string rev_str = std::string(str.rbegin(), str.rend());\n    return str == rev_str;\n}\n\nstd::vector<int> even_odd_palindrome(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\n#include <vector>\n#include <string>\n\nbool is_palindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string rev_str = std::string(str.rbegin(), str.rend());\n    return str == rev_str;\n}\n\nstd::vector<int> even_odd_palindrome(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\n#include <vector>\n#include <string>\n\nbool is_palindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string rev_str = std::string(str.rbegin(), str.rend());\n    return str == rev_str;\n}\n\nstd::vector<int> even_odd_palindrome(int n) {\n    int even_count = 0, odd_count = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\n#include <vector>\n#include <string>\n\nbool is_palindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string rev_str = std::string(str.rbegin(), str.rend());\n    return str == rev_str;\n}\n\nstd::vector<int> even_odd_palindrome(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113", "completion": "```cpp\n#include <vector>\n#include <string>\n\nbool is_palindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string rev_str = std::string(str.rbegin(), str.rend());\n    return str == rev_str;\n}\n\nstd::vector<int> even_odd_palindrome(int n) {\n    int even_count = 0, odd_count = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\n#include <vector>\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = std::abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    return is_negative ? -sum : sum;\n}\n\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\n#include <vector>\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = std::abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    return is_negative ? -sum : sum;\n}\n\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\n#include <vector>\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = std::abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    return is_negative ? -sum : sum;\n}\n\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\n#include <vector>\n#include <cmath>\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(std::abs(num)) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_114", "completion": "```cpp\n#include <vector>\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = std::abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    return is_negative ? -sum : sum;\n}\n\nint count_nums(std::vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\n#include <vector>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int count = 0;\n    int n = arr.size();\n    \n    for (int i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n    \n    return count <= 1;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\n#include <vector>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int count = 0;\n    int n = arr.size();\n    \n    for (int i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n    \n    return count <= 1;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\n#include <vector>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int count = 0;\n    int n = arr.size();\n    \n    for (int i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n    \n    return count <= 1;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\n#include <vector>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int count = 0;\n    int n = arr.size();\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n\n    return count <= 1;\n}\n```"}
{"task_id": "SimdBench_115", "completion": "```cpp\n#include <vector>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int count = 0;\n    int n = arr.size();\n    \n    for (int i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n    \n    return count <= 1;\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    bool has_even_in_lst2 = false;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            has_even_in_lst2 = true;\n            break;\n        }\n    }\n    \n    for (int num : lst1) {\n        if (num % 2 == 0) continue;\n        if (!has_even_in_lst2) return \"NO\";\n    }\n    \n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    bool has_even_in_lst2 = false;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            has_even_in_lst2 = true;\n            break;\n        }\n    }\n    \n    for (int num : lst1) {\n        if (num % 2 == 0) continue;\n        if (!has_even_in_lst2) return \"NO\";\n    }\n    \n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    bool has_even_in_lst2 = false;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            has_even_in_lst2 = true;\n            break;\n        }\n    }\n    \n    for (int num : lst1) {\n        if (num % 2 == 0) continue;\n        if (!has_even_in_lst2) return \"NO\";\n    }\n    \n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    bool has_even_in_lst2 = false;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            has_even_in_lst2 = true;\n            break;\n        }\n    }\n    \n    for (int num : lst1) {\n        if (num % 2 == 0) continue;\n        if (!has_even_in_lst2) return \"NO\";\n    }\n    \n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_116", "completion": "```cpp\n#include <vector>\n#include <string>\n\nstd::string myexchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    bool has_even_in_lst2 = false;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            has_even_in_lst2 = true;\n            break;\n        }\n    }\n    \n    for (int num : lst1) {\n        if (num % 2 == 0) continue;\n        if (!has_even_in_lst2) return \"NO\";\n    }\n    \n    return \"YES\";\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <unordered_set>\n\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    for (const auto & str : lst) {\n        int odd_count = 0;\n        for (char ch : str) {\n            if ((ch - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(odd_count) + \n                         \"n the str\" + std::to_string(odd_count) + \n                         \"ng \" + std::to_string(odd_count) + \n                         \" of the \" + std::to_string(odd_count) + \"nput.\");\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    \n    for (const auto& str : lst) {\n        int odd_count = 0;\n        for (char ch : str) {\n            if ((ch - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        std::string output = \"the number of odd elements \" + std::to_string(odd_count) +\n                             \"n the str\" + std::to_string(odd_count) +\n                             \"ng \" + std::to_string(odd_count) + \n                             \" of the \" + std::to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    for (const auto& str : lst) {\n        int odd_count = std::count_if(str.begin(), str.end(), [](char c) {\n            return (c - '0') % 2 != 0;\n        });\n        std::string output = \"the number of odd elements \" + std::to_string(odd_count) +\n                             \"n the str\" + std::to_string(odd_count) +\n                             \"ng \" + std::to_string(odd_count) + \" of the \" +\n                             std::to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        std::string output = \"the number of odd elements \" + std::to_string(odd_count) +\n                             \"n the str\" + std::to_string(i + 1) +\n                             \"ng \" + std::to_string(i + 1) +\n                             \" of the \" + std::to_string(i + 1) + \"nput.\";\n        result.push_back(output);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_117", "completion": "```cpp\n#include <vector>\n#include <string>\n#include <unordered_set>\n\nstd::vector<std::string> odd_count(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(odd_count) + \n                         \"n the str\" + std::to_string(i + 1) + \n                         \"ng \" + std::to_string(odd_count) + \n                         \" of the \" + std::to_string(i + 1) + \"nput.\");\n    }\n    \n    return result;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <algorithm>\n\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t min_sum = nums[0];\n    int64_t current_sum = 0;\n\n    for (const auto& num : nums) {\n        current_sum += num;\n        min_sum = std::min(min_sum, current_sum);\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <algorithm>\n\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t min_sum = nums[0];\n    int64_t current_sum = 0;\n\n    for (const auto& num : nums) {\n        current_sum += num;\n        min_sum = std::min(min_sum, current_sum);\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <cstdint>\n\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t min_sum = nums[0];\n    int64_t current_sum = 0;\n\n    for (const auto& num : nums) {\n        current_sum += num;\n        min_sum = std::min(min_sum, current_sum);\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n    \n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <algorithm>\n\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t min_sum = nums[0];\n    int64_t current_sum = 0;\n\n    for (const auto& num : nums) {\n        current_sum += num;\n        min_sum = std::min(min_sum, current_sum);\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118", "completion": "```cpp\n#include <vector>\n#include <algorithm>\n#include <cstdint>\n\nint64_t minSubArraySum(const std::vector<int64_t>& nums) {\n    int64_t min_sum = nums[0];\n    int64_t current_sum = 0;\n\n    for (const auto& num : nums) {\n        current_sum += num;\n        min_sum = std::min(min_sum, current_sum);\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\n#include <vector>\n\nint max_fill(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_water = 0;\n    \n    for (const auto& row : grid) {\n        for (int water : row) {\n            total_water += water;\n        }\n    }\n    \n    return (total_water + capacity - 1) / capacity;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\n#include <vector>\n\nint max_fill(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_water = 0;\n    \n    for (const auto& row : grid) {\n        for (int water : row) {\n            total_water += water;\n        }\n    }\n    \n    return (total_water + capacity - 1) / capacity;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\n#include <vector>\n\nint max_fill(const std::vector<std::vector<int>> &grid, int capacity) {\n    int total_water = 0;\n    \n    for (const auto &row : grid) {\n        for (int water : row) {\n            total_water += water;\n        }\n    }\n    \n    return (total_water + capacity - 1) / capacity;\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\n#include <vector>\n\nint max_fill(const std::vector<std::vector<int>> &grid, int capacity) {\n    int total_water = 0;\n    \n    for (const auto &row : grid) {\n        for (int water : row) {\n            total_water += water;\n        }\n    }\n    \n    return (total_water + capacity - 1) / capacity; // Ceiling division\n}\n```"}
{"task_id": "SimdBench_119", "completion": "```cpp\n#include <vector>\n\nint max_fill(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total_water = 0;\n\n    for (const auto& row : grid) {\n        for (int water : row) {\n            total_water += water;\n        }\n    }\n\n    return (total_water + capacity - 1) / capacity;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nint64_t solution(const std::vector<int16_t>& lst) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\n#include <vector>\n\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\n#include <vector>\n\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\n#include <vector>\n\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\n#include <vector>\n\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121", "completion": "```cpp\n#include <vector>\n\nint add_elements(std::vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool is_sorted(const std::vector<int> & lst) {\n    std::unordered_set<int> seen;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i > 0 && lst[i] <= lst[i - 1]) {\n            return false;\n        }\n        if (seen.count(lst[i]) > 0) {\n            return false;\n        }\n        seen.insert(lst[i]);\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool is_sorted(const std::vector<int> & lst) {\n    std::unordered_set<int> seen;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i > 0 && lst[i] <= lst[i - 1]) {\n            return false;\n        }\n        if (seen.count(lst[i]) > 0) {\n            return false;\n        }\n        seen.insert(lst[i]);\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool is_sorted(const std::vector<int> & lst) {\n    std::unordered_set<int> seen;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i > 0 && lst[i] <= lst[i - 1]) {\n            return false;\n        }\n        if (seen.count(lst[i]) > 0) {\n            return false;\n        }\n        seen.insert(lst[i]);\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool is_sorted(const std::vector<int> & lst) {\n    std::unordered_set<int> seen;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i > 0 && lst[i] <= lst[i - 1]) {\n            return false;\n        }\n        if (seen.count(lst[i]) > 0) {\n            return false;\n        }\n        seen.insert(lst[i]);\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_122", "completion": "```cpp\n#include <vector>\n#include <unordered_set>\n\nbool is_sorted(const std::vector<int> & lst) {\n    std::unordered_set<int> seen;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i > 0 && lst[i] <= lst[i - 1]) {\n            return false;\n        }\n        if (seen.find(lst[i]) != seen.end()) {\n            return false;\n        }\n        seen.insert(lst[i]);\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\n#include <vector>\n\nint prod_signs(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    int sum_magnitudes = 0;\n    int product_signs = 1;\n\n    for (int num : arr) {\n        if (num > 0) {\n            sum_magnitudes += num;\n        } else if (num < 0) {\n            sum_magnitudes += -num;\n            product_signs *= -1;\n        } else {\n            return 0;\n        }\n    }\n\n    return product_signs * sum_magnitudes;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\n#include <vector>\n\nint prod_signs(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    int sum_magnitudes = 0;\n    int product_sign = 1;\n\n    for (int num : arr) {\n        if (num > 0) {\n            sum_magnitudes += num;\n        } else if (num < 0) {\n            sum_magnitudes += -num;\n            product_sign *= -1;\n        } else {\n            return 0;\n        }\n    }\n\n    return product_sign * sum_magnitudes;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\n#include <vector>\n\nint prod_signs(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    int sum_magnitudes = 0;\n    int product_sign = 1;\n\n    for (int num : arr) {\n        if (num > 0) {\n            sum_magnitudes += num;\n        } else if (num < 0) {\n            sum_magnitudes += -num;\n            product_sign *= -1;\n        } else {\n            return 0;\n        }\n    }\n\n    return product_sign * sum_magnitudes;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\n#include <vector>\n\nint prod_signs(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    int sum_magnitudes = 0;\n    int sign_product = 1;\n\n    for (int num : arr) {\n        if (num > 0) {\n            sum_magnitudes += num;\n        } else if (num < 0) {\n            sum_magnitudes += -num;\n            sign_product *= -1;\n        } else {\n            return 0;\n        }\n    }\n\n    return sum_magnitudes * sign_product;\n}\n```"}
{"task_id": "SimdBench_123", "completion": "```cpp\n#include <vector>\n\nint prod_signs(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    int sum_magnitude = 0;\n    int product_sign = 1;\n\n    for (int num : arr) {\n        if (num > 0) {\n            sum_magnitude += num;\n        } else if (num < 0) {\n            sum_magnitude += -num;\n            product_sign *= -1;\n        } else {\n            return 0;\n        }\n    }\n\n    return product_sign * sum_magnitude;\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <algorithm>\n\nstd::vector<int> minPath(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> result;\n    std::vector<std::vector<std::vector<int>>> dp(N, std::vector<std::vector<int>>(N, std::vector<int>(k + 1, INT_MAX)));\n    std::priority_queue<std::tuple<std::vector<int>, int, int, int>, std::vector<std::tuple<std::vector<int>, int, int, int>>, std::greater<>> pq;\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            dp[i][j][1] = grid[i][j];\n            pq.push({{grid[i][j]}, i, j, 1});\n        }\n    }\n\n    while (!pq.empty()) {\n        auto [path, x, y, length] = pq.top();\n        pq.pop();\n\n        if (length == k) {\n            return path;\n        }\n\n        std::vector<std::pair<int, int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        for (const auto &[dx, dy] : directions) {\n            int nx = x + dx, ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                std::vector<int> newPath = path;\n                newPath.push_back(grid[nx][ny]);\n                if (newPath < dp[nx][ny]) {\n                    dp[nx][ny][length + 1] = newPath;\n                    pq.push({newPath, nx, ny, length + 1});\n                }\n            }\n        }\n    }\n\n    return result; // This line should never be reached due to the problem guarantees\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <algorithm>\n\nstd::vector<int> minPath(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> result;\n    std::vector<std::vector<std::vector<int>>> dp(N, std::vector<std::vector<int>>(N, std::vector<int>(k + 1, std::vector<int>(1e5, 0))));\n    \n    auto compare = [](const std::tuple<std::vector<int>, int, int, int> &a, const std::tuple<std::vector<int>, int, int, int> &b) {\n        return std::get<0>(a) > std::get<0>(b);\n    };\n    \n    std::priority_queue<std::tuple<std::vector<int>, int, int, int>, std::vector<std::tuple<std::vector<int>, int, int, int>>, decltype(compare)> pq(compare);\n    \n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            pq.push({{grid[i][j]}, i, j, 1});\n        }\n    }\n    \n    while (!pq.empty()) {\n        auto [path, x, y, length] = pq.top();\n        pq.pop();\n        \n        if (length == k) {\n            return path;\n        }\n        \n        std::vector<std::pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        for (const auto &[dx, dy] : directions) {\n            int nx = x + dx, ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                std::vector<int> newPath = path;\n                newPath.push_back(grid[nx][ny]);\n                pq.push({newPath, nx, ny, length + 1});\n            }\n        }\n    }\n    \n    return result; // This line should never be reached due to the problem guarantees\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <algorithm>\n\nstd::vector<int> minPath(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> result;\n    std::priority_queue<std::tuple<std::vector<int>, int, int, int>, \n                            std::vector<std::tuple<std::vector<int>, int, int, int>>, \n                            std::greater<std::tuple<std::vector<int>, int, int, int>>> pq;\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            pq.push({{grid[i][j]}, i, j});\n        }\n    }\n\n    while (!pq.empty()) {\n        auto [path, x, y] = pq.top();\n        pq.pop();\n\n        if (path.size() == k) {\n            return path;\n        }\n\n        std::vector<std::pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        for (const auto &[dx, dy] : directions) {\n            int nx = x + dx, ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                auto newPath = path;\n                newPath.push_back(grid[nx][ny]);\n                pq.push({newPath, nx, ny});\n            }\n        }\n    }\n\n    return result; // This line should never be reached due to problem constraints\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <algorithm>\n\nstd::vector<int> minPath(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> result;\n    std::vector<std::vector<std::vector<int>>> dp(N, std::vector<std::vector<int>>(N, std::vector<int>(k + 1, INT_MAX)));\n    std::priority_queue<std::tuple<std::vector<int>, int, int, int>, std::vector<std::tuple<std::vector<int>, int, int, int>>, std::greater<>> pq;\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            dp[i][j][1] = grid[i][j];\n            pq.push({{grid[i][j]}, i, j, 1});\n        }\n    }\n\n    while (!pq.empty()) {\n        auto [path, x, y, length] = pq.top();\n        pq.pop();\n\n        if (length == k) {\n            return path;\n        }\n\n        std::vector<std::pair<int, int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        for (const auto &[dx, dy] : directions) {\n            int nx = x + dx, ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                std::vector<int> newPath = path;\n                newPath.push_back(grid[nx][ny]);\n                if (newPath < dp[nx][ny]) {\n                    dp[nx][ny] = newPath;\n                    pq.push({newPath, nx, ny, length + 1});\n                }\n            }\n        }\n    }\n\n    return result; // This line should never be reached due to the problem guarantees.\n}\n```"}
{"task_id": "SimdBench_124", "completion": "```cpp\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <algorithm>\n\nstd::vector<int> minPath(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> result;\n    std::priority_queue<std::tuple<std::vector<int>, int, int, int>, \n                          std::vector<std::tuple<std::vector<int>, int, int, int>>, \n                          std::greater<std::tuple<std::vector<int>, int, int, int>>> pq;\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            pq.push({{grid[i][j]}, i, j});\n        }\n    }\n\n    while (!pq.empty()) {\n        auto [path, x, y] = pq.top();\n        pq.pop();\n\n        if (path.size() == k) {\n            return path;\n        }\n\n        std::vector<std::pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        for (const auto &[dx, dy] : directions) {\n            int newX = x + dx;\n            int newY = y + dy;\n\n            if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                std::vector<int> newPath = path;\n                newPath.push_back(grid[newX][newY]);\n                pq.push({newPath, newX, newY});\n            }\n        }\n    }\n\n    return result; // This line should never be reached due to the problem's guarantee of a unique answer.\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```c\n#include <stdint.h>\n\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    int has_odd = 0;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            has_odd = 1;\n        }\n        n /= 10;\n    }\n\n    return has_odd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```cpp\n#include <cstdint>\n\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    bool hasOdd = false;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n\n    return hasOdd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```c\n#include <stdint.h>\n\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    int has_odd = 0;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            has_odd = 1;\n        }\n        n /= 10;\n    }\n\n    return has_odd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```c\n#include <stdint.h>\n\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    int has_odd = 0;\n\n    while (n > 0) {\n        uint64_t digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            has_odd = 1;\n        }\n        n /= 10;\n    }\n\n    return has_odd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125", "completion": "```c\n#include <stdint.h>\n\nuint64_t digits(uint64_t n) {\n    uint64_t product = 1;\n    int has_odd = 0;\n\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            has_odd = 1;\n        }\n        n /= 10;\n    }\n\n    return has_odd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n#include <cstdint>\n\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num)) * static_cast<uint64_t>(std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n#include <cstdint>\n\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num)) * static_cast<uint64_t>(std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n#include <cstdint>\n\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num)) * static_cast<uint64_t>(std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n#include <cstdint>\n\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num)) * static_cast<uint64_t>(std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126", "completion": "```cpp\n#include <vector>\n#include <cmath>\n#include <cstdint>\n\nuint64_t sum_squares(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        sum += static_cast<uint64_t>(std::ceil(num)) * static_cast<uint64_t>(std::ceil(num));\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\n#include <vector>\n\nint can_arrange(const std::vector<int> & arr) {\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\n#include <vector>\n\nint can_arrange(const std::vector<int> & arr) {\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\n#include <vector>\n\nint can_arrange(const std::vector<int> & arr) {\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\n#include <vector>\n\nint can_arrange(const std::vector<int> & arr) {\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_127", "completion": "```cpp\n#include <vector>\n\nint can_arrange(const std::vector<int> & arr) {\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_negative = std::numeric_limits<int>::min();\n    int smallest_positive = std::numeric_limits<int>::max();\n    \n    for (int num : lst) {\n        if (num < 0) {\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n    \n    if (largest_negative == std::numeric_limits<int>::min()) {\n        largest_negative = 0;\n    }\n    if (smallest_positive == std::numeric_limits<int>::max()) {\n        smallest_positive = 0;\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_negative = std::numeric_limits<int>::min();\n    int smallest_positive = std::numeric_limits<int>::max();\n\n    for (int num : lst) {\n        if (num < 0 && num > largest_negative) {\n            largest_negative = num;\n        }\n        if (num > 0 && num < smallest_positive) {\n            smallest_positive = num;\n        }\n    }\n\n    if (largest_negative == std::numeric_limits<int>::min()) {\n        largest_negative = 0;\n    }\n    if (smallest_positive == std::numeric_limits<int>::max()) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_negative = std::numeric_limits<int>::min();\n    int smallest_positive = std::numeric_limits<int>::max();\n    \n    for (int num : lst) {\n        if (num < 0 && num > largest_negative) {\n            largest_negative = num;\n        }\n        if (num > 0 && num < smallest_positive) {\n            smallest_positive = num;\n        }\n    }\n    \n    if (largest_negative == std::numeric_limits<int>::min()) {\n        largest_negative = 0;\n    }\n    if (smallest_positive == std::numeric_limits<int>::max()) {\n        smallest_positive = 0;\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_negative = std::numeric_limits<int>::min();\n    int smallest_positive = std::numeric_limits<int>::max();\n    \n    for (int num : lst) {\n        if (num < 0 && num > largest_negative) {\n            largest_negative = num;\n        }\n        if (num > 0 && num < smallest_positive) {\n            smallest_positive = num;\n        }\n    }\n    \n    if (largest_negative == std::numeric_limits<int>::min()) {\n        largest_negative = 0;\n    }\n    if (smallest_positive == std::numeric_limits<int>::max()) {\n        smallest_positive = 0;\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128", "completion": "```cpp\n#include <vector>\n#include <limits>\n\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int largest_negative = std::numeric_limits<int>::min();\n    int smallest_positive = std::numeric_limits<int>::max();\n    \n    for (int num : lst) {\n        if (num < 0 && num > largest_negative) {\n            largest_negative = num;\n        }\n        if (num > 0 && num < smallest_positive) {\n            smallest_positive = num;\n        }\n    }\n    \n    if (largest_negative == std::numeric_limits<int>::min()) {\n        largest_negative = 0;\n    }\n    if (smallest_positive == std::numeric_limits<int>::max()) {\n        smallest_positive = 0;\n    }\n    \n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```c\n#include <stdint.h>\n\nuint64_t factorial(uint64_t n) {\n    if (n == 0) return 1;\n    uint64_t result = 1;\n    for (uint64_t i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    for (uint64_t i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```c\n#include <stdint.h>\n\nuint64_t factorial(uint64_t n) {\n    if (n == 0 || n == 1) return 1;\n    uint64_t result = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    for (uint64_t i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```c\n#include <stdint.h>\n\nuint64_t factorial(uint64_t n) {\n    if (n == 0 || n == 1) return 1;\n    uint64_t result = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    for (uint64_t i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```c\n#include <stdint.h>\n\nuint64_t factorial(uint64_t n) {\n    if (n == 0 || n == 1) return 1;\n    uint64_t result = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    for (uint64_t i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_129", "completion": "```c\n#include <stdint.h>\n\nuint64_t factorial(uint64_t n) {\n    if (n == 0 || n == 1) return 1;\n    uint64_t result = 1;\n    for (uint64_t i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nuint64_t special_factorial(uint64_t n) {\n    uint64_t result = 1;\n    for (uint64_t i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\n#include <vector>\n\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\n#include <vector>\n\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\n#include <vector>\n\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\n#include <vector>\n\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130", "completion": "```cpp\n#include <vector>\n\nint sum_squares(const std::vector<int> & lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\n#include <vector>\n\nint specialFilter(const std::vector<int> & nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        if (num > 10) {\n            int firstDigit = std::abs(num);\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            int lastDigit = num % 10;\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\n#include <vector>\n\nint specialFilter(const std::vector<int> & nums) {\n    int count = 0;\n\n    for (int num : nums) {\n        if (num > 10) {\n            int firstDigit = std::abs(num);\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            int lastDigit = num % 10;\n\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\n#include <vector>\n\nint specialFilter(const std::vector<int> & nums) {\n    int count = 0;\n\n    for (int num : nums) {\n        if (num > 10) {\n            int firstDigit = std::abs(num);\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            int lastDigit = std::abs(num) % 10;\n\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\n#include <vector>\n\nint specialFilter(const std::vector<int> & nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        if (num > 10) {\n            int firstDigit = std::abs(num);\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            int lastDigit = std::abs(num) % 10;\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n```"}
{"task_id": "SimdBench_131", "completion": "```cpp\n#include <vector>\n\nint specialFilter(const std::vector<int> & nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            int firstDigit = std::abs(num);\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            int lastDigit = std::abs(num) % 10;\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n) {\n    std::vector<uint64_t> a(n);\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    uint64_t count[3] = {0, 0, 0};\n    for (const auto& value : a) {\n        count[value % 3]++;\n    }\n\n    uint64_t result = 0;\n    for (int i = 0; i < 3; ++i) {\n        for (int j = i; j < 3; ++j) {\n            for (int k = j; k < 3; ++k) {\n                if ((i + j + k) % 3 == 0) {\n                    if (i == j && j == k) {\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) / 6;\n                    } else if (i == j) {\n                        result += count[i] * (count[i] - 1) / 2 * count[k];\n                    } else if (j == k) {\n                        result += count[j] * (count[j] - 1) / 2 * count[i];\n                    } else {\n                        result += count[i] * count[j] * count[k];\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n) {\n    std::vector<uint64_t> a(n);\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    uint64_t count[3] = {0, 0, 0};\n    for (const auto& value : a) {\n        count[value % 3]++;\n    }\n\n    uint64_t result = 0;\n    for (int i = 0; i < 3; ++i) {\n        for (int j = i; j < 3; ++j) {\n            for (int k = j; k < 3; ++k) {\n                if ((i + j + k) % 3 == 0) {\n                    if (i == j && j == k) {\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) / 6;\n                    } else if (i == j) {\n                        result += count[i] * (count[i] - 1) / 2 * count[k];\n                    } else if (j == k) {\n                        result += count[j] * (count[j] - 1) / 2 * count[i];\n                    } else {\n                        result += count[i] * count[j] * count[k];\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n) {\n    std::vector<uint64_t> a(n);\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    uint64_t count = 0;\n    for (uint64_t i = 0; i < n; ++i) {\n        for (uint64_t j = i + 1; j < n; ++j) {\n            for (uint64_t k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n) {\n    std::vector<uint64_t> a(n);\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    uint64_t count[3] = {0, 0, 0};\n    for (uint64_t i = 0; i < n; ++i) {\n        count[a[i] % 3]++;\n    }\n\n    uint64_t result = 0;\n    for (uint64_t i = 0; i < 3; ++i) {\n        for (uint64_t j = i; j < 3; ++j) {\n            for (uint64_t k = j; k < 3; ++k) {\n                if ((i + j + k) % 3 == 0) {\n                    if (i == j && j == k) {\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) / 6;\n                    } else if (i == j) {\n                        result += count[i] * (count[i] - 1) / 2 * count[k];\n                    } else if (j == k) {\n                        result += count[j] * (count[j] - 1) / 2 * count[i];\n                    } else {\n                        result += count[i] * count[j] * count[k];\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_132", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n\nuint64_t get_max_triples(uint64_t n) {\n    std::vector<uint64_t> a(n);\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    uint64_t count[3] = {0, 0, 0};\n    for (const auto& value : a) {\n        count[value % 3]++;\n    }\n\n    uint64_t result = 0;\n    for (int i = 0; i < 3; ++i) {\n        for (int j = i; j < 3; ++j) {\n            for (int k = j; k < 3; ++k) {\n                if ((i + j + k) % 3 == 0) {\n                    if (i == j && j == k) {\n                        result += count[i] * (count[i] - 1) * (count[i] - 2) / 6;\n                    } else if (i == j) {\n                        result += count[i] * (count[i] - 1) / 2 * count[k];\n                    } else if (j == k) {\n                        result += count[j] * (count[j] - 1) / 2 * count[i];\n                    } else {\n                        result += count[i] * count[j] * count[k];\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    return is_prime(n) ? x : y;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    return is_prime(n) ? x : y;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    return is_prime(n) ? x : y;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    return is_prime(n) ? x : y;\n}\n```"}
{"task_id": "SimdBench_133", "completion": "```c\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    return is_prime(n) ? x : y;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <cmath>\n\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num >= 0 && std::floor(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <cmath>\n\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num >= 0 && std::floor(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <cmath>\n\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num >= 0 && std::floor(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <cmath>\n\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num > 0 && static_cast<int>(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134", "completion": "```cpp\n#include <vector>\n#include <cstdint>\n#include <cmath>\n\nuint64_t double_the_difference(const std::vector<float> & lst) {\n    uint64_t sum = 0;\n    for (float num : lst) {\n        if (num > 0 && static_cast<int>(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<uint64_t>(num) * static_cast<uint64_t>(num);\n        }\n    }\n    return sum;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\n#include <vector>\n#include <cstdlib>\n\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\n#include <vector>\n#include <cstdlib>\n\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\n#include <vector>\n#include <cstdlib>\n\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\n#include <vector>\n#include <cstdlib>\n\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_135", "completion": "```cpp\n#include <vector>\n#include <cstdlib>\n\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```"}

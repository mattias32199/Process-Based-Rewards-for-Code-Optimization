{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    vint64m1_t v_src;\n    vint64m1_t v_dst;\n    vbool64_t v_mask;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n        v_src = vle64_v_i64m1(src + i, vl);\n        v_mask = vle64_v_b64(mask + i, vl);\n        v_dst = vle64_v_i64m1(dst + i, vl);\n        v_dst = vmerge_vvm_i64m1(v_dst, v_src, v_mask, vl);\n        vse64_v_i64m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    vbool64_t vmask;\n    vint64m1_t vsrc, vdst;\n\n    for (i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n        vmask = vle64_v_b64m1(mask + i, vl);\n        vsrc = vle64_v_i64m1(src + i, vl);\n        vdst = vle64_v_i64m1(dst + i, vl);\n        vdst = vmerge_vvm_i64m1(vdst, vsrc, vmask, vl);\n        vse64_v_i64m1(dst + i, vdst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    vint64m1_t v_src;\n    vbool64_t v_mask;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n\n        v_src = vle64_v_i64m1(src + i, vl);\n        v_mask = vle64_v_b64(mask + i, vl);\n\n        vse64_v_i64m1_m(v_mask, dst + i, v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i + (vl = vsetvl_e64m1(length - i)) < length; i += vl) {\n        vbool64_t vmask = vle64_v_b64m1(mask + i, vl);\n        vint64m1_t vsrc = vle64_v_i64m1(src + i, vl);\n        vint64m1_t vdst = vle64_v_i64m1(dst + i, vl);\n        vdst = vmerge_vvm_i64m1(vdst, vsrc, vmask, vl);\n        vse64_v_i64m1(dst + i, vdst, vl);\n    }\n\n    if (i < length) {\n        vbool64_t vmask = vle64_v_b64m1(mask + i, vl);\n        vint64m1_t vsrc = vle64_v_i64m1(src + i, vl);\n        vint64m1_t vdst = vle64_v_i64m1(dst + i, vl);\n        vdst = vmerge_vvm_i64m1(vdst, vsrc, vmask, vl);\n        vse64_v_i64m1(dst + i, vdst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_0_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t vl;\n    vint64m1_t v_src;\n    vint64m1_t v_dst;\n    vbool64_t v_mask;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n        v_src = vle64_v_i64m1(src + i, vl);\n        v_mask = vle64_v_b64(mask + i, vl);\n        v_dst = vle64_v_i64m1(dst + i, vl);\n        v_dst = vmerge_vvm_i64m1(v_dst, v_src, v_mask, vl);\n        vse64_v_i64m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_tmp1, v_tmp2, v_result;\n    vint32m1_t v_scale = _vv_set_v_i32m1(scale, 4);\n    vint32m1_t v_seven = _vv_set_v_i32m1(7, 4);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _vv_set_vl(length - i, 256);\n        v_src = _vv_lv_i32m1(src + i, vl);\n        vint32m1_t v_scaled = _vv_vmul_vx_i32m1(v_src, scale, vl);\n        v_tmp1 = _vv_vsra_vx_i32m1(v_scaled, 3, vl);\n        v_tmp2 = _vv_vsll_vx_i32m1(v_scaled, 3, vl);\n        v_result = _vv_vadd_vv_i32m1(_vv_vmul_vv_i32m1(v_tmp1, v_tmp2, vl), v_scaled, vl);\n        v_result = _vv_vdiv_vv_i32m1(v_result, v_seven, vl);\n        _vv_sv_i32m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_tmp1, v_tmp2, v_result;\n    vint32m1_t v_scale = vmv_v_x_i32m1(scale, 32);\n    vint32m1_t v_7 = vmv_v_x_i32m1(7, 32);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_i32m1(src + i, vl);\n\n        v_tmp1 = vsra_vx_i32m1(v_src, v_scale, 3, vl);\n        v_tmp2 = vsll_vx_i32m1(v_src, v_scale, 3, vl);\n\n        v_result = vadd_vv_i32m1(vmul_vv_i32m1(v_src, v_scale, vl), vmul_vv_i32m1(v_tmp1, v_tmp2, vl), vl);\n        v_result = vdiv_vv_i32m1(v_result, v_7, vl);\n\n        vse32_v_i32m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_tmp1, v_tmp2, v_result;\n    vint32m1_t v_scale = _vv_set_v_i32m1(scale, 4);\n    vint32m1_t v_7 = _vv_set_v_i32m1(7, 4);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _vv_set_vl(length - i, 4);\n        v_src = _vv_lv_i32m1(src + i, vl);\n        vint32m1_t v_scaled = _vv_vmul_vx_i32m1(v_src, scale, vl);\n        v_tmp1 = _vv_vsra_vx_i32m1(v_scaled, 3, vl);\n        v_tmp2 = _vv_vsll_vx_i32m1(v_scaled, 3, vl);\n        v_result = _vv_vadd_vv_i32m1(v_scaled, _vv_vmul_vv_i32m1(v_tmp1, v_tmp2, vl), vl);\n        v_result = _vv_vdiv_vv_i32m1(v_result, v_7, vl);\n        _vv_sv_i32m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_tmp1, v_tmp2, v_result;\n    vint32m1_t v_scale = _vv_set_all_v_i32m1(scale, 4);\n    vint32m1_t v_7 = _vv_set_all_v_i32m1(7, 4);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _vv_set_vl(length - i, 4);\n        v_src = _vv_lv_i32m1(src + i, vl);\n        v_tmp1 = _vv_sra_vx_i32m1(v_vv_mul_vx_i32m1(v_src, v_scale, vl), 3, vl);\n        v_tmp2 = _vv_sll_vx_i32m1(v_vv_mul_vx_i32m1(v_src, v_scale, vl), 3, vl);\n        v_result = _vv_div_vx_i32m1(_vv_add_vv_i32m1(_vv_mul_vx_i32m1(v_src, v_scale, vl), _vv_mul_vv_i32m1(v_tmp1, v_tmp2, vl), vl), v_7, vl);\n        _vv_sv_i32m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_1_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_tmp1, v_tmp2, v_result;\n    vint32m1_t v_scale = _vv_set_v_i32m1(scale, 4);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _vv_set_vl(length - i, 256);\n        v_src = _vv_lv_i32m1(src + i, vl);\n\n        v_tmp1 = _vv_sra_vx_i32m1(v_vv_mul_vx_i32m1(v_src, v_scale, vl), 3, vl);\n        v_tmp2 = _vv_sll_vx_i32m1(v_vv_mul_vx_i32m1(v_src, v_scale, vl), 3, vl);\n\n        v_result = _vv_div_vx_i32m1(v_vv_add_vv_i32m1(v_vv_mul_vx_i32m1(v_src, v_scale, vl),\n                                                      v_vv_mul_vv_i32m1(v_tmp1, v_tmp2, vl), vl), 7, vl);\n\n        _vv_sv_i32m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t vl;\n    for (size_t r = 0; r < rows; r += vl) {\n        vl = vsetvl_e64m1(rows - r);\n        vfloat64m1_t v_src = vle64_v_f64m1(&src[r * cols + stride], vl);\n        vse64_v_f64m1(&dst[r], v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t vl;\n    size_t i = 0;\n    size_t r;\n    for (r = 0; r < rows; r++) {\n        vfloat64m1_t v_src = vle64_v_f64m1(src + r * cols + stride, vl);\n        vse64_v_f64m1(dst + r, v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t vl;\n    size_t i = 0;\n    size_t r;\n    for (r = 0; r < rows; r++) {\n        vfloat64m1_t v_src = vle64_v_f64m1(src + r * cols + stride, vl);\n        vse64_v_f64m1(dst + r, v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t vl;\n    for (size_t r = 0; r < rows; r += vl) {\n        vl = vsetvl_e64m1(rows - r);\n        vfloat64m1_t v_src = vle64_v_f64m1(&src[r * cols + stride], vl);\n        vse64_v_f64m1(&dst[r], v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_2_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t vl;\n    size_t i = 0;\n    size_t r = 0;\n    for (r = 0; r < rows; r++) {\n        size_t index = r * cols + stride;\n        vfloat64m1_t v_src = vle64_v_f64m1(&src[index], vl);\n        vse64_v_f64m1(&dst[r], v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src;\n    vint32m1_t v_indices;\n    vfloat32m1_t v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_indices = vle32_v_i32m1(&indices[i], vl);\n        v_src = vlgather_vv_f32m1(src, v_indices, vl);\n        vse32_v_f32m1(&dst[i], v_src, vl);\n\n        v_dst = vlgather_vv_f32m1(dst, v_indices, vl);\n        vssseg1e32_v_f32m1(dst, v_indices, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src;\n    vfloat32m1_t v_dst;\n    vint32m1_t v_indices;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_indices = vle32_v_i32m1(&indices[i], vl);\n        v_src = vfloatsgnjx_v_f32m1(v_src, v_src, vl);\n\n        // Gather operation\n        v_dst = vfgather_vv_f32m1(v_dst, src, v_indices, vl);\n        vse32_v_f32m1(&dst[i], v_dst, vl);\n\n        // Scatter operation\n        v_dst = vfloatsgnjx_v_f32m1(v_dst, v_dst, vl);\n        vssseg2e32_v_f32m1x2(dst, v_indices, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src;\n    vint32m1_t v_indices;\n    vfloat32m1_t v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_indices = vle32_v_i32m1(&indices[i], vl);\n        v_src = vlgather_vv_f32m1(src, v_indices, vl);\n        vse32_v_f32m1(&dst[i], v_src, vl);\n\n        v_dst = vlgather_vv_f32m1(src, v_indices, vl);\n        vsscatter_v_f32m1(dst, v_indices, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src;\n    vint32m1_t v_indices;\n    vfloat32m1_t v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_indices = vle32_v_i32m1(&indices[i], vl);\n        v_src = vloxei32_v_f32m1(src, v_indices, vl);\n        vse32_v_f32m1(&dst[i], v_src, vl);\n\n        v_dst = vloxei32_v_f32m1(dst, v_indices, vl);\n        vse32_v_f32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_3_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src;\n    vint32m1_t v_indices;\n    vfloat32m1_t v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_indices = vle32_v_i32m1(indices + i, vl);\n        v_src = vlgather_vv_f32m1(src, v_indices, vl);\n        vse32_v_f32m1(dst + i, v_src, vl);\n\n        v_dst = vle32_v_f32m1(dst + i, vl);\n        vsscatter_v_f32m1(dst, v_indices, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    size_t length = end - start + 1;\n    size_t vlen = 8; // Assuming vector length of 8 for int16_t\n    size_t i = 0;\n\n    for (i = 0; i < length - vlen; i += vlen) {\n        vint16m1_t vec1 = vle16_v_i16m1(&arr[start + i], vlen);\n        vint16m1_t vec2 = vle16_v_i16m1(&arr[start + length - i - vlen], vlen);\n        vse16_v_i16m1(&arr[start + i], vec2, vlen);\n        vse16_v_i16m1(&arr[start + length - i - vlen], vec1, vlen);\n    }\n\n    for (; i < length - i; ++i) {\n        int16_t temp = arr[start + i];\n        arr[start + i] = arr[start + length - i - 1];\n        arr[start + length - i - 1] = temp;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    size_t n = end - start + 1;\n    size_t i = 0;\n    size_t j = n - 1;\n    size_t vector_bits = 128;\n    size_t vector_elements = vector_bits / 16;\n\n    while (i < j) {\n        size_t chunk_size = j - i + 1;\n        vint16m1_t v1 = __riscv_vle16_v_i16m1(arr + start + i, chunk_size);\n        vint16m1_t v2 = __riscv_vle16_v_i16m1(arr + start + j - (chunk_size - 1), chunk_size);\n\n        __riscv_vse16_v_i16m1(arr + start + i, v2, chunk_size);\n        __riscv_vse16_v_i16m1(arr + start + j - (chunk_size - 1), v1, chunk_size);\n\n        i += chunk_size;\n        j -= chunk_size;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    size_t n = end - start + 1;\n    size_t i = 0;\n    size_t j = n - 1;\n    size_t vl;\n\n    while (i < j) {\n        vl = vsetvl_e16m1(j - i + 1);\n        vint16m1_t v_i = vle16_v_i16m1(&arr[start + i], vl);\n        vint16m1_t v_j = vle16_v_i16m1(&arr[start + j - vl + 1], vl);\n        vse16_v_i16m1(&arr[start + i], v_j, vl);\n        vse16_v_i16m1(&arr[start + j - vl + 1], v_i, vl);\n        i += vl;\n        j -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    size_t n = end - start + 1;\n    size_t vl;\n    size_t i = 0;\n    size_t j = n - 1;\n\n    while (i < j) {\n        vl = vsetvl_e16m1(j - i + 1);\n        vint16m1_t v_i = vle16_v_i16m1(&arr[start + i], vl);\n        vint16m1_t v_j = vle16_v_i16m1(&arr[start + j - vl + 1], vl);\n        vse16_v_i16m1(&arr[start + i], v_j, vl);\n        vse16_v_i16m1(&arr[start + j - vl + 1], v_i, vl);\n        i += vl;\n        j -= vl;\n    }\n}\n```"}
{"task_id": "SimdBench_4_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    size_t n = end - start + 1;\n    size_t i = 0;\n    size_t vl;\n\n    for (i = 0; i < n; i += vl) {\n        vl = vsetvl_e16m1(n - i);\n        vint16m1_t v0 = vle16_v_i16m1(&arr[start + i], vl);\n        vint16m1_t v1 = vle16_v_i16m1(&arr[end - i], vl);\n        vse16_v_i16m1(&arr[start + i], v1, vl);\n        vse16_v_i16m1(&arr[end - i], v0, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n\n    size_t i = 0;\n    size_t vl;\n    for (i = 0; i < slice_size; i += vl) {\n        vl = vsetvl_e8m1(slice_size - i);\n        vuint8m1_t v_tensor = vle8_v_u8m1(&tensor[start_idx + i], vl);\n        vse8_v_u8m1(&slice[i], v_tensor, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(dim1 * dim2);\n\n    size_t i = 0;\n    for (; i + vlen <= dim1 * dim2; i += vlen) {\n        vuint8m1_t vec = vle8_v_u8m1(&tensor[offset + i], vlen);\n        vse8_v_u8m1(&slice[i], vec, vlen);\n    }\n\n    for (; i < dim1 * dim2; ++i) {\n        slice[i] = tensor[offset + i];\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n\n    size_t i = 0;\n    size_t vl;\n    for (i = 0; i < slice_size; i += vl) {\n        vl = vsetvl_e8m1(slice_size - i);\n        vuint8m1_t v_tensor = vle8_v_u8m1(&tensor[offset + i], vl);\n        vse8_v_u8m1(&slice[i], v_tensor, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n\n    size_t i = 0;\n    size_t vl;\n    for (i = 0; i < slice_size; i += vl) {\n        vl = vsetvl_e8m1(slice_size - i);\n        vuint8m1_t v_tensor = vle8_v_u8m1(&tensor[start_idx + i], vl);\n        vse8_v_u8m1(slice + i, v_tensor, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_5_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n\n    size_t vl;\n    size_t i = 0;\n    for (; i + vl <= slice_size; i += vl) {\n        vl = vsetvl_e8m1(slice_size - i);\n        vuint8m1_t v = vle8_v_u8m1(&tensor[start_idx + i], vl);\n        vse8_v_u8m1(slice + i, v, vl);\n    }\n\n    for (; i < slice_size; ++i) {\n        slice[i] = tensor[start_idx + i];\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t vlen = 128 / 16;  // Vector length in elements\n    size_t i, j, ii, jj;\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            size_t max_i = (i + block_size < rows) ? i + block_size : rows;\n            size_t max_j = (j + block_size < cols) ? j + block_size : cols;\n\n            for (ii = i; ii < max_i; ii += vlen) {\n                for (jj = j; jj < max_j; jj++) {\n                    vint16m1_t vec = vle16_v_i16m1(&src[ii * cols + jj], vlen);\n                    vsse16_v_i16m1(&dst[jj * rows + ii], vec, vlen);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t vlen = 8; // Assuming vector length of 8 for this example\n    size_t i, j, k, ii, jj;\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (ii = i; ii < i + block_size && ii < rows; ii += vlen) {\n                for (jj = j; jj < j + block_size && jj < cols; jj += vlen) {\n                    size_t len_i = (i + block_size < rows ? vlen : rows - ii);\n                    size_t len_j = (j + block_size < cols ? vlen : cols - jj);\n\n                    vint16m1_t vec0 = __riscv_vle16_v_i16m1(src + ii * cols + jj, len_j);\n                    for (k = 0; k < len_i; k++) {\n                        __riscv_vse16_v_i16m1(dst + (jj + k) * rows + ii, vec0, len_j);\n                    }\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t vlen = 8; // Assuming vector length of 8 for this example\n    size_t i, j, ii, jj;\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            size_t max_i = (i + block_size < rows) ? i + block_size : rows;\n            size_t max_j = (j + block_size < cols) ? j + block_size : cols;\n\n            for (ii = i; ii < max_i; ii += vlen) {\n                for (jj = j; jj < max_j; jj += vlen) {\n                    size_t len_i = (ii + vlen < max_i) ? vlen : max_i - ii;\n                    size_t len_j = (jj + vlen < max_j) ? vlen : max_j - jj;\n\n                    vint16m1_t vec_src = vle16_v_i16m1(&src[ii * cols + jj], len_j);\n                    vse16_v_i16m1(&dst[jj * rows + ii], vec_src, len_i);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t vlen = 128;\n    for (size_t i = 0; i < rows; i += block_size) {\n        for (size_t j = 0; j < cols; j += block_size) {\n            size_t max_i = (i + block_size < rows) ? i + block_size : rows;\n            size_t max_j = (j + block_size < cols) ? j + block_size : cols;\n\n            for (size_t ii = i; ii < max_i; ii++) {\n                for (size_t jj = j; jj < max_j; jj += vlen / sizeof(int16_t)) {\n                    size_t index_src = ii * cols + jj;\n                    size_t index_dst = jj * rows + ii;\n\n                    vint16m1_t vec_src = vle16_v_i16m1(&src[index_src], vlen / sizeof(int16_t));\n                    vse16_v_i16m1(&dst[index_dst], vec_src, vlen / sizeof(int16_t));\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t vlen = 8; // Assuming vector length of 8 for this example\n    size_t i, j, k, ii, jj;\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (ii = i; ii < i + block_size && ii < rows; ii += vlen) {\n                for (jj = j; jj < j + block_size && jj < cols; jj += vlen) {\n                    size_t len_i = (i + block_size < rows ? vlen : rows - ii);\n                    size_t len_j = (j + block_size < cols ? vlen : cols - jj);\n\n                    vint16m1_t vec_src = vle16_v_i16m1(&src[ii * cols + jj], len_j);\n                    vse16_v_i16m1(&dst[jj * rows + ii], vec_src, len_i);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = 0;\n    vfloat32m1_t vsum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n    vfloat32m1_t vtemp;\n\n    for (size_t i = 0; i < dim; i += vsetvl_e32m1(1)) {\n        vector_length = vsetvl_e32m1(dim - i);\n        vtemp = vle32_v_f32m1(&array[i * (dim * dim + dim + 1)], vector_length);\n        vsum = _rvv_vfadd_vv_f32m1(vsum, vtemp, vector_length);\n    }\n\n    float sum = _rvv_fmv_f_s_f32m1_f32(vsum);\n    for (size_t i = 1; i < vsetvl_e32m1(1); ++i) {\n        sum += _rvv_fmv_f_s_f32m1_f32(_rvv_vslideup_vx_f32m1(vsum, i, vsetvl_e32m1(1)));\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = 0;\n    vfloat32m1_t vsum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n    vfloat32m1_t vtemp;\n\n    for (size_t i = 0; i < dim; i += vector_length) {\n        vector_length = vsetvl_e32m1(dim - i);\n        size_t index = i * (dim * dim + dim + 1);\n        vtemp = _rvv_vle32_v_f32m1(&array[index], vector_length);\n        vsum = _rvv_vfadd_vv_f32m1(vsum, vtemp, vector_length);\n    }\n\n    float sum = 0.0f;\n    for (size_t i = 0; i < vector_length; ++i) {\n        sum += vsum[i];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = 0;\n    vfloat32m1_t v_sum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n    vfloat32m1_t v_temp;\n\n    for (size_t i = 0; i < dim; i += vector_length) {\n        vector_length = vsetvl_e32m1(dim - i);\n        v_temp = vle32_v_f32m1(&array[i * (dim * dim + dim + 1)], vector_length);\n        v_sum = _rvv_vfadd_vv_f32m1(v_sum, v_temp, vector_length);\n    }\n\n    float sum = _rvv_fmv_f_s_f32m1_f32(v_sum);\n    for (size_t i = 1; i < vector_length; ++i) {\n        sum += _rvv_fmv_f_s_f32m1_f32(vle32_v_f32m1(&array[i * (dim * dim + dim + 1)], 1));\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = 0;\n    vfloat32m1_t v_sum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n    vfloat32m1_t v_temp;\n\n    for (size_t i = 0; i < dim; i += vector_length) {\n        vector_length = vsetvl_e32m1(dim - i);\n        v_temp = vle32_v_f32m1(&array[i * (dim * dim + dim + 1)], vector_length);\n        v_sum = _rvv_vfadd_vv_f32m1(v_sum, v_temp, vector_length);\n    }\n\n    float sum = 0.0f;\n    for (size_t i = 0; i < vsetvl_e32m1(1); i++) {\n        sum += v_sum[i];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = 0;\n    vfloat32m1_t v_sum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n    vfloat32m1_t v_temp;\n\n    for (size_t i = 0; i < dim; i += vector_length) {\n        vector_length = vsetvl_e32m1(dim - i);\n        size_t index = i * (dim * dim + dim + 1);\n        v_temp = _rvv_lv_f32m1(&array[index], vector_length);\n        v_sum = _rvv_fadd_vv_f32m1(v_sum, v_temp, vector_length);\n    }\n\n    float sum = 0.0f;\n    for (size_t i = 0; i < vector_length; ++i) {\n        sum += v_sum[i];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t vl;\n    size_t total_elements = rows * cols;\n    vdouble_t v_threshold = _rvv_set_f64(threshold);\n    vdouble_t v_scale = _rvv_set_f64(scale);\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vdouble_t v_src = _rvv_load_f64(src + i);\n        vdouble_t v_dst = _rvv_load_f64(dst + i);\n        vbool64_t mask = _rvv_cmpgt_f64(v_src, v_threshold);\n        v_dst = _rvv_fmul_f64(v_src, v_scale, mask);\n        _rvv_store_f64(dst + i, v_dst);\n        vl = _rvv_get_vl();\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t vl;\n    size_t total_elements = rows * cols;\n    vfloat64m1_t v_threshold = vfmv_v_f_f64m1(threshold, vl);\n    vfloat64m1_t v_scale = vfmv_v_f_f64m1(scale, vl);\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vfloat64m1_t v_src = vle64_v_f64m1(src + i, vl);\n        vbool64_t mask = vmsgt_vv_f64m1_b64(v_src, v_threshold, vl);\n        vfloat64m1_t v_scaled = vfmul_vv_f64m1(v_src, v_scale, vl);\n        vfloat64m1_t v_result = vmerge_vvm_f64m1(v_src, v_scaled, mask, vl);\n        vse64_v_f64m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t vl;\n    size_t total_elements = rows * cols;\n    vfloat64m1_t v_threshold = vfmv_v_f_f64m1(threshold, 64);\n    vfloat64m1_t v_scale = vfmv_v_f_f64m1(scale, 64);\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vl = vsetvl_e64m1(total_elements - i);\n        vfloat64m1_t v_src = vle64_v_f64m1(&src[i], vl);\n        vbool64_t mask = vmsgt_vv_f64m1_b64(v_src, v_threshold, vl);\n        vfloat64m1_t v_scaled = vfmul_vv_f64m1(v_src, v_scale, vl);\n        vfloat64m1_t v_dst = vfmerge_vfm_f64m1(mask, v_scaled, v_src, vl);\n        vse64_v_f64m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t vl;\n    size_t total_elements = rows * cols;\n    vfloat64m1_t v_threshold = vfmv_v_f_f64m1(threshold, vl);\n    vfloat64m1_t v_scale = vfmv_v_f_f64m1(scale, vl);\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vfloat64m1_t v_src = vle64_v_f64m1(src + i, vl);\n        vbool64_t mask = vmsgt_vv_f64m1_b64(v_src, v_threshold, vl);\n        vfloat64m1_t v_scaled = vfmul_vv_f64m1(v_src, v_scale, vl);\n        vfloat64m1_t v_result = vmerge_vvm_f64m1(v_src, v_scaled, mask, vl);\n        vse64_v_f64m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_8_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t vl;\n    size_t total_elements = rows * cols;\n    vfloat64m1_t v_threshold = vfmv_v_f_f64m1(threshold, vl);\n    vfloat64m1_t v_scale = vfmv_v_f_f64m1(scale, vl);\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vfloat64m1_t v_src = vle64_v_f64m1(&src[i], vl);\n        vfloat64m1_t v_dst = vfmul_vv_f64m1(v_src, v_scale, vl);\n        vbool64_t mask = vmsgt_vf_f64m1_b64(v_src, v_threshold, vl);\n        v_dst = vmerge_vvm_f64m1(v_dst, v_src, mask, vl);\n        vse64_v_f64m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    for (size_t i = 0; i < rows; ++i) {\n        size_t new_row_index = indices[i] * cols;\n        size_t old_row_index = i * cols;\n        size_t j = 0;\n        for (; j + vlen <= cols; j += vlen) {\n            vdouble_t vec_src = vle_v_f64m1(&src[old_row_index + j], vlen);\n            vse_v_f64m1(&dst[new_row_index + j], vec_src, vlen);\n        }\n        for (; j < cols; ++j) {\n            dst[new_row_index + j] = src[old_row_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vector_length = 8; // Assuming vector length of 8 for double precision\n    size_t col_chunks = cols / vector_length;\n    size_t col_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row_index = indices[i] * cols;\n        size_t dst_row_index = i * cols;\n\n        for (size_t j = 0; j < col_chunks; ++j) {\n            vdouble v_src = vle64_v_d(&src[src_row_index + j * vector_length], vector_length);\n            vse64_v_d(&dst[dst_row_index + j * vector_length], v_src, vector_length);\n        }\n\n        for (size_t j = col_chunks * vector_length; j < cols; ++j) {\n            dst[dst_row_index + j] = src[src_row_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vector_length = 8; // Assuming vector length of 8 for double precision\n    size_t i, j;\n\n    for (i = 0; i < rows; ++i) {\n        size_t src_row = indices[i] * cols;\n        size_t dst_row = i * cols;\n\n        for (j = 0; j < cols; j += vector_length) {\n            size_t vl = vsetvl_e64m1(cols - j);\n            vfloat64m1_t vec_src = vle64_v_f64m1(&src[src_row + j], vl);\n            vse64_v_f64m1(&dst[dst_row + j], vec_src, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    for (size_t i = 0; i < rows; ++i) {\n        size_t new_row_index = indices[i] * cols;\n        size_t old_row_index = i * cols;\n        size_t j = 0;\n        for (; j + vlen <= cols; j += vlen) {\n            vdouble_t vec_src = vle_v_f64m1(&src[old_row_index + j], vlen);\n            vse_v_f64m1(&dst[new_row_index + j], vec_src, vlen);\n        }\n        for (; j < cols; ++j) {\n            dst[new_row_index + j] = src[old_row_index + j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    size_t i, j;\n\n    for (i = 0; i < rows; ++i) {\n        size_t idx = indices[i];\n        for (j = 0; j < cols; j += vlen) {\n            size_t remaining = cols - j;\n            size_t vl = remaining < vlen ? remaining : vlen;\n\n            vdouble_t vec_src = vle_v_f64m1(&src[idx * cols + j], vl);\n            vse_v_f64m1(&dst[i * cols + j], vec_src, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl;\n    vint64m1_t v_src1, v_src2, v_result;\n    vint64m1_t v_scalar = __riscv_vmv_v_x_i64m1(scalar, 64);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n\n        v_src1 = __riscv_vle64_v_i64m1(&src1[i], vl);\n        v_src2 = __riscv_vle64_v_i64m1(&src2[i], vl);\n\n        v_result = __riscv_vadd_vv_i64m1(v_src1, v_src2, vl);\n        v_result = __riscv_vadd_vx_i64m1(v_result, scalar, vl);\n        v_result = __riscv_vsra_vx_i64m1(v_result, 1, vl);\n\n        __riscv_vse64_v_i64m1(&dst[i], v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl;\n    vint64m1_t v_src1, v_src2, v_result;\n    vint64m1_t v_scalar = __riscv_vmv_v_x_i64m1(scalar, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n\n        v_src1 = __riscv_vle64_v_i64m1(&src1[i], vl);\n        v_src2 = __riscv_vle64_v_i64m1(&src2[i], vl);\n\n        v_result = __riscv_vadd_vv_i64m1(v_src1, v_src2, vl);\n        v_result = __riscv_vadd_vx_i64m1(v_result, scalar, vl);\n        v_result = __riscv_vsra_vx_i64m1(v_result, 1, vl);\n\n        __riscv_vse64_v_i64m1(&dst[i], v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl;\n    vint64m1_t v_src1, v_src2, v_result;\n    vint64m1_t v_scalar = __riscv_vmv_v_x_i64m1(scalar, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n\n        v_src1 = __riscv_vle64_v_i64m1(src1 + i, vl);\n        v_src2 = __riscv_vle64_v_i64m1(src2 + i, vl);\n\n        v_result = __riscv_vadd_vv_i64m1(v_src1, v_src2, vl);\n        v_result = __riscv_vadd_vx_i64m1(v_result, scalar, vl);\n        v_result = __riscv_vsra_vx_i64m1(v_result, 1, vl);\n\n        __riscv_vse64_v_i64m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl;\n    vint64m1_t v_src1, v_src2, v_result;\n    vint64m1_t v_scalar = __riscv_vmv_v_x_i64m1(scalar, 64);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n\n        v_src1 = __riscv_vle64_v_i64m1(src1 + i, vl);\n        v_src2 = __riscv_vle64_v_i64m1(src2 + i, vl);\n\n        v_result = __riscv_vadd_vv_i64m1(v_src1, v_src2, vl);\n        v_result = __riscv_vadd_vx_i64m1(v_result, scalar, vl);\n        v_result = __riscv_vsra_vx_i64m1(v_result, 1, vl);\n\n        __riscv_vse64_v_i64m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_10_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    size_t vl;\n    vint64m1_t v_src1, v_src2, v_result;\n    vint64m1_t v_scalar = __riscv_vmv_v_x_i64m1(scalar, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n        v_src1 = __riscv_vle64_v_i64m1(&src1[i], vl);\n        v_src2 = __riscv_vle64_v_i64m1(&src2[i], vl);\n        v_result = __riscv_vadd_vv_i64m1(v_src1, v_src2, vl);\n        v_result = __riscv_vadd_vx_i64m1(v_result, scalar, vl);\n        v_result = __riscv_vsra_vx_i64m1(v_result, 1, vl);\n        __riscv_vse64_v_i64m1(&dst[i], v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    size_t vlen = 0;\n    vint32m1_t vmin = __riscv_vle32_v_i32m1(src, vlen);\n    vmin = __riscv_vmin_vv_i32m1(vmin, vmin, vlen);\n\n    for (size_t i = vlen; i < length; i += vlen) {\n        size_t remaining = length - i;\n        size_t chunk_len = remaining < vlen ? remaining : vlen;\n        vint32m1_t vcurrent = __riscv_vle32_v_i32m1(src + i, chunk_len);\n        vmin = __riscv_vmin_vv_i32m1(vmin, vcurrent, chunk_len);\n    }\n\n    int min_value = __riscv_vmv_x_s_i32m1_i32(vmin);\n\n    return min_value;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    size_t i = 0;\n    int min_val = INT_MAX;\n    size_t vl;\n\n    while (i < length) {\n        vl = vsetvl_e32m1(length - i);\n        vint32m1_t v_data = vle32_v_i32m1(src + i, vl);\n        vint32m1_t v_even = vand_vv_i32m1(v_data, 1, vl);\n        vbool32_t mask = vmseq_vx_i32m1_b32(v_even, 0, vl);\n\n        if (vfirst_m_b32(mask, vl) != -1) {\n            vint32m1_t v_min = vredmin_vs_i32m1_i32m1(v_data, v_data, mask, vl);\n            min_val = vmin_vs_i32m1_i32(min_val, v_min, vl);\n        }\n\n        i += vl;\n    }\n\n    return min_val == INT_MAX ? -1 : min_val;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    size_t i = 0;\n    vint32m1_t v_min = _vbux_i32m1(INT32_MAX, 1);\n    vbool32_t mask = _vmslt_vx_i32m1_b(v_min, INT32_MAX, 1);\n\n    for (; i <= length - _rvv_length_i32m1(); i += _rvv_length_i32m1()) {\n        vint32m1_t v_src = _vlx_v_i32m1(src + i, 1);\n        vbool32_t even_mask = _vmand_mm_b(_vmsle_vx_i32m1_b(v_src, 1, 1), _vmsne_vx_i32m1_b(v_src, 0, 1));\n        vint32m1_t even_vals = _vmerge_vxm_i32m1(v_src, 0, even_mask, 1);\n        v_min = _vmin_vm_i32m1(v_min, even_vals, mask, 1);\n    }\n\n    int min_val = INT32_MAX;\n    _vse_v_i32m1(&min_val, v_min, 1);\n\n    for (; i < length; i++) {\n        if (src[i] % 2 == 0 && src[i] < min_val) {\n            min_val = src[i];\n        }\n    }\n\n    return min_val == INT32_MAX ? -1 : min_val;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    size_t i = 0;\n    int min_val = INT_MAX;\n    size_t vector_len = 0;\n\n    vint32m1_t v_min = _vfmv_v_f_i32m1(INT_MAX, 1);\n    vbool32_t mask = _vfmv_v_b_b32(0, 1);\n\n    for (; i + _rvv_length_i32m1() <= length; i += _rvv_length_i32m1()) {\n        vint32m1_t v_data = _vle32_v_i32m1(src + i, _rvv_length_i32m1());\n        vbool32_t v_mask_even = _vmseq_vx_i32m1_b32(v_data % 2, 0, 1);\n\n        vint32m1_t v_min_local = _vredmin_vs_i32m1_i32m1(v_data, v_data, v_min, 1);\n        v_min = _vmin_vv_i32m1(v_min, v_min_local, 1);\n    }\n\n    min_val = _vfmv_f_s_i32m1_i32(v_min);\n\n    for (; i < length; i++) {\n        if (src[i] % 2 == 0 && src[i] < min_val) {\n            min_val = src[i];\n        }\n    }\n\n    return min_val == INT_MAX ? -1 : min_val;\n}\n```"}
{"task_id": "SimdBench_11_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    size_t vl;\n    vint32m1_t v_min = _rvv_init_vint32m1(INT32_MAX);\n    vbool32_t mask = _rvv_init_vbool32(false);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        vint32m1_t v_src = __riscv_vle32_v_i32m1(src + i, vl);\n        vbool32_t v_even_mask = __riscv_vmseq_vx_i32m1_b32(v_src, 0, vl);\n\n        vint32m1_t v_even = __riscv_vmerge_vvm_i32m1(v_src, v_min, v_even_mask, vl);\n        v_min = __riscv_vmin_vv_i32m1(v_min, v_even, vl);\n        mask = __riscv_vor_vv_b32(mask, v_even_mask, vl);\n    }\n\n    int min_value = INT32_MAX;\n    for (size_t i = 0; i < __riscv_vsetvl_e32m1(length); ++i) {\n        if (__riscv_vget_vbool32_b32(mask, i)) {\n            int value = __riscv_vget_vint32m1_i32(v_min, i);\n            if (value < min_value) {\n                min_value = value;\n            }\n        }\n    }\n\n    return min_value == INT32_MAX ? -1 : min_value;\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_arith_shift, v_logic_shift;\n    vuint32m1_t v_uint_src, v_uint_logic_shift;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_i32m1(&src[i], vl);\n\n        v_arith_shift = vsra_vx_i32m1(v_src, shift, vl);\n\n        v_uint_src = vreinterpret_v_i32m1_u32m1(v_src);\n        v_uint_logic_shift = vsrl_vx_u32m1(v_uint_src, shift, vl);\n        v_logic_shift = vreinterpret_v_u32m1_i32m1(v_uint_logic_shift);\n\n        v_src = vadd_vv_i32m1(v_arith_shift, v_logic_shift, vl);\n\n        vse32_v_i32m1(&dst[i], v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_arith_shift, v_logic_shift;\n    vuint32m1_t v_uint_src, v_uint_logic_shift;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_i32m1(&src[i], vl);\n\n        v_arith_shift = vsra_vx_i32m1(v_src, shift, vl);\n\n        v_uint_src = vreinterpret_v_i32m1_u32m1(v_src);\n        v_uint_logic_shift = vsrl_vx_u32m1(v_uint_src, shift, vl);\n        v_logic_shift = vreinterpret_v_u32m1_i32m1(v_uint_logic_shift);\n\n        v_src = vadd_vv_i32m1(v_arith_shift, v_logic_shift, vl);\n\n        vse32_v_i32m1(&dst[i], v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_arith_shift, v_logic_shift;\n    vuint32m1_t v_uint_src, v_uint_logic_shift;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_i32m1(src + i, vl);\n\n        v_arith_shift = vsra_vx_i32m1(v_src, shift, vl);\n\n        v_uint_src = vreinterpret_v_i32m1_u32m1(v_src);\n        v_uint_logic_shift = vsrl_vx_u32m1(v_uint_src, shift, vl);\n        v_logic_shift = vreinterpret_v_u32m1_i32m1(v_uint_logic_shift);\n\n        v_src = vadd_vv_i32m1(v_arith_shift, v_logic_shift, vl);\n\n        vse32_v_i32m1(dst + i, v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_arith_shift, v_logic_shift;\n    vuint32m1_t v_uint_src, v_uint_logic_shift;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_i32m1(&src[i], vl);\n\n        v_arith_shift = vsra_vx_i32m1(v_src, shift, vl);\n\n        v_uint_src = vreinterpret_v_i32m1_u32m1(v_src);\n        v_uint_logic_shift = vsrl_vx_u32m1(v_uint_src, shift, vl);\n        v_logic_shift = vreinterpret_v_u32m1_i32m1(v_uint_logic_shift);\n\n        v_src = vadd_vv_i32m1(v_arith_shift, v_logic_shift, vl);\n\n        vse32_v_i32m1(&dst[i], v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_12_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    size_t vl;\n    vint32m1_t v_src, v_arith_shift, v_logic_shift;\n    vuint32m1_t v_uint_src, v_uint_logic_shift;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src = vle32_v_i32m1(src + i, vl);\n        v_arith_shift = vsra_vx_i32m1(v_src, shift, vl);\n\n        v_uint_src = vreinterpret_v_i32m1_u32m1(v_src);\n        v_uint_logic_shift = vsrl_vx_u32m1(v_uint_src, shift, vl);\n        v_logic_shift = vreinterpret_v_u32m1_i32m1(v_uint_logic_shift);\n\n        v_src = vadd_vv_i32m1(v_arith_shift, v_logic_shift, vl);\n        vse32_v_i32m1(dst + i, v_src, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t length = rows * cols;\n    size_t vlength = 0;\n    int64_t sum = 0;\n    vint32m1_t v_sum = _rvv_fmv_v_x_i32m1(0, 1);\n\n    for (size_t i = 0; i < length; i += vlength) {\n        vlength = _rvv_vsetvl_e32m1(length - i);\n        vint32m1_t v = _rvv_vle32_v_i32m1(&matrix[i], vlength);\n        v_sum = _rvv_vadd_vv_i32m1(v_sum, v, vlength);\n    }\n\n    sum = _rvv_vredsum_vs_i32m1_i64m1(sum, v_sum, vlength);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t length = rows * cols;\n    size_t vlength = 0;\n    int64_t sum = 0;\n    vint32m1_t v_sum = _rvv_fmv_v_x_i32m1(0, 1);\n\n    for (size_t i = 0; i < length; i += vlength) {\n        vlength = _rvv_vsetvl_e32m1(length - i);\n        vint32m1_t v = _rvv_vle32_v_i32m1(&matrix[i], vlength);\n        v_sum = _rvv_vadd_vv_i32m1(v_sum, v, vlength);\n    }\n\n    sum = _rvv_vredsum_vs_i32m1_i64m1(v_sum, sum, vlength);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t length = rows * cols;\n    size_t vlen = 0;\n    int64_t sum = 0;\n    vint32m1_t v_sum = _rvv_splats_32m1(0);\n\n    vlen = vsetvl_e32m1(length);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vint32m1_t v = vle32_v_i32m1(matrix + i, vlen);\n        v_sum = _rvv_add_vv_i32m1(v_sum, v, vlen);\n    }\n\n    sum = _rvv_reduce_add_i32m1(v_sum, vlen);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t length = rows * cols;\n    size_t vlen = 0;\n    int64_t sum = 0;\n    vint32m1_t v_sum = _rvv_fmv_s_x_i32m1(0, 1);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vlen = vsetvl_e32m1(length - i);\n        vint32m1_t v = vle32_v_i32m1(&matrix[i], vlen);\n        v_sum = _rvv_vadd_vv_i32m1(v_sum, v, vlen);\n    }\n\n    sum = _rvv_vredsum_vs_i32m1_i64m1(v_sum, v_sum, vlen);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t length = rows * cols;\n    size_t vlen = 0;\n    int64_t sum = 0;\n    vint32m1_t v_sum = _rvv_fmv_s_x_i32m1(0, 1);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vlen = __riscv_vsetvl_e32m1(length - i);\n        vint32m1_t v = __riscv_vle32_v_i32m1(&matrix[i], vlen);\n        v_sum = __riscv_vredsum_vs_i32m1_i32m1(v, v_sum, __riscv_vadd_vv_i32m1(v_sum, v, vlen));\n    }\n\n    sum = __riscv_vredsum_vs_i32m1_i32m1(v_sum, v_sum, __riscv_vadd_vv_i32m1(v_sum, v_sum, vlen));\n    return sum;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    size_t index = 0;\n    int8_t max_val = *src;\n    size_t vl = 0;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e8m1(length - i);\n        vint8m1_t v_src = vle8_v_i8m1(src + i, vl);\n        vint8m1_t v_max = vmv_v_x_i8m1(max_val, vl);\n\n        vbool1_t mask = vmsgt_vx_i8m1_b1(v_src, max_val, vl);\n        if (vfirst_m_b1(mask, vl) != -1) {\n            max_val = v_src[vfirst_m_b1(mask, vl)];\n            index = i + vfirst_m_b1(mask, vl);\n        }\n    }\n\n    return index;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    size_t vl = 0;\n    int8_t max_val = INT8_MIN;\n    size_t max_idx = 0;\n\n    size_t i = 0;\n    for (; i + vsetvl_e8m1(16) <= length; i += vsetvl_e8m1(16)) {\n        vint8m1_t v = vle8_v_i8m1(src + i, vl);\n        vint8m1_t v_max = vmax_vv_i8m1(v, vmax_vv_i8m1(v, v, vl), vl);\n        int8_t scalar_max = vfirst_i8m1(v_max, vl);\n\n        if (scalar_max > max_val) {\n            max_val = scalar_max;\n            max_idx = i + vfirst_i8m1(v_max, vl);\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            max_idx = i;\n        }\n    }\n\n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    size_t vlmax = __riscv_vsetvlmax_e8m1();\n    size_t index = 0;\n    int8_t max_val = *src;\n\n    size_t i;\n    for (i = 0; i < length - vlmax; i += vlmax) {\n        vint8m1_t v = __riscv_vle8_v_i8m1(src + i, vlmax);\n        vint8m1_t v_max = __riscv_vmv_v_x_i8m1(max_val, vlmax);\n        vbool1_t mask = __riscv_vmsgt_vv_i8m1_b1(v, v_max);\n\n        if (__riscv_vmfirst_m_b1(mask, vlmax) != -1) {\n            size_t offset = __riscv_vmfirst_m_b1(mask, vlmax);\n            max_val = src[i + offset];\n            index = i + offset;\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            index = i;\n        }\n    }\n\n    return index;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    size_t vlmax = __riscv_vsetvlmax_e8m1();\n    vint8m1_t vmax = __riscv_vle8_v_i8m1(src, vlmax);\n    size_t index = 0;\n    size_t max_index = 0;\n    int8_t max_value = __riscv_vmv_x_s_i8m1_i8(vmax);\n\n    size_t i = vlmax;\n    for (; i < length; i += vlmax) {\n        vint8m1_t v = __riscv_vle8_v_i8m1(src + i, vlmax);\n        vint8m1_t vmax_tmp = __riscv_vredmax_vs_i8m1_i8m1(v, vmax, vlmax);\n        int8_t max_tmp = __riscv_vmv_x_s_i8m1_i8(vmax_tmp);\n        if (max_tmp > max_value) {\n            max_value = max_tmp;\n            max_index = i + __riscv_vfirst_m_i8m1(vmax_tmp, __riscv_vmseq_vx_i8m1_i8m1(vmax_tmp, max_value, vlmax));\n        }\n        vmax = vmax_tmp;\n    }\n\n    size_t remaining = length - i;\n    if (remaining > 0) {\n        vint8m1_t v = __riscv_vle8_v_i8m1(src + i, remaining);\n        vint8m1_t vmax_tmp = __riscv_vredmax_vs_i8m1_i8m1(v, vmax, remaining);\n        int8_t max_tmp = __riscv_vmv_x_s_i8m1_i8(vmax_tmp);\n        if (max_tmp > max_value) {\n            max_value = max_tmp;\n            max_index = i + __riscv_vfirst_m_i8m1(vmax_tmp, __riscv_vmseq_vx_i8m1_i8m1(vmax_tmp, max_value, remaining));\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    size_t vl = 0;\n    int8_t max_val = INT8_MIN;\n    size_t max_idx = 0;\n\n    size_t i = 0;\n    for (; i <= length - vl; i += vl) {\n        vl = vsetvl_e8m1(length - i);\n        vint8m1_t v_src = vle8_v_i8m1(src + i, vl);\n        vint8m1_t v_max = vmv_v_x_i8m1(max_val, vl);\n\n        vbool8_t mask = vmsgt_vv_i8m1_b8(v_src, v_max);\n        if (vfirst_m_b8(mask, vl) != -1) {\n            max_val = v_src[vfirst_m_b8(mask, vl)];\n            max_idx = i + vfirst_m_b8(mask, vl);\n        }\n    }\n\n    for (; i < length; ++i) {\n        if (src[i] > max_val) {\n            max_val = src[i];\n            max_idx = i;\n        }\n    }\n\n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n    vbool16_t v_mask;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n\n        v_src1 = vle16_v_u16m1(&src1[i], vl);\n        v_src2 = vle16_v_u16m1(&src2[i], vl);\n\n        v_mask = vmsgt_vx_u16m1_b16(v_src2, mask, vl);\n\n        v_dst = vmerge_vvm_u16m1(v_mask, v_src1, v_src2, vl);\n\n        vse16_v_u16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n    vuint32m2_t v_mask, v_index;\n    vbool16_t v_cond;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n\n        v_index = vadd_vx_u32m2(v_index, v_index, i);\n        v_mask = vmv_v_x_u32m2(mask, vl);\n        v_cond = vmand_mm_b16(v_index, v_mask);\n\n        v_src1 = vle16_v_u16m1(&src1[i], vl);\n        v_src2 = vle16_v_u16m1(&src2[i], vl);\n        v_dst = vmerge_vvm_u16m1(v_cond, v_src1, v_src2, vl);\n\n        vse16_v_u16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n    vbool16_t v_mask;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n\n        v_src1 = vle16_v_u16m1(&src1[i], vl);\n        v_src2 = vle16_v_u16m1(&src2[i], vl);\n\n        v_mask = vmsgt_vx_u16m1_b16(v_src2, mask, vl);\n\n        v_dst = vmerge_vvm_u16m1(v_mask, v_src1, v_src2, vl);\n\n        vse16_v_u16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n    vuint32m2_t v_mask, v_index;\n    vbool16_t v_cond;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n\n        v_src1 = vle16_v_u16m1(src1 + i, vl);\n        v_src2 = vle16_v_u16m1(src2 + i, vl);\n        v_index = vset_u32m2(i, vl);\n        v_mask = vmv_v_x_u32m2(mask, vl);\n\n        v_cond = vmand_mm_b16(v_index, v_mask);\n\n        v_dst = vmerge_vvm_u16m1(v_src2, v_src1, v_cond, vl);\n\n        vse16_v_u16m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_15_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n    vbool16_t v_mask;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n\n        v_src1 = vle16_v_u16m1(&src1[i], vl);\n        v_src2 = vle16_v_u16m1(&src2[i], vl);\n\n        v_mask = vmsgt_vx_u16m1_b16(v_src2, mask, vl);\n\n        v_dst = vmerge_vvm_u16m1(v_mask, v_src1, v_src2, vl);\n\n        vse16_v_u16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint32m1_t v_ones;\n    vuint32m1_t v_result;\n\n    size_t i = 0;\n    for (i = 0; i < length - (length % 32); i += 32) {\n        vl = vsetvl_e32m1(32);\n        v_src = vle32_v_u32m1(&src[i], vl);\n\n        v_ones = vmseq_vx_u32m1_u32m1(v_src, 1, vl);\n        v_result = vcpop_m_u32m1(v_ones, vl);\n\n        vse32_v_u32m1(&dst[i], v_result, vl);\n    }\n\n    for (; i < length; ++i) {\n        dst[i] = __builtin_popcount(src[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint32m1_t v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_u32m1(&src[i], vl);\n        v_dst = vcpop_v_u32m1(v_src, vl);\n        vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint32m1_t v_ones;\n    vuint32m1_t v_result;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_u32m1(&src[i], vl);\n\n        v_ones = vmseq_vx_u32m1_tu(v_src, v_src, 1);\n        v_result = vcpop_m_u32m1_tu(v_ones, v_result);\n\n        vse32_v_u32m1(&dst[i], v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint32m1_t v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_u32m1(&src[i], vl);\n        v_dst = vcpop_v_u32m1(v_src, vl);\n        vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_16_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src, v_dst;\n    vuint32m1_t v_ones;\n\n    v_ones = __riscv_vmv_v_x_u32m1(1, 32); // Vector of ones\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        v_src = __riscv_vle32_v_u32m1(&src[i], vl);\n\n        v_dst = __riscv_vcpop_m_u32m1(__riscv_vand_vv_u32m1(v_src, v_ones), vl);\n\n        __riscv_vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n\n        v_src1 = vle16_v_u16m1(&src1[i], vl);\n        v_src2 = vle16_v_u16m1(&src2[i], vl);\n\n        v_dst = vadd_vv_u16m1_tu(v_dst, v_src1, v_src2, vl);\n\n        vse16_v_u16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    size_t vl;\n\n    while (i < length) {\n        vl = vsetvl_e16m2(length - i);\n        vuint16m2_t v_src1 = vle16_v_u16m2(src1 + i, vl);\n        vuint16m2_t v_src2 = vle16_v_u16m2(src2 + i, vl);\n        vuint16m2_t v_dst = vadd_vv_u16m2_tu(v_src1, v_src2, vl);\n        vse16_v_u16m2(dst + i, v_dst, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n    vuint16m1_t v_max = __riscv_vmv_v_x_u16m1(UINT16_MAX, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e16m1(length - i);\n\n        v_src1 = __riscv_vle16_v_u16m1(&src1[i], vl);\n        v_src2 = __riscv_vle16_v_u16m1(&src2[i], vl);\n\n        v_dst = __riscv_vadd_vv_u16m1(v_src1, v_src2, vl);\n        v_dst = __riscv_vmin_vx_u16m1(v_dst, v_max, vl);\n\n        __riscv_vse16_v_u16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m1_t v_src1, v_src2, v_dst;\n    vuint16m1_t v_max = vmv_v_x_u16m1(UINT16_MAX, vl);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        v_src1 = vle16_v_u16m1(&src1[i], vl);\n        v_src2 = vle16_v_u16m1(&src2[i], vl);\n        v_dst = vadd_vv_u16m1(v_src1, v_src2, vl);\n        v_dst = vmin_vv_u16m1(v_dst, v_max, vl);\n        vse16_v_u16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_17_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    size_t vl;\n    vuint16m2_t v_src1, v_src2, v_dst;\n    vuint16m2_t v_max = __riscv_vmv_v_x_u16m2(UINT16_MAX, 2);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e16m2(length - i);\n\n        v_src1 = __riscv_vle16_v_u16m2(&src1[i], vl);\n        v_src2 = __riscv_vle16_v_u16m2(&src2[i], vl);\n\n        v_dst = __riscv_vadd_vv_u16m2(v_src1, v_src2, vl);\n        v_dst = __riscv_vmin_vx_u16m2(v_dst, v_max, vl);\n\n        __riscv_vse16_v_u16m2(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t vlmax = vsetvlmax_e64m1();\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            size_t k = 0;\n\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlmax);\n            vbool64_t mask = vfmv_v_b_b64(true, vlmax);\n\n            for (; k <= n - vlmax; k += vlmax) {\n                size_t vl = vsetvl_e64m1(n - k);\n\n                vfloat64m1_t vA = vle64_v_f64m1(&A[i * n + k], vl);\n                vfloat64m1_t vB = vle64_v_f64m1(&B[k * p + j], vl);\n\n                vbool64_t maskA = vmslt_vx_f64m1_b64(vA, 100.0, vl);\n                vbool64_t maskB = vmslt_vx_f64m1_b64(vB, 100.0, vl);\n                vbool64_t maskC = vmsgt_vx_f64m1_b64(vA, -100.0, vl);\n                vbool64_t maskD = vmsgt_vx_f64m1_b64(vB, -100.0, vl);\n\n                vbool64_t maskAB = vand_vv_b64(maskA, maskB, vl);\n                vbool64_t maskCD = vand_vv_b64(maskC, maskD, vl);\n                vbool64_t maskRange = vand_vv_b64(maskAB, maskCD, vl);\n\n                vfloat64m1_t vprod = vfmul_vv_f64m1_m(maskRange, vA, vB, vl);\n                vsum = vfadd_vv_f64m1(vsum, vprod, vl);\n            }\n\n            for (; k < n; ++k) {\n                double a = A[i * n + k];\n                double b = B[k * p + j];\n                if (a >= -100.0 && a <= 100.0 && b >= -100.0 && b <= 100.0) {\n                    sum += a * b;\n                }\n            }\n\n            C[i * p + j] = sum + vfmv_f_s_f64m1_f64(vsum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t vl;\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vc = vfmv_v_f_f64m1(0.0, vl);\n            for (size_t k = 0; k < n; k += vl) {\n                vfloat64m1_t va = vle64_v_f64m1(&A[i * n + k], vl);\n                vfloat64m1_t vb = vle64_v_f64m1(&B[k * p + j], vl);\n                vbool64_t mask_a = vmslt_vf_f64m1_b64(va, -100, vl) | vmsgt_vf_f64m1_b64(va, 100, vl);\n                vbool64_t mask_b = vmslt_vf_f64m1_b64(vb, -100, vl) | vmsgt_vf_f64m1_b64(vb, 100, vl);\n                vbool64_t mask = mask_a | mask_b;\n                va = vmerge_vvm_f64m1(va, vfmv_v_f_f64m1(0.0, vl), mask, vl);\n                vb = vmerge_vvm_f64m1(vb, vfmv_v_f_f64m1(0.0, vl), mask, vl);\n                vc = vfmacc_vv_f64m1(vc, va, vb, vl);\n            }\n            C[i * p + j] = vfmv_f_s_f64m1_f64(vc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t vl = 0;\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vc = vfmv_v_f_f64m1(0.0, vl);\n            for (size_t k = 0; k < n; k += vl) {\n                vl = vsetvl_e64m1(n - k);\n                vfloat64m1_t va = vle64_v_f64m1(&A[i * n + k], vl);\n                vfloat64m1_t vb = vle64_v_f64m1(&B[k * p + j], vl);\n                vbool64_t mask_a = vmslt_vf_f64m1_b64(va, -100, vl);\n                vbool64_t mask_b = vmslt_vf_f64m1_b64(vb, -100, vl);\n                vbool64_t mask_c = vmslt_vf_f64m1_b64(va, 100, vl);\n                vbool64_t mask_d = vmslt_vf_f64m1_b64(vb, 100, vl);\n                vbool64_t mask = vand_vv_b64(vand_vv_b64(mask_a, mask_b, vl), vand_vv_b64(mask_c, mask_d, vl), vl);\n                vfloat64m1_t vprod = vfmacc_vv_f64m1(vc, va, vb, vl);\n                vc = vmerge_vvm_f64m1(vc, vprod, mask, vl);\n            }\n            C[i * p + j] = vfmv_f_s_f64m1_f64(vc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t vl = vsetvl_e64m1(n);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vc = vfmv_v_f_f64m1(0.0, vl);\n\n            for (size_t k = 0; k < n; k += vl) {\n                size_t vl_k = vsetvl_e64m1(n - k);\n                vfloat64m1_t va = vle64_v_f64m1(&A[i * n + k], vl_k);\n                vfloat64m1_t vb = vle64_v_f64m1(&B[k * p + j], vl_k);\n\n                vbool64_t mask_a = vmslt_vf_f64m1_b64(va, -100, vl_k) | vmsgt_vf_f64m1_b64(va, 100, vl_k);\n                vbool64_t mask_b = vmslt_vf_f64m1_b64(vb, -100, vl_k) | vmsgt_vf_f64m1_b64(vb, 100, vl_k);\n                vbool64_t mask = mask_a | mask_b;\n\n                va = vmerge_vvm_f64m1(va, vfmv_v_f_f64m1(0.0, vl_k), mask, vl_k);\n                vb = vmerge_vvm_f64m1(vb, vfmv_v_f64m1(0.0, vl_k), mask, vl_k);\n\n                vc = vfmacc_vv_f64m1(vc, va, vb, vl_k);\n            }\n\n            C[i * p + j] = vfmv_f_s_f64m1_f64(vc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    size_t vl = vsetvl_e64m1(n);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vc = vfmv_v_f_f64m1(0.0, vl);\n\n            for (size_t k = 0; k < n; k += vl) {\n                size_t vl_k = vsetvl_e64m1(n - k);\n                vfloat64m1_t va = vle64_v_f64m1(&A[i * n + k], vl_k);\n                vfloat64m1_t vb = vle64_v_f64m1(&B[k * p + j], vl_k);\n\n                vbool64_t mask_a = vmslt_vx_f64m1_b64(va, 100.0, vl_k) & vmsgt_vx_f64m1_b64(va, -100.0, vl_k);\n                vbool64_t mask_b = vmslt_vx_f64m1_b64(vb, 100.0, vl_k) & vmsgt_vx_f64m1_b64(vb, -100.0, vl_k);\n                vbool64_t mask = mask_a & mask_b;\n\n                vfloat64m1_t vprod = vfmul_vv_f64m1_m(mask, va, vb, vl_k);\n                vc = vfadd_vv_f64m1(vc, vprod, vl_k);\n            }\n\n            C[i * p + j] = vfmv_f_s_f64m1_f64(vc);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vint64m1_t v_a, v_b, v_c;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e64m1(total_size - i);\n        v_a = vle64_v_i64m1(&A[i], vl);\n        v_b = vle64_v_i64m1(&B[i], vl);\n        v_c = vadd_vv_i64m1(v_a, v_b, vl);\n        vse64_v_i64m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vint64m1_t v_a, v_b, v_c;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e64m1(total_size - i);\n\n        v_a = vle64_v_i64m1(&A[i], vl);\n        v_b = vle64_v_i64m1(&B[i], vl);\n\n        v_c = vadd_vv_i64m1(v_a, v_b, vl);\n\n        vse64_v_i64m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vint64m1_t vA, vB, vC;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e64m1(total_size - i);\n        vA = vle64_v_i64m1(&A[i], vl);\n        vB = vle64_v_i64m1(&B[i], vl);\n        vC = vadd_vv_i64m1(vA, vB, vl);\n        vse64_v_i64m1(&C[i], vC, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vint64m1_t v_a, v_b, v_c;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e64m1(total_size - i);\n\n        v_a = vle64_v_i64m1(&A[i], vl);\n        v_b = vle64_v_i64m1(&B[i], vl);\n\n        v_c = vadd_vv_i64m1(v_a, v_b, vl);\n\n        vse64_v_i64m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_19_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vint64m1_t vA, vB, vC;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e64m1(total_size - i);\n        vA = vle64_v_i64m1(&A[i], vl);\n        vB = vle64_v_i64m1(&B[i], vl);\n        vC = vadd_vv_i64m1(vA, vB, vl);\n        vse64_v_i64m1(&C[i], vC, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src1, v_src2, v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src1 = vle32_v_f32m1(&src1[i], vl);\n        v_src2 = vle32_v_f32m1(&src2[i], vl);\n\n        v_dst = vfadd_vv_f32m1(v_src1, v_src2, vl);\n        v_dst = vfrndne_v_f32m1(v_dst, vl);\n\n        vse32_v_f32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src1, v_src2, v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src1 = vle32_v_f32m1(src1 + i, vl);\n        v_src2 = vle32_v_f32m1(src2 + i, vl);\n\n        v_dst = vfadd_vv_f32m1(v_src1, v_src2, vl);\n        v_dst = vfrsub_vf_f32m1(v_dst, 0.5f, vl);\n\n        vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src1, v_src2, v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src1 = vle32_v_f32m1(src1 + i, vl);\n        v_src2 = vle32_v_f32m1(src2 + i, vl);\n\n        v_dst = vfadd_vv_f32m1(v_src1, v_src2, vl);\n        v_dst = vfrndne_v_f32m1(v_dst, vl);\n\n        vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src1, v_src2, v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src1 = vle32_v_f32m1(src1 + i, vl);\n        v_src2 = vle32_v_f32m1(src2 + i, vl);\n\n        v_dst = vfadd_vv_f32m1(v_src1, v_src2, vl);\n        v_dst = vfrint_v_f32m1(v_dst, vl);\n\n        vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_20_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src1, v_src2, v_dst;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src1 = vle32_v_f32m1(src1 + i, vl);\n        v_src2 = vle32_v_f32m1(src2 + i, vl);\n        v_dst = vfadd_vv_f32m1(v_src1, v_src2, vl);\n        v_dst = vfrint_v_f32m1(v_dst, vl);\n        vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_src1, v_src2, v_dst, v_diff, v_abs_diff, v_cond, v_mul, v_rounded;\n    vbool32_t v_mask, v_mask_even;\n    vint32m1_t v_one = __riscv_vmv_v_x_i32m1(1, 1);\n    vint32m1_t v_neg_one = __riscv_vmv_v_x_i32m1(-1, 1);\n    vint32m1_t v_fifty = __riscv_vmv_v_x_i32m1(50, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        v_src1 = __riscv_vle32_v_f32m1(src1 + i, vl);\n        v_src2 = __riscv_vle32_v_f32m1(src2 + i, vl);\n        v_diff = __riscv_vfsgnjn_vv_f32m1(v_src1, v_src2, vl);\n        v_abs_diff = __riscv_vfabs_v_f32m1(v_diff, vl);\n        v_cond = __riscv_vfcvt_x_f_v_i32m1(__riscv_vfcvt_f_x_v_f32m1(v_abs_diff, vl), vl);\n        v_mask = __riscv_vmslt_vv_i32m1_b32(v_cond, v_fifty, vl);\n        v_mask_even = __riscv_vmand_mm_b32(__riscv_vmseq_vi_b32((i / 2) * 2, vl), v_mask, vl);\n        v_mul = __riscv_vfmul_vv_f32m1(v_src1, v_src2, vl);\n        v_rounded = __riscv_vfcvt_rtz_x_f_v_i32m1(v_mul, vl);\n        v_dst = __riscv_vmerge_vxm_f32m1(v_rounded, v_neg_one, v_mask_even, vl);\n        __riscv_vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    vfloat32m1_t v_src1, v_src2, v_dst, v_diff, v_abs_diff, v_cond, v_mul, v_rounded;\n    vbool32_t v_mask, v_mask_even;\n\n    v_mask_even = __riscv_vmand(__riscv_vmsbf(i), __riscv_vmseq(i, i), 1);\n\n    for (i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n\n        v_src1 = __riscv_vle32_v_f32m1(src1 + i, vl);\n        v_src2 = __riscv_vle32_v_f32m1(src2 + i, vl);\n\n        v_diff = __riscv_vfsub_vv_f32m1(v_src1, v_src2, vl);\n        v_abs_diff = __riscv_vfabs_v_f32m1(v_diff, vl);\n\n        v_cond = __riscv_vmsle_vf_f32m1_b(v_abs_diff, 50.0, vl);\n        v_mask = __riscv_vmand_mm_b(v_cond, v_mask_even, vl);\n\n        v_mul = __riscv_vfmul_vv_f32m1(v_src1, v_src2, vl);\n        v_rounded = __riscv_vfceil_v_f32m1(v_mul, vl);\n\n        v_dst = __riscv_vmerge_vvm_f32m1(v_rounded, -1.0, v_mask, vl);\n\n        __riscv_vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    vfloat32m1_t v_src1, v_src2, v_dst, v_diff, v_abs_diff, v_cond, v_mul, v_rounded;\n    vbool32_t v_mask, v_mask_even;\n\n    v_mask_even = __riscv_vmand(__riscv_vmsbf(i), __riscv_vmseq(i, 2), vl);\n\n    for (i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n\n        v_src1 = __riscv_vle32_v_f32m1(src1 + i, vl);\n        v_src2 = __riscv_vle32_v_f32m1(src2 + i, vl);\n\n        v_diff = __riscv_vfsub_vv_f32m1(v_src1, v_src2, vl);\n        v_abs_diff = __riscv_vfabs_v_f32m1(v_diff, vl);\n\n        v_cond = __riscv_vmsle_vf_f32m1_b(v_abs_diff, 50.0, vl);\n        v_mask = __riscv_vmand(v_cond, v_mask_even, vl);\n\n        v_mul = __riscv_vfmul_vv_f32m1(v_src1, v_src2, vl);\n        v_rounded = __riscv_vfceil_v_f32m1(v_mul, vl);\n\n        v_dst = __riscv_vmerge_vvm_f32m1(v_rounded, -1.0, v_mask, vl);\n\n        __riscv_vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    vfloat32m1_t v_src1, v_src2, v_dst, v_diff, v_abs_diff, v_cond, v_mul, v_rounded;\n    vbool32_t v_mask, v_mask_even;\n\n    vl = vsetvl_e32m1(length);\n    v_mask_even = vmsbf_m_b32_b8(vundoct_b8(vand_vx_i32m1_b8(vset_v_i32m1_i32(0, vl), 1, vl)), vl);\n\n    for (; i < (length & ~(vl - 1)); i += vl) {\n        v_src1 = vle32_v_f32m1(src1 + i, vl);\n        v_src2 = vle32_v_f32m1(src2 + i, vl);\n        v_diff = vfsub_vv_f32m1(v_src1, v_src2, vl);\n        v_abs_diff = vfabs_v_f32m1(v_diff, vl);\n        v_cond = vmslt_vf_f32m1_b(v_abs_diff, 50.0f, vl);\n        v_mask = vand_vm_b32(v_cond, v_mask_even, vl);\n        v_mul = vfmul_vv_f32m1(v_src1, v_src2, vl);\n        v_rounded = vfcvt_xu_f_v_f32m1(v_mul, vl);\n        v_dst = vmerge_vvm_f32m1(v_rounded, -1.0f, v_mask, vl);\n        vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n\n    for (; i < length; ++i) {\n        if ((i % 2 == 0) && (fabsf(src1[i] - src2[i]) < 50.0f)) {\n            dst[i] = ceilf(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    vfloat32m1_t v_src1, v_src2, v_dst, v_diff, v_abs_diff, v_cond, v_mul, v_rounded;\n    vbool32_t v_mask, v_mask_even;\n\n    v_mask_even = __riscv_vmand(__riscv_vmsbf(i), __riscv_vmseq(i, 2), vl);\n\n    for (i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n\n        v_src1 = __riscv_vle32_v_f32m1(src1 + i, vl);\n        v_src2 = __riscv_vle32_v_f32m1(src2 + i, vl);\n\n        v_diff = __riscv_vfsub_vv_f32m1(v_src1, v_src2, vl);\n        v_abs_diff = __riscv_vfabs_v_f32m1(v_diff, vl);\n\n        v_cond = __riscv_vmslt_vf_f32m1_b(v_abs_diff, 50.0, vl);\n        v_mask = __riscv_vmand(v_cond, v_mask_even, vl);\n\n        v_mul = __riscv_vfmul_vv_f32m1(v_src1, v_src2, vl);\n        v_rounded = __riscv_vfceil_v_f32m1(v_mul, vl);\n\n        v_dst = __riscv_vmerge_vvm_f32m1(v_rounded, -1.0, v_mask, vl);\n\n        __riscv_vse32_v_f32m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t vl;\n    vfloat64m1_t v_scalar = vfmv_v_f_f64m1(scalar, vl);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; j += vl) {\n            vfloat64m1_t v_mat = vle64_v_f64m1(&mat[i * n + j], vl);\n            vfloat64m1_t v_result = vfmul_vv_f64m1(v_mat, v_scalar, vl);\n            vse64_v_f64m1(&dst[i * n + j], v_result, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t vl;\n    vdouble_t v_scalar = _rvv_fmv_s_x_d(scalar);\n\n    for (size_t i = 0; i < m; ++i) {\n        const double* row_start = mat + i * n;\n        double* dst_row_start = dst + i * n;\n        size_t j = 0;\n\n        for (; j + _rvv_cnt_d() <= n; j += _rvv_cnt_d()) {\n            vdouble_t v_mat = _rvv_lv_d(row_start + j);\n            vdouble_t v_result = _rvv_fmul_vv_d(v_mat, v_scalar, vl);\n            _rvv_sv_d(dst_row_start + j, v_result, vl);\n        }\n\n        for (; j < n; ++j) {\n            dst_row_start[j] = row_start[j] * scalar;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t vl;\n    vdouble_t v_scalar = _rvv_fmv_s_x_d(scalar, 8);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; j += vl) {\n            vl = _rvv_vsetvl_e64m1(n - j);\n            vdouble_t v_mat = _rvv_vle64_v_d(&mat[i * n + j], vl);\n            vdouble_t v_result = _rvv_vfmul_vv_d(v_mat, v_scalar, vl);\n            _rvv_vse64_v_d(&dst[i * n + j], v_result, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t vl;\n    vfloat64m1_t v_scalar = vfmv_v_f_f64m1(scalar, vl);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < n; j += vl) {\n            vfloat64m1_t v_mat = vle64_v_f64m1(&mat[i * n + j], vl);\n            vfloat64m1_t v_result = vfmul_vv_f64m1(v_mat, v_scalar, vl);\n            vse64_v_f64m1(&dst[i * n + j], v_result, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t vl;\n    vdouble_t v_scalar = _vv_set_f64(scalar);\n\n    for (size_t i = 0; i < m; ++i) {\n        const double* mat_row = mat + i * n;\n        double* dst_row = dst + i * n;\n        size_t j = 0;\n\n        for (; j + _vv_cnt_64() <= n; j += _vv_cnt_64()) {\n            vdouble_t v_mat = _vv_load_f64(mat_row + j);\n            vdouble_t v_result = _vv_fmul_f64(v_mat, v_scalar);\n            _vv_store_f64(dst_row + j, v_result);\n        }\n\n        for (; j < n; ++j) {\n            dst_row[j] = mat_row[j] * scalar;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vl;\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        vfloat32m1_t v_sum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n\n        for (size_t j = 0; j < n; j += vl) {\n            vl = __riscv_vsetvl_e32m1(n - j);\n            vfloat32m1_t v_row = __riscv_vle32_v_f32m1(&mat[i * n + j], vl);\n            v_sum = _rvv_vfadd_vv_f32m1(v_sum, _rvv_vfmul_vv_f32m1(v_row, v_row, vl), vl);\n        }\n\n        sum = _rvv_fmv_f_s_f32m1(v_sum);\n        float norm = sqrtf(sum);\n\n        for (size_t j = 0; j < n; j += vl) {\n            vl = __riscv_vsetvl_e32m1(n - j);\n            vfloat32m1_t v_row = __riscv_vle32_v_f32m1(&mat[i * n + j], vl);\n            vfloat32m1_t v_norm = _rvv_vfmv_v_f_f32m1(norm, vl);\n            vfloat32m1_t v_result = _rvv_vfdiv_vv_f32m1(v_row, v_norm, vl);\n            __riscv_vse32_v_f32m1(&mat[i * n + j], v_result, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vl;\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        vfloat32m1_t v_sum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n\n        for (size_t j = 0; j < n; j += vl) {\n            vl = __riscv_vsetvl_e32m1(n - j);\n            vfloat32m1_t v_row = __riscv_vle32_v_f32m1(mat + i * n + j, vl);\n            v_sum = _rvv_vfmacc_vf_f32m1(v_sum, 0.0f, v_row, vl);\n        }\n\n        sum = _rvv_fmv_f_s_f32m1(v_sum, 1);\n        float norm = sqrtf(sum);\n\n        for (size_t j = 0; j < n; j += vl) {\n            vl = __riscv_vsetvl_e32m1(n - j);\n            vfloat32m1_t v_row = __riscv_vle32_v_f32m1(mat + i * n + j, vl);\n            vfloat32m1_t v_norm = _rvv_vfmv_v_f_f32m1(norm, vl);\n            vfloat32m1_t v_normalized = _rvv_vfdv_vv_f32m1(v_row, v_norm, vl);\n            __riscv_vse32_v_f32m1(mat + i * n + j, v_normalized, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vl;\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        vfloat32m1_t v_sum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n\n        size_t j = 0;\n        for (; j + vl <= n; j += vl) {\n            vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t v = vle32_v_f32m1(mat + i * n + j, vl);\n            v_sum = _rvv_vfmacc_vf_f32m1(v_sum, 0.0f, v, vl);\n        }\n\n        sum = _rvv_fmv_f_s_f32m1(v_sum, 1);\n\n        for (; j < n; ++j) {\n            sum += mat[i * n + j];\n        }\n\n        float norm = 1.0f / sqrtf(sum);\n\n        j = 0;\n        for (; j + vl <= n; j += vl) {\n            vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t v = vle32_v_f32m1(mat + i * n + j, vl);\n            vfloat32m1_t v_norm = _rvv_vfmv_v_f_f32m1(norm, vl);\n            v = _rvv_vfdiv_vv_f32m1(v, v_norm, vl);\n            vse32_v_f32m1(mat + i * n + j, v, vl);\n        }\n\n        for (; j < n; ++j) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vl;\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        size_t j = 0;\n\n        // Calculate the L^2 norm of the row\n        for (; j + vlmax_f32() <= n; j += vlmax_f32()) {\n            vfloat32m1_t v = vle32_v_f32m1(&mat[i * n + j], vlmax_f32());\n            vfloat32m1_t v_sq = vmul_vv_f32m1(v, v, vlmax_f32());\n            sum += vredsum_vs_f32m1_f32m1(v_sq, v_sq, vredsum_vs_f32m1_f32m1(v_sq, v_sq, vlmax_f32()));\n        }\n\n        // Handle remaining elements\n        for (; j < n; ++j) {\n            sum += mat[i * n + j] * mat[i * n + j];\n        }\n\n        float norm = sqrtf(sum);\n\n        // Normalize the row\n        j = 0;\n        for (; j + vlmax_f32() <= n; j += vlmax_f32()) {\n            vfloat32m1_t v = vle32_v_f32m1(&mat[i * n + j], vlmax_f32());\n            vfloat32m1_t v_norm = vdiv_vs_f32m1(v, norm, vlmax_f32());\n            vse32_v_f32m1(&mat[i * n + j], v_norm, vlmax_f32());\n        }\n\n        // Handle remaining elements\n        for (; j < n; ++j) {\n            mat[i * n + j] /= norm;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vl;\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        vfloat32m1_t v_sum = _rvv_fmv_s_f_f32m1(0.0f, 1);\n\n        // Calculate the sum of squares for the current row\n        for (size_t j = 0; j < n; j += vl) {\n            vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t v_row = vle32_v_f32m1(&mat[i * n + j], vl);\n            v_sum = _rvv_vfadd_vv_f32m1(v_sum, _rvv_vfmul_vv_f32m1(v_row, v_row, vl), vl);\n        }\n\n        // Reduce the sum of squares\n        sum = _rvv_vfredsum_vs_f32m1_f32m1(sum, v_sum, v_sum, vl);\n        float norm = sqrtf(sum);\n\n        // Normalize the row\n        for (size_t j = 0; j < n; j += vl) {\n            vl = vsetvl_e32m1(n - j);\n            vfloat32m1_t v_row = vle32_v_f32m1(&mat[i * n + j], vl);\n            vfloat32m1_t v_norm = _rvv_vfdiv_vf_f32m1(v_row, norm, vl);\n            vse32_v_f32m1(&mat[i * n + j], v_norm, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t vlmax = vsetvlmax_e64m1();\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            double sum = 0.0;\n            size_t k = 0;\n\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlmax);\n\n            for (; k + vlmax <= n; k += vlmax) {\n                size_t vl = vsetvl_e64m1(n - k);\n\n                vfloat64m1_t vmat1 = vle64_v_f64m1(&mat1[i * n + k], vl);\n                vfloat64m1_t vmat2 = vle64_v_f64m1(&mat2[k * p + j], vl);\n\n                vsum = vfmacc_vv_f64m1(vsum, vmat1, vmat2, vl);\n            }\n\n            sum = vfmv_f_s_f64m1_f64(vsum);\n\n            for (; k < n; ++k) {\n                sum += mat1[i * n + k] * mat2[k * p + j];\n            }\n\n            dst[i * p + j] = nearbyint(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t vlmax = vsetvlmax_e64m1();\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlmax);\n\n            for (size_t k = 0; k < n; k += vlmax) {\n                size_t vl = vsetvl_e64m1(n - k);\n                vfloat64m1_t vmat1 = vle64_v_f64m1(&mat1[i * n + k], vl);\n                vfloat64m1_t vmat2 = vle64_v_f64m1(&mat2[k * p + j], vl);\n                vfloat64m1_t vprod = vfmul_vv_f64m1(vmat1, vmat2, vl);\n                vsum = vfadd_vv_f64m1(vsum, vprod, vl);\n            }\n\n            double sum = vfmv_f_s_f64m1_f64(vsum);\n            dst[i * p + j] = nearbyint(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t vlmax = vsetvlmax_e64m1();\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlmax);\n\n            for (size_t k = 0; k < n; ++k) {\n                vfloat64m1_t vmat1 = vle64_v_f64m1(&mat1[i * n + k], vlmax);\n                vfloat64m1_t vmat2 = vle64_v_f64m1(&mat2[k * p + j], vlmax);\n                vsum = vfmacc_vv_f64m1(vsum, vmat1, vmat2, vlmax);\n            }\n\n            double sum = vfmv_f_s_f64m1_f64(vsum);\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t vlmax = vsetvlmax_e64m1();\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlmax);\n\n            for (size_t k = 0; k < n; ++k) {\n                vfloat64m1_t vmat1 = vle64_v_f64m1(&mat1[i * n + k], vlmax);\n                vfloat64m1_t vmat2 = vle64_v_f64m1(&mat2[k * p + j], vlmax);\n                vsum = vfmacc_vv_f64m1(vsum, vmat1, vmat2, vlmax);\n            }\n\n            double sum = 0.0;\n            vse64_v_f64m1(&sum, vsum, vlmax);\n            dst[i * p + j] = nearbyint(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    size_t vlen = 8;\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlen);\n            for (size_t k = 0; k < n; k += vlen) {\n                vfloat64m1_t vmat1 = vle64_v_f64m1(&mat1[i * n + k], vlen);\n                vfloat64m1_t vmat2 = vle64_v_f64m1(&mat2[k * p + j], vlen);\n                vsum = vfmacc_vv_f64m1(vsum, vmat1, vmat2, vlen);\n            }\n            double sum = 0.0;\n            vse64_v_f64m1(&sum, vsum, vlen);\n            dst[i * p + j] = round(sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t i, j;\n\n    for (i = 0; i < rows; i += vlmax) {\n        size_t vl = vsetvl_e32m1(cols);\n        vfloat32m1_t v0 = vle32_v_f32m1(src + i * cols, vl);\n\n        for (j = 0; j < cols; j++) {\n            float value = vfloat32m1_t_get_element(v0, j);\n            value = roundf(value * 4) / 4;\n            dst[j * rows + i] = value;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    size_t vl;\n\n    for (i = 0; i < rows; ++i) {\n        for (j = 0; j < cols; ++j) {\n            vfloat32m1_t v_src = vle32_v_f32m1(&src[i * cols + j], vl);\n            vfloat32m1_t v_rounded = vrndsc_v_f32m1_f32m1(v_src, 2, vl); // Round to nearest quarter\n            vse32_v_f32m1(&dst[j * rows + i], v_rounded, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    size_t vl;\n\n    for (i = 0; i < rows; ++i) {\n        for (j = 0; j < cols; j += vl) {\n            vl = vsetvl_e32m1(cols - j);\n\n            vfloat32m1_t v_src = vle32_v_f32m1(&src[i * cols + j], vl);\n            vfloat32m1_t v_rounded = vrndsc_v_f32m1(v_src, 2, vl); // Round to nearest quarter (0.25)\n\n            vse32_v_f32m1(&dst[j * rows + i], v_rounded, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t i, j;\n    size_t vl;\n    vfloat32m1_t v_src, v_dst;\n    vfloat32m1_t v_quarter = __riscv_vmv_v_f_f32m1(0.25f, 1);\n\n    for (i = 0; i < rows; ++i) {\n        for (j = 0; j < cols; ++j) {\n            vl = __riscv_vsetvl_e32m1(cols - j);\n            v_src = __riscv_vle32_v_f32m1(&src[i * cols + j], vl);\n            v_dst = __riscv_vfrsub_vf_f32m1(v_src, v_quarter, vl);\n            v_dst = __riscv_vfmul_vf_f32m1(v_dst, v_quarter, vl);\n            __riscv_vse32_v_f32m1(&dst[j * rows + i], v_dst, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    size_t vl;\n    vfloat32m1_t v0, v1, v2, v3;\n    vfloat32m1_t v_0_25 = _rvv_fmv_s_f_f32m1(0.25f, 8);\n\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += vl) {\n            vl = __riscv_vsetvl_e32m1(cols - j);\n            v0 = __riscv_vle32_v_f32m1(&src[i * cols + j], vl);\n            v1 = __riscv_vfmul_vv_f32m1(v0, v_0_25, vl);\n            v2 = __riscv_vfrsub_vf_f32m1(v1, v_0_25, vl);\n            v3 = __riscv_vfadd_vf_f32m1(v2, v_0_25, vl);\n            __riscv_vse32_v_f32m1(&dst[j * rows + i], v3, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (i = 0; i + vsetvl_e32m1(15) <= total_size; i += vsetvl_e32m1(15)) {\n        vfloat32m1_t v1 = vle32_v_f32m1(tensor1 + i, vsetvl_e32m1(15));\n        vfloat32m1_t v2 = vle32_v_f32m1(tensor2 + i, vsetvl_e32m1(15));\n        vfloat32m1_t v_sub = vfsub_vv_f32m1(v1, v2, vsetvl_e32m1(15));\n        vfloat32m1_t v_round = vfrsub_vf_f32m1(v_sub, 0.5f, vsetvl_e32m1(15));\n        vse32_v_f32m1(dst + i, v_round, vsetvl_e32m1(15));\n    }\n\n    for (; i < total_size; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floorf(result) : ceilf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vfloat32m1_t v1, v2, v_res;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m1(total_size - i);\n\n        v1 = vle32_v_f32m1(tensor1 + i, vl);\n        v2 = vle32_v_f32m1(tensor2 + i, vl);\n\n        v_res = vfsub_vv_f32m1(v1, v2, vl);\n\n        v_res = vfrsub_vf_f32m1(v_res, 0.5f, vl);\n        v_res = vfadd_vv_f32m1(v_res, v_res, vl);\n        v_res = vfcvt_x_f_v_f32m1(v_res, vl);\n        v_res = vfcvt_f_x_v_f32m1(v_res, vl);\n\n        vse32_v_f32m1(dst + i, v_res, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (i = 0; i + vsetvl_e32m1(15) <= total_size; i += vsetvl_e32m1(15)) {\n        vfloat32m1_t v1 = vle32_v_f32m1(tensor1 + i, vsetvl_e32m1(15));\n        vfloat32m1_t v2 = vle32_v_f32m1(tensor2 + i, vsetvl_e32m1(15));\n        vfloat32m1_t v_sub = vfsub_vv_f32m1(v1, v2, vsetvl_e32m1(15));\n        vfloat32m1_t v_round = vfrsub_vf_f32m1(v_sub, 0.5f, vsetvl_e32m1(15));\n        vse32_v_f32m1(dst + i, v_round, vsetvl_e32m1(15));\n    }\n\n    for (; i < total_size; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floorf(result) : ceilf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vfloat32m1_t v1, v2, v_result;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m1(total_size - i);\n\n        v1 = vle32_v_f32m1(tensor1 + i, vl);\n        v2 = vle32_v_f32m1(tensor2 + i, vl);\n\n        v_result = vfsfn_vv_f32m1(v1, v2, vl);\n\n        vse32_v_f32m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_26_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vfloat32m1_t v1, v2, v_result;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m1(total_size - i);\n\n        v1 = vle32_v_f32m1(tensor1 + i, vl);\n        v2 = vle32_v_f32m1(tensor2 + i, vl);\n\n        v_result = vfsub_vv_f32m1(v1, v2, vl);\n        v_result = vfrsub_vf_f32m1(v_result, 0.5f, vl);\n\n        vse32_v_f32m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t vl;\n    size_t total_elements = m * n;\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vfloat64m1_t v_mat1 = __riscv_vle64_v_f64m1(mat1 + i, vl);\n        vfloat64m1_t v_mat2 = __riscv_vle64_v_f64m1(mat2 + i, vl);\n        vfloat64m1_t v_result = __riscv_vfmul_vv_f64m1(v_mat1, v_mat2, vl);\n        __riscv_vse64_v_f64m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t vl;\n    size_t total_elements = m * n;\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vfloat64m1_t v_mat1 = vle64_v_f64m1(mat1 + i, vl);\n        vfloat64m1_t v_mat2 = vle64_v_f64m1(mat2 + i, vl);\n        vfloat64m1_t v_result = vfmul_vv_f64m1(v_mat1, v_mat2, vl);\n        vse64_v_f64m1(dst + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t vl;\n    size_t i, j;\n    for (i = 0; i < m; ++i) {\n        for (j = 0; j < n; j += vl) {\n            vfloat64m1_t v1 = vle64_v_f64m1(mat1 + i * n + j, vl);\n            vfloat64m1_t v2 = vle64_v_f64m1(mat2 + i * n + j, vl);\n            vfloat64m1_t vd = vfmul_vv_f64m1(v1, v2, vl);\n            vse64_v_f64m1(dst + i * n + j, vd, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t vl;\n    size_t i, j;\n    for (i = 0; i < m; ++i) {\n        for (j = 0; j < n; j += vl) {\n            vfloat64m1_t v1 = vle64_v_f64m1(mat1 + i * n + j, vl);\n            vfloat64m1_t v2 = vle64_v_f64m1(mat2 + i * n + j, vl);\n            vfloat64m1_t vd = vfmul_vv_f64m1(v1, v2, vl);\n            vse64_v_f64m1(dst + i * n + j, vd, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t vl;\n    size_t total_elements = m * n;\n    size_t i = 0;\n\n    for (i = 0; i < total_elements - (total_elements % 8); i += 8) {\n        vfloat64m1_t v1 = vle64_v_f64m1(&mat1[i], vl);\n        vfloat64m1_t v2 = vle64_v_f64m1(&mat2[i], vl);\n        vfloat64m1_t v_result = vfmul_vv_f64m1(v1, v2, vl);\n        vse64_v_f64m1(&dst[i], v_result, vl);\n    }\n\n    for (; i < total_elements; ++i) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t vl;\n    vfloat32m1_t v_vec;\n    vfloat32m1_t v_mat;\n    vfloat32m1_t v_result;\n\n    for (size_t i = 0; i < m; ++i) {\n        v_result = vfmv_v_f_f32m1(0.0f, vl);\n\n        for (size_t j = 0; j < n; j += vl) {\n            vl = vsetvl_e32m1(n - j);\n            v_vec = vle32_v_f32m1(&vec[j], vl);\n            v_mat = vle32_v_f32m1(&mat[i * n + j], vl);\n            v_result = vfmacc_vv_f32m1(v_result, v_mat, v_vec, vl);\n        }\n\n        dst[i] = vfmv_f_s_f32m1_f32(v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t vl;\n    vfloat32m1_t vec_v = __riscv_vle32_v_f32m1(vec, vl);\n\n    for (size_t i = 0; i < m; ++i) {\n        vfloat32m1_t sum_v = __riscv_vmv_v_x_f32m1(0.0f, vl);\n        const float* mat_row = mat + i * n;\n\n        size_t j = 0;\n        for (; j + vl <= n; j += vl) {\n            vfloat32m1_t mat_v = __riscv_vle32_v_f32m1(mat_row + j, vl);\n            sum_v = __riscv_vfmul_vv_f32m1(sum_v, mat_v, vec_v, vl);\n        }\n\n        float sum = __riscv_vfredsum_vs_f32m1_f32m1(sum_v, sum_v, __riscv_vmv_v_x_f32m1(0.0f, vl), vl);\n\n        for (; j < n; ++j) {\n            sum += mat_row[j] * vec[j];\n        }\n\n        dst[i] = sum;\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t vl;\n    vfloat32m1_t vec_v;\n    vfloat32m1_t mat_v;\n    vfloat32m1_t result_v = _vv_set_f32m1(0.0f, vl);\n\n    for (size_t i = 0; i < m; ++i) {\n        result_v = _vv_set_f32m1(0.0f, vl);\n        for (size_t j = 0; j < n; j += vl) {\n            vl = vsetvl_e32m1(n - j);\n            vec_v = _vv_load_f32m1(&vec[j], vl);\n            mat_v = _vv_load_f32m1(&mat[i * n + j], vl);\n            result_v = _vv_fmacc_vv_f32m1(result_v, mat_v, vec_v, vl);\n        }\n        vl = vsetvl_e32m1(1);\n        _vv_store_f32m1(&dst[i], result_v, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t vl;\n    vfloat32m1_t vec_v;\n    vfloat32m1_t mat_v;\n    vfloat32m1_t result_v;\n\n    vl = vsetvl_e32m1(n);\n    vec_v = vle32_v_f32m1(vec, vl);\n\n    for (size_t i = 0; i < m; ++i) {\n        result_v = vfmv_v_f_f32m1(0.0f, vl);\n\n        size_t j = 0;\n        for (; j <= n - vl; j += vl) {\n            mat_v = vle32_v_f32m1(&mat[i * n + j], vl);\n            result_v = vfmacc_vv_f32m1(result_v, mat_v, vec_v, vl);\n        }\n\n        if (j < n) {\n            vl = vsetvl_e32m1(n - j);\n            mat_v = vle32_v_f32m1(&mat[i * n + j], vl);\n            result_v = vfmacc_vv_f32m1(result_v, mat_v, vec_v, vl);\n        }\n\n        vse32_v_f32m1(&dst[i], result_v, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_28_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    size_t vl;\n    vfloat32m1_t vec_v;\n    vfloat32m1_t mat_v;\n    vfloat32m1_t res_v = _vvsetvli_f32m1(0.0f, vl);\n\n    for (size_t i = 0; i < m; ++i) {\n        res_v = _vvsetvli_f32m1(0.0f, vl);\n        const float* mat_row = mat + i * n;\n        size_t j = 0;\n        for (; j + vl <= n; j += vl) {\n            vec_v = _vle32_v_f32m1(vec + j, vl);\n            mat_v = _vle32_v_f32m1(mat_row + j, vl);\n            res_v = _vfmacc_vv_f32m1(res_v, mat_v, vec_v, vl);\n        }\n        for (; j < n; ++j) {\n            dst[i] += mat_row[j] * vec[j];\n        }\n        dst[i] += _vfredusum_vs_f32m1_f32m1(res_v, res_v, _vvsetvli_f32m1(0.0f, vl), vl);\n    }\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    size_t total_elements = m * n;\n    size_t vector_iterations = total_elements / vlen;\n    size_t remainder = total_elements % vlen;\n\n    vfloat64m1_t vsum = _rvv_fmv_s_x_f64m1(vsum, 0.0, 8); // Initialize vector sum to 0\n    double scalar_sum = 0.0;\n\n    for (size_t i = 0; i < vector_iterations; ++i) {\n        vfloat64m1_t vdata = _rvv_lv_f64m1(mat + i * vlen, vlen); // Load vector\n        vsum = _rvv_fadd_vv_f64m1(vsum, vdata, vlen); // Add to vector sum\n    }\n\n    // Reduce vector sum to scalar sum\n    double vsum_array[vlen];\n    _rvv_sv_f64m1(vsum_array, vsum, vlen);\n    for (size_t i = 0; i < vlen; ++i) {\n        scalar_sum += vsum_array[i];\n    }\n\n    // Process remainder elements\n    for (size_t i = vector_iterations * vlen; i < total_elements; ++i) {\n        scalar_sum += mat[i];\n    }\n\n    return scalar_sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t vlmax = vsetvlmax_e64m1();\n    vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlmax);\n    size_t total_elements = m * n;\n    size_t i;\n\n    for (i = 0; i + vlmax <= total_elements; i += vlmax) {\n        vfloat64m1_t vdata = vle64_v_f64m1(&mat[i], vlmax);\n        vsum = _vbadd_vv_f64m1(vsum, vdata, vlmax);\n    }\n\n    if (i < total_elements) {\n        size_t vl = total_elements - i;\n        vfloat64m1_t vdata = vle64_v_f64m1(&mat[i], vl);\n        vsum = _vbadd_vv_f64m1(vsum, vdata, vl);\n    }\n\n    double sum = 0.0;\n    for (size_t j = 0; j < vlmax; ++j) {\n        sum += vfloat64m1_t_get_f64m1(vsum, j);\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    size_t total_elements = m * n;\n    size_t i;\n\n    vfloat64m1_t vsum = _rvv_fmv_v_f_f64m1(0.0, 8); // Initialize vector sum to 0\n    double sum = 0.0;\n\n    for (i = 0; i < total_elements - vlen; i += vlen) {\n        vfloat64m1_t vdata = _rvv_lv_d_f64m1(mat + i, 8); // Load vector data\n        vsum = _rvv_fadd_vv_f64m1(vsum, vdata, 8); // Add to vector sum\n    }\n\n    // Reduce vector sum to scalar sum\n    _rvv_vse64_v_f64m1(&sum, vsum, 8);\n\n    // Handle remaining elements\n    for (; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t vlen = 8;  // Assuming vector length of 8 for double precision\n    size_t total_elements = m * n;\n    size_t i;\n    double sum = 0.0;\n    vdouble vsum = _rvv_fmv_v_f_d(0.0);  // Initialize vector sum to 0\n\n    for (i = 0; i < total_elements - vlen; i += vlen) {\n        vdouble vdata = _rvv_lv_d(mat + i);  // Load vector data\n        vsum = _rvv_fadd_vv_d(vsum, vdata);  // Add to vector sum\n    }\n\n    // Reduce vector sum to scalar sum\n    double temp[8];\n    _rvv_sv_d(temp, vsum);\n    for (size_t j = 0; j < vlen; ++j) {\n        sum += temp[j];\n    }\n\n    // Handle remaining elements\n    for (; i < total_elements; ++i) {\n        sum += mat[i];\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t vlmax = vsetvlmax_e64m1();\n    vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlmax);\n    size_t total_elements = m * n;\n    size_t i;\n\n    for (i = 0; i + vlmax <= total_elements; i += vlmax) {\n        vfloat64m1_t vdata = vle64_v_f64m1(&mat[i], vlmax);\n        vsum = _vbadd_vv_f64m1(vsum, vdata, vlmax);\n    }\n\n    if (i < total_elements) {\n        size_t vl = total_elements - i;\n        vfloat64m1_t vdata = vle64_v_f64m1(&mat[i], vl);\n        vsum = _vbadd_vv_f64m1(vsum, vdata, vl);\n    }\n\n    double sum = 0.0;\n    for (size_t j = 0; j < vlmax; ++j) {\n        sum += vfloat64m1_t_get_f64m1(vsum, j);\n    }\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    size_t vector_length = 0;\n    vsetvl_e32m1(vector_length, cols);\n\n    for (size_t i = 0; i < rows; ++i) {\n        bool direction = directions[i];\n        const int* row = matrix + i * cols;\n\n        for (size_t j = 0; j < cols - 1; j += vector_length) {\n            vint32m1_t vec1 = vle32_v_i32m1(row + j, vector_length);\n            vint32m1_t vec2 = vle32_v_i32m1(row + j + 1, vector_length);\n\n            if (direction) {\n                vbool32_t mask = vmsgt_vv_i32m1_b32(vec1, vec2, vector_length);\n                if (vfirst_m_b32(mask, vector_length) != -1) {\n                    return false;\n                }\n            } else {\n                vbool32_t mask = vmslt_vv_i32m1_b32(vec1, vec2, vector_length);\n                if (vfirst_m_b32(mask, vector_length) != -1) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    size_t vector_bits = 128; // Example vector length, adjust as needed\n    size_t elements_per_vector = vector_bits / 32;\n\n    for (size_t i = 0; i < rows; ++i) {\n        bool direction = directions[i];\n        const int* row = matrix + i * cols;\n\n        size_t j;\n        for (j = 0; j <= cols - elements_per_vector; j += elements_per_vector) {\n            vint32m1_t vec = vle32_v_i32m1(row + j, elements_per_vector);\n            vint32m1_t vec_next = vle32_v_i32m1(row + j + 1, elements_per_vector);\n\n            if (direction) {\n                vbool32_t mask = vmflt_vv_i32m1_b(vec, vec_next);\n                if (!vfirst_m_b32(mask, elements_per_vector)) {\n                    return false;\n                }\n            } else {\n                vbool32_t mask = vmflt_vv_i32m1_b(vec_next, vec);\n                if (!vfirst_m_b32(mask, elements_per_vector)) {\n                    return false;\n                }\n            }\n        }\n\n        for (; j < cols - 1; ++j) {\n            if (direction) {\n                if (row[j] > row[j + 1]) {\n                    return false;\n                }\n            } else {\n                if (row[j] < row[j + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    size_t vector_bits = 128; // Example vector length\n    size_t vector_elements = vector_bits / 32; // Number of 32-bit elements in the vector\n\n    for (size_t i = 0; i < rows; ++i) {\n        bool direction = directions[i];\n        const int* row = matrix + i * cols;\n\n        size_t j;\n        for (j = 0; j <= cols - vector_elements; j += vector_elements) {\n            vint32m1_t vec1 = __riscv_vle32_v_i32m1(row + j, vector_elements);\n            vint32m1_t vec2 = __riscv_vle32_v_i32m1(row + j + 1, vector_elements);\n\n            if (direction) {\n                vbool32_t mask = __riscv_vmfgt_vv_i32m1_b(vec1, vec2, vector_elements);\n                if (__riscv_vmfirst_m_b(mask, mask)) {\n                    return false;\n                }\n            } else {\n                vbool32_t mask = __riscv_vmflt_vv_i32m1_b(vec1, vec2, vector_elements);\n                if (__riscv_vmfirst_m_b(mask, mask)) {\n                    return false;\n                }\n            }\n        }\n\n        for (; j < cols - 1; ++j) {\n            if (direction && row[j] > row[j + 1]) {\n                return false;\n            }\n            if (!direction && row[j] < row[j + 1]) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    size_t vector_bits = 128; // Example vector length\n    size_t elements_per_vector = vector_bits / sizeof(int);\n\n    for (size_t i = 0; i < rows; ++i) {\n        bool sorted = true;\n        bool ascending = directions[i];\n\n        for (size_t j = 0; j < cols - 1; j += elements_per_vector) {\n            size_t chunk_size = (j + elements_per_vector < cols - 1) ? elements_per_vector : cols - 1 - j;\n            vint32m1_t vec1 = vle32_v_i32m1(&matrix[i * cols + j], chunk_size);\n            vint32m1_t vec2 = vle32_v_i32m1(&matrix[i * cols + j + 1], chunk_size);\n\n            if (ascending) {\n                vbool32_t mask = vmseq_vv_i32m1_b(vec1, vec2, chunk_size);\n                if (!vfirst_m_b(mask, chunk_size)) {\n                    sorted = false;\n                    break;\n                }\n            } else {\n                vbool32_t mask = vmseq_vv_i32m1_b(vec1, vec2, chunk_size);\n                if (vfirst_m_b(mask, chunk_size)) {\n                    sorted = false;\n                    break;\n                }\n            }\n        }\n\n        if (!sorted) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    size_t vector_bits = 128; // Example vector length\n    size_t elements_per_vector = vector_bits / sizeof(int);\n\n    for (size_t i = 0; i < rows; ++i) {\n        bool direction = directions[i];\n        const int* row = matrix + i * cols;\n\n        size_t j;\n        for (j = 0; j <= cols - elements_per_vector; j += elements_per_vector) {\n            vint32m1_t vec = vle32_v_i32m1(row + j, vector_bits / 8);\n            vint32m1_t vec_next = vle32_v_i32m1(row + j + 1, vector_bits / 8);\n\n            if (direction) {\n                vbool32_t mask = vmsle_vv_i32m1_b(vec, vec_next, vector_bits / 8);\n                if (!vfirst_m_b32(mask, vector_bits / 8)) {\n                    return false;\n                }\n            } else {\n                vbool32_t mask = vmsge_vv_i32m1_b(vec, vec_next, vector_bits / 8);\n                if (!vfirst_m_b32(mask, vector_bits / 8)) {\n                    return false;\n                }\n            }\n        }\n\n        for (; j < cols - 1; ++j) {\n            if (direction) {\n                if (row[j] > row[j + 1]) {\n                    return false;\n                }\n            } else {\n                if (row[j] < row[j + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    vint16m1_t v_src, v_dst;\n    vint16m1_t v_base = vmv_v_x_i16m1(base, vl);\n    vint16m1_t v_rem, v_div, v_mul;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        v_src = vle16_v_i16m1(src + i, vl);\n\n        v_rem = vrem_vv_i16m1(v_src, v_base, vl);\n        v_div = vdiv_vv_i16m1(v_src, v_base, vl);\n        v_mul = vmul_vv_i16m1(v_div, v_base, vl);\n\n        v_dst = vsub_vv_i16m1(v_src, v_rem, vl);\n\n        vse16_v_i16m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    vint16m1_t v_src, v_dst;\n    vint16m1_t v_base = vmv_v_x_i16m1(base, 1);\n    vint16m1_t v_rem, v_div, v_mul;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        v_src = vle16_v_i16m1(&src[i], vl);\n\n        v_rem = vrem_vv_i16m1(v_src, v_base, vl);\n        v_div = vdiv_vv_i16m1(v_src, v_base, vl);\n        v_mul = vmul_vv_i16m1(v_div, v_base, vl);\n\n        v_dst = vsub_vv_i16m1(v_src, v_rem, vl);\n\n        vse16_v_i16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    vint16m1_t v_src, v_dst, v_rem, v_div;\n    vint16m1_t v_base = vcreate_int16m1(base);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        v_src = vle16_v_i16m1(&src[i], vl);\n        v_div = vdiv_vv_i16m1(v_src, v_base, vl);\n        v_rem = vrem_vv_i16m1(v_src, v_base, vl);\n        v_dst = vmul_vv_i16m1(v_div, v_base, vl);\n        vse16_v_i16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    vint16m1_t v_src, v_dst, v_rem, v_div, v_mul;\n    vint16m1_t v_base = _rvv_vmv_v_x_i16m1(base, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _rvv_vsetvl_e16m1(length - i);\n        v_src = _rvv_vle16_v_i16m1(src + i, vl);\n        v_rem = _rvv_vrem_vv_i16m1(v_src, v_base, vl);\n        v_div = _rvv_vdiv_vv_i16m1(v_src, v_base, vl);\n        v_mul = _rvv_vmul_vv_i16m1(v_div, v_base, vl);\n        v_dst = _rvv_vsub_vv_i16m1(v_src, v_rem, vl);\n        _rvv_vse16_v_i16m1(dst + i, v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_31_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    size_t vl;\n    vint16m1_t v_src, v_dst, v_rem, v_div, v_base;\n    vint16m1_t v_zero = __riscv_vmv_v_x_i16m1(0, 1);\n\n    v_base = __riscv_vmv_v_x_i16m1(base, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e16m1(length - i);\n        v_src = __riscv_vle16_v_i16m1(&src[i], vl);\n\n        v_rem = __riscv_vrem_vv_i16m1(v_src, v_base, vl);\n        v_div = __riscv_vdiv_vv_i16m1(v_src, v_base, vl);\n\n        v_dst = __riscv_vsub_vv_i16m1(__riscv_vmul_vv_i16m1(v_div, v_base, vl), v_rem, vl);\n\n        __riscv_vse16_v_i16m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    size_t i, j;\n\n    for (i = 0; i < rows; i++) {\n        bool match = true;\n\n        for (j = 0; j < cols; j += vlen) {\n            size_t chunk_size = (cols - j < vlen) ? cols - j : vlen;\n            vbool8_t mask = __riscv_vmslt_vx_i64m1_b8(chunk_size, chunk_size, chunk_size);\n\n            vfloat64m1_t vec_row = __riscv_vle64_v_f64m1(&matrix[i * cols + j], mask);\n            vfloat64m1_t vec_cmp = __riscv_vle64_v_f64m1(&vector[j], mask);\n\n            vbool8_t cmp_mask = __riscv_vmseq_vv_f64m1_b8(vec_row, vec_cmp, vlen);\n\n            if (!__riscv_vmfirst_m_b8(mask, cmp_mask)) {\n                match = false;\n                break;\n            }\n        }\n\n        if (match) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    for (size_t i = 0; i < rows; ++i) {\n        bool match = true;\n        for (size_t j = 0; j < cols; j += vlen) {\n            vbool8_t mask = __riscv_vmsne_vx_f64m1_b8(__riscv_vle_v_f64m1(&matrix[i * cols + j], vlen),\n                                                      __riscv_vle_v_f64m1(vector + j, vlen), vlen);\n            if (__riscv_vmfirst_m_b8(mask, vlen) != -1) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    size_t vector_length = vsetvl_e64m1(cols);\n    vfloat64m1_t vec_reg = vle64_v_f64m1(vector, vector_length);\n\n    for (size_t i = 0; i < rows; ++i) {\n        vfloat64m1_t row_reg = vle64_v_f64m1(&matrix[i * cols], vector_length);\n        vbool64_t mask = vmseq_vv_f64m1_b64(row_reg, vec_reg, vector_length);\n\n        if (vfirst_m_b64(mask, vector_length) == -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    size_t vector_length = 8; // Assuming vector length is 8 for RVV\n    size_t vlen = vsetvl_e64m1(cols);\n\n    for (size_t i = 0; i < rows; ++i) {\n        bool match = true;\n        for (size_t j = 0; j < cols; j += vector_length) {\n            vbool8_t mask = vle64_v_b8_m1(&vector[j], vlen);\n            vfloat64m1_t vec_v = vle64_v_f64m1(&vector[j], vlen);\n            vfloat64m1_t mat_v = vle64_v_f64m1(&matrix[i * cols + j], vlen);\n            vbool8_t cmp = vmfeq_vv_f64m1_b8(mat_v, vec_v, vlen);\n            if (!vfirst_m_b8(mask, cmp)) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    size_t vector_length = 8; // Assuming vector length is 8 for RVV\n    vbool8_t mask = _rvv_init_bool_register();\n\n    for (size_t i = 0; i < rows; ++i) {\n        vfloat64m1_t vec_v = _rvv_load_f64m1(vector, cols);\n        vfloat64m1_t row_v = _rvv_load_f64m1(&matrix[i * cols], cols);\n        vbool8_t local_mask = _rvv_cmpeq_vv_f64m1_b8(row_v, vec_v, cols);\n        mask = _rvv_or_vm_b8(mask, local_mask, cols);\n\n        if (_rvv_reduce_or_b8(mask, cols)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t count = 0;\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n\n    size_t i = 0;\n    size_t vl;\n    vuint8m1_t v_a, v_b;\n    vbool8_t mask;\n\n    for (i = 0; i < total_elements - (total_elements % 8); i += vl) {\n        vl = vsetvl_e8m1(total_elements - i);\n        v_a = vle8_v_u8m1(A + i, vl);\n        v_b = vle8_v_u8m1(B + i, vl);\n        mask = vmseq_vx_u8m1_b8(v_a, v_b, vl);\n        count += vcpop_m_b8(mask, vl);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < total_elements; i += vl) {\n        vl = vsetvl_e8m1(total_elements - i);\n\n        vuint8m1_t v_a = vle8_v_u8m1(A + i, vl);\n        vuint8m1_t v_b = vle8_v_u8m1(B + i, vl);\n\n        vmask_t mask = vmseq_vx_u8m1_m8(v_a, v_b, vl);\n\n        count += vcpop_m_b8(mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t i = 0;\n\n    size_t vl;\n    vuint8m1_t v_a, v_b;\n    vbool8_t mask;\n\n    for (i = 0; i < total_elements - (total_elements % 8); i += vl) {\n        vl = vsetvl_e8m1(total_elements - i);\n\n        v_a = vle8_v_u8m1(A + i, vl);\n        v_b = vle8_v_u8m1(B + i, vl);\n\n        mask = vmsne_vx_u8m1_b8(v_a, v_b, vl);\n\n        count += vl - vcpop_m_b8(mask, vl);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t i = 0;\n\n    size_t vl;\n    vuint8m1_t v_a, v_b;\n    vuint8m1_t v_eq;\n\n    for (i = 0; i < total_elements - (total_elements % 8); i += vl) {\n        vl = vsetvl_e8m1(total_elements - i);\n        v_a = vle8_v_u8m1(A + i, vl);\n        v_b = vle8_v_u8m1(B + i, vl);\n        v_eq = vmsne_vx_u8m1_tu(v_a, v_b, v_eq, vl);\n        count += vl - vcpop_m_b8_m1(v_eq, vl);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n    size_t i = 0;\n\n    size_t vl;\n    vuint8m1_t v_a, v_b;\n    vuint8m1_t v_eq;\n\n    for (i = 0; i < total_elements - (total_elements % 8); i += vl) {\n        vl = vsetvl_e8m1(total_elements - i);\n        v_a = vle8_v_u8m1(A + i, vl);\n        v_b = vle8_v_u8m1(B + i, vl);\n        v_eq = vmsne_vv_u8m1_b8(v_a, v_b, vl);\n        count += vcpop_m_b8(v_eq, vl);\n    }\n\n    for (; i < total_elements; ++i) {\n        if (A[i] == B[i]) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl;\n    vint64m1_t v_a = _rvv_set_int64m1(a, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _rvv_setvl_e64m1(length - i);\n\n        vint64m1_t v_x = _rvv_load_int64m1(x + i, vl);\n        vint64m1_t v_y = _rvv_load_int64m1(y + i, vl);\n\n        v_y = _rvv_mul_int64m1(v_a, v_x, vl);\n        v_y = _rvv_abs_int64m1(v_y, vl);\n        v_y = _rvv_sub_int64m1(v_y, _rvv_load_int64m1(y + i, vl), vl);\n\n        _rvv_store_int64m1(y + i, v_y, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl;\n    vint64m1_t v_a = _rvv_set_int64m1(a, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _rvv_setvl_e64m1(length - i);\n\n        vint64m1_t v_x = _rvv_load_int64m1(x + i, vl);\n        vint64m1_t v_ax = _rvv_mul_int64m1(v_x, v_a, vl);\n\n        vint64m1_t v_y = _rvv_load_int64m1(y + i, vl);\n        vint64m1_t v_abs_y = _rvv_abs_int64m1(v_y, vl);\n\n        vint64m1_t v_result = _rvv_sub_int64m1(v_ax, v_abs_y, vl);\n\n        _rvv_store_int64m1(y + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl;\n    vint64m1_t v_a = __riscv_vmv_v_x_i64m1(a, 64);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n\n        vint64m1_t v_x = __riscv_vle64_v_i64m1(x + i, vl);\n        vint64m1_t v_ax = __riscv_vmsac_vx_i64m1(v_x, a, vl);\n        vint64m1_t v_y = __riscv_vle64_v_i64m1(y + i, vl);\n        v_y = __riscv_vabs_v_i64m1(v_y, vl);\n        v_y = __riscv_vssub_vv_i64m1(v_y, v_ax, vl);\n\n        __riscv_vse64_v_i64m1(y + i, v_y, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl;\n    vint64m1_t v_a = _rvv_set_int64m1(a, 1);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n\n        vint64m1_t v_x = __riscv_vle64_v_i64m1(x + i, vl);\n        vint64m1_t v_y = __riscv_vle64_v_i64m1(y + i, vl);\n\n        vint64m1_t v_ax = __riscv_vmul_vv_i64m1(v_x, v_a, vl);\n        vint64m1_t v_abs_y = __riscv_vabs_v_i64m1(v_y, vl);\n        vint64m1_t v_result = __riscv_vsub_vv_i64m1(v_ax, v_abs_y, vl);\n\n        __riscv_vse64_v_i64m1(y + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_34_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    size_t vl;\n    vint64m1_t v_a = __riscv_vmv_v_x_i64m1(a, 64);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e64m1(length - i);\n\n        vint64m1_t v_x = __riscv_vle64_v_i64m1(x + i, vl);\n        vint64m1_t v_y = __riscv_vle64_v_i64m1(y + i, vl);\n\n        vint64m1_t v_ax = __riscv_vmul_vv_i64m1(v_a, v_x, vl);\n        vint64m1_t v_abs_y = __riscv_vabs_v_i64m1(v_y, vl);\n        vint64m1_t v_result = __riscv_vsub_vv_i64m1(v_ax, v_abs_y, vl);\n\n        __riscv_vse64_v_i64m1(y + i, v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    vint16m1_t v_min = _rvv_undefined_vint16m1();\n    vint16m1_t v_max = _rvv_undefined_vint16m1();\n    vint16m1_t v_data;\n\n    v_min = _rvv_vmv_v_x_i16m1(INT16_MAX, 1);\n    v_max = _rvv_vmv_v_x_i16m1(INT16_MIN, 1);\n\n    size_t vl;\n    size_t i = 0;\n\n    for (; i + vlmax_e16m1() <= length; i += vl) {\n        vl = _rvv_vsetvl_e16m1(length - i);\n        v_data = _rvv_vle16_v_i16m1(vec + i, vl);\n        v_min = _rvv_vmin_vv_i16m1(v_min, v_data, vl);\n        v_max = _rvv_vmax_vv_i16m1(v_max, v_data, vl);\n    }\n\n    int16_t min_val = INT16_MAX;\n    int16_t max_val = INT16_MIN;\n\n    for (; i < length; i++) {\n        if (vec[i] < min_val) min_val = vec[i];\n        if (vec[i] > max_val) max_val = vec[i];\n    }\n\n    min_val = _rvv_vmv_x_s_i16m1_i16(v_min);\n    max_val = _rvv_vmv_x_s_i16m1_i16(v_max);\n\n    return (MinMaxPair){min_val, max_val};\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    size_t vl;\n    vint16m1_t v_min = _rvv_undeclared_vint16m1();\n    vint16m1_t v_max = _rvv_undeclared_vint16m1();\n    vint16m1_t v_data = _rvv_undeclared_vint16m1();\n\n    v_min = _rvv_splats_v_i16m1(INT16_MAX, 16);\n    v_max = _rvv_splats_v_i16m1(INT16_MIN, 16);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = _rvv_vsetvl_e16m1(length - i);\n        v_data = _rvv_vle16_v_i16m1(&vec[i], vl);\n\n        v_min = _rvv_vmin_vv_i16m1(v_min, v_data, vl);\n        v_max = _rvv_vmax_vv_i16m1(v_max, v_data, vl);\n    }\n\n    int16_t min_values[16];\n    int16_t max_values[16];\n\n    _rvv_vse16_v_i16m1(min_values, v_min, 16);\n    _rvv_vse16_v_i16m1(max_values, v_max, 16);\n\n    int16_t min_num = INT16_MAX;\n    int16_t max_num = INT16_MIN;\n\n    for (int i = 0; i < 16; ++i) {\n        if (min_values[i] < min_num) {\n            min_num = min_values[i];\n        }\n        if (max_values[i] > max_num) {\n            max_num = max_values[i];\n        }\n    }\n\n    return (MinMaxPair){min_num, max_num};\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    vint16m1_t v_min = _rvv_init_vint16m1(INT16_MAX);\n    vint16m1_t v_max = _rvv_init_vint16m1(INT16_MIN);\n\n    size_t vlen = __riscv_vsetvlmax_e16m1();\n    size_t i = 0;\n\n    for (; i + vlen <= length; i += vlen) {\n        vint16m1_t v = _rvv_load_v_int16m1(vec + i, vlen);\n        v_min = _rvv_min_vv_int16m1(v_min, v, vlen);\n        v_max = _rvv_max_vv_int16m1(v_max, v, vlen);\n    }\n\n    int16_t min_num = INT16_MAX;\n    int16_t max_num = INT16_MIN;\n\n    for (size_t j = 0; j < vlen; ++j) {\n        int16_t elem = _rvv_get_vint16m1(v_min, j);\n        if (elem < min_num) min_num = elem;\n        elem = _rvv_get_vint16m1(v_max, j);\n        if (elem > max_num) max_num = elem;\n    }\n\n    for (; i < length; ++i) {\n        if (vec[i] < min_num) min_num = vec[i];\n        if (vec[i] > max_num) max_num = vec[i];\n    }\n\n    return (MinMaxPair){min_num, max_num};\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    vint16m1_t v_min = _rvv_init_vint16m1(INT16_MAX);\n    vint16m1_t v_max = _rvv_init_vint16m1(INT16_MIN);\n\n    size_t vl;\n    const int16_t *v = vec;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e16m1(length - i);\n        vint16m1_t v_data = __riscv_vle16_v_i16m1(v + i, vl);\n\n        v_min = __riscv_vmin_vv_i16m1(v_min, v_data, vl);\n        v_max = __riscv_vmax_vv_i16m1(v_max, v_data, vl);\n    }\n\n    int16_t min_num = __riscv_vfmv_f_s_i16m1_i16(v_min);\n    int16_t max_num = __riscv_vfmv_f_s_i16m1_i16(v_max);\n\n    return (MinMaxPair){min_num, max_num};\n}\n```"}
{"task_id": "SimdBench_35_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    vint16m1_t v_min = _rvv_undeclared_vint16m1();\n    vint16m1_t v_max = _rvv_undeclared_vint16m1();\n    vint16m1_t v_data = _rvv_undeclared_vint16m1();\n\n    v_min = _rvv_vle16_v_i16m1(vec, length * sizeof(int16_t));\n    v_max = v_min;\n\n    size_t i;\n    for (i = _rvv_vsetvl_e16m1(length); i < length; i += _rvv_vsetvl_e16m1(length)) {\n        v_data = _rvv_vle16_v_i16m1(&vec[i], length * sizeof(int16_t));\n        v_min = _rvv_vmin_vv_i16m1(v_min, v_data, _rvv_vsetvl_e16m1(length));\n        v_max = _rvv_vmax_vv_i16m1(v_max, v_data, _rvv_vsetvl_e16m1(length));\n    }\n\n    int16_t min_num = _rvv_vmv_x_s_i16m1_i16(v_min);\n    int16_t max_num = _rvv_vmv_x_s_i16m1_i16(v_max);\n\n    for (; i < length; ++i) {\n        if (vec[i] < min_num) min_num = vec[i];\n        if (vec[i] > max_num) max_num = vec[i];\n    }\n\n    MinMaxPair result = {min_num, max_num};\n    return result;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    size_t vector_length = 4; // Example vector length, adjust as needed\n    size_t vsew = 4; // Vector register element width (32 bits)\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t j;\n        for (j = 0; j <= cols - vector_length; j += vector_length) {\n            vint32m1_t vec1 = vle32_v_i32m1(&matrix[i * cols + j], vsew);\n            vint32m1_t vec2 = vle32_v_i32m1(&matrix[i * cols + j + 1], vsew);\n            vbool32_t mask = vmslt_vv_i32m1_b32(vec1, vec2);\n            if (!vfirst_m_b32(mask, mask)) {\n                return false;\n            }\n        }\n        for (; j < cols - 1; ++j) {\n            if (matrix[i * cols + j] >= matrix[i * cols + j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    size_t vector_length = 4; // Example vector length, adjust as needed\n    size_t vlen = vsetvl_e32m1(vector_length);\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t j;\n        vbool8_t mask = vle8_v_b8(0, vlen); // Initialize mask to all false\n\n        for (j = 0; j <= cols - vector_length; j += vector_length) {\n            vint32m1_t vec1 = vle32_v_i32m1(&matrix[i * cols + j], vlen);\n            vint32m1_t vec2 = vle32_v_i32m1(&matrix[i * cols + j + 1], vlen);\n            vbool8_t local_mask = vmflt_vv_i32m1_b8(vec1, vec2, vlen);\n            mask = vand_vv_b8(mask, local_mask, vlen);\n        }\n\n        // Handle remaining elements\n        if (j < cols) {\n            for (; j < cols - 1; ++j) {\n                if (matrix[i * cols + j] >= matrix[i * cols + j + 1]) {\n                    return false;\n                }\n            }\n        }\n\n        // Check if any element in the mask is false\n        bool row_increasing = true;\n        for (size_t k = 0; k < vlen; ++k) {\n            if (!vget_v_b8_i8(mask, k)) {\n                row_increasing = false;\n                break;\n            }\n        }\n\n        if (!row_increasing) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    size_t vector_length = vsetvl_e32m1(cols);\n    for (size_t i = 0; i < rows; ++i) {\n        bool strictly_increasing = true;\n        for (size_t j = 0; j < cols - 1; j += vector_length) {\n            vint32m1_t vec1 = vle32_v_i32m1(&matrix[i * cols + j], vector_length);\n            vint32m1_t vec2 = vle32_v_i32m1(&matrix[i * cols + j + 1], vector_length);\n            vbool32_t mask = vmslt_vv_i32m1_b32(vec1, vec2);\n            if (!vfirst_m_b32(mask, vector_length)) {\n                strictly_increasing = false;\n                break;\n            }\n        }\n        if (!strictly_increasing) return false;\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t j;\n        vbool8_t mask = __riscv_vmslt_vx_i32m1_b8(vset_v_i32m1_i32m1(0, (int32_t)cols - 1), 1, 1);\n\n        for (j = 0; j <= cols - vsetvl_e32m1(8); j += vsetvl_e32m1(8)) {\n            vint32m1_t vec1 = __riscv_vle32_v_i32m1(&matrix[i * cols + j], 8);\n            vint32m1_t vec2 = __riscv_vle32_v_i32m1(&matrix[i * cols + j + 1], 8);\n            vbool8_t cmp_mask = __riscv_vmslt_vv_i32m1_b8(vec1, vec2, 8);\n\n            if (!__riscv_vmand_mm_b8(mask, cmp_mask, 8)) {\n                return false;\n            }\n        }\n\n        for (; j < cols - 1; ++j) {\n            if (matrix[i * cols + j] >= matrix[i * cols + j + 1]) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    size_t vector_length = 4; // Example vector length, adjust as needed\n    size_t vsew = 4; // Vector Scalar Element Width for 32-bit integers\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t j;\n        for (j = 0; j <= cols - vector_length; j += vector_length) {\n            vint32m1_t vec1 = vle32_v_i32m1(&matrix[i * cols + j], vector_length);\n            vint32m1_t vec2 = vle32_v_i32m1(&matrix[i * cols + j + 1], vector_length);\n            vint32m1_t cmp = vmslt_vv_i32m1_b(vec1, vec2, vector_length);\n            if (vfirst_m(vmsif_m_b(cmp), vector_length) != -1) {\n                return false;\n            }\n        }\n        for (; j < cols - 1; ++j) {\n            if (matrix[i * cols + j] >= matrix[i * cols + j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t num_elements_block = block_size * block_size;\n\n    for (size_t i = 1; i < num_blocks_row; ++i) {\n        for (size_t j = 0; j < num_blocks_col; ++j) {\n            size_t index = (i * block_size * cols) + (j * block_size);\n            for (size_t k = 0; k < num_elements_block; k += vsetvl_e32m1(num_elements_block - k)) {\n                vbool8_t mask = vle32_v_b8_e32m1(matrix + k, num_elements_block - k);\n                vint32m1_t vec1 = vle32_v_i32m1(matrix + k, mask);\n                vint32m1_t vec2 = vle32_v_i32m1(matrix + index + k, mask);\n                if (vfirst_m_b8_e32m1(mask, vec1 != vec2) != -1) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    for (size_t j = 1; j < num_blocks_col; ++j) {\n        size_t index = j * block_size;\n        for (size_t k = 0; k < num_elements_block; k += vsetvl_e32m1(num_elements_block - k)) {\n            vbool8_t mask = vle32_v_b8_e32m1(matrix + k, num_elements_block - k);\n            vint32m1_t vec1 = vle32_v_i32m1(matrix + k, mask);\n            vint32m1_t vec2 = vle32_v_i32m1(matrix + index + k, mask);\n            if (vfirst_m_b8_e32m1(mask, vec1 != vec2) != -1) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t block_rows = rows / block_size;\n    size_t block_cols = cols / block_size;\n    size_t vector_length = vsetvl_e32m1(block_size);\n\n    for (size_t i = 0; i < block_rows; ++i) {\n        for (size_t j = 0; j < block_cols; ++j) {\n            for (size_t k = 0; k < block_size; ++k) {\n                vint32m1_t first_block_row = vle32_v_i32m1(&matrix[k * cols], vector_length);\n                vint32m1_t current_block_row = vle32_v_i32m1(&matrix[(i * block_size + k) * cols + j * block_size], vector_length);\n\n                if (vfirst_m_i32m1(vmseq_vv_i32m1_b_i32m1(first_block_row, current_block_row, vector_length), vector_length) != -1) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t vector_length = vsetvl_e32m1(block_size);\n\n    for (size_t i = 0; i < num_blocks_row; ++i) {\n        for (size_t j = 0; j < num_blocks_col; ++j) {\n            if (i == 0 && j == 0) continue;\n\n            for (size_t k = 0; k < block_size; ++k) {\n                vint32m1_t vec1 = vle32_v_i32m1(&matrix[k * cols + j * block_size], vector_length);\n                vint32m1_t vec2 = vle32_v_i32m1(&matrix[k * cols + 0], vector_length);\n\n                vbool32_t mask = vmseq_vv_i32m1_b32(vec1, vec2, vector_length);\n                if (!vfirst_m_b32(mask, mask)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t vector_length = vsetvl_e32m1(block_size);\n\n    for (size_t i = 0; i < num_blocks_row; ++i) {\n        for (size_t j = 0; j < num_blocks_col; ++j) {\n            if (i == 0 && j == 0) continue;\n\n            for (size_t k = 0; k < block_size; ++k) {\n                vint32m1_t vec1 = vle32_v_i32m1(&matrix[k * cols + j * block_size], vector_length);\n                vint32m1_t vec2 = vle32_v_i32m1(&matrix[k * cols], vector_length);\n\n                if (vfirst_m_i32m1(vmseq_vv_i32m1_b_tu(vec1, vec2, vector_length), vector_length) != 0) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t total_blocks = num_blocks_row * num_blocks_col;\n\n    for (size_t block_idx = 1; block_idx < total_blocks; ++block_idx) {\n        size_t row_start = (block_idx / num_blocks_col) * block_size;\n        size_t col_start = (block_idx % num_blocks_col) * block_size;\n\n        for (size_t i = 0; i < block_size; ++i) {\n            size_t idx1 = (row_start + i) * cols + col_start;\n            size_t idx2 = i * cols;\n\n            size_t j = 0;\n            for (; j <= cols - block_size - vsetvl_e32m1(block_size); j += vsetvl_e32m1(block_size)) {\n                vbool8_t mask = vle32_v_b8_e32m1(&matrix[idx1 + j], block_size);\n                vint32m1_t vec1 = vle32_v_i32m1(&matrix[idx1 + j], mask);\n                vint32m1_t vec2 = vle32_v_i32m1(&matrix[idx2 + j], mask);\n\n                if (!vmsne_vx_i32m1_b8(vec1, vec2, 0, block_size)) {\n                    return false;\n                }\n            }\n\n            for (; j < block_size; ++j) {\n                if (matrix[idx1 + j] != matrix[idx2 + j]) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks == 0) {\n        return false;\n    }\n\n    size_t vlen = 0;\n    vlen = vsetvl_e64m1(block_size);\n\n    vfloat64m1_t first_block = vle64_v_f64m1(vec, vlen);\n\n    for (size_t i = 1; i < full_blocks; ++i) {\n        vfloat64m1_t current_block = vle64_v_f64m1(vec + i * block_size, vlen);\n        vfloat64m1_t diff = vfabs_vv_f64m1(vfcvt_x_f_v_f64m1(vsub_vv_f64m1(first_block, current_block, vlen), vlen), vlen);\n        vbool64_t mask = vmsle_vv_f64m1_b64(diff, tolerance, vlen);\n\n        if (!vfirst_m_b64(mask, vlen)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks < 2) {\n        return false;\n    }\n\n    size_t vlmax = vsetvlmax_e64m1();\n    size_t vl = vlmax;\n\n    for (size_t i = 0; i < block_size; i += vl) {\n        vl = vsetvl_e64m1(block_size - i);\n        vfloat64m1_t first_block = vle64_v_f64m1(&vec[i], vl);\n\n        for (size_t j = 1; j < full_blocks; ++j) {\n            vfloat64m1_t current_block = vle64_v_f64m1(&vec[j * block_size + i], vl);\n            vfloat64m1_t diff = vfabs_vv_f64m1(vfcvt_x_f_v_f64m1(vfcvt_f_x_v_f64m1(first_block, vl), vl) - vfcvt_x_f_v_f64m1(vfcvt_f_x_v_f64m1(current_block, vl), vl), vl);\n            vbool64_t mask = vmsle_vv_f64m1_b64(diff, vfmv_v_f_f64m1(tolerance, vl), vl);\n\n            if (!vfirst_m_b64(mask, vl)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks == 0) {\n        return false;\n    }\n\n    size_t vlen = 0;\n    vlen = vsetvl_e64m1(block_size);\n\n    vfloat64m1_t first_block = vle64_v_f64m1(vec, vlen);\n\n    for (size_t i = 1; i < full_blocks; ++i) {\n        vfloat64m1_t current_block = vle64_v_f64m1(vec + i * block_size, vlen);\n        vfloat64m1_t diff = vfabs_v_f64m1(vfcvt_x_f_v_f64m1(vfcvt_f_x_v_f64m1(first_block, vlen), vlen) - vfcvt_x_f_v_f64m1(vfcvt_f_x_v_f64m1(current_block, vlen), vlen), vlen);\n        vbool64_t mask = vmsle_vx_f64m1_b64(diff, tolerance, vlen);\n\n        if (!vfirst_m_b64(mask, vlen)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t vector_length = length & -block_size;  // Trim to the nearest multiple of block_size\n    if (vector_length == 0) {\n        return false;\n    }\n\n    size_t i;\n    vbool8_t mask = __riscv_vsetvli(8, RVV_E64, RVV_M8);\n    vfloat64m1_t first_block = __riscv_vle64_v_f64m1(vec, mask);\n\n    for (i = block_size; i < vector_length; i += block_size) {\n        vfloat64m1_t current_block = __riscv_vle64_v_f64m1(vec + i, mask);\n        vfloat64m1_t diff = __riscv_vfabs_vv_f64m1(__riscv_vfsgnj_vv_f64m1(first_block, current_block, 8), current_block, 8);\n        vbool8_t mask_cmp = __riscv_vmfle_vv_f64m1_b8(diff, tolerance, 8);\n\n        if (__riscv_vfirst_m_b8(mask_cmp, 8) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks < 2) {\n        return false;\n    }\n\n    size_t vlen = 0;\n    vlen = vsetvl_e64m1(block_size);\n\n    vfloat64m1_t first_block = vle64_v_f64m1(vec, vlen);\n    size_t i;\n    for (i = block_size; i < full_blocks * block_size; i += block_size) {\n        vfloat64m1_t current_block = vle64_v_f64m1(vec + i, vlen);\n        vfloat64m1_t diff = vfabs_v_f64m1(vfsgnj_vv_f64m1(first_block, current_block, vlen), vlen);\n        vbool64_t mask = vmsle_vv_f64m1_b64(diff, tolerance, vlen);\n\n        if (!vfirst_m_b64(mask, vlen)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t vector_length = 8; // Assuming vector length of 8 for double precision\n    size_t cols_chunk = cols / vector_length;\n    size_t cols_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        vfloat64m1_t v_sum = _rvv_fmv_s_x_f64m1(0.0, 8);\n        vfloat64m1_t v_threshold = _rvv_vle64_v_f64m1(&thresholds[i], 8);\n\n        for (size_t j = 0; j < cols_chunk; ++j) {\n            vfloat64m1_t v_row = _rvv_vle64_v_f64m1(&matrix[i * cols + j * vector_length], 8);\n            v_sum = _rvv_vfadd_vv_f64m1(v_sum, _rvv_vfmul_vv_f64m1(v_row, v_row), 8);\n        }\n\n        if (cols_remainder > 0) {\n            vfloat64m1_t v_row = _rvv_vle64_v_f64m1(&matrix[i * cols + cols_chunk * vector_length], cols_remainder);\n            v_sum = _rvv_vfadd_vv_f64m1(v_sum, _rvv_vfmul_vv_f64m1(v_row, v_row), cols_remainder);\n        }\n\n        double sum = 0.0;\n        _rvv_vse64_v_f64m1(&sum, _rvv_vfredsum_vs_f64m1_f64m1(v_sum, v_sum, 8), 8);\n\n        result[i] = (sum > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t vector_length = vsetvl_e64m1(cols);\n    vfloat64m1_t vec_sum = vfmv_v_f_f64m1(0.0, vector_length);\n\n    for (size_t i = 0; i < rows; ++i) {\n        vfloat64m1_t vec_row = vle64_v_f64m1(&matrix[i * cols], vector_length);\n        vfloat64m1_t vec_square = vfmul_vv_f64m1(vec_row, vec_row, vector_length);\n        vec_sum = vfredusum_vs_f64m1_f64m1(vec_sum, vec_square, vec_sum, vector_length);\n\n        double row_norm = vfmv_f_s_f64m1_f64(vec_sum);\n        result[i] = row_norm > thresholds[i];\n\n        vec_sum = vfmv_v_f_f64m1(0.0, vector_length);\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t vector_length = 8; // Assuming vector length of 8 for double precision\n    size_t cols_chunk = cols / vector_length;\n    size_t cols_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        vfloat64m1_t v_sum = _rvv_fmv_s_x_f64m1(0.0, 8);\n        vfloat64m1_t v_threshold = _rvv_vle64_v_f64m1(&thresholds[i], 8);\n\n        for (size_t j = 0; j < cols_chunk; ++j) {\n            vfloat64m1_t v_row = _rvv_vle64_v_f64m1(&matrix[i * cols + j * vector_length], 8);\n            v_sum = _rvv_vfadd_vv_f64m1(v_sum, _rvv_vfmul_vv_f64m1(v_row, v_row), 8);\n        }\n\n        if (cols_remainder > 0) {\n            vfloat64m1_t v_row = _rvv_vle64_v_f64m1(&matrix[i * cols + cols_chunk * vector_length], cols_remainder);\n            v_sum = _rvv_vfadd_vv_f64m1(v_sum, _rvv_vfmul_vv_f64m1(v_row, v_row), cols_remainder);\n        }\n\n        double sum = 0.0;\n        _rvv_vse64_v_f64m1(&sum, _rvv_vfredsum_vs_f64m1_f64m1(v_sum, v_sum, 8), 8);\n\n        result[i] = (sum > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t vector_length = 8; // Assuming vector length of 8 for double precision\n    size_t cols_chunk = cols / vector_length;\n    size_t cols_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        vfloat64m1_t norm_sum = _vv_set_f64m1(0.0);\n        const double* row_ptr = matrix + i * cols;\n\n        for (size_t j = 0; j < cols_chunk; ++j) {\n            vfloat64m1_t vec = _vv_load_f64m1(row_ptr + j * vector_length);\n            vfloat64m1_t square = _vv_fmul_f64m1(vec, vec, vector_length);\n            norm_sum = _vv_fadd_f64m1(norm_sum, square, vector_length);\n        }\n\n        double temp_sum = _vv_reduce_fadd_f64m1(norm_sum, norm_sum, vector_length);\n\n        for (size_t j = 0; j < cols_remainder; ++j) {\n            double val = row_ptr[cols_chunk * vector_length + j];\n            temp_sum += val * val;\n        }\n\n        double norm = sqrt(temp_sum);\n        result[i] = norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t vl;\n    size_t i, j;\n    double sum;\n    vfloat64m1_t v_sum, v_row, v_threshold, v_square;\n\n    for (i = 0; i < rows; ++i) {\n        sum = 0.0;\n        v_sum = _rvv_fmv_s_f_d(v_sum, sum);\n\n        for (j = 0; j < cols; j += vl) {\n            vl = vsetvl_e64m1(cols - j);\n            v_row = vle64_v_f64m1(&matrix[i * cols + j], vl);\n            v_square = _rvv_vfmul_vv_f64m1(v_row, v_row, vl);\n            v_sum = _rvv_vfadd_vv_f64m1(v_sum, v_square, vl);\n        }\n\n        sum = _rvv_fmv_f_s_d(v_sum);\n        if (sum > thresholds[i]) {\n            result[i] = true;\n        } else {\n            result[i] = false;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl;\n    const uint32_t *a_ptr = A;\n    const uint32_t *b_ptr = B;\n    uint32_t *c_ptr = C;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        vuint32m1_t v_a = vle32_v_u32m1(a_ptr, vl);\n        vuint32m1_t v_b = vle32_v_u32m1(b_ptr, vl);\n        vuint32m1_t v_c = vor_vv_u32m1(v_a, v_b, vl);\n        vse32_v_u32m1(c_ptr, v_c, vl);\n\n        a_ptr += vl;\n        b_ptr += vl;\n        c_ptr += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t i = 0;\n    vuint32m1_t v_a, v_b, v_c;\n    size_t vl;\n\n    for (i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_a = vle32_v_u32m1(&A[i], vl);\n        v_b = vle32_v_u32m1(&B[i], vl);\n        v_c = vor_vv_u32m1(v_a, v_b, vl);\n        vse32_v_u32m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl;\n    vuint32m1_t v_a, v_b, v_c;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_a = vle32_v_u32m1(A + i, vl);\n        v_b = vle32_v_u32m1(B + i, vl);\n        v_c = vor_vv_u32m1(v_a, v_b, vl);\n        vse32_v_u32m1(C + i, v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl;\n    const uint32_t *a_ptr = A;\n    const uint32_t *b_ptr = B;\n    uint32_t *c_ptr = C;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        vuint32m1_t v_a = vle32_v_u32m1(a_ptr, vl);\n        vuint32m1_t v_b = vle32_v_u32m1(b_ptr, vl);\n        vuint32m1_t v_c = vor_vv_u32m1(v_a, v_b, vl);\n        vse32_v_u32m1(c_ptr, v_c, vl);\n\n        a_ptr += vl;\n        b_ptr += vl;\n        c_ptr += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_40_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    size_t vl;\n    const uint32_t *a_ptr = A;\n    const uint32_t *b_ptr = B;\n    uint32_t *c_ptr = C;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        vuint32m1_t v_a = vle32_v_u32m1(a_ptr + i, vl);\n        vuint32m1_t v_b = vle32_v_u32m1(b_ptr + i, vl);\n        vuint32m1_t v_c = vor_vv_u32m1(v_a, v_b, vl);\n        vse32_v_u32m1(c_ptr + i, v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_sq = 0;\n    int64_t sum_prod = 0;\n\n    size_t vlen = 0;\n    vint8m1_t v_a, v_b;\n    vint16m2_t v_prod, v_sq_a, v_sq_b;\n    vint32m4_t v_sum_prod = vmv_v_x_i32m4(0, 4);\n    vint32m4_t v_sum_sq = vmv_v_x_i32m4(0, 4);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vlen = vsetvl_e8m1(length - i);\n        v_a = vle8_v_i8m1(&A[i], vlen);\n        v_b = vle8_v_i8m1(&B[i], vlen);\n\n        v_prod = vwmul_vv_i16m2(v_a, v_b);\n        v_sum_prod = vwaddu_wv_i32m4(v_sum_prod, v_prod, 4);\n\n        v_sq_a = vwmul_vv_i16m2(v_a, v_a);\n        v_sq_b = vwmul_vv_i16m2(v_b, v_b);\n        v_sum_sq = vwaddu_wv_i32m4(v_sum_sq, vwadd_vv_i16m2(v_sq_a, v_sq_b), 4);\n    }\n\n    sum_prod = vmv_x_s_i32m4_i32(v_sum_prod);\n    sum_sq = vmv_x_s_i32m4_i32(v_sum_sq);\n\n    return sum_sq - sum_prod;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_sq = 0;\n    int64_t sum_prod = 0;\n\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(length);\n\n    vint8m1_t v_a, v_b;\n    vint16m2_t v_prod, v_sq_a, v_sq_b;\n    vint32m4_t v_sum_prod, v_sum_sq_a, v_sum_sq_b;\n\n    v_sum_prod = vmv_v_x_i32m4(0, vlen);\n    v_sum_sq_a = vmv_v_x_i32m4(0, vlen);\n    v_sum_sq_b = vmv_v_x_i32m4(0, vlen);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        size_t vl = vsetvl_e8m1(length - i);\n\n        v_a = vle8_v_i8m1(A + i, vl);\n        v_b = vle8_v_i8m1(B + i, vl);\n\n        v_prod = vwmul_vv_i16m2(v_a, v_b, vl);\n        v_sq_a = vwmul_vv_i16m2(v_a, v_a, vl);\n        v_sq_b = vwmul_vv_i16m2(v_b, v_b, vl);\n\n        v_sum_prod = vwredsum_vs_i32m4_i32m2(v_sum_prod, v_prod, v_sum_prod, vl);\n        v_sum_sq_a = vwredsum_vs_i32m4_i32m2(v_sum_sq_a, v_sq_a, v_sum_sq_a, vl);\n        v_sum_sq_b = vwredsum_vs_i32m4_i32m2(v_sum_sq_b, v_sq_b, v_sum_sq_b, vl);\n    }\n\n    sum_prod = vmv_x_s_i32m4_i32(v_sum_prod);\n    sum_sq = vmv_x_s_i32m4_i32(v_sum_sq_a) + vmv_x_s_i32m4_i32(v_sum_sq_b);\n\n    return sum_sq - sum_prod;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_of_squares = 0;\n    int64_t sum_of_products = 0;\n\n    size_t vlen = 0;\n    vint8m1_t v_a, v_b;\n    vint16m2_t v_a2, v_b2, v_ab;\n    vint32m4_t v_a2b2, v_ab_sum;\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vlen = vsetvl_e8m1(length - i);\n        v_a = vle8_v_i8m1(A + i, vlen);\n        v_b = vle8_v_i8m1(B + i, vlen);\n\n        v_a2 = vwmul_vv_i16m2(v_a, v_a, vlen);\n        v_b2 = vwmul_vv_i16m2(v_b, v_b, vlen);\n        v_ab = vwmul_vv_i16m2(v_a, v_b, vlen);\n\n        v_a2b2 = vwadd_vv_i32m4(vwadd_vv_i32m4(v_a2, v_b2, vlen), v_ab, vlen);\n\n        sum_of_squares += vredsum_vs_i32m4_i64(v_a2b2, v_a2b2, vlen);\n        sum_of_products += vredsum_vs_i32m4_i64(v_ab_sum, v_ab_sum, vlen);\n    }\n\n    return sum_of_squares - sum_of_products;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_sq = 0;\n    int64_t sum_prod = 0;\n\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(length);\n\n    vint8m1_t v_a, v_b;\n    vint16m2_t v_prod, v_sq_a, v_sq_b;\n    vint32m4_t v_sum_prod, v_sum_sq_a, v_sum_sq_b;\n\n    for (size_t i = 0; i < length; i += vlen) {\n        v_a = vle8_v_i8m1(A + i, vlen);\n        v_b = vle8_v_i8m1(B + i, vlen);\n\n        v_prod = vwmul_vv_i16m2(v_a, v_b);\n        v_sq_a = vwmul_vv_i16m2(v_a, v_a);\n        v_sq_b = vwmul_vv_i16m2(v_b, v_b);\n\n        v_sum_prod = vwredsum_vs_i32m4_i16m2(v_sum_prod, v_prod, v_sum_prod);\n        v_sum_sq_a = vwredsum_vs_i32m4_i16m2(v_sum_sq_a, v_sq_a, v_sum_sq_a);\n        v_sum_sq_b = vwredsum_vs_i32m4_i16m2(v_sum_sq_b, v_sq_b, v_sum_sq_b);\n    }\n\n    sum_prod = vmv_x_s_i32m4_i32(v_sum_prod);\n    sum_sq = vmv_x_s_i32m4_i32(v_sum_sq_a) + vmv_x_s_i32m4_i32(v_sum_sq_b);\n\n    return sum_sq - sum_prod;\n}\n```"}
{"task_id": "SimdBench_41_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    int64_t sum_sq = 0;\n    int64_t sum_prod = 0;\n\n    size_t vl;\n    vint8m1_t v_a, v_b;\n    vint16m2_t v_prod, v_sq_a, v_sq_b;\n    vint32m4_t v_sum_prod = __riscv_vmv_v_x_i32m4(0, 4);\n    vint32m4_t v_sum_sq = __riscv_vmv_v_x_i32m4(0, 4);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e8m1(length - i);\n\n        v_a = __riscv_vle8_v_i8m1(A + i, vl);\n        v_b = __riscv_vle8_v_i8m1(B + i, vl);\n\n        v_prod = __riscv_vwmul_vv_i16m2(v_a, v_b, vl);\n        v_sq_a = __riscv_vwmul_vv_i16m2(v_a, v_a, vl);\n        v_sq_b = __riscv_vwmul_vv_i16m2(v_b, v_b, vl);\n\n        v_sum_prod = __riscv_vwaddu_vv_i32m4(v_sum_prod, __riscv_vwaddu_vv_i32m4(v_sum_prod, v_prod, vl), vl);\n        v_sum_sq = __riscv_vwaddu_vv_i32m4(v_sum_sq, __riscv_vwaddu_vv_i32m4(__riscv_vwaddu_vv_i32m4(v_sum_sq, v_sq_a, vl), v_sq_b, vl), vl);\n    }\n\n    sum_prod = __riscv_vmv_x_s_i32m4_i32(v_sum_prod);\n    sum_sq = __riscv_vmv_x_s_i32m4_i32(v_sum_sq);\n\n    return sum_sq - sum_prod;\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl;\n    vuint64m1_t v_a, v_b, v_not_b, v_result;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n\n        v_a = vle64_v_u64m1(&A[i], vl);\n        v_b = vle64_v_u64m1(&B[i], vl);\n        v_not_b = vnot_vx_u64m1(v_b, vl);\n        v_result = vand_vv_u64m1(v_a, v_not_b, vl);\n\n        vse64_v_u64m1(&C[i], v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl;\n    vuint64m1_t v_a, v_b, v_c;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n\n        v_a = vle64_v_u64m1(&A[i], vl);\n        v_b = vle64_v_u64m1(&B[i], vl);\n\n        v_b = vnot_v_u64m1(v_b, vl);\n        v_c = vand_vv_u64m1(v_a, v_b, vl);\n\n        vse64_v_u64m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    vuint64m1_t v_a, v_b, v_c;\n\n    for (i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n        v_a = vle64_v_u64m1(&A[i], vl);\n        v_b = vle64_v_u64m1(&B[i], vl);\n        v_b = vnot_v_u64m1(v_b, vl);\n        v_c = vand_vv_u64m1(v_a, v_b, vl);\n        vse64_v_u64m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl;\n    vuint64m1_t v_a, v_b, v_not_b, v_result;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n\n        v_a = vle64_v_u64m1(&A[i], vl);\n        v_b = vle64_v_u64m1(&B[i], vl);\n        v_not_b = vnot_v_u64m1(v_b, vl);\n        v_result = vand_vv_u64m1(v_a, v_not_b, vl);\n\n        vse64_v_u64m1(&C[i], v_result, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_42_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    vuint64m1_t v_a, v_b, v_c;\n\n    for (i = 0; i < length; i += vl) {\n        vl = vsetvl_e64m1(length - i);\n        v_a = vle64_v_u64m1(&A[i], vl);\n        v_b = vle64_v_u64m1(&B[i], vl);\n        v_b = vnot_v_u64m1(v_b, vl);\n        v_c = vand_vv_u64m1(v_a, v_b, vl);\n        vse64_v_u64m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    size_t vl;\n    vint8m1_t v_a, v_b, v_c;\n    vbool8_t mask_pos, mask_neg;\n\n    for (i = 0; i < length; i += vl) {\n        vl = vsetvl_e8m1(length - i);\n\n        v_a = vle8_v_i8m1(A + i, vl);\n        v_b = vle8_v_i8m1(B + i, vl);\n\n        mask_pos = vmsgt_vx_i8m1_b8(v_a, 0, vl);\n        mask_neg = vmslt_vx_i8m1_b8(v_a, 0, vl);\n\n        vbool8_t mask_both_pos = vmsgt_vx_i8m1_b8(v_b, 0, vl) & mask_pos;\n        vbool8_t mask_both_neg = vmslt_vx_i8m1_b8(v_b, 0, vl) & mask_neg;\n\n        v_c = vmerge_vvm_i8m1(v_c, 1, mask_both_pos, vl);\n        v_c = vmerge_vvm_i8m1(v_c, -1, mask_both_neg, vl);\n        v_c = vmerge_vvm_i8m1(v_c, 0, ~(mask_both_pos | mask_both_neg), vl);\n\n        vse8_v_i8m1(C + i, v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    size_t vl;\n    vint8m1_t v_a, v_b, v_c;\n    vbool8_t mask_pos, mask_neg;\n\n    for (i = 0; i < length; i += vl) {\n        vl = vsetvl_e8m1(length - i);\n\n        v_a = vle8_v_i8m1(A + i, vl);\n        v_b = vle8_v_i8m1(B + i, vl);\n\n        mask_pos = vmsgt_vx_i8m1_b8(v_a, 0, vl);\n        mask_neg = vmslt_vx_i8m1_b8(v_a, 0, vl);\n\n        vbool8_t mask_pos_b = vmsgt_vx_i8m1_b8(v_b, 0, vl);\n        vbool8_t mask_neg_b = vmslt_vx_i8m1_b8(v_b, 0, vl);\n\n        vbool8_t mask_both_pos = vand_vv_b8(mask_pos, mask_pos_b, vl);\n        vbool8_t mask_both_neg = vand_vv_b8(mask_neg, mask_neg_b, vl);\n\n        v_c = vmerge_vvm_i8m1(v_c, 1, mask_both_pos, vl);\n        v_c = vmerge_vvm_i8m1(v_c, -1, mask_both_neg, vl);\n\n        vse8_v_i8m1(C + i, v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i + vl < length; i += vl) {\n        vint8m1_t v_a = __riscv_vle8_v_i8m1(A + i, vl);\n        vint8m1_t v_b = __riscv_vle8_v_i8m1(B + i, vl);\n\n        vbool8_t mask_pos = __riscv_vmfgts_vv_i8m1_b8(v_a, 0, v_b, 0, vl);\n        vbool8_t mask_neg = __riscv_vmflts_vv_i8m1_b8(v_a, 0, v_b, 0, vl);\n\n        vint8m1_t v_c = __riscv_vmv_v_x_i8m1(0, vl);\n        v_c = __riscv_vmerge_vvm_i8m1(v_c, 1, mask_pos, vl);\n        v_c = __riscv_vmerge_vvm_i8m1(v_c, -1, mask_neg, vl);\n\n        __riscv_vse8_v_i8m1(C + i, v_c, vl);\n        vl = __riscv_vl_v_i8m1(v_c);\n    }\n\n    for (; i < length; ++i) {\n        if (A[i] > 0 && B[i] > 0) {\n            C[i] = 1;\n        } else if (A[i] < 0 && B[i] < 0) {\n            C[i] = -1;\n        } else {\n            C[i] = 0;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    size_t vl;\n    while (i < length) {\n        vl = vsetvl_e_i8m1(length - i);\n        vint8m1_t v_a = vle8_v_i8m1(A + i, vl);\n        vint8m1_t v_b = vle8_v_i8m1(B + i, vl);\n        vint8m1_t v_c = vxor_vv_i8m1(v_a, v_b, vl);\n        vbool8_t mask_pos = vmsgt_vx_i8m1_b8(v_a, 0, vl);\n        vbool8_t mask_neg = vmslt_vx_i8m1_b8(v_a, 0, vl);\n        vint8m1_t v_one = vmv_v_x_i8m1(1, vl);\n        vint8m1_t v_neg_one = vmv_v_x_i8m1(-1, vl);\n        vint8m1_t v_zero = vmv_v_x_i8m1(0, vl);\n        v_c = vmerge_vvm_i8m1(v_c, v_one, mask_pos, vl);\n        v_c = vmerge_vvm_i8m1(v_c, v_neg_one, mask_neg, vl);\n        vse8_v_i8m1(C + i, v_c, vl);\n        i += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_43_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    size_t i = 0;\n    size_t vl;\n\n    for (i = 0; i < length; i += vl) {\n        vl = vsetvl_e8m1(length - i);\n\n        vint8m1_t v_a = vle8_v_i8m1(A + i, vl);\n        vint8m1_t v_b = vle8_v_i8m1(B + i, vl);\n\n        vint8m1_t v_pos = vmsgt_vv_i8m1_i8m1(v_a, 0, vl);\n        vint8m1_t v_neg = vmslt_vv_i8m1_i8m1(v_a, 0, vl);\n\n        vint8m1_t v_both_pos = vand_vv_i8m1(v_pos, vmsgt_vv_i8m1_i8m1(v_b, 0, vl), vl);\n        vint8m1_t v_both_neg = vand_vv_i8m1(v_neg, vmslt_vv_i8m1_i8m1(v_b, 0, vl), vl);\n\n        vint8m1_t v_result = vor_vv_i8m1(v_both_pos, v_both_neg, vl);\n        vint8m1_t v_zero = vmseq_vv_i8m1_i8m1(v_result, 0, vl);\n\n        vint8m1_t v_final = vor_vv_i8m1(v_both_pos, v_both_neg, vl);\n        v_final = vor_vv_i8m1(v_final, v_zero, vl);\n\n        vse8_v_i8m1(C + i, v_final, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t vl;\n\n    // Handle the first half\n    for (size_t i = 0; i < mid; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vxor_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n\n    // Handle the midpoint\n    C[mid] = A[mid];\n\n    // Handle the second half\n    for (size_t i = mid + 1; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vand_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t midpoint = length / 2;\n    size_t vector_length = vsetvl_e16m1(length);\n\n    size_t i = 0;\n    vuint16m1_t v_a, v_b, v_c;\n\n    for (; i < midpoint - vector_length; i += vector_length) {\n        v_a = vle16_v_u16m1(&A[i], vector_length);\n        v_b = vle16_v_u16m1(&B[i], vector_length);\n        v_c = vxor_vv_u16m1(v_a, v_b, vector_length);\n        vse16_v_u16m1(&C[i], v_c, vector_length);\n    }\n\n    for (; i < midpoint; i++) {\n        C[i] = A[i] ^ B[i];\n    }\n\n    C[midpoint] = A[midpoint];\n\n    for (; i < length - vector_length; i += vector_length) {\n        v_a = vle16_v_u16m1(&A[i], vector_length);\n        v_b = vle16_v_u16m1(&B[i], vector_length);\n        v_c = vand_vv_u16m1(v_a, v_b, vector_length);\n        vse16_v_u16m1(&C[i], v_c, vector_length);\n    }\n\n    for (; i < length; i++) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t vl;\n\n    // Handle the first half\n    size_t i = 0;\n    for (; i < mid; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vxor_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n\n    // Handle the midpoint\n    C[mid] = A[mid];\n\n    // Handle the second half\n    for (; i < length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vand_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t vl;\n\n    // Handle the first half\n    size_t i = 0;\n    for (; i + vlmax_e16() <= mid; i += vl) {\n        vl = vsetvl_e16m1(mid - i);\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vxor_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n    for (; i < mid; ++i) {\n        C[i] = A[i] ^ B[i];\n    }\n\n    // Handle the midpoint\n    C[mid] = A[mid];\n\n    // Handle the second half\n    for (; i + vlmax_e16() <= length; i += vl) {\n        vl = vsetvl_e16m1(length - i);\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vand_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n    for (; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_44_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t vl;\n\n    size_t i = 0;\n    for (; i + (vl = vsetvl_e16m1(length - i)) < mid; i += vl) {\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vxor_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n\n    C[mid] = A[mid];\n\n    for (; i + (vl = vsetvl_e16m1(length - i)) < length; i += vl) {\n        vuint16m1_t v_a = vle16_v_u16m1(&A[i], vl);\n        vuint16m1_t v_b = vle16_v_u16m1(&B[i], vl);\n        vuint16m1_t v_c = vand_vv_u16m1(v_a, v_b, vl);\n        vse16_v_u16m1(&C[i], v_c, vl);\n    }\n\n    for (; i < length; ++i) {\n        C[i] = A[i] & B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vbool8_t mask_cond1, mask_cond2;\n    vfloat32m2_t v_A, v_B, v_C, v_D, v_out;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m2(total_size - i);\n\n        mask_cond1 = vle8_v_b8(cond1 + i, vl);\n        mask_cond2 = vle8_v_b8(cond2 + i, vl);\n\n        v_A = vle32_v_f32m2(A + i, vl);\n        v_B = vle32_v_f32m2(B + i, vl);\n        v_C = vle32_v_f32m2(C + i, vl);\n        v_D = vle32_v_f32m2(D + i, vl);\n\n        vbool8_t mask_true_true = vand_vv_b8_b8_b8(mask_cond1, mask_cond2, vl);\n        vbool8_t mask_true_false = vand_vv_b8_b8_b8(mask_cond1, vnot_v_b8(mask_cond2, vl), vl);\n        vbool8_t mask_false_true = vand_vv_b8_b8_b8(vnot_v_b8(mask_cond1, vl), mask_cond2, vl);\n        vbool8_t mask_false_false = vand_vv_b8_b8_b8(vnot_v_b8(mask_cond1, vl), vnot_v_b8(mask_cond2, vl), vl);\n\n        v_out = vmerge_vvm_f32m2(v_out, v_A, mask_true_true, vl);\n        v_out = vmerge_vvm_f32m2(v_out, v_B, mask_true_false, vl);\n        v_out = vmerge_vvm_f32m2(v_out, v_C, mask_false_true, vl);\n        v_out = vmerge_vvm_f32m2(v_out, v_D, mask_false_false, vl);\n\n        vse32_v_f32m2(out + i, v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vbool8_t mask_cond1, mask_cond2;\n    vfloat32m1_t v_A, v_B, v_C, v_D, v_out;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m1(total_size - i);\n\n        mask_cond1 = vle8_v_b8(cond1 + i, vl);\n        mask_cond2 = vle8_v_b8(cond2 + i, vl);\n\n        v_A = vle32_v_f32m1(A + i, vl);\n        v_B = vle32_v_f32m1(B + i, vl);\n        v_C = vle32_v_f32m1(C + i, vl);\n        v_D = vle32_v_f32m1(D + i, vl);\n\n        vbool8_t mask_true_true = vand_vv_b8_b8_m(mask_cond1, mask_cond2, vl);\n        vbool8_t mask_true_false = vand_vv_b8_b8_m(mask_cond1, vnot_v_b8_m(mask_cond2, vl), vl);\n        vbool8_t mask_false_true = vand_vv_b8_b8_m(vnot_v_b8_m(mask_cond1, vl), mask_cond2, vl);\n        vbool8_t mask_false_false = vnot_v_b8_m(vor_vv_b8_b8_m(mask_cond1, mask_cond2, vl), vl);\n\n        v_out = vmerge_vvm_f32m1(v_D, v_C, mask_false_true, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_B, mask_true_false, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_A, mask_true_true, vl);\n\n        vse32_v_f32m1(out + i, v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vbool8_t mask_cond1, mask_cond2;\n    vfloat32m1_t v_A, v_B, v_C, v_D, v_out;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m1(total_size - i);\n\n        v_A = vle32_v_f32m1(&A[i], vl);\n        v_B = vle32_v_f32m1(&B[i], vl);\n        v_C = vle32_v_f32m1(&C[i], vl);\n        v_D = vle32_v_f32m1(&D[i], vl);\n\n        mask_cond1 = vle8_v_b8(&cond1[i], vl);\n        mask_cond2 = vle8_v_b8(&cond2[i], vl);\n\n        vbool8_t mask_true_true = vand_vv_b8_b8_m(mask_cond1, mask_cond2, vl);\n        vbool8_t mask_true_false = vand_vv_b8_b8_m(mask_cond1, vnot_v_b8_m(mask_cond2, vl), vl);\n        vbool8_t mask_false_true = vand_vv_b8_b8_m(vnot_v_b8_m(mask_cond1, vl), mask_cond2, vl);\n        vbool8_t mask_false_false = vand_vv_b8_b8_m(vnot_v_b8_m(mask_cond1, vl), vnot_v_b8_m(mask_cond2, vl), vl);\n\n        v_out = vmerge_vvm_f32m1(v_D, v_C, mask_false_true, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_B, mask_true_false, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_A, mask_true_true, vl);\n\n        vse32_v_f32m1(&out[i], v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vfloat32m1_t v_A, v_B, v_C, v_D;\n    vbool32_t v_cond1, v_cond2;\n    vfloat32m1_t v_out;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m1(total_size - i);\n\n        v_A = vle32_v_f32m1(&A[i], vl);\n        v_B = vle32_v_f32m1(&B[i], vl);\n        v_C = vle32_v_f32m1(&C[i], vl);\n        v_D = vle32_v_f32m1(&D[i], vl);\n\n        v_cond1 = vle32_v_b32(&cond1[i], vl);\n        v_cond2 = vle32_v_b32(&cond2[i], vl);\n\n        vbool32_t v_cond1_and_cond2 = vand_vv_b32(v_cond1, v_cond2, vl);\n        vbool32_t v_cond1_and_not_cond2 = vand_vv_b32(v_cond1, vnot_v_b32(v_cond2, vl), vl);\n        vbool32_t v_not_cond1_and_cond2 = vand_vv_b32(vnot_v_b32(v_cond1, vl), v_cond2, vl);\n        vbool32_t v_not_cond1_and_not_cond2 = vand_vv_b32(vnot_v_b32(v_cond1, vl), vnot_v_b32(v_cond2, vl), vl);\n\n        v_out = vmerge_vvm_f32m1(v_D, v_C, v_not_cond1_and_cond2, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_B, v_cond1_and_not_cond2, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_A, v_cond1_and_cond2, vl);\n\n        vse32_v_f32m1(&out[i], v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_45_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    size_t vl;\n    vfloat32m1_t v_A, v_B, v_C, v_D, v_out;\n    vbool32_t v_cond1, v_cond2;\n\n    for (i = 0; i < total_size; i += vl) {\n        vl = vsetvl_e32m1(total_size - i);\n\n        v_A = vle32_v_f32m1(A + i, vl);\n        v_B = vle32_v_f32m1(B + i, vl);\n        v_C = vle32_v_f32m1(C + i, vl);\n        v_D = vle32_v_f32m1(D + i, vl);\n\n        v_cond1 = vle32_v_b32(cond1 + i, vl);\n        v_cond2 = vle32_v_b32(cond2 + i, vl);\n\n        vbool32_t v_cond1_and_cond2 = vand_vv_b32(v_cond1, v_cond2, vl);\n        vbool32_t v_cond1_and_not_cond2 = vand_vv_b32(v_cond1, vnot_v_b32(v_cond2, vl), vl);\n        vbool32_t v_not_cond1_and_cond2 = vand_vv_b32(vnot_v_b32(v_cond1, vl), v_cond2, vl);\n        vbool32_t v_not_cond1_and_not_cond2 = vand_vv_b32(vnot_v_b32(v_cond1, vl), vnot_v_b32(v_cond2, vl), vl);\n\n        v_out = vmerge_vvm_f32m1(v_D, v_C, v_not_cond1_and_cond2, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_B, v_cond1_and_not_cond2, vl);\n        v_out = vmerge_vvm_f32m1(v_out, v_A, v_cond1_and_cond2, vl);\n\n        vse32_v_f32m1(out + i, v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t vlen = 128 / 8;  // Assuming vector length of 128 bits\n    size_t i;\n\n    for (i = 0; i + vlen <= total_size; i += vlen) {\n        vuint32m1_t vA = vle32_v_u32m1(A + i, vlen);\n        vuint32m1_t vCount = vmsbc_v_u32m1(vA);  // Count bits set to 1\n        vuint8m1_t vOut = vnsra_wx_u8m1(vCount, 0, vlen);  // Narrow to 8 bits\n        vse8_v_u8m1(out + i, vOut, vlen);\n    }\n\n    // Handle remaining elements if total_size is not a multiple of vlen\n    for (; i < total_size; ++i) {\n        uint32_t value = A[i];\n        uint8_t count = __builtin_popcount(value);  // Count bits set to 1\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vlen = 128 / 8;  // Assuming vector length of 128 bits\n    size_t i;\n\n    for (i = 0; i + vlen - 1 < total_elements; i += vlen) {\n        vuint32m1_t vA = vle32_v_u32m1(&A[i], vlen);\n        vuint32m1_t vCount = vcpop_m_b32_u32m1(vA, vlen);\n        vse8_v_u8m1(&out[i], vCount, vlen);\n    }\n\n    // Handle remaining elements if total_elements is not a multiple of vlen\n    for (; i < total_elements; ++i) {\n        uint32_t element = A[i];\n        uint8_t count = __builtin_popcount(element);\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t vlen = 128 / 8;  // Assuming vector length of 128 bits\n    size_t i;\n\n    for (i = 0; i + vlen - 1 < total_size; i += vlen) {\n        vuint32m1_t vA = vle32_v_u32m1(&A[i], vlen);\n        vuint32m1_t vCount = vmsbc_v_u32m1(vA);\n        vse8_v_u8m1(&out[i], vCount, vlen);\n    }\n\n    // Handle remaining elements if total_size is not a multiple of vlen\n    for (; i < total_size; ++i) {\n        uint32_t element = A[i];\n        uint8_t count = __builtin_popcount(element);\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t vlen = 128 / 8;  // Assuming vector length of 128 bits\n    size_t i;\n\n    for (i = 0; i + vlen - 1 < total_size; i += vlen) {\n        vuint32m1_t vA = vle32_v_u32m1(&A[i], vlen);\n        vuint32m1_t vCount = vmsbf_m_u32m1_u32m1(vA, vA);\n        vse8_v_u8m1(&out[i], vCount, vlen);\n    }\n\n    // Handle remaining elements if total_size is not a multiple of vlen\n    for (; i < total_size; ++i) {\n        uint32_t element = A[i];\n        uint8_t count = __builtin_popcount(element);\n        out[i] = count;\n    }\n}\n```"}
{"task_id": "SimdBench_46_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_elements = dim1 * dim2 * dim3;\n    size_t vlen = 128 / 8;  // Assuming vector length of 128 bits\n    size_t i;\n\n    for (i = 0; i + vlen - 1 < total_elements; i += vlen) {\n        vuint32m1_t vA = vle32_v_u32m1(&A[i], vlen);\n        vuint32m1_t vCount = vmsbf_m_u32m1_u32m1(vA, vlen);\n        vse8_v_u8m1(&out[i], vCount, vlen);\n    }\n\n    // Handle remaining elements if total_elements is not a multiple of vlen\n    for (; i < total_elements; ++i) {\n        out[i] = __builtin_popcount(A[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t n = rows * cols;\n    size_t i = 0;\n\n    for (; i + vlmax <= n; i += vlmax) {\n        size_t vl = vsetvl_e32m1(n - i);\n\n        vint32m1_t v_a = vle32_v_i32m1(&A[i], vl);\n        vint32m1_t v_b = v_a;\n\n        vbool32_t mask = vmfeq_vv_i32m1_b32(vrem_vx_i32m1(v_a, 3, vl), vfmv_v_f_i32m1(0, vl), vl);\n        vint32m1_t v_abs = vabs_v_i32m1(v_a, vl);\n\n        v_b = vmerge_vvm_i32m1(v_b, mask, v_abs, vl);\n\n        vse32_v_i32m1(&B[i], v_b, vl);\n    }\n\n    for (; i < n; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t total_elements = rows * cols;\n    size_t i = 0;\n\n    for (i = 0; i + vlmax < total_elements; i += vlmax) {\n        size_t vl = vsetvl_e32m1(total_elements - i);\n\n        vint32m1_t v_a = vle32_v_i32m1(&A[i], vl);\n        vint32m1_t v_b = v_a;\n\n        vbool32_t mask = vmfeq_vv_i32m1_b32(vrem_vx_i32m1(v_a, 3, vl), vfmv_v_f_i32m1(0, vl), vl);\n        v_b = vmerge_vvm_i32m1(v_b, vabs_v_i32m1(v_a, vl), mask, vl);\n\n        vse32_v_i32m1(&B[i], v_b, vl);\n    }\n\n    for (; i < total_elements; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i = 0;\n\n    for (i = 0; i + vsetvl_e32m1(15) <= total_elements; i += vsetvl_e32m1(15)) {\n        vint32m1_t v_A = vle32_v_i32m1(A + i, vsetvl_e32m1(15));\n        vint32m1_t v_rem = vrem_vv_i32m1(v_A, 3, vsetvl_e32m1(15));\n        vbool32_t mask = vmseq_vx_i32m1_b32(v_rem, 0, vsetvl_e32m1(15));\n\n        vint32m1_t v_abs = vabs_v_i32m1(v_A, vsetvl_e32m1(15));\n        vint32m1_t v_B = vmerge_vvm_i32m1(v_A, v_abs, mask, vsetvl_e32m1(15));\n\n        vse32_v_i32m1(B + i, v_B, vsetvl_e32m1(15));\n    }\n\n    for (; i < total_elements; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t vl;\n    size_t total_elements = rows * cols;\n    size_t i = 0;\n\n    for (i = 0; i < total_elements; i += vl) {\n        vl = vsetvl_e32m1(total_elements - i);\n        vint32m1_t v_a = vle32_v_i32m1(A + i, vl);\n        vint32m1_t v_b = v_a;\n\n        vbool32_t mask = vmfeq_vv_i32m1_b32(vrem_vv_i32m1(v_a, v_a, 3, vl), 0, vl);\n        vint32m1_t v_abs = vabs_v_i32m1(v_a, vl);\n\n        v_b = vmerge_vvm_i32m1(v_b, v_abs, mask, vl);\n\n        vse32_v_i32m1(B + i, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_47_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i = 0;\n\n    size_t vector_length = 0;\n    while (i < total_elements) {\n        vint32m1_t v_a = vle32_v_i32m1(A + i, vector_length);\n        vint32m1_t v_b = v_a;\n\n        vbool32_t mask = vmfeq_vv_i32m1_b32(v_b, vrem_vv_i32m1(v_b, vmv_v_x_i32m1(3, vector_length)), vector_length);\n        v_b = vmerge_vvm_i32m1(v_b, vabs_v_i32m1(v_a, vector_length), mask, vector_length);\n\n        vse32_v_i32m1(B + i, v_b, vector_length);\n        i += vector_length;\n    }\n\n    // Handle remaining elements if any\n    for (; i < total_elements; ++i) {\n        B[i] = (A[i] % 3 == 0) ? abs(A[i]) : A[i];\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src, v_dst, v_mask, v_rotated, v_negated;\n    vbool32_t v_cond;\n\n    uint32_t mask = 0xF; // Low 4 bits mask\n    uint32_t rotate_mask = (sizeof(uint32_t) * 8) - rotate_bits;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src = vle32_v_u32m1(&src[i], vl);\n        v_mask = vmand_vx_u32m1_u32m1(v_src, mask, vl);\n        v_cond = vmsgt_vx_u32m1_b32(v_mask, 0xF, vl);\n\n        v_rotated = vrgather_vv_u32m1(v_src, rotate_bits, vl);\n        v_rotated = vror_vx_u32m1(v_rotated, rotate_mask, vl);\n        v_negated = vnot_v_u32m1(v_src, vl);\n\n        v_dst = vmerge_vvm_u32m1(v_cond, v_rotated, v_negated, vl);\n\n        vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src, v_dst, v_mask, v_rotated, v_negated;\n    vbool32_t v_cond;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_u32m1(&src[i], vl);\n        v_mask = vmand_vx_u32m1_u32m1(v_src, 0xF, vl);\n        v_cond = vmsne_vx_u32m1_b32(v_mask, 0xF, vl);\n\n        v_rotated = vsrl_vx_u32m1(v_src, rotate_bits, vl);\n        v_negated = vnot_v_u32m1(v_src, vl);\n\n        v_dst = vmerge_vvm_u32m1(v_cond, v_rotated, v_negated, vl);\n        vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src, v_dst, v_mask, v_rotated, v_negated;\n    vbool32_t v_cond;\n\n    v_mask = __riscv_vmv_v_x_u32m1(0xF, vl); // Mask for the lower 4 bits\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n\n        v_src = __riscv_vle32_v_u32m1(&src[i], vl);\n        v_cond = __riscv_vmsgt_vx_u32m1_b32(v_src, 0xF, vl); // Check if lower 4 bits are all 1\n\n        v_rotated = __riscv_vsrl_vx_u32m1(v_src, rotate_bits, vl); // Rotate right\n        v_negated = __riscv_vnot_v_u32m1(v_src, vl); // Bitwise negation\n\n        v_dst = __riscv_vmerge_vvm_u32m1(v_cond, v_rotated, v_negated, vl); // Select based on condition\n\n        __riscv_vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src, v_dst, v_mask, v_rotated, v_negated;\n    vbool32_t v_cond;\n\n    uint32_t mask = 0x0F; // Low 4 bits mask\n    uint32_t rotate_mask = (sizeof(uint32_t) * 8) - rotate_bits;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src = vle32_v_u32m1(&src[i], vl);\n        v_mask = vmand_vx_u32m1_u32m1(v_src, mask, vl);\n        v_cond = vmsne_vx_u32m1_b32(v_mask, mask, vl);\n\n        v_rotated = vrgather_vv_i32m1(v_src, rotate_bits, vl);\n        v_negated = vnot_v_u32m1(v_src, vl);\n\n        v_dst = vmerge_vvm_u32m1(v_cond, v_rotated, v_negated, vl);\n\n        vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_48_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src, v_dst, v_mask, v_rotated, v_negated;\n    vbool32_t v_cond;\n\n    const uint32_t mask = 0xF; // Low 4 bits mask\n    const uint32_t rotate_mask = (sizeof(uint32_t) * 8) - rotate_bits;\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        v_src = vle32_v_u32m1(&src[i], vl);\n        v_mask = vmand_vx_u32m1_u32m1(v_src, mask, vl);\n        v_cond = vmsne_vx_u32m1_b32(v_mask, mask, vl);\n\n        v_rotated = vsrl_vx_u32m1(v_src, rotate_bits, vl);\n        v_rotated = vor_vx_u32m1(v_rotated, vsll_vx_u32m1(v_src, rotate_mask, vl), vl);\n\n        v_negated = vnot_v_u32m1(v_src, vl);\n\n        v_dst = vmerge_vvm_u32m1(v_cond, v_rotated, v_negated, vl);\n\n        vse32_v_u32m1(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_epsilon = vfmv_v_f_f32m1(epsilon, vl);\n    vfloat32m1_t v_zero = vfmv_v_f_f32m1(0.0f, vl);\n    vfloat32m1_t v_one = vfmv_v_f_f32m1(1.0f, vl);\n    vfloat32m1_t v_neg_one = vfmv_v_f_f32m1(-1.0f, vl);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        vfloat32m1_t v_a = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t v_b = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t v_diff = vfsub_vv_f32m1(v_a, v_b, vl);\n        vfloat32m1_t v_abs_diff = vfabs_v_f32m1(v_diff, vl);\n\n        vbool32_t mask_gt = vfgt_vv_f32m1_b32(v_diff, v_epsilon, vl);\n        vbool32_t mask_lt = vflt_vv_f32m1_b32(v_diff, vfmv_v_f_f32m1(-epsilon, vl), vl);\n        vbool32_t mask_eq = vfeq_vv_f32m1_b32(v_abs_diff, v_zero, vl);\n\n        vint8m1_t v_out = vfmv_v_f_i8m1(v_zero, vl);\n        v_out = vmerge_vxm_i8m1(v_out, 1, mask_gt, vl);\n        v_out = vmerge_vxm_i8m1(v_out, -1, mask_lt, vl);\n\n        vse8_v_i8m1(out + i, v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_epsilon = __riscv_vfmv_v_f_f32m1(epsilon, vl);\n    vfloat32m1_t v_zero = __riscv_vfmv_v_f_f32m1(0.0f, vl);\n    vfloat32m1_t v_one = __riscv_vfmv_v_f_f32m1(1.0f, vl);\n    vfloat32m1_t v_neg_one = __riscv_vfmv_v_f_f32m1(-1.0f, vl);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n\n        vfloat32m1_t v_a = __riscv_vle32_v_f32m1(&A[i], vl);\n        vfloat32m1_t v_b = __riscv_vle32_v_f32m1(&B[i], vl);\n        vfloat32m1_t v_diff = __riscv_vfsub_vv_f32m1(v_a, v_b, vl);\n\n        vbool32_t mask_gt = __riscv_vfmv_s_b_f32m1(v_diff, vl, v_epsilon);\n        vbool32_t mask_lt = __riscv_vfmv_s_b_f32m1(v_diff, vl, __riscv_vfneg_v_f_f32m1(v_epsilon, vl));\n\n        vint8m1_t v_out = __riscv_vmv_v_x_i8m1(0, vl);\n        v_out = __riscv_vmerge_vxm_i8m1(v_out, 1, mask_gt, vl);\n        v_out = __riscv_vmerge_vxm_i8m1(v_out, -1, mask_lt, vl);\n\n        __riscv_vse8_v_i8m1(&out[i], v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_epsilon = __riscv_vfmv_v_f_f32m1(epsilon, 8);\n    vfloat32m1_t v_zero = __riscv_vfmv_v_f_f32m1(0.0f, 8);\n    vfloat32m1_t v_one = __riscv_vfmv_v_f_f32m1(1.0f, 8);\n    vfloat32m1_t v_neg_one = __riscv_vfmv_v_f_f32m1(-1.0f, 8);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n\n        vfloat32m1_t v_a = __riscv_vle32_v_f32m1(&A[i], vl);\n        vfloat32m1_t v_b = __riscv_vle32_v_f32m1(&B[i], vl);\n        vfloat32m1_t v_diff = __riscv_vfsub_vv_f32m1(v_a, v_b, vl);\n        vfloat32m1_t v_abs_diff = __riscv_vfabs_v_f32m1(v_diff, vl);\n\n        vbool32_t mask_gt = __riscv_vfmv_s_b_b32(v_diff, vl, v_epsilon);\n        vbool32_t mask_lt = __riscv_vfmv_s_b_b32(v_diff, vl, __riscv_vfneg_v_f32m1(v_epsilon, vl));\n        vbool32_t mask_eq = __riscv_vfmv_s_b_b32(v_abs_diff, vl, v_zero);\n\n        vint8m1_t v_out = __riscv_vmv_v_x_i8m1(0, vl);\n        v_out = __riscv_vmerge_vvm_i8m1(v_out, __riscv_vmv_v_x_i8m1(1, vl), mask_gt, vl);\n        v_out = __riscv_vmerge_vvm_i8m1(v_out, __riscv_vmv_v_x_i8m1(-1, vl), mask_lt, vl);\n\n        __riscv_vse8_v_i8m1(&out[i], v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_epsilon = __riscv_vfmv_v_f_f32m1(epsilon, 8);\n    vfloat32m1_t v_zero = __riscv_vfmv_v_f_f32m1(0.0f, 8);\n    vfloat32m1_t v_one = __riscv_vfmv_v_f_f32m1(1.0f, 8);\n    vfloat32m1_t v_neg_one = __riscv_vfmv_v_f_f32m1(-1.0f, 8);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n\n        vfloat32m1_t v_a = __riscv_vle32_v_f32m1(&A[i], vl);\n        vfloat32m1_t v_b = __riscv_vle32_v_f32m1(&B[i], vl);\n        vfloat32m1_t v_diff = __riscv_vfsub_vv_f32m1(v_a, v_b, vl);\n        vfloat32m1_t v_abs_diff = __riscv_vfabs_v_f32m1(v_diff, vl);\n\n        vbool32_t mask_gt = __riscv_vfmv_v_f_b32(v_diff, vl, v_epsilon, vl);\n        vbool32_t mask_lt = __riscv_vfmv_v_f_b32(v_diff, vl, v_neg_one, vl);\n        vbool32_t mask_eq = __riscv_vfmv_v_f_b32(v_abs_diff, vl, v_epsilon, vl);\n\n        vint8m1_t v_out = __riscv_vmerge_vxm_i8m1(__riscv_vmerge_vxm_i8m1(__riscv_vmv_v_x_i8m1(0, vl), __riscv_vmv_v_x_i8m1(1, vl), mask_gt, vl), __riscv_vmv_v_x_i8m1(-1, vl), mask_lt, vl);\n\n        __riscv_vse8_v_i8m1(&out[i], v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_49_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    size_t vl;\n    vfloat32m1_t v_epsilon = vfmv_v_f_f32m1(epsilon, vl);\n    vfloat32m1_t v_zero = vfmv_v_f_f32m1(0.0f, vl);\n    vfloat32m1_t v_one = vfmv_v_f_f32m1(1.0f, vl);\n    vfloat32m1_t v_neg_one = vfmv_v_f_f32m1(-1.0f, vl);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = vsetvl_e32m1(length - i);\n\n        vfloat32m1_t v_a = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t v_b = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t v_diff = vfsub_vv_f32m1(v_a, v_b, vl);\n\n        vbool32_t mask_gt = vfgt_vv_f32m1_b32(v_diff, v_epsilon, vl);\n        vbool32_t mask_lt = vflt_vv_f32m1_b32(v_diff, vfmv_v_f_f32m1(-epsilon, vl), vl);\n        vbool32_t mask_eq = vmand_mm_b32(vmnot_m_b32(mask_gt, vl), vmnot_m_b32(mask_lt, vl), vl);\n\n        vint8m1_t v_out_gt = vfmv_v_f_i8m1(v_one, vl);\n        vint8m1_t v_out_lt = vfmv_v_f_i8m1(v_neg_one, vl);\n        vint8m1_t v_out_eq = vfmv_v_f_i8m1(v_zero, vl);\n\n        vint8m1_t v_out = vmux_m_i8m1(mask_gt, v_out_gt, vmux_m_i8m1(mask_lt, v_out_lt, v_out_eq), vl);\n\n        vse8_v_i8m1(out + i, v_out, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    vfloat32mf2_t v_float;\n    vint32mf2_t v_int;\n    vbool16_t mask;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        v_float = vle32_v_f32m1(A + i, vl);\n\n        v_int = vfcvt_x_f_v_i32m1(v_float, vl);\n\n        mask = vmsgt_vx_f32m1_b16(v_float, INT32_MAX, vl);\n        v_int = vmerge_vxm_i32m1(mask, INT32_MAX, v_int, vl);\n\n        mask = vmslt_vx_f32m1_b16(v_float, INT32_MIN, vl);\n        v_int = vmerge_vxm_i32m1(mask, INT32_MIN, v_int, vl);\n\n        vse32_v_i32m1(B + i, v_int, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    vfloat32mf2_t vf;\n    vint32mf2_t vi;\n    vbool32_t mask_max, mask_min;\n    vfloat32mf2_t vf_max = __riscv_vfmv_v_f_f32mf2(INT32_MAX, vl);\n    vfloat32mf2_t vf_min = __riscv_vfmv_v_f_f32mf2(INT32_MIN, vl);\n    vint32mf2_t vi_max = __riscv_vmv_v_x_i32mf2(INT32_MAX, vl);\n    vint32mf2_t vi_min = __riscv_vmv_v_x_i32mf2(INT32_MIN, vl);\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n        vf = __riscv_vle32_v_f32mf2(A + i, vl);\n\n        mask_max = __riscv_vmsgt_vv_f32mf2_b32(vf, vf_max, vl);\n        mask_min = __riscv_vmslt_vv_f32mf2_b32(vf, vf_min, vl);\n\n        vi = __riscv_vfncvt_x_f_v_i32mf2(vf, vl);\n        vi = __riscv_vmerge_vvm_i32mf2(vi, vi_max, mask_max, vl);\n        vi = __riscv_vmerge_vvm_i32mf2(vi, vi_min, mask_min, vl);\n\n        __riscv_vse32_v_i32mf2(B + i, vi, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    vfloat32mf2_t v_float;\n    vint32mf2_t v_int;\n    vbool16_t mask;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        v_float = vle32_v_f32m1(A + i, vl);\n\n        v_int = vfcvt_x_f_v_i32m1(v_float, vl);\n\n        mask = vmsgt_vx_i32m1_i32m1(v_int, INT32_MAX, vl);\n        v_int = vmerge_vvm_i32m1(v_int, INT32_MAX, mask, vl);\n\n        mask = vmslt_vx_i32m1_i32m1(v_int, INT32_MIN, vl);\n        v_int = vmerge_vvm_i32m1(v_int, INT32_MIN, mask, vl);\n\n        vse32_v_i32m1(B + i, v_int, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    vfloat32m1_t v_float;\n    vint32m1_t v_int;\n    vbool32_t mask;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        v_float = vle32_v_f32m1(A + i, vl);\n\n        v_int = vfcvt_x_f_v_i32m1(v_float, vl);\n\n        mask = vmsgt_vx_i32m1_i32(v_int, INT32_MAX, vl);\n        v_int = vmerge_vvm_i32m1(v_int, INT32_MAX, mask, vl);\n\n        mask = vmslt_vx_i32m1_i32(v_int, INT32_MIN, vl);\n        v_int = vmerge_vvm_i32m1(v_int, INT32_MIN, mask, vl);\n\n        vse32_v_i32m1(B + i, v_int, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_50_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    vfloat32mf2_t v_float;\n    vint32mf2_t v_int;\n    vbool16_t mask;\n\n    float max_float = (float)INT32_MAX;\n    float min_float = (float)INT32_MIN;\n\n    vfloat32mf2_t v_max_float = _rvv_float32mf2_set(max_float, 16);\n    vfloat32mf2_t v_min_float = _rvv_float32mf2_set(min_float, 16);\n\n    for (i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m2(size - i);\n        v_float = __riscv_vle32_v_f32mf2((float*)&A[i], vl);\n\n        mask = __riscv_vmsgt_vv_f32mf2_b16(v_float, v_max_float, vl);\n        v_float = __riscv_vmerge_vvm_f32mf2(v_float, v_max_float, mask, vl);\n\n        mask = __riscv_vmflt_vv_f32mf2_b16(v_float, v_min_float, vl);\n        v_float = __riscv_vmerge_vvm_f32mf2(v_float, v_min_float, mask, vl);\n\n        v_int = __riscv_vfcvt_x_f_v_f32mf2_i32mf2(v_float, vl);\n        __riscv_vse32_v_i32mf2(&B[i], v_int, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t vl;\n    vfloat32m1_t v_scale = __riscv_vfmv_v_f_f32m1((float)scale, vl);\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = __riscv_vlmax_e32m1() - i;\n        if (vl > size - i) {\n            vl = size - i;\n        }\n\n        vint32m1_t v_A = __riscv_vle32_v_i32m1(A + i, vl);\n        vfloat32m1_t v_B = __riscv_vfcvt_f_x_v_f32m1(v_A, vl);\n        v_B = __riscv_vfmul_vv_f32m1(v_B, v_scale, vl);\n        __riscv_vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t vl;\n    vfloat32m1_t v_scale = __riscv_vfmv_v_f_f32m1((float)scale, vl);\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = __riscv_vlmax_e32m1() - i;\n        vint32m1_t v_A = __riscv_vle32_v_i32m1(A + i, vl);\n        vfloat32m1_t v_B = __riscv_vfcvt_x_f_v_i32m1(v_A, vl);\n        v_B = __riscv_vfmul_vv_f32m1(v_B, v_scale, vl);\n        __riscv_vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t vl;\n    vfloat32m1_t v_scale = __riscv_vfmv_v_f_f32m1((float)scale, 1);\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n\n        vint32m1_t v_A = __riscv_vle32_v_i32m1(A + i, vl);\n        vfloat32m1_t v_B = __riscv_vfcvt_f_x_v_f32m1(v_A, vl);\n        v_B = __riscv_vfmul_vv_f32m1(v_B, v_scale, vl);\n\n        __riscv_vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t vl;\n    vfloat32m1_t v_scale = __riscv_vfmv_v_f_f32m1((float)scale, vl);\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n        vint32m1_t v_A = __riscv_vle32_v_i32m1(&A[i], vl);\n        vfloat32m1_t v_B = __riscv_vfcvt_f_x_v_f32m1(v_A, vl);\n        v_B = __riscv_vfmul_vv_f32m1(v_B, v_scale, vl);\n        __riscv_vse32_v_f32m1(&B[i], v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_51_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    size_t vl;\n    vfloat32m1_t v_scale = __riscv_vfmv_v_f_f32m1((float)scale, 8);\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n\n        vint32m1_t v_A = __riscv_vle32_v_i32m1(A + i, vl);\n        vfloat32m1_t v_B = __riscv_vfcvt_f_x_v_f32m1(v_A, vl);\n        v_B = __riscv_vfmul_vv_f32m1(v_B, v_scale, vl);\n\n        __riscv_vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t i = 0;\n    size_t vl;\n\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m8(size - i);\n\n        vfloat32m8_t v_a = vle32_v_f32m8(A + i, vl);\n        vfloat32m8_t v_b = vle32_v_f32m8(B + i, vl);\n        vfloat32m8_t v_result = vfdiv_vv_f32m8(v_a, v_b, vl);\n        vint32m8_t v_rounded = vfcvt_xu_f_v_i32m8(v_result, vl);\n\n        vse32_v_i32m8(C + i, v_rounded, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vfloat32m1_t v_a = vle32_v_f32m1(A + i, vl);\n        vfloat32m1_t v_b = vle32_v_f32m1(B + i, vl);\n        vfloat32m1_t v_div = vfdiv_vv_f32m1(v_a, v_b, vl);\n        vint32m1_t v_round = vfcvt_x_f_v_i32m1(v_div, vl);\n        vse32_v_i32m1(C + i, v_round, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t vl;\n    const float *a_ptr = A;\n    const float *b_ptr = B;\n    int32_t *c_ptr = C;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m8(size - i);\n\n        vfloat32m8_t v_a = vle32_v_f32m8(a_ptr, vl);\n        vfloat32m8_t v_b = vle32_v_f32m8(b_ptr, vl);\n        vfloat32m8_t v_div = vfdiv_vv_f32m8(v_a, v_b, vl);\n        vint32m8_t v_round = vfcvt_x_f_v_i32m8(v_div, vl);\n\n        vse32_v_i32m8(c_ptr, v_round, vl);\n\n        a_ptr += vl;\n        b_ptr += vl;\n        c_ptr += vl;\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t vl;\n    const float *a_ptr = A;\n    const float *b_ptr = B;\n    int32_t *c_ptr = C;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m8(size - i);\n\n        vfloat32m8_t v_a = vle32_v_f32m8(a_ptr + i);\n        vfloat32m8_t v_b = vle32_v_f32m8(b_ptr + i);\n        vfloat32m8_t v_div = vfdiv_vv_f32m8(v_a, v_b);\n        vint32m8_t v_round = vfcvt_x_f_v_i32m8(v_div, vl);\n\n        vse32_v_i32m8(c_ptr + i, v_round, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_52_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (; i + (vl = vsetvl_e32m8(size - i)) <= size; i += vl) {\n        vfloat32m8_t v_a = vle32_v_f32m8(A + i, vl);\n        vfloat32m8_t v_b = vle32_v_f32m8(B + i, vl);\n        vfloat32m8_t v_div = vfdiv_vv_f32m8(v_a, v_b, vl);\n        vint32m8_t v_round = vfcvt_rtz_x_f_v_i32m8(v_div, vl);\n        vse32_v_i32m8(C + i, v_round, vl);\n    }\n\n    for (; i < size; ++i) {\n        C[i] = (int32_t)lrintf(A[i] / B[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    vfloat64m1_t v_d;\n    vfloat32m1_t v_f;\n    vfloat64m1_t v_max = __riscv_vfmv_v_f_f64m1((double)FLT_MAX, 1);\n    vfloat64m1_t v_min = __riscv_vfmv_v_f_f64m1((double)-FLT_MAX, 1);\n\n    for (; i < size - (size % 8); i += 8) {\n        vl = 8;\n        v_d = __riscv_vle64_v_f64m1(&A[i], vl);\n        v_d = __riscv_vfmin_vv_f64m1(v_d, v_max, vl);\n        v_d = __riscv_vfmax_vv_f64m1(v_d, v_min, vl);\n        v_f = __riscv_vfncvt_f_f_w_f32m1(v_d, vl);\n        __riscv_vse32_v_f32m1(&B[i], v_f, vl);\n    }\n\n    for (; i < size; ++i) {\n        double val = A[i];\n        if (val > FLT_MAX) {\n            B[i] = FLT_MAX;\n        } else if (val < -FLT_MAX) {\n            B[i] = -FLT_MAX;\n        } else {\n            B[i] = (float)val;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    vfloat64m1_t v_double;\n    vfloat32m1_t v_float, v_max, v_min;\n    v_max = __riscv_vfmv_v_f_f32m1(FLT_MAX, vl);\n    v_min = __riscv_vfmv_v_f_f32m1(-FLT_MAX, vl);\n\n    for (i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e64m1(size - i);\n        v_double = __riscv_vle64_v_f64m1(&A[i], vl);\n        v_float = __riscv_vfncvt_f_f_w_f32m1(v_double, vl);\n        v_float = __riscv_vfmin_vv_f32m1(v_float, v_max, vl);\n        v_float = __riscv_vfmax_vv_f32m1(v_float, v_min, vl);\n        __riscv_vse32_v_f32m1(&B[i], v_float, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    vfloat_t v_flt_max = _vfmv_v_f_f32m1(FLT_MAX, vl);\n    vfloat_t v_neg_flt_max = _vfmv_v_f_f32m1(-FLT_MAX, vl);\n\n    for (i = 0; i < size; i += vl) {\n        vl = _vsetvl_e64m1(size - i);\n        vdouble_t v_dbl = _vle64_v_d64m1(A + i, vl);\n        vfloat_t v_flt = _vfncvt_f_f_w_d32m1(v_dbl, vl);\n\n        vbool_t mask_gt = _vmsgt_vf_f32m1_b8(v_flt, v_flt_max, vl);\n        vbool_t mask_lt = _vmslt_vf_f32m1_b8(v_flt, v_neg_flt_max, vl);\n\n        v_flt = _vmerge_vvm_f32m1(v_flt, v_flt_max, mask_gt, vl);\n        v_flt = _vmerge_vvm_f32m1(v_flt, v_neg_flt_max, mask_lt, vl);\n\n        _vse32_v_f32m1(B + i, v_flt, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    vfloat64m1_t v_double;\n    vfloat32m1_t v_float;\n    vfloat32m1_t v_flt_max = vfmv_v_f_f32m1(FLT_MAX, 8);\n    vfloat32m1_t v_neg_flt_max = vfmv_v_f_f32m1(-FLT_MAX, 8);\n\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e64m1(size - i);\n        v_double = vle64_v_f64m1(A + i, vl);\n        v_float = vfncvt_f_f_w_f32m1(v_double, vl);\n\n        v_float = vfmin_vv_f32m1(v_float, v_flt_max, vl);\n        v_float = vfmax_vv_f32m1(v_float, v_neg_flt_max, vl);\n\n        vse32_v_f32m1(B + i, v_float, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_53_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    vfloat64m1_t v_double;\n    vfloat32m1_t v_float, v_max, v_min;\n    v_max = __riscv_vfmv_v_f_f32m1(FLT_MAX, vl);\n    v_min = __riscv_vfmv_v_f_f32m1(-FLT_MAX, vl);\n\n    for (i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e64m1(size - i);\n        v_double = __riscv_vle64_v_f64m1(A + i, vl);\n        v_float = __riscv_vfncvt_f_f_w_f32m1(v_double, vl);\n        v_float = __riscv_vfmin_vv_f32m1(v_float, v_max, vl);\n        v_float = __riscv_vfmax_vv_f32m1(v_float, v_min, vl);\n        __riscv_vse32_v_f32m1(B + i, v_float, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    vint16mf2_t v_A;\n    vint32m1_t v_B;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e16m1(size - i);\n        v_A = vle16_v_i16mf2(A + i, vl);\n        v_B = vwcvtu_x_x_v_i32m1(v_A, vl);\n        vse32_v_i32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    vint16m1_t v_a;\n    vint32m2_t v_b;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e16m1(size - i);\n        v_a = vle16_v_i16m1(A + i, vl);\n        v_b = vwcvtu_x_x_v_i32m2(v_a, vl);\n        vse32_v_i32m2(B + i, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e16m1(size - i);\n        vint16m1_t v_A = vle16_v_i16m1(A + i, vl);\n        vint32m2_t v_B = vwcvtu_x_x_v_i32m2(v_A, vl);\n        vse32_v_i32m2(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e16m1(size - i);\n        vint16m1_t v_a = vle16_v_i16m1(A + i, vl);\n        vint32m2_t v_b = vwcvtu_x_x_v_i32m2(v_a, vl);\n        vse32_v_i32m2(B + i, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_54_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    size_t vl;\n    vint16m1_t v_a;\n    vint32m2_t v_b;\n\n    for (size_t i = 0; i < size; i += vl) {\n        vl = vsetvl_e_16m1(size - i);\n        v_a = vle16_v_i16m1(A + i, vl);\n        v_b = vwcvtu_x_x_v_i32m2(v_a, vl);\n        vse32_v_i32m2(B + i, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    size_t vl;\n\n    float inv_range = 1.0f / (max_val - min_val);\n    vfloat32m1_t v_min_val = __riscv_vfmv_v_f_f32m1(min_val, 1);\n    vfloat32m1_t v_inv_range = __riscv_vfmv_v_f_f32m1(inv_range, 1);\n    vfloat32m1_t v_zero = __riscv_vfmv_v_f_f32m1(0.0f, 1);\n    vfloat32m1_t v_one = __riscv_vfmv_v_f_f32m1(1.0f, 1);\n\n    for (; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n\n        vfloat32m1_t v_A = __riscv_vle32_v_f32m1(&A[i], vl);\n        vint32m1_t v_control = __riscv_vle32_v_i32m1(&control[i], vl);\n\n        vbool32_t mask = __riscv_vmsgt_vx_i32m1_b32(v_control, 0, vl);\n\n        vfloat32m1_t v_norm = __riscv_vfsub_vv_f32m1(v_A, v_min_val, vl);\n        v_norm = __riscv_vfmul_vv_f32m1(v_norm, v_inv_range, vl);\n        v_norm = __riscv_vfmax_vf_f32m1(v_norm, v_zero, vl, mask);\n        v_norm = __riscv_vfmin_vf_f32m1(v_norm, v_one, vl, mask);\n\n        vfloat32m1_t v_B = __riscv_vmerge_vvm_f32m1(v_A, v_norm, mask, vl);\n\n        __riscv_vse32_v_f32m1(&B[i], v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    size_t vl;\n\n    float inv_range = 1.0f / (max_val - min_val);\n    vfloat32m1_t vmin_val = _rvv_fmv_s_f_f32m1(min_val, 8);\n    vfloat32m1_t vmax_val = _rvv_fmv_s_f_f32m1(max_val, 8);\n    vfloat32m1_t vinv_range = _rvv_fmv_s_f_f32m1(inv_range, 8);\n    vfloat32m1_t vzero = _rvv_fmv_s_f_f32m1(0.0f, 8);\n    vfloat32m1_t vone = _rvv_fmv_s_f_f32m1(1.0f, 8);\n\n    for (i = 0; i < size; i += vl) {\n        vl = _rvv_vsetvl_e32m1(size - i);\n\n        vfloat32m1_t vA = _rvv_vle32_v_f32m1(&A[i], vl);\n        vint32m1_t vcontrol = _rvv_vle32_v_i32m1(&control[i], vl);\n\n        vbool32_t mask = _rvv_vmsgt_vx_i32m1_b32(vcontrol, 0, vl);\n\n        vfloat32m1_t vnorm = _rvv_vfnmsac_vv_f32m1(vzero, vA, vmin_val, vl);\n        vnorm = _rvv_vfmul_vv_f32m1(vnorm, vinv_range, vl);\n        vnorm = _rvv_vfmax_vf_f32m1(vnorm, vzero, vl);\n        vnorm = _rvv_vfmin_vf_f32m1(vnorm, vone, vl);\n\n        vfloat32m1_t vB = _rvv_vmerge_vvm_f32m1(vA, vnorm, mask, vl);\n\n        _rvv_vse32_v_f32m1(&B[i], vB, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    size_t vl;\n    float range = max_val - min_val;\n\n    vfloat32m1_t v_min_val = _rvv_fmv_s_f_f32m1(min_val, 8);\n    vfloat32m1_t v_range = _rvv_fmv_s_f_f32m1(range, 8);\n    vfloat32m1_t v_zero = _rvv_fmv_s_f_f32m1(0.0f, 8);\n    vfloat32m1_t v_one = _rvv_fmv_s_f_f32m1(1.0f, 8);\n\n    for (i = 0; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n\n        vfloat32m1_t v_A = __riscv_vle32_v_f32m1(&A[i], vl);\n        vint32m1_t v_control = __riscv_vle32_v_i32m1(&control[i], vl);\n\n        vbool32_t mask = __riscv_vmsgt_vx_i32m1_b32(v_control, 0, vl);\n\n        vfloat32m1_t v_B = __riscv_vfmv_v_f_f32m1(0.0f, vl);\n        vfloat32m1_t v_norm = __riscv_vfsub_vf_f32m1_m(mask, v_A, v_min_val, vl);\n        v_norm = __riscv_vfdiv_vf_f32m1_m(mask, v_norm, v_range, vl);\n        v_norm = __riscv_vfmax_vf_f32m1_m(mask, v_norm, v_zero, vl);\n        v_norm = __riscv_vfmin_vf_f32m1_m(mask, v_norm, v_one, vl);\n\n        v_B = __riscv_vmerge_vvm_f32m1(v_B, v_A, v_norm, mask, vl);\n\n        __riscv_vse32_v_f32m1(&B[i], v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    size_t vl;\n    vfloat32m1_t v_min_val = _rvv_fmv_s_f_f32m1(min_val, 8);\n    vfloat32m1_t v_max_val = _rvv_fmv_s_f_f32m1(max_val, 8);\n    vfloat32m1_t v_zero = _rvv_fmv_s_f_f32m1(0.0f, 8);\n    vfloat32m1_t v_one = _rvv_fmv_s_f_f32m1(1.0f, 8);\n    vfloat32m1_t v_range = _rvv_fsub_vv_f32m1(v_max_val, v_min_val, 8);\n\n    for (; i + 7 < size; i += vl) {\n        vl = _rvv_vsetvl_e32m1(size - i);\n        vfloat32m1_t v_A = _rvv_vle32_v_f32m1(A + i, vl);\n        vint32m1_t v_control = _rvv_vle32_v_i32m1(control + i, vl);\n        vfloat32m1_t v_B = _rvv_vle32_v_f32m1(B + i, vl);\n\n        vbool32_t mask = _rvv_vmsgt_vx_i32m1_b32(v_control, 0, vl);\n        vfloat32m1_t v_norm = _rvv_vfsub_vv_f32m1_m(mask, v_A, v_min_val, vl);\n        v_norm = _rvv_vfdiv_vv_f32m1_m(mask, v_norm, v_range, vl);\n        v_norm = _rvv_vfmax_vf_f32m1_m(mask, v_norm, v_zero, vl);\n        v_norm = _rvv_vfmin_vf_f32m1_m(mask, v_norm, v_one, vl);\n\n        v_B = _rvv_vmerge_vvm_f32m1(v_B, v_norm, mask, vl);\n        _rvv_vse32_v_f32m1(B + i, v_B, vl);\n    }\n\n    for (; i < size; ++i) {\n        if (control[i] > 0) {\n            float norm = (A[i] - min_val) / (max_val - min_val);\n            norm = norm < 0.0f ? 0.0f : norm > 1.0f ? 1.0f : norm;\n            B[i] = norm;\n        } else {\n            B[i] = A[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_55_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    size_t i = 0;\n    size_t vl;\n    float range = max_val - min_val;\n    vfloat32m1_t v_min_val = _rvv_fmv_s_f_f32m1(min_val, 8);\n    vfloat32m1_t v_range = _rvv_fmv_s_f_f32m1(range, 8);\n    vfloat32m1_t v_zero = _rvv_fmv_s_f_f32m1(0.0f, 8);\n    vfloat32m1_t v_one = _rvv_fmv_s_f_f32m1(1.0f, 8);\n\n    for (; i < size; i += vl) {\n        vl = __riscv_vsetvl_e32m1(size - i);\n        vfloat32m1_t v_A = __riscv_vle32_v_f32m1(A + i, vl);\n        vint32m1_t v_control = __riscv_vle32_v_i32m1(control + i, vl);\n        vbool32_t mask = __riscv_vmsgt_vx_i32m1_b32(v_control, 0, vl);\n\n        vfloat32m1_t v_norm = __riscv_vfsub_vv_f32m1(v_A, v_min_val, vl);\n        v_norm = __riscv_vfdiv_vv_f32m1(v_norm, v_range, vl);\n        v_norm = __riscv_vfmax_vf_f32m1(v_norm, v_zero, vl);\n        v_norm = __riscv_vfmin_vf_f32m1(v_norm, v_one, vl);\n\n        vfloat32m1_t v_B = __riscv_vmerge_vvm_f32m1(v_A, v_norm, mask, vl);\n        __riscv_vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    vuint32m1_t v_A;\n    vfloat32m1_t v_B;\n\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        v_A = vle32_v_u32m1(A + i);\n        v_B = vfcvt_f_xu_v_f32m1(v_A, 16);\n        v_B = vfsqrt_v_f32m1(v_B, vl);\n        vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vuint32m1_t v_A = vle32_v_u32m1(A + i, vl);\n        vfloat32m1_t v_B = vfsqrt_v_f32m1(vfcvt_f_xu_v_f32m1(v_A, vl), vl);\n        vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vuint32m1_t v_A = vle32_v_u32m1(A + i, vl);\n        vfloat32m1_t v_B = vfsqrt_v_f32m1(vfcvt_f_xu_v_f32m1(vsrl_vx_u32m1(v_A, 16, vl), vl), vl);\n        vse32_v_f32m1(B + i, v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m8(size - i);\n        vuint32m8_t v_A = vle32_v_u32m8(A + i, vl);\n        vuint16m4_t v_high16 = vslideup_vx_u32m8_u16m4(v_A, 0, vl);\n        vfloat32m4_t v_float = vfcvt_f_xu_v_f32m4(v_high16, vl);\n        vfloat32m4_t v_sqrt = vfsqrt_v_f32m4(v_float, vl);\n        vse32_v_f32m4(B + i, v_sqrt, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_56_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m8(size - i);\n        vuint32m8_t v_A = vle32_v_u32m8(&A[i], vl);\n        vfloat32m8_t v_B = vfsqrt_v_f32m8(vfcvt_f_xu_v_f32m8(v_A, vl), vl);\n        vse32_v_f32m8(&B[i], v_B, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vfloat32m1_t v_b = vle32_v_f32m1((float*)&A[i], vl);\n        vse32_v_f32m1(B + i, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vfloat32m1_t v_b = vle32_v_u32m1((uint32_t*)&A[i], vl);\n        vse32_v_f32m1(&B[i], v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vfloat32m1_t v_b = vle32_v_u32m1((uint32_t*)&A[i], vl);\n        vse32_v_f32m1(&B[i], v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m1(size - i);\n        vfloat32m1_t v_b = vle32_v_f32m1((float*)&A[i], vl);\n        vse32_v_f32m1(&B[i], v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_57_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t vl;\n    size_t i = 0;\n    for (i = 0; i < size; i += vl) {\n        vl = vsetvl_e32m8(size - i);\n        vfloat32m8_t v_b = vle32_v_f32m8((float*)&A[i], vl);\n        vse32_v_f32m8(B + i, v_b, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    vbool8_t mask = _rvv_init_bool(8);\n    vint32m1_t v_A = _rvv_init_int32(8);\n    vint32m1_t v_A_prev = _rvv_init_int32(8);\n    vfloat32m1_t v_diff = _rvv_init_float32(8);\n    vbool8_t v_cond = _rvv_init_bool(8);\n\n    diff[0] = 0.0f;\n    size_t i = 1;\n    for (; i + 7 < size; i += 8) {\n        v_A = _rvv_load_int32_8(A + i);\n        v_A_prev = _rvv_load_int32_8(A + i - 1);\n        v_cond = _rvv_load_bool_8(cond + i);\n        v_diff = _rvv_fsub_float32_int32(_rvv_cvt_float_int32(v_A, 8), _rvv_cvt_float_int32(v_A_prev, 8), 8);\n        v_diff = _rvv_mask_float32(v_diff, v_cond, 0.0f, 8);\n        _rvv_store_float32_8(diff + i, v_diff);\n    }\n\n    for (; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    size_t i = 1;\n    size_t vl;\n\n    for (; i < size - (size % 8); i += vl) {\n        vl = vsetvl_e32m1(size - i);\n\n        vbool8_t mask = vle8_v_b8((bool*)(cond + i), vl);\n        vint32m1_t v_A = vle32_v_i32m1(A + i, vl);\n        vint32m1_t v_A_prev = vle32_v_i32m1(A + i - 1, vl);\n\n        vint32m1_t v_diff = vsub_vv_i32m1(v_A, v_A_prev, vl);\n        vfloat32m1_t v_diff_f = vfcvt_f_x_v_f32m1(v_diff, vl);\n\n        vfloat32m1_t v_zero = vmv_v_x_f32m1(0.0f, vl);\n        vfloat32m1_t v_result = vmerge_vvm_f32m1(v_zero, v_diff_f, mask, vl);\n\n        vse32_v_f32m1(diff + i, v_result, vl);\n    }\n\n    for (; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    size_t vl;\n    vint32m1_t v_A, v_A_prev;\n    vbool32_t v_cond;\n    vfloat32m1_t v_diff, v_zero;\n\n    v_zero = _vv_f32m1_set_f32(0.0f);\n    v_diff = _vv_f32m1_set_f32(0.0f);\n\n    vl = _vv_size_t_get_vl(size);\n    v_A_prev = _vv_int32m1_load(A);\n    _vv_float32m1_store(diff, v_zero, vl);\n\n    for (size_t i = 1; i < size; i += vl) {\n        vl = _vv_size_t_get_vl(size - i);\n        v_A = _vv_int32m1_load(&A[i]);\n        v_cond = _vv_bool32_load(&cond[i]);\n\n        vint32m1_t v_diff_int = _vv_int32m1_sub(v_A, v_A_prev, vl);\n        v_diff = _vv_f32m1_vfmv_v_f_int32m1(v_diff_int, vl);\n\n        v_diff = _vv_f32m1_merge(v_zero, v_diff, v_cond, vl);\n        _vv_float32m1_store(&diff[i], v_diff, vl);\n\n        v_A_prev = v_A;\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    diff[0] = 0.0f;\n    size_t i = 1;\n    size_t vl;\n\n    for (; i < size - (size % 8); i += vl) {\n        vl = vsetvl_e32m1(size - i);\n\n        vbool8_t mask = vle8_v_b8((bool*)(cond + i), vl);\n        vint32m1_t vA = vle32_v_i32m1(A + i, vl);\n        vint32m1_t vA_prev = vle32_v_i32m1(A + i - 1, vl);\n        vfloat32m1_t vdiff = vfwcvt_f_x_v_f32m1(vsub_vv_i32m1(vA, vA_prev, vl), vl);\n\n        vfloat32m1_t vzero = vfmv_v_f_f32m1(0.0f, vl);\n        vfloat32m1_t vresult = vmerge_vvm_f32m1(vdiff, vzero, mask, vl);\n\n        vse32_v_f32m1(diff + i, vresult, vl);\n    }\n\n    for (; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_58_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    vbool8_t mask = __riscv_vfmv_s_f_b8(0.0f, 8);\n    vfloat32m1_t vdiff = __riscv_vfsub_vv_f32m1(vdiff, vdiff, vdiff, 8);\n    diff[0] = 0.0f;\n\n    size_t i = 1;\n    for (; i + 7 < size; i += 8) {\n        vint32m1_t vA = __riscv_vle32_v_i32m1(&A[i], 8);\n        vint32m1_t vA_prev = __riscv_vle32_v_i32m1(&A[i - 1], 8);\n        vbool8_t vcond = __riscv_vlm_v_b8(&cond[i], 8);\n\n        vint32m1_t vdiff_int = __riscv_vsub_vv_i32m1(vA, vA_prev, 8);\n        vdiff = __riscv_vfwcvt_f_x_v_f32m1(vdiff_int, 8);\n\n        vdiff = __riscv_vmerge_vvm_f32m1(vdiff, vdiff, mask, vcond, 8);\n\n        __riscv_vse32_v_f32m1(&diff[i], vdiff, 8);\n    }\n\n    for (; i < size; ++i) {\n        if (cond[i]) {\n            diff[i] = (float)(A[i] - A[i - 1]);\n        } else {\n            diff[i] = 0.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vlen = vsetvl_e32m1(length);\n    vuint32m1_t v_src;\n    vuint64m2_t v_dst;\n    uint64_t set_high_bits = 0xFFFFFFFF00000000;\n\n    for (size_t i = 0; i < length; i += vlen) {\n        size_t vl = vsetvl_e32m1(length - i);\n        v_src = vle32_v_u32m1(&src[i], vl);\n        v_dst = vwcvtu_vx_u64m2(v_src, vl);\n        v_dst = vor_vv_u64m2(v_dst, vcreate_u64m2(set_high_bits), vl);\n        vse64_v_u64m2(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint64m2_t v_dst;\n    vuint64m2_t v_mask = __riscv_vmv_v_x_u64m2(0xFFFFFFFF00000000, 2);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        v_src = __riscv_vle32_v_u32m1(&src[i], vl);\n        v_dst = __riscv_vwcvtu_vv_u64m2(v_src, vl);\n        v_dst = __riscv_vor_vv_u64m2(v_dst, v_mask, vl);\n        __riscv_vse64_v_u64m2(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint64m2_t v_dst;\n    vuint64m2_t v_mask = __riscv_vmv_v_x_u64m2(0xFFFFFFFF00000000, 2);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        v_src = __riscv_vle32_v_u32m1(&src[i], vl);\n        v_dst = __riscv_vwcvtu_x_x_v_u64m2(v_src, vl);\n        v_dst = __riscv_vor_vv_u64m2(v_dst, v_mask, vl);\n        __riscv_vse64_v_u64m2(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint64m2_t v_dst;\n    vuint64m2_t v_mask = __riscv_vmv_v_x_u64m2(0xFFFFFFFF00000000, 2);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        v_src = __riscv_vle32_v_u32m1(&src[i], vl);\n        v_dst = __riscv_vwcvtu_vv_u64m2(v_src, vl);\n        v_dst = __riscv_vor_vv_u64m2(v_dst, v_mask, vl);\n        __riscv_vse64_v_u64m2(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_59_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    size_t vl;\n    vuint32m1_t v_src;\n    vuint64m2_t v_dst;\n    vuint64m2_t v_mask = __riscv_vmv_v_x_u64m2(0xFFFFFFFF00000000, 2);\n\n    for (size_t i = 0; i < length; i += vl) {\n        vl = __riscv_vsetvl_e32m1(length - i);\n        v_src = __riscv_vle32_v_u32m1(&src[i], vl);\n        v_dst = __riscv_vwcvtu_vv_u64m2(v_src, vl);\n        v_dst = __riscv_vor_vv_u64m2(v_dst, v_mask, vl);\n        __riscv_vse64_v_u64m2(&dst[i], v_dst, vl);\n    }\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    double sum = 0.0;\n    vfloat64m1_t v_sum = _rvv_fmv_s_x_f64m1(0.0, 8);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        size_t chunk_size = (i + vlen > length) ? length - i : vlen;\n        vint16m1_t v_index = _rvv_vle16_v_i16m1(index + i, chunk_size);\n        vfloat64m1_t v_vec = _rvv_vlgather_vv_f64m1(vec, v_index, 8);\n        v_sum = _rvv_vfadd_vv_f64m1(v_sum, v_vec, 8);\n    }\n\n    sum = _rvv_vfredsum_vs_f64m1_f64m1(v_sum, sum, 8);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    double sum = 0.0;\n    vfloat64m1_t v_sum = _rvv_fmv_v_f_f64m1(0.0, vlen);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vint16m1_t v_index = _rvv_lv_x_i16m1(index + i, vlen);\n        vfloat64m1_t v_vec = _rvv_lv_f_f64m1(vec, v_index, vlen);\n        v_sum = _rvv_fadd_vv_f64m1(v_sum, v_vec, vlen);\n    }\n\n    sum = _rvv_fmv_f_s_f64m1_f64(v_sum);\n\n    // Reduce the vector sum\n    for (size_t i = 1; i < vlen; ++i) {\n        sum += ((double*)&v_sum)[i];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    double sum = 0.0;\n    vfloat64m1_t v_sum = _rvv_fmv_v_f_d(0.0, vlen);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        size_t chunk = (i + vlen < length) ? vlen : length - i;\n        vint16m1_t v_index = _rvv_vle16_v_i16m1(index + i, chunk);\n        vfloat64m1_t v_vec = _rvv_vlgather_vv_f64m1(vec, v_index, vlen);\n        v_sum = _rvv_vfadd_vv_f64m1(v_sum, v_vec, vlen);\n    }\n\n    sum = _rvv_fvredsum_vs_f_f64m1_f64(v_sum, v_sum, vlen);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t vlen = 8; // Assuming vector length of 8 for double precision\n    double sum = 0.0;\n    vfloat64m1_t vsum = _rvv_fmv_s_x_f64m1(0.0, 8);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        size_t chunk = (i + vlen < length) ? vlen : length - i;\n        vint16m1_t vindex = _rvv_vle16_v_i16m1(index + i, chunk);\n        vfloat64m1_t vvec = _rvv_vloxei64_v_f64m1(vec, vindex, 8);\n        vsum = _rvv_vfadd_vv_f64m1(vsum, vvec, 8);\n    }\n\n    sum = _rvv_fmv_f_s_f64m1_f64(vsum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_60_RVV", "completion": "```c\n#include <riscv_vector.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    size_t i = 0;\n    double sum = 0.0;\n    vfloat64m1_t v_sum = _rvv_fmv_s_x_f64m1(sum, 64);\n\n    for (; i + 64 <= length; i += 64) {\n        vint16m1_t v_index = _rvv_lv_x_i16m1(index + i, 64);\n        vfloat64m1_t v_vec = _rvv_lw_index_v_f64m1(vec, v_index, 64);\n        v_sum = _rvv_fadd_vv_f64m1(v_sum, v_vec, 64);\n    }\n\n    sum = _rvv_fmv_f_s_f64m1(v_sum);\n\n    for (; i < length; ++i) {\n        sum += vec[index[i]];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t vl = vsetvl_e64m1(output_size);\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vl);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_index = (i + k) * input_size + (j + l);\n                    size_t kernel_index = k * kernel_size + l;\n\n                    double input_val = input[input_index];\n                    double kernel_val = kernel[kernel_index];\n\n                    vfloat64m1_t vinput = vfmv_v_f_f64m1(input_val, vl);\n                    vfloat64m1_t vkernel = vfmv_v_f_f64m1(kernel_val, vl);\n\n                    vsum = vfmul_vv_f64m1(vsum, vinput, vl);\n                    vsum = vfmul_vv_f64m1(vsum, vkernel, vl);\n                }\n            }\n\n            double sum = vfmv_f_s_f64m1_f64(vsum);\n            sum = (sum > 0) ? sum : 0; // ReLU activation\n            output[i * output_size + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t vlen = vsetvl_e64m1(output_size);\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlen);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n\n                    double input_val = input[input_idx];\n                    double kernel_val = kernel[kernel_idx];\n\n                    vfloat64m1_t vinput = vle64_v_f64m1(&input_val, vlen);\n                    vfloat64m1_t vkernel = vle64_v_f64m1(&kernel_val, vlen);\n\n                    vsum = vfmul_vv_f64m1(vsum, vinput, vlen);\n                    vsum = vfmul_vv_f64m1(vsum, vkernel, vlen);\n                }\n            }\n\n            vfloat64m1_t vrelu = vfmax_vf_f64m1(vsum, 0.0, vlen);\n            vse64_v_f64m1(&output[i * output_size + j], vrelu, vlen);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t vl;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            vfloat64m1_t vsum = _vv_set_f64_scalar(0.0);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n\n                    vfloat64m1_t vinput = _vv_load_f64m1(&input[input_idx], &vl);\n                    vfloat64m1_t vkernel = _vv_load_f64m1(&kernel[kernel_idx], &vl);\n                    vfloat64m1_t vprod = _vv_fmacc_vv_f64m1(vsum, vinput, vkernel, vl);\n                    vsum = vprod;\n                }\n            }\n\n            vfloat64m1_t vrelu = _vv_fmax_vf_f64m1(vsum, 0.0, vl);\n            size_t output_idx = i * output_size + j;\n            _vv_store_f64m1(&output[output_idx], vrelu, vl);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t vlen = vsetvl_e64m1(output_size);\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vlen);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_index = (i + k) * input_size + (j + l);\n                    size_t kernel_index = k * kernel_size + l;\n\n                    double input_val = input[input_index];\n                    double kernel_val = kernel[kernel_index];\n\n                    vfloat64m1_t vinput = vfmv_v_f_f64m1(input_val, vlen);\n                    vfloat64m1_t vkernel = vfmv_v_f_f64m1(kernel_val, vlen);\n\n                    vsum = vfmul_vv_f64m1(vsum, vinput, vlen);\n                    vsum = vfmul_vv_f64m1(vsum, vkernel, vlen);\n                }\n            }\n\n            vfloat64m1_t vrelu = vfmax_vf_f64m1(vsum, 0.0, vlen);\n            vfloat64m1_t voutput = vfredmax_vs_f64m1_f64m1(vrelu, vrelu, vlen);\n\n            output[i * output_size + j] = vfmv_f_s_f64m1_f64(voutput);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t vl;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            vfloat64m1_t vsum = vfmv_v_f_f64m1(0.0, vl);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_index = (i + k) * input_size + (j + l);\n                    size_t kernel_index = k * kernel_size + l;\n\n                    vfloat64m1_t vinput = vle64_v_f64m1(&input[input_index], vl);\n                    vfloat64m1_t vkernel = vle64_v_f64m1(&kernel[kernel_index], vl);\n\n                    vsum = vfadd_vv_f64m1(vsum, vfmul_vv_f64m1(vinput, vkernel, vl), vl);\n                }\n            }\n\n            double sum = vfmv_f_s_f64m1_f64(vsum);\n            sum = sum > 0 ? sum : 0; // ReLU activation\n            output[i * output_size + j] = sum;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t vl;\n    size_t n = numbers.size();\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e64m1(n - i);\n        vfloat64m1_t v0 = vle64_v_f64m1(&numbers[i], vl);\n        for (size_t j = i + 1; j < n; j += vl) {\n            size_t vl1 = vsetvl_e64m1(n - j);\n            vfloat64m1_t v1 = vle64_v_f64m1(&numbers[j], vl1);\n            vfloat64m1_t v_diff = vfabs_v_f64m1(v0 - v1, vl1);\n            vbool64_t mask = vmslt_vx_f64m1_b64(v_diff, threshold, vl1);\n            if (vfirst_m_b64(mask, vl1) != -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t vlen = 8; // Assuming vector length of 8 (depends on the implementation)\n    size_t n = numbers.size();\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vfloat64m1_t vec_a = vle64_v_f64m1(&numbers[i], chunk_size);\n\n        for (size_t j = i + 1; j < n; j += vlen) {\n            size_t chunk_size_j = std::min(vlen, n - j);\n            vfloat64m1_t vec_b = vle64_v_f64m1(&numbers[j], chunk_size_j);\n\n            vfloat64m1_t diff = vfabs_vv_f64m1(vsub_vv_f64m1(vec_a, vec_b, chunk_size), chunk_size);\n            vbool64_t mask = vmslt_vf_f64m1_b64(diff, threshold, chunk_size);\n\n            if (vfirst_m_b64(mask, chunk_size) != -1) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t n = numbers.size();\n    size_t vl = 0;\n    vfloat64m1_t v0, v1, v_diff, v_abs_diff, v_threshold;\n    vbool64_t v_mask, v_result;\n\n    v_threshold = vfmv_v_f_f64m1(threshold, vl);\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e64m1(n - i);\n        v0 = vle64_v_f64m1(&numbers[i], vl);\n\n        for (size_t j = i + 1; j < n; j += vl) {\n            size_t vl_j = vsetvl_e64m1(n - j);\n            v1 = vle64_v_f64m1(&numbers[j], vl_j);\n\n            v_diff = vfsub_vv_f64m1(v0, v1, vl);\n            v_abs_diff = vfabs_v_f64m1(v_diff, vl);\n            v_mask = vmslt_vv_f64m1_b64(v_abs_diff, v_threshold, vl);\n\n            if (vfirst_m_b64(v_mask, vl)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t vlen = 8; // Assuming vector length of 8 (64 bytes / 8 bytes per double)\n    size_t n = numbers.size();\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(n - i, vlen);\n        vbool8_t mask = __riscv_vset_v_i8m1_b8(chunk_size);\n\n        vfloat64m1_t vi = __riscv_vle64_v_f64m1(&numbers[i], mask);\n\n        for (size_t j = i + 1; j < n; j += vlen) {\n            size_t chunk_size_j = std::min(n - j, vlen);\n            vbool8_t mask_j = __riscv_vset_v_i8m1_b8(chunk_size_j);\n\n            vfloat64m1_t vj = __riscv_vle64_v_f64m1(&numbers[j], mask_j);\n\n            vfloat64m1_t diff = __riscv_vfabs_v_f64m1(__riscv_vfsub_vv_f64m1(vi, vj, vlen), vlen);\n            vbool64_t cmp_mask = __riscv_vmslt_vv_f64m1_b64(diff, threshold, vlen);\n\n            if (__riscv_vmfirst_m_b64(cmp_mask, vlen) != -1) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t vlen = 8; // Assuming vector length of 8 (64 bytes / 8 bytes per double)\n    size_t n = numbers.size();\n    size_t i = 0;\n\n    for (; i <= n - vlen; i += vlen) {\n        vfloat64m1_t v0 = _rvv_load_f64m1(&numbers[i]);\n        vfloat64m1_t v1 = _rvv_load_f64m1(&numbers[i + 1]);\n\n        vfloat64m1_t diff = _rvv_fabs_f64m1(_rvv_fsub_f64m1(v0, v1, vlen), vlen);\n        vbool64_t mask = _rvv_cmplt_f64m1(diff, threshold, vlen);\n\n        if (_rvv_reduce_max_b64(mask, vlen)) {\n            return true;\n        }\n    }\n\n    for (; i < n - 1; ++i) {\n        if (fabs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    size_t vl;\n    int balance = 0;\n    size_t i = 0;\n    size_t n = operations.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_ops = vle32_v_i32m1(&operations[i], vl);\n        vint32m1_t v_balance = vmv_v_x_i32m1(balance, vl);\n        v_balance = vadd_vv_i32m1(v_balance, v_ops, vl);\n        vbool32_t mask = vmslt_vx_i32m1_b32(v_balance, 0, vl);\n\n        if (vfirst_m_b32(mask, vl) != -1) {\n            return true;\n        }\n\n        balance = v_balance[0];\n        i += vl;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    size_t vl;\n    int balance = 0;\n    size_t i = 0;\n    size_t n = operations.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_ops = vle32_v_i32m1(&operations[i], vl);\n        vint32m1_t v_balance = vmv_v_x_i32m1(balance, vl);\n        v_balance = vadd_vv_i32m1(v_balance, v_ops, vl);\n        vbool32_t mask = vmslt_vx_i32m1_b32(v_balance, 0, vl);\n\n        if (vfirst_m_b32(mask, vl) != -1) {\n            return true;\n        }\n\n        balance = vreduce_v_i32m1_sum(v_balance, v_balance, vl);\n        i += vl;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    size_t vector_bits = 128; // Example vector length\n    size_t n = operations.size();\n    int balance = 0;\n\n    size_t i = 0;\n    for (; i + vsetvl_e32m1(vector_bits) <= n; i += vsetvl_e32m1(vector_bits)) {\n        vint32m1_t v_operations = vle32_v_i32m1(&operations[i], vsetvl_e32m1(vector_bits));\n        vint32m1_t v_balance = vadd_vv_i32m1(v_operations, vmv_v_x_i32m1(balance, vsetvl_e32m1(vector_bits)));\n        vbool32_t mask = vmslt_vx_i32m1_b32(v_balance, 0);\n\n        if (vfirst_m_b32(mask, vsetvl_e32m1(vector_bits)) != -1) {\n            return true;\n        }\n\n        balance = vredsum_vs_i32m1_i32m1(v_balance, v_operations, vsetvl_e32m1(vector_bits));\n    }\n\n    for (; i < n; ++i) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    size_t vl = 0;\n    int balance = 0;\n    size_t i = 0;\n    size_t n = operations.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_ops = vle32_v_i32m1(&operations[i], vl);\n        vint32m1_t v_balance = vmv_v_x_i32m1(balance, vl);\n        v_balance = vadd_vv_i32m1(v_balance, v_ops, vl);\n        vbool32_t mask = vmslt_vx_i32m1_b32(v_balance, 0, vl);\n\n        if (vfirst_m_b32(mask, vl) != -1) {\n            return true;\n        }\n\n        balance = v_balance[vl - 1];\n        i += vl;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t n = operations.size();\n    int balance = 0;\n\n    for (size_t i = 0; i < n; i += vlmax) {\n        size_t vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_ops = vle32_v_i32m1(&operations[i], vl);\n        vint32m1_t v_balance = vmv_v_x_i32m1(balance, vl);\n        v_balance = vadd_vv_i32m1(v_balance, v_ops, vl);\n        vstore32_v_i32m1(&operations[i], v_balance, vl);\n\n        int temp_balance = 0;\n        for (size_t j = 0; j < vl; ++j) {\n            temp_balance += operations[i + j];\n            if (temp_balance < 0) {\n                return true;\n            }\n        }\n        balance = temp_balance;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n    size_t vl;\n\n    // Calculate the mean\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vfloat64m1_t v_num = vle64_v_f64m1(&numbers[i], vl);\n        vfloat64m1_t v_sum = vfredsum_vs_f64m1_f64m1(v_num, v_num, sum, vl);\n        sum += vfloat64m1_t_get_f64m1(v_sum);\n    }\n    double mean = sum / n;\n\n    // Calculate the mean absolute deviation\n    double mad_sum = 0.0;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vfloat64m1_t v_num = vle64_v_f64m1(&numbers[i], vl);\n        vfloat64m1_t v_mean = vmv_v_x_f64m1(mean, vl);\n        vfloat64m1_t v_diff = vfsub_vv_f64m1(v_num, v_mean, vl);\n        vfloat64m1_t v_abs_diff = vfabs_v_f64m1(v_diff, vl);\n        vfloat64m1_t v_mad_sum = vfredsum_vs_f64m1_f64m1(v_abs_diff, v_abs_diff, mad_sum, vl);\n        mad_sum += vfloat64m1_t_get_f64m1(v_mad_sum);\n    }\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n    size_t vlen = 0;\n\n    vdouble_t vsum = _vd_f64(0.0);\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e64m1(n - i);\n        vdouble_t vx = vle64_v_f64m1(&numbers[i], vlen);\n        vsum = _vd_f64_add(vsum, vx, vlen);\n    }\n    sum = _vd_f64_reduce_add(vsum, n);\n    double mean = sum / n;\n\n    vdouble_t vmad = _vd_f64(0.0);\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e64m1(n - i);\n        vdouble_t vx = vle64_v_f64m1(&numbers[i], vlen);\n        vdouble_t vmean = _vd_f64_broadcast(mean, vlen);\n        vdouble_t vdiff = _vd_f64_sub(vx, vmean, vlen);\n        vdouble_t vabs = _vd_f64_abs(vdiff, vlen);\n        vmad = _vd_f64_add(vmad, vabs, vlen);\n    }\n    double mad = _vd_f64_reduce_add(vmad, n) / n;\n    return mad;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n    size_t vl;\n\n    // Calculate the mean\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e64m1(n - i);\n        vfloat64m1_t v = vle64_v_f64m1(&numbers[i], vl);\n        vfloat64m1_t vsum = vfredsum_vs_f64m1_f64m1(v, v, sum, vl);\n        sum = vfloat64m1_get_f64m1(vsum);\n    }\n    double mean = sum / n;\n\n    // Calculate the absolute deviations and their sum\n    sum = 0.0;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e64m1(n - i);\n        vfloat64m1_t v = vle64_v_f64m1(&numbers[i], vl);\n        vfloat64m1_t vmean = vfmv_v_f_f64m1(mean, vl);\n        vfloat64m1_t vdiff = vfsub_vv_f64m1(v, vmean, vl);\n        vfloat64m1_t vabsdiff = vfabs_v_f64m1(vdiff, vl);\n        vfloat64m1_t vsum = vfredsum_vs_f64m1_f64m1(vabsdiff, vabsdiff, sum, vl);\n        sum = vfloat64m1_get_f64m1(vsum);\n    }\n\n    return sum / n;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n    double mean = 0.0;\n\n    size_t vlen = 0;\n    vfloat64m1_t vsum = _rvv_fmv_s_x_f64m1(0.0, 8);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = n - i < 8 ? n - i : 8;\n        vfloat64m1_t v = _rvv_vle64_v_f64m1(&numbers[i], vlen);\n        vsum = _rvv_vfadd_vv_f64m1(vsum, v, vlen);\n    }\n\n    sum = _rvv_fmv_x_s_f64m1_f64(vsum);\n    mean = sum / n;\n\n    double mad_sum = 0.0;\n    vfloat64m1_t vmean = _rvv_fmv_s_x_f64m1(mean, 8);\n    vfloat64m1_t vmad_sum = _rvv_fmv_s_x_f64m1(0.0, 8);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = n - i < 8 ? n - i : 8;\n        vfloat64m1_t v = _rvv_vle64_v_f64m1(&numbers[i], vlen);\n        vfloat64m1_t vdiff = _rvv_vfsub_vv_f64m1(v, vmean, vlen);\n        vfloat64m1_t vabsdiff = _rvv_vfabs_v_f64m1(vdiff, vlen);\n        vmad_sum = _rvv_vfadd_vv_f64m1(vmad_sum, vabsdiff, vlen);\n    }\n\n    mad_sum = _rvv_fmv_x_s_f64m1_f64(vmad_sum);\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n    size_t vlen = 0;\n\n    // Calculate the mean\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e64m1(n - i);\n        vfloat64m1_t v = vle64_v_f64m1(&numbers[i], vlen);\n        sum += vredsum_vs_f64m1_f64m1(v, sum, vlen);\n    }\n    double mean = sum / n;\n\n    // Calculate the mean absolute deviation\n    double mad_sum = 0.0;\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e64m1(n - i);\n        vfloat64m1_t v = vle64_v_f64m1(&numbers[i], vlen);\n        vfloat64m1_t vmean = vmv_v_x_f64m1(mean, vlen);\n        vfloat64m1_t vabsdiff = vfabs_v_f64m1(vsub_vv_f64m1(v, vmean, vlen));\n        mad_sum += vredsum_vs_f64m1_f64m1(vabsdiff, mad_sum, vlen);\n    }\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    std::vector<int> result((n * 2) - 1);\n\n    size_t vl = 0;\n    size_t i = 0;\n    size_t j = 0;\n\n    vint32m1_t v_delim = vle32_v_i32m1(&delimeter, 1);\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_num = vle32_v_i32m1(&numbers[i], vl);\n        vint32m1_t v_result = vslide1up_vx_i32m1(v_num, 0, vl);\n\n        vse32_v_i32m1(&result[j], v_result, vl);\n        j += vl;\n\n        if (i + vl < n) {\n            vint32m1_t v_delim_rep = vslide1up_vx_i32m1(v_delim, 0, vl);\n            vse32_v_i32m1(&result[j], v_delim_rep, vl);\n            j += vl;\n        }\n\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    std::vector<int> result((n ? 2 * n - 1 : 0), delimeter);\n\n    size_t i = 0;\n    size_t vl;\n    int *data = numbers.data();\n    int *res_data = result.data();\n\n    vint32m1_t v_delim = _rvv_set_v_i32m1(delimeter, 1);\n\n    for (; i < n - (n % 4); i += 4) {\n        vl = 4 * sizeof(int);\n        vint32m1_t v_num = _rvv_load_v_i32m1(data + i, vl);\n        _rvv_store_v_i32m1(res_data + 2 * i, v_num, vl);\n        _rvv_store_v_i32m1(res_data + 2 * i + 1, v_delim, vl);\n        _rvv_store_v_i32m1(res_data + 2 * i + 3, v_delim, vl);\n        _rvv_store_v_i32m1(res_data + 2 * i + 5, v_delim, vl);\n    }\n\n    for (; i < n; ++i) {\n        res_data[2 * i] = data[i];\n        if (i < n - 1) {\n            res_data[2 * i + 1] = delimeter;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimiter) {\n    size_t n = numbers.size();\n    std::vector<int> result((n * 2) - 1);\n\n    size_t i = 0;\n    size_t j = 0;\n    size_t vl;\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_numbers = vle32_v_i32m1(&numbers[i], vl);\n        vint32m1_t v_delimiter = vmv_v_x_i32m1(delimiter, vl);\n\n        size_t k = 0;\n        for (; k < vl; ++k) {\n            result[j++] = v_numbers[k];\n            if (j < result.size()) result[j++] = delimiter;\n            i++;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    std::vector<int> result((n ? 2 * n - 1 : 0), delimeter);\n\n    size_t i = 0;\n    size_t vl;\n    int *data = numbers.data();\n    int *res_data = result.data();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(data + i, vl);\n        vse32_v_i32m1(res_data + 2 * i, v, vl);\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    std::vector<int> result((n ? 2 * n - 1 : 0));\n\n    size_t i = 0;\n    size_t j = 0;\n    size_t vl;\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_num = vle32_v_i32m1(&numbers[i], vl);\n        vint32m1_t v_del = vmv_v_x_i32m1(delimeter, vl);\n\n        size_t k = 0;\n        for (; k < vl; ++k) {\n            result[j++] = v_num[k];\n            if (j < result.size()) result[j++] = delimeter;\n        }\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    size_t vlen = 0;\n    vint16m1_t v_numbers;\n    vint64m2_t v_sum = _vv_set_vint64m2(0, 2);\n    vint64m2_t v_product = _vv_set_vint64m2(1, 2);\n    vbool16_t mask = _vv_init_vbool16();\n\n    size_t i = 0;\n    for (; i + vlen <= numbers.size(); i += vlen) {\n        v_numbers = _vv_load_vint16m1(&numbers[i], vlen, mask);\n        v_sum = _vv_reduce_add_vint64m2(v_sum, _vv_widen_vint16m1_to_vint64m2(v_numbers, mask), mask);\n        v_product = _vv_reduce_mul_vint64m2(v_product, _vv_widen_vint16m1_to_vint64m2(v_numbers, mask), mask);\n    }\n\n    int64_t sum = 0;\n    int64_t product = 1;\n    for (; i < numbers.size(); ++i) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    sum += _vv_reduce_add_vint64m2(v_sum, v_sum, mask);\n    product *= _vv_reduce_mul_vint64m2(v_product, v_product, mask);\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    size_t vlen = 8;\n    size_t n = numbers.size();\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vint16m1_t v = vle16_v_i16m1(&numbers[i], vlen);\n        vint32m2_t v_sum = vmv_v_x_i32m2(0, vlen);\n        vint32m2_t v_product = vmv_v_x_i32m2(1, vlen);\n\n        vint32m2_t v_ext = vwcvtu_x_x_v_i32m2(v, vlen);\n\n        v_sum = vredsum_vs_i32m2_i32m1(v_sum, v_ext, v_sum, vlen);\n        v_product = vredand_vs_i32m2_i32m1(v_product, v_ext, v_product, vlen);\n\n        sum += vmv_x_s_i32m2_i32(v_sum);\n        product *= vmv_x_s_i32m2_i32(v_product);\n    }\n\n    for (; i < n; ++i) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    size_t vector_length = 8; // Example vector length\n    size_t n = numbers.size();\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    vint16m1_t v_numbers;\n    vint64m1_t v_sum = _vv_set_all_i64m1(0, 8);\n    vint64m1_t v_product = _vv_set_all_i64m1(1, 8);\n\n    for (size_t i = 0; i < n; i += vector_length) {\n        size_t chunk_size = std::min(vector_length, n - i);\n        v_numbers = _vv_load_i16m1(&numbers[i], chunk_size);\n\n        v_sum = _vv_reduce_add_i64m1(v_sum, _vv_widen_i16m1_i64m1(v_numbers), v_sum);\n        v_product = _vv_reduce_mul_i64m1(v_product, _vv_widen_i16m1_i64m1(v_numbers), v_product);\n    }\n\n    sum = _vv_reduce_add_i64m1(v_sum, v_sum, v_sum);\n    product = _vv_reduce_mul_i64m1(v_product, v_product, v_product);\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    size_t vlen = 0;\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    size_t n = numbers.size();\n    vint16m1_t v_numbers;\n    vint64m2_t v_sum = _vv_set_v_i64m2(0, 1);\n    vint64m2_t v_product = _vv_set_v_i64m2(1, 1);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e_i16m1(n - i);\n        v_numbers = vle16_v_i16m1(&numbers[i], vlen);\n\n        vint64m2_t v_numbers_ext = _vv_widen_v_i16m1_i64m2(v_numbers);\n\n        v_sum = _vv_add_v_i64m2(v_sum, v_numbers_ext, vlen);\n        v_product = _vv_mul_v_i64m2(v_product, v_numbers_ext, vlen);\n    }\n\n    sum = _vv_reduce_sum_v_i64m2(v_sum, v_sum, vlen);\n    product = _vv_reduce_prod_v_i64m2(v_product, v_product, vlen);\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    size_t vlen = 8; // Example vector length, adjust as needed\n    int64_t sum = 0;\n    int64_t product = 1;\n    size_t n = numbers.size();\n\n    if (n == 0) {\n        return {0, 1};\n    }\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vint16m1_t v = vle16_v_i16m1(&numbers[i], vlen);\n        vint32m2_t v_sum = vwredsum_vs_i32m2_i16m1(v, v, v);\n        vint32m2_t v_product = vwredand_vs_i32m2_i16m1(v, v, v);\n        sum += vmv_x_s_i32m2_i32(v_sum);\n        product *= vmv_x_s_i32m2_i32(v_product);\n    }\n\n    for (; i < n; ++i) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    int32_t *data = numbers.data();\n    int32_t *res = result.data();\n\n    vint32m1_t v_max = _rvv_splats_i32m1(INT32_MIN, vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = n - i < vlen ? n - i : vlen;\n        vint32m1_t v = _rvv_load_i32m1(data + i, vlen);\n        v_max = _rvv_max_i32m1(v_max, v, vlen);\n        _rvv_store_i32m1(res + i, v_max, vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    int32_t *data = numbers.data();\n    int32_t *output = result.data();\n\n    vint32m1_t v_max = _rvv_init_vint32m1(data[0]);\n    output[0] = data[0];\n\n    for (size_t i = 1; i < n; i += vlen) {\n        vlen = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_num = __riscv_vle32_v_i32m1(data + i, vlen);\n        v_max = __riscv_vmax_vv_i32m1(v_max, v_num, vlen);\n        __riscv_vse32_v_i32m1(output + i, v_max, vlen);\n    }\n\n    for (size_t i = 1; i < n; ++i) {\n        result[i] = std::max(result[i-1], numbers[i]);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    size_t vlen = vsetvl_e32m1(n);\n    vint32m1_t vmax = vle32_v_i32m1(&numbers[0], vlen);\n    vint32m1_t vcurrent = vmax;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t remaining = n - i;\n        size_t chunk_len = remaining < vlen ? remaining : vlen;\n        vint32m1_t vnum = vle32_v_i32m1(&numbers[i], chunk_len);\n        vcurrent = vmaxu_vv_i32m1_i32m1(vcurrent, vnum, chunk_len);\n        vse32_v_i32m1(&result[i], vcurrent, chunk_len);\n    }\n\n    // Handle the remaining elements sequentially if any\n    for (size_t i = vlen; i < n; ++i) {\n        result[i] = std::max(result[i - 1], numbers[i]);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    int32_t *data = numbers.data();\n\n    vint32m1_t v_max = _rvv_init_vint32m1(data[0]);\n    vint32m1_t v_current;\n\n    result[0] = data[0];\n\n    for (size_t i = 1; i < n; i += vlen) {\n        vlen = __riscv_vsetvl_e32m1(n - i);\n        v_current = __riscv_vle32_v_i32m1(&data[i], vlen);\n        v_max = __riscv_vmax_vv_i32m1(v_max, v_current, vlen);\n        __riscv_vse32_v_i32m1(&result[i], v_max, vlen);\n    }\n\n    for (size_t i = 1; i < n; ++i) {\n        result[i] = std::max(result[i-1], result[i]);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n    size_t i = 0;\n    int current_max = numbers[0];\n\n    for (; i + vlmax <= n; i += vlmax) {\n        size_t vl = __riscv_vsetvl_e32m1(n - i);\n\n        vint32m1_t v_numbers = __riscv_vle32_v_i32m1(&numbers[i], vl);\n        vint32m1_t v_current_max = __riscv_vmv_v_x_i32m1(current_max, vl);\n\n        vbool32_t mask = __riscv_vmsgt_vv_i32m1_b32(v_numbers, v_current_max, vl);\n        vint32m1_t v_max = __riscv_vmerge_vvm_i32m1(v_current_max, v_numbers, mask, vl);\n\n        __riscv_vse32_v_i32m1(&result[i], v_max, vl);\n\n        current_max = std::max(current_max, __riscv_vreduce_max_vs_i32m1_i32m1(v_max, v_current_max, vl));\n    }\n\n    for (; i < n; ++i) {\n        current_max = std::max(current_max, numbers[i]);\n        result[i] = current_max;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, ' ');\n\n    size_t vlen = 128 / 8; // Assuming vector length of 128 bits\n    size_t i = 0;\n\n    for (i = 0; i <= length - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8_b8_m1(vlen, (int8_t)0, 1);\n        vint8m1_t va = __riscv_vle_v_i8m1(&a[i], mask);\n        vint8m1_t vb = __riscv_vle_v_i8m1(&b[i], mask);\n        vint8m1_t vc = __riscv_vxor_vv_i8m1(va, vb, vlen);\n        __riscv_vse_v_i8m1(&result[i], vc, mask);\n    }\n\n    for (; i < length; ++i) {\n        result[i] = a[i] ^ b[i];\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, '0');\n\n    size_t vlen = 128 / 8;  // Assuming vector length of 128 bits\n    size_t i = 0;\n\n    for (; i <= length - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vle8_v_b8((int8_t*)&a[i], vlen);\n        vuint8m1_t va = __riscv_vle8_v_u8m1((uint8_t*)&a[i], vlen, mask);\n        vuint8m1_t vb = __riscv_vle8_v_u8m1((uint8_t*)&b[i], vlen, mask);\n        vuint8m1_t vc = __riscv_vxor_vv_u8m1(va, vb, vlen);\n        __riscv_vse8_v_u8m1(&result[i], vc, vlen, mask);\n    }\n\n    for (; i < length; ++i) {\n        result[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, ' ');\n\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t i = 0;\n\n    for (i = 0; i <= length - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vle8_v_b8((int8_t*)&a[i], vlen);\n        vbool8_t mask2 = __riscv_vle8_v_b8((int8_t*)&b[i], vlen);\n\n        vbool8_t xor_result = __riscv_vxor_vv_b8_b8(mask, mask2, vlen);\n\n        __riscv_vse8_v_b8((int8_t*)&result[i], xor_result, vlen);\n    }\n\n    for (; i < length; ++i) {\n        result[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, ' ');\n\n    size_t vector_length = vsetvl_e8m1(length);\n    vbool8_t mask = vle8_v_b8_m1(mask, a.data(), vector_length);\n\n    vuint8m1_t va = vle8_v_u8m1_m(mask, a.data(), vector_length);\n    vuint8m1_t vb = vle8_v_u8m1_m(mask, b.data(), vector_length);\n    vuint8m1_t vc = vxor_vv_u8m1(va, vb, vector_length);\n\n    vse8_v_u8m1_m(mask, result.data(), vc, vector_length);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.size();\n    std::string result(length, ' ');\n\n    size_t vlen = 128 / 8; // Assuming 128-bit vector registers\n    size_t i = 0;\n\n    for (; i <= length - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vle8_v_b8((int8_t*)&a[i], vlen);\n        vuint8m1_t va = __riscv_vlse8_v_u8m1((int8_t*)&a[i], mask, 128);\n        vuint8m1_t vb = __riscv_vlse8_v_u8m1((int8_t*)&b[i], mask, 128);\n        vuint8m1_t vc = __riscv_vxor_vv_u8m1(va, vb, vlen);\n        __riscv_vsse8_v_u8m1((int8_t*)&result[i], mask, vc, 128);\n    }\n\n    for (; i < length; ++i) {\n        result[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    size_t max_length = 0;\n    std::string longest_string = strings[0];\n\n    size_t n = strings.size();\n    size_t vlen = __riscv_vsetvl_e8m1(n);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vbool8_t mask = __riscv_vmslt_vx_i8m1_b8(vlen, strings[i].size(), max_length);\n        size_t current_max_length = __riscv_vfirst_m_b8(mask, vlen);\n\n        if (current_max_length != (size_t)-1) {\n            max_length = strings[i + current_max_length].size();\n            longest_string = strings[i + current_max_length];\n        }\n    }\n\n    return longest_string;\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    size_t max_length = 0;\n    std::string longest_string;\n\n    size_t n = strings.size();\n    size_t vlen = 0;\n    asm volatile (\"vsetvli %0, %1, e8, m1\" : \"=r\"(vlen) : \"r\"(n));\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t vl = n - i < vlen ? n - i : vlen;\n        asm volatile (\"vsetvli %0, %1, e8, m1\" : \"=r\"(vl) : \"r\"(n - i));\n\n        size_t lengths[vl];\n        for (size_t j = 0; j < vl; ++j) {\n            lengths[j] = strings[i + j].length();\n        }\n\n        vuint8m1_t v_lengths = __riscv_vle8_v_u8m1(&lengths[0], vl);\n        vuint8m1_t v_max_length = __riscv_vmv_v_x_u8m1(max_length, vl);\n\n        vuint8m1_t v_mask = __riscv_vmsgt_vv_u8m1_b8(v_lengths, v_max_length, vl);\n        if (__riscv_vmfirst_m_b8(v_mask, vl) != -1) {\n            max_length = lengths[__riscv_vmfirst_m_b8(v_mask, vl)];\n            longest_string = strings[i + __riscv_vmfirst_m_b8(v_mask, vl)];\n        }\n    }\n\n    return longest_string;\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    size_t max_length = 0;\n    std::string longest;\n\n    size_t n = strings.size();\n    size_t vl = 0;\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vbool8_t mask = vle8_v_b8m1(strings[i].c_str(), strings[i].size(), vl);\n\n        size_t length = 0;\n        for (size_t j = 0; j < vl; ++j) {\n            if (mask[j]) {\n                length = strings[i + j].size();\n                if (length > max_length) {\n                    max_length = length;\n                    longest = strings[i + j];\n                }\n            }\n        }\n    }\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <vector>\n#include <cstring>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    size_t max_length = 0;\n    std::string longest;\n\n    size_t n = strings.size();\n    size_t vl = 0;\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        vuint8m1_t v_lengths = __riscv_vmv_v_x_u8m1(0, vl);\n\n        for (size_t j = 0; j < vl; ++j) {\n            size_t length = strings[i + j].length();\n            v_lengths = __riscv_vset_v_i8m1(v_lengths, j, length, vl);\n        }\n\n        vbool8_t v_mask = __riscv_vmseq_vx_i8m1_b8(v_lengths, max_length, vl);\n        if (__riscv_vfirst_m_b8(v_mask, vl) != -1) {\n            size_t index = __riscv_vfirst_m_b8(v_mask, vl) + i;\n            longest = strings[index];\n            max_length = longest.length();\n        }\n\n        v_mask = __riscv_vmsgt_vx_i8m1_b8(v_lengths, max_length, vl);\n        if (__riscv_vfirst_m_b8(v_mask, vl) != -1) {\n            size_t index = __riscv_vfirst_m_b8(v_mask, vl) + i;\n            longest = strings[index];\n            max_length = longest.length();\n        }\n    }\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_69_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <vector>\n#include <cstring>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    std::string longest = strings[0];\n    size_t max_length = longest.length();\n\n    size_t n = strings.size();\n    size_t vl = 0;\n\n    for (size_t i = 1; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vbool8_t mask = vle8_v_b8_m1(vbool8_type_m1(), &strings[i], vl);\n\n        size_t lengths[vl];\n        for (size_t j = 0; j < vl; ++j) {\n            lengths[j] = strings[i + j].length();\n        }\n\n        vuint8m1_t v_lengths = vle8_v_u8m1(&lengths[0], vl);\n        vuint8m1_t v_max_length = vmv_v_x_u8m1(max_length, vl);\n\n        vbool8_t v_mask = vmsgt_vv_u8m1_b8(v_lengths, v_max_length, vl);\n\n        if (vfirst_m_b8(v_mask, vl) != -1) {\n            size_t index = vfirst_m_b8(v_mask, vl) + i;\n            max_length = lengths[vfirst_m_b8(v_mask, vl)];\n            longest = strings[index];\n        }\n    }\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    size_t vl = vsetvl_e64m1(1);\n\n    vuint64m1_t va = vle64_v_u64m1(&a, vl);\n    vuint64m1_t vb = vle64_v_u64m1(&b, vl);\n\n    vuint64m1_t vzero = vmv_v_x_u64m1(0, vl);\n\n    while (true) {\n        vuint64m1_t vrem = vremu_vv_u64m1(va, vb, vl);\n        vbool64_t mask = vmseq_vv_u64m1_b64(vrem, vzero, vl);\n\n        if (vfirst_m_b64(mask, vl) != -1) {\n            break;\n        }\n\n        va = vb;\n        vb = vrem;\n    }\n\n    uint64_t result;\n    vse64_v_u64m1(&result, vb, vl);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    size_t vl = vsetvl_e64m1(1);\n\n    vuint64m1_t va = vle64_v_u64m1(&a, vl);\n    vuint64m1_t vb = vle64_v_u64m1(&b, vl);\n\n    vuint64m1_t vzero = vmv_v_x_u64m1(0, vl);\n\n    while (true) {\n        vuint64m1_t vrem = vremu_vv_u64m1(va, vb, vl);\n        vbool64_t mask = vmseq_vv_u64m1_b64(vrem, vzero, vl);\n\n        if (vfirst_m_b64(mask, vl) != -1) {\n            break;\n        }\n\n        va = vb;\n        vb = vrem;\n    }\n\n    uint64_t result;\n    vse64_v_u64m1(&result, vb, vl);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    size_t vl = 8;\n    vuint64m1_t v_a = _rvv_vmv_v_x_u64m1(a, vl);\n    vuint64m1_t v_b = _rvv_vmv_v_x_u64m1(b, vl);\n    vuint64m1_t v_zero = _rvv_vmv_v_x_u64m1(0, vl);\n    vuint64m1_t v_one = _rvv_vmv_v_x_u64m1(1, vl);\n\n    while (true) {\n        vbool64_t mask = _rvv_msgt_vv_u64m1_b64(v_b, v_zero, vl);\n        if (_rvv_vmfirst_m_b64(mask, vl) == -1) {\n            break;\n        }\n        vuint64m1_t v_temp = _rvv_vmsgt_vv_u64m1_u64m1(v_a, v_b, v_a, v_b, mask, vl);\n        v_a = _rvv_vmsub_vv_u64m1_u64m1(v_a, v_b, v_temp, v_b, mask, vl);\n        vuint64m1_t v_rem = _rvv_vrem_vv_u64m1(v_a, v_b, vl);\n        v_a = _rvv_vmv_v_v_u64m1(v_b, vl);\n        v_b = _rvv_vmv_v_v_u64m1(v_rem, vl);\n    }\n\n    return _rvv_vmv_x_s_u64m1_u64(v_a);\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    size_t vl = vsetvl_e64m1(1);\n\n    vuint64m1_t va = vle64_v_u64m1(&a, vl);\n    vuint64m1_t vb = vle64_v_u64m1(&b, vl);\n\n    while (true) {\n        vuint64m1_t vtmp = vremu_vv_u64m1(va, vb, vl);\n        vbool64_t mask = vmseq_vv_u64m1_b64(vtmp, vmo_v_u64m1(vl), vl);\n\n        if (vfirst_m_b64(mask, vl) != -1) {\n            break;\n        }\n\n        va = vb;\n        vb = vtmp;\n    }\n\n    uint64_t result;\n    vse64_v_u64m1(&result, vb, vl);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_70_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    size_t vl = 8;\n    vuint64m1_t v_a = _vcreate_u64m1(vl, a);\n    vuint64m1_t v_b = _vcreate_u64m1(vl, b);\n    vuint64m1_t v_zero = _vcreate_u64m1(vl, 0);\n\n    while (true) {\n        vbool64_t mask = _vmseq_vx_u64m1_b64(v_b, 0, vl);\n        if (_vfirst_u64m1(mask, vl)) {\n            break;\n        }\n\n        vuint64m1_t v_temp = _vmslt_vv_u64m1_b64(v_a, v_b, vl);\n        v_a = _vmerge_vvm_u64m1(v_temp, v_a, v_b, vl);\n        v_b = _vmerge_vvm_u64m1(v_temp, v_b, v_a, vl);\n\n        v_a = _vmsub_vv_u64m1(v_a, v_b, vl);\n    }\n\n    return _vreduce_max_u64m1(v_b, v_zero, vl);\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float pair_first = 0.0f, pair_second = 0.0f;\n\n    size_t vlen = 0;\n    vfloat32m1_t v_numbers;\n    vfloat32m1_t v_diff;\n    vfloat32m1_t v_min_diff = _vv_set_f32m1(min_diff, vlen);\n    vbool32_t mask;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = n - i < VSETVL_MAX_VLEN ? n - i : VSETVL_MAX_VLEN;\n        v_numbers = _vv_load_f32m1(&numbers[i], vlen);\n\n        for (size_t j = i + 1; j < n; j += vlen) {\n            size_t jlen = n - j < VSETVL_MAX_VLEN ? n - j : VSETVL_MAX_VLEN;\n            vfloat32m1_t v_numbers_j = _vv_load_f32m1(&numbers[j], jlen);\n            v_diff = _vv_fabs_f32m1(_vv_sub_f32m1(v_numbers, v_numbers_j, vlen), vlen);\n            mask = _vv_cmplt_f32m1(v_diff, v_min_diff, vlen);\n\n            if (_vv_cnt_b32(mask, vlen) > 0) {\n                v_min_diff = _vv_min_f32m1(v_diff, v_min_diff, mask, vlen);\n                pair_first = numbers[i + _vv_first_b32(mask, vlen)];\n                pair_second = numbers[j + _vv_first_b32(mask, vlen)];\n            }\n        }\n    }\n\n    if (pair_first > pair_second) {\n        std::swap(pair_first, pair_second);\n    }\n\n    return {pair_first, pair_second};\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float pair_first = 0.0f, pair_second = 0.0f;\n\n    size_t vlen = 0;\n    vfloat32m1_t v_numbers, v_diff, v_min_diff;\n    v_numbers = __riscv_vle32_v_f32m1(numbers.data(), vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t remaining = n - i;\n        if (remaining < vlen) {\n            vlen = remaining;\n        }\n\n        v_numbers = __riscv_vle32_v_f32m1(&numbers[i], vlen);\n\n        for (size_t j = i + 1; j < n; j += vlen) {\n            size_t remaining_j = n - j;\n            if (remaining_j < vlen) {\n                vlen = remaining_j;\n            }\n\n            vfloat32m1_t v_numbers_j = __riscv_vle32_v_f32m1(&numbers[j], vlen);\n            v_diff = __riscv_vfabs_v_f32m1(v_numbers, v_numbers_j, vlen);\n\n            float diff[vlen];\n            __riscv_vse32_v_f32m1(diff, v_diff, vlen);\n\n            for (size_t k = 0; k < vlen; ++k) {\n                if (diff[k] < min_diff) {\n                    min_diff = diff[k];\n                    pair_first = numbers[i];\n                    pair_second = numbers[j + k];\n                }\n            }\n        }\n    }\n\n    if (pair_first > pair_second) {\n        std::swap(pair_first, pair_second);\n    }\n\n    return {pair_first, pair_second};\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float pair_first = 0.0f, pair_second = 0.0f;\n\n    size_t vlen = 8; // Assuming vector length of 8 for this example\n    size_t i = 0;\n\n    for (; i <= n - vlen; i += vlen) {\n        vfloat32m1_t v0 = _rvv_load_f32m1(&numbers[i]);\n        vfloat32m1_t v1 = _rvv_load_f32m1(&numbers[i + 1]);\n\n        vfloat32m1_t diff = _rvv_fabs_f32m1(_rvv_fsub_f32m1(v0, v1, vlen), vlen);\n        float min_diff_local = _rvv_reduce_fmin_f32m1(diff, diff, vlen);\n\n        if (min_diff_local < min_diff) {\n            min_diff = min_diff_local;\n            pair_first = numbers[i];\n            pair_second = numbers[i + 1];\n        }\n    }\n\n    for (; i < n - 1; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            float diff = std::fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                pair_first = numbers[i];\n                pair_second = numbers[j];\n            }\n        }\n    }\n\n    if (pair_first > pair_second) {\n        std::swap(pair_first, pair_second);\n    }\n\n    return {pair_first, pair_second};\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest1 = 0.0f, closest2 = 0.0f;\n\n    size_t vlen = 8;  // Assuming vector length of 8 for this example\n    size_t i;\n\n    for (i = 0; i <= n - vlen; i += vlen) {\n        vfloat32m1_t vec1 = _rvv_load_f32m1(&numbers[i], vlen);\n\n        for (size_t j = i + 1; j <= n - vlen; j += vlen) {\n            vfloat32m1_t vec2 = _rvv_load_f32m1(&numbers[j], vlen);\n            vfloat32m1_t diff = _rvv_fabs_f32m1(_rvv_fsub_f32m1(vec1, vec2, vlen), vlen);\n            vfloat32m1_t min_val = _rvv_fmin_f32m1(diff, _rvv_broadcast_f32m1(min_diff, vlen), vlen);\n\n            float temp_min_diff = _rvv_reduce_fmin_f32m1(min_val, min_diff, vlen);\n\n            if (temp_min_diff < min_diff) {\n                min_diff = temp_min_diff;\n                closest1 = numbers[i];\n                closest2 = numbers[j];\n            }\n        }\n    }\n\n    // Handle remaining elements if any\n    for (; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            float diff = std::fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest1 = numbers[i];\n                closest2 = numbers[j];\n            }\n        }\n    }\n\n    if (closest1 > closest2) {\n        std::swap(closest1, closest2);\n    }\n\n    return {closest1, closest2};\n}\n```"}
{"task_id": "SimdBench_71_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float first = 0.0f, second = 0.0f;\n\n    size_t vlen = 8;  // Assuming vector length of 8 for this example\n    size_t i;\n\n    for (i = 0; i <= n - vlen; i += vlen) {\n        vfloat32m1_t vec1 = __riscv_vle32_v_f32m1(&numbers[i], vlen);\n\n        for (size_t j = i + 1; j <= n - vlen; j += vlen) {\n            vfloat32m1_t vec2 = __riscv_vle32_v_f32m1(&numbers[j], vlen);\n            vfloat32m1_t diff = __riscv_vfabs_v_f32m1(__riscv_vfsub_v_f32m1(vec1, vec2, vlen), vlen);\n            vfloat32m1_t min_val = __riscv_vfmin_v_f32m1(diff, min_diff, vlen);\n\n            min_diff = __riscv_vfmv_f_s_f32m1_f32(min_val);\n\n            vbool8_t mask = __riscv_vmseq_v_f32m1(diff, min_val, vlen);\n            if (__riscv_vfirst_m_b8(mask, vlen) != -1) {\n                first = __riscv_vfmv_f_s_f32m1_f32(__riscv_vmerge_v_f32m1(vec1, vec2, mask, vlen));\n                second = __riscv_vfmv_f_s_f32m1_f32(__riscv_vmerge_v_f32m1(vec2, vec1, mask, vlen));\n            }\n        }\n    }\n\n    for (; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            float diff = std::fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                first = numbers[i];\n                second = numbers[j];\n            }\n        }\n    }\n\n    if (first > second) {\n        std::swap(first, second);\n    }\n\n    return {first, second};\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    size_t vlen = 0;\n    vfloat32m1_t vmin, vmax, vrange, vzero, vone;\n    vzero = __riscv_vfmv_v_f_f32m1(0.0, 32);\n    vone = __riscv_vfmv_v_f_f32m1(1.0, 32);\n    vmin = __riscv_vfmv_v_f_f32m1(min_val, 32);\n    vmax = __riscv_vfmv_v_f_f32m1(max_val, 32);\n    vrange = __riscv_vfmv_v_f_f32m1(range, 32);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = __riscv_vsetvl_e32m1(n - i);\n        vfloat32m1_t vx = __riscv_vle32_v_f32m1(&numbers[i], vlen);\n        vfloat32m1_t vres = __riscv_vfsub_vv_f32m1(vx, vmin, vlen);\n        vres = __riscv_vfmul_vv_f32m1(vres, __riscv_vfdiv_vv_f32m1(vone, vrange, vlen), vlen);\n        __riscv_vse32_v_f32m1(&numbers[i], vres, vlen);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    size_t vl;\n    std::vector<float> result(n);\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t vx = vle32_v_f32m1(&numbers[i], vl);\n        vfloat32m1_t vmin = vfmv_v_f_f32m1(min_val, vl);\n        vfloat32m1_t vrange = vfmv_v_f_f32m1(range, vl);\n\n        vfloat32m1_t vres = vfsub_vv_f32m1(vx, vmin, vl);\n        vres = vfdiv_vv_f32m1(vres, vrange, vl);\n\n        vse32_v_f32m1(&result[i], vres, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    size_t vlen = 0;\n    vfloat32m1_t vmin, vmax, vrange, vzero, vone;\n    vzero = __riscv_vfmv_v_f_f32m1(0.0, vlen);\n    vone = __riscv_vfmv_v_f_f32m1(1.0, vlen);\n    vmin = __riscv_vfmv_v_f_f32m1(min_val, vlen);\n    vmax = __riscv_vfmv_v_f_f32m1(max_val, vlen);\n    vrange = __riscv_vfmv_v_f_f32m1(range, vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vfloat32m1_t vnum = __riscv_vle32_v_f32m1(&numbers[i], chunk_size);\n        vfloat32m1_t vrescaled = __riscv_vfdiv_vv_f32m1(__riscv_vfsub_vv_f32m1(vnum, vmin, chunk_size), vrange, chunk_size);\n        __riscv_vse32_v_f32m1(&numbers[i], vrescaled, chunk_size);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    std::vector<float> result(n);\n    size_t vlen = 0;\n\n    vfloat32m1_t vmin = _rvv_fmv_s_f_f32m1(min_val, 8);\n    vfloat32m1_t vrange = _rvv_fmv_s_f_f32m1(range, 8);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = n - i;\n        vfloat32m1_t vx = _rvv_lv_f32m1(&numbers[i], vlen);\n        vfloat32m1_t vres = _rvv_fsub_vv_f32m1(vx, vmin, vlen);\n        vres = _rvv_fdiv_vv_f32m1(vres, vrange, vlen);\n        _rvv_sv_f32m1(&result[i], vres, vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    size_t vlen = 0;\n    vfloat32m1_t vmin, vmax, vrange, vzero, vone;\n    vzero = _vv_set_f32m1_f32(0.0f);\n    vone = _vv_set_f32m1_f32(1.0f);\n    vmin = _vv_set_f32m1_f32(min_val);\n    vmax = _vv_set_f32m1_f32(max_val);\n    vrange = _vv_set_f32m1_f32(range);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        vfloat32m1_t vx = _vv_load_f32m1(&numbers[i], vlen);\n        vfloat32m1_t vres = _vv_fsub_f32m1(vx, vmin, vlen);\n        vres = _vv_fdiv_f32m1(vres, vrange, vlen);\n        _vv_store_f32m1(&numbers[i], vres, vlen);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    size_t vl = 8;\n    vuint64m1_t vn = vcreate_u64m1(vl, n);\n    vuint64m1_t divisors = vcreate_u64m1(vl, 1);\n\n    for (uint64_t i = 2; i < n; i++) {\n        vuint64m1_t vi = vcreate_u64m1(vl, i);\n        vbool64_t mask = vmfeq_vv_u64m1_b64(vrem_vv_u64m1(vn, vi), vcreate_u64m1(vl, 0), vl);\n        divisors = vmerge_vvm_u64m1(divisors, vi, mask, vl);\n    }\n\n    uint64_t max_divisor = 1;\n    for (size_t i = 0; i < vl; i++) {\n        uint64_t divisor = vget_u64m1_u64(divisors, i);\n        if (divisor > max_divisor && divisor < n && n % divisor == 0) {\n            max_divisor = divisor;\n        }\n    }\n\n    return max_divisor;\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    size_t vl;\n    uint64_t largest_divisor = 1;\n\n    // Assuming we have a vector length of 8 (VL = 8)\n    vl = 8;\n\n    // Create a vector of sequential numbers from 2 to 9\n    vuint64m1_t vector = __riscv_vxor_vx_u64m1(__riscv_vmv_v_x_u64m1(2, vl), __riscv_vmv_v_x_u64m1(1, vl), vl);\n    vector = __riscv_vadd_vx_u64m1(vector, __riscv_vmv_v_x_u64m1(1, vl), vl);\n\n    // Create a vector of remainders when n is divided by the sequential numbers\n    vuint64m1_t remainder = __riscv_vrem_vv_u64m1(vector, __riscv_vmv_v_x_u64m1(n, vl), vl);\n\n    // Find the largest number that divides n evenly\n    for (size_t i = 0; i < vl; ++i) {\n        uint64_t divisor = __riscv_vmv_x_s_u64m1_u64(vector, i);\n        uint64_t rem = __riscv_vmv_x_s_u64m1_u64(remainder, i);\n        if (rem == 0 && divisor < n) {\n            largest_divisor = divisor;\n        }\n    }\n\n    return largest_divisor;\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    size_t vl = 8;\n    vuint64m1_t vn = vle64_v_u64m1(&n, vl);\n    vuint64m1_t divisors = vid_v_u64m1(vl);\n    vuint64m1_t remainders;\n\n    for (uint64_t i = n / 2; i > 0; i--) {\n        divisors = vadd_vx_u64m1(divisors, i, vl);\n        remainders = vrem_vv_u64m1(vn, divisors, vl);\n\n        bool any_zero = false;\n        for (size_t j = 0; j < vl; j++) {\n            if (vrem_vv_u64m1_u64(remainders, j) == 0) {\n                any_zero = true;\n                break;\n            }\n        }\n\n        if (any_zero) {\n            uint64_t max_divisor = 0;\n            for (size_t j = 0; j < vl; j++) {\n                uint64_t divisor = vget_v_u64m1_u64(divisors, j);\n                if (divisor < n && n % divisor == 0) {\n                    max_divisor = divisor > max_divisor ? divisor : max_divisor;\n                }\n            }\n            return max_divisor;\n        }\n    }\n\n    return 1;\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    size_t vl = 8;\n    vuint64m1_t vn = vle64_v_u64m1(&n, vl);\n    vuint64m1_t divisors = vle64_v_u64m1((uint64_t[]){n-1, n-2, n-3, n-4, n-5, n-6, n-7, n-8}, vl);\n    vuint64m1_t remainders = vremu_vv_u64m1(vn, divisors, vl);\n    vbool64_t mask = vmseq_vv_u64m1_b64(remainders, vle64_v_u64m1((uint64_t[]){0, 0, 0, 0, 0, 0, 0, 0}, vl), vl);\n    vuint64m1_t max_divisor = vle64_v_u64m1(&n, vl);\n    max_divisor = vmerge_vvm_u64m1(max_divisor, divisors, mask, vl);\n    uint64_t result;\n    vse64_v_u64m1(&result, max_divisor, vl);\n    return result;\n}\n```"}
{"task_id": "SimdBench_73_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    size_t vl;\n    uint64_t largest_divisor = 1;\n\n    // Assuming vector length of 8 for this example\n    vl = 8;\n\n    vuint64m1_t vn = vcreate_u64m1(vl, n);\n    vuint64m1_t divisors = vcreate_u64m1(vl, 1);\n\n    for (uint64_t i = 2; i < n; i += vl) {\n        divisors = vadd_vx_u64m1(divisors, vl, i);\n        vbool64_t mask = vmsgt_vx_u64m1_b64(vrem_vv_u64m1(vn, divisors, vl), 0, vl);\n\n        if (vfirst_m_b64(mask, vl) != -1) {\n            largest_divisor = i + vfirst_m_b64(mask, vl);\n        }\n    }\n\n    return largest_divisor;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    size_t vector_length = 8; // Example vector length\n    vint32m1_t v_n = _rvv_set_int32m1(n, vector_length);\n    vint32m1_t v_i = _rvv_set_int32m1(2, vector_length);\n    vbool32_t v_mask = _rvv_set_bool32(true, vector_length);\n\n    while (_rvv_reduce_max_int32m1(v_i, v_mask) <= std::sqrt(n)) {\n        vbool32_t v_div_mask = _rvv_div_int32m1(v_n, v_i, v_mask);\n        vint32m1_t v_rem = _rvv_rem_int32m1(v_n, v_i, v_mask);\n\n        if (_rvv_reduce_min_int32m1(v_rem, v_div_mask) == 0) {\n            while (n % _rvv_reduce_max_int32m1(v_i, v_mask) == 0) {\n                factors.push_back(_rvv_reduce_max_int32m1(v_i, v_mask));\n                n /= _rvv_reduce_max_int32m1(v_i, v_mask);\n            }\n        }\n        v_i = _rvv_add_int32m1(v_i, _rvv_set_int32m1(1, vector_length), v_mask);\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    size_t vector_length = 8; // Example vector length\n    vint32m1_t v_n = _rvv_set_int32m1(n, vector_length);\n    vint32m1_t v_factors = _rvv_splats_int32m1(1, vector_length);\n    vbool32_t v_mask = _rvv_splats_bool32(true, vector_length);\n\n    for (int i = 2; i <= sqrt(n); ++i) {\n        vint32m1_t v_i = _rvv_splats_int32m1(i, vector_length);\n        vbool32_t v_rem_mask = _rvv_msub_int32m1(v_n, v_i, v_i, vector_length);\n        v_mask = _rvv_and_bool32(v_mask, v_rem_mask, vector_length);\n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    size_t vector_length = 8; // Example vector length\n    vint32m1_t v_n = _vv_set_v_i32m1(n, vector_length);\n    vbool32_t v_mask = _vv_iota_v_i32m1_b32(vector_length);\n\n    for (int i = 2; i <= sqrt(n); ++i) {\n        vint32m1_t v_i = _vv_set_v_i32m1(i, vector_length);\n        vbool32_t v_mask_mod = _vv_rem_vv_i32m1_b32(v_n, v_i, vector_length);\n        v_mask = _vv_and_vx_b32(v_mask, _vv_cmpeq_vv_i32m1_b32(v_mask_mod, _vv_set_v_i32m1(0, vector_length), vector_length), vector_length);\n\n        if (_vv_first_v_b32(v_mask, vector_length) != -1) {\n            while (n % i == 0) {\n                factors.push_back(i);\n                n /= i;\n            }\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    size_t vlen = 8; // Example vector length\n    vint32m1_t vn = _rvv_set_int32m1(n, vlen);\n    vint32m1_t vf = _rvv_set_int32m1(2, vlen);\n\n    for (int i = 2; i <= std::sqrt(n); i++) {\n        vint32m1_t vi = _rvv_set_int32m1(i, vlen);\n        vbool32_t mask = _rvv_msub_int32m1(vn, vi, vi, vlen);\n\n        while (_rvv_any_int32m1(mask, vlen)) {\n            factors.push_back(i);\n            vn = _rvv_div_int32m1(vn, vi, vlen);\n            mask = _rvv_msub_int32m1(vn, vi, vi, vlen);\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    size_t vector_bits = 128; // Example vector size\n    vint32m1_t v = _rvv_undefined_vint32m1();\n    vint32m1_t v_n = _rvv_vmv_v_x_i32m1(n, 1);\n    vint32m1_t v_two = _rvv_vmv_v_x_i32m1(2, 1);\n    vbool32_t mask = _rvv_vmseq_vx_i32m1_b32(v, 0, 1);\n\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        vint32m1_t v_i = _rvv_vmv_v_x_i32m1(i, 1);\n        vbool32_t v_mask = _rvv_vmand_mm_b32(mask, _rvv_vmsne_vx_i32m1_b32(v_n, v_i, 1));\n\n        while (_rvv_vmfirst_m_b32(v_mask, v_n)) {\n            factors.push_back(i);\n            n /= i;\n            v_n = _rvv_vmv_v_x_i32m1(n, 1);\n            v_mask = _rvv_vmand_mm_b32(v_mask, _rvv_vmsne_vx_i32m1_b32(v_n, v_i, 1));\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t vl;\n    std::vector<float> result;\n    size_t n = l.size();\n    const float *input = l.data();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v = vle32_v_f32m1(input + i, vl);\n        vbool32_t mask = vmfgt_vf_f32m1_b(v, 0.0f, vl);\n        vfloat32m1_t v_positive = vmerge_vvm_f32m1(v, v, mask, vl);\n\n        for (size_t j = 0; j < vl; ++j) {\n            if (mask[j]) {\n                result.push_back(v_positive[j]);\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t vl;\n    std::vector<float> result;\n    size_t n = l.size();\n    size_t i = 0;\n\n    while (i < n) {\n        vfloat32m1_t vx = _rvv_load_f32m1(&l[i], &vl);\n        vbool32_t mask = _rvv_msgt_f32m1(vx, 0.0f, vl);\n\n        if (_rvv_popcount_m_b32(mask, vl) > 0) {\n            vfloat32m1_t vpos = _rvv_compress_f32m1(vx, mask, vl);\n            float temp_res[_RVV_LENGTH_f32m1];\n            _rvv_store_f32m1(temp_res, vpos, vl);\n\n            for (size_t j = 0; j < vl; ++j) {\n                if (temp_res[j] > 0.0f) {\n                    result.push_back(temp_res[j]);\n                }\n            }\n        }\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t vl;\n    std::vector<float> result;\n    size_t n = l.size();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v = vle32_v_f32m1(&l[i], vl);\n        vfloat32m1_t v_pos = vfmax_vf_f32m1(v, 0.0f, vl);\n        vse32_v_f32m1(&l[i], v_pos, vl);\n    }\n\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t vl;\n    std::vector<float> result;\n    size_t n = l.size();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v = vle32_v_f32m1(&l[i], vl);\n        vfloat32m1_t v_pos = vfmax_vf_f32m1_f32m1(v, 0.0f, vl);\n        vse32_v_f32m1(&l[i], v_pos, vl);\n    }\n\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    size_t vl;\n    std::vector<float> result;\n    size_t n = l.size();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v = vle32_v_f32m1(&l[i], vl);\n        vfloat32m1_t v_pos = vfmax_vf_f32m1_f32m1(v, 0.0f, vl);\n        vse32_v_f32m1(&l[i], v_pos, vl);\n    }\n\n    for (size_t i = 0; i < n; ++i) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    size_t vl = 0;\n    int64_t i = 5;\n    vint64m1_t v_i = _vbz_v_i64m1(i, vl);\n    vint64m1_t v_n = _vbz_v_i64m1(n, vl);\n    vbool64_t v_mask = _vmsgt_vx_i64m1_b64(v_i, 0, vl);\n\n    while (i * i <= n) {\n        vint64m1_t v_mod = _vrem_vv_i64m1(v_n, v_i, vl);\n        vbool64_t v_zero_mod = _vmseq_vv_i64m1_b64(v_mod, _vbz_v_i64m1(0, vl), vl);\n        v_mask = _vand_vm_b64(v_mask, v_zero_mod, vl);\n\n        if (_vfirst_m_b64(v_mask, vl) != -1) {\n            return false;\n        }\n\n        i += 6;\n        v_i = _vadd_vx_i64m1(v_i, 6, vl);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    size_t vl = 0;\n    int64_t i = 5;\n    vint64m1_t v_i = _rvv_set_int64m1(i, 1);\n    vint64m1_t v_n = _rvv_set_int64m1(n, 1);\n    vbool64_t mask = _rvv_m1(true);\n\n    for (; i * i <= n; i += 6) {\n        vl = __riscv_vsetvl_e64m1(2);\n        vint64m1_t v_i_sq = __riscv_vmsbf_m1(v_i, v_i, vl);\n\n        vbool64_t v_cmp = __riscv_vmfne_m1_i64m1(v_n, v_i_sq, vl);\n        if (!_rvv_reduce_lor(v_cmp, vl)) {\n            return false;\n        }\n\n        v_i = __riscv_vadd_m1(v_i, _rvv_set_int64m1(6, 1), vl);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    size_t vl = 0;\n    int64_t i = 5;\n    vbool64_t mask = __riscv_vmslt_vx_i64m1_b64(vsetvl_e64m1(1), n, vl);\n\n    for (int64_t gap = 2; i * i <= n; i += gap, gap = 6 - gap) {\n        vint64m1_t v_i = __riscv_vmv_v_x_i64m1(i, vl);\n        vint64m1_t v_mod = __riscv_vrem_vx_i64m1(v_i, n, vl);\n        vbool64_t v_cmp = __riscv_vmseq_vx_i64m1_b64(v_mod, 0, vl);\n\n        if (__riscv_vfirst_m_b64(mask, v_cmp, vl) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    size_t vl = 0;\n    size_t vector_size = 32; // Example vector size, adjust as needed\n    size_t i = 5;\n\n    while (i * i <= n) {\n        vl = __riscv_vsetvl_e64m1(vector_size);\n        vint64m1_t v_i = __riscv_vle_v_i64m1(&i, vl);\n        vint64m1_t v_n = __riscv_vmv_v_x_i64m1(n, vl);\n        vbool64_t mask = __riscv_vmseq_vx_i64m1_b64(v_n, 0, vl);\n\n        vint64m1_t v_rem = __riscv_vrem_vv_i64m1(v_n, v_i, vl);\n        vbool64_t rem_mask = __riscv_vmseq_vv_i64m1_b64(v_rem, __riscv_vmsne_vx_i64m1_b64(v_rem, 0, vl), vl);\n\n        if (__riscv_vfirst_m_b64(mask, rem_mask)) {\n            return false;\n        }\n\n        i += vector_size;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_RVV", "completion": "```c\n#include <riscv_vector.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    size_t vl = 0;\n    size_t vtype = 0;\n    vint64m1_t v_i = _vcreate_i64m1(0);\n    vint64m1_t v_n = _vcreate_i64m1(n);\n    vint64m1_t v_two = _vcreate_i64m1(2);\n    vint64m1_t v_three = _vcreate_i64m1(3);\n    vint64m1_t v_iota = _vcreate_i64m1(0);\n    vbool64_t v_mask = _vcreate_bool64(0);\n\n    int64_t i = 5;\n    int64_t limit = _vset_i64m1(v_n, 0, n, vtype);\n\n    for (; i * i <= n; i += 6) {\n        vl = __riscv_vsetvl_e64m1(2);\n        v_iota = __riscv_vid_v_i64m1(v_iota, vtype);\n        v_i = __riscv_vadd_vx_i64m1(v_i, i, vtype);\n        v_iota = __riscv_vadd_vx_i64m1(v_iota, 1, vtype);\n\n        v_mask = __riscv_vmsne_vx_i64m1_b64(v_i, 0, vtype);\n        if (__riscv_vfirst_m_b64(v_mask, v_i)) {\n            return false;\n        }\n\n        v_i = __riscv_vadd_vx_i64m1(v_i, 2, vtype);\n        v_iota = __riscv_vadd_vx_i64m1(v_iota, 1, vtype);\n\n        v_mask = __riscv_vmsne_vx_i64m1_b64(v_i, 0, vtype);\n        if (__riscv_vfirst_m_b64(v_mask, v_i)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t vlen = 128; // Vector length in bits\n    size_t n = s.size();\n    std::string result(n, ' ');\n    bool hasLetter = false;\n\n    for (size_t i = 0; i < n; i += vlen / 8) {\n        size_t chunk_size = std::min(vlen / 8, n - i);\n        vbool8_t mask = __riscv_vmslt_vx_i8m1_b8(vlen, __riscv_vmv_v_x_i8m1(vlen, chunk_size, vlen), __riscv_vmv_v_x_i8m1(vlen, 0, vlen), vlen);\n\n        vuint8m1_t vec = __riscv_vle8_v_u8m1(&s[i], mask, vlen);\n        vuint8m1_t res = __riscv_vle8_v_u8m1(&result[i], mask, vlen);\n\n        vbool8_t is_lower = __riscv_vmslt_vv_i8m1_b8(vlen, __riscv_vmv_v_x_i8m1(vlen, 'a', vlen), vec, vlen);\n        vbool8_t is_upper = __riscv_vmslt_vv_i8m1_b8(vlen, vec, __riscv_vmv_v_x_i8m1(vlen, 'Z', vlen), vlen);\n        vbool8_t is_letter = __riscv_vmor_mm_b8(vlen, is_lower, is_upper, vlen);\n\n        hasLetter |= __riscv_vmfirst_m_b8(vlen, is_letter, mask, vlen) != -1;\n\n        vuint8m1_t lower_to_upper = __riscv_vmsub_vv_i8m1_m(vlen, mask, vec, __riscv_vmv_v_x_i8m1(vlen, ' ', vlen), vlen);\n        vuint8m1_t upper_to_lower = __riscv_vmadd_vv_i8m1_m(vlen, mask, vec, __riscv_vmv_v_x_i8m1(vlen, ' ', vlen), vlen);\n\n        res = __riscv_vmor_mm_b8(vlen, __riscv_vmerge_vvm_i8m1(vlen, res, lower_to_upper, is_lower, vlen), __riscv_vmerge_vvm_i8m1(vlen, res, upper_to_lower, is_upper, vlen), vlen);\n\n        __riscv_vse8_v_u8m1(&result[i], res, mask, vlen);\n    }\n\n    if (!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(s.size());\n    size_t n = s.size();\n    size_t i = 0;\n    bool hasLetter = false;\n\n    std::string result(n, ' ');\n\n    for (; i + vlen <= n; i += vlen) {\n        vbool8_t mask = vle8_v_b8(s.data() + i, vlen);\n        vuint8m1_t vec = vle8_v_u8m1(s.data() + i, vlen);\n\n        vbool8_t is_lower = vmslt_vx_u8m1_b8(vec, 'a', vlen);\n        vbool8_t is_upper = vmslt_vx_u8m1_b8(vec, 'A', vlen);\n        vbool8_t is_letter = vor_vv_b8(is_lower, is_upper, vlen);\n\n        hasLetter = hasLetter || vfirst_m_b8(mask, is_letter, vlen);\n\n        vuint8m1_t lower_to_upper = vmslt_vx_u8m1_b8(vec, 'a', vlen);\n        vuint8m1_t upper_to_lower = vmslt_vx_u8m1_b8(vec, 'A', vlen);\n\n        vec = vmerge_vvm_u8m1(vec, vxor_vx_u8m1(vec, 0x20, vlen), lower_to_upper, vlen);\n        vec = vmerge_vvm_u8m1(vec, vxor_vx_u8m1(vec, 0x20, vlen), upper_to_lower, vlen);\n\n        vse8_v_u8m1(result.data() + i, vec, vlen);\n    }\n\n    for (; i < n; ++i) {\n        if (islower(s[i])) {\n            result[i] = toupper(s[i]);\n            hasLetter = true;\n        } else if (isupper(s[i])) {\n            result[i] = tolower(s[i]);\n            hasLetter = true;\n        } else {\n            result[i] = s[i];\n        }\n    }\n\n    if (!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = s.size();\n    std::string result(n, '\\0');\n\n    size_t i = 0;\n    bool has_letter = false;\n\n    // Check if the string contains any letters\n    for (i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vbool64_t mask = __riscv_vmsgt_x_b64_b64_m(vsetvl_e64m1(), __riscv_vmv_v_x_b64(0, vsetvl_e64m1()), __riscv_vmv_v_x_b64(chunk_size, vsetvl_e64m1()));\n\n        vuint8m1_t vec = __riscv_vle_v_u8m1((const uint8_t*)&s[i], mask, vsetvl_e8m1());\n        vbool8_t is_letter = __riscv_vmand_mm_b8(__riscv_vmsle_vx_u8m1_b8(vec, 'z', vsetvl_e8m1()), __riscv_vmsge_vx_u8m1_b8(vec, 'A', vsetvl_e8m1()), vsetvl_e8m1());\n\n        if (__riscv_vmfirst_m_b8(is_letter, mask, vsetvl_e8m1()) != -1) {\n            has_letter = true;\n            break;\n        }\n    }\n\n    if (!has_letter) {\n        std::reverse_copy(s.begin(), s.end(), result.begin());\n        return result;\n    }\n\n    for (i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vbool64_t mask = __riscv_vmsgt_x_b64_b64_m(vsetvl_e64m1(), __riscv_vmv_v_x_b64(0, vsetvl_e64m1()), __riscv_vmv_v_x_b64(chunk_size, vsetvl_e64m1()));\n\n        vuint8m1_t vec = __riscv_vle_v_u8m1((const uint8_t*)&s[i], mask, vsetvl_e8m1());\n        vbool8_t is_lower = __riscv_vmsle_vx_u8m1_b8(vec, 'z', vsetvl_e8m1()) & __riscv_vmsge_vx_u8m1_b8(vec, 'a', vsetvl_e8m1());\n        vbool8_t is_upper = __riscv_vmsle_vx_u8m1_b8(vec, 'Z', vsetvl_e8m1()) & __riscv_vmsge_vx_u8m1_b8(vec, 'A', vsetvl_e8m1());\n\n        vuint8m1_t toggled = __riscv_vmerge_vvm_u8m1(vec, __riscv_vxor_vx_u8m1(vec, 32, vsetvl_e8m1()), is_lower | is_upper, vsetvl_e8m1());\n\n        __riscv_vse_v_u8m1((uint8_t*)&result[i], toggled, mask, vsetvl_e8m1());\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(s.size());\n    size_t n = s.size();\n    std::string result(n, ' ');\n    bool hasLetter = false;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vbool8_t mask = vle8_v_b8_m1((const int8_t*)s.data() + i, vlen);\n        vuint8m1_t v = vle8_v_u8m1((const uint8_t*)s.data() + i, vlen, mask);\n        vuint8m1_t letters = vand_vx_u8m1_m1(v, 'a' - 'A', mask);\n        vbool8_t is_lower = vmslt_vx_u8m1_b8_m1(v, 'a', mask);\n        vbool8_t is_upper = vmslt_vx_u8m1_b8_m1(v, 'A', mask);\n        vbool8_t is_letter = vor_vv_b8_m1(is_lower, is_upper, mask);\n        hasLetter |= vfirst_m1(mask, is_letter) != -1;\n        vuint8m1_t toggled = vxor_vv_u8m1_m1(v, letters, mask);\n        vse8_v_u8m1((uint8_t*)result.data() + i, toggled, mask);\n    }\n\n    if (!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(s.size());\n    size_t n = s.size();\n    size_t i = 0;\n    bool hasLetter = false;\n\n    std::string result(n, ' ');\n\n    for (; i + vlen <= n; i += vlen) {\n        vbool8_t mask = __riscv_vmfne_vx_i8m1_b8(__riscv_vle8_v_i8m1(&s[i], vlen), 0, vlen);\n        vuint8m1_t v = __riscv_vle8_v_u8m1(&s[i], vlen);\n        vuint8m1_t letters = __riscv_vmsleu_vx_u8m1_b8(v, 'Z', vlen);\n        letters = __riscv_vmand_mm_b8(letters, __riscv_vmule_vv_i8m1(__riscv_vmsleu_vx_u8m1_b8(v, 'z', vlen), __riscv_vmsgtu_vx_u8m1_b8(v, 'a', vlen), vlen), vlen);\n        vuint8m1_t upper = __riscv_vmsleu_vx_u8m1_b8(v, 'Z', vlen);\n        upper = __riscv_vmand_mm_b8(upper, __riscv_vmsgtu_vx_u8m1_b8(v, 'A', vlen), vlen);\n        vuint8m1_t lower = __riscv_vmsleu_vx_u8m1_b8(v, 'z', vlen);\n        lower = __riscv_vmand_mm_b8(lower, __riscv_vmsgtu_vx_u8m1_b8(v, 'a', vlen), vlen);\n        vuint8m1_t toggled = __riscv_vmerge_vvm_i8m1(v, __riscv_vadd_vx_i8m1(v, 32, vlen), upper, vlen);\n        toggled = __riscv_vmerge_vvm_i8m1(toggled, __riscv_vsub_vx_i8m1(v, 32, vlen), lower, vlen);\n        __riscv_vse8_v_i8m1(&result[i], __riscv_vmerge_vvm_i8m1(v, toggled, letters, vlen), vlen);\n        hasLetter |= __riscv_vmfirst_m_b8(mask, letters);\n    }\n\n    for (; i < n; ++i) {\n        if (std::isalpha(s[i])) {\n            result[i] = std::isupper(s[i]) ? std::tolower(s[i]) : std::toupper(s[i]);\n            hasLetter = true;\n        } else {\n            result[i] = s[i];\n        }\n    }\n\n    if (!hasLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> sorted_third;\n\n    for (size_t i = 2; i < n; i += 3) {\n        sorted_third.push_back(l[i]);\n    }\n\n    std::sort(sorted_third.begin(), sorted_third.end());\n\n    size_t j = 0;\n    for (size_t i = 2; i < n; i += 3) {\n        l[i] = sorted_third[j++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std<:vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> sorted_third;\n\n    for (size_t i = 2; i < n; i += 3) {\n        sorted_third.push_back(l[i]);\n    }\n\n    std::sort(sorted_third.begin(), sorted_third.end());\n\n    size_t k = 0;\n    for (size_t i = 2; i < n; i += 3) {\n        l[i] = sorted_third[k++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> l_prime(n);\n    std::vector<int> divisible_by_three;\n\n    for (size_t i = 0; i < n; ++i) {\n        if (i % 3 == 0) {\n            divisible_by_three.push_back(l[i]);\n        }\n    }\n\n    std::sort(divisible_by_three.begin(), divisible_by_three.end());\n\n    size_t index = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if (i % 3 == 0) {\n            l_prime[i] = divisible_by_three[index++];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> l_prime(n);\n    std::vector<int> divisible_by_three;\n\n    for (size_t i = 0; i < n; ++i) {\n        if (i % 3 == 0) {\n            divisible_by_three.push_back(l[i]);\n        }\n    }\n\n    std::sort(divisible_by_three.begin(), divisible_by_three.end());\n\n    size_t k = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if (i % 3 == 0) {\n            l_prime[i] = divisible_by_three[k++];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> l_prime(n);\n    std::vector<int> divisible_by_three;\n\n    for (size_t i = 0; i < n; ++i) {\n        if (i % 3 == 0) {\n            divisible_by_three.push_back(l[i]);\n        }\n    }\n\n    std::sort(divisible_by_three.begin(), divisible_by_three.end());\n\n    size_t k = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if (i % 3 == 0) {\n            l_prime[i] = divisible_by_three[k++];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t vl;\n    float max_val = INT_MIN;\n    size_t n = l.size();\n    float *arr = l.data();\n\n    size_t i = 0;\n    for (; i + (vl = vsetvl_e8m1(n - i)) <= n; i += vl) {\n        vfloat32m1_t vx = vle32_v_f32m1(arr + i, vl);\n        vfloat32m1_t vmax = vfmax_vv_f32m1(vmax, vx, vl);\n        max_val = std::max(max_val, vfmv_f_s_f32m1_f32(vmax));\n    }\n\n    for (; i < n; ++i) {\n        max_val = std::max(max_val, arr[i]);\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t vl;\n    float max_val = INT_MIN;\n    size_t n = l.size();\n    size_t i = 0;\n\n    while (i < n) {\n        vl = vsetvl_e8m1(n - i);\n        vfloat32m1_t v_data = vle32_v_f32m1(&l[i], vl);\n        vfloat32m1_t v_max = vfmax_vv_f32m1(v_data, v_data, vl);\n        float local_max = vfmv_f_s_f32m1_f32(v_max);\n        max_val = (local_max > max_val) ? local_max : max_val;\n        i += vl;\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t vl;\n    float max_val = INT_MIN;\n    size_t i = 0;\n    size_t n = l.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v_data = vle32_v_f32m1(&l[i], vl);\n        vfloat32m1_t v_max = vfmax_vv_f32m1(v_data, v_data, vl);\n        float local_max = vfmv_f_s_f32m1_f32(v_max);\n        max_val = local_max > max_val ? local_max : max_val;\n        i += vl;\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t vl;\n    float max_val = INT_MIN;\n    size_t i = 0;\n    size_t n = l.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v_data = vle32_v_f32m1(&l[i], vl);\n        vfloat32m1_t v_max = vfredmax_vs_f32m1_f32m1(v_data, max_val, vl);\n        max_val = vfmv_f_s_f32m1_f32(v_max);\n        i += vl;\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t vl;\n    float max_val = INT_MIN;\n    size_t i = 0;\n    size_t n = l.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t v_data = vle32_v_f32m1(&l[i], vl);\n        vfloat32m1_t v_max = vfredmax_vs_f32m1_f32m1(v_data, max_val, vl);\n        max_val = vfmv_f_s_f32m1_f32(v_max);\n        i += vl;\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    size_t vl;\n\n    for (int i = 0; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vint8m1_t v_i = vle8_v_i8m1(&i, vl);\n        vint8m1_t v_mod11 = vrem_vv_i8m1(v_i, 11, vl);\n        vint8m1_t v_mod13 = vrem_vv_i8m1(v_i, 13, vl);\n        vbool8_t v_mask = vmsgt_vx_i8m1_b8(v_mod11, 0, vl) | vmsgt_vx_i8m1_b8(v_mod13, 0, vl);\n\n        vint8m1_t v_digits = vand_vx_i8m1(v_i, 7, vl);\n        vbool8_t v_mask_7 = vmseq_vx_i8m1_b8(v_digits, 7, vl);\n\n        vbool8_t v_final_mask = v_mask & v_mask_7;\n\n        count += vcpop_m_b8(v_final_mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    size_t vl;\n\n    for (int i = 0; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vint8m1_t v_i = vle8_v_i8m1(&i, vl);\n        vint8m1_t v_11 = vmv_v_x_i8m1(11, vl);\n        vint8m1_t v_13 = vmv_v_x_i8m1(13, vl);\n\n        vbool8_t v_mask_11 = vmslt_vx_i8m1_b8(v_i, 11, vl);\n        vbool8_t v_mask_13 = vmslt_vx_i8m1_b8(v_i, 13, vl);\n\n        vbool8_t v_mask = vor_vv_b8(v_mask_11, v_mask_13, vl);\n\n        vint8m1_t v_7 = vmv_v_x_i8m1(7, vl);\n        vbool8_t v_eq = vmseq_vv_i8m1_b8(v_i, v_7, vl);\n\n        vbool8_t v_final_mask = vand_vv_b8(v_mask, v_eq, vl);\n\n        count += vcpop_m_b8(v_final_mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    size_t vl;\n    vint8m1_t v_i, v_11, v_13, v_7;\n    vbool8_t v_mask_11, v_mask_13, v_mask_7;\n\n    v_11 = __riscv_vmv_v_x_i8m1(11, 8);\n    v_13 = __riscv_vmv_v_x_i8m1(13, 8);\n    v_7 = __riscv_vmv_v_x_i8m1(7, 8);\n\n    for (int i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        v_i = __riscv_vle8_v_i8m1(&i, vl);\n\n        v_mask_11 = __riscv_vmrem_vv_i8m1(v_i, v_11, vl);\n        v_mask_13 = __riscv_vmrem_vv_i8m1(v_i, v_13, vl);\n        v_mask_7 = __riscv_vmsne_vx_i8m1_b8(v_i, 7, vl);\n\n        v_mask_11 = __riscv_vmand_mm_b8(v_mask_11, v_mask_7, vl);\n        v_mask_13 = __riscv_vmand_mm_b8(v_mask_13, v_mask_7, vl);\n\n        count += __riscv_vcpop_m_b8(__riscv_vor_mm_b8(v_mask_11, v_mask_13, vl), vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    size_t vl;\n    vint8m1_t v_i, v_11, v_13, v_rem11, v_rem13, v_7;\n    vbool8_t v_mask11, v_mask13, v_mask7;\n\n    v_11 = __riscv_vmv_v_x_i8m1(11, 8);\n    v_13 = __riscv_vmv_v_x_i8m1(13, 8);\n    v_7 = __riscv_vmv_v_x_i8m1(7, 8);\n\n    for (int i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        v_i = __riscv_vle8_v_i8m1(&i, &i + vl);\n\n        v_rem11 = __riscv_vrem_vv_i8m1(v_i, v_11, vl);\n        v_rem13 = __riscv_vrem_vv_i8m1(v_i, v_13, vl);\n\n        v_mask11 = __riscv_vmseq_vx_i8m1_b8(v_rem11, 0, vl);\n        v_mask13 = __riscv_vmseq_vx_i8m1_b8(v_rem13, 0, vl);\n\n        v_mask7 = __riscv_vor_vv_b8(v_mask11, v_mask13, vl);\n\n        count += __riscv_vcpop_m_b8(v_mask7, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    size_t vl;\n    vint8m1_t v_i, v_11, v_13, v_7;\n    vbool8_t v_mask;\n\n    v_11 = __riscv_vmv_v_x_i8m1(11, 8);\n    v_13 = __riscv_vmv_v_x_i8m1(13, 8);\n    v_7 = __riscv_vmv_v_x_i8m1(7, 8);\n\n    for (int i = 0; i < n; i += vl) {\n        vl = __riscv_vsetvl_e8m1(n - i);\n        v_i = __riscv_vle8_v_i8m1(&i, vl);\n        v_mask = __riscv_vmseq_vv_i8m1_b8(v_i, v_7);\n\n        vbool8_t v_mask_11 = __riscv_vmsne_vv_i8m1_b8(v_i, v_11);\n        vbool8_t v_mask_13 = __riscv_vmsne_vv_i8m1_b8(v_i, v_13);\n        v_mask = __riscv_vand_vv_b8(v_mask, v_mask_11, vl);\n        v_mask = __riscv_vand_vv_b8(v_mask, v_mask_13, vl);\n\n        count += __riscv_vfirst_m_b8(v_mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_elements;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_elements.push_back(l[i]);\n    }\n\n    std::sort(even_elements.begin(), even_elements.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_elements[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_elements;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_elements.push_back(l[i]);\n    }\n\n    std::sort(even_elements.begin(), even_elements.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_elements[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_elements;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_elements.push_back(l[i]);\n    }\n\n    std::sort(even_elements.begin(), even_elements.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_elements[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_elements;\n\n    // Extract even index elements\n    for (size_t i = 0; i < n; i += 2) {\n        even_elements.push_back(l[i]);\n    }\n\n    // Sort even index elements\n    std::sort(even_elements.begin(), even_elements.end());\n\n    // Place sorted even index elements back into the original vector\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_elements[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_elements;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_elements.push_back(l[i]);\n    }\n\n    std::sort(even_elements.begin(), even_elements.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_elements[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    size_t vlen = __riscv_vsetvl_e32m1(n);\n    vint32m1_t v0, v1, v2;\n    int *data = l.data();\n\n    for (size_t i = 0; i < n; i++) {\n        v0 = __riscv_vle32_v_i32m1(data, vlen);\n        for (size_t j = i + 1; j < n; j++) {\n            v1 = __riscv_vle32_v_i32m1(data + j, vlen);\n            for (size_t k = j + 1; k < n; k++) {\n                v2 = __riscv_vle32_v_i32m1(data + k, vlen);\n                vint32m1_t vsum = __riscv_vadd_vv_i32m1(v0, v1, vlen);\n                vsum = __riscv_vadd_vv_i32m1(vsum, v2, vlen);\n                bool mask = __riscv_vmseq_vx_i32m1_b32(vsum, 0, vlen);\n                if (mask) return true;\n            }\n        }\n        data += vlen;\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    size_t vlen = 4; // Assuming vector length of 4 for this example\n    size_t i;\n\n    for (i = 0; i <= n - 3; i += vlen) {\n        vint32m1_t v0 = _rvv_load_zu_i32m1(&l[i], n - i);\n        vint32m1_t v1 = _rvv_load_zu_i32m1(&l[i + 1], n - i - 1);\n        vint32m1_t v2 = _rvv_load_zu_i32m1(&l[i + 2], n - i - 2);\n\n        vint32m1_t sum = _rvv_add_i32m1(v0, v1, vlen);\n        sum = _rvv_add_i32m1(sum, v2, vlen);\n\n        vbool32_t mask = _rvv_msk_cmpeq_i32m1(sum, 0, vlen);\n        if (_rvv_cnt_b32(mask, vlen) > 0) {\n            return true;\n        }\n    }\n\n    // Handle remaining elements if any\n    for (; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    size_t vlen = 4; // Assuming vector length of 4 for this example\n    size_t i;\n\n    for (i = 0; i <= n - 3; i += vlen) {\n        vint32m1_t v0 = _rvv_load_zu_i32m1(&l[i], n - i);\n        vint32m1_t v1 = _rvv_load_zu_i32m1(&l[i + 1], n - i - 1);\n        vint32m1_t v2 = _rvv_load_zu_i32m1(&l[i + 2], n - i - 2);\n\n        vint32m1_t sum = _rvv_add_i32m1(v0, v1, vlen);\n        sum = _rvv_add_i32m1(sum, v2, vlen);\n\n        vbool32_t mask = _rvv_msknez_i32m1(sum, vlen);\n        if (_rvv_cnt_b32(mask, vlen) < vlen) {\n            return true;\n        }\n    }\n\n    // Handle remaining elements if any\n    for (; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    size_t vlen = 4; // Assuming vector length of 4 for this example\n    size_t i;\n\n    for (i = 0; i <= n - 3; i += vlen) {\n        vint32m1_t v0 = _rvv_load_zu_x32_m(&l[i], vlen);\n        vint32m1_t v1 = _rvv_load_zu_x32_m(&l[i + 1], vlen);\n        vint32m1_t v2 = _rvv_load_zu_x32_m(&l[i + 2], vlen);\n\n        vint32m1_t sum = _rvv_add_vv_i32m1(v0, v1, vlen);\n        sum = _rvv_add_vv_i32m1(sum, v2, vlen);\n\n        vbool32_t mask = _rvv_msub_vv_b32m1(sum, sum, v0, vlen);\n        if (_rvv_first_b32(mask, vlen) != -1) {\n            return true;\n        }\n    }\n\n    // Handle remaining elements if any\n    for (; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 3) return false;\n\n    size_t vlen = 4; // Assuming vector length of 4 for this example\n    size_t i;\n\n    for (i = 0; i <= n - 3; i += vlen) {\n        vint32m1_t v0 = _rvv_load_zu_i32m1(&l[i], n - i);\n        vint32m1_t v1 = _rvv_load_zu_i32m1(&l[i + 1], n - i - 1);\n        vint32m1_t v2 = _rvv_load_zu_i32m1(&l[i + 2], n - i - 2);\n\n        vint32m1_t sum = _rvv_add_i32m1(v0, v1, vlen);\n        sum = _rvv_add_i32m1(sum, v2, vlen);\n\n        vbool32_t mask = _rvv_msknez_i32m1(sum, vlen);\n        if (_rvv_cntpop_b32(mask) < vlen) {\n            return true;\n        }\n    }\n\n    // Handle remaining elements if any\n    for (; i < n - 2; ++i) {\n        for (size_t j = i + 1; j < n - 1; ++j) {\n            for (size_t k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers and 8-bit integers\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    size_t i = 0;\n    for (; i + vlen <= n; i += vlen) {\n        vint8m1_t v = vle8_v_i8m1(&l[i], vlen);\n        vint8m1_t incremented = vadd_vv_i8m1(v, 1, vlen);\n        vse8_v_i8m1(&result[i], incremented, vlen);\n    }\n\n    for (; i < n; ++i) {\n        result[i] = l[i] + 1;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t vlen = 0;\n    vint32m1_t v1, v2;\n    int *in_ptr = l.data();\n    int *out_ptr = l.data();\n\n    vlen = vsetvl_e32m1(l.size());\n    v1 = vle32_v_i32m1(in_ptr, vlen);\n    v2 = vadd_vx_i32m1(v1, 1, vlen);\n    vse32_v_i32m1(out_ptr, v2, vlen);\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t vl;\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_l = vle32_v_i32m1(&l[i], vl);\n        vint32m1_t v_incr = vadd_vx_i32m1(v_l, 1, vl);\n        vse32_v_i32m1(&result[i], v_incr, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t vlen = 0;\n    vint32m1_t v0;\n    vint32m1_t v1;\n\n    size_t n = l.size();\n    int *data = l.data();\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        v0 = vle32_v_i32m1(data + i, vlen);\n        v1 = vadd_vx_i32m1(v0, 1, vlen);\n        vse32_v_i32m1(data + i, v1, vlen);\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_83_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers and 8-bit integers\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    size_t i = 0;\n    for (; i + vlen <= n; i += vlen) {\n        vint8m1_t v = vle8_v_i8m1(&l[i], vlen);\n        vint8m1_t incremented = vadd_vv_i8m1(v, 1, vlen);\n        vse8_v_i8m1(&result[i], incremented, vlen);\n    }\n\n    for (; i < n; ++i) {\n        result[i] = l[i] + 1;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n\n    size_t vlen = 128 / 8; // Assuming 128-bit vector registers\n    size_t i;\n    for (i = 0; i + vlen <= n; i += vlen) {\n        vint32m1_t vec1 = __riscv_vle32_v_i32m1(&l[i], vlen);\n        for (size_t j = i + 1; j < n; j += vlen) {\n            vint32m1_t vec2 = __riscv_vle32_v_i32m1(&l[j], vlen);\n            vint32m1_t sum = __riscv_vadd_vv_i32m1(vec1, vec2, vlen);\n            vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(sum, 0, vlen);\n            if (__riscv_vmfirst_m_b32(mask, vlen) != -1) {\n                return true;\n            }\n        }\n    }\n\n    // Handle remaining elements if any\n    for (; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n\n    size_t vlen = vsetvl_e32m1(n);\n    vint32m1_t vec = vle32_v_i32m1(&l[0], vlen);\n\n    for (size_t i = 0; i < n; i++) {\n        int val = l[i];\n        vint32m1_t vec_val = vmv_v_x_i32m1(val, vlen);\n        vint32m1_t vec_neg = vneg_v_i32m1(vec_val, vlen);\n\n        vbool32_t mask = vmsne_vx_i32m1_b(vec, val, vlen);\n        vint32m1_t vec_masked = vmerge_vvm_i32m1(vec, vec_neg, mask, vlen);\n\n        vbool32_t result_mask = vmseq_vx_i32m1_b(vec_masked, 0, vlen);\n        int result = vmfirst_m_b32(result_mask, vlen);\n\n        if (result != -1) return true;\n\n        vec = vle32_v_i32m1(&l[i + 1], vlen);\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n\n    size_t vlen = vsetvl_e32m1(n);\n    vint32m1_t v0, v1;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t vl = vsetvl_e32m1(n - i);\n        v0 = vle32_v_i32m1(&l[i], vl);\n\n        for (size_t j = i + 1; j < n; j += vlen) {\n            size_t vl_inner = vsetvl_e32m1(n - j);\n            v1 = vle32_v_i32m1(&l[j], vl_inner);\n\n            vint32m1_t v_sum = vadd_vv_i32m1(v0, v1, vl_inner);\n            vbool32_t mask = vmseq_vx_i32m1_b32(v_sum, 0, vl_inner);\n\n            if (vfirst_m_b32(mask, vl_inner) != -1) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n\n    size_t vlen = 4; // Assuming vector length of 4 for this example\n    size_t i;\n\n    for (i = 0; i <= n - vlen; i += vlen) {\n        vint32m1_t vec1 = _rvv_load_zu_v_i32m1(&l[i], n - i);\n        size_t j;\n        for (j = i + vlen; j < n; j++) {\n            vint32m1_t vec2 = _rvv_load_zu_v_i32m1(&l[j], n - j);\n            vint32m1_t sum = _rvv_add_vv_i32m1(vec1, vec2, vlen);\n            vbool32_t mask = _rvv_msk_v_i32m1(sum, 0, vlen);\n            if (_rvv_popcount_m_b32(mask) > 0) {\n                return true;\n            }\n        }\n    }\n\n    for (; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n\n    size_t vlen = vsetvl_e32m1(n);\n    vint32m1_t vec = vle32_v_i32m1(&l[0], vlen);\n\n    for (size_t i = 0; i < n; i++) {\n        int elem = l[i];\n        vint32m1_t vec_elem = vadd_vx_i32m1(vec, -elem, vlen);\n        size_t vl = vsetvl_e32m1(n);\n        vbool32_t mask = vmseq_vx_i32m1_b32(vec_elem, 0, vl);\n\n        if (vfirst_m_b32(mask, vl) != -1 && vfirst_m_b32(mask, vl) != i) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    if (x == 0) return \"0\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x = x / base;\n        result = std::to_string(remainder) + result;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base >= 10) return \"\";\n    if (x == 0) return \"0\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x = x / base;\n        result = std::to_string(remainder) + result;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    if (x == 0) return \"0\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x = x / base;\n        result = std::to_string(remainder) + result;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base >= 10) return \"\";\n    if (x == 0) return \"0\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x = x / base;\n        result = std::to_string(remainder) + result;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    if (x == 0) return \"0\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x = x / base;\n        result = std::to_string(remainder) + result;\n    }\n\n    size_t vlen = 8;\n    size_t n = result.size();\n    size_t i = 0;\n\n    for (; i <= n - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(vlen);\n        vint8m1_t v_base = __riscv_vmv_v_x_i8m1(base, vlen);\n        vint8m1_t v_digits = __riscv_vle8_v_i8m1(&result[i], vlen);\n\n        vint8m1_t v_remainders = __riscv_vrem_vv_i8m1(v_digits, v_base, vlen);\n        __riscv_vse8_v_i8m1(&result[i], v_remainders, vlen);\n    }\n\n    for (; i < n; ++i) {\n        result[i] = result[i] % base + '0';\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    size_t length = text.length();\n    size_t vector_length = vsetvl_e8m1(length);\n    size_t i = 0;\n\n    for (; i + vector_length <= length; i += vector_length) {\n        vbool8_t mask = vle8_v_b8_m1(&text[i], &text[length - i - vector_length], vector_length);\n        if (vfirst_m1(mask, 0) != -1) {\n            return false;\n        }\n    }\n\n    for (; i < length / 2; ++i) {\n        if (text[i] != text[length - i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    size_t length = text.length();\n    size_t vector_length = vsetvl_e8m1(length);\n    size_t i = 0;\n\n    for (; i + vector_length <= length; i += vector_length) {\n        vbool8_t mask = vle8_v_b8_m1(text.data() + i, text.data() + length - i - vector_length, vector_length);\n        if (vfirst_m1(mask, mask) != -1) {\n            return false;\n        }\n    }\n\n    for (; i < length / 2; ++i) {\n        if (text[i] != text[length - i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    size_t length = text.length();\n    size_t vector_length = vsetvl_e8m1(length);\n    size_t i = 0;\n\n    for (; i + vector_length <= length; i += vector_length) {\n        vbool8_t mask = vle8_v_b8m1(text.data() + i, text.data() + length - i - vector_length, vector_length);\n        if (vfirst_m_b8m1(mask, mask) != -1) {\n            return false;\n        }\n    }\n\n    for (; i < length / 2; ++i) {\n        if (text[i] != text[length - i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_palindrome_simd(std::string text) {\n    size_t length = text.length();\n    size_t vlen = 128 / 8; // Assuming 128-bit vector registers\n    size_t i = 0;\n\n    for (; i <= length - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(__riscv_vle_v_i8m1(&text[i], vlen), 0, vlen);\n        vint8m1_t vec_start = __riscv_vle_v_i8m1(&text[i], vlen);\n        vint8m1_t vec_end = __riscv_vle_v_i8m1(&text[length - i - vlen], vlen);\n        vec_end = __riscv_vreverse_v_i8m1(vec_end, vlen);\n\n        if (__riscv_vmand_mm_b8(__riscv_vmsne_vv_i8m1_b8(vec_start, vec_end, vlen), mask, vlen)) {\n            return false;\n        }\n    }\n\n    for (; i < length / 2; ++i) {\n        if (text[i] != text[length - i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_palindrome_simd(std::string text) {\n    size_t length = text.length();\n    size_t vector_length = vsetvl_e8m1(length);\n    size_t i = 0;\n\n    for (; i <= length - vector_length; i += vector_length) {\n        vbool8_t mask = vle8_v_b8_m1(text.data() + i, text.data() + length - i - vector_length, vector_length);\n        if (vfirst_m1(mask, mask) != vector_length) {\n            return false;\n        }\n    }\n\n    for (; i < length / 2; ++i) {\n        if (text[i] != text[length - i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    size_t vlen = 0;\n\n    size_t i = 0;\n    for (; i + vlen <= s.length(); i += vlen) {\n        vbool8_t mask = __riscv_vle8_v_b8((int8_t*)&s[i], vlen);\n        vint8m1_t vec = __riscv_vle8_v_i8m1((int8_t*)&s[i], vlen);\n\n        vec = __riscv_vadd_vx_i8m1(vec, -5, vlen);\n        vec = __riscv_vadd_vx_i8m1(vec, 'a', vlen);\n        vec = __riscv_vrem_vx_i8m1(vec, 26, vlen);\n        vec = __riscv_vadd_vx_i8m1(vec, 'a', vlen);\n\n        __riscv_vse8_v_i8m1((int8_t*)&out[i], vec, vlen);\n        vlen = __riscv_vl_b8(mask);\n    }\n\n    for (; i < s.length(); ++i) {\n        int w = ((int)s[i] - 5 - (int)'a') % 26 + (int)'a';\n        out[i] = (char)w;\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    size_t vlen = 0;\n\n    size_t i = 0;\n    for (; i + vlen <= s.length(); i += vlen) {\n        vlen = __riscv_vsetvl_e8m1(s.length() - i);\n        vuint8m1_t v = __riscv_vle8_v_u8m1(&s[i], vlen);\n        v = __riscv_vsub_vx_u8m1(v, 5, vlen);\n        v = __riscv_vadd_vx_u8m1(v, 'a', vlen);\n        __riscv_vse8_v_u8m1(&out[i], v, vlen);\n    }\n\n    for (; i < s.length(); ++i) {\n        out[i] = (s[i] - 5 - 'a' + 26) % 26 + 'a';\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    size_t vlen = 0;\n\n    size_t i = 0;\n    for (; i + vlen <= s.length(); i += vlen) {\n        vbool8_t mask = __riscv_vsetvl_e8m1(vlen);\n        vuint8m1_t v_in = __riscv_vle8_v_u8m1(&s[i], mask);\n        vuint8m1_t v_out = __riscv_vadd_vx_u8m1(v_in, -5, vlen);\n\n        vuint8m1_t v_base = __riscv_vmv_v_x_u8m1('a', vlen);\n        vuint8m1_t v_diff = __riscv_vsub_vv_u8m1(v_out, v_base, vlen);\n        vuint8m1_t v_mod = __riscv_vrem_vx_u8m1(v_diff, 26, vlen);\n        vuint8m1_t v_result = __riscv_vadd_vv_u8m1(v_mod, v_base, vlen);\n\n        __riscv_vse8_v_u8m1(&out[i], v_result, vlen);\n    }\n\n    for (; i < s.length(); ++i) {\n        char c = s[i];\n        char base = 'a';\n        char decoded = (c - 5 - base + 26) % 26 + base;\n        out[i] = decoded;\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    size_t vlen = 8; // Vector length\n    size_t n = s.length();\n    std::string out(n, ' ');\n\n    size_t i = 0;\n    for (i = 0; i <= n - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vset_v_i8m1_b8(vlen);\n        vint8m1_t vec = __riscv_vle_v_i8m1(&s[i], mask);\n        vec = __riscv_vadd_vx_i8m1(vec, -5, vlen);\n\n        vint8m1_t base = __riscv_vmv_v_x_i8m1('a', vlen);\n        vec = __riscv_vsub_vx_i8m1(vec, 'a', vlen);\n        vec = __riscv_vrem_vx_i8m1(vec, 26, vlen);\n        vec = __riscv_vadd_vx_i8m1(vec, 'a', vlen);\n\n        __riscv_vse_v_i8m1(&out[i], vec, mask);\n    }\n\n    for (; i < n; ++i) {\n        char c = s[i] - 5;\n        c = (c - 'a' + 26) % 26 + 'a';\n        out[i] = c;\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    size_t vlen = 0;\n\n    size_t i = 0;\n    for (; i + vlen < s.length(); i += vlen) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(vlen, (int8_t)'a', (int8_t)'z');\n        vint8m1_t vec = __riscv_vle8_v_i8m1(&s[i], vlen);\n        vint8m1_t decoded = __riscv_vadd_vx_i8m1(vec, -5, vlen);\n        vint8m1_t adjusted = __riscv_vadd_vx_i8m1(__riscv_vsub_vx_i8m1(decoded, (int8_t)'a', vlen), (int8_t)'a', vlen);\n        adjusted = __riscv_vmerge_vvm_i8m1(adjusted, __riscv_vadd_vv_i8m1(adjusted, __riscv_vmv_v_x_i8m1(26, vlen), vlen), mask, vlen);\n        __riscv_vse8_v_i8m1(&out[i], adjusted, vlen);\n    }\n\n    for (; i < s.length(); ++i) {\n        char c = s[i] - 5;\n        if (c < 'a') c += 26;\n        out[i] = c;\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t vl;\n    size_t i = 0;\n    size_t n = l.size();\n    bool result = true;\n\n    while (i < n) {\n        vint32m1_t v_l = vle32_v_i32m1(&l[i], &vl);\n        vint32m1_t v_t = vmv_v_x_i32m1(t, vl);\n        vbool32_t mask = vmslt_vv_i32m1_b32(v_l, v_t, vl);\n\n        if (!vfirst_m_b32(mask, vl)) {\n            result = false;\n            break;\n        }\n\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t vl;\n    size_t n = l.size();\n    size_t i = 0;\n    bool result = true;\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_l = vle32_v_i32m1(&l[i], vl);\n        vint32m1_t v_t = vmv_v_x_i32m1(t, vl);\n        vbool32_t mask = vmslt_vv_i32m1_b32(v_l, v_t, vl);\n\n        if (!vfirst_m_b32(mask, vl)) {\n            result = false;\n            break;\n        }\n\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t vl;\n    size_t i = 0;\n    size_t n = l.size();\n    bool result = true;\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_l = vle32_v_i32m1(&l[i], vl);\n        vint32m1_t v_t = vmv_v_x_i32m1(t, vl);\n        vbool32_t mask = vmslt_vv_i32m1_b32(v_l, v_t, vl);\n\n        if (!vfirst_m_b32(mask, vl)) {\n            result = false;\n            break;\n        }\n\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t vl;\n    size_t i = 0;\n    size_t n = l.size();\n    bool result = true;\n\n    while (i < n) {\n        vint32m1_t vx = vle32_v_i32m1(&l[i], &vl);\n        vbool32_t mask = vmflt_vv_i32m1_b32(vx, t, vl);\n        if (!vfirst_m_b32(mask, vl)) {\n            result = false;\n            break;\n        }\n        i += vl;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_88_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t vl;\n    size_t n = l.size();\n    bool result = true;\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_l = vle32_v_i32m1(&l[i], vl);\n        vint32m1_t v_t = vmv_v_x_i32m1(t, vl);\n        vbool32_t mask = vmslt_vv_i32m1_b32(v_l, v_t, vl);\n\n        if (!vfirst_m_b32(mask, vl)) {\n            result = false;\n            break;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vector_bits = 128;\n    size_t n = brackets.size();\n    const char* str = brackets.c_str();\n\n    int balance = 0;\n    size_t i = 0;\n\n    for (; i <= n - vector_bits / 8; i += vector_bits / 8) {\n        vbool8_t mask = __riscv_vlm_v_b8m1(str + i, vector_bits);\n\n        vint8m1_t open = __riscv_vmv_v_x_i8m1('<', vector_bits / 8);\n        vint8m1_t close = __riscv_vmv_v_x_i8m1('>', vector_bits / 8);\n\n        vint8m1_t vec = __riscv_vle_v_i8m1(str + i, vector_bits / 8);\n\n        vint8m1_t opens = __riscv_vmsif_m_i8m1(vec, open, mask, vector_bits / 8);\n        vint8m1_t closes = __riscv_vmsif_m_i8m1(vec, close, mask, vector_bits / 8);\n\n        int open_count = __riscv_vcpop_m_b8m1(__riscv_vmseq_vx_i8m1_b8m1(vec, open, vector_bits / 8), vector_bits / 8);\n        int close_count = __riscv_vcpop_m_b8m1(__riscv_vmseq_vx_i8m1_b8m1(vec, close, vector_bits / 8), vector_bits / 8);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    for (; i < n; ++i) {\n        if (str[i] == '<') {\n            ++balance;\n        } else if (str[i] == '>') {\n            --balance;\n        }\n\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = brackets.size();\n    int balance = 0;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = (i + vlen > n) ? n - i : vlen;\n        vbool8_t mask = __riscv_vlsseg8e8_v_b8_m(rvv_m1, &brackets[i], chunk_size, rvv_v_u8m1);\n\n        vint8m1_t vec = __riscv_vle8_v_i8m1(&brackets[i], mask);\n        vint8m1_t open_brackets = __riscv_vmseq_vx_i8m1_i8(vec, '<', vlen);\n        vint8m1_t close_brackets = __riscv_vmseq_vx_i8m1_i8(vec, '>', vlen);\n\n        int open_count = __riscv_vcpop_m(rvv_m1, open_brackets, vlen);\n        int close_count = __riscv_vcpop_m(rvv_m1, close_brackets, vlen);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vector_bits = 128;\n    size_t n = brackets.size();\n    size_t chunk_size = vector_bits / 8;\n    size_t chunks = (n + chunk_size - 1) / chunk_size;\n\n    int balance = 0;\n\n    for (size_t i = 0; i < chunks; ++i) {\n        size_t len = (i == chunks - 1) ? (n - i * chunk_size) : chunk_size;\n        vbool8_t mask = __riscv_vmslt_vx_i8_b8(vset_v_i8m1_i8(0), len, vset_v_i8m1_i8(0), 8);\n\n        vint8m1_t chunk = __riscv_vle_v_i8m1(&brackets[i * chunk_size], mask);\n        vint8m1_t open_brackets = __riscv_vmseq_vx_i8m1_b8(chunk, '<', 8);\n        vint8m1_t close_brackets = __riscv_vmseq_vx_i8m1_b8(chunk, '>', 8);\n\n        int open_count = __riscv_vcpop_m_b8(__riscv_vmand_mm_b8(mask, open_brackets, 8));\n        int close_count = __riscv_vcpop_m_b8(__riscv_vmand_mm_b8(mask, close_brackets, 8));\n\n        balance += open_count - close_count;\n\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vector_bits = 128;\n    size_t n = brackets.size();\n    int balance = 0;\n\n    for (size_t i = 0; i < n; i += vsetvl_e8m1(n - i)) {\n        vbool8_t mask = vle8_v_b8_tu(brackets.data() + i, brackets.data() + i + vsetvl_e8m1(n - i), vsetvl_e8m1(n - i));\n        vint8m1_t chars = vle8_v_i8m1(brackets.data() + i, mask, vsetvl_e8m1(n - i));\n\n        vint8m1_t opens = vmseq_vx_i8m1_tu(chars, '<', vsetvl_e8m1(n - i));\n        vint8m1_t closes = vmseq_vx_i8m1_tu(chars, '>', vsetvl_e8m1(n - i));\n\n        vint8m1_t balance_inc = vmsbc_vx_i8m1(opens, 0, vsetvl_e8m1(n - i));\n        vint8m1_t balance_dec = vmsbc_vx_i8m1(closes, 0, vsetvl_e8m1(n - i));\n\n        vint8m1_t balance_update = vadd_vv_i8m1(balance_inc, balance_dec, vsetvl_e8m1(n - i));\n\n        balance += vreduce_v_i8m1_add(balance_update, vsetvl_e8m1(n - i));\n\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vector_bits = 128;\n    size_t n = brackets.size();\n    size_t vn = (n + (vector_bits / 8) - 1) / (vector_bits / 8);\n    int balance = 0;\n\n    for (size_t i = 0; i < vn; ++i) {\n        size_t chunk_size = (i == vn - 1) ? (n % (vector_bits / 8)) : (vector_bits / 8);\n        char chunk[chunk_size];\n        std::memcpy(chunk, brackets.data() + i * (vector_bits / 8), chunk_size);\n\n        vbool64_t mask = __riscv_vmsgt_vx_i8mf8_b64(vbool64_t(), 0, chunk_size);\n        vint8mf8_t vec = __riscv_vle8_v_i8mf8_tuma(mask, chunk, vector_bits / 8);\n\n        vint8mf8_t open_brackets = __riscv_vmsgt_vx_i8mf8_b64(vec, '<', vector_bits / 8);\n        vint8mf8_t close_brackets = __riscv_vmsgt_vx_i8mf8_b64(vec, '>', vector_bits / 8);\n\n        int open_count = __riscv_vcpop_m_b64(open_brackets, vector_bits / 8);\n        int close_count = __riscv_vcpop_m_b64(close_brackets, vector_bits / 8);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = brackets.size();\n    int balance = 0;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = (i + vlen < n) ? vlen : n - i;\n        vbool8_t mask = __riscv_vmslt_vx_i8_b8_m1(vlen, brackets.data() + i, n, chunk_size);\n\n        vint8m1_t vec = __riscv_vle8_v_i8m1(brackets.data() + i, mask);\n        vint8m1_t open = __riscv_vmseq_vx_i8m1_i8m1(vec, '(', vlen);\n        vint8m1_t close = __riscv_vmseq_vx_i8m1_i8m1(vec, ')', vlen);\n\n        int open_count = __riscv_vcpop_m_i8m1(open, vlen);\n        int close_count = __riscv_vcpop_m_i8m1(close, vlen);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vec_len = 8; // Assuming vector length of 8\n    size_t n = brackets.length();\n    int balance = 0;\n\n    for (size_t i = 0; i < n; i += vec_len) {\n        size_t chunk_size = std::min(n - i, vec_len);\n        vbool8_t mask = __riscv_vmslt_vx_i8m1_b8(vset_v_i8m1((int8_t)chunk_size, vec_len), vset_v_i8m1((int8_t)0, vec_len), 1);\n\n        vint8m1_t chars = __riscv_vle_v_i8m1(&brackets[i], mask, 1);\n        vint8m1_t open_brackets = __riscv_vmseq_vx_i8m1_b8(chars, '(', 1);\n        vint8m1_t close_brackets = __riscv_vmseq_vx_i8m1_b8(chars, ')', 1);\n\n        int open_count = __riscv_vcpop_m_b8(mask, open_brackets, 1);\n        int close_count = __riscv_vcpop_m_b8(mask, close_brackets, 1);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vector_bits = 128;\n    size_t n = brackets.size();\n    int8_t* brackets_data = reinterpret_cast<int8_t*>(const_cast<char*>(brackets.data()));\n\n    int balance = 0;\n    size_t i = 0;\n\n    for (; i <= n - vector_bits / 8; i += vector_bits / 8) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(__riscv_vle_v_i8m1(brackets_data + i, vector_bits / 8), 0, vector_bits / 8);\n        vint8m1_t opens = __riscv_vmerge_vvm_i8m1(__riscv_vmv_v_x_i8m1('(', vector_bits / 8), __riscv_vle_v_i8m1(brackets_data + i, vector_bits / 8), mask, vector_bits / 8);\n        vint8m1_t closes = __riscv_vmerge_vvm_i8m1(__riscv_vmv_v_x_i8m1(')', vector_bits / 8), __riscv_vle_v_i8m1(brackets_data + i, vector_bits / 8), mask, vector_bits / 8);\n\n        vint8m1_t balance_vec = __riscv_vwredsum_vs_i8m1_i8m1(__riscv_vsub_vv_i8m1(opens, closes, vector_bits / 8), __riscv_vmv_v_x_i8m1(balance, vector_bits / 8), vector_bits / 8);\n        balance += __riscv_vmv_x_s_i8m1_i8(balance_vec);\n\n        if (balance < 0) return false;\n    }\n\n    for (; i < n; ++i) {\n        if (brackets_data[i] == '(') {\n            ++balance;\n        } else if (brackets_data[i] == ')') {\n            --balance;\n        }\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = brackets.size();\n    int balance = 0;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = (i + vlen < n) ? vlen : n - i;\n        vbool8_t mask = __riscv_vlm_v_b8(brackets.data() + i, chunk_size);\n\n        vint8m1_t vec = __riscv_vle8_v_i8m1(brackets.data() + i, chunk_size);\n        vint8m1_t open = __riscv_vmseq_vx_i8m1_b8(vec, '(', chunk_size);\n        vint8m1_t close = __riscv_vmseq_vx_i8m1_b8(vec, ')', chunk_size);\n\n        int open_count = __riscv_vcpop_m_b8(mask, open, chunk_size);\n        int close_count = __riscv_vcpop_m_b8(mask, close, chunk_size);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0 || len % 8 != 0) {\n        // Handle non-vectorizable cases\n        int balance = 0;\n        for (char bracket : brackets) {\n            if (bracket == '(') {\n                balance++;\n            } else if (bracket == ')') {\n                balance--;\n                if (balance < 0) return false;\n            }\n        }\n        return balance == 0;\n    }\n\n    size_t vlen = vsetvl_e8m1(len);\n    vbool8_t mask = vle8_v_b8_m1(brackets.data(), vlen);\n\n    vint8m1_t open_brackets = vle8_v_i8m1(brackets.data(), mask);\n    vint8m1_t close_brackets = vle8_v_i8m1(brackets.data(), mask);\n\n    open_brackets = vmseq_vx_i8m1_b8(open_brackets, '(', vlen);\n    close_brackets = vmseq_vx_i8m1_b8(close_brackets, ')', vlen);\n\n    int balance = 0;\n    for (size_t i = 0; i < len; i += vlen) {\n        size_t chunk_len = (i + vlen > len) ? len - i : vlen;\n        vint8m1_t chunk_open = vle8_v_i8m1(brackets.data() + i, chunk_len);\n        vint8m1_t chunk_close = vle8_v_i8m1(brackets.data() + i, chunk_len);\n\n        chunk_open = vmseq_vx_i8m1_b8(chunk_open, '(', chunk_len);\n        chunk_close = vmseq_vx_i8m1_b8(chunk_close, ')', chunk_len);\n\n        for (size_t j = 0; j < chunk_len; ++j) {\n            if (chunk_open[j]) balance++;\n            if (chunk_close[j]) {\n                balance--;\n                if (balance < 0) return false;\n            }\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size() - 1;\n    std::vector<float> result(n);\n\n    size_t vl;\n    vfloat32m1_t v_x, v_result;\n    vfloat32m1_t v_coeff = _rvv_fmv_s_f_f32m1(1.0f, 1);\n\n    for (size_t i = 1; i <= n; i += vl) {\n        vl = __riscv_vsetvl_e32m1(n - i + 1);\n        v_x = __riscv_vle32_v_f32m1(&xs[i], vl);\n        v_result = __riscv_vfmul_vv_f32m1(v_x, v_coeff, vl);\n        __riscv_vse32_v_f32m1(&result[i - 1], v_result, vl);\n        v_coeff = __riscv_vfmacc_vf_f32m1(v_coeff, 1.0f, v_coeff, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    std::vector<float> result(n - 1);\n\n    size_t vl;\n    vfloat32m1_t v_xs, v_coeff, v_result;\n    float coeffs[n - 1];\n\n    for (size_t i = 1; i < n; ++i) {\n        coeffs[i - 1] = i;\n    }\n\n    for (size_t i = 0; i < n - 1; i += vl) {\n        vl = vsetvl_e32m1(n - 1 - i);\n        v_xs = vle32_v_f32m1(&xs[i + 1], vl);\n        v_coeff = vle32_v_f32m1(&coeffs[i], vl);\n        v_result = vfmul_vv_f32m1(v_xs, v_coeff, vl);\n        vse32_v_f32m1(&result[i], v_result, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    std::vector<float> result(n - 1);\n\n    size_t vl;\n    vfloat32m1_t v_xs, v_coeff, v_result;\n    float coeffs[n - 1];\n\n    for (size_t i = 1; i < n; ++i) {\n        coeffs[i - 1] = i;\n    }\n\n    for (size_t i = 0; i < n - 1; i += vl) {\n        vl = vsetvl_e32m1(n - 1 - i);\n        v_xs = vle32_v_f32m1(&xs[i + 1], vl);\n        v_coeff = vle32_v_f32m1(&coeffs[i], vl);\n        v_result = vfmul_vv_f32m1(v_xs, v_coeff, vl);\n        vse32_v_f32m1(&result[i], v_result, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    std::vector<float> result(n - 1);\n\n    size_t vl;\n    float *base = xs.data();\n    float *result_base = result.data();\n\n    for (size_t i = 1; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vfloat32m1_t vx = vle32_v_f32m1(base + i, vl);\n        vfloat32m1_t v_coeff = vle32_v_f32m1(base, vl);\n        vfloat32m1_t v_result = vmul_vv_f32m1(vx, v_coeff, vl);\n        vse32_v_f32m1(result_base + i - 1, v_result, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    std::vector<float> result(n - 1);\n\n    size_t vl;\n    float *base = xs.data();\n    float *result_base = result.data();\n\n    for (size_t i = 1; i < n; i += vl) {\n        vl = vsetvl_e8m1(n - i);\n        vfloat32m1_t vx = vle32_v_f32m1(base + i, vl);\n        vfloat32m1_t v_indices = vfrsub_vf_f32m1_m(vx, vfmv_v_f_f32m1(1.0, vl), i, vl);\n        vfloat32m1_t v_result = vmul_vv_f32m1(vx, v_indices, vl);\n        vse32_v_f32m1(result_base + i - 1, v_result, vl);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    size_t vlen = 0;\n    vlen = __riscv_vsetvl_e8m1(s.size());\n    size_t n = s.size();\n    int count = 0;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vbool8_t mask = __riscv_vmseq_vx_i8m1_b8(\n            __riscv_vle8_v_i8m1(&s[i], &vlen), 'a', vlen);\n        mask = __riscv_vor_vv_b8_b8_m1(mask, __riscv_vmseq_vx_i8m1_b8(\n            __riscv_vle8_v_i8m1(&s[i], &vlen), 'e', vlen), vlen);\n        mask = __riscv_vor_vv_b8_b8_m1(mask, __riscv_vmseq_vx_i8m1_b8(\n            __riscv_vle8_v_i8m1(&s[i], &vlen), 'i', vlen), vlen);\n        mask = __riscv_vor_vv_b8_b8_m1(mask, __riscv_vmseq_vx_i8m1_b8(\n            __riscv_vle8_v_i8m1(&s[i], &vlen), 'o', vlen), vlen);\n        mask = __riscv_vor_vv_b8_b8_m1(mask, __riscv_vmseq_vx_i8m1_b8(\n            __riscv_vle8_v_i8m1(&s[i], &vlen), 'u', vlen), vlen);\n\n        if (i + vlen >= n && s[n - 1] == 'y') {\n            mask = __riscv_vor_vv_b8_b8_m1(mask, __riscv_vmseq_vx_i8m1_b8(\n                __riscv_vle8_v_i8m1(&s[i], &vlen), 'y', vlen), vlen);\n        }\n\n        count += __riscv_vcpop_m_b8_m1(mask, vlen);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    size_t vlmax = __riscv_vsetvlmax_e8m1();\n    size_t n = s.size();\n    int count = 0;\n\n    for (size_t i = 0; i < n; i += vlmax) {\n        size_t vl = __riscv_vsetvl_e8m1(n - i);\n\n        vbool8_t mask = __riscv_vmseq_vx_i8m1_b8(vstr[i], 'a', vl);\n        count += __riscv_vcpop_m_b8(mask, vl);\n\n        mask = __riscv_vmseq_vx_i8m1_b8(vstr[i], 'e', vl);\n        count += __riscv_vcpop_m_b8(mask, vl);\n\n        mask = __riscv_vmseq_vx_i8m1_b8(vstr[i], 'i', vl);\n        count += __riscv_vcpop_m_b8(mask, vl);\n\n        mask = __riscv_vmseq_vx_i8m1_b8(vstr[i], 'o', vl);\n        count += __riscv_vcpop_m_b8(mask, vl);\n\n        mask = __riscv_vmseq_vx_i8m1_b8(vstr[i], 'u', vl);\n        count += __riscv_vcpop_m_b8(mask, vl);\n\n        if (i + vlmax >= n && s[n - 1] == 'y') {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    size_t vlen = 128; // Vector length in bits\n    size_t n = s.size();\n    int count = 0;\n\n    // Define vowels\n    const char vowels[] = \"aeiouAEIOU\";\n    bool is_vowel[256] = {0};\n    for (char c : vowels) {\n        is_vowel[(unsigned char)c] = true;\n    }\n\n    size_t i = 0;\n    for (; i <= n - vlen / 8; i += vlen / 8) {\n        vbool8_t mask = __riscv_vmsif_v_i8m1_b8(is_vowel[(unsigned char)s[i]], (vint8m1_t)__riscv_vle8_v_i8m1(&s[i], vlen / 8), vlen / 8);\n        count += __riscv_vcpop_m_b8(mask, vlen);\n    }\n\n    // Handle remaining characters\n    for (; i < n; ++i) {\n        if (is_vowel[(unsigned char)s[i]]) {\n            count++;\n        }\n    }\n\n    // Check if 'y' or 'Y' is at the end of the string\n    if (n > 0 && (s[n - 1] == 'y' || s[n - 1] == 'Y')) {\n        count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nint vowels_count_simd(std::string s) {\n    size_t vlen = 128;  // Vector length in bits\n    size_t n = s.size();\n    int count = 0;\n\n    size_t i = 0;\n    for (; i <= n - vlen / 8; i += vlen / 8) {\n        vbool8_t mask = __riscv_vmsif_v_i8m1_b8((int8_t)'a', (int8_t*)s.data() + i, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'e', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'i', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'o', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'u', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'A', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'E', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'I', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'O', (int8_t*)s.data() + i, mask, vlen / 8);\n        mask = __riscv_vmsif_v_i8m1_b8((int8_t)'U', (int8_t*)s.data() + i, mask, vlen / 8);\n\n        count += __riscv_vcpop_m_b8(mask, vlen / 8);\n    }\n\n    for (; i < n; ++i) {\n        char c = s[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n\n    if (n > 0 && (s[n - 1] == 'y' || s[n - 1] == 'Y')) {\n        count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nint vowels_count_simd(std::string s) {\n    size_t vlmax = __riscv_vsetvlmax_e8m1();\n    size_t n = s.length();\n    int count = 0;\n\n    const char* str = s.c_str();\n    const char* vowels = \"aeiouAEIOU\";\n    const char* y_vowel = \"Y\";\n\n    for (size_t i = 0; i < n; i += vlmax) {\n        size_t vl = __riscv_vsetvl_e8m1(n - i);\n\n        vbool8_t mask = __riscv_vmseq_vx_i8m1_b8(vstr, 'y', vl);\n        if (__riscv_vfirst_m_b8(mask, vl) == vl - 1 && i + vl == n) {\n            count++;\n            vl--;\n        }\n\n        vuint8m1_t vec = __riscv_vle_v_u8m1(str + i, vl);\n        vbool8_t vowel_mask = __riscv_vmseq_vx_i8m1_b8(vec, 'a', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'e', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'i', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'o', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'u', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'A', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'E', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'I', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'O', vl) |\n                              __riscv_vmseq_vx_i8m1_b8(vec, 'U', vl);\n\n        count += __riscv_vcpop_m_b8(vowel_mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    size_t vlen = 0;\n    vlen = __riscv_vsetvl_e8m1(s.size());\n    size_t n = s.size();\n    size_t i = 0;\n    int sum = 0;\n\n    vint8m1_t v_chars, v_upper, v_mask;\n    vint16m2_t v_sum;\n\n    for (i = 0; i + vlen <= n; i += vlen) {\n        v_chars = __riscv_vle8_v_i8m1(&s[i], vlen);\n        v_upper = __riscv_vmsgt_vx_i8m1_i8m1(v_chars, 'A', vlen);\n        v_mask = __riscv_vmslt_vx_i8m1_i8m1(v_chars, 'Z', vlen);\n        v_mask = __riscv_vand_vv_i8m1(v_upper, v_mask, vlen);\n        v_sum = __riscv_vwredsum_vs_i8m1_i16m2(v_chars, v_mask, vlen);\n        sum += __riscv_vmv_x_s_i16m2_i16(v_sum);\n    }\n\n    for (; i < n; ++i) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nint digitSum_simd(std::string s) {\n    int sum = 0;\n    size_t vl;\n    size_t len = s.length();\n    const char* str = s.c_str();\n\n    vbool8_t mask = __riscv_vmslt_vx_i8_b8_m1(vbool8_t(), __riscv_vmv_v_x_i8_m1(vint8m1_t(), 'A', 8), __riscv_vmv_v_x_i8_m1(vint8m1_t(), 'Z', 8), 8);\n\n    for (size_t i = 0; i < len; i += vl) {\n        vint8m1_t v_chars = __riscv_vle_v_i8m1(str + i, &vl);\n        vint8m1_t v_upper = __riscv_vand_vx_i8m1(v_chars, __riscv_vmv_v_x_i8m1(vint8m1_t(), 0xDF, 8), vl);\n        vbool8_t v_mask = __riscv_vmand_mm_b8(mask, __riscv_vmand_mm_b8(__riscv_vmsle_vx_i8_b8(v_upper, 'Z', vl), __riscv_vmsge_vx_i8_b8(v_upper, 'A', vl), vl), vl);\n        vint16m2_t v_sum = __riscv_vwredsum_vs_i8m1_i16m2(v_upper, v_sum, vl);\n        sum += __riscv_vmv_x_s_i16m2_i16(v_sum);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    size_t vlen = 128; // Vector length in bits\n    size_t n = s.size();\n    int sum = 0;\n\n    size_t i = 0;\n    for (; i <= n - vlen / 8; i += vlen / 8) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(__riscv_vle_v_i8m1(&s[i], vlen / 8), 0, vlen);\n        vint8m1_t v = __riscv_vle_v_i8m1(&s[i], vlen / 8);\n        vint8m1_t upper = __riscv_vand_vx_i8m1_m(mask, v, 'A', vlen);\n        vint8m1_t lower = __riscv_vand_vx_i8m1_m(mask, v, 'a', vlen);\n        vint8m1_t is_upper = __riscv_vmsgt_vx_i8m1_b8(upper, 'Z', vlen);\n        vint8m1_t is_lower = __riscv_vmsgt_vx_i8m1_b8(lower, 'z', vlen);\n        vint8m1_t is_alpha = __riscv_vor_vv_b8_m(mask, is_upper, is_lower, vlen);\n        vint8m1_t ascii_values = __riscv_vand_vx_i8m1_m(is_alpha, v, 0xff, vlen);\n        sum += __riscv_vredsum_vs_i32m1_i32m1(ascii_values, 0, vlen);\n    }\n\n    for (; i < n; ++i) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    size_t vlen = 0;\n    vint8m1_t v_chars, v_upper, v_mask;\n    vint32m2_t v_sum = _vv_set_all_v_i32m2(0, vlen);\n    int sum = 0;\n\n    for (size_t i = 0; i < s.length(); i += vlen) {\n        vlen = __riscv_vsetvl_e8m1(s.length() - i);\n        v_chars = __riscv_vle_v_i8m1(&s[i], vlen);\n        v_upper = __riscv_vmsgt_vx_i8m1_i8(v_chars, 'A', vlen);\n        v_mask = __riscv_vmslt_vx_i8m1_i8(v_upper, 'Z', vlen);\n        v_sum = __riscv_vwredsum_vs_i32m2_i32m1(v_sum, __riscv_vwcvt_x_x_v_i32m1(v_mask, vlen), v_sum, vlen);\n    }\n\n    sum = __riscv_vreduce_v_i32m2_i32(v_sum, vlen);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint digitSum_simd(std::string s) {\n    size_t vlen = 0;\n    int sum = 0;\n    size_t i = 0;\n    size_t length = s.length();\n\n    vbool8_t mask = __riscv_vmand_mm_b8(__riscv_vmsgt_vx_i8_b8(__riscv_vmand_vx_i8_b8(__riscv_vle8_v_i8(&s[0], length), 0xDF, vlen), 64, 64, vlen), __riscv_vmsle_vx_i8_b8(__riscv_vmand_vx_i8_b8(__riscv_vle8_v_i8(&s[0], length), 0xDF, vlen), 90, vlen), vlen);\n\n    for (; i + vlen <= length; i += vlen) {\n        vint8m1_t vec = __riscv_vle8_v_i8(&s[i], vlen);\n        vint8m1_t upper_vec = __riscv_vmand_vx_i8_m1(vec, 0xDF, vlen);\n        vint8m1_t sum_vec = __riscv_vmerge_vvm_i8_m1(upper_vec, __riscv_vmv_v_x_i8_m1(0, vlen), mask, vlen);\n        sum += __riscv_vredsum_vs_i8_i8m1(__riscv_vredsum_vs_i8_i8m1_i8m1(sum_vec, sum_vec, sum_vec, vlen), sum_vec, vlen);\n    }\n\n    vlen = length - i;\n    if (vlen > 0) {\n        vint8m1_t vec = __riscv_vle8_v_i8(&s[i], vlen);\n        vint8m1_t upper_vec = __riscv_vmand_vx_i8_m1(vec, 0xDF, vlen);\n        vint8m1_t sum_vec = __riscv_vmerge_vvm_i8_m1(upper_vec, __riscv_vmv_v_x_i8_m1(0, vlen), mask, vlen);\n        sum += __riscv_vredsum_vs_i8_i8m1(__riscv_vredsum_vs_i8_i8m1_i8m1(sum_vec, sum_vec, sum_vec, vlen), sum_vec, vlen);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    size_t vl;\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n\n    size_t n = arr.size();\n    if (n == 0) return {};\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t v_even = vand_vv_i32m1_b(v, 1, vl);\n        vbool32_t mask = vmseq_vx_i32m1_b(v_even, 0, vl);\n\n        if (vfirst_m_b(mask, vl) != -1) {\n            vint32m1_t v_min = vredmin_vs_i32m1_i32m1(v, v, vl);\n            int min_value = vmv_x_s_i32m1_i32(v_min);\n            if (min_value < smallest_value) {\n                smallest_value = min_value;\n                smallest_index = i + vfirst_m_b(mask, vl);\n            }\n        }\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_value, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    size_t vlen = 0;\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n\n    size_t n = arr.size();\n    vbool8_t mask = __riscv_vmsne_vx_i8_b8_m1(vlen, 0, 0, 1);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vint8m1_t v_data = __riscv_vle_v_i8m1(&arr[i], vlen, 1);\n        vint8m1_t v_even = __riscv_vand_vx_i8m1(v_data, 1, vlen);\n        vbool8_t v_mask_even = __riscv_vmseq_vx_i8_b8_m1(v_even, 0, vlen);\n\n        if (__riscv_vfirst_m_b8_m1(v_mask_even, vlen) != -1) {\n            vint8m1_t v_min = __riscv_vredmin_vs_i8m1_i8m1(v_data, v_data, vlen);\n            int min_value = __riscv_vmv_x_s_i8m1_i8(v_min);\n\n            if (min_value < smallest_value) {\n                smallest_value = min_value;\n                smallest_index = i + __riscv_vfirst_m_b8_m1(v_mask_even, vlen);\n            }\n        }\n    }\n\n    if (smallest_index == -1) return {};\n\n    return {smallest_value, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    size_t vlen = 0;\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n\n    size_t i = 0;\n    for (; i + vsetvl_e32m1(1) <= arr.size(); i += vsetvl_e32m1(1)) {\n        vint32m1_t vec = vle32_v_i32m1(&arr[i], vsetvl_e32m1(1));\n        vint32m1_t even_mask = vmsne_vx_i32m1_b16(vec, 1, vsetvl_e32m1(1));\n\n        if (vfirst_m_b16(even_mask, vsetvl_e32m1(1)) != -1) {\n            vint32m1_t min_even = vredmin_vs_i32m1_i32m1(vec, vec, vsetvl_e32m1(1));\n            int min_even_value = vmv_x_s_i32m1_i32(min_even);\n\n            if (min_even_value < smallest_value) {\n                smallest_value = min_even_value;\n                smallest_index = i + vfirst_m_b16(vmseq_vx_i32m1_b16(vec, min_even_value, vsetvl_e32m1(1)), vsetvl_e32m1(1));\n            }\n        }\n    }\n\n    for (; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_value) {\n            smallest_value = arr[i];\n            smallest_index = i;\n        }\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_value, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    size_t vlen = 0;\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n\n    size_t i = 0;\n    for (; i + vlen <= arr.size(); i += vlen) {\n        vint32m1_t v_data = vle32_v_i32m1(&arr[i], vlen);\n        vint32m1_t v_even = vand_vx_i32m1_m(v_data, v_data, 1);\n        vbool32_t v_mask = vmseq_vx_i32m1_b(v_even, 0, vlen);\n\n        if (vfirst_m(v_mask, &vlen)) {\n            vint32m1_t v_min = vredmin_vs_i32m1_i32m1(v_data, v_data, vlen);\n            int min_value = vmv_x_s_i32m1_i32(v_min);\n\n            if (min_value < smallest_value) {\n                smallest_value = min_value;\n                smallest_index = i + vlen - 1;\n            }\n        }\n    }\n\n    for (; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_value) {\n            smallest_value = arr[i];\n            smallest_index = i;\n        }\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_value, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t n = arr.size();\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n\n    for (size_t i = 0; i < n; i += vlmax) {\n        size_t vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_data = vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t v_even = vand_vx_i32m1_i32m1(v_data, 1, vl);\n        vbool32_t v_mask = vmseq_vx_i32m1_b32(v_even, 0, vl);\n\n        if (vfirst_m_b32(v_mask, vl) != -1) {\n            vint32m1_t v_candidates = vcompress_vm_i32m1(v_data, v_mask, vl);\n            size_t candidates_count = vsetvl_e32m1(vl);\n\n            for (size_t j = 0; j < candidates_count; j += vlmax) {\n                size_t cl = vsetvl_e32m1(candidates_count - j);\n                vint32m1_t v_candidate = vle32_v_i32m1((int*)&v_candidates + j, cl);\n                vint32m1_t v_min = vredmin_vs_i32m1_i32m1(v_candidate, smallest_value, cl);\n                smallest_value = vmv_x_s_i32m1_i32(v_min);\n\n                if (smallest_value != INT_MAX) {\n                    smallest_index = i + j + vfirst_m_b32(v_mask, vl);\n                }\n            }\n        }\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_value, smallest_index};\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    size_t vlen = 8;  // Assuming vector length of 8 for this example\n    int max_value = -1;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vint32m1_t v = _rvv_load_v_i32m1(&lst[i], chunk_size);\n\n        vint32m1_t count = _rvv_vmv_v_x_i32m1(0, vlen);\n        vint32m1_t unique_vals = _rvv_vmv_v_x_i32m1(0, vlen);\n\n        for (size_t j = 0; j < n; j += vlen) {\n            size_t compare_size = std::min(vlen, n - j);\n            vint32m1_t compare_v = _rvv_load_v_i32m1(&lst[j], compare_size);\n            vbool32_t mask = _rvv_msub_vv_i32m1_b32(v, compare_v, vlen);\n\n            count = _rvv_vadd_vv_i32m1_m(mask, count, count, vlen);\n            unique_vals = _rvv_vor_vv_i32m1_m(mask, unique_vals, v, vlen);\n        }\n\n        for (size_t k = 0; k < vlen; ++k) {\n            int val = _rvv_get_i32m1_i32(unique_vals, k);\n            int freq = _rvv_get_i32m1_i32(count, k);\n            if (val > 0 && freq >= val && val > max_value) {\n                max_value = val;\n            }\n        }\n    }\n\n    return max_value;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t vlen = 8; // Vector length\n    size_t n = lst.size();\n    int max_val = -1;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vint32m1_t v = vle32_v_i32m1(&lst[i], chunk_size);\n\n        for (size_t j = 0; j < chunk_size; ++j) {\n            int val = v[j];\n            int count = std::count(lst.begin(), lst.end(), val);\n            if (count >= val && val > max_val) {\n                max_val = val;\n            }\n        }\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    size_t vlen = 0;\n    vint32m1_t v1, v2;\n    vint32m1_t v_max = __riscv_vset_v_i32m1_i32m1(0, 0);\n    int max_value = -1;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = __riscv_vsetvl_e32m1(n - i);\n        v1 = __riscv_vle32_v_i32m1(&lst[i], vlen);\n        v2 = __riscv_vle32_v_i32m1(&lst[i], vlen);\n\n        vint32m1_t v_freq = __riscv_vmsgt_vv_i32m1_b_b(v1, v2, vlen);\n        v_freq = __riscv_vredsum_vs_i32m1_i32m1(v_freq, v_freq, vlen);\n\n        vint32m1_t v_mask = __riscv_vmsgt_vx_i32m1_b_b(v_freq, v1, vlen);\n        vint32m1_t v_candidate = __riscv_vmerge_vvm_i32m1(v_max, v1, v_mask, vlen);\n\n        v_max = __riscv_vredmax_vs_i32m1_i32m1(v_candidate, v_max, vlen);\n    }\n\n    max_value = __riscv_vmv_x_s_i32m1_i32(v_max);\n\n    if (max_value == 0) {\n        return -1;\n    }\n\n    return max_value;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t vlen = 0;\n    int max_val = -1;\n\n    // Determine the vector length\n    vlen = __riscv_vsetvl_e32m1(lst.size());\n\n    // Allocate memory for frequency count\n    std::vector<int> freq(lst.size(), 0);\n\n    // Count frequencies using RVV intrinsics\n    for (size_t i = 0; i < lst.size(); i += vlen) {\n        vint32m1_t v_lst = __riscv_vle32_v_i32m1(&lst[i], vlen);\n        vint32m1_t v_freq = __riscv_vle32_v_i32m1(&freq[i], vlen);\n\n        vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(v_lst, 0, vlen);\n        v_freq = __riscv_vadd_vx_i32m1(v_freq, 1, vlen);\n\n        __riscv_vse32_v_i32m1(&freq[i], v_freq, vlen);\n    }\n\n    // Find the maximum value that meets the criteria\n    for (size_t i = 0; i < lst.size(); i += vlen) {\n        vint32m1_t v_lst = __riscv_vle32_v_i32m1(&lst[i], vlen);\n        vint32m1_t v_freq = __riscv_vle32_v_i32m1(&freq[i], vlen);\n\n        vbool32_t mask = __riscv_vmsgt_vx_i32m1_b32(v_freq, 0, vlen);\n        vint32m1_t v_max = __riscv_vmax_vv_i32m1(v_lst, v_lst, vlen);\n\n        int local_max = __riscv_vmv_x_s_i32m1_i32(v_max);\n        max_val = std::max(max_val, local_max);\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_95_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    size_t vlen = 8;  // Assuming vector length of 8 for this example\n    int max_value = -1;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vint32m1_t v = vle32_v_i32m1(&lst[i], chunk_size);\n\n        vint32m1_t count = vundef_i32m1();\n        vint32m1_t one = vmv_v_x_i32m1(1, chunk_size);\n\n        for (size_t j = 0; j < n; j += vlen) {\n            size_t chunk_size_j = std::min(vlen, n - j);\n            vint32m1_t vj = vle32_v_i32m1(&lst[j], chunk_size_j);\n            vbool32_t mask = vmseq_vv_i32m1_b32(v, vj, chunk_size);\n            count = vadd_vv_i32m1_m(mask, count, one, chunk_size);\n        }\n\n        vbool32_t mask = vmsge_vx_i32m1_b32(count, v, chunk_size);\n        int temp_max = vfirst_m_b32(mask, v);\n\n        if (temp_max != -1 && (temp_max > max_value || max_value == -1)) {\n            max_value = temp_max;\n        }\n    }\n\n    return max_value;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    if (n == 0) return false;\n\n    size_t vl;\n    int sum = 0;\n    vint32m1_t v_sum = _rvv_vmv_v_x_i32m1(0, 1);\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = _rvv_vsetvl_e32m1(n - i);\n        vint32m1_t v_q = _rvv_vle32_v_i32m1(&q[i], vl);\n        v_sum = _rvv_vadd_vv_i32m1(v_sum, v_q, vl);\n    }\n\n    sum = _rvv_vredsum_vs_i32m1_i32m1(v_sum, sum, vl);\n\n    if (sum > w) return false;\n\n    for (size_t i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - i - 1]) return false;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    if (n == 0) return false;\n\n    // Check if the vector is palindromic\n    bool balanced = true;\n    for (size_t i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - i - 1]) {\n            balanced = false;\n            break;\n        }\n    }\n    if (!balanced) return false;\n\n    // Calculate the sum of the vector elements using RVV intrinsics\n    size_t vlen = 4; // Example vector length, adjust as needed\n    int sum = 0;\n    size_t i = 0;\n\n    vint32m1_t v_sum = _rvv_vmv_v_x_i32m1(0, 1);\n    for (; i + vlen <= n; i += vlen) {\n        vint32m1_t v = _rvv_vle32_v_i32m1(&q[i], 1);\n        v_sum = _rvv_vadd_vv_i32m1(v_sum, v, 1);\n    }\n\n    // Reduce the vector sum\n    int temp[4] = {0};\n    _rvv_vse32_v_i32m1(temp, v_sum, 1);\n    for (size_t j = 0; j < vlen; ++j) {\n        sum += temp[j];\n    }\n\n    // Add remaining elements if any\n    for (; i < n; ++i) {\n        sum += q[i];\n    }\n\n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    size_t vl;\n\n    // Check if the vector is balanced (palindromic)\n    for (size_t i = 0; i < n / 2; i += vl) {\n        vl = vsetvl_e32m1(n / 2 - i);\n        vint32m1_t v1 = vle32_v_i32m1(&q[i], vl);\n        vint32m1_t v2 = vle32_v_i32m1(&q[n - i - 1], vl);\n        if (vmsne_vx_i32m1_b1(v1, v2, vl)) {\n            return false;\n        }\n    }\n\n    // Calculate the sum of the elements\n    int sum = 0;\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&q[i], vl);\n        sum += vredsum_vs_i32m1_i32m1(v, vundefined_i32m1(), vl);\n    }\n\n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    if (n == 0) return false;\n\n    // Check if the vector is palindromic\n    bool is_palindromic = true;\n    size_t vl = vsetvl_e32m1(n / 2);\n    for (size_t i = 0; i < n / 2; i += vl) {\n        vint32m1_t vec1 = vle32_v_i32m1(&q[i], &q[n - i - 1], vl);\n        vint32m1_t vec2 = vle32_v_i32m1(&q[n - i - 1], &q[i], vl);\n        vbool32_t mask = vmseq_vv_i32m1_b32(vec1, vec2, vl);\n        if (!vfirst_m_b32(mask, vl)) {\n            is_palindromic = false;\n            break;\n        }\n    }\n    if (!is_palindromic) return false;\n\n    // Calculate the sum of the vector elements\n    int sum = 0;\n    vl = vsetvl_e32m1(n);\n    for (size_t i = 0; i < n; i += vl) {\n        vint32m1_t vec = vle32_v_i32m1(&q[i], vl);\n        vint32m1_t sum_vec = vredsum_vs_i32m1_i32m1(vec, vec, vl);\n        sum += vmv_x_s_i32m1_i32(sum_vec);\n    }\n\n    return sum <= w;\n}\n```"}
{"task_id": "SimdBench_96_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    if (n == 0) return false;\n\n    size_t vl = 0;\n    vint32m1_t v_sum = _rvv_set_int32m1(0, 1);\n    vint32m1_t v_q = _rvv_load_int32m1(&q[0], &vl);\n    v_sum = _rvv_reduce_add_int32m1(v_sum, v_q, v_sum, vl);\n\n    int sum = _rvv_reduce_add_int32m1(v_sum, v_sum, v_sum, vl);\n    if (sum > w) return false;\n\n    for (size_t i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - i - 1]) return false;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n\n    size_t vlen = 0;\n    vint32m1_t v1, v2, v_diff;\n    vbool32_t mask;\n\n    for (size_t i = 0; i < n / 2; i += vlen) {\n        vlen = vsetvl_e32m1(n / 2 - i);\n        v1 = vle32_v_i32m1(&arr[i], vlen);\n        v2 = vle32_v_i32m1(&arr[n - i - 1], vlen);\n        v_diff = vsub_vv_i32m1(v1, v2, vlen);\n        mask = vmseq_vv_i32m1_b32(v_diff, v1, vlen);\n        changes += vlen - vcpop_m_b32(mask, vlen);\n    }\n\n    if (n % 2 != 0) {\n        changes += (arr[n / 2] != arr[n / 2]) ? 1 : 0;\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint smallest_change_simd(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < n / 2; i += vl) {\n        vl = vsetvl_e32m1(n / 2 - i);\n        vint32m1_t v1 = vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t v2 = vle32_v_i32m1(&arr[n - i - 1], vl);\n        vbool32_t mask = vmseq_vv_i32m1_b32(v1, v2, vl);\n        changes += vl - vcpop_m_b32(mask, vl);\n    }\n\n    if (n % 2 != 0) {\n        changes += (arr[n / 2] != arr[n / 2]);\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n    size_t vlen = 8; // Assuming vector length of 8 for this example\n\n    for (size_t i = 0; i < n / 2; i += vlen) {\n        size_t chunk_size = std::min(vlen, n / 2 - i);\n        vint32m1_t vec1 = vle32_v_i32m1(&arr[i], chunk_size);\n        vint32m1_t vec2 = vle32_v_i32m1(&arr[n - i - 1], chunk_size);\n\n        vbool32_t mask = vmseq_vv_i32m1_b32(vec1, vec2);\n        changes += vcpop_m_b32(vnot_m_b32(mask, chunk_size), chunk_size);\n    }\n\n    // Handle remaining elements if the vector length is not a multiple of vlen\n    for (size_t i = (n / 2) * vlen; i < n / 2; ++i) {\n        if (arr[i] != arr[n - i - 1]) {\n            changes++;\n        }\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint smallest_change_simd(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < n / 2; i += vl) {\n        vl = vsetvl_e32m1(n / 2 - i);\n        vint32m1_t v1 = vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t v2 = vle32_v_i32m1(&arr[n - i - 1], vl);\n        vbool32_t mask = vmseq_vv_i32m1_b32(v1, v2);\n        changes += vl - vcpop_m_b32(mask, vl);\n    }\n\n    if (n % 2 != 0) {\n        changes += (arr[n / 2] != arr[n / 2]);\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nint smallest_change_simd(std::vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n    size_t vl;\n\n    for (size_t i = 0; i < n / 2; i += vl) {\n        vl = vsetvl_e32m1(n / 2 - i);\n        vint32m1_t v_left = vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t v_right = vle32_v_i32m1(&arr[n - i - 1], vl);\n        vbool32_t mask = vmseq_vv_i32m1_b32(v_left, v_right);\n        changes += vl - vcpop_m_b32(mask, vl);\n    }\n\n    if (n % 2 != 0) {\n        changes += (arr[n / 2] != arr[n / 2]);\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> &lst1, const std::vector<std::string> &lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(128);\n\n    for (const auto &str : lst1) {\n        size_t len = str.length();\n        size_t i = 0;\n        for (; i + vlen <= len; i += vlen) {\n            vbool8_t mask = vle8_v_b8_m1(mask, &str[i], vlen);\n            total_chars_lst1 += __builtin_riscv_vcpop_m_b8_m1(mask, vlen);\n        }\n        total_chars_lst1 += len - i;\n    }\n\n    for (const auto &str : lst2) {\n        size_t len = str.length();\n        size_t i = 0;\n        for (; i + vlen <= len; i += vlen) {\n            vbool8_t mask = vle8_v_b8_m1(mask, &str[i], vlen);\n            total_chars_lst2 += __builtin_riscv_vcpop_m_b8_m1(mask, vlen);\n        }\n        total_chars_lst2 += len - i;\n    }\n\n    return (total_chars_lst1 < total_chars_lst2) ? lst1 : lst2;\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    size_t vlen = 8; // Assuming vector length of 8 for this example\n\n    for (size_t i = 0; i < lst1.size(); i += vlen) {\n        size_t chunk_size = std::min(vlen, lst1.size() - i);\n        size_t lengths[vlen];\n        for (size_t j = 0; j < chunk_size; ++j) {\n            lengths[j] = lst1[i + j].length();\n        }\n        vint32m1_t v_lengths = __riscv_vle32_v_i32m1(lengths, vlen);\n        vint32m1_t v_sum = __riscv_vredsum_vs_i32m1_i32m1(v_lengths, v_lengths, __riscv_vfmv_v_f_i32m1(0, vlen));\n        total_chars_lst1 += __riscv_vmv_x_s_i32m1_i32(v_sum);\n    }\n\n    for (size_t i = 0; i < lst2.size(); i += vlen) {\n        size_t chunk_size = std::min(vlen, lst2.size() - i);\n        size_t lengths[vlen];\n        for (size_t j = 0; j < chunk_size; ++j) {\n            lengths[j] = lst2[i + j].length();\n        }\n        vint32m1_t v_lengths = __riscv_vle32_v_i32m1(lengths, vlen);\n        vint32m1_t v_sum = __riscv_vredsum_vs_i32m1_i32m1(v_lengths, v_lengths, __riscv_vfmv_v_f_i32m1(0, vlen));\n        total_chars_lst2 += __riscv_vmv_x_s_i32m1_i32(v_sum);\n    }\n\n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> &lst1, const std::vector<std::string> &lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    size_t vlen = vsetvl_e8m1(1);\n\n    for (const auto &str : lst1) {\n        size_t len = str.length();\n        size_t i = 0;\n        for (; i + vlen <= len; i += vlen) {\n            vuint8m1_t v = vle8_v_u8m1(&str[i], vlen);\n            total_chars_lst1 += vlen;\n        }\n        total_chars_lst1 += len - i;\n    }\n\n    for (const auto &str : lst2) {\n        size_t len = str.length();\n        size_t i = 0;\n        for (; i + vlen <= len; i += vlen) {\n            vuint8m1_t v = vle8_v_u8m1(&str[i], vlen);\n            total_chars_lst2 += vlen;\n        }\n        total_chars_lst2 += len - i;\n    }\n\n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else if (total_chars_lst2 < total_chars_lst1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> &lst1, const std::vector<std::string> &lst2) {\n    size_t total_chars_1 = 0;\n    size_t total_chars_2 = 0;\n\n    for (const auto &str : lst1) {\n        size_t len = str.length();\n        const char *chars = str.c_str();\n        size_t i = 0;\n        for (; i <= (len - vsetvl_e8m1(8)); i += vsetvl_e8m1(8)) {\n            vbool8_t mask = __riscv_vmslt_vx_u8m1_b8(vle8_v_u8m1(chars + i, 8), 255, vsetvl_e8m1(8));\n            total_chars_1 += __riscv_vcpop_m_b8(mask, vsetvl_e8m1(8));\n        }\n        total_chars_1 += strlen(chars + i);\n    }\n\n    for (const auto &str : lst2) {\n        size_t len = str.length();\n        const char *chars = str.c_str();\n        size_t i = 0;\n        for (; i <= (len - vsetvl_e8m1(8)); i += vsetvl_e8m1(8)) {\n            vbool8_t mask = __riscv_vmslt_vx_u8m1_b8(vle8_v_u8m1(chars + i, 8), 255, vsetvl_e8m1(8));\n            total_chars_2 += __riscv_vcpop_m_b8(mask, vsetvl_e8m1(8));\n        }\n        total_chars_2 += strlen(chars + i);\n    }\n\n    return (total_chars_1 < total_chars_2) ? lst1 : lst2;\n}\n```"}
{"task_id": "SimdBench_98_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> &lst1, const std::vector<std::string> &lst2) {\n    size_t total_chars_1 = 0;\n    size_t total_chars_2 = 0;\n\n    size_t vlen = 8; // Assuming vector length of 8 bytes for this example\n\n    for (const auto &str : lst1) {\n        size_t len = str.length();\n        size_t i = 0;\n        for (; i <= len - vlen; i += vlen) {\n            vbool8_t mask = __riscv_vlm_v_b8(str.data() + i, len - i, vsetvl_e8m1(vlen));\n            total_chars_1 += __riscv_vcpop_m_b8_b8_m(mask, vlen);\n        }\n        total_chars_1 += len - i;\n    }\n\n    for (const auto &str : lst2) {\n        size_t len = str.length();\n        size_t i = 0;\n        for (; i <= len - vlen; i += vlen) {\n            vbool8_t mask = __riscv_vlm_v_b8(str.data() + i, len - i, vsetvl_e8m1(vlen));\n            total_chars_2 += __riscv_vcpop_m_b8_b8_m(mask, vlen);\n        }\n        total_chars_2 += len - i;\n    }\n\n    return (total_chars_1 < total_chars_2) ? lst1 : lst2;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1 && x != 1) return false;\n    if (x == 1) return true;\n\n    size_t vl = 8;\n    vuint64m1_t vn = _rvv_vmv_v_x_u64m1(n, vl);\n    vuint64m1_t vx = _rvv_vmv_v_x_u64m1(x, vl);\n    vuint64m1_t v1 = _rvv_vmv_v_x_u64m1(1, vl);\n    vuint64m1_t vresult = _rvv_vmv_v_x_u64m1(0, vl);\n\n    for (size_t i = 0; i < vl; i++) {\n        vresult = _rvv_vpow_vv_u64m1(vn, vx, vl);\n        if (_rvv_vmv_x_s_i64m1_i64(vresult, 0) == x) {\n            return true;\n        }\n        vx = _rvv_vadd_vx_u64m1(vx, 1, vl);\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1 && x != 1) return false;\n    if (x == 1) return true;\n\n    size_t vector_length = 8;\n    vuint64m1_t vx = _rvv_vmv_v_x_u64m1(x, vector_length);\n    vuint64m1_t vn = _rvv_vmv_v_x_u64m1(n, vector_length);\n    vuint64m1_t power = _rvv_vmv_v_x_u64m1(1, vector_length);\n\n    for (size_t i = 0; i < vector_length; ++i) {\n        power = _rvv_vmul_vv_u64m1(power, vn, vector_length);\n        vbool64_t mask = _rvv_vmseq_vv_u64m1_b64(power, vx, vector_length);\n        if (_rvv_vmfirst_m_b64(mask, vector_length) != -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1 && x != 1) return false;\n    if (x == 1) return true;\n\n    size_t vector_length = 8;\n    vuint64m1_t vx = _rvv_vmv_v_x_u64m1(x, vector_length);\n    vuint64m1_t vn = _rvv_vmv_v_x_u64m1(n, vector_length);\n    vuint64m1_t v1 = _rvv_vmv_v_x_u64m1(1, vector_length);\n\n    vuint64m1_t vpow = v1;\n    vbool64_t mask = _rvv_vmseq_vv_u64m1_b64(vx, v1, vector_length);\n\n    while (!_rvv_vmfirst_m_b64(mask, mask)) {\n        vpow = _rvv_vwmacc_vv_u64m1(vpow, vpow, vn, vector_length);\n        mask = _rvv_vmseq_vv_u64m1_b64(vx, vpow, vector_length);\n    }\n\n    return _rvv_vmfirst_m_b64(mask, mask) != 0;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 1 && n == 1) return true;\n    if (n == 1) return false;\n\n    size_t vl = 8;\n    vuint64m1_t vx = vle64_v_u64m1(&x, vl);\n    vuint64m1_t vn = vle64_v_u64m1(&n, vl);\n    vuint64m1_t vone = vmv_v_x_u64m1(1, vl);\n\n    vuint64m1_t vpow = vone;\n    vuint64m1_t vresult = vmv_v_x_u64m1(0, vl);\n\n    for (size_t i = 0; i < 64; i++) {\n        vpow = vmul_vv_u64m1(vpow, vn, vl);\n        vresult = vor_vv_u64m1(vresult, vmsgt_vv_u64m1_b64(vpow, vx, vl), vl);\n    }\n\n    uint64_t result;\n    vse64_v_u64m1(&result, vresult, vl);\n\n    return result == 1;\n}\n```"}
{"task_id": "SimdBench_99_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1 && x != 1) return false;\n    if (x == 1) return true;\n\n    size_t vl = 8;\n    vuint64m1_t vx = _rvv_vmv_v_x_u64m1(x, vl);\n    vuint64m1_t vn = _rvv_vmv_v_x_u64m1(n, vl);\n    vuint64m1_t v1 = _rvv_vmv_v_x_u64m1(1, vl);\n\n    vuint64m1_t vpow = v1;\n    bool result = false;\n\n    for (size_t i = 0; i < 64; ++i) {\n        vpow = _rvv_vmul_vv_u64m1(vpow, vn, vl);\n        vbool64_t mask = _rvv_vmseq_vv_u64m1_b64(vpow, vx, vl);\n        if (_rvv_vmfirst_m_b64(mask, vl) != -1) {\n            result = true;\n            break;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint hex_key_simd(const std::string &num) {\n    size_t vlen = 8;  // Vector length\n    int count = 0;\n    size_t n = num.size();\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vbool8_t mask = __riscv_vlsseg8e8_v_b_m(vbool8_t(), &num[i], chunk_size, vsetvl_e8m1(chunk_size));\n\n        vuint8m1_t vec = __riscv_vlseg8e8_v_u8m1(&num[i], mask, vsetvl_e8m1(chunk_size));\n\n        vuint8m1_t prime_mask = __riscv_vmseq_vx_u8m1_tu(vec, '2', vsetvl_e8m1(chunk_size)) |\n                                __riscv_vmseq_vx_u8m1_tu(vec, '3', vsetvl_e8m1(chunk_size)) |\n                                __riscv_vmseq_vx_u8m1_tu(vec, '5', vsetvl_e8m1(chunk_size)) |\n                                __riscv_vmseq_vx_u8m1_tu(vec, '7', vsetvl_e8m1(chunk_size)) |\n                                __riscv_vmseq_vx_u8m1_tu(vec, 'B', vsetvl_e8m1(chunk_size)) |\n                                __riscv_vmseq_vx_u8m1_tu(vec, 'D', vsetvl_e8m1(chunk_size));\n\n        count += __riscv_vcpop_m(vbool1_t(), prime_mask, vsetvl_e8m1(chunk_size));\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nint hex_key_simd(const std::string &num) {\n    size_t vlen = 8;  // Assuming vector length of 8 bytes for this example\n    size_t n = num.size();\n    int count = 0;\n\n    const char *hexPrimes = \"2357BD\";\n    vbool8_t mask = __riscv_vmandn_mm_b8(__riscv_vmseq_mm_b8(__riscv_vle8_v_b8(hexPrimes, 6), __riscv_vle8_v_b8(num.c_str(), n), vlen),\n                                          __riscv_vmseq_mm_b8(__riscv_vle8_v_b8(hexPrimes, 6), __riscv_vle8_v_b8(num.c_str(), n), vlen), vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vuint8m1_t vec = __riscv_vle8_v_u8m1(num.c_str() + i, chunk_size);\n        vbool8_t local_mask = __riscv_vmandn_mm_b8(__riscv_vmseq_mm_b8(vec, __riscv_vle8_v_b8(hexPrimes, 6), vlen),\n                                                   __riscv_vmseq_mm_b8(vec, __riscv_vle8_v_b8(hexPrimes, 6), vlen), vlen);\n        mask = __riscv_vmerge_vvm_b8(mask, local_mask, chunk_size, vlen);\n    }\n\n    count = __riscv_vcpop_m_b8(mask, vlen);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nint hex_key_simd(const std::string &num) {\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(num.size());\n\n    const char* str = num.c_str();\n    size_t i = 0;\n    int count = 0;\n\n    vbool8_t mask = __riscv_vmandn_mm_b_b8_m1(vlen);\n    vuint8m1_t vec = __riscv_vle8_v_u8m1(str, vlen, mask);\n\n    const char* primes = \"2357BD\";\n    size_t primes_len = strlen(primes);\n\n    for (i = 0; i < num.size(); i += vlen) {\n        vec = __riscv_vle8_v_u8m1(str + i, vlen, mask);\n        for (size_t j = 0; j < primes_len; ++j) {\n            vbool8_t eq_mask = __riscv_vmseq_vx_u8m1_b8(vec, primes[j], vlen);\n            count += __riscv_vcpop_m_b8(eq_mask, vlen);\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nint hex_key_simd(const std::string &num) {\n    size_t vlen = 8; // Vector length\n    size_t n = num.size();\n    int count = 0;\n\n    const char *hexPrimes = \"2357BD\";\n    size_t primesLen = strlen(hexPrimes);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vbool8_t mask = vsetvl_e8m1(chunk_size);\n\n        vuint8m1_t vec = vle8_v_u8m1(num.data() + i, mask);\n        vuint8m1_t primeVec = vle8_v_u8m1(hexPrimes, vsetvl_e8m1(primesLen));\n\n        for (size_t j = 0; j < primesLen; ++j) {\n            vuint8m1_t primeChar = vmv_v_x_u8m1(hexPrimes[j], vsetvl_e8m1(chunk_size));\n            vbool8_t eq = vmsne_vx_u8m1_b8(vec, hexPrimes[j], mask);\n            count += vcpop_m_b8(mask, eq);\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nint hex_key_simd(const std::string &num) {\n    size_t vlen = 0;\n    vlen = __riscv_vsetvl_e8m1(num.size());\n\n    vuint8m1_t v_num, v_prime_mask;\n    v_num = __riscv_vle8_v_u8m1(&num[0], vlen);\n\n    uint8_t prime_mask[16] = {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0};\n    v_prime_mask = __riscv_vle8_v_u8m1(prime_mask, 16);\n\n    vbool8_t v_mask = __riscv_vmseq_vx_u8m1_b8(v_num, 0, vlen);\n    v_num = __riscv_vand_vv_u8m1(v_num, v_prime_mask, vlen);\n\n    vuint8m1_t v_result = __riscv_vmsne_vx_u8m1_tu(v_num, v_mask, 0, vlen);\n    uint8_t result[16];\n    __riscv_vse8_v_u8m1(result, v_result, vlen);\n\n    int count = 0;\n    for (size_t i = 0; i < vlen; ++i) {\n        count += result[i];\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string &s) {\n    size_t len = s.length();\n    if (len < 3) return false;\n\n    size_t vlen = 8;  // Vector length\n    size_t i = 0;\n\n    while (i <= len - 3) {\n        size_t chunk_size = (len - i < vlen * 3) ? (len - i) / 3 : vlen;\n        vbool8_t mask = __riscv_vmsgt_x_b8_b8(vlen, __riscv_vmv_v_x_b8(vlen, 0), __riscv_vmv_v_x_b8(vlen, chunk_size), 1);\n\n        vuint8m1_t vec1 = __riscv_vle_v_u8m1(&s[i], vlen, mask);\n        vuint8m1_t vec2 = __riscv_vle_v_u8m1(&s[i + 1], vlen, mask);\n        vuint8m1_t vec3 = __riscv_vle_v_u8m1(&s[i + 2], vlen, mask);\n\n        vbool8_t eq1 = __riscv_vmseq_vv_b8_b8_m1(vec1, vec2, vlen);\n        vbool8_t eq2 = __riscv_vmseq_vv_b8_b8_m1(vec2, vec3, vlen);\n        vbool8_t eq3 = __riscv_vmseq_vv_b8_b8_m1(vec1, vec3, vlen);\n\n        vbool8_t any_eq = __riscv_vor_vv_b8_m1(eq1, eq2, vlen);\n        any_eq = __riscv_vor_vv_b8_m1(any_eq, eq3, vlen);\n\n        if (__riscv_vmfirst_m_b8_m1(any_eq, vlen) != -1) {\n            return false;\n        }\n\n        i += chunk_size * 3;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string &s) {\n    size_t len = s.length();\n    if (len < 3) return false;\n\n    size_t vlen = 8;  // Assuming vector length of 8 bytes\n    size_t i = 0;\n\n    // Load the first two characters\n    char prev2 = s[0];\n    char prev1 = s[1];\n\n    for (i = 2; i < len; i += vlen) {\n        size_t chunk_size = (i + vlen < len) ? vlen : len - i;\n        vbool8_t mask = __riscv_vmslt_vx_i8_b8(vlen, chunk_size, 0);\n\n        vint8m1_t vec = __riscv_vle8_v_i8m1(&s[i], vlen);\n        vint8m1_t vec_prev1 = __riscv_vslideup_vx_i8m1(vec, prev1, vlen);\n        vint8m1_t vec_prev2 = __riscv_vslideup_vx_i8m1(vec_prev1, prev2, vlen);\n\n        vbool8_t eq1 = __riscv_vmseq_vv_i8m1_b8(vec, vec_prev1, vlen);\n        vbool8_t eq2 = __riscv_vmseq_vv_i8m1_b8(vec, vec_prev2, vlen);\n\n        vbool8_t any_eq = __riscv_vor_vv_b8(eq1, eq2, vlen);\n        any_eq = __riscv_vand_vv_b8_m(mask, any_eq, any_eq, vlen);\n\n        if (__riscv_vmfirst_m_b8(mask, any_eq, vlen) != -1) {\n            return false;\n        }\n\n        prev2 = s[i - 1];\n        prev1 = s[i];\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string &s) {\n    size_t len = s.length();\n    if (len < 3) return false;\n\n    size_t vlen = vsetvl_e8m1(len - 2);\n    vbool8_t mask = vle8_v_b8_b8m1(s.data(), s.data() + 1, vlen);\n\n    for (size_t i = 0; i < len - 2; i += vlen) {\n        size_t current_vlen = vsetvl_e8m1(len - 2 - i);\n        vuint8m1_t vec1 = vle8_v_u8m1(s.data() + i, current_vlen);\n        vuint8m1_t vec2 = vle8_v_u8m1(s.data() + i + 1, current_vlen);\n        vuint8m1_t vec3 = vle8_v_u8m1(s.data() + i + 2, current_vlen);\n\n        vbool8_t eq1 = vmseq_vx_u8m1_b8(vec1, vec2, current_vlen);\n        vbool8_t eq2 = vmseq_vx_u8m1_b8(vec2, vec3, current_vlen);\n        vbool8_t eq3 = vmseq_vx_u8m1_b8(vec1, vec3, current_vlen);\n\n        vbool8_t any_eq = vor_vv_b8_b8m1(eq1, eq2, current_vlen);\n        any_eq = vor_vv_b8_b8m1(any_eq, eq3, current_vlen);\n\n        if (vfirst_m_b8_b8m1(mask, any_eq, current_vlen) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string &s) {\n    size_t len = s.length();\n    if (len < 3) return false;\n\n    size_t vlen = vsetvl_e8m1(len - 2);\n    const uint8_t *ptr = reinterpret_cast<const uint8_t*>(s.data());\n\n    for (size_t i = 0; i < len - 2; i += vlen) {\n        vuint8m1_t v0 = vle8_v_u8m1(ptr + i, vlen);\n        vuint8m1_t v1 = vle8_v_u8m1(ptr + i + 1, vlen);\n        vuint8m1_t v2 = vle8_v_u8m1(ptr + i + 2, vlen);\n\n        vbool8_t mask0 = vmseq_vx_u8m1_b8(v0, v1, vlen);\n        vbool8_t mask1 = vmseq_vx_u8m1_b8(v1, v2, vlen);\n        vbool8_t mask2 = vmseq_vx_u8m1_b8(v0, v2, vlen);\n\n        vbool8_t mask = vor_vv_b8(mask0, mask1, vlen);\n        mask = vor_vv_b8(mask, mask2, vlen);\n\n        if (vfirst_m_b8(mask, vlen) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_happy_simd(const std::string &s) {\n    size_t len = s.length();\n    if (len < 3) return false;\n\n    size_t vlen = vsetvl_e8m1(len);\n    vbool8_t mask = vle8_v_b8_m1(s.c_str(), s.c_str() + len, vlen);\n\n    for (size_t i = 0; i < len - 2; i += vlen) {\n        size_t current_vlen = vsetvl_e8m1(len - i);\n        vuint8m1_t vec = vle8_v_u8m1(s.c_str() + i, current_vlen);\n        vuint8m1_t vec_next = vle8_v_u8m1(s.c_str() + i + 1, current_vlen);\n        vuint8m1_t vec_next2 = vle8_v_u8m1(s.c_str() + i + 2, current_vlen);\n\n        vbool8_t eq1 = vmseq_vx_u8m1_b8(vec, vec_next, current_vlen);\n        vbool8_t eq2 = vmseq_vx_u8m1_b8(vec, vec_next2, current_vlen);\n        vbool8_t eq3 = vmseq_vx_u8m1_b8(vec_next, vec_next2, current_vlen);\n\n        vbool8_t any_eq = vor_vv_b8(vor_vv_b8(eq1, eq2, current_vlen), eq3, current_vlen);\n\n        if (vfirst_m_b8(any_eq, current_vlen) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(size_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (size_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n    return is_prime(length);\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool is_prime(size_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (size_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n    return is_prime(length);\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(size_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (size_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n    vbool8_t mask = __riscv_vmsgt_x_b8_b7(length, 0, 7);\n    vint8m1_t v_length = __riscv_vmv_v_x_i8m1(length, 7);\n    vint8m1_t v_one = __riscv_vmv_v_x_i8m1(1, 7);\n    vint8m1_t v_two = __riscv_vmv_v_x_i8m1(2, 7);\n    vint8m1_t v_three = __riscv_vmv_v_x_i8m1(3, 7);\n\n    vbool8_t v_is_prime = __riscv_vmand_mm_b8(__riscv_vmsgt_vx_i8m1_b7(v_length, 1, 7),\n                                              __riscv_vmand_mm_b8(__riscv_vmsne_vx_i8m1_b7(v_length, 2, 7),\n                                                                  __riscv_vmsne_vx_i8m1_b7(v_length, 3, 7)), 7);\n\n    for (size_t i = 5; i * i <= length; i += 6) {\n        vint8m1_t v_i = __riscv_vmv_v_x_i8m1(i, 7);\n        vint8m1_t v_i_plus_2 = __riscv_vmv_v_x_i8m1(i + 2, 7);\n        v_is_prime = __riscv_vmand_mm_b8(__riscv_vmsne_vv_i8m1_b7(v_length, v_i, 7),\n                                         __riscv_vmsne_vv_i8m1_b7(v_length, v_i_plus_2, 7), 7);\n    }\n\n    return __riscv_vmfirst_m_b8(mask, v_is_prime) != -1;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(size_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (size_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n    vbool8_t mask = __riscv_vmsgt_vx_i8_b8(vbool8_t(), length, 1, 8);\n    vint8m1_t v_length = __riscv_vmv_v_x_i8m1(length, 8);\n    vint8m1_t v_one = __riscv_vmv_v_x_i8m1(1, 8);\n    vint8m1_t v_two = __riscv_vmv_v_x_i8m1(2, 8);\n    vint8m1_t v_three = __riscv_vmv_v_x_i8m1(3, 8);\n\n    vbool8_t v_le_three = __riscv_vmsle_vv_i8m1_b8(v_length, v_three, 8);\n    vbool8_t v_eq_two = __riscv_vmseq_vv_i8m1_b8(v_length, v_two, 8);\n    vbool8_t v_eq_three = __riscv_vmseq_vv_i8m1_b8(v_length, v_three, 8);\n\n    vbool8_t v_not_prime = __riscv_vmsgt_vx_i8_b8(vbool8_t(), length, 3, 8);\n    v_not_prime = __riscv_vor_vv_b8(v_not_prime, v_eq_two, 8);\n    v_not_prime = __riscv_vor_vv_b8(v_not_prime, v_eq_three, 8);\n\n    if (__riscv_vfirst_m_b8(v_le_three, 8)) {\n        return true;\n    }\n\n    if (__riscv_vfirst_m_b8(v_not_prime, 8)) {\n        return false;\n    }\n\n    for (size_t i = 5; i * i <= length; i += 6) {\n        vint8m1_t v_i = __riscv_vmv_v_x_i8m1(i, 8);\n        vint8m1_t v_i_plus_two = __riscv_vmv_v_x_i8m1(i + 2, 8);\n        vbool8_t v_mod_i = __riscv_vmsne_vv_i8m1_b8(__riscv_vrem_vv_i8m1(v_length, v_i, 8), v_one, 8);\n        vbool8_t v_mod_i_plus_two = __riscv_vmsne_vv_i8m1_b8(__riscv_vrem_vv_i8m1(v_length, v_i_plus_two, 8), v_one, 8);\n\n        vbool8_t v_not_prime_i = __riscv_vand_vv_b8(v_mod_i, v_mod_i_plus_two, 8);\n\n        if (__riscv_vfirst_m_b8(v_not_prime_i, 8)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstring>\n\nbool prime_length_simd(const std::string & str) {\n    size_t length = str.length();\n\n    if (length <= 1) return false;\n    if (length <= 3) return true;\n    if (length % 2 == 0 || length % 3 == 0) return false;\n\n    size_t i = 5;\n    size_t vlen = 8 * vsetvl_e8m1(8);\n    vbool8_t mask = vle8_v_b8((bool*)calloc(vlen, sizeof(bool)), vlen);\n\n    for (; i * i <= length; i += vlen) {\n        vuint8m1_t v_i = vle8_v_u8m1(&i, vlen);\n        vuint8m1_t v_rem = vremu_vx_u8m1(length, v_i, vlen);\n        mask = vmsne_vx_u8m1_b8(v_rem, 0, mask, vlen);\n\n        if (vfirst_m_b8(mask, vlen) != vlen) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    size_t vector_length = 64;\n    size_t n = sizeof(sum) * 8;\n    size_t count = n / vector_length + (n % vector_length != 0);\n\n    vbool64_t mask = __riscv_vmsgt_x_u64m1_b64(sum, 0, count);\n    vuint64m1_t vector = __riscv_vmv_v_x_u64m1(sum, count);\n\n    std::string result = \"\";\n    for (size_t i = 0; i < count; ++i) {\n        if (__riscv_vfirst_m_b64(mask, i)) {\n            result = std::to_string(vector[i] % 2) + result;\n            vector[i] /= 2;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    size_t vlen = 128;  // Example vector length\n    size_t n = sizeof(sum) * 8;\n    size_t groups = (n + vlen - 1) / vlen;\n\n    std::string result = \"\";\n    for (size_t i = 0; i < groups; ++i) {\n        size_t offset = i * vlen;\n        size_t length = (n - offset < vlen) ? n - offset : vlen;\n\n        vbool1_t mask = __riscv_vmsgt_x_u1_b1_m(vsetvl_e8m1(), sum, 0, 0, 0, 0, 0, 0, 0);\n        vuint8m1_t vector = __riscv_vmv_v_x_u8m1(sum, vsetvl_e8m1());\n\n        for (size_t j = 0; j < length; ++j) {\n            result = (vector[j] % 2 == 0 ? \"0\" : \"1\") + result;\n            vector = __riscv_vsrl_vx_u8m1(vector, 1, vsetvl_e8m1());\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    size_t vlen = 128;\n    size_t n = sizeof(sum) * 8;\n    size_t count = (n + vlen - 1) / vlen;\n\n    std::string result = \"\";\n    for (size_t i = 0; i < count; ++i) {\n        size_t vl = n - i * vlen > vlen ? vlen : n - i * vlen;\n        vbool1_t mask = __riscv_vmsgt_x_u1_b1_m(vsetvl_e8m1(vl), sum, 0, 1);\n\n        vuint8m1_t v = __riscv_vmv_v_x_u8m1(sum, vl);\n        vuint8m1_t rem = __riscv_vrem_vx_u8m1(v, 2, vl);\n\n        result = std::to_string(rem[0]) + result;\n        sum /= 2;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    size_t vector_length = 64;\n    vuint8m1_t v_sum = _rvv_set_v_u8m1(&sum, 1);\n    vuint8m1_t v_result = _rvv_splats_v_u8m1(0);\n\n    for (size_t i = 0; i < 8; ++i) {\n        vbool1_t mask = _rvv_msb_v_u8m1(v_sum, i);\n        v_result = _rvv_or_vx_v_u8m1(v_result, _rvv_and_vx_v_u8m1(mask, 1 << i, 1), 1);\n    }\n\n    std::string result;\n    for (size_t i = 0; i < vector_length; ++i) {\n        result += _rvv_get_v_u8m1(v_result, i) + '0';\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_103_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    size_t vector_length = 8;\n    vuint8m1_t vec_sum = __riscv_vmv_v_x_u8m1(sum, 8);\n\n    std::string binary_result = \"\";\n    while (sum > 0) {\n        vbool8_t mask = __riscv_vmseq_vx_u8m1_b8(vec_sum, 1, 8);\n        uint8_t bit = __riscv_vmfirst_m_b8(mask, 8);\n        binary_result = (bit ? \"1\" : \"0\") + binary_result;\n        vec_sum = __riscv_vsrl_vx_u8m1(vec_sum, 1, 8);\n        sum >>= 1;\n    }\n\n    return binary_result.empty() ? \"0\" : binary_result;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    size_t n = lst.size();\n    int sum = 0;\n    size_t vl;\n\n    for (size_t i = 1; i < n; i += 2) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_even = vand_vv_i32m1(v, 1, vl);\n        vint32m1_t v_zero = vmv_v_x_i32m1(0, vl);\n        vint32m1_t v_mask = vmsne_vv_i32m1_b1(v_even, v_zero, vl);\n        vint32m1_t v_sum = vredsum_vs_i32m1_i32m1(v, v_mask, vl);\n        sum += vmv_x_s_i32m1_i32(v_sum);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    size_t vector_length = 4;\n    int sum = 0;\n\n    size_t i = 1;\n    for (; i + vector_length <= lst.size(); i += vector_length * 2) {\n        vint32m1_t v1 = __riscv_vle32_v_i32m1(&lst[i], vector_length);\n        vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(v1, 0, vector_length);\n        vint32m1_t v2 = __riscv_vmerge_vxm_i32m1(v1, 0, mask, vector_length);\n        int temp_sum = __riscv_vredsum_vs_i32m1_i32(v2, v1, vector_length);\n        sum += temp_sum;\n    }\n\n    for (; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t vl;\n    size_t vector_len = lst.size();\n    size_t i = 1;\n\n    while (i + vsetvl_e32m1(vector_len - i) < vector_len) {\n        vint32m1_t v_odd_indices = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_even_elements = vand_vv_i32m1(v_odd_indices, 1, vl);\n        vint32m1_t v_zero = vmv_v_x_i32m1(0, vl);\n        vbool32_t mask = vmseq_vv_i32m1_b32(v_even_elements, v_zero, vl);\n\n        vint32m1_t v_sum = vredsum_vs_i32m1_i32m1(v_odd_indices, v_zero, mask, vl);\n        sum += vmv_x_s_i32m1_i32(v_sum);\n\n        i += vl;\n    }\n\n    for (; i < vector_len; i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t vl;\n    size_t i = 1;\n\n    while (i + vsetvl_e32m1(lst.size() - i) < lst.size()) {\n        vl = vsetvl_e32m1(lst.size() - i);\n        vint32m1_t v = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_even = vand_vv_i32m1_b16(v, 1, vl);\n        vint32m1_t v_zero = vmv_v_x_i32m1(0, vl);\n        vbool16_t mask = vmseq_vv_i32m1_b16(v_even, v_zero, vl);\n        vint32m1_t v_sum = vredsum_vs_i32m1_i32m1(v, v_zero, mask, vl);\n        sum += vmv_x_s_i32m1_i32(v_sum);\n        i += vl;\n    }\n\n    for (; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t vl;\n\n    size_t n = lst.size();\n    size_t i = 1;\n\n    while (i + vsetvl_e32m1(n - i) < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_even = vand_vv_i32m1_b16(v, 1, vl);\n        sum += vredsum_vs_i32m1_i32m1(v_even, vadd_vv_i32m1(v_even, v_even, vl), vl);\n        i += vl;\n    }\n\n    for (; i < n; i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = s.size();\n    std::string result(n, ' ');\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsgt_x_i8mf8_b8_m(vsetvl_e8mf8(vlen), (int8_t)'a', (int8_t)'z', vlen);\n        vint8mf8_t vec = __riscv_vle8_v_i8mf8(&s[i], vlen);\n        vint8mf8_t shifted = __riscv_vadd_vx_i8mf8_m(vsetvl_e8mf8(vlen), vec, 8, mask);\n        __riscv_vse8_v_i8mf8(&result[i], shifted, vlen);\n    }\n\n    for (; i < n; ++i) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result[i] = s[i] + 8;\n        } else {\n            result[i] = s[i];\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t vlen = 128 / 8;  // Assuming vector length of 128 bits\n    size_t n = s.size();\n    std::string result(n, ' ');\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vbool8_t mask = __riscv_vcreate_mask(chunk_size);\n\n        vuint8m1_t vec_input = __riscv_vle8_v_u8m1(&s[i], mask);\n        vuint8m1_t vec_shifted = __riscv_vadd_vx_u8m1(vec_input, 8, mask);  // Shift by 8 (2*4)\n\n        __riscv_vse8_v_u8m1(&result[i], vec_shifted, mask);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = s.size();\n    std::string result(n, ' ');\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8_b8_m8(vbool8_t(), __riscv_vmv_s_x_i8_m8(int8_t('a'), 8), __riscv_vmv_s_x_i8_m8(int8_t('z'), 8), 8);\n        vint8m8_t vec = __riscv_vle_v_i8m8(&s[i], 8);\n        vint8m8_t shifted = __riscv_vadd_vx_i8m8(vec, 8, 8);\n        vint8m8_t encrypted = __riscv_vmerge_vvm_i8m8(mask, shifted, vec, 8);\n        __riscv_vse_v_i8m8(&result[i], encrypted, 8);\n    }\n\n    for (; i < n; ++i) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            result[i] = c + 8;\n        } else {\n            result[i] = c;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t vlen = 0;\n    vlen = __riscv_vsetvl_e8m1(s.size());\n    size_t n = s.size();\n    size_t i = 0;\n    std::string result(n, ' ');\n\n    vuint8m1_t v_input, v_output;\n    uint8_t rotation = 4;\n\n    for (; i + vlen <= n; i += vlen) {\n        v_input = __riscv_vle8_v_u8m1(&s[i], vlen);\n        v_output = __riscv_vadd_vx_u8m1(v_input, rotation, vlen);\n\n        __riscv_vse8_v_u8m1(&result[i], v_output, vlen);\n    }\n\n    for (; i < n; ++i) {\n        result[i] = s[i] + rotation;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_105_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = s.size();\n    std::string result(n, ' ');\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmslt_vx_i8_b8_m(vlen, __riscv_vmv_v_x_i8_m(vlen, 'a' - 1, 8), __riscv_vle_v_i8_m(vlen, &s[i], 8), 8);\n        vint8m1_t vec = __riscv_vle_v_i8m1(&s[i], vlen);\n        vint8m1_t shifted = __riscv_vadd_vx_i8m1(vec, 4, vlen);\n        vint8m1_t wrapped = __riscv_vmerge_vvm_i8m1(mask, shifted, __riscv_vsub_vx_i8m1(shifted, 26, vlen), vlen);\n        __riscv_vse_v_i8m1(&result[i], wrapped, vlen);\n    }\n\n    for (; i < n; ++i) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            c = (c - 'a' + 4) % 26 + 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = (c - 'A' + 4) % 26 + 'A';\n        }\n        result[i] = c;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string &message) {\n    size_t length = message.length();\n    std::string encoded(length, ' ');\n\n    size_t vlen = 0;\n    vbool8_t mask = __riscv_vmsgt_vx_i8_b8_m1(vlen, 0, 0);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vlen = __riscv_vlmax_e8m1();\n        vint8m1_t chars = __riscv_vle_v_i8m1(&message[i], vlen);\n\n        // Swap case\n        vint8m1_t swapped_case = __riscv_vxor_vv_i8m1_m1(chars, __riscv_vmv_v_x_i8m1_m1(32, vlen), vlen);\n\n        // Create mask for vowels\n        vbool8_t is_vowel = __riscv_vmor_mm_b8_m1(\n            __riscv_vmseq_vx_i8m1_b8_m1(chars, 'a', vlen),\n            __riscv_vmseq_vx_i8m1_b8_m1(chars, 'e', vlen),\n            __riscv_vmor_mm_b8_m1(\n                __riscv_vmseq_vx_i8m1_b8_m1(chars, 'i', vlen),\n                __riscv_vmseq_vx_i8m1_b8_m1(chars, 'o', vlen),\n                __riscv_vmor_mm_b8_m1(\n                    __riscv_vmseq_vx_i8m1_b8_m1(chars, 'u', vlen),\n                    __riscv_vmseq_vx_i8m1_b8_m1(chars, 'A', vlen),\n                    __riscv_vmor_mm_b8_m1(\n                        __riscv_vmseq_vx_i8m1_b8_m1(chars, 'E', vlen),\n                        __riscv_vmseq_vx_i8m1_b8_m1(chars, 'I', vlen),\n                        __riscv_vmor_mm_b8_m1(\n                            __riscv_vmseq_vx_i8m1_b8_m1(chars, 'O', vlen),\n                            __riscv_vmseq_vx_i8m1_b8_m1(chars, 'U', vlen),\n                            mask\n                        )\n                    )\n                )\n            )\n        );\n\n        // Replace vowels\n        vint8m1_t replaced_vowels = __riscv_vadd_vx_i8m1_m1(chars, 2, vlen);\n        vint8m1_t result = __riscv_vmerge_vvm_i8m1(swapped_case, replaced_vowels, is_vowel, vlen);\n\n        __riscv_vse_v_i8m1(&encoded[i], result, vlen);\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string &message) {\n    size_t vlen = 128;  // Vector length\n    size_t n = message.size();\n    std::string encoded(n, ' ');\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(vlen, 0, chunk_size);\n\n        vuint8m1_t v_input = __riscv_vle8_v_u8m1(&message[i], mask);\n        vuint8m1_t v_output = __riscv_vle8_v_u8m1(&encoded[i], mask);\n\n        // Swap case\n        vbool8_t is_lower = __riscv_vmsgt_vx_i8m1_b8(vlen, v_input, 'Z');\n        vbool8_t is_upper = __riscv_vmslt_vx_i8m1_b8(vlen, v_input, 'a');\n        vuint8m1_t v_swapped = __riscv_vmerge_vvm_b8(v_input ^ 0x20, v_input, is_lower & is_upper, vlen);\n\n        // Replace vowels\n        vuint8m1_t v_a = __riscv_vmv_v_x_u8m1_m8(vlen, 'a', 1);\n        vuint8m1_t v_e = __riscv_vmv_v_x_u8m1_m8(vlen, 'e', 1);\n        vuint8m1_t v_i = __riscv_vmv_v_x_u8m1_m8(vlen, 'i', 1);\n        vuint8m1_t v_o = __riscv_vmv_v_x_u8m1_m8(vlen, 'o', 1);\n        vuint8m1_t v_u = __riscv_vmv_v_x_u8m1_m8(vlen, 'u', 1);\n\n        vbool8_t is_a = __riscv_vmseq_vv_i8m1_b8(vlen, v_swapped, v_a);\n        vbool8_t is_e = __riscv_vmseq_vv_i8m1_b8(vlen, v_swapped, v_e);\n        vbool8_t is_i = __riscv_vmseq_vv_i8m1_b8(vlen, v_swapped, v_i);\n        vbool8_t is_o = __riscv_vmseq_vv_i8m1_b8(vlen, v_swapped, v_o);\n        vbool8_t is_u = __riscv_vmseq_vv_i8m1_b8(vlen, v_swapped, v_u);\n\n        vuint8m1_t v_replaced = __riscv_vmerge_vvm_b8(v_swapped + 2, v_swapped, is_a | is_e | is_i | is_o | is_u, vlen);\n\n        __riscv_vse8_v_u8m1(&encoded[i], v_replaced, mask);\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string &message) {\n    size_t length = message.length();\n    std::string encoded(length, ' ');\n\n    size_t vlen = 0;\n    vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(vlen, 0, 0);\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vlen = length - i < 8 ? length - i : 8;\n        mask = __riscv_vmsgt_vx_i8m1_b8(vlen, 0, 0);\n\n        vint8m1_t chars = __riscv_vle8_v_i8m1(&message[i], mask);\n        vint8m1_t encoded_chars = __riscv_vxor_vx_i8m1(chars, 0b00100000, mask); // Swap case\n\n        vbool8_t is_vowel = __riscv_vmseq_vx_i8m1_b8(chars, 'a', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'e', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'i', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'o', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'u', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'A', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'E', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'I', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'O', mask) |\n                            __riscv_vmseq_vx_i8m1_b8(chars, 'U', mask);\n\n        vint8m1_t replaced_vowels = __riscv_vadd_vx_i8m1(chars, 2, mask);\n        encoded_chars = __riscv_vmerge_vvm_i8m1(encoded_chars, replaced_vowels, is_vowel, mask);\n\n        __riscv_vse8_v_i8m1(&encoded[i], encoded_chars, mask);\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string &message) {\n    size_t length = message.length();\n    std::string encoded(length, ' ');\n\n    size_t vlen = 0;\n    vbool8_t mask = __riscv_vmsgt_vx_i8_b8(vlen, 0, 0); // Initialize mask\n\n    for (size_t i = 0; i < length; i += vlen) {\n        vlen = length - i < 8 ? length - i : 8;\n        vint8m1_t vec = __riscv_vle_v_i8m1(&message[i], vlen);\n\n        // Swap case\n        vint8m1_t swapped = __riscv_vxor_vx_i8m1(vec, 32, vlen);\n        vbool8_t is_lower = __riscv_vmslt_vx_i8m1_b8(swapped, 'a', vlen);\n        vbool8_t is_upper = __riscv_vmslt_vx_i8m1_b8(swapped, 'A', vlen);\n        vbool8_t is_letter = __riscv_vor_vv_b8(is_lower, is_upper, vlen);\n        vint8m1_t case_swapped = __riscv_vmerge_vvm_i8m1(vec, swapped, is_letter, vlen);\n\n        // Replace vowels\n        vbool8_t is_vowel = __riscv_vmseq_vx_i8m1_b8(case_swapped, 'a', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'e', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'i', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'o', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'u', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'A', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'E', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'I', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'O', vlen) |\n                            __riscv_vmseq_vx_i8m1_b8(case_swapped, 'U', vlen);\n        vint8m1_t replaced = __riscv_vadd_vx_i8m1(case_swapped, 2, vlen);\n        vint8m1_t result = __riscv_vmerge_vvm_i8m1(case_swapped, replaced, is_vowel, vlen);\n\n        __riscv_vse_v_i8m1(&encoded[i], result, vlen);\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n\nstd::string encode_simd(const std::string &message) {\n    size_t vlen = 128 / 8;  // Assuming 128-bit vector registers\n    size_t n = message.size();\n    std::string encoded(n, ' ');\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = std::min(vlen, n - i);\n        vbool8_t mask = __riscv_vmsgt_x_i8m1_b8(vlen, 0, 0, vlen - chunk_size);\n\n        vint8m1_t vec = __riscv_vle8_v_i8m1(&message[i], mask);\n\n        // Swap case\n        vint8m1_t is_lower = __riscv_vmsgt_x_i8m1_i8m1_b8(vec, 'a' - 1, mask);\n        vint8m1_t is_upper = __riscv_vmsgt_x_i8m1_i8m1_b8(vec, 'Z', mask);\n        vint8m1_t is_alpha = __riscv_vmslt_x_i8m1_i8m1_b8(vec, 'z' + 1, mask) & (is_lower | is_upper);\n\n        vint8m1_t swapped = __riscv_vxor_vx_i8m1_m(mask, vec, 32, vlen);\n        vec = __riscv_vmerge_vvm_i8m1(swapped, vec, is_alpha, vlen);\n\n        // Replace vowels\n        vint8m1_t is_vowel = __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'a', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'e', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'i', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'o', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'u', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'A', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'E', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'I', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'O', mask) |\n                             __riscv_vmseq_vx_i8m1_i8m1_b8(vec, 'U', mask);\n\n        vint8m1_t replaced = __riscv_vadd_vx_i8m1_m(mask, vec, 2, vlen);\n        vec = __riscv_vmerge_vvm_i8m1(replaced, vec, is_vowel, vlen);\n\n        __riscv_vse8_v_i8m1(&encoded[i], vec, mask);\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    size_t vector_length = 0;\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t length = key.length();\n        vector_length = length > vector_length ? length : vector_length;\n\n        for (char const &c: key) {\n            if (!std::islower(c)) all_lower = false;\n            if (!std::isupper(c)) all_upper = false;\n        }\n    }\n\n    if (!all_lower && !all_upper) return false;\n\n    size_t vlen = vsetvl_e8m1(vector_length);\n    vbool8_t mask = vle8_v_b8_m1(mask, (const char*)key.c_str(), vlen);\n\n    if (all_lower) {\n        for (const auto& pair : dict) {\n            const std::string& key = pair.first;\n            vbool8_t mask = vle8_v_b8_m1(mask, (const char*)key.c_str(), vlen);\n            vbool8_t result = vlc8_v_b8_m1(mask, (const char*)key.c_str(), vlen);\n            if (vfirst_m1(mask, result) != -1) return false;\n        }\n    } else if (all_upper) {\n        for (const auto& pair : dict) {\n            const std::string& key = pair.first;\n            vbool8_t mask = vle8_v_b8_m1(mask, (const char*)key.c_str(), vlen);\n            vbool8_t result = vuc8_v_b8_m1(mask, (const char*)key.c_str(), vlen);\n            if (vfirst_m1(mask, result) != -1) return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t vector_length = vsetvl_e8m1(key.size());\n\n        for (size_t i = 0; i < key.size(); i += vector_length) {\n            vbool8_t mask = vle8_v_b8_m1((vuint8m1_t)key.data() + i, vector_length);\n            vuint8m1_t chars = vle8_v_u8m1(key.data() + i, mask, vector_length);\n\n            vuint8m1_t lower_chars = vadd_vx_u8m1(chars, 32, vector_length);\n            vbool8_t is_upper = vmseq_vx_b8_m1_tu(chars, lower_chars, 'a' - 'A', vector_length);\n            vbool8_t is_lower = vmseq_vx_b8_m1_tu(chars, chars, 'a', vector_length);\n\n            if (vfirst_m1(mask, is_upper, vector_length) != -1) {\n                all_lower = false;\n            }\n            if (vfirst_m1(mask, is_lower, vector_length) != -1) {\n                all_upper = false;\n            }\n        }\n\n        if (!all_lower && !all_upper) return false;\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    size_t key_length = dict.begin()->first.size();\n    size_t vector_length = vsetvl_e8m1(key_length);\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        if (key.size() != key_length) return false;\n\n        vbool8_t mask = vle8_v_b8m1(key.data(), vector_length);\n        vuint8m1_t vec = vle8_v_u8m1(key.data(), mask);\n\n        vuint8m1_t lower_vec = vand_vx_u8m1(vec, 'a' - 'A', vector_length);\n        vuint8m1_t upper_vec = vand_vx_u8m1(vec, 'A' - 'a', vector_length);\n\n        bool is_lower = vmseq_vx_u8m1_b8(vec, lower_vec, 'a' - 'A', vector_length);\n        bool is_upper = vmseq_vx_u8m1_b8(vec, upper_vec, 'A' - 'a', vector_length);\n\n        all_lower &= is_lower;\n        all_upper &= is_upper;\n\n        if (!all_lower && !all_upper) return false;\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    size_t vector_length = 8; // Example vector length\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t length = key.length();\n\n        for (size_t i = 0; i < length; i += vector_length) {\n            size_t chunk_size = std::min(vector_length, length - i);\n            vbool8_t mask = __riscv_vsetvli(chunk_size, RVV_E8, RVV_M1);\n\n            vuint8m1_t v_chars = __riscv_vle8_v_u8m1(&key[i], mask);\n            vuint8m1_t v_lower = __riscv_vadd_vx_u8m1(v_chars, -'a' + 'A', mask);\n            vuint8m1_t v_upper = __riscv_vadd_vx_u8m1(v_chars, -'A' + 'a', mask);\n\n            vbool8_t v_is_lower = __riscv_vmseq_vx_u8m1_b8(v_chars, v_lower, 'a' - 'A', mask);\n            vbool8_t v_is_upper = __riscv_vmseq_vx_u8m1_b8(v_chars, v_upper, 'A' - 'a', mask);\n\n            if (!__riscv_vfirst_m_b8(mask, v_is_lower)) all_lower = false;\n            if (!__riscv_vfirst_m_b8(mask, v_is_upper)) all_upper = false;\n\n            if (!all_lower && !all_upper) return false;\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <map>\n#include <string>\n#include <cctype>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    size_t vector_length = 8; // Example vector length\n    bool upper_case = true;\n    bool lower_case = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t length = key.length();\n        size_t i = 0;\n\n        for (; i <= length - vector_length; i += vector_length) {\n            vbool8_t mask = __riscv_vlm_v_b8(key.c_str() + i, vector_length);\n            vint8m1_t v = __riscv_vle8_v_i8m1(key.c_str() + i, vector_length, mask);\n\n            vbool8_t is_upper = __riscv_vmand_mm_b_b8_m1(mask, v, __riscv_vmseq_vx_i8m1_b8(v, 'A', vector_length),\n                                                         __riscv_vmseq_vx_i8m1_b8(v, 'Z', vector_length));\n            vbool8_t is_lower = __riscv_vmand_mm_b_b8_m1(mask, v, __riscv_vmseq_vx_i8m1_b8(v, 'a', vector_length),\n                                                         __riscv_vmseq_vx_i8m1_b8(v, 'z', vector_length));\n\n            if (__riscv_vmfirst_m_b8(mask, is_upper) == -1) upper_case = false;\n            if (__riscv_vmfirst_m_b8(mask, is_lower) == -1) lower_case = false;\n\n            if (!upper_case && !lower_case) return false;\n        }\n\n        for (; i < length; ++i) {\n            if (std::isupper(key[i])) lower_case = false;\n            if (std::islower(key[i])) upper_case = false;\n        }\n\n        if (!upper_case && !lower_case) return false;\n    }\n\n    return upper_case || lower_case;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    size_t vector_bits = vsetvl_e8m1(1);\n    vbool8_t mask = vle8_v_b8m1(reinterpret_cast<const int8_t*>(&n), vector_bits);\n\n    for (int num = 2; num < n; ++num) {\n        bool is_prime = true;\n        int sqrt_num = static_cast<int>(sqrt(num));\n\n        for (size_t i = 0; i < primes.size(); ++i) {\n            if (primes[i] > sqrt_num) break;\n            if (num % primes[i] == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    size_t vector_bits = 128;\n    vbool8_t mask = __riscv_vmslt_vx_i8_b8(vsetvl_e8m1(vector_bits), n, 2, 1);\n\n    vint8m1_t v_numbers = __riscv_vadd_vx_i8m1(vsetvl_e8m1(vector_bits), 2, 1);\n    vint8m1_t v_is_prime = __riscv_vand_vv_i8m1(vsetvl_e8m1(vector_bits), v_numbers, v_numbers, 1);\n\n    for (int i = 2; i < n; i += vsetvl_e8m1(vector_bits)) {\n        size_t vl = vsetvl_e8m1(vector_bits);\n        vint8m1_t v_i = __riscv_vmv_v_x_i8m1(vl, i, 1);\n        vint8m1_t v_sqrt_i = __riscv_vmsle_vv_i8m1_b8(vl, v_i, v_i, 1);\n\n        vbool8_t v_mask = __riscv_vmslt_vv_i8m1_b8(vl, v_i, v_sqrt_i, 1);\n        v_is_prime = __riscv_vand_vv_i8m1(vl, v_is_prime, v_mask, 1);\n\n        bool is_prime = true;\n        for (int j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    size_t vector_bits = vsetvl_e8m1(1);\n    vbool8_t mask = vle8_v_b8m1(reinterpret_cast<const int8_t*>(primes.data()), vector_bits);\n\n    for (int num = 2; num < n; ++num) {\n        bool is_prime = true;\n        int sqrt_num = static_cast<int>(sqrt(num));\n\n        for (size_t i = 0; i < primes.size() && primes[i] <= sqrt_num; ++i) {\n            if (num % primes[i] == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    size_t vector_bits = 128; // Example vector size\n    vbool8_t mask = __riscv_vmslt_vx_i8_b8(vint8m1_t(), n, 1);\n\n    vint8m1_t v_i = __riscv_vmv_v_x_i8m1(2, 1);\n    vint8m1_t v_j = __riscv_vadd_vx_i8m1(v_i, 1, 1);\n\n    for (int i = 2; i < n; i += vsetvl_e8m1(vector_bits)) {\n        size_t vl = vsetvl_e8m1(vector_bits);\n        vint8m1_t v_nums = __riscv_vadd_vx_i8m1(v_i, i, vl);\n\n        vbool8_t is_prime = __riscv_vmseq_vx_i8m1_b8(v_nums, 1, vl);\n\n        for (int j = 2; j * j <= i + vl; ++j) {\n            vint8m1_t v_div = __riscv_vrem_vx_i8m1(v_nums, j, vl);\n            is_prime = __riscv_vand_vm_b8(is_prime, __riscv_vmseq_vx_i8m1_b8(v_div, 0, vl), vl);\n        }\n\n        for (size_t k = 0; k < vl; ++k) {\n            if (is_prime[k]) {\n                primes.push_back(v_nums[k]);\n            }\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    size_t vector_bits = vsetvl_e8m1(1);\n    vbool8_t mask = vle8_v_b8(true, vector_bits);\n\n    int max_check = static_cast<int>(sqrt(n)) + 1;\n    std::vector<bool> is_prime(n + 1, true);\n    is_prime[0] = is_prime[1] = false;\n\n    for (int i = 2; i <= max_check; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j <= n; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string &s) {\n    size_t vlen = 128;\n    size_t n = s.size();\n    int count = 0;\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vbool64_t mask = __riscv_vmsgt_vx_i64m8_b64((vint64m8_t)__riscv_vle64_v_i64m8((int64_t*)&s[i], vlen / 64), 'A', vlen);\n        vint64m8_t vec = __riscv_vand_vx_i64m8_m((vint64m8_t)mask, (vint64m8_t)__riscv_vle64_v_i64m8((int64_t*)&s[i], vlen / 64), (int64_t)'A', vlen);\n        vint64m8_t upper_vowels = __riscv_vand_vx_i64m8_m(vec, vec, (int64_t)('E' - 'A'), vlen);\n        vbool64_t vowel_mask = __riscv_vmseq_vx_i64m8_b64(upper_vowels, 'A', vlen) | __riscv_vmseq_vx_i64m8_b64(upper_vowels, 'E', vlen) |\n                               __riscv_vmseq_vx_i64m8_b64(upper_vowels, 'I', vlen) | __riscv_vmseq_vx_i64m8_b64(upper_vowels, 'O', vlen) |\n                               __riscv_vmseq_vx_i64m8_b64(upper_vowels, 'U', vlen);\n        vbool64_t even_mask = __riscv_vmsle_vx_i64m8_b64((vint64m8_t)__riscv_vadd_vx_i64m8_i64m8((vint64m8_t)__riscv_vmv_v_x_i64m8(i, vlen), (vint64m8_t)__riscv_vmv_v_x_i64m8(1, vlen), vlen), 1, vlen);\n        vowel_mask = __riscv_vand_vv_b64_m(vowel_mask, even_mask, vlen);\n        count += __riscv_vcpop_m_b64(vowel_mask, vlen);\n    }\n\n    for (; i < n; i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    size_t vector_bits = 128; // Example vector length\n    size_t n = s.size();\n    int count = 0;\n\n    size_t i = 0;\n    for (; i <= n - vector_bits / 8; i += vector_bits / 8) {\n        vbool8_t mask = __riscv_vmsgt_vx_i8m1_b8(__riscv_vle_v_i8m1(&s[i], vector_bits / 8), 0, vector_bits / 8);\n        vbool8_t even_mask = __riscv_vmand_mm_b8(mask, __riscv_vmseq_vx_i8m1_b8(__riscv_vand_vx_i8m1_i8m1(mask, 0x40, vector_bits / 8), 'A', vector_bits / 8), vector_bits / 8);\n        count += __riscv_vcpop_m_b8(even_mask, vector_bits / 8);\n    }\n\n    for (; i < n; i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    size_t vector_bits = 128;\n    size_t n = s.size();\n    int count = 0;\n\n    vbool64_t mask = __riscv_vmsne_vx_i8m8_b64(0, 0, 2, 1); // Create a mask for even indices\n    vint8m8_t vec = __riscv_vle8_v_i8m8(&s[0], n, 1); // Load the string into a vector\n\n    vbool8_t vowel_mask = __riscv_vmseq_vx_i8m8_b8(vec, 'A', 8) |\n                          __riscv_vmseq_vx_i8m8_b8(vec, 'E', 8) |\n                          __riscv_vmseq_vx_i8m8_b8(vec, 'I', 8) |\n                          __riscv_vmseq_vx_i8m8_b8(vec, 'O', 8) |\n                          __riscv_vmseq_vx_i8m8_b8(vec, 'U', 8); // Create a mask for uppercase vowels\n\n    vowel_mask = __riscv_vand_vm_b8(mask, vowel_mask, 8); // Combine the masks\n\n    count = __riscv_vcpop_m_b8(vowel_mask, 8); // Count the number of set bits in the mask\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    size_t vlen = 8; // Assuming vector length of 8 bytes (64 bits)\n    size_t n = s.size();\n    int count = 0;\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsne((vint8m1_t)__riscv_vmv_v_x((vint8m1_t)s[i], vsetvl_e8m1(vlen)), 0, vsetvl_e8m1(vlen));\n        vint8m1_t vec = __riscv_vle8_v_i8m1(&s[i], vsetvl_e8m1(vlen), mask);\n\n        vbool8_t is_upper_vowel = __riscv_vmand(__riscv_vmseq((vec & __riscv_vmv_v_x_i8m1(0xDFDFDFDFDFDFDFDF, vsetvl_e8m1(vlen))), 'A', vsetvl_e8m1(vlen)),\n                                               __riscv_vmor(__riscv_vmseq(vec, 'A', vsetvl_e8m1(vlen)),\n                                                            __riscv_vmor(__riscv_vmseq(vec, 'E', vsetvl_e8m1(vlen)),\n                                                                         __riscv_vmor(__riscv_vmseq(vec, 'I', vsetvl_e8m1(vlen)),\n                                                                                      __riscv_vmseq(vec, 'O', vsetvl_e8m1(vlen))))), vsetvl_e8m1(vlen));\n\n        vbool8_t even_indices = __riscv_vmsne(__riscv_vand(__riscv_vmseq((vint8m1_t)__riscv_vadd((vint8m1_t)__riscv_vmv_v_x_i8m1(i, vsetvl_e8m1(vlen)), (vint8m1_t)__riscv_vmv_v_x_i8m1(1, vsetvl_e8m1(vlen))), 0, vsetvl_e8m1(vlen)), 1, vsetvl_e8m1(vlen)), 0, vsetvl_e8m1(vlen));\n\n        is_upper_vowel = __riscv_vmand(is_upper_vowel, even_indices, vsetvl_e8m1(vlen));\n\n        count += __riscv_vcpop(is_upper_vowel, vsetvl_e8m1(vlen));\n    }\n\n    for (; i < n; i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint count_upper_simd(const std::string & s) {\n    size_t vector_bits = 128;\n    size_t n = s.size();\n    int count = 0;\n\n    size_t vlen = __riscv_vsetvl_e8m1(n);\n    vbool8_t mask = __riscv_vmslt_vx_i8m1_b8(vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t chunk_size = (n - i < vlen) ? n - i : vlen;\n        vuint8m1_t vec = __riscv_vle8_v_u8m1(&s[i], chunk_size, mask);\n\n        vbool8_t is_upper_vowel = __riscv_vmand_mm_b8(__riscv_vmseq_vx_i8m1_b8(vec, 'A', vlen),\n                                                      __riscv_vmseq_vx_i8m1_b8(vec, 'E', vlen),\n                                                      vlen);\n        is_upper_vowel = __riscv_vmor_mm_b8(is_upper_vowel, __riscv_vmseq_vx_i8m1_b8(vec, 'I', vlen), vlen);\n        is_upper_vowel = __riscv_vmor_mm_b8(is_upper_vowel, __riscv_vmseq_vx_i8m1_b8(vec, 'O', vlen), vlen);\n        is_upper_vowel = __riscv_vmor_mm_b8(is_upper_vowel, __riscv_vmseq_vx_i8m1_b8(vec, 'U', vlen), vlen);\n\n        vbool8_t is_even_index = __riscv_vmand_mm_b8(__riscv_vmsle_vx_i8m1_b8(__riscv_vand_vx_i8m1(vec, 1, vlen), 0, vlen),\n                                                     __riscv_vmsne_vx_i8m1_b8(vec, 0, vlen),\n                                                     vlen);\n\n        vbool8_t combined_mask = __riscv_vmand_mm_b8(is_upper_vowel, is_even_index, vlen);\n\n        count += __riscv_cpop_m_b8(combined_mask, vlen);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n\n    size_t vl = 0;\n    vint32m1_t v_n = _rvv_set_int32m1(n, 1);\n    vint32m1_t v_inc = _rvv_set_int32m1(2, 1);\n    vint32m1_t v_i = _rvv_set_int32m1(0, 1);\n\n    for (int i = 0; i < n; ++i) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_result = _rvv_vmul_int32m1(v_n, v_inc, vl);\n        _rvv_vstore_int32m1(&pile[i], v_result, vl);\n        v_n = _rvv_vadd_int32m1(v_n, v_inc, vl);\n    }\n\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n\n    size_t vl = 0;\n    vint32m1_t v_n = _rvv_set_int32m1(n, 1);\n    vint32m1_t v_inc = _rvv_set_int32m1(2, 1);\n    vint32m1_t v_result = _rvv_set_int32m1(n, 1);\n\n    for (int i = 0; i < n; ++i) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        v_result = _rvv_add_int32m1(v_result, v_inc, vl);\n        _rvv_store_int32m1(&pile[i], v_result, vl);\n    }\n\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n\n    size_t vl = 0;\n    vint32m1_t v_n = _rvv_set_int32m1(n, 1);\n    vint32m1_t v_inc = _rvv_set_int32m1(2, 1);\n    vint32m1_t v_i = _rvv_set_int32m1(0, 1);\n\n    for (int i = 0; i < n; ++i) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_result = _rvv_add_int32m1(v_n, _rvv_mul_int32m1(v_i, v_inc, vl), vl);\n        _rvv_store_int32m1(&pile[i], v_result, vl);\n        v_i = _rvv_add_int32m1(v_i, _rvv_set_int32m1(1, 1), vl);\n    }\n\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n\n    size_t vl = 0;\n    vint32m1_t v_n = _rvv_set_int32m1(n, 1);\n    vint32m1_t v_inc = _rvv_set_int32m1(2, 1);\n    vint32m1_t v_i = _rvv_set_int32m1(0, 1);\n\n    for (int i = 0; i < n; ++i) {\n        vl = __riscv_vsetvl_e32m1(n - i);\n        vint32m1_t v_result = _rvv_vmul_int32m1(v_n, v_inc, vl);\n        _rvv_vstore_int32m1(&pile[i], v_result, vl);\n        v_n = _rvv_vadd_int32m1(v_n, v_inc, vl);\n    }\n\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n\n    size_t vlen = 4;  // Example vector length, adjust as needed\n    size_t i = 0;\n\n    for (; i + vlen <= n; i += vlen) {\n        vint32m1_t v_base = _rvv_set_int32m1(n + 2 * i, vlen);\n        vint32m1_t v_inc = _rvv_splats_int32m1(2, vlen);\n        vint32m1_t v_index = _rvv_fmadd_int32m1(v_inc, _rvv_set_int32m1(i, vlen), v_base, vlen);\n\n        _rvv_store_int32m1(&pile[i], v_index, vlen);\n    }\n\n    for (; i < n; ++i) {\n        pile[i] = n + 2 * i;\n    }\n\n    return pile;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    size_t vector_length = 8;\n    size_t count = m - n + 1;\n    size_t iterations = count / vector_length + (count % vector_length != 0);\n\n    int64_t sum = 0;\n    vint64m1_t v_sum = _rvv_init_vint64m1(0);\n\n    for (size_t i = 0; i < iterations; ++i) {\n        size_t chunk_size = (i == iterations - 1 && count % vector_length != 0) ? count % vector_length : vector_length;\n        vint64m1_t v_chunk = _rvv_load_v_vint64m1(&n + i * vector_length, chunk_size);\n        v_sum = _rvv_add_vv_vint64m1(v_sum, v_chunk, chunk_size);\n    }\n\n    sum = _rvv_reduce_add_vs_vint64m1_vint64m1(sum, v_sum, count);\n    int64_t avg = std::floor(static_cast<double>(sum) / count);\n\n    std::string binary = \"\";\n    if (avg == 0) return \"0\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    size_t vector_length = 8; // Assuming vector length of 8 for this example\n    size_t num_elements = m - n + 1;\n    size_t num_iterations = (num_elements + vector_length - 1) / vector_length;\n\n    int64_t sum = 0;\n    vint64m1_t v_sum = _rvv_splats_x_v_i64m1(0, 1);\n\n    for (size_t i = 0; i < num_iterations; ++i) {\n        size_t start = n + i * vector_length;\n        size_t end = std::min(n + (i + 1) * vector_length, m + 1);\n        size_t current_length = end - start;\n\n        vint64m1_t v_data = _rvv_load_v_i64m1(&start, current_length);\n        v_sum = _rvv_add_vv_i64m1(v_sum, v_data, current_length);\n    }\n\n    sum = _rvv_reduce_add_vs_i64m1_i64(v_sum, sum, num_elements);\n    int64_t avg = std::floor(static_cast<double>(sum) / num_elements);\n\n    std::string binary_result = \"\";\n    if (avg == 0) return \"0\";\n\n    while (avg > 0) {\n        binary_result = (avg % 2 == 0 ? \"0\" : \"1\") + binary_result;\n        avg /= 2;\n    }\n\n    return binary_result;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    size_t vector_length = 8; // Assuming vector length of 8 for this example\n    size_t num_elements = m - n + 1;\n    size_t num_iterations = (num_elements + vector_length - 1) / vector_length;\n\n    int64_t sum = 0;\n    vint64m1_t v_sum = _rvv_fmv_s_x_i64m1(0, 64);\n\n    for (size_t i = 0; i < num_iterations; ++i) {\n        size_t chunk_size = std::min(vector_length, num_elements - i * vector_length);\n        vint64m1_t v_chunk = _rvv_lv_x_i64m1(n + i * vector_length, 64);\n        v_sum = _rvv_vadd_vv_i64m1(v_sum, v_chunk, 64);\n    }\n\n    sum = _rvv_fmv_x_s_i64m1_i64(v_sum);\n    int64_t avg = std::floor(static_cast<double>(sum) / num_elements);\n\n    std::string binary_result = \"\";\n    while (avg > 0) {\n        binary_result = (avg % 2 == 0 ? \"0\" : \"1\") + binary_result;\n        avg /= 2;\n    }\n\n    return binary_result.empty() ? \"0\" : binary_result;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <string>\n#include <cmath>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    size_t vector_length = 8;\n    size_t count = m - n + 1;\n    size_t num_vectors = (count + vector_length - 1) / vector_length;\n\n    int64_t sum = 0;\n    vint64m1_t v_sum = _rvv_fmv_v_x_i64m1(0, 1);\n\n    for (size_t i = 0; i < num_vectors; ++i) {\n        size_t chunk_size = (i == num_vectors - 1) ? (count % vector_length) : vector_length;\n        if (chunk_size == 0) chunk_size = vector_length;\n\n        vint64m1_t v_n = _rvv_fmv_v_x_i64m1(n + i * vector_length, chunk_size);\n        vint64m1_t v_inc = _rvv_fmv_v_x_i64m1(1, chunk_size);\n        v_n = _rvv_vadd_vv_i64m1(v_n, _rvv_vmul_vx_i64m1(v_inc, i * vector_length, chunk_size), chunk_size);\n\n        v_sum = _rvv_vadd_vv_i64m1(v_sum, v_n, chunk_size);\n    }\n\n    sum = _rvv_fmv_x_s_i64m1_i64(v_sum);\n    int64_t avg = std::floor(static_cast<double>(sum) / count);\n\n    std::string binary_str = \"\";\n    while (avg > 0) {\n        binary_str = (avg % 2 == 0 ? \"0\" : \"1\") + binary_str;\n        avg /= 2;\n    }\n\n    return binary_str.empty() ? \"0\" : binary_str;\n}\n```"}
{"task_id": "SimdBench_111_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    size_t vector_length = 8;\n    size_t count = m - n + 1;\n    size_t num_iterations = (count + vector_length - 1) / vector_length;\n\n    int64_t sum = 0;\n    vint64m1_t v_sum = _rvv_init_vint64m1(0);\n\n    for (size_t i = 0; i < num_iterations; ++i) {\n        size_t chunk_size = (i == num_iterations - 1) ? (count % vector_length) : vector_length;\n        if (chunk_size == 0) chunk_size = vector_length;\n\n        vint64m1_t v_n = _rvv_init_vint64m1(n + i * vector_length);\n        vint64m1_t v_seq = _rvv_add_vx_vint64m1(v_n, i * vector_length, chunk_size);\n\n        v_sum = _rvv_add_vv_vint64m1(v_sum, v_seq, chunk_size);\n    }\n\n    sum = _rvv_reduce_add_vs_vint64m1_vint64m1(sum, v_sum, sum);\n    int64_t avg = std::floor(static_cast<double>(sum) / count);\n\n    std::string binary_result = \"\";\n    while (avg > 0) {\n        binary_result = (avg % 2 == 0 ? \"0\" : \"1\") + binary_result;\n        avg /= 2;\n    }\n\n    return binary_result.empty() ? \"0\" : binary_result;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    size_t vlen = 0;\n\n    vint32m1_t v_i, v_fact, v_sum;\n    vint32m1_t v_one = _rvv_set_int32m1(1, vlen);\n    vint32m1_t v_two = _rvv_set_int32m1(2, vlen);\n    vint32m1_t v_mod = _rvv_set_int32m1(10000, vlen);\n\n    for (int i = 1; i <= n; i += vlen) {\n        vlen = n - i + 1 < vlen ? n - i + 1 : vlen;\n        v_i = _rvv_set_int32m1_ramp(i, 1, vlen);\n\n        vbool32_t v_mask_even = _rvv_msk_cmp_int32m1(v_i, v_two, RVV_REM, RVV_EQ, vlen);\n        vbool32_t v_mask_odd = _rvv_msk_not_int32m1(v_mask_even, vlen);\n\n        v_fact = _rvv_mul_int32m1(v_i, _rvv_sub_int32m1(v_i, v_one, vlen), vlen);\n        v_fact = _rvv_rem_int32m1(v_fact, v_mod, vlen);\n\n        v_sum = _rvv_mul_int32m1(_rvv_add_int32m1(v_i, v_one, vlen), _rvv_div_int32m1(_rvv_add_int32m1(_rvv_mul_int32m1(v_i, _rvv_add_int32m1(v_i, v_one, vlen), vlen), v_one, vlen), v_two, vlen), vlen);\n\n        v_fact = _rvv_merge_int32m1(v_fact, v_sum, v_mask_odd, vlen);\n\n        _rvv_scatter_int32m1(&result[i-1], v_fact, sizeof(int), vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    vint32m1_t v_fact = _rvv_splats_32m1(1);\n    vint32m1_t v_sum = _rvv_splats_32m1(1);\n    vint32m1_t v_i = _rvv_splats_32m1(1);\n    vint32m1_t v_mod = _rvv_splats_32m1(10000);\n\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            v_fact = _rvv_vmul_vv_32m1(v_fact, _rvv_splats_32m1(i), 1);\n            vint32m1_t v_fact_mod = _rvv_vrem_vv_32m1(v_fact, v_mod, 1);\n            result[i-1] = _rvv_vmv_x_s_i32m1_i32(v_fact_mod);\n        } else {\n            v_sum = _rvv_vadd_vv_32m1(v_sum, _rvv_splats_32m1(i), 1);\n            result[i-1] = _rvv_vmv_x_s_i32m1_i32(v_sum);\n        }\n        v_i = _rvv_vadd_vx_32m1(v_i, 1, 1);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    vint32m1_t v_fact = _vcreate_i32m1(1);\n    vint32m1_t v_sum = _vcreate_i32m1(1);\n    vint32m1_t v_one = _vcreate_i32m1(1);\n    vint32m1_t v_i = _vcreate_i32m1(1);\n    vint32m1_t v_mod = _vcreate_i32m1(10000);\n\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            v_fact = _vmul_vv_i32m1(v_fact, v_i, 1);\n            vint32m1_t v_fact_mod = _vrem_vv_i32m1(v_fact, v_mod, 1);\n            result[i-1] = _vget_i32m1_i32m1(v_fact_mod, 0);\n        } else {\n            v_sum = _vadd_vv_i32m1(v_sum, v_i, 1);\n            result[i-1] = _vget_i32m1_i32m1(v_sum, 0);\n        }\n        v_i = _vadd_vx_i32m1(v_i, 1, 1);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    int factorial = 1;\n    int sum = 0;\n\n    vint32m1_t v_factorial = _rvv_set_v_i32m1(1, 1);\n    vint32m1_t v_sum = _rvv_set_v_i32m1(0, 0);\n\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            factorial = (factorial * i) % 10000;\n            result[i - 1] = factorial;\n        } else {\n            sum += i;\n            result[i - 1] = sum;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    size_t vlen = 0;\n\n    vint32m1_t v_even_mask = __riscv_vmv_v_x_i32m1(0, 1);\n    vint32m1_t v_odd_mask = __riscv_vmv_v_x_i32m1(0, 0);\n\n    for (int i = 1; i <= n; i += vlen) {\n        vlen = __riscv_vsetvl_e32m1(n - i + 1);\n        vint32m1_t v_i = __riscv_vadd_vx_i32m1(__riscv_vmv_v_x_i32m1(i, vlen), __riscv_vfrsub_vf_i32m1(v_i, v_i, vlen), vlen);\n\n        vbool32_t mask_even = __riscv_vmand_mm_b32(__riscv_vmseq_vx_i32m1_b32(v_i, 0, vlen), v_even_mask, vlen);\n        vbool32_t mask_odd = __riscv_vmand_mm_b32(__riscv_vmseq_vx_i32m1_b32(v_i, 1, vlen), v_odd_mask, vlen);\n\n        vint32m1_t v_fact = __riscv_vmv_v_x_i32m1(1, vlen);\n        vint32m1_t v_sum = __riscv_vmv_v_x_i32m1(0, vlen);\n\n        for (int j = 1; j <= i; ++j) {\n            v_fact = __riscv_vmul_vx_i32m1(v_fact, j, vlen);\n            v_sum = __riscv_vadd_vx_i32m1(v_sum, j, vlen);\n        }\n\n        vint32m1_t v_result_even = __riscv_vrem_vx_i32m1(v_fact, 10000, vlen);\n        vint32m1_t v_result_odd = v_sum;\n\n        vint32m1_t v_result = __riscv_vmerge_vvm_i32m1(v_result_odd, v_result_even, mask_even, vlen);\n\n        __riscv_vse32_v_i32m1(result.data() + i - 1, v_result, vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    size_t vector_bits = 128;\n    size_t vlen =  __riscv_vsetvl_e16m1(vector_bits);\n\n    vint16m1_t v_start = __riscv_vmv_v_x_i16m1(1, vlen);\n    vint16m1_t v_end = __riscv_vmv_v_x_i16m1(n, vlen);\n    vint16m1_t v_step = __riscv_vmv_v_x_i16m1(1, vlen);\n\n    for (vint16m1_t v_i = v_start; __riscv_vmslt_vv_i16m1_b(v_i, v_end); v_i = __riscv_vadd_vv_i16m1(v_i, v_step)) {\n        vbool16_t mask = __riscv_vmseq_vv_i16m1_b(v_i, __riscv_vrev_i16m1(v_i));\n\n        vint16m1_t v_even = __riscv_vand_vv_i16m1(v_i, __riscv_vmv_v_x_i16m1(1, vlen), vlen);\n        vint16m1_t v_odd = __riscv_vxor_vv_i16m1(v_i, __riscv_vmv_v_x_i16m1(1, vlen), vlen);\n\n        even_count += __riscv_vcpop_m_b(mask, __riscv_vmseq_vv_i16m1_b(v_even, __riscv_vmv_v_x_i16m1(0, vlen)));\n        odd_count += __riscv_vcpop_m_b(mask, __riscv_vmseq_vv_i16m1_b(v_odd, __riscv_vmv_v_x_i16m1(1, vlen)));\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    size_t vector_bits = 128;\n    size_t vlen =  __riscv_vsetvl_e32m1(vector_bits);\n\n    vint32m1_t v_i = __riscv_vmv_v_x_i32m1(1, vlen);\n    vbool32_t mask = __riscv_vmslt_vx_i32m1_b32(v_i, n + 1, vlen);\n\n    while (__riscv_vfirst_m_b32(mask, vlen) != -1) {\n        vint32m1_t v_num = __riscv_vadd_vx_i32m1(v_i, 1, vlen);\n        vint32m1_t v_rev = __riscv_vrev8_i32m1(v_num, vlen);\n\n        vbool32_t v_palindrome_mask = __riscv_vmseq_vv_i32m1_b32(v_num, v_rev, vlen);\n        vbool32_t v_even_mask = __riscv_vmsle_vx_i32m1_b32(__riscv_vand_vx_i32m1(v_num, 1, vlen), 0, vlen);\n        vbool32_t v_odd_mask = __riscv_vmsgt_vx_i32m1_b32(__riscv_vand_vx_i32m1(v_num, 1, vlen), 0, vlen);\n\n        even_count += __riscv_vcpop_m_b32(__riscv_vand_mm_b32(v_palindrome_mask, v_even_mask, vlen), vlen);\n        odd_count += __riscv_vcpop_m_b32(__riscv_vand_mm_b32(v_palindrome_mask, v_odd_mask, vlen), vlen);\n\n        v_i = __riscv_vadd_vx_i32m1(v_i, vlen, vlen);\n        mask = __riscv_vmslt_vx_i32m1_b32(v_i, n + 1, vlen);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    size_t vector_bits = 128;\n    size_t vlen =  __riscv_vsetvl_e32m1(vector_bits);\n\n    vint32m1_t v_i = __riscv_vmv_v_x_i32m1(1, vlen);\n    vbool32_t mask = __riscv_vmslt_vx_i32m1_b32(v_i, n + 1, vlen);\n\n    while (__riscv_vfirst_m_b32(mask, vlen) != -1) {\n        vint32m1_t v_num = __riscv_vadd_vx_i32m1(v_i, 1, vlen);\n        v_i = v_num;\n\n        vint32m1_t v_rev = __riscv_vrev8_v_i32m1(v_num, vlen);\n        vbool32_t v_palindrome_mask = __riscv_vmseq_vv_i32m1_b32(v_num, v_rev, vlen);\n\n        vbool32_t v_even_mask = __riscv_vmsne_vx_i32m1_b32(v_num, 0, vlen);\n        vbool32_t v_odd_mask = __riscv_vmseq_vx_i32m1_b32(__riscv_vand_vx_i32m1(v_num, 1, vlen), 1, vlen);\n\n        even_count += __riscv_vcpop_m_b32(__riscv_vand_mm_b32(v_palindrome_mask, v_even_mask, vlen), vlen);\n        odd_count += __riscv_vcpop_m_b32(__riscv_vand_mm_b32(v_palindrome_mask, v_odd_mask, vlen), vlen);\n\n        mask = __riscv_vmslt_vx_i32m1_b32(v_i, n + 1, vlen);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cstring>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    size_t vlen = 0;\n    vlen = vsetvl_e8m1(n);\n\n    vint8m1_t v_i, v_j, v_temp;\n    vbool8_t v_mask, v_mask_even, v_mask_odd;\n\n    for (int i = 1; i <= n; i += vlen) {\n        size_t vl = vsetvl_e8m1(n - i + 1);\n\n        v_i = vle8_v_i8m1(&i, vl);\n        v_j = vrev8_v_i8m1(v_i, vl);\n\n        v_mask = vmseq_vx_i8m1_b8(v_i, v_j, vl);\n\n        v_mask_even = vmand_mm_b8(v_mask, vmand_mm_b8(vmsne_vx_i8m1_b8(v_i, 0, vl), vmsne_vx_i8m1_b8(vand_vx_i8m1_i8m1(v_i, 1, vl), 0, vl)));\n        v_mask_odd = vmand_mm_b8(v_mask, vmand_mm_b8(vmsne_vx_i8m1_b8(v_i, 0, vl), vmsne_vx_v_i8m1_b8(vand_vx_i8m1_i8m1(v_i, 1, vl), 0, vl)));\n\n        even_count += vcpop_m_b8(v_mask_even, vl);\n        odd_count += vcpop_m_b8(v_mask_odd, vl);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cstring>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    size_t vlen = 0;\n    vlen = __riscv_vsetvl_e32m1(1);\n\n    vint32m1_t v_i = __riscv_vmv_v_x_i32m1(1, 1);\n    vbool32_t mask = __riscv_vmslt_vx_i32m1_b32(v_i, n, vlen);\n\n    while (__riscv_vfirst_m_b32(mask, vlen) != -1) {\n        vint32m1_t v_num = __riscv_vadd_vx_i32m1(v_i, 1, vlen);\n        vint32m1_t v_rev = __riscv_vrev8_i32m1(v_num, vlen);\n\n        vbool32_t v_palindrome_mask = __riscv_vmseq_vv_i32m1_b32(v_num, v_rev, vlen);\n        vbool32_t v_even_mask = ~(__riscv_vand_vx_i32m1_b32(v_num, 1, vlen)) & v_palindrome_mask;\n        vbool32_t v_odd_mask = __riscv_vand_vx_i32m1_b32(v_num, 1, vlen) & v_palindrome_mask;\n\n        even_count += __riscv_vcpop_m_b32(v_even_mask, vlen);\n        odd_count += __riscv_vcpop_m_b32(v_odd_mask, vlen);\n\n        v_i = __riscv_vadd_vx_i32m1(v_i, vlen, vlen);\n        mask = __riscv_vmslt_vx_i32m1_b32(v_i, n, vlen);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < n.size(); i += vlmax) {\n        vint32m1_t v_n = vle32_v_i32m1(&n[i], vlmax);\n        vint32m1_t v_sum_digits = vxor_vv_i32m1(v_n, v_n); // Initialize sum_digits vector to 0\n\n        // Calculate sum of digits for each element in the vector\n        for (size_t j = 0; j < vlmax; ++j) {\n            int num = n[i + j];\n            int sum_digits = 0;\n            bool is_negative = num < 0;\n            num = abs(num);\n            while (num > 0) {\n                sum_digits += num % 10;\n                num /= 10;\n            }\n            if (is_negative) {\n                sum_digits = -sum_digits;\n            }\n            v_sum_digits = vset_v_i32m1_i32m1(v_sum_digits, j, sum_digits);\n        }\n\n        // Count elements with sum of digits > 0\n        vbool32_t mask = vmfgt_vx_i32m1_b32(v_sum_digits, 0);\n        count += vcpop_m_b32(mask);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < n.size(); i += vlmax) {\n        size_t vl = vsetvl_e32m1(n.size() - i);\n\n        vint32m1_t v_n = vle32_v_i32m1(&n[i], vl);\n        vint32m1_t v_sum_digits = vxor_vv_i32m1(v_n, v_n, vl); // Initialize with zero\n\n        // Calculate sum of digits for each element in the vector\n        for (size_t j = 0; j < vl; ++j) {\n            int num = n[i + j];\n            int sum_digits = 0;\n            bool is_negative = num < 0;\n            num = abs(num);\n            while (num > 0) {\n                sum_digits += num % 10;\n                num /= 10;\n            }\n            if (is_negative) {\n                sum_digits = -sum_digits;\n            }\n            v_sum_digits = vset_v_i32m1_i32m1(v_sum_digits, j, sum_digits, vl);\n        }\n\n        vbool32_t mask = vmfgt_vx_i32m1_b32(v_sum_digits, 0, vl); // Mask where sum of digits > 0\n        count += vcpop_m_b32(mask, vl); // Count true elements in the mask\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < n.size(); i += vlmax) {\n        size_t vl = vsetvl_e32m1(n.size() - i);\n\n        vint32m1_t v_n = vle32_v_i32m1(&n[i], vl);\n        vint32m1_t v_sum_digits = vxor_vv_i32m1(v_n, v_n, vl);\n\n        vbool32_t mask = vmfeq_vv_i32m1_b32(v_sum_digits, 0, vl);\n        vint32m1_t v_mask = vmerge_vvm_i32m1(v_mask, v_n, 1, vl);\n\n        count += vcpop_m_b32(v_mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < n.size(); i += vlmax) {\n        size_t vl = vsetvl_e32m1(n.size() - i);\n        vint32m1_t v_n = vle32_v_i32m1(&n[i], vl);\n        vint32m1_t v_sum_digits = vxor_vv_i32m1(v_n, v_n); // Initialize sum_digits to 0\n\n        // Calculate sum of digits for each element in the vector\n        for (size_t j = 0; j < vl; ++j) {\n            int num = n[i + j];\n            int sum_digits = 0;\n            bool is_negative = num < 0;\n\n            num = abs(num);\n            while (num > 0) {\n                sum_digits += num % 10;\n                num /= 10;\n            }\n\n            if (is_negative) {\n                sum_digits = -sum_digits;\n            }\n\n            v_sum_digits = vset_v_i32m1_i32m1(v_sum_digits, j, sum_digits);\n        }\n\n        // Count elements with sum of digits > 0\n        vbool1_t mask = vmfgt_vx_i32m1_b1(v_sum_digits, 0, vl);\n        count += vcpop_m_b1(mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < n.size(); i += vlmax) {\n        size_t vl = __riscv_vsetvl_e32m1(n.size() - i);\n\n        vint32m1_t v_n = __riscv_vle32_v_i32m1(&n[i], vl);\n        vint32m1_t v_sum_digits = __riscv_vmv_v_x_i32m1(0, vl);\n\n        // Calculate the sum of digits for each element in the vector\n        vbool32_t mask = __riscv_vmseq_vx_i32m1_b32(v_n, 0, vl);\n        vint32m1_t v_abs_n = __riscv_vmsgt_vx_i32m1_b32(v_n, 0, vl);\n        v_abs_n = __riscv_vmerge_vvm_i32m1(v_n, __riscv_vneg_v_i32m1(v_n, vl), mask, vl);\n\n        vint32m1_t v_digits = __riscv_vmsgt_vx_i32m1_b32(v_abs_n, 9, vl);\n        v_digits = __riscv_vmerge_vvm_i32m1(v_abs_n, __riscv_vsadd_vx_i32m1(v_abs_n, -10, vl), v_digits, vl);\n        v_sum_digits = __riscv_vadd_vv_i32m1(v_sum_digits, v_digits, vl);\n\n        vint32m1_t v_sum_digits_gt_0 = __riscv_vmsgt_vx_i32m1_b32(v_sum_digits, 0, vl);\n        count += __riscv_vcpop_m_b32(v_sum_digits_gt_0, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n == 0) return true;\n\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n\n    size_t vl = 0;\n    vint32m1_t v_arr, v_sorted_arr;\n    vbool32_t v_mask;\n\n    for (size_t i = 0; i < n; ++i) {\n        vl = vsetvl_e32m1(n);\n        v_arr = vle32_v_i32m1(&arr[0], vl);\n        v_sorted_arr = vle32_v_i32m1(&sorted_arr[0], vl);\n        v_mask = vmseq_vv_i32m1_b32(v_arr, v_sorted_arr, vl);\n\n        if (vfirst_m_b32(v_mask, vl) != -1) {\n            return true;\n        }\n\n        std::rotate(arr.rbegin(), arr.rbegin() + 1, arr.rend());\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    size_t n = arr.size();\n    size_t vlen = 128 / 8; // Assuming 128-bit vector registers\n    size_t i;\n\n    // Check if the original array is sorted\n    bool sorted = true;\n    for (i = 0; i < n - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            sorted = false;\n            break;\n        }\n    }\n    if (sorted) return true;\n\n    // Check all possible shifts\n    for (size_t shift = 1; shift < n; ++shift) {\n        bool is_sorted = true;\n\n        // Use RVV intrinsics to check if the shifted array is sorted\n        for (i = 0; i < n - 1; i += vlen) {\n            size_t chunk_size = std::min(vlen, n - i - 1);\n            vint32m1_t vec1 = vle32_v_i32m1(&arr[(i + shift) % n], chunk_size);\n            vint32m1_t vec2 = vle32_v_i32m1(&arr[(i + shift + 1) % n], chunk_size);\n            vbool32_t mask = vmslt_vv_i32m1_b32(vec1, vec2);\n\n            if (!vfirst_m_b32(mask, chunk_size)) {\n                is_sorted = false;\n                break;\n            }\n        }\n\n        if (is_sorted) return true;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    if (n == 0) return true;\n\n    size_t vlen = 128 / 8; // Assuming 128-bit vector registers\n    size_t i;\n    vint32m1_t v0, v1, v2;\n\n    // Check if the original array is sorted\n    for (i = 0; i < n - 1; i++) {\n        if (arr[i] > arr[i + 1]) break;\n    }\n    if (i == n - 1) return true;\n\n    // Check all possible shifts\n    for (size_t shift = 1; shift < n; ++shift) {\n        bool sorted = true;\n        for (i = 0; i < n - 1; i++) {\n            if (arr[(i + shift) % n] > arr[(i + shift + 1) % n]) {\n                sorted = false;\n                break;\n            }\n        }\n        if (sorted) return true;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    size_t n = arr.size();\n    size_t vl = 0;\n\n    // Check if the array is already sorted\n    bool is_sorted = std::is_sorted(arr.begin(), arr.end());\n    if (is_sorted) return true;\n\n    // Create a copy of the original array to perform shifts\n    std::vector<int> shifted_arr = arr;\n\n    for (size_t i = 1; i < n; ++i) {\n        // Perform right shift operation\n        std::rotate(shifted_arr.rbegin(), shifted_arr.rbegin() + 1, shifted_arr.rend());\n\n        // Check if the shifted array is sorted\n        is_sorted = std::is_sorted(shifted_arr.begin(), shifted_arr.end());\n        if (is_sorted) return true;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_115_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <algorithm>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    size_t n = arr.size();\n    size_t vl = 0;\n\n    // Find the vector length\n    vl = __riscv_vsetvl_e32m1(n);\n\n    // Load the array into a vector register\n    vint32m1_t v0 = __riscv_vle32_v_i32m1(arr.data(), vl);\n\n    // Check if the array is already sorted\n    bool sorted = true;\n    for (size_t i = 1; i < n; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            sorted = false;\n            break;\n        }\n    }\n    if (sorted) return true;\n\n    // Perform right shift operations and check for sorted order\n    for (size_t shift = 1; shift < n; ++shift) {\n        // Perform right shift operation\n        std::rotate(arr.rbegin(), arr.rbegin() + 1, arr.rend());\n\n        // Load the shifted array into a vector register\n        v0 = __riscv_vle32_v_i32m1(arr.data(), vl);\n\n        // Check if the shifted array is sorted\n        sorted = true;\n        for (size_t i = 1; i < n; ++i) {\n            if (arr[i] < arr[i - 1]) {\n                sorted = false;\n                break;\n            }\n        }\n        if (sorted) return true;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n\n    bool possible = true;\n    for (size_t i = 0; i < n; i += vlmax) {\n        size_t vl = __riscv_vsetvl_e32m1(n - i);\n\n        vint32m1_t v1 = __riscv_vle32_v_i32m1(&lst1[i], vl);\n        vint32m1_t v2 = __riscv_vle32_v_i32m1(&lst2[i], vl);\n\n        vbool32_t mask1 = __riscv_vmseq_vx_i32m1_b32(v1, 1, vl);\n        vbool32_t mask2 = __riscv_vmseq_vx_i32m1_b32(v2, 1, vl);\n\n        vbool32_t result = __riscv_vor_vv_b32(mask1, mask2, vl);\n\n        uint32_t reduced = __riscv_vfirst_m_b32(result, vl);\n        if (reduced != vl) {\n            possible = false;\n            break;\n        }\n    }\n\n    return possible ? \"YES\" : \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t vlen = 8; // Vector length\n    size_t n1 = lst1.size();\n    size_t n2 = lst2.size();\n    size_t i;\n\n    bool all_even_possible = true;\n\n    for (i = 0; i < n1 - (n1 % vlen); i += vlen) {\n        vint32m1_t v1 = vle32_v_i32m1(&lst1[i], vlen);\n        vbool32_t mask_even = __riscv_vmfeq_vv_i32m1_b32(v1, 1);\n\n        if (__riscv_vmfirst_m_b32(mask_even, v1) != -1) {\n            all_even_possible = false;\n            break;\n        }\n    }\n\n    for (; i < n1; ++i) {\n        if (lst1[i] % 2 != 0) {\n            all_even_possible = false;\n            break;\n        }\n    }\n\n    if (!all_even_possible) {\n        for (i = 0; i < n2 - (n2 % vlen); i += vlen) {\n            vint32m1_t v2 = vle32_v_i32m1(&lst2[i], vlen);\n            vbool32_t mask_odd = __riscv_vmfeq_vv_i32m1_b32(v2, 1);\n\n            if (__riscv_vmfirst_m_b32(mask_odd, v2) != -1) {\n                all_even_possible = true;\n                break;\n            }\n        }\n\n        for (; i < n2; ++i) {\n            if (lst2[i] % 2 != 0) {\n                all_even_possible = true;\n                break;\n            }\n        }\n    }\n\n    return all_even_possible ? \"YES\" : \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t vlen = 8; // Vector length\n    size_t n1 = lst1.size();\n    size_t n2 = lst2.size();\n    size_t i = 0;\n    size_t j = 0;\n\n    bool possible = true;\n\n    for (; i <= n1 - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsne_vx_i32m1_b8(__riscv_vle32_v_i32m1(lst1.data() + i, vlen), 0, vlen);\n        if (__riscv_vpfirst_m_b8(mask, vlen) != vlen) {\n            possible = false;\n            break;\n        }\n    }\n\n    for (; j <= n2 - vlen; j += vlen) {\n        vbool8_t mask = __riscv_vmsne_vx_i32m1_b8(__riscv_vle32_v_i32m1(lst2.data() + j, vlen), 0, vlen);\n        if (__riscv_vpfirst_m_b8(mask, vlen) != vlen) {\n            possible = true;\n            break;\n        }\n    }\n\n    for (; i < n1; ++i) {\n        if (lst1[i] % 2 != 0) {\n            possible = false;\n            break;\n        }\n    }\n\n    for (; j < n2; ++j) {\n        if (lst2[j] % 2 == 0) {\n            possible = true;\n            break;\n        }\n    }\n\n    return possible ? \"YES\" : \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t vlen = 8; // Assuming vector length of 8 for this example\n    size_t n = lst1.size();\n\n    bool possible = true;\n    size_t i = 0;\n\n    for (; i <= n - vlen; i += vlen) {\n        vbool8_t mask = __riscv_vmsgt_vx_i32m1_b8(__riscv_vle32_v_i32m1(lst1.data() + i, vlen), 0, vlen);\n        if (__riscv_vpopleft_m_b8(mask, vlen) == vlen) {\n            possible = false;\n            break;\n        }\n    }\n\n    for (; i < n; ++i) {\n        if (lst1[i] % 2 != 0 && lst2[i] % 2 != 0) {\n            possible = false;\n            break;\n        }\n    }\n\n    return possible ? \"YES\" : \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n\n    bool has_odd_lst1 = false;\n    bool has_even_lst2 = false;\n\n    for (size_t i = 0; i < n; i += vlmax) {\n        size_t vl = __riscv_vsetvl_e32m1(n - i);\n\n        vint32m1_t v1 = __riscv_vle32_v_i32m1(&lst1[i], vl);\n        vint32m1_t v2 = __riscv_vle32_v_i32m1(&lst2[i], vl);\n\n        vbool32_t mask_odd_lst1 = __riscv_vmand_mm_b32_m1(__riscv_vmsbf_m_b32_m1(v1, 0, vl), __riscv_vmsif_m_b32_m1(v1, 1, vl), vl);\n        vbool32_t mask_even_lst2 = __riscv_vmandn_mm_b32_m1(__riscv_vmsbf_m_b32_m1(v2, 0, vl), __riscv_vmsif_m_b32_m1(v2, 1, vl), vl);\n\n        has_odd_lst1 |= __riscv_vmfirst_m_b32_m1(mask_odd_lst1, vl) != -1;\n        has_even_lst2 |= __riscv_vmfirst_m_b32_m1(mask_even_lst2, vl) != -1;\n    }\n\n    if (has_odd_lst1 && has_even_lst2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto &str : lst) {\n        size_t length = str.length();\n        size_t vlen = vsetvl_e8m1(length);\n        vuint8m1_t v_str = vle8_v_u8m1(str.c_str(), vlen);\n        vuint8m1_t v_odd_mask = vmseq_vx_u8m1_b(v_str, '1', vlen) | vmseq_vx_u8m1_b(v_str, '3', vlen) |\n                                vmseq_vx_u8m1_b(v_str, '5', vlen) | vmseq_vx_u8m1_b(v_str, '7', vlen) |\n                                vmseq_vx_u8m1_b(v_str, '9', vlen);\n        size_t odd_count = vcpop_m_b_u8m1_u8(v_odd_mask, vlen);\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto &str : lst) {\n        size_t count = 0;\n        size_t length = str.length();\n        size_t vlen = vsetvl_e8m1(length);\n\n        for (size_t i = 0; i < length; i += vlen) {\n            vuint8m1_t v = vle8_v_u8m1(str.data() + i, vlen);\n            vbool8_t mask = vmsbf_m_b8(v, 0x1);\n            count += vcpop_m_b8(mask);\n        }\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(count) + \"n the str\";\n        output += std::to_string(count) + \"ng \";\n        output += std::to_string(count) + \" of the \";\n        output += std::to_string(count) + \"nput.\";\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> &lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto &str : lst) {\n        size_t count = 0;\n        size_t length = str.length();\n        size_t vlen = vsetvl_e8m1(length);\n\n        for (size_t i = 0; i < length; i += vlen) {\n            vuint8m1_t v = vle8_v_u8m1(&str[i], vlen);\n            vuint8m1_t odd_mask = vmsgt_vx_u8m1_u8m1(v, 0x30, vlen);\n            vuint8m1_t odd_count = vcpop_m_u8m1(vlen, odd_mask, vlen);\n            count += vmv_x_s_u32m1_u32m1(vcpop_m_u32m1(vlen, odd_count, vlen));\n        }\n\n        result.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std<std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t length = str.length();\n        size_t vlen = vsetvl_e8m1(length);\n        vuint8m1_t v_digits = vle8_v_u8m1(&str[0], vlen);\n\n        vuint8m1_t v_odd_mask = vle8_v_u8m1(\"\\1\\0\\1\\0\\1\\0\\1\\0\\1\\0\\1\\0\", vlen);\n        vuint8m1_t v_odd_digits = vand_vv_u8m1(v_digits, v_odd_mask);\n\n        vuint8m1_t v_odd_count = vmsne_vx_u8m1_b_tu(v_odd_digits, 0, vlen);\n        size_t odd_count = vfirst_m_u8m1(v_odd_count, v_odd_count);\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto &str : lst) {\n        size_t length = str.length();\n        size_t vl = 0;\n        size_t odd_count = 0;\n\n        size_t i = 0;\n        for (; i <= length - vsetvl_e8m1(vl); i += vl) {\n            vl = vsetvl_e8m1(length - i);\n            vuint8m1_t v = vle8_v_u8m1(&str[i], vl);\n            vuint8m1_t odd_mask = vmsgt_vx_u8m1_u8m1(v, 0x30, vl); // Check if digit is greater than '0'\n            odd_mask = vand_vx_u8m1_u8m1(odd_mask, 0x1, vl); // Check if digit is odd\n            odd_count += vcpop_m_b8_u8m1(odd_mask, vl);\n        }\n\n        for (; i < length; ++i) {\n            if ((str[i] - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    int64_t minSum = LLONG_MAX;\n    int64_t currentSum = 0;\n\n    size_t vlen = __riscv_vsetvl_e64m1(n);\n    vint64m1_t v_nums = __riscv_vle64_v_i64m1(&nums[0], vlen);\n    vint64m1_t v_currentSum = __riscv_vmv_v_x_i64m1(0, vlen);\n    vint64m1_t v_minSum = __riscv_vmv_v_x_i64m1(LLONG_MAX, vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t vl = __riscv_vsetvl_e64m1(n - i);\n        vint64m1_t v_chunk = __riscv_vle64_v_i64m1(&nums[i], vl);\n        v_currentSum = __riscv_vadd_vv_i64m1(v_currentSum, v_chunk, vl);\n        v_minSum = __riscv_vmin_vv_i64m1(v_minSum, v_currentSum, vl);\n\n        int64_t tempSum = __riscv_vmv_x_s_i64m1_i64(v_currentSum);\n        if (tempSum < minSum) {\n            minSum = tempSum;\n        }\n\n        if (tempSum > 0) {\n            v_currentSum = __riscv_vmv_v_x_i64m1(0, vl);\n        }\n    }\n\n    minSum = std::min(minSum, __riscv_vmv_x_s_i64m1_i64(v_minSum));\n\n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t vlen = 8; // Assuming vector length of 8\n    size_t n = nums.size();\n    int64_t min_sum = INT64_MAX;\n    int64_t current_sum = 0;\n\n    size_t i = 0;\n    for (; i <= n - vlen; i += vlen) {\n        vint64m1_t v = vle64_v_i64m1(&nums[i], vlen);\n        vint64m1_t v_sum = vredsum_vs_i64m1_i64m1(v, v, v);\n        int64_t partial_sum = v_sum;\n\n        current_sum += partial_sum;\n        if (current_sum < min_sum) {\n            min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    for (; i < n; ++i) {\n        current_sum += nums[i];\n        if (current_sum < min_sum) {\n            min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    int64_t minSum = nums[0];\n    int64_t currentSum = nums[0];\n\n    size_t vlen = 0;\n    vint64m1_t v_nums, v_currentSum, v_minSum;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e64m1(n - i);\n        v_nums = vle64_v_i64m1(&nums[i], vlen);\n        v_currentSum = vle64_v_i64m1(&nums[i], vlen);\n        v_minSum = vle64_v_i64m1(&nums[i], vlen);\n\n        for (size_t j = i + 1; j < n; j += vlen) {\n            size_t vlen_j = vsetvl_e64m1(n - j);\n            vint64m1_t v_nums_j = vle64_v_i64m1(&nums[j], vlen_j);\n            v_currentSum = vadd_vv_i64m1(v_currentSum, v_nums_j, vlen);\n            v_minSum = vmin_vv_i64m1(v_minSum, v_currentSum, vlen);\n        }\n\n        int64_t tempMinSum = vfirst_m_i64m1(v_minSum, v_minSum);\n        minSum = std::min(minSum, tempMinSum);\n    }\n\n    return minSum;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    vint64m1_t v_min_sum = _rvv_init_v_i64m1(nums[0], 1);\n    vint64m1_t v_current_sum = _rvv_init_v_i64m1(nums[0], 1);\n    int64_t min_sum = nums[0];\n    int64_t current_sum = nums[0];\n\n    for (size_t i = 1; i < n; ++i) {\n        vint64m1_t v_num = _rvv_init_v_i64m1(nums[i], 1);\n        vint64m1_t v_new_sum = _rvv_vadd_vv_i64m1(v_current_sum, v_num, 1);\n        v_min_sum = _rvv_vmin_vv_i64m1(v_min_sum, v_new_sum, 1);\n        v_current_sum = _rvv_vmax_vv_i64m1(v_num, v_new_sum, 1);\n\n        int64_t new_sum = current_sum + nums[i];\n        min_sum = std::min(min_sum, new_sum);\n        current_sum = std::max(nums[i], new_sum);\n    }\n\n    min_sum = std::min(min_sum, _rvv_reduce_min_i64m1(v_min_sum, 1));\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    vint64m1_t v_min_sum = _rvv_set_v_i64m1_i64m1(nums[0], 1);\n    vint64m1_t v_current_sum = _rvv_set_v_i64m1_i64m1(nums[0], 1);\n\n    for (size_t i = 1; i < n; ++i) {\n        vint64m1_t v_num = _rvv_set_v_i64m1_i64m1(nums[i], 1);\n        v_current_sum = _rvv_add_vv_i64m1(v_current_sum, v_num, 1);\n        v_min_sum = _rvv_min_vv_i64m1(v_min_sum, v_current_sum, 1);\n\n        if (v_current_sum > v_num) {\n            v_current_sum = v_num;\n        }\n    }\n\n    int64_t min_sum;\n    _rvv_get_v_i64m1_i64m1(v_min_sum, &min_sum, 1);\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    size_t vector_length = vsetvl_e8m1(cols);\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        vint8m1_t row_vector = vle8_v_i8m1(&grid[i][0], vector_length);\n        vint8m1_t bucket_count = vmv_v_x_i8m1(0, vector_length);\n\n        for (size_t j = 0; j < cols; j += vsetvl_e8m1(cols)) {\n            size_t chunk_size = vsetvl_e8m1(cols - j);\n            vint8m1_t chunk = vle8_v_i8m1(&grid[i][j], chunk_size);\n            vint8m1_t water = vand_vv_i8m1(chunk, vmv_v_x_i8m1(1, chunk_size));\n            bucket_count = vadd_vv_i8m1(bucket_count, water, chunk_size);\n        }\n\n        int row_buckets = 0;\n        for (size_t j = 0; j < vector_length; ++j) {\n            row_buckets += bucket_count[j] / capacity + (bucket_count[j] % capacity != 0);\n        }\n\n        total_buckets += row_buckets;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t vl = 0;\n        vint8m1_t v_water = _rvv_load_v_i8m1(&grid[i][0], &vl);\n        vint8m1_t v_capacity = _rvv_splats_i8m1(capacity, vl);\n\n        vint8m1_t v_buckets_needed = _rvv_div_tu_i8m1(v_water, v_capacity, vl);\n        int buckets_needed = _rvv_reduce_add_i8m1(v_buckets_needed, 0, vl);\n\n        total_buckets += buckets_needed;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    size_t vector_length = vsetvl_e8m1(cols);\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        vint8m1_t row_vector = vle8_v_i8m1(&grid[i][0], vector_length);\n        vint8m1_t bucket_count = vredsum_vs_i8m1_i8m1(row_vector, row_vector, vsetvl_e8m1(1));\n        int current_buckets = (vget_v_i8m1_i8m1(bucket_count) + capacity - 1) / capacity;\n        total_buckets += current_buckets;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t vl = 0;\n        vint8m1_t v_water = __riscv_vle8_v_i8m1(&grid[i][0], &vl);\n        vint8m1_t v_capacity = __riscv_vmv_v_x_i8m1(capacity, vl);\n\n        vint8m1_t v_buckets_needed = __riscv_vdiv_vv_i8m1(v_water, v_capacity, vl);\n        vint8m1_t v_remainder = __riscv_vrem_vv_i8m1(v_water, v_capacity, vl);\n\n        int buckets_needed = 0;\n        for (size_t j = 0; j < vl; ++j) {\n            buckets_needed += __riscv_vget_i8m1_i8(v_buckets_needed, j);\n            if (__riscv_vget_i8m1_i8(v_remainder, j) > 0) {\n                buckets_needed++;\n            }\n        }\n\n        total_buckets += buckets_needed;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    size_t vector_length = vsetvl_e8m1(cols);\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        vint8m1_t vec = vle8_v_i8m1(&grid[i][0], vector_length);\n        vint8m1_t sum = vredsum_vs_i8m1_i8m1(vec, vec, vundefined_i8m1());\n        int row_sum = vmv_x_s_i8m1_i8(sum);\n\n        total_buckets += (row_sum + capacity - 1) / capacity;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n    size_t vl;\n\n    for (size_t i = 1; i < n; i += 2) {\n        vl = vsetvl_e16m1(n - i);\n        vint16m1_t v = vle16_v_i16m1(&lst[i], vl);\n        vint16m1_t v_odd = vand_vv_i16m1(v, 1, vl);\n        vbool16_t mask = vmseq_vx_i16m1_b16(v_odd, 1, vl);\n        vint16m1_t v_masked = vmerge_vvm_i16m1(v, 0, mask, vl);\n        sum += vredsum_vs_i16m1_i64m1(v_masked, vundefined_i64m1(), vl);\n        i += vl * 2;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n    size_t vl;\n\n    for (size_t i = 1; i < n; i += 2) {\n        vl = vsetvl_e16m1(n - i);\n        vint16m1_t v = vle16_v_i16m1(&lst[i], vl);\n        vint16m1_t odd_mask = vmsbf_m_i16m1(v, vl);\n        vint16m1_t odd_elements = vand_vx_i16m1_i16m1(v, 1, vl);\n        int64_t local_sum = vredsum_vs_i16m1_i64m1(v, odd_mask, vredsum_vs_i16m1_i64m1(v, odd_mask, vl));\n        sum += local_sum;\n        i += vl * 2 - 1;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n    size_t vl;\n\n    for (size_t i = 1; i < n; i += 2) {\n        vl = __riscv_vsetvl_e16m1(n - i);\n        vint16m1_t v = __riscv_vle16_v_i16m1(&lst[i], vl);\n        vbool16_t mask = __riscv_vmseq_vx_i16m1_b16(v, 1, vl);\n        vint16m1_t odd_elements = __riscv_vmerge_vvm_i16m1(v, 0, mask, vl);\n        sum += __riscv_vredsum_vs_i16m1_i64m1(odd_elements, sum, vl);\n        i += vl * 2 - 1;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n    size_t vl;\n\n    for (size_t i = 1; i < n; i += 2) {\n        vl = __riscv_vsetvl_e16m1(n - i);\n        vint16m1_t v = __riscv_vle16_v_i16m1(&lst[i], vl);\n        vbool16_t mask = __riscv_vmseq_vx_i16m1_b16(v, 1, vl);\n        vint16m1_t odd_elements = __riscv_vmerge_vvm_i16m1(v, 0, mask, vl);\n        sum += __riscv_vredsum_vs_i16m1_i64m1(odd_elements, sum, vl);\n        i += vl * 2 - 1;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <vector>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t vlen = 0;\n    int64_t sum = 0;\n    size_t i = 0;\n\n    vint16m1_t v_data, v_odd_mask, v_even_pos_mask;\n    vbool16_t v_mask;\n\n    v_odd_mask = __riscv_vmv_v_x_i16m1(1, vlen); // Create a mask for odd numbers\n    v_even_pos_mask = __riscv_vmv_v_x_i16m1(1, vlen); // Create a mask for even positions\n\n    for (; i + vlen <= lst.size(); i += vlen) {\n        v_data = __riscv_vle16_v_i16m1(&lst[i], vlen); // Load vector data\n        v_mask = __riscv_vmsbf_m_i16m1_b(v_data, v_odd_mask, vlen); // Mask for odd numbers\n        v_mask = __riscv_vmsif_m_i16m1_b(v_mask, v_even_pos_mask, vlen); // Mask for even positions\n        sum += __riscv_vredsum_vs_i32m1_i32m1(__riscv_vwredsum_vs_i16m1_i32m1(v_data, v_data, v_mask, vlen), sum, vlen); // Sum the masked elements\n    }\n\n    // Handle remaining elements\n    for (; i < lst.size(); i += 2) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    size_t vl;\n\n    vint32m1_t v_arr, v_mask;\n    vint32m1_t v_sum = _vv_set_all_v_i32m1(0);\n\n    for (size_t i = 0; i < k; i += vl) {\n        vl = _vv_set_vl(k - i);\n\n        v_arr = _vv_load_v_i32m1(&arr[i], vl);\n        v_mask = _vv_mslt_vx_i32m1_i32m1(v_arr, 100, vl);\n        v_sum = _vv_add_vv_i32m1_i32m1(v_sum, _vv_and_vv_i32m1_i32m1(v_arr, v_mask, vl), vl);\n    }\n\n    sum = _vv_reduce_add_vs_i32m1_i32m1(v_sum, 0, _vv_cnt_v_i32m1(v_sum));\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    size_t vl;\n\n    vint32m1_t v_arr, v_mask;\n    vint32m1_t v_sum = _rvv_set_v_i32m1(0, 1);\n\n    for (size_t i = 0; i < k; i += vl) {\n        vl = __riscv_vsetvl_e32m1(k - i);\n        v_arr = __riscv_vle32_v_i32m1(&arr[i], vl);\n        v_mask = __riscv_vmslt_vx_i32m1_i32m1(v_arr, 100, vl);\n        v_sum = __riscv_vmerge_vvm_i32m1(v_sum, v_arr, v_mask, vl);\n    }\n\n    sum = __riscv_vredsum_vs_i32m1_i32m1(v_sum, v_sum, vl);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    size_t vl;\n\n    vint32m1_t v_nums = _vle32_v_i32m1(arr.data(), &vl);\n    vint32m1_t v_k = _vmv_v_x_i32m1(k, &vl);\n\n    vbool32_t mask = _vmslt_vv_i32m1_b(v_nums, v_k, &vl);\n\n    vint32m1_t v_sum = _vreduce_v_i32m1_i32m1(v_nums, mask, 0, &vl);\n\n    sum = _vmv_x_s_i32m1_i32(v_sum);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    size_t vl;\n\n    vint32m1_t v_arr, v_mask;\n    vint32m1_t v_sum = _rvv_set_int32m1(0);\n\n    for (size_t i = 0; i < k; i += vl) {\n        vl = _rvv_setvl_e32m1(k - i);\n        v_arr = _rvv_load_v_i32m1(&arr[i], vl);\n        v_mask = _rvv_msgt_vx_i32m1_i32m1(v_arr, 99, vl);\n        v_arr = _rvv_andnm_vx_i32m1_i32m1(v_arr, v_mask, 0, vl);\n        v_sum = _rvv_add_vv_i32m1_i32m1(v_sum, v_arr, vl);\n    }\n\n    sum = _rvv_reduce_add_vs_i32m1_i32m1(v_sum, v_sum, vl);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    size_t vl;\n\n    vint32m1_t v_data, v_mask1, v_mask2, v_result;\n    vbool32_t v_mask = _vb_init_i32m1(1);\n\n    size_t i = 0;\n    for (; i + vlmax_i32m1() <= k; i += vlmax_i32m1()) {\n        vl = vsetvl_e32m1(k - i);\n\n        v_data = vle32_v_i32m1(&arr[i], v_mask);\n        v_mask1 = _vm_init_i32m1(-100);\n        v_mask2 = _vm_init_i32m1(100);\n        v_result = _vmslt_vv_i32m1_b(v_data, v_mask1, vl);\n        v_result = _vmor_mm_b(_vmsle_vv_i32m1_b(v_data, v_mask2, vl), v_result, vl);\n\n        sum += vredsum_vs_i32m1_i32m1(v_result, v_data, vl);\n    }\n\n    for (; i < k; ++i) {\n        if (arr[i] >= -100 && arr[i] <= 100) {\n            sum += arr[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t vl;\n    size_t i = 0;\n    size_t n = lst.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v0 = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v1 = vle32_v_i32m1(&lst[i + 1], vl);\n\n        vbool32_t mask = vmsgt_vv_i32m1_b32(v0, v1, vl);\n        if (vfirst_m_b32(mask, vl) != vl) {\n            return false;\n        }\n\n        vbool32_t dup_mask = vmseq_vv_i32m1_b32(v0, v1, vl);\n        if (vfirst_m_b32(dup_mask, vl) != vl) {\n            size_t dup_count = 0;\n            for (size_t j = i; j < i + vl; ++j) {\n                if (lst[j] == lst[j + 1]) {\n                    ++dup_count;\n                    if (dup_count > 1) {\n                        return false;\n                    }\n                } else {\n                    dup_count = 0;\n                }\n            }\n        }\n\n        i += vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t vl;\n    size_t n = lst.size();\n    const int *data = lst.data();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v0 = vle32_v_i32m1(data + i, vl);\n        vint32m1_t v1 = vle32_v_i32m1(data + i + 1, vl);\n\n        vbool32_t mask = vmsgt_vv_i32m1_b32(v0, v1, vl);\n        if (vfirst_m_b32(mask, vl) != -1) {\n            return false;\n        }\n\n        vbool32_t dup_mask = vmseq_vv_i32m1_b32(v0, v1, vl);\n        if (vfirst_m_b32(dup_mask, vl) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t vlen = 4; // Vector length\n    size_t n = lst.size();\n    size_t i;\n\n    vbool8_t mask = __riscv_vmsne_vx_i32m1_b8(__riscv_vmv_v_x_i32m1(0, 1), __riscv_vmv_v_x_i32m1(0, 1), vlen);\n\n    for (i = 0; i < n - 1; i += vlen) {\n        vint32m1_t vec1 = __riscv_vle32_v_i32m1(&lst[i], vlen);\n        vint32m1_t vec2 = __riscv_vle32_v_i32m1(&lst[i + 1], vlen);\n\n        vbool8_t cmp_mask = __riscv_vmsle_vv_i32m1_b8(vec1, vec2, vlen);\n        mask = __riscv_vand_vv_b8(mask, cmp_mask, vlen);\n\n        if (__riscv_vmfirst_m_b8(mask, vlen) != -1) {\n            return false;\n        }\n    }\n\n    if (i < n) {\n        vint32m1_t vec1 = __riscv_vle32_v_i32m1(&lst[i - vlen], vlen);\n        vint32m1_t vec2 = __riscv_vmv_v_x_i32m1(lst[i], vlen);\n\n        vbool8_t cmp_mask = __riscv_vmsle_vv_i32m1_b8(vec1, vec2, vlen);\n        mask = __riscv_vand_vv_b8(mask, cmp_mask, vlen);\n\n        if (__riscv_vmfirst_m_b8(mask, vlen) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t vl;\n    size_t n = lst.size();\n    const int *data = lst.data();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v0 = vle32_v_i32m1(data + i, vl);\n        vint32m1_t v1 = vle32_v_i32m1(data + i + 1, vl);\n\n        vbool32_t mask = vmsgt_vv_i32m1_b32(v0, v1, vl);\n        if (vfirst_m_b32(mask, vl) != -1) {\n            return false;\n        }\n\n        vbool32_t dup_mask = vmseq_vv_i32m1_b32(v0, v1, vl);\n        if (vfirst_m_b32(dup_mask, vl) != -1) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t vl;\n    size_t i = 0;\n    size_t n = lst.size();\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v0 = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v1 = vle32_v_i32m1(&lst[i + 1], vl);\n\n        vbool32_t mask = vmsgt_vv_i32m1_b32(v0, v1);\n        if (vfirst_m_b32(mask, vl) != vl) {\n            return false;\n        }\n\n        vint32m1_t v2 = vsaddu_vv_i32m1(v0, v1, vl);\n        vbool32_t mask_dup = vmseq_vv_i32m1_b32(v0, v2);\n        if (vfirst_m_b32(mask_dup, vl) != vl) {\n            return false;\n        }\n\n        i += vl;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint prod_signs_simd(const std::vector<int> &arr) {\n    if (arr.empty()) return -32768;\n\n    size_t vlen = 0;\n    int32_t *data = const_cast<int32_t*>(arr.data());\n\n    vint32m1_t v_signs = _vcreate_i32m1(0);\n    vint32m1_t v_mags = _vcreate_i32m1(0);\n    vint32m1_t v_prod_signs = _vcreate_i32m1(1);\n    vint32m1_t v_sum_mags = _vcreate_i32m1(0);\n\n    size_t i = 0;\n    for (; i + vlen <= arr.size(); i += vlen) {\n        v_signs = _vle32_v_i32m1(data + i, vlen);\n        v_mags = _vabs_v_i32m1(v_signs, vlen);\n        v_prod_signs = _vmul_vv_i32m1(v_prod_signs, _vsign_v_i32m1(v_signs, vlen), vlen);\n        v_sum_mags = _vadd_vv_i32m1(v_sum_mags, v_mags, vlen);\n    }\n\n    int32_t prod_signs = 1;\n    int32_t sum_mags = 0;\n    for (; i < arr.size(); ++i) {\n        int32_t sign = (data[i] > 0) - (data[i] < 0);\n        prod_signs *= sign;\n        sum_mags += abs(data[i]);\n    }\n\n    prod_signs *= _vreduce_mul_i32m1(v_prod_signs, vlen);\n    sum_mags += _vreduce_sum_i32m1(v_sum_mags, vlen);\n\n    return prod_signs * sum_mags;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    size_t vlen = 0;\n    int32_t sum = 0;\n    int32_t prod = 1;\n\n    size_t n = arr.size();\n    const int32_t *data = arr.data();\n\n    vint32m1_t v_sum = _vv_set_all_i32m1(0, vlen);\n    vint32m1_t v_prod = _vv_set_all_i32m1(1, vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = n - i < vlen ? n - i : vlen;\n        vint32m1_t v_data = _vv_load_i32m1(data + i, vlen);\n\n        vint32m1_t v_abs = _vv_abs_i32m1(v_data, vlen);\n        v_sum = _vv_reduce_add_i32m1(v_abs, v_sum, vlen);\n\n        vbool32_t mask = _vv_msk_cmplt_i32m1(v_data, 0, vlen);\n        vint32m1_t v_sign = _vv_set_i32m1(mask, -1, vlen);\n        v_prod = _vv_reduce_mul_i32m1(v_prod, v_sign, vlen);\n    }\n\n    sum = _vv_reduce_add_i32m1(v_sum, sum, vlen);\n    prod = _vv_reduce_mul_i32m1(v_prod, prod, vlen);\n\n    return sum * prod;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    size_t vlen = vsetvl_e32m1(arr.size());\n    vint32m1_t v_sum = vmv_v_x_i32m1(0, vlen);\n    vint32m1_t v_prod = vmv_v_x_i32m1(1, vlen);\n    vint32m1_t v_zero = vmv_v_x_i32m1(0, vlen);\n\n    for (size_t i = 0; i < arr.size(); i += vlen) {\n        vint32m1_t v_data = vle32_v_i32m1(&arr[i], vlen);\n        vint32m1_t v_abs = vabs_vv_i32m1(v_data, vlen);\n        v_sum = vadd_vv_i32m1(v_sum, v_abs, vlen);\n\n        vbool32_t mask = vmseq_vx_i32m1_b32(v_data, 0, vlen);\n        vint32m1_t v_sign = vmerge_vvm_i32m1(v_zero, v_data, mask, vlen);\n        v_sign = vmerge_vxm_i32m1(v_sign, 1, vmseq_vx_i32m1_b32(v_sign, 0, vlen), vlen);\n        v_prod = vmul_vv_i32m1(v_prod, v_sign, vlen);\n    }\n\n    int sum = 0, prod = 1;\n    vse32_v_i32m1(&sum, v_sum, vlen);\n    vse32_v_i32m1(&prod, v_prod, vlen);\n\n    return sum * prod;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint prod_signs_simd(const std::vector<int> & arr) {\n    if (arr.empty()) return -32768;\n\n    size_t vlen = 0;\n    int32_t *data = (int32_t *)arr.data();\n    size_t n = arr.size();\n\n    vint32m1_t v_signs = _vcreate_i32m1(0);\n    vint32m1_t v_magnitudes = _vcreate_i32m1(0);\n    int32_t sign_product = 1;\n    int32_t magnitude_sum = 0;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        vint32m1_t v_data = vle32_v_i32m1(data + i, vlen);\n\n        vbool32_t mask_pos = vmfeq_vv_i32m1_b32(v_data, 0, vlen);\n        vbool32_t mask_neg = vmflt_vv_i32m1_b32(v_data, 0, vlen);\n\n        vint32m1_t v_signs_local = vmv_v_x_i32m1(1, vlen);\n        v_signs_local = vmerge_vvm_i32m1(v_signs_local, vmv_v_x_i32m1(-1, vlen), mask_neg, vlen);\n        v_signs_local = vmerge_vvm_i32m1(v_signs_local, vmv_v_x_i32m1(0, vlen), mask_pos, vlen);\n\n        vint32m1_t v_magnitudes_local = vabs_v_i32m1(v_data, vlen);\n\n        v_signs = vmerge_vvm_i32m1(v_signs, v_signs_local, vlen);\n        v_magnitudes = vmerge_vvm_i32m1(v_magnitudes, v_magnitudes_local, vlen);\n\n        sign_product *= vredmax_vs_i32m1_i32m1(v_signs, v_signs, vlen);\n        magnitude_sum += vredsum_vs_i32m1_i32m1(v_magnitudes, v_magnitudes, vlen);\n    }\n\n    return sign_product * magnitude_sum;\n}\n```"}
{"task_id": "SimdBench_123_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint prod_signs_simd(const std::vector<int> &arr) {\n    if (arr.empty()) return -32768;\n\n    size_t vlen = 0;\n    int32_t *arr_ptr = const_cast<int32_t *>(arr.data());\n\n    vint32m1_t v_sign, v_abs;\n    vint32m1_t v_prod_sign = vxor_vx_i32m1(1, 1, vlen); // Initialize with 1\n    vint32m1_t v_sum_abs = vmv_v_x_i32m1(0, vlen); // Initialize with 0\n\n    for (size_t i = 0; i < arr.size(); i += vlen) {\n        vlen = vsetvl_e32m1(arr.size() - i);\n        v_sign = vmsgt_vx_i32m1_i32m1(vle32_v_i32m1(arr_ptr + i, vlen), 0, vlen);\n        v_abs = vabs_v_i32m1(vle32_v_i32m1(arr_ptr + i, vlen), vlen);\n\n        v_prod_sign = vmul_vv_i32m1(v_prod_sign, v_sign, vlen);\n        v_sum_abs = vadd_vv_i32m1(v_sum_abs, v_abs, vlen);\n    }\n\n    int32_t prod_sign = vmv_x_s_i32m1_i32(v_prod_sign);\n    int32_t sum_abs = vmv_x_s_i32m1_i32(v_sum_abs);\n\n    return prod_sign * sum_abs;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            vint8m1_t path = _rvv_set_v_i8m1(grid[i][j], 0, 0, 0, 0, 0, 0, 0);\n            vint8m1_t minPathVec = _rvv_set_v_i8m1(minPath[0], minPath[1], minPath[2], minPath[3], minPath[4], minPath[5], minPath[6], minPath[7]);\n\n            for (int s = 1; s < k; ++s) {\n                vint8m1_t current = _rvv_set_v_i8m1(grid[i][j], 0, 0, 0, 0, 0, 0, 0);\n                vbool8_t mask = _rvv_snez_v_i8m1(current, 8);\n\n                if (j > 0) _rvv_vset_v_i8m1(current, j - 1, grid[i][j - 1], mask);\n                if (j < N - 1) _rvv_vset_v_i8m1(current, j + 1, grid[i][j + 1], mask);\n                if (i > 0) _rvv_vset_v_i8m1(current, i - 1, grid[i - 1][j], mask);\n                if (i < N - 1) _rvv_vset_v_i8m1(current, i + 1, grid[i + 1][j], mask);\n\n                path = _rvv_min_vv_i8m1(path, current, 8);\n            }\n\n            minPathVec = _rvv_min_vv_i8m1(minPathVec, path, 8);\n\n            for (int p = 0; p < k; ++p) {\n                minPath[p] = std::min(minPath[p], _rvv_get_v_i8m1(minPathVec, p));\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int> > & grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            vint8m1_t path = _rvv_set_int8m1(grid[i][j], 1, 2, 3, 4, 5, 6, 7);\n            vint8m1_t minPathVec = _rvv_load_int8m1(&minPath[0]);\n\n            for (int steps = 1; steps < k; ++steps) {\n                int currentValue = _rvv_get_int8m1(path, 0);\n                vbool4_t mask = _rvv_load_bool4((bool*)&grid[i][j]);\n\n                if (j > 0) {\n                    vint8m1_t left = _rvv_set_int8m1(grid[i][j-1], 1, 2, 3, 4, 5, 6, 7);\n                    path = _rvv_min_int8m1(path, left, mask);\n                }\n                if (j < N-1) {\n                    vint8m1_t right = _rvv_set_int8m1(grid[i][j+1], 1, 2, 3, 4, 5, 6, 7);\n                    path = _rvv_min_int8m1(path, right, mask);\n                }\n                if (i > 0) {\n                    vint8m1_t up = _rvv_set_int8m1(grid[i-1][j], 1, 2, 3, 4, 5, 6, 7);\n                    path = _rvv_min_int8m1(path, up, mask);\n                }\n                if (i < N-1) {\n                    vint8m1_t down = _rvv_set_int8m1(grid[i+1][j], 1, 2, 3, 4, 5, 6, 7);\n                    path = _rvv_min_int8m1(path, down, mask);\n                }\n\n                minPathVec = _rvv_min_int8m1(minPathVec, path, mask);\n            }\n\n            _rvv_store_int8m1(&minPath[0], minPathVec);\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            vint8m1_t currentPath = __riscv_vset_v_i8m1_i8(0, grid[i][j], 1, 2, 3, 4, 5, 6, 7);\n            vint8m1_t minPathVec = __riscv_vset_v_i8m1_i8(0, minPath[0], 1, minPath[1], 2, minPath[2], 3, minPath[3], 4, minPath[4], 5, minPath[5], 6, minPath[6], 7, minPath[7]);\n\n            for (int step = 1; step < k; ++step) {\n                int minVal = INT_MAX;\n                if (i > 0) minVal = std::min(minVal, grid[i-1][j]);\n                if (i < N-1) minVal = std::min(minVal, grid[i+1][j]);\n                if (j > 0) minVal = std::min(minVal, grid[i][j-1]);\n                if (j < N-1) minVal = std::min(minVal, grid[i][j+1]);\n\n                currentPath = __riscv_vset_v_i8m1_i8(step, minVal, 0, 1, 2, 3, 4, 5, 6, 7);\n            }\n\n            minPathVec = __riscv_vmin_vv_i8m1(minPathVec, currentPath, 8);\n            for (int l = 0; l < k; ++l) {\n                minPath[l] = __riscv_vget_v_i8m1_i8(minPathVec, l);\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            vint8m1_t currentPath = _rvv_set_v_i8m1(grid[i][j], 0, 0, 0, 0, 0, 0, 0);\n            vbool4_t mask = _rvv_set_v_b4(1, 0, 0, 0);\n\n            for (int step = 1; step < k; ++step) {\n                vint8m1_t nextPath = _rvv_undefined_i8m1();\n\n                if (j > 0) {\n                    vint8m1_t leftPath = _rvv_slideup_vx_i8m1(currentPath, grid[i][j-1], 1);\n                    nextPath = _rvv_vmin_vv_i8m1_m(mask, nextPath, leftPath, 1);\n                }\n                if (j < N-1) {\n                    vint8m1_t rightPath = _rvv_slidedown_vx_i8m1(currentPath, grid[i][j+1], 1);\n                    nextPath = _rvv_vmin_vv_i8m1_m(mask, nextPath, rightPath, 1);\n                }\n                if (i > 0) {\n                    vint8m1_t upPath = _rvv_slideup_vx_i8m1(currentPath, grid[i-1][j], 1);\n                    nextPath = _rvv_vmin_vv_i8m1_m(mask, nextPath, upPath, 1);\n                }\n                if (i < N-1) {\n                    vint8m1_t downPath = _rvv_slidedown_vx_i8m1(currentPath, grid[i+1][j], 1);\n                    nextPath = _rvv_vmin_vv_i8m1_m(mask, nextPath, downPath, 1);\n                }\n\n                currentPath = nextPath;\n            }\n\n            for (int l = 0; l < k; ++l) {\n                minPath[l] = std::min(minPath[l], _rvv_get_v_i8m1(currentPath, l));\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            std::vector<int> currentPath(k, 0);\n            currentPath[0] = grid[i][j];\n\n            vint32m1_t v_currentPath = _rvv_load_v_i32m1(&currentPath[0], k);\n            vint32m1_t v_minPath = _rvv_load_v_i32m1(&minPath[0], k);\n\n            for (int step = 1; step < k; ++step) {\n                int minValue = INT_MAX;\n                if (i > 0) minValue = std::min(minValue, grid[i-1][j]);\n                if (i < N-1) minValue = std::min(minValue, grid[i+1][j]);\n                if (j > 0) minValue = std::min(minValue, grid[i][j-1]);\n                if (j < N-1) minValue = std::min(minValue, grid[i][j+1]);\n                currentPath[step] = minValue;\n            }\n\n            v_currentPath = _rvv_load_v_i32m1(&currentPath[0], k);\n            vbool32_t mask = _rvv_cmplt_vv_i32m1_b32(v_currentPath, v_minPath, k);\n\n            if (_rvv_first_i32m1(mask, k) != -1) {\n                minPath = currentPath;\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    size_t vl = 8;\n    vuint8m1_t v_n, v_odd_mask, v_result;\n    vuint64m1_t v_product;\n    uint64_t product = 1;\n    uint64_t odd_product = 1;\n    bool has_odd = false;\n\n    v_n = __riscv_vmv_v_x_u8m1(n, vl);\n    v_odd_mask = __riscv_vmseq_vx_u8m1_u8m1(v_n, 1, vl);\n    v_result = __riscv_vand_vv_u8m1(v_n, v_odd_mask, vl);\n\n    for (size_t i = 0; i < vl; i++) {\n        uint8_t digit = __riscv_vmv_x_s_u8m1_u8(v_result, i);\n        if (digit % 2 != 0) {\n            odd_product *= digit;\n            has_odd = true;\n        }\n    }\n\n    if (has_odd) {\n        product = odd_product;\n    } else {\n        product = 0;\n    }\n\n    return product;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    uint64_t product = 1;\n    uint64_t has_odd = 0;\n\n    size_t vl = 8;\n    vuint8m1_t v_n, v_odd_mask, v_odd_digits;\n    vbool8_t v_mask;\n\n    while (n > 0) {\n        v_n = __rvv_vsx_v_u8m1(n, vl);\n        v_odd_mask = __rvv_vmv_v_x_u8m1(0x1, vl);\n        v_odd_digits = __rvv_vand_vv_u8m1(v_n, v_odd_mask, vl);\n        v_mask = __rvv_vmsne_vx_u8m1_b8(v_odd_digits, 0, vl);\n\n        if (__rvv_vfirst_m_b8(v_mask, vl) != -1) {\n            has_odd = 1;\n            for (size_t i = 0; i < vl; i++) {\n                if (__rvv_vmv_x_s_u8m1_b8(v_mask, i)) {\n                    product *= __rvv_vmv_x_s_u8m1(v_n, i);\n                }\n            }\n        }\n\n        n /= 10;\n    }\n\n    return has_odd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    size_t vl;\n    uint64_t product = 1;\n    uint64_t zero = 0;\n    uint64_t one = 1;\n    uint64_t odd_mask = 0x1;\n    uint64_t even_mask = 0x2;\n\n    vuint8m1_t v_n = __riscv_vle8_v_u8m1(&n, 1);\n    vuint8m1_t v_odd_mask = __riscv_vmv_v_x_u8m1(odd_mask, 1);\n    vuint8m1_t v_even_mask = __riscv_vmv_v_x_u8m1(even_mask, 1);\n    vuint8m1_t v_one = __riscv_vmv_v_x_u8m1(one, 1);\n\n    vl = __riscv_vsetvl_e8m1(1);\n\n    vbool8_t mask = __riscv_vmsgt_vx_u8m1_b8(v_n, zero, vl);\n    vuint8m1_t v_digits = __riscv_vand_vx_u8m1(v_n, 0xF, vl);\n\n    vbool8_t odd_mask_bool = __riscv_vmsgt_vx_u8m1_b8(v_digits, v_odd_mask, vl);\n    vuint8m1_t v_odd_digits = __riscv_vand_vv_u8m1(v_digits, v_odd_mask, vl);\n\n    vbool8_t even_mask_bool = __riscv_vmsgt_vx_u8m1_b8(v_digits, v_even_mask, vl);\n    vuint8m1_t v_even_digits = __riscv_vand_vv_u8m1(v_digits, v_even_mask, vl);\n\n    if (__riscv_vfirst_m_b8(odd_mask_bool, vl) == -1) {\n        return 0;\n    }\n\n    vuint8m1_t v_product = __riscv_vmv_v_x_u8m1(one, vl);\n    v_product = __riscv_vmerge_vvm_u8m1(v_product, v_odd_digits, odd_mask_bool, vl);\n\n    product = __riscv_vmv_x_s_u8m1_u8(v_product);\n\n    return product;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    size_t vl = 8;\n    vuint8m1_t v_n, v_odd_mask, v_result;\n    vuint64m1_t v_product;\n    uint64_t product = 1;\n    uint64_t odd_product = 1;\n    bool has_odd = false;\n\n    v_n = __riscv_vmv_v_x_u8m1(n, vl);\n    v_odd_mask = __riscv_vmand_mm_b8(__riscv_vmseq_vx_u8m1_b8(v_n, 1, vl), __riscv_vmseq_vx_u8m1_b8(v_n % 2, 1, vl), vl);\n    v_result = __riscv_vmerge_vxm_u8m1(v_n, 0, v_odd_mask, vl);\n\n    for (size_t i = 0; i < vl; i++) {\n        uint8_t digit = __riscv_vmv_x_s_u8m1_u8(v_result, i);\n        if (digit % 2 != 0) {\n            has_odd = true;\n            odd_product *= digit;\n        }\n    }\n\n    if (has_odd) {\n        product = odd_product;\n    } else {\n        product = 0;\n    }\n\n    return product;\n}\n```"}
{"task_id": "SimdBench_125_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t digits_simd(uint64_t n) {\n    size_t vl;\n    vuint8m1_t v_n, v_odd_mask, v_result;\n    vbool8_t v_mask;\n    uint64_t product = 1;\n    uint64_t temp = n;\n    uint8_t digits[20]; // Assuming max 20 digits for uint64_t\n    int count = 0;\n\n    // Extract digits\n    while (temp > 0) {\n        digits[count++] = temp % 10;\n        temp /= 10;\n    }\n\n    vl = 20;\n    v_n = vle8_v_u8m1(digits, vl);\n    v_odd_mask = vmv_v_x_u8m1(1, vl); // Odd mask (1 for odd, 0 for even)\n    v_mask = vmsgt_vx_u8m1_b8(v_n, 0, vl); // Mask for non-zero digits\n    v_result = vand_vv_u8m1(v_n, v_odd_mask, vl); // Apply odd mask\n\n    for (size_t i = 0; i < vl; i++) {\n        uint8_t digit = vget_v_u8m1_u8(v_result, i);\n        if (digit % 2 == 1) {\n            product *= digit;\n        }\n    }\n\n    return (product == 1 && count > 0) ? 0 : product;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n#include <vector>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t vl;\n    size_t vector_len = lst.size();\n    uint64_t sum = 0;\n\n    for (size_t i = 0; i < vector_len; i += vl) {\n        vl = vsetvl_e32m1(vector_len - i);\n\n        vfloat32m1_t v_data = vle32_v_f32m1(&lst[i], vl);\n        vfloat32m1_t v_ceil = vfcvt_xu_f_v_f32m1(v_data, vl);\n        vfloat32m1_t v_square = vmul_vv_f32m1(v_ceil, v_ceil, vl);\n\n        float result[vl];\n        vse32_v_f32m1(result, v_square, vl);\n\n        for (size_t j = 0; j < vl; ++j) {\n            sum += static_cast<uint64_t>(result[j]);\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t vlen = 0;\n    uint64_t sum = 0;\n\n    size_t i = 0;\n    for (; i + vlen <= lst.size(); i += vlen) {\n        vlen = vsetvl_e32m1(lst.size() - i);\n\n        vfloat32m1_t vx = vle32_v_f32m1(&lst[i], vlen);\n        vfloat32m1_t vc = vfcvt_xu_f_v_f32m1(vx, vlen);\n        vfloat32m1_t vs = vfwmul_vv_f32m1(vc, vc, vlen);\n\n        float result[vlen];\n        vse32_v_f32m1(result, vs, vlen);\n\n        for (size_t j = 0; j < vlen; ++j) {\n            sum += static_cast<uint64_t>(result[j]);\n        }\n    }\n\n    for (; i < lst.size(); ++i) {\n        float num = lst[i];\n        int ceil_num = static_cast<int>(std::ceil(num));\n        sum += ceil_num * ceil_num;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t vlen = 0;\n    uint64_t sum = 0;\n\n    size_t i = 0;\n    for (; i + vlen <= lst.size(); i += vlen) {\n        vlen = vsetvl_e32m1(lst.size() - i);\n        vfloat32m1_t vx = vle32_v_f32m1(&lst[i], vlen);\n        vfloat32m1_t vc = vfcvt_xu_f_v_f32m1(vx, vlen);\n        vfloat32m1_t vs = vmul_vv_f32m1(vc, vc, vlen);\n        float result[vlen];\n        vse32_v_f32m1(result, vs, vlen);\n        for (size_t j = 0; j < vlen; ++j) {\n            sum += result[j];\n        }\n    }\n\n    for (; i < lst.size(); ++i) {\n        float x = lst[i];\n        int c = std::ceil(x);\n        sum += c * c;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t vlen = 0;\n    uint64_t sum = 0;\n\n    size_t i = 0;\n    for (; i + vlen <= lst.size(); i += vlen) {\n        vlen = vsetvl_e32m1(lst.size() - i);\n        vfloat32m1_t vx = vle32_v_f32m1(&lst[i], vlen);\n        vfloat32m1_t vceil = vfcvt_xu_f_v_f32m1(vx, vlen);\n        vfloat32m1_t vsquare = vmul_vv_f32m1(vceil, vceil, vlen);\n        float result[vlen];\n        vse32_v_f32m1(result, vsquare, vlen);\n        for (size_t j = 0; j < vlen; ++j) {\n            sum += static_cast<uint64_t>(result[j]);\n        }\n    }\n\n    for (; i < lst.size(); ++i) {\n        float ceil_val = std::ceil(lst[i]);\n        sum += static_cast<uint64_t>(ceil_val * ceil_val);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cmath>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t vlen = 0;\n    vfloat32m1_t vx, vc;\n    vint32m1_t vi;\n    vint64m2_t vs, vsum = _rvv_vmv_v_x_i64m2(0, 2);\n\n    for (size_t i = 0; i < lst.size(); i += vlen) {\n        vlen = vsetvl_e32m1(lst.size() - i);\n        vx = vle32_v_f32m1(&lst[i], vlen);\n        vc = _rvv_vfcvt_xu_f_v_f32m1(vx, vlen);\n        vi = _rvv_vfwcvt_x_f_v_i32m1(vc, vlen);\n        vs = _rvv_vwcvtu_x_x_v_i64m2(vi, vlen);\n        vsum = _rvv_vadd_vv_i64m2(vsum, _rvv_vmul_vv_i64m2(vs, vs, vlen), vlen);\n    }\n\n    uint64_t sum = 0;\n    vlen = vsetvl_e64m2(1);\n    vint64m2_t v_sum = _rvv_vadd_vx_i64m2(vsum, 0, vlen);\n    sum = _rvv_vmv_x_s_i64m2_i64(v_sum);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    size_t vl = 0;\n    int index = -1;\n\n    for (size_t i = 1; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t vec1 = vle32_v_i32m1(&arr[i], vl);\n        vint32m1_t vec2 = vle32_v_i32m1(&arr[i - 1], vl);\n\n        vbool32_t mask = vmslt_vv_i32m1_b(vec1, vec2, vl);\n\n        if (vfirst_m_b(mask, vl) >= 0) {\n            index = i + vfirst_m_b(mask, vl);\n            break;\n        }\n    }\n\n    return index;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint can_arrange_simd(const std::vector<int> &arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    size_t vlen = 0;\n    int *arr_ptr = const_cast<int *>(arr.data());\n\n    vint32m1_t v0, v1, v_result;\n    vbool32_t mask;\n\n    int max_index = -1;\n\n    for (size_t i = 0; i < n - 1; i += vlen) {\n        vlen = vsetvl_e32m1(n - i - 1);\n        v0 = vle32_v_i32m1(arr_ptr + i, vlen);\n        v1 = vle32_v_i32m1(arr_ptr + i + 1, vlen);\n\n        mask = vmsgt_vv_i32m1_b32(v0, v1);\n\n        if (vfirst_m_b32(mask, &v_result)) {\n            max_index = i + 1 + vmfirst_m_b32(mask);\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint can_arrange_simd(const std::vector<int> &arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    size_t vlen = 8; // Example vector length\n    size_t i = 0;\n    int result = -1;\n\n    for (; i <= n - vlen; i += vlen) {\n        vint32m1_t vec1 = vle32_v_i32m1(&arr[i], vlen);\n        vint32m1_t vec2 = vle32_v_i32m1(&arr[i + 1], vlen);\n\n        vbool32_t mask = vmsgt_vv_i32m1_b32(vec2, vec1);\n\n        if (vfirst_m_b32(mask, vlen) != vlen) {\n            result = i + vfirst_m_b32(mask, vlen);\n            break;\n        }\n    }\n\n    for (; i < n - 1; ++i) {\n        if (arr[i + 1] < arr[i]) {\n            result = i + 1;\n            break;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```c++\n#include <riscv_vector.h>\n\nint can_arrange_simd(const std::vector<int> &arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    size_t vlen = 0;\n    int *ptr = const_cast<int*>(&arr[0]);\n\n    vint32m1_t v0, v1, v_result;\n    vbool32_t mask;\n\n    int max_index = -1;\n\n    for (size_t i = 0; i < n - 1; i += vlen) {\n        vlen = vsetvl_e32m1(n - i - 1);\n        v0 = vle32_v_i32m1(&ptr[i], vlen);\n        v1 = vle32_v_i32m1(&ptr[i + 1], vlen);\n\n        mask = vmsgt_vv_i32m1_b32(v0, v1);\n\n        if (vfirst_m_b32(mask, &v_result)) {\n            max_index = i + 1 + vmfirst_m_b32(mask);\n        }\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_127_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    size_t vl = 0;\n    int largest_index = -1;\n\n    const int *base = arr.data();\n    vint32m1_t v0, v1, v_result;\n    vbool32_t vm0;\n\n    for (size_t i = 0; i < n - 1; i += vl) {\n        vl = vsetvl_e32m1(n - 1 - i);\n        v0 = vle32_v_i32m1(base + i, vl);\n        v1 = vle32_v_i32m1(base + i + 1, vl);\n\n        vm0 = vmslt_vv_i32m1_b(v1, v0, vl);\n        v_result = vmsbf_m_i32m1_b(vm0, vl);\n\n        if (vfirst_m_b(vm0, vl) != -1) {\n            int index = vfirst_m_b(vm0, vl) + i;\n            if (index > largest_index) {\n                largest_index = index;\n            }\n        }\n    }\n\n    return largest_index;\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    size_t vlen = 0;\n    int largest_neg = INT_MIN;\n    int smallest_pos = INT_MAX;\n    bool has_neg = false;\n    bool has_pos = false;\n\n    size_t n = lst.size();\n    vint32m1_t v_neg_max = vle32_v_i32m1(&largest_neg, 1);\n    vint32m1_t v_pos_min = vle32_v_i32m1(&smallest_pos, 1);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        vint32m1_t v = vle32_v_i32m1(&lst[i], vlen);\n\n        vbool32_t mask_neg = vmflt_vx_i32m1_b(v, 0, vlen);\n        vbool32_t mask_pos = vmfgt_vx_i32m1_b(v, 0, vlen);\n\n        if (vfirst_m_b(mask_neg, vlen) != -1) {\n            v_neg_max = vmax_vv_i32m1(v_neg_max, v, vlen);\n            has_neg = true;\n        }\n\n        if (vfirst_m_b(mask_pos, vlen) != -1) {\n            v_pos_min = vmin_vv_i32m1(v_pos_min, v, vlen);\n            has_pos = true;\n        }\n    }\n\n    if (has_neg) {\n        largest_neg = vmv_x_s_i32m1_i32(v_neg_max);\n    } else {\n        largest_neg = 0;\n    }\n\n    if (has_pos) {\n        smallest_pos = vmv_x_s_i32m1_i32(v_pos_min);\n    } else {\n        smallest_pos = 0;\n    }\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return {0, 0};\n    }\n\n    size_t vlen = 0;\n    vint32m1_t v_neg_max = vset_v_i32m1_i32m1(INT_MIN, vlen);\n    vint32m1_t v_pos_min = vset_v_i32m1_i32m1(INT_MAX, vlen);\n    vbool32_t v_mask_neg = vmv_v_x_i32m1(0, vlen);\n    vbool32_t v_mask_pos = vmv_v_x_i32m1(0, vlen);\n\n    int neg_max = INT_MIN;\n    int pos_min = INT_MAX;\n    bool has_neg = false;\n    bool has_pos = false;\n\n    size_t i = 0;\n    for (; i + vlen <= lst.size(); i += vlen) {\n        vint32m1_t v_data = vle32_v_i32m1(&lst[i], vlen);\n        vbool32_t v_mask_neg_tmp = vmslt_vx_i32m1_b32(v_data, 0, vlen);\n        vbool32_t v_mask_pos_tmp = vmsgt_vx_i32m1_b32(v_data, 0, vlen);\n\n        v_neg_max = vmax_vv_i32m1_i32m1_m(v_mask_neg_tmp, v_neg_max, v_data, vlen);\n        v_pos_min = vmin_vv_i32m1_i32m1_m(v_mask_pos_tmp, v_pos_min, v_data, vlen);\n\n        v_mask_neg = vor_vv_b32_m(v_mask_neg, v_mask_neg_tmp, vlen);\n        v_mask_pos = vor_vv_b32_m(v_mask_pos, v_mask_pos_tmp, vlen);\n    }\n\n    if (vmfirst_m_b32(v_mask_neg, vlen) != -1) {\n        neg_max = vget_v_i32m1_i32m1(v_neg_max, vlen);\n        has_neg = true;\n    }\n\n    if (vmfirst_m_b32(v_mask_pos, vlen) != -1) {\n        pos_min = vget_v_i32m1_i32m1(v_pos_min, vlen);\n        has_pos = true;\n    }\n\n    for (; i < lst.size(); ++i) {\n        if (lst[i] < 0) {\n            if (!has_neg || lst[i] > neg_max) {\n                neg_max = lst[i];\n                has_neg = true;\n            }\n        } else if (lst[i] > 0) {\n            if (!has_pos || lst[i] < pos_min) {\n                pos_min = lst[i];\n                has_pos = true;\n            }\n        }\n    }\n\n    if (!has_neg) {\n        neg_max = 0;\n    }\n\n    if (!has_pos) {\n        pos_min = 0;\n    }\n\n    return {neg_max, pos_min};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    size_t vlen = 0;\n    int largest_neg = INT_MIN;\n    int smallest_pos = INT_MAX;\n    bool has_neg = false;\n    bool has_pos = false;\n\n    size_t n = lst.size();\n    vbool8_t mask = __riscv_vmslt_vx_i32_b8(vlen, 0, 0);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vint32m1_t v = __riscv_vle32_v_i32m1(&lst[i], vlen);\n        vint32m1_t v_neg = __riscv_vmslt_vx_i32m1_i32m1(v, 0, vlen);\n        vint32m1_t v_pos = __riscv_vmseq_vx_i32m1_i32m1(v, 0, vlen);\n\n        if (__riscv_vmfirst_m_b8(mask, v_neg, vlen) != -1) {\n            has_neg = true;\n            vint32m1_t max_neg = __riscv_vredmax_vs_i32m1_i32m1(v_neg, v, vlen);\n            largest_neg = std::max(largest_neg, __riscv_vmv_x_s_i32m1_i32(max_neg));\n        }\n\n        if (__riscv_vmfirst_m_b8(mask, v_pos, vlen) != -1) {\n            has_pos = true;\n            vint32m1_t min_pos = __riscv_vredmin_vs_i32m1_i32m1(v_pos, v, vlen);\n            smallest_pos = std::min(smallest_pos, __riscv_vmv_x_s_i32m1_i32(min_pos));\n        }\n    }\n\n    if (!has_neg) largest_neg = 0;\n    if (!has_pos) smallest_pos = 0;\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    size_t vlen = 0;\n    int largest_neg = INT_MIN;\n    int smallest_pos = INT_MAX;\n    bool has_neg = false;\n    bool has_pos = false;\n\n    vint32m1_t v_neg_max = _rvv_init_v_i32m1(INT_MIN, 1);\n    vint32m1_t v_pos_min = _rvv_init_v_i32m1(INT_MAX, 1);\n\n    for (size_t i = 0; i < lst.size(); i += vlen) {\n        vlen = __riscv_vsetvl_e32m1(lst.size() - i);\n        vint32m1_t v = __riscv_vle32_v_i32m1(&lst[i], vlen);\n\n        vbool32_t mask_neg = __riscv_vmslt_vx_i32m1_b32(v, 0, vlen);\n        vbool32_t mask_pos = __riscv_vmsgt_vx_i32m1_b32(v, 0, vlen);\n\n        vint32m1_t v_neg = __riscv_vmerge_vvm_i32m1(v, v_neg_max, mask_neg, vlen);\n        vint32m1_t v_pos = __riscv_vmerge_vvm_i32m1(v, v_pos_min, mask_pos, vlen);\n\n        v_neg_max = __riscv_vmax_vv_i32m1(v_neg_max, v_neg, vlen);\n        v_pos_min = __riscv_vmin_vv_i32m1(v_pos_min, v_pos, vlen);\n\n        has_neg |= __riscv_vmfirst_m_b32(mask_neg, vlen) != -1;\n        has_pos |= __riscv_vmfirst_m_b32(mask_pos, vlen) != -1;\n    }\n\n    if (has_neg) {\n        largest_neg = __riscv_vfirst_m_i32m1(v_neg_max, __riscv_vmfirst_m_b32(v_neg_max, vlen));\n    }\n    if (has_pos) {\n        smallest_pos = __riscv_vfirst_m_i32m1(v_pos_min, __riscv_vmfirst_m_b32(v_pos_min, vlen));\n    }\n\n    if (!has_neg) largest_neg = 0;\n    if (!has_pos) smallest_pos = 0;\n\n    return {largest_neg, smallest_pos};\n}\n```"}
{"task_id": "SimdBench_128_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    size_t vlen = 0;\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    bool has_negative = false;\n    bool has_positive = false;\n\n    size_t i = 0;\n    size_t n = lst.size();\n    vint32m1_t v0, v1;\n    vint32m1_t v_neg_max = _rvv_set_int32m1(INT32_MIN, 1);\n    vint32m1_t v_pos_min = _rvv_set_int32m1(INT32_MAX, 1);\n\n    for (; i + _rvv_length_int32m1() <= n; i += _rvv_length_int32m1()) {\n        v0 = _rvv_load_int32m1(&lst[i], n - i);\n        v1 = _rvv_slt_int32m1_int32m1(v0, 0);\n\n        v_neg_max = _rvv_max_int32m1_int32m1(v_neg_max, _rvv_and_int32m1_int32m1(v0, v1));\n        v_pos_min = _rvv_min_int32m1_int32m1(v_pos_min, _rvv_and_int32m1_int32m1(v0, _rvv_not_int32m1(v1)));\n\n        has_negative |= _rvv_reduce_max_int32m1(v1) > 0;\n        has_positive |= _rvv_reduce_max_int32m1(_rvv_not_int32m1(v1)) > 0;\n    }\n\n    largest_negative = _rvv_reduce_max_int32m1(v_neg_max);\n    smallest_positive = _rvv_reduce_min_int32m1(v_pos_min);\n\n    for (; i < n; ++i) {\n        if (lst[i] < 0) {\n            if (!has_negative || lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n            has_negative = true;\n        } else if (lst[i] > 0) {\n            if (!has_positive || lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n            has_positive = true;\n        }\n    }\n\n    if (!has_negative) largest_negative = 0;\n    if (!has_positive) smallest_positive = 0;\n\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    size_t vl = 8; // Assuming vector length of 8 for this example\n    vuint64m1_t v_result = _rvv_vmv_v_x_u64m1(result, vl);\n    vuint64m1_t v_factorial = _rvv_vmv_v_x_u64m1(factorial, vl);\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        v_factorial = _rvv_vmul_vv_u64m1(v_factorial, _rvv_vmv_v_x_u64m1(i, vl), vl);\n        v_result = _rvv_vmul_vv_u64m1(v_result, v_factorial, vl);\n    }\n\n    result = _rvv_vmv_x_s_u64m1_u64(v_result);\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    size_t vl = 8; // Assuming vector length of 8 for this example\n    vuint64m1_t v_result = _rvv_vmv_v_x_u64m1(result, vl);\n    vuint64m1_t v_factorial = _rvv_vmv_v_x_u64m1(factorial, vl);\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        v_factorial = _rvv_vmul_vv_u64m1(v_factorial, _rvv_vmv_v_x_u64m1(i, vl), vl);\n        v_result = _rvv_vmul_vv_u64m1(v_result, v_factorial, vl);\n    }\n\n    result = _rvv_vmv_x_s_u64m1_u64(v_result);\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    size_t vl;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        vuint64m1_t v_result = _vbz_v_u64m1(1, 1); // Broadcast 1 to vector register\n        vuint64m1_t v_i = _vbz_v_u64m1(i, 1); // Broadcast i to vector register\n\n        vl = __riscv_vsetvl_e64m1(i);\n\n        for (uint64_t j = 1; j <= i; ++j) {\n            v_result = _vfmacc_vv_u64m1(v_result, v_i, v_i, vl); // Multiply and accumulate\n            v_i = _vadd_vx_u64m1(v_i, -1, vl); // Decrement i\n        }\n\n        result *= _vredmax_vs_u64m1_u64m1(v_result, v_result, vl); // Reduce vector to scalar\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> &lst) {\n    size_t n = lst.size();\n    int sum = 0;\n\n    size_t i = 0;\n    size_t vl;\n    vint32m1_t v_data, v_result, v_index;\n    vbool32_t v_mask_mult3, v_mask_mult4;\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        v_data = vle32_v_i32m1(&lst[i], vl);\n        v_index = vadd_vx_i32m1(v_index, i, vl);\n\n        v_mask_mult3 = vmseq_vx_i32m1_b32(v_index, 0, vl);\n        v_mask_mult4 = vmseq_vx_i32m1_b32(v_index, 1, vl);\n\n        v_result = vmerge_vvm_i32m1(v_data, vmsbf_m_i32m1_i32m1(v_data, v_data, v_mask_mult3, vl), v_mask_mult3, vl);\n        v_result = vmerge_vvm_i32m1(v_result, vmsbf_m_i32m1_i32m1(v_result, v_result, v_mask_mult4, vl), v_mask_mult4, vl);\n\n        sum += vredsum_vs_i32m1_i32(v_result, v_result, vl);\n\n        i += vl;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> & lst) {\n    size_t vl;\n    size_t vector_len = lst.size();\n    int sum = 0;\n\n    for (size_t i = 0; i < vector_len; i += vl) {\n        vl = vsetvl_e32m1(vector_len - i);\n        vint32m1_t v_lst = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_indices = vadd_vx_i32m1(v_lst, i, vl);\n\n        vbool32_t v_mask_mult3 = vmseq_vx_i32m1_b32(v_indices, 0, vl);\n        vbool32_t v_mask_mult4 = vmseq_vx_i32m1_b32(v_indices, 1, vl);\n\n        vint32m1_t v_squared = vmul_vv_i32m1(v_lst, v_lst, vl);\n        vint32m1_t v_cubed = vmul_vv_i32m1(v_squared, v_lst, vl);\n\n        vint32m1_t v_result = vmerge_vvm_i32m1(v_lst, v_squared, v_mask_mult3, vl);\n        v_result = vmerge_vvm_i32m1(v_result, v_cubed, v_mask_mult4, vl);\n\n        sum += vredsum_vs_i32m1_i32m1(v_result, v_result, vl);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> &lst) {\n    size_t vl;\n    int sum = 0;\n    size_t n = lst.size();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_lst = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_indices = vle32_v_i32m1(&lst[i], vl);\n\n        vint32m1_t v_result = v_lst;\n\n        vbool32_t v_mask_mult_3 = vmsgt_vx_i32m1_b32(v_indices, 0, 3);\n        vbool32_t v_mask_mult_4 = vmsgt_vx_i32m1_b32(v_indices, 0, 4);\n\n        v_result = vmul_vv_i32m1(v_result, v_result, vl);\n        v_result = vmerge_vvm_i32m1(v_result, v_result, v_mask_mult_3, vl);\n\n        v_result = vmul_vv_i32m1(v_result, v_result, vl);\n        v_result = vmerge_vvm_i32m1(v_result, v_result, v_mask_mult_4, vl);\n\n        sum += vredsum_vs_i32m1_i32m1(sum, v_result, v_result, vl);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> & lst) {\n    size_t vl;\n    int sum = 0;\n    size_t n = lst.size();\n\n    for (size_t i = 0; i < n; i += vl) {\n        vl = vsetvl_e32m1(n - i);\n        vint32m1_t v_data = vle32_v_i32m1(&lst[i], vl);\n        vint32m1_t v_result = v_data;\n\n        vbool32_t mask_mult_3 = vmsbf_m_b32(vundiff(v_data, 3));\n        vbool32_t mask_mult_4 = vmsbf_m_b32(vundiff(v_data, 4));\n\n        vint32m1_t v_squared = vmul_vx_i32m1(v_data, 2, vl);\n        vint32m1_t v_cubed = vmul_vx_i32m1(v_squared, v_data, vl);\n\n        v_result = vmerge_vvm_i32m1(v_result, v_squared, mask_mult_3, vl);\n        v_result = vmerge_vvm_i32m1(v_result, v_cubed, mask_mult_4, vl);\n\n        vse32_v_i32m1(&lst[i], v_result, vl);\n    }\n\n    for (size_t i = 0; i < n; ++i) {\n        sum += lst[i];\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int>& lst) {\n    size_t n = lst.size();\n    int sum = 0;\n\n    size_t i = 0;\n    size_t vl;\n    vint32m1_t v_data, v_result, v_index;\n    vbool32_t v_mask_mult3, v_mask_mult4;\n\n    while (i < n) {\n        vl = vsetvl_e32m1(n - i);\n        v_data = vle32_v_i32m1(&lst[i], vl);\n        v_index = vle32_v_i32m1(&i, vl);\n\n        v_mask_mult3 = vmseq_vx_i32m1_b32(v_index % 3, 0, vl);\n        v_mask_mult4 = vmseq_vx_i32m1_b32(v_index % 4, 0, vl);\n\n        vint32m1_t v_squared = vmul_vx_i32m1_i32m1(v_data, v_data, vl);\n        vint32m1_t v_cubed = vmul_vx_i32m1_i32m1(v_squared, v_data, vl);\n\n        v_result = vmerge_vvm_i32m1(v_data, v_squared, v_mask_mult3, vl);\n        v_result = vmerge_vvm_i32m1(v_result, v_cubed, v_mask_mult4, vl);\n\n        sum += vredsum_vs_i32m1_i32m1(v_result, v_result, vl);\n\n        i += vl;\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cstddef>\n\nint specialFilter_simd(const std::vector<int> &nums) {\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n    size_t n = nums.size();\n    int count = 0;\n\n    for (size_t i = 0; i < n; i += vlmax) {\n        size_t vl = __riscv_vsetvl_e32m1(n - i);\n\n        vint32m1_t v_nums = __riscv_vle32_v_i32m1(&nums[i], vl);\n        vbool32_t mask = __riscv_vmsgt_vx_i32m1_b32(v_nums, 10, vl);\n\n        vint32m1_t v_abs_nums = __riscv_vabs_v_i32m1(v_nums, vl);\n        vint32m1_t v_first_digit = __riscv_vdiv_vx_i32m1(v_abs_nums, 10, vl);\n        vint32m1_t v_last_digit = __riscv_vrem_vx_i32m1(v_abs_nums, 10, vl);\n\n        vbool32_t mask_first_odd = __riscv_vmsle_vx_i32m1_b32(v_first_digit, 9, vl) & __riscv_vmsge_vx_i32m1_b32(v_first_digit, 1, vl) & (__riscv_vand_vx_i32m1_b32(__riscv_vand_vv_i32m1_b32(v_first_digit, __riscv_vmv_v_x_i32m1_b32(1, vl), vl), 1, vl));\n        vbool32_t mask_last_odd = __riscv_vmsle_vx_i32m1_b32(v_last_digit, 9, vl) & __riscv_vmsge_vx_i32m1_b32(v_last_digit, 1, vl) & (__riscv_vand_vx_i32m1_b32(__riscv_vand_vv_i32m1_b32(v_last_digit, __riscv_vmv_v_x_i32m1_b32(1, vl), vl), 1, vl));\n\n        mask = mask & mask_first_odd & mask_last_odd;\n\n        count += __riscv_vcpop_m_b32(mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstddef>\n\nint specialFilter_simd(const std::vector<int>& nums) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < nums.size(); i += vlmax) {\n        size_t vl = vsetvl_e32m1(nums.size() - i);\n\n        vint32m1_t v_nums = vle32_v_i32m1(&nums[i], vl);\n        vint32m1_t v_ten = vmv_v_x_i32m1(10, vl);\n\n        vbool32_t mask_gt_ten = vmsgt_vx_i32m1_b32(v_nums, v_ten, vl);\n\n        vint32m1_t v_abs_nums = vabs_v_i32m1(v_nums, vl);\n        vint32m1_t v_first_digit = vand_vx_i32m1(v_abs_nums, 0xF, vl);\n        vint32m1_t v_last_digit = vand_vx_i32m1(v_abs_nums, 0xF0000000, vl);\n        v_last_digit = vsra_vx_i32m1(v_last_digit, 28, vl);\n\n        vbool32_t mask_odd_first = vmsbf_v_i32m1_b32(v_first_digit, vl);\n        vbool32_t mask_odd_last = vmsbf_v_i32m1_b32(v_last_digit, vl);\n\n        vbool32_t mask_odd_both = vand_vv_b32(mask_odd_first, mask_odd_last, vl);\n        vbool32_t mask_final = vand_vv_b32(mask_gt_ten, mask_odd_both, vl);\n\n        count += vcpop_m_b32(mask_final, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstddef>\n\nint specialFilter_simd(const std::vector<int>& nums) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < nums.size(); i += vlmax) {\n        size_t vl = vsetvl_e32m1(nums.size() - i);\n\n        vint32m1_t v_nums = vle32_v_i32m1(&nums[i], vl);\n        vbool32_t mask = vmfgt_vv_i32m1_b32(v_nums, 10, vl);\n\n        vint32m1_t v_abs_nums = vabs_v_i32m1(v_nums, vl);\n        vint32m1_t v_first_digit = vand_vx_i32m1(v_abs_nums, 0xF, vl);\n        vint32m1_t v_last_digit = vand_vx_i32m1(v_abs_nums, 0xF0000000, vl);\n        v_last_digit = vsra_vx_i32m1(v_last_digit, 28, vl);\n\n        vbool32_t mask_first_odd = vmand_mm_b32(vmseq_vx_i32m1_b32(vand_vx_i32m1(v_first_digit, 1, vl), 1, vl),\n                                                vmseq_vx_i32m1_b32(vand_vx_i32m1(v_first_digit, 2, vl), 0, vl), vl);\n        vbool32_t mask_last_odd = vmand_mm_b32(vmseq_vx_i32m1_b32(vand_vx_i32m1(v_last_digit, 1, vl), 1, vl),\n                                               vmseq_vx_i32m1_b32(vand_vx_i32m1(v_last_digit, 2, vl), 0, vl), vl);\n\n        vbool32_t mask_odd = vmand_mm_b32(mask_first_odd, mask_last_odd, vl);\n        mask = vmand_mm_b32(mask, mask_odd, vl);\n\n        count += vcpop_m_b32(mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n\nint specialFilter_simd(const std::vector<int> &nums) {\n    size_t vlmax = vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < nums.size(); i += vlmax) {\n        size_t vl = vsetvl_e32m1(nums.size() - i);\n\n        vint32m1_t v_nums = vle32_v_i32m1(&nums[i], vl);\n        vint32m1_t v_ten = vmv_v_x_i32m1(10, vl);\n\n        vbool32_t v_mask_gt_ten = vmsgt_vx_i32m1_b32(v_nums, v_ten, vl);\n\n        vint32m1_t v_abs_nums = vabs_v_i32m1(v_nums, vl);\n        vint32m1_t v_first_digit = vand_vx_i32m1(v_abs_nums, 0xF, vl);\n        vint32m1_t v_last_digit = vand_vx_i32m1(v_abs_nums, 0xF0000000, vl);\n        v_last_digit = vsra_vx_i32m1(v_last_digit, 28, vl);\n\n        vbool32_t v_mask_odd_first = vmsbf_v_i32m1_b32(v_first_digit, vl);\n        vbool32_t v_mask_odd_last = vmsbf_v_i32m1_b32(v_last_digit, vl);\n\n        vbool32_t v_mask_odd_both = vand_vv_b32(v_mask_odd_first, v_mask_odd_last, vl);\n        vbool32_t v_mask_final = vand_vv_b32(v_mask_gt_ten, v_mask_odd_both, vl);\n\n        count += vcpop_m_b32(v_mask_final, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <cstddef>\n\nint specialFilter_simd(const std::vector<int> & nums) {\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n    size_t count = 0;\n\n    for (size_t i = 0; i < nums.size(); i += vlmax) {\n        size_t vl = __riscv_vsetvl_e32m1(nums.size() - i);\n\n        vint32m1_t v_nums = __riscv_vle32_v_i32m1(&nums[i], vl);\n        vbool32_t v_mask = __riscv_vmsgt_vx_i32m1_b32(v_nums, 10, vl);\n\n        vint32m1_t v_abs_nums = __riscv_vabs_v_i32m1(v_nums, vl);\n        vint32m1_t v_first_digit = __riscv_vdiv_v_i32m1(v_abs_nums, __riscv_vmv_v_x_i32m1(10, vl), vl);\n        vint32m1_t v_last_digit = __riscv_vrem_v_i32m1(v_abs_nums, __riscv_vmv_v_x_i32m1(10, vl), vl);\n\n        vbool32_t v_odd_first = __riscv_vmsne_vx_i32m1_b32(__riscv_vand_vx_i32m1(v_first_digit, 1, vl), 1, vl);\n        vbool32_t v_odd_last = __riscv_vmsne_vx_i32m1_b32(__riscv_vand_vx_i32m1(v_last_digit, 1, vl), 1, vl);\n\n        v_mask = __riscv_vand_vv_b32(v_mask, v_odd_first, vl);\n        v_mask = __riscv_vand_vv_b32(v_mask, v_odd_last, vl);\n\n        count += __riscv_vcpop_m_b32(v_mask, vl);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    size_t vl;\n    vuint32m1_t v_i, v_j, v_k;\n    vuint32m1_t v_a_i, v_a_j, v_a_k;\n    vuint32m1_t v_sum;\n    uint64_t count = 0;\n\n    uint32_t *a = (uint32_t *)malloc(n * sizeof(uint32_t));\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        v_i = vle32_v_u32m1(&a[i], vl);\n        v_a_i = vmul_vv_u32m1(v_i, v_i, vl);\n        v_a_i = vsub_vv_u32m1(v_a_i, v_i, vl);\n        v_a_i = vadd_vx_u32m1(v_a_i, 1, vl);\n\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            v_j = vle32_v_u32m1(&a[j], vl);\n            v_a_j = vmul_vv_u32m1(v_j, v_j, vl);\n            v_a_j = vsub_vv_u32m1(v_a_j, v_j, vl);\n            v_a_j = vadd_vx_u32m1(v_a_j, 1, vl);\n\n            for (uint64_t k = j + 1; k < n; ++k) {\n                v_k = vle32_v_u32m1(&a[k], vl);\n                v_a_k = vmul_vv_u32m1(v_k, v_k, vl);\n                v_a_k = vsub_vv_u32m1(v_a_k, v_k, vl);\n                v_a_k = vadd_vx_u32m1(v_a_k, 1, vl);\n\n                v_sum = vadd_vv_u32m1(v_a_i, v_a_j, vl);\n                v_sum = vadd_vv_u32m1(v_sum, v_a_k, vl);\n\n                if (vfirst_m_u32m1(vmsgt_vx_u32m1(v_sum, 2, vl), vl)) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    size_t vl;\n    uint64_t count = 0;\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            vl = __riscv_vsetvl_e64m1(n - j - 1);\n            vuint64m1_t v_k = __riscv_vle64_v_u64m1(&a[j + 1], vl);\n            vuint64m1_t v_a_i = __riscv_vmv_v_x_u64m1(a[i], vl);\n            vuint64m1_t v_a_j = __riscv_vmv_v_x_u64m1(a[j], vl);\n            vuint64m1_t v_sum = __riscv_vadd_vv_u64m1(v_a_i, v_a_j, vl);\n            v_sum = __riscv_vadd_vv_u64m1(v_sum, v_k, vl);\n            vbool64_t mask = __riscv_vmsbf_m_b64mf2(v_sum, 3, vl);\n            count += __riscv_vcpop_m_b64(mask, vl);\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    size_t vl;\n    vuint32m1_t v_i, v_j, v_k;\n    vuint32m1_t v_a_i, v_a_j, v_a_k;\n    vuint32m1_t v_sum, v_mod;\n    uint32_t count = 0;\n\n    for (uint64_t i = 1; i <= n; i++) {\n        for (uint64_t j = i + 1; j <= n; j++) {\n            vl = vsetvl_e32m1(n - j);\n            v_k = vle32_v_u32m1(&a[j + 1], vl);\n            v_a_i = vmv_v_x_u32m1(i * i - i + 1, vl);\n            v_a_j = vmv_v_x_u32m1(j * j - j + 1, vl);\n            v_sum = vadd_vv_u32m1(v_a_i, v_a_j, vl);\n            v_sum = vadd_vv_u32m1(v_sum, v_k, vl);\n            v_mod = vrem_vx_u32m1(v_sum, 3, vl);\n            count += vfirst_m_u32m1(v_mod, vmseq_vx_u32m1(v_mod, 0, vl), vl);\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    size_t vlen = 128; // Vector length in bits\n    size_t vl = vlen / 8; // Vector length in bytes\n\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    uint64_t count = 0;\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            size_t k = j + 1;\n            size_t remain = n - k;\n            size_t loop_count = remain / vl;\n            size_t tail = remain % vl;\n\n            for (size_t l = 0; l < loop_count; ++l) {\n                vuint64m1_t v_a_k = vle64_v_u64m1(&a[k], vl);\n                vuint64m1_t v_sum = vadd_vv_u64m1(v_a_k, a[i] + a[j], vl);\n                vbool64_t mask = vmsbf_m_b64m1(v_sum, vl);\n                count += vcpop_m_b64m1(mask, vl);\n                k += vl;\n            }\n\n            for (size_t l = 0; l < tail; ++l) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n                k++;\n            }\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t count = 0;\n    size_t vl;\n    vuint64m1_t v_i, v_j, v_k, v_a_i, v_a_j, v_a_k, v_sum, v_mask;\n    vbool64_t v_bool;\n\n    for (uint64_t i = 1; i <= n - 2; i++) {\n        uint64_t a_i = i * i - i + 1;\n        vl = vsetvl_e64m1(n - i - 1);\n        v_i = vfmv_v_x_u64m1(i, vl);\n        v_a_i = vfmv_v_x_u64m1(a_i, vl);\n\n        for (uint64_t j = i + 1; j <= n - 1; j++) {\n            uint64_t a_j = j * j - j + 1;\n            v_j = vfmv_v_x_u64m1(j, vl);\n            v_a_j = vfmv_v_x_u64m1(a_j, vl);\n            v_sum = vadd_vv_u64m1(v_a_i, v_a_j, vl);\n\n            for (uint64_t k = j + 1; k <= n; k++) {\n                uint64_t a_k = k * k - k + 1;\n                v_k = vfmv_v_x_u64m1(k, vl);\n                v_a_k = vfmv_v_x_u64m1(a_k, vl);\n                v_sum = vadd_vv_u64m1(v_sum, v_a_k, vl);\n\n                v_bool = vmsbf_m_b64m1(v_sum, 3, vl);\n                v_mask = vand_vv_u64m1(v_sum, v_bool, vl);\n                count += vfirst_m_b64m1(v_mask, vl);\n            }\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    size_t vl = vsetvl_e32m1(1);\n    vbool1_t mask = vmsne_vx_i32m1_b1(vundef_u32m1(), 0, n, vl);\n\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            mask = vmseq_vx_i32m1_b1(vundef_u32m1(), 0, 0, vl);\n            break;\n        }\n    }\n\n    vint32m1_t vec_x = vcreate_u32m1(x);\n    vint32m1_t vec_y = vcreate_u32m1(y);\n    vint32m1_t result = vmerge_vxm_i32m1(mask, vec_y, vec_x, vl);\n\n    return vfirst_m_i32m1(mask, result, vl);\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    vbool1_t mask = is_prime(n);\n    vint32m1_t vec_x = _rvv_set_v_i32m1(x);\n    vint32m1_t vec_y = _rvv_set_v_i32m1(y);\n    vint32m1_t result = _rvv_blend_v_i32m1(vec_y, vec_x, mask);\n    return _rvv_get_v_i32m1(result);\n}\n\nvbool1_t is_prime(int n) {\n    if (n <= 1) return 0;\n    if (n <= 3) return 1;\n    if (n % 2 == 0 || n % 3 == 0) return 0;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    vbool1_t mask = is_prime(n);\n    vint32m1_t vec_x = _rvv_set_v_i32m1(x);\n    vint32m1_t vec_y = _rvv_set_v_i32m1(y);\n    vint32m1_t result = _rvv_blend_v_i32m1(vec_y, vec_x, mask);\n    return _rvv_get_v_i32m1(result);\n}\n\nvbool1_t is_prime(int n) {\n    if (n <= 1) return 0;\n    if (n <= 3) return 1;\n    if (n % 2 == 0 || n % 3 == 0) return 0;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    vbool1_t mask = is_prime(n);\n    vint32m1_t vec_x = _rvv_set_v_i32m1(x);\n    vint32m1_t vec_y = _rvv_set_v_i32m1(y);\n    vint32m1_t result = _rvv_blend_v_i32m1(vec_y, vec_x, mask);\n    return _rvv_get_v_i32m1(result);\n}\n\nvbool1_t is_prime(int n) {\n    if (n <= 1) return 0;\n    if (n <= 3) return 1;\n    if (n % 2 == 0 || n % 3 == 0) return 0;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_133_RVV", "completion": "```c\n#include <riscv_vector.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    vbool1_t mask = is_prime(n);\n    vint32m1_t vec_x = _rvv_set_v_i32m1(x);\n    vint32m1_t vec_y = _rvv_set_v_i32m1(y);\n    vint32m1_t result = _rvv_blend_v_i32m1(mask, vec_x, vec_y);\n    return _rvv_get_v_i32m1(result);\n}\n\nvbool1_t is_prime(int n) {\n    if (n <= 1) return 0;\n    if (n <= 3) return 1;\n    if (n % 2 == 0 || n % 3 == 0) return 0;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float>& lst) {\n    size_t vlmax = __riscv_vsetvlmax_e32m1();\n    uint64_t sum = 0;\n\n    for (size_t i = 0; i < lst.size(); i += vlmax) {\n        size_t vl = __riscv_vsetvl_e32m1(lst.size() - i);\n\n        vfloat32m1_t v_data = __riscv_vle32_v_f32m1(&lst[i], vl);\n        vbool32_t mask = __riscv_vmfgt_vf_f32m1_b32(v_data, 0.0f, vl);\n\n        vint32m1_t v_int_data = __riscv_vfcvt_x_f_v_i32m1(v_data, vl);\n        vbool32_t mask_odd = __riscv_vmsbf_mx_b32(v_int_data, vl);\n\n        mask = __riscv_vand_vv_b32(mask, mask_odd, vl);\n\n        vfloat32m1_t v_squared = __riscv_vfmul_vv_f32m1(v_data, v_data, vl);\n        vfloat32m1_t v_masked_squared = __riscv_vmerge_vvm_f32m1(v_squared, 0.0f, mask, vl);\n\n        for (size_t j = 0; j < vl; ++j) {\n            sum += __riscv_vget_v_f32m1_f32(v_masked_squared, j);\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float>& lst) {\n    size_t vlen = 8; // Assuming vector length of 8\n    uint64_t sum = 0;\n\n    for (size_t i = 0; i < lst.size(); i += vlen) {\n        vfloat32m1_t vx = vle32_v_f32m1(&lst[i], lst.size() - i);\n        vbool32_t mask = vmfne_vf_f32m1_b(vx, 0.0f, vlen); // Mask for non-negative values\n        vx = vmerge_vvm_f32m1(vx, 0.0f, mask, vlen); // Set negative values to 0\n\n        vint32m1_t vi = vfcvt_x_f_v_i32m1(vx, vlen); // Convert to integer\n        vbool32_t mask_odd = vmsbf_mx_b_i32m1(vi, vlen); // Mask for odd values\n\n        vfloat32m1_t vx_odd = vmerge_vvm_f32m1(vx, 0.0f, mask_odd, vlen); // Keep only odd values\n        vfloat32m1_t vx_odd_sq = vmul_vv_f32m1(vx_odd, vx_odd, vlen); // Square the odd values\n\n        sum += vredsum_vs_f32m1_f64m1(vx_odd_sq, 0.0, vlen); // Sum the squares\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float>& lst) {\n    size_t vlen = 0;\n    uint64_t sum = 0;\n\n    size_t n = lst.size();\n    if (n == 0) return 0;\n\n    vfloat32m1_t v_data = __riscv_vle32_v_f32m1(lst.data(), vlen);\n    vbool32_t v_mask = __riscv_vmfne_vf_f32m1_b32(v_data, 0.0f, vlen); // Mask for non-negative numbers\n    v_data = __riscv_vmerge_vvm_f32m1(v_data, __riscv_vfmv_v_f_f32m1(0.0f, vlen), v_mask, vlen); // Zero out negative numbers\n\n    vbool32_t v_mask_odd = __riscv_vmsbf_vf_f32m1_b32(__riscv_vfcvt_x_f_v_f32m1(v_data, vlen), 0, vlen); // Mask for odd numbers\n    v_data = __riscv_vmerge_vvm_f32m1(v_data, __riscv_vfmv_v_f_f32m1(0.0f, vlen), v_mask_odd, vlen); // Zero out even numbers\n\n    vfloat32m1_t v_squared = __riscv_vfmul_vv_f32m1(v_data, v_data, vlen); // Square the odd numbers\n\n    for (size_t i = 0; i < vlen; ++i) {\n        sum += __riscv_vfmv_f_s_f32m1_f32(v_squared, i); // Accumulate the sum of squares\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float>& lst) {\n    size_t vlen = 0;\n    uint64_t sum = 0;\n\n    size_t n = lst.size();\n    if (n == 0) return 0;\n\n    const float* data = lst.data();\n\n    vbool8_t mask = __riscv_vmslt_vx_f32m1_b8(vlen, 0.0, 0);\n    vfloat32m1_t vec = __riscv_vle32_v_f32m1(data, vlen);\n\n    for (size_t i = 0; i < n; i += vlen) {\n        size_t remaining = n - i;\n        vlen = remaining < vlen ? remaining : vlen;\n\n        vec = __riscv_vle32_v_f32m1(data + i, vlen);\n        mask = __riscv_vmslt_vx_f32m1_b8(vec, 0.0, vlen);\n\n        vfloat32m1_t odd_vec = __riscv_vfmul_vf_f32m1(vec, 0.5, vlen);\n        odd_vec = __riscv_vfwadd_wf_f32m1(odd_vec, -0.5, vlen);\n        odd_vec = __riscv_vfwmul_vf_f32m1(odd_vec, 2.0, vlen);\n\n        vfloat32m1_t squared_vec = __riscv_vfmul_vv_f32m1(odd_vec, odd_vec, vlen);\n\n        vfloat32m1_t masked_vec = __riscv_vfmul_vv_f32m1(squared_vec, __riscv_vmv_v_x_f32m1(mask, 1.0, vlen), vlen);\n\n        float result[vlen];\n        __riscv_vse32_v_f32m1(result, masked_vec, vlen);\n\n        for (size_t j = 0; j < vlen; ++j) {\n            sum += static_cast<uint64_t>(result[j]);\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <cstdint>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float>& lst) {\n    size_t vlen = 0;\n    uint64_t sum = 0;\n\n    size_t n = lst.size();\n    if (n == 0) return 0;\n\n    const float* data = lst.data();\n\n    vbool8_t mask = __riscv_vmsne_vx_f32m1_b8(vlen, data, 0.0f, vlen);\n    vfloat32m1_t vec = __riscv_vle32_v_f32m1(data, vlen);\n    vfloat32m1_t vec_squared = __riscv_vfmul_vv_f32m1(vec, vec, vlen);\n\n    vfloat32m1_t vec_odd = __riscv_vfmv_s_f_f32m1((float)1, vlen);\n    vec_odd = __riscv_vfadd_vv_f32m1(vec_odd, __riscv_vfmv_s_f_f32m1((float)1, vlen), vlen);\n    vec_odd = __riscv_vfmul_vv_f32m1(vec_odd, vec_squared, vlen);\n\n    vfloat32m1_t vec_sum = __riscv_vfreduce_sum_vs_f32m1_f32m1(vec_odd, vec_odd, vlen);\n    sum = __riscv_vfmv_f_s_f32m1_f32(vec_sum);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    vint32m1_t v_game, v_guess, v_result;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        v_game = vle32_v_i32m1(&game[i], vlen);\n        v_guess = vle32_v_i32m1(&guess[i], vlen);\n        v_result = vabs_vx_i32m1(v_game - v_guess, vlen);\n        vse32_v_i32m1(&result[i], v_result, vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    vint32m1_t v_game, v_guess, v_result;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        v_game = vle32_v_i32m1(&game[i], vlen);\n        v_guess = vle32_v_i32m1(&guess[i], vlen);\n        v_result = vabs_vx_i32m1(vsub_vv_i32m1(v_game, v_guess, vlen), vlen);\n        vse32_v_i32m1(&result[i], v_result, vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    vint32m1_t v_game, v_guess, v_result;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        v_game = vle32_v_i32m1(&game[i], vlen);\n        v_guess = vle32_v_i32m1(&guess[i], vlen);\n        v_result = vabs_vv_i32m1(vsub_vv_i32m1(v_game, v_guess, vlen), vlen);\n        vse32_v_i32m1(&result[i], v_result, vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```c++\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    int *game_ptr = const_cast<int*>(&game[0]);\n    int *guess_ptr = const_cast<int*>(&guess[0]);\n    int *result_ptr = &result[0];\n\n    vint32m1_t v_game, v_guess, v_result;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        v_game = vle32_v_i32m1(game_ptr + i, vlen);\n        v_guess = vle32_v_i32m1(guess_ptr + i, vlen);\n        v_result = vabs_vx_i32m1(v_game - v_guess, vlen);\n        vse32_v_i32m1(result_ptr + i, v_result, vlen);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_RVV", "completion": "```cpp\n#include <riscv_vector.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    size_t vlen = 0;\n    vint32m1_t v_game, v_guess, v_result;\n\n    for (size_t i = 0; i < n; i += vlen) {\n        vlen = vsetvl_e32m1(n - i);\n        v_game = vle32_v_i32m1(&game[i], vlen);\n        v_guess = vle32_v_i32m1(&guess[i], vlen);\n        v_result = vabsdiff_vv_i32m1(v_game, v_guess, vlen);\n        vse32_v_i32m1(&result[i], v_result, vlen);\n    }\n\n    return result;\n}\n```"}

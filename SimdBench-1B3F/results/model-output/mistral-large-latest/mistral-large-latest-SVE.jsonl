{"task_id": "SimdBench_0_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b64(i, length);\n\n    while (svptest_any(pg)) {\n        svint64_t v_src = svld1_s64(pg, &src[i]);\n        svbool_t v_mask = svld1_b8(pg, &mask[i]);\n        svint64_t v_dst = svld1_s64(pg, &dst[i]);\n\n        v_dst = svsel_s64(v_mask, v_src, v_dst);\n        svst1_s64(pg, &dst[i], v_dst);\n\n        i += svcntd();\n        pg = svwhilelt_b64(i, length);\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t v_src = svld1_s64(pg, &src[i]);\n        svbool_t v_mask = svld1_b(pg, &mask[i]);\n        svint64_t v_dst = svld1_s64(pg, &dst[i]);\n        v_dst = svsel_s64(v_mask, v_src, v_dst);\n        svst1_s64(pg, &dst[i], v_dst);\n    }\n    for (; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t v_src = svld1_s64(pg, &src[i]);\n        svbool_t v_mask = svld1_b(pg, &mask[i]);\n        svint64_t v_dst = svld1_s64(pg, &dst[i]);\n        v_dst = svsel_s64(v_mask, v_src, v_dst);\n        svst1_s64(pg, &dst[i], v_dst);\n    }\n    for (; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    for (; i <= length - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b64(i, length);\n        svint64_t v_src = svld1_s64(pg, &src[i]);\n        svbool_t v_mask = svld1_b(pg, &mask[i]);\n        svint64_t v_dst = svld1_s64(pg, &dst[i]);\n        v_dst = svsel_s64(v_mask, v_src, v_dst);\n        svst1_s64(pg, &dst[i], v_dst);\n    }\n    for (; i < length; ++i) {\n        if (mask[i]) {\n            dst[i] = src[i];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_0_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_move_simd(const int64_t *src, int64_t *dst, const bool *mask, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b64(i, length);\n\n    do {\n        svbool_t p = svcmpge_n_u64(pg, i, length);\n        svint64_t v_src = svld1_s64(p, &src[i]);\n        svbool_t v_mask = svld1_b(p, &mask[i]);\n        svint64_t v_dst = svld1_s64(p, &dst[i]);\n\n        v_dst = svsel_s64(v_mask, v_src, v_dst);\n        svst1_s64(p, &dst[i], v_dst);\n\n        i += svcntp_b64(p);\n        pg = svwhilelt_b64(i, length);\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_scale = svdup_n_s32(scale);\n    svint32_t v_7 = svdup_n_s32(7);\n\n    const int *src_ptr = src;\n    int *dst_ptr = dst;\n\n    while (svptest_any(pg)) {\n        svint32_t v_src = svld1_s32(pg, src_ptr);\n        svint32_t v_scaled = svmla_s32(pg, v_src, v_scale);\n\n        svint32_t v_tmp1 = svlsr_n_s32(v_scaled, 3);\n        svint32_t v_tmp2 = svlsl_n_s32(v_scaled, 3);\n\n        svint32_t v_result = svmla_s32(pg, v_scaled, svmul_s32(pg, v_tmp1, v_tmp2));\n        v_result = svdiv_n_s32_x(pg, v_result, v_7);\n\n        svst1_s32(pg, dst_ptr, v_result);\n\n        src_ptr += svcntw();\n        dst_ptr += svcntw();\n        pg = svwhilelt_b32(svcntw(), length - svcntw());\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_scale = svdup_n_s32(scale);\n    svint32_t v_7 = svdup_n_s32(7);\n\n    const int *src_base = src;\n    int *dst_base = dst;\n\n    do {\n        svint32_t v_src = svld1_s32(pg, src_base);\n        svint32_t v_scaled = svmla_s32(pg, v_src, v_scale);\n\n        svint32_t v_tmp1 = svlsr_n_s32(v_scaled, 3);\n        svint32_t v_tmp2 = svlsl_n_s32(v_scaled, 3);\n\n        svint32_t v_result = svmla_s32(pg, v_scaled, svmla_s32(pg, v_tmp1, v_tmp2));\n        v_result = svlsr_n_s32(svadd_n_s32_x(pg, v_result, v_7/2), 3);\n\n        svst1_s32(pg, dst_base, v_result);\n\n        src_base += svcntw();\n        dst_base += svcntw();\n        pg = svwhilelt_b32(svcntw(), length - svcntw());\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_scale = svdup_n_s32(scale);\n\n    const int *src_ptr = src;\n    int *dst_ptr = dst;\n\n    do {\n        svint32_t v_src = svld1_s32(pg, src_ptr);\n        svint32_t v_scaled = svmla_s32(pg, v_src, v_scale);\n\n        svint32_t v_tmp1 = svlsr_n_s32(pg, v_scaled, 3);\n        svint32_t v_tmp2 = svlsl_n_s32(pg, v_scaled, 3);\n\n        svint32_t v_result = svmla_s32(pg, v_scaled, svmla_s32(pg, v_tmp1, v_tmp2));\n        v_result = svlsr_n_s32(pg, svadd_n_s32_x(pg, v_result, v_result), 3);\n\n        svst1_s32(pg, dst_ptr, v_result);\n\n        src_ptr += svcntw();\n        dst_ptr += svcntw();\n        pg = svwhilelt_b32(svcntw(), length - svcntw());\n    } while (svptest_any(svptrue_b32(), pg));\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_scale = svdup_n_s32(scale);\n    svint32_t v_7 = svdup_n_s32(7);\n    svint32_t v_3 = svdup_n_s32(3);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t v_src = svld1_s32(pg, &src[i]);\n        svint32_t v_element_scale = svmla_s32(pg, v_src, v_scale);\n\n        svint32_t v_tmp1 = svlsr_n_s32(pg, v_element_scale, 3);\n        svint32_t v_tmp2 = svlsl_n_s32(pg, v_element_scale, 3);\n\n        svint32_t v_tmp1_tmp2 = svmla_s32(pg, v_tmp1, v_tmp2);\n        svint32_t v_result = svadd_s32_x(pg, v_element_scale, v_tmp1_tmp2);\n        v_result = svlsr_n_s32(pg, v_result, 3);\n        v_result = svdiv_s32_x(pg, v_result, v_7);\n\n        svst1_s32(pg, &dst[i], v_result);\n\n        pg = svwhilelt_b32(i + svcntw(), length);\n    }\n}\n```"}
{"task_id": "SimdBench_1_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid load_modify_store_simd(const int *src, int *dst, int scale, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_scale = svdup_n_s32(scale);\n    svint32_t v_7 = svdup_n_s32(7);\n\n    while (svptest_any(pg)) {\n        svint32_t v_src = svld1_s32(pg, src);\n        svint32_t v_scaled = svmul_n_s32(pg, v_src, scale);\n        svint32_t v_tmp1 = svlsr_n_s32(pg, v_scaled, 3);\n        svint32_t v_tmp2 = svlsl_n_s32(pg, v_scaled, 3);\n        svint32_t v_result = svmla_s32(pg, v_scaled, v_tmp1, v_tmp2);\n        v_result = svdiv_n_s32_x(pg, v_result, 7);\n        svst1_s32(pg, dst, v_result);\n\n        src += svcntw();\n        dst += svcntw();\n        pg = svwhilelt_b32(svcntw(), length);\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t i = 0;\n    for (i = 0; i + svcntd() <= rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t v = svld1_gather_u64index_f64(pg, src + i * cols, svadd_n_u64_x(pg, svindex_u64(i, 1), stride));\n        svst1_f64(pg, dst + i, v);\n    }\n    for (; i < rows; ++i) {\n        dst[i] = src[i * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b64_s64(i, rows);\n\n    do {\n        svfloat64_t vec = svld1_f64(pg, &src[i * cols + stride]);\n        svst1_f64(pg, &dst[i], vec);\n        i += svcntd();\n        pg = svwhilelt_b64_s64(i, rows);\n    } while(svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t i = 0;\n    for (; i <= rows - svcntd(); i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t v = svld1_f64(pg, &src[(i * cols + stride)]);\n        svst1_f64(pg, &dst[i], v);\n    }\n    for (; i < rows; ++i) {\n        dst[i] = src[i * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    svbool_t pg = svwhilelt_b64_s64(0, rows);\n    svfloat64_t vg = svld1_f64(pg, &src[stride]);\n    svst1_f64(pg, dst, vg);\n}\n```"}
{"task_id": "SimdBench_2_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid strided_load_store_simd(const double *src, double *dst, size_t rows, size_t cols, size_t stride) {\n    size_t i = 0;\n    for (i = 0; i + svcntd() <= rows; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svfloat64_t v = svld1_gather_u64index_f64(pg, src + i * cols, svadd_n_u64_x(pg, svindex_u64(i, 1), stride));\n        svst1_f64(pg, dst + i, v);\n    }\n    for (; i < rows; ++i) {\n        dst[i] = src[i * cols + stride];\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src;\n    svint32_t v_indices;\n\n    // Gather operation\n    for (size_t i = 0; i < length; i += svcntw()) {\n        v_indices = svld1_gather_s32index_f32(pg, (const float*)indices + i);\n        v_src = svld1_gather_s32index_f32(pg, src, v_indices);\n        svst1_scatter_s32index_f32(pg, dst + i, v_indices, v_src);\n    }\n\n    // Scatter operation\n    for (size_t i = 0; i < length; i += svcntw()) {\n        v_indices = svld1_s32(pg, indices + i);\n        v_src = svld1_f32(pg, src + i);\n        svst1_scatter_s32index_f32(pg, dst, v_indices, v_src);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src;\n    svint32_t v_indices;\n\n    // Gather operation\n    for (size_t i = 0; i < length; i += svcntw()) {\n        v_indices = svld1_gather_s32index_f32(pg, (const float*)indices + i, 1);\n        v_src = svld1_gather_s32_f32(pg, src, v_indices);\n        svst1(pg, dst + i, v_src);\n    }\n\n    // Scatter operation\n    for (size_t i = 0; i < length; i += svcntw()) {\n        v_indices = svld1_gather_s32index_f32(pg, (const float*)indices + i, 1);\n        v_src = svld1(pg, src + i);\n        svst1_scatter_s32_f32(pg, dst, v_indices, v_src);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src;\n    svint32_t v_indices;\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        v_indices = svld1_s32(pg, &indices[i]);\n        v_src = svld1_gather_s32index_f32(pg, src, v_indices);\n        svst1_scatter_s32index_f32(pg, dst, v_indices, v_src);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src;\n    svint32_t v_indices;\n\n    // Gather operation\n    for (size_t i = 0; i < length; i += svcntw()) {\n        v_indices = svld1_s32(pg, &indices[i]);\n        v_src = svld1_gather_f32(pg, src, v_indices);\n        svst1_f32(pg, &dst[i], v_src);\n    }\n\n    // Scatter operation\n    for (size_t i = 0; i < length; i += svcntw()) {\n        v_indices = svld1_s32(pg, &indices[i]);\n        v_src = svld1_f32(pg, &src[i]);\n        svst1_scatter_f32(pg, dst, v_indices, v_src);\n    }\n}\n```"}
{"task_id": "SimdBench_3_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid indexed_access_simd(const float *src, const int *indices, float *dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src;\n    svint32_t v_indices;\n\n    // Gather operation\n    while (svptest_any(pg)) {\n        v_indices = svld1_gather_s32index_f32(pg, (const float*)indices);\n        v_src = svld1_gather_s32_f32(pg, src, v_indices);\n        svst1_scatter_s32_f32(pg, dst, v_indices, v_src);\n\n        indices += svcntw();\n        dst += svcntw();\n        pg = svwhilelt_b32(svcntw(), length);\n    }\n\n    // Reset pointers\n    indices -= length;\n    dst -= length;\n    pg = svwhilelt_b32(0, length);\n\n    // Scatter operation\n    while (svptest_any(pg)) {\n        v_indices = svld1_gather_s32index_f32(pg, (const float*)indices);\n        v_src = svld1_f32(pg, src);\n        svst1_scatter_s32_f32(pg, dst, v_indices, v_src);\n\n        src += svcntw();\n        indices += svcntw();\n        pg = svwhilelt_b32(svcntw(), length);\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t length = end - start + 1;\n    uint64_t i = 0;\n    uint64_t j = length - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b16(i, j);\n        svint16_t vec_i = svld1_s16(pg, &arr[start + i]);\n        svint16_t vec_j = svld1_s16(pg, &arr[start + j]);\n\n        svst1_s16(pg, &arr[start + i], vec_j);\n        svst1_s16(pg, &arr[start + j], vec_i);\n\n        i += svcntw();\n        j -= svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t length = end - start + 1;\n    uint64_t mid = length / 2;\n    svbool_t pg = svwhilelt_b16(0, mid);\n\n    for (uint64_t i = 0; i < mid; i += svcntw()) {\n        svint16_t vec_start = svld1_s16(pg, &arr[start + i]);\n        svint16_t vec_end = svld1_s16(pg, &arr[end - i]);\n\n        svst1_s16(pg, &arr[start + i], vec_end);\n        svst1_s16(pg, &arr[end - i], vec_start);\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t length = end - start + 1;\n    uint64_t i = 0;\n    uint64_t j = length - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b16(i, j);\n        svint16_t vec_i = svld1_s16(pg, &arr[start + i]);\n        svint16_t vec_j = svld1_s16(pg, &arr[start + j]);\n\n        svst1_s16(pg, &arr[start + i], vec_j);\n        svst1_s16(pg, &arr[start + j], vec_i);\n\n        i += svcntw();\n        j -= svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t length = end - start + 1;\n    uint64_t mid = length / 2;\n    svbool_t pg = svwhilelt_b16(0, mid);\n\n    for (uint64_t i = 0; i < mid; i += svcntw()) {\n        svint16_t vec_start = svld1_s16(pg, &arr[start + i]);\n        svint16_t vec_end = svld1_s16(pg, &arr[end - i]);\n\n        svst1_s16(pg, &arr[start + i], vec_end);\n        svst1_s16(pg, &arr[end - i], vec_start);\n    }\n}\n```"}
{"task_id": "SimdBench_4_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_reverse_simd(int16_t *arr, uint64_t start, uint64_t end) {\n    uint64_t length = end - start + 1;\n    uint64_t i = 0;\n    uint64_t j = length - 1;\n\n    while (i < j) {\n        svbool_t pg = svwhilelt_b16(i, j);\n        svint16_t vi = svld1_s16(pg, &arr[start + i]);\n        svint16_t vj = svld1_s16(pg, &arr[start + j]);\n\n        svst1_s16(pg, &arr[start + i], vj);\n        svst1_s16(pg, &arr[start + j], vi);\n\n        i += svcntw();\n        j -= svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n\n    const uint8_t *tensor_slice = tensor + offset;\n\n    svbool_t pg = svwhilelt_b8(0, dim1 * dim2);\n    svuint8_t sv_tensor_slice = svld1(pg, tensor_slice);\n    svst1(pg, slice, sv_tensor_slice);\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n\n    svbool_t pg = svwhilelt_b8(0, slice_size);\n    svuint8_t sv_tensor = svld1(pg, &tensor[offset]);\n    svst1(pg, slice, sv_tensor);\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n\n    const uint8_t *tensor_slice = tensor + offset;\n\n    svbool_t pg = svwhilelt_b8(0, dim1 * dim2);\n    svuint8_t sv_tensor_slice = svld1_gather_u8index_u8(pg, tensor_slice, svindex_u8(0, 1));\n    svst1_u8(pg, slice, sv_tensor_slice);\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t start_idx = slice_idx * slice_size;\n\n    svbool_t pg = svwhilelt_b8(0, slice_size);\n    svuint8_t sv_tensor = svld1(pg, &tensor[start_idx]);\n    svst1(pg, slice, sv_tensor);\n}\n```"}
{"task_id": "SimdBench_5_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid extract_tensor_slice_simd(const uint8_t *tensor, uint8_t *slice, size_t dim1, size_t dim2, size_t dim3, size_t slice_idx) {\n    size_t slice_size = dim1 * dim2;\n    size_t offset = slice_idx * slice_size;\n\n    const uint8_t *tensor_slice = tensor + offset;\n\n    svbool_t pg = svwhilelt_b8(0, dim1 * dim2);\n    svuint8_t sv_tensor_slice = svld1(pg, (const uint8_t *)tensor_slice);\n    svst1(pg, slice, sv_tensor_slice);\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t r, c, i, j;\n    svbool_t pg = svwhilelt_b16(0, block_size);\n\n    for (r = 0; r < rows; r += block_size) {\n        for (c = 0; c < cols; c += block_size) {\n            size_t max_r = (r + block_size < rows) ? r + block_size : rows;\n            size_t max_c = (c + block_size < cols) ? c + block_size : cols;\n\n            for (i = r; i < max_r; ++i) {\n                for (j = c; j < max_c; j += svcntw()) {\n                    svint16_t vec = svld1(pg, &src[i * cols + j]);\n                    svst1(pg, &dst[j * rows + i], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t r, c, i, j;\n    svbool_t pg = svwhilelt_b16(0, block_size);\n\n    for (r = 0; r < rows; r += block_size) {\n        for (c = 0; c < cols; c += block_size) {\n            size_t max_r = (r + block_size < rows) ? r + block_size : rows;\n            size_t max_c = (c + block_size < cols) ? c + block_size : cols;\n\n            for (i = r; i < max_r; ++i) {\n                for (j = c; j < max_c; j += svcntw()) {\n                    svint16_t vec = svld1(pg, &src[i * cols + j]);\n                    svst1(pg, &dst[j * rows + i], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t i, j, k, l;\n    const int16_t *src_block;\n    int16_t *dst_block;\n    svbool_t pg = svwhilelt_b16(0, block_size);\n\n    for (i = 0; i < rows; i += block_size) {\n        for (j = 0; j < cols; j += block_size) {\n            for (k = i; k < i + block_size && k < rows; ++k) {\n                src_block = src + k * cols + j;\n                for (l = j; l < j + block_size && l < cols; ++l) {\n                    svint16_t vec = svld1(pg, src_block);\n                    dst_block = dst + l * rows + k;\n                    svst1(pg, dst_block, vec);\n                    src_block += block_size;\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t r, c, i, j;\n    svbool_t pg = svwhilelt_b16(0, block_size);\n\n    for (r = 0; r < rows; r += block_size) {\n        for (c = 0; c < cols; c += block_size) {\n            size_t max_r = (r + block_size < rows) ? r + block_size : rows;\n            size_t max_c = (c + block_size < cols) ? c + block_size : cols;\n\n            for (i = r; i < max_r; i++) {\n                for (j = c; j < max_c; j += svcntw()) {\n                    svint16_t vec = svld1(pg, &src[i * cols + j]);\n                    svst1(pg, &dst[j * rows + i], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_6_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid blocked_matrix_transpose_simd(const int16_t *src, int16_t *dst, size_t rows, size_t cols, size_t block_size) {\n    size_t i, j, k, l;\n    size_t row_blocks = (rows + block_size - 1) / block_size;\n    size_t col_blocks = (cols + block_size - 1) / block_size;\n\n    for (i = 0; i < row_blocks; ++i) {\n        for (j = 0; j < col_blocks; ++j) {\n            size_t row_start = i * block_size;\n            size_t col_start = j * block_size;\n            size_t row_end = (row_start + block_size < rows) ? row_start + block_size : rows;\n            size_t col_end = (col_start + block_size < cols) ? col_start + block_size : cols;\n\n            for (k = row_start; k < row_end; ++k) {\n                for (l = col_start; l < col_end; l += svcntw()) {\n                    svbool_t pg = svwhilelt_b16(l, col_end);\n                    svint16_t vec = svld1(pg, &src[k * cols + l]);\n                    svst1(pg, &dst[l * rows + k], vec);\n                }\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\n#include <arm_sve.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = svcntw();\n    svfloat32_t sum_vector = svdup_f32(0.0f);\n    float sum = 0.0f;\n\n    for (size_t i = 0; i < dim; i += vector_length) {\n        size_t chunk_size = (dim - i < vector_length) ? dim - i : vector_length;\n        svfloat32_t chunk = svld1(svptrue_b32(), &array[i * dim * dim + i * dim + i]);\n        sum_vector = svadd_f32_x(sum_vector, chunk);\n    }\n\n    sum = svaddv(svptrue_b32(), sum_vector);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\n#include <arm_sve.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t i, j, k;\n    svfloat32_t vsum = svdup_f32(0.0f);\n    svbool_t pg = svwhilelt_b32(0, dim);\n\n    for (i = 0; i < dim; i++) {\n        for (j = 0; j < dim; j++) {\n            for (k = 0; k < dim; k++) {\n                if (i == j && j == k) {\n                    svfloat32_t v = svld1(pg, &array[i * dim * dim + j * dim + k]);\n                    vsum = svadd_f32_x(pg, vsum, v);\n                }\n            }\n        }\n    }\n\n    float sum = svaddv(pg, vsum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\n#include <arm_sve.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = svcntw();\n    svfloat32_t sum_vector = svdup_f32(0.0f);\n    float sum = 0.0f;\n\n    for (size_t i = 0; i < dim; i += vector_length) {\n        size_t chunk_size = (i + vector_length < dim) ? vector_length : dim - i;\n        svbool_t pg = svwhilelt_b32(0, chunk_size);\n        svfloat32_t data_vector = svld1_gather_u32index_f32(pg, array + i * (dim * dim + dim + 1), svindex_u32(0, 1));\n        sum_vector = svadd_f32_m(pg, sum_vector, data_vector);\n    }\n\n    sum = svaddv_f32(svptrue_b32(), sum_vector);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\n#include <arm_sve.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t vector_length = svcntw();\n    svfloat32_t sum_vector = svdup_f32(0.0f);\n    float sum = 0.0f;\n\n    for (size_t i = 0; i < dim; i += vector_length) {\n        size_t chunk_size = (i + vector_length > dim) ? dim - i : vector_length;\n        svfloat32_t chunk = svld1(svptrue_b32(), &array[i * dim * dim + i * dim + i]);\n        sum_vector = svadd_f32_x(svptrue_b32(), sum_vector, chunk);\n    }\n\n    sum = svaddv(svptrue_b32(), sum_vector);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_7_SVE", "completion": "```c\n#include <arm_sve.h>\n\nfloat diagonal_sum_3d_simd(const float *array, size_t dim) {\n    size_t i;\n    float sum = 0.0f;\n    svfloat32_t vg = svdup_f32(0.0f);\n    svbool_t pg = svwhilelt_b32(0, dim);\n\n    for (i = 0; i < dim; i += svcntw()) {\n        svfloat32_t v = svld1(pg, &array[i * (dim * dim + dim + 1)]);\n        vg = svadd_f32_m(pg, vg, v);\n    }\n\n    sum = svaddv(pg, vg);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    svbool_t pg = svwhilelt_b64(0, total_elements);\n    svfloat64_t v_threshold = svdup_f64(threshold);\n    svfloat64_t v_scale = svdup_f64(scale);\n\n    for (i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v_src = svld1(pg, &src[i]);\n        svbool_t p_gt_threshold = svcmple_f64(pg, v_threshold, v_src);\n\n        svfloat64_t v_scaled = svmul_f64_z(pg, p_gt_threshold, v_src, v_scale);\n        svfloat64_t v_dst = svsel_f64(p_gt_threshold, v_scaled, v_src);\n\n        svst1(pg, &dst[i], v_dst);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total_elements = rows * cols;\n    svbool_t pg = svwhilelt_b64_s64(0, total_elements);\n\n    svfloat64_t v_threshold = svdup_f64(threshold);\n    svfloat64_t v_scale = svdup_f64(scale);\n\n    const double *src_ptr = src;\n    double *dst_ptr = dst;\n\n    while (svptest_any_z(pg, pg)) {\n        svfloat64_t v_src = svld1_f64(pg, src_ptr);\n        svbool_t p_gt_threshold = svcmpgt_f64(pg, v_src, v_threshold);\n\n        svfloat64_t v_scaled = svmul_f64_z(p_gt_threshold, v_src, v_scale);\n        svfloat64_t v_dst = svsel_f64(p_gt_threshold, v_scaled, v_src);\n\n        svst1_f64(pg, dst_ptr, v_dst);\n\n        src_ptr += svcntw();\n        dst_ptr += svcntw();\n        pg = svwhilelt_b64_s64(svcntw(), total_elements);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total_elements = rows * cols;\n    svbool_t pg = svwhilelt_b64_s64(0, total_elements);\n\n    svfloat64_t vthreshold = svdup_f64(threshold);\n    svfloat64_t vscale = svdup_f64(scale);\n\n    const double *src_ptr = src;\n    double *dst_ptr = dst;\n\n    while (svptest_any(pg)) {\n        svfloat64_t vsrc = svld1(pg, src_ptr);\n        svfloat64_t vdst = svdup_f64(0.0);\n\n        svbool_t p = svpgt(pg, vsrc, vthreshold);\n        vdst = svsel(p, svmul_f64_x(pg, vsrc, vscale), vsrc);\n\n        svst1(pg, dst_ptr, vdst);\n\n        src_ptr += svcntw();\n        dst_ptr += svcntw();\n        pg = svwhilelt_b64_s64(svcntw(), total_elements);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    svfloat64_t v_threshold = svdup_f64(threshold);\n    svfloat64_t v_scale = svdup_f64(scale);\n\n    for (i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v_src = svld1_f64(svptrue_b64(), &src[i]);\n        svbool_t p_gt = svcmpt_f64(svwhilelt_b64(i, total_elements), v_src, v_threshold);\n        svfloat64_t v_scaled = svmul_f64_m(p_gt, v_src, v_scale);\n        svfloat64_t v_result = svsel_f64(p_gt, v_scaled, v_src);\n        svst1_f64(svptrue_b64(), &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_8_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_scale_simd(const double *src, double *dst, size_t rows, size_t cols, double threshold, double scale) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    svbool_t pg = svwhilelt_b64_s64(0, total_elements);\n    svfloat64_t v_threshold = svdup_f64_z(pg, threshold);\n    svfloat64_t v_scale = svdup_f64_z(pg, scale);\n\n    for (i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v_src = svld1_f64(pg, &src[i]);\n        svbool_t p_gt_threshold = svcmpt_f64(pg, v_src, v_threshold);\n\n        svfloat64_t v_scaled = svmul_f64_z(p_gt_threshold, v_src, v_scale);\n        svfloat64_t v_dst = svsel_f64(p_gt_threshold, v_scaled, v_src);\n\n        svst1_f64(pg, &dst[i], v_dst);\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vector_length = svcntd();\n    size_t i, j;\n\n    for (i = 0; i < rows; ++i) {\n        size_t new_row_index = indices[i] * cols;\n        size_t old_row_index = i * cols;\n\n        for (j = 0; j < cols; j += vector_length) {\n            size_t chunk_size = (cols - j < vector_length) ? cols - j : vector_length;\n\n            svfloat64_t vec = svld1_f64(svptrue_b64(), &src[new_row_index + j]);\n            svst1_f64(svptrue_b64(), &dst[old_row_index + j], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vector_length = svcntd();\n    size_t i, j;\n\n    for (i = 0; i < rows; ++i) {\n        size_t index = indices[i] * cols;\n        for (j = 0; j < cols; j += vector_length) {\n            size_t chunk_size = (cols - j < vector_length) ? cols - j : vector_length;\n            svbool_t pg = svwhilelt_b64(j, cols);\n            svfloat64_t vec = svld1_f64(pg, &src[index + j]);\n            svst1_f64(pg, &dst[i * cols + j], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vector_length = svcntd();\n    size_t col_chunks = cols / vector_length;\n    size_t col_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row_index = indices[i] * cols;\n        size_t dst_row_index = i * cols;\n\n        for (size_t j = 0; j < col_chunks; ++j) {\n            svfloat64_t vec = svld1_f64(svptrue_b64(), &src[src_row_index + j * vector_length]);\n            svst1_f64(svptrue_b64(), &dst[dst_row_index + j * vector_length], vec);\n        }\n\n        if (col_remainder > 0) {\n            svbool_t pg = svwhilelt_b64(0, col_remainder);\n            svfloat64_t vec = svld1_f64(pg, &src[src_row_index + col_chunks * vector_length]);\n            svst1_f64(pg, &dst[dst_row_index + col_chunks * vector_length], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    size_t vector_length = svcntd();\n    size_t col_chunks = cols / vector_length;\n    size_t col_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        size_t src_row_index = indices[i] * cols;\n        size_t dst_row_index = i * cols;\n\n        for (size_t j = 0; j < col_chunks; ++j) {\n            svfloat64_t vec = svld1(svptrue_b64(), &src[src_row_index + j * vector_length]);\n            svst1(svptrue_b64(), &dst[dst_row_index + j * vector_length], vec);\n        }\n\n        if (col_remainder > 0) {\n            svfloat64_t vec = svld1(svptrue_b64(), &src[src_row_index + col_chunks * vector_length]);\n            svst1_x2(svptrue_b64(), &dst[dst_row_index + col_chunks * vector_length], vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_9_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid reorder_matrix_rows_simd(const double *src, double *dst, size_t rows, size_t cols, const size_t *indices) {\n    svbool_t pg = svwhilelt_b64(0, rows);\n    for (size_t i = 0; i < rows; ++i) {\n        size_t index = indices[i];\n        const double *src_row = src + index * cols;\n        double *dst_row = dst + i * cols;\n        size_t j = 0;\n        for (j = 0; j <= cols - svcntd(); j += svcntd()) {\n            svfloat64_t vec = svld1_f64(pg, &src_row[j]);\n            svst1_f64(pg, &dst_row[j], vec);\n        }\n        for (; j < cols; ++j) {\n            dst_row[j] = src_row[j];\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_scalar = svdup_n_s64(scalar);\n\n    while (svptest_any(pg)) {\n        svint64_t v_src1 = svld1_s64(pg, src1);\n        svint64_t v_src2 = svld1_s64(pg, src2);\n        svint64_t v_add = svadd_s64_x(pg, v_src1, v_src2);\n        v_add = svadd_s64_x(pg, v_add, v_scalar);\n        svint64_t v_result = svrshr_n_s64(pg, v_add, 1);\n        svst1_s64(pg, dst, v_result);\n\n        src1 += svcntd();\n        src2 += svcntd();\n        dst += svcntd();\n        pg = svwhilelt_b64(svcntd(), length);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_scalar = svdup_n_s64(scalar);\n\n    while (svptest_any(pg)) {\n        svint64_t v_src1 = svld1_s64(pg, &src1[svcntp_b64(pg, 0)]);\n        svint64_t v_src2 = svld1_s64(pg, &src2[svcntp_b64(pg, 0)]);\n        svint64_t v_add = svadd_s64_x(pg, v_src1, v_src2);\n        v_add = svadd_s64_x(pg, v_add, v_scalar);\n        svint64_t v_result = svrshr_n_s64(pg, v_add, 1);\n        svst1_s64(pg, &dst[svcntp_b64(pg, 0)], v_result);\n\n        src1 += svcntp_b64(pg, 0);\n        src2 += svcntp_b64(pg, 0);\n        dst += svcntp_b64(pg, 0);\n        length -= svcntp_b64(pg, 0);\n        pg = svwhilelt_b64(0, length);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_scalar = svdup_n_s64(scalar);\n\n    do {\n        svint64_t v_src1 = svld1_s64(pg, &src1[0]);\n        svint64_t v_src2 = svld1_s64(pg, &src2[0]);\n        svint64_t v_add = svadd_s64_x(pg, v_src1, v_src2);\n        v_add = svadd_s64_x(pg, v_add, v_scalar);\n        svint64_t v_result = svrshr_n_s64(pg, v_add, 1);\n        svst1_s64(pg, &dst[0], v_result);\n\n        src1 += svcntd();\n        src2 += svcntd();\n        dst += svcntd();\n        length -= svcntd();\n        pg = svwhilelt_b64(0, length);\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_scalar = svdup_n_s64(scalar);\n    svint64_t v_two = svdup_n_s64(2);\n\n    while (svptest_any(pg)) {\n        svint64_t v_src1 = svld1_s64(pg, src1);\n        svint64_t v_src2 = svld1_s64(pg, src2);\n        svint64_t v_sum = svadd_s64_z(pg, v_src1, v_src2);\n        v_sum = svadd_s64_z(pg, v_sum, v_scalar);\n        v_sum = svrshr_n_s64_z(pg, v_sum, v_two, 1);\n        svst1_s64(pg, dst, v_sum);\n\n        src1 += svcntd();\n        src2 += svcntd();\n        dst += svcntd();\n        pg = svwhilelt_b64(svcntd(), length);\n    }\n}\n```"}
{"task_id": "SimdBench_10_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_vector_add_simd(const int64_t *src1, const int64_t *src2, int64_t *dst, int64_t scalar, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_scalar = svdup_n_s64(scalar);\n    svint64_t v_two = svdup_n_s64(2);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint64_t v_src1 = svld1_s64(pg, &src1[i]);\n        svint64_t v_src2 = svld1_s64(pg, &src2[i]);\n\n        svint64_t v_sum = svadd_s64_z(pg, v_src1, v_src2);\n        v_sum = svadd_s64_z(pg, v_sum, v_scalar);\n        v_sum = svrshr_n_s64_z(pg, v_sum, 1);\n\n        svst1_s64(pg, &dst[i], v_sum);\n    }\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v = svld1_gather_u32index_s32(pg, src, svindex_s32(0, 2));\n    svint32_t min_v = svmin_s32_x(pg, v, v);\n\n    while (svptest_any(pg, pg)) {\n        svint32_t current_v = svld1_gather_u32index_s32(pg, src, svindex_s32(svcntp_b32(pg, pg), 2));\n        min_v = svmin_s32_x(pg, min_v, current_v);\n        pg = svwhilelt_b32(svcntp_b32(pg, pg), length);\n    }\n\n    int min_val = svminv_s32(pg, min_v);\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_min = svdup_n_s32(INT32_MAX);\n    svint32_t v_src = svld1_s32(pg, src);\n\n    svbool_t even_pg = svcmpne_n_s32(pg, svand_n_s32_x(pg, v_src, 1), 0);\n    v_min = svmin_s32_m(even_pg, v_min, v_src);\n\n    int min_val = INT32_MAX;\n    while (svptest_any(pg, even_pg)) {\n        int temp_min = svminv_s32(even_pg, v_src);\n        if (temp_min < min_val) min_val = temp_min;\n        src += svcntd();\n        length -= svcntd();\n        pg = svwhilelt_b32(0, length);\n        v_src = svld1_s32(pg, src);\n        even_pg = svcmpne_n_s32(pg, svand_n_s32_x(pg, v_src, 1), 0);\n        v_min = svmin_s32_m(even_pg, v_min, v_src);\n    }\n\n    return min_val == INT32_MAX ? -1 : min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_min = svdup_n_s32(INT32_MAX);\n    svint32_t v_even_mask = svdup_n_s32(1);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t v_data = svld1_s32(pg, &src[i]);\n        svbool_t even_mask = svcmpne_s32(pg, svand_s32_x(pg, v_data, v_even_mask), 0);\n        v_min = svmin_s32_m(even_mask, v_min, v_data);\n    }\n\n    int min_val = svminv_s32(pg, v_min);\n    return min_val == INT32_MAX ? -1 : min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_src = svld1_s32(pg, src);\n    svint32_t v_even = svand_n_s32_x(pg, v_src, 1);\n    svint32_t v_min = svmin_s32_x(pg, v_even, v_even);\n\n    int min_val = INT32_MAX;\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b32(i, length);\n        v_src = svld1(pg, src + i);\n        v_even = svand_n_s32_x(pg, v_src, 1);\n        v_min = svmin_s32_x(pg, v_min, v_even);\n    }\n\n    min_val = svminv_s32(pg, v_min);\n    return min_val == INT32_MAX ? -1 : min_val;\n}\n```"}
{"task_id": "SimdBench_11_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint vector_even_min_simd(const int *src, size_t length) {\n    if (length == 0) return -1;\n\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_min = svdup_n_s32(INT32_MAX);\n    svint32_t v_even_mask = svdup_n_s32(1);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint32_t v_data = svld1_s32(pg, &src[i]);\n        svbool_t even_mask = svcmpne_s32(pg, svand_s32_x(pg, v_data, v_even_mask), svdup_n_s32(0));\n        v_min = svmin_s32_m(even_mask, v_min, v_data);\n    }\n\n    int min_val = svminv_s32(pg, v_min);\n    return min_val;\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_shift = svdup_n_s32(-shift);\n    svuint32_t v_shift_u = svdup_n_u32(shift);\n\n    while (svptest_any(pg)) {\n        svint32_t v_src = svld1_s32(pg, src);\n        svint32_t v_arith_shift = svasr_n_s32_x(pg, v_src, shift);\n        svuint32_t v_logic_shift = svlsr_n_u32_x(pg, svreinterpret_u32_s32(v_src), shift);\n        svint32_t v_logic_shift_reinterpret = svreinterpret_s32_u32(v_logic_shift);\n        svint32_t v_result = svadd_s32_x(pg, v_arith_shift, v_logic_shift_reinterpret);\n        svst1_s32(pg, dst, v_result);\n\n        src += svcntw();\n        dst += svcntw();\n        pg = svwhilelt_b32(svcntw(), length - svcntw());\n    }\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_shift = svdup_n_s32(shift);\n\n    svint32_t v_src = svld1_s32(pg, src);\n    svint32_t v_arith_shift = svasr_n_s32_x(pg, v_src, v_shift);\n    svuint32_t v_uint_src = svreinterpret_u32_s32(v_src);\n    svuint32_t v_logic_shift = svlsr_n_u32_x(pg, v_uint_src, v_shift);\n    svint32_t v_logic_shift_int = svreinterpret_s32_u32(v_logic_shift);\n    svint32_t v_result = svadd_s32_x(pg, v_arith_shift, v_logic_shift_int);\n    svst1_s32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_shift = svdup_n_s32(-shift);\n\n    svint32_t v_src = svld1_s32(pg, src);\n    svint32_t v_arith_shift = svasr_n_s32_x(pg, v_src, shift);\n\n    svuint32_t v_uint_src = svreinterpret_u32_s32(v_src);\n    svuint32_t v_logic_shift = svlsr_n_u32_x(pg, v_uint_src, shift);\n    svint32_t v_logic_shift_int = svreinterpret_s32_u32(v_logic_shift);\n\n    svint32_t v_result = svadd_s32_x(pg, v_arith_shift, v_logic_shift_int);\n    svst1_s32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_shift = svdup_n_s32(-shift);\n\n    svint32_t v_src = svld1_s32(pg, src);\n    svint32_t v_arith_shift = svasr_s32_x(pg, v_src, v_shift);\n\n    svuint32_t v_uint_src = svreinterpret_u32_s32(v_src);\n    svuint32_t v_logic_shift = svlsr_u32_x(pg, v_uint_src, shift);\n    svint32_t v_logic_shift_reinterpret = svreinterpret_s32_u32(v_logic_shift);\n\n    svint32_t v_result = svadd_s32_x(pg, v_arith_shift, v_logic_shift_reinterpret);\n    svst1_s32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_12_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid mixed_right_shift_simd(const int *src, int *dst, uint8_t shift, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svint32_t v_src = svld1_s32(pg, src);\n\n    svint32_t v_arith_shift = svasr_n_s32_x(pg, v_src, shift);\n    svuint32_t v_logic_shift = svlsr_n_u32_x(pg, svreinterpret_u32_s32(v_src), shift);\n\n    svint32_t v_result = svadd_s32_x(pg, v_arith_shift, svreinterpret_s32_u32(v_logic_shift));\n\n    svst1_s32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    svint32_t vg = svindex_s32(0, 1);\n    svint32_t sum_vec = svdup_n_s32(0);\n    int64_t sum = 0;\n\n    for (size_t i = 0; i < total_elements; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, total_elements);\n        svint32_t vec = svld1_gather_u32index_s32(pg, (const int32_t *)matrix + i, vg);\n        sum_vec = svadd_s32_m(pg, sum_vec, vec);\n    }\n\n    sum = svaddv_s32(svptrue_b32(), sum_vec);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    svint32_t vsum = svdup_n_s32(0);\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    const int *ptr = matrix;\n    while (svptest_any(pg)) {\n        svint32_t vdata = svld1(pg, ptr);\n        vsum = svadd_s32_x(pg, vsum, vdata);\n        ptr += svcntp_b32(pg);\n        pg = svwhilelt_b32(svcntp_b32(pg), total_elements - svcntp_b32(pg));\n    }\n\n    int64_t sum = 0;\n    for (size_t i = 0; i < svcntw(); ++i) {\n        sum += svget1(vsum, i);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    svint32_t vsum = svdup_n_s32(0);\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    const int *ptr = matrix;\n    int64_t sum = 0;\n\n    while (svptest_any(pg)) {\n        svint32_t vdata = svld1_gather_u32index_s32(pg, ptr);\n        vsum = svadd_s32_x(pg, vsum, vdata);\n        ptr += svcntw();\n        pg = svwhilelt_b32(svcntw(), total_elements - svcntw());\n    }\n\n    sum = svaddv_s32(pg, vsum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    svint32_t vsum = svdup_n_s32(0);\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    const int *ptr = matrix;\n    while (svptest_any(pg)) {\n        svint32_t vdata = svld1(pg, ptr);\n        vsum = svadd_s32_x(pg, vsum, vdata);\n        ptr += svcntp_b32(pg);\n        pg = svwhilelt_b32(svcntp_b32(pg), total_elements - svcntp_b32(pg));\n    }\n\n    int64_t sum = 0;\n    for (size_t i = 0; i < svcntw(); ++i) {\n        sum += svget1(vsum, i);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_13_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t matrix_sum_simd(const int *matrix, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    svint32_t vsum = svdup_n_s32(0);\n    svbool_t pg = svwhilelt_b32(0, total_elements);\n\n    const int *ptr = matrix;\n    int64_t sum = 0;\n\n    while (svptest_any(pg)) {\n        svint32_t vdata = svld1_gather_u32index_s32(pg, ptr);\n        vsum = svadd_s32_x(pg, vsum, vdata);\n        ptr += svcntp_b32(pg);\n        pg = svwhilelt_b32(svcntp_b32(pg), total_elements - svcntp_b32(pg));\n    }\n\n    sum = svaddv_s32(pg, vsum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t v = svld1_s8(pg, &src[0]);\n    svint8_t max_v = svdup_s8(INT8_MIN);\n    svuint8_t max_idx = svdup_u8(0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b8(i, length);\n        v = svld1(pg, &src[i]);\n        svint8_t tmp_max_v = svmax_s8_x(pg, max_v, v);\n        svuint8_t tmp_max_idx = svsel_u8(pg, svindex_u8(i, 1), max_idx);\n\n        max_v = tmp_max_v;\n        max_idx = tmp_max_idx;\n    }\n\n    int8_t max_val;\n    size_t max_index;\n    svmax_s8_x(svptrue_b8(), max_v, svdup_s8(INT8_MIN));\n    svst1_s8(svptrue_b8(), &max_val);\n    svst1_u8(svptrue_b8(), &max_index);\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t v = svld1(pg, &src[0]);\n    svint8_t max_v = svdup_n_s8(INT8_MIN);\n    svuint8_t max_idx = svdup_n_u8(0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b8(i, length);\n        v = svld1(pg, &src[i]);\n        svbool_t mask = svcmpgt(pg, v, max_v);\n        max_v = svsel_s8(mask, v, max_v);\n        svuint8_t idx = svindex_u8(0, 1);\n        max_idx = svsel_u8(mask, idx, max_idx);\n    }\n\n    int8_t max_val = svmaxv_s8(pg, max_v);\n    size_t max_index = svmaxv_u8(pg, max_idx);\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    svbool_t pg = svwhilelt_b8_s32(0, length);\n    svint8_t v = svld1_s8(pg, src);\n    svint8_t max_v = svdup_s8(INT8_MIN);\n    svuint64_t idx = svindex_u64_x2(0, 1);\n    svuint64_t max_idx = svdup_u64(0);\n\n    do {\n        svbool_t mask = svcmpgt_s8(pg, v, max_v);\n        max_v = svsel_s8(mask, v, max_v);\n        max_idx = svsel_u64(mask, idx, max_idx);\n        idx = svadd_u64_x(pg, idx, 1);\n        v = svld1_s8(pg, src + svcntp_b8(pg));\n    } while (svptest_any(pg, svcmpeq_s32(pg, svcntp_b8(pg), length)));\n\n    return (size_t)svmax_u64_x(pg, max_idx);\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    svbool_t pg = svwhilelt_b8_u64(0, length);\n    svint8_t v = svld1_s8(pg, src);\n    svint8_t max_v = svdup_s8(INT8_MIN);\n    svuint64_t idx = svindex_u64(0, 1);\n    svuint64_t max_idx = svdup_u64(0);\n\n    do {\n        svbool_t mask = svcmpgt_s8(pg, v, max_v);\n        max_v = svsel_s8(mask, v, max_v);\n        max_idx = svsel_u64(mask, idx, max_idx);\n        idx = svadd_u64_x(pg, idx, idx);\n        v = svld1_s8(pg, src + svcntp_b8(pg, svtrue_b8()));\n    } while (svptest_any(pg, svcmpgt_u64(pg, svsub_u64_x(pg, svcntp_u64(pg, svtrue_u64()), 1), 0)));\n\n    return (size_t)svmax_u64(pg, max_idx);\n}\n```"}
{"task_id": "SimdBench_14_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t argmax_simd(const int8_t *src, size_t length) {\n    if (length == 0) return 0;\n\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t v = svld1_s8(pg, src);\n    svint8_t max_v = svdup_s8(INT8_MIN);\n    svuint8_t max_idx = svdup_u8(0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        pg = svwhilelt_b8(i, length);\n        v = svld1(pg, &src[i]);\n        svbool_t mask = svcmpgt(pg, v, max_v);\n        max_v = svsel_s8(pg, v, max_v, mask);\n        svuint8_t idx = svindex_u8(0, 1);\n        max_idx = svsel_u8(pg, idx, max_idx, mask);\n    }\n\n    int8_t max_val = svmaxv_s8(max_v);\n    size_t max_index = svmaxv_u8(max_idx);\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, (int16_t)length);\n    svuint16_t v_index = svindex_u16(0, 1);\n    svuint16_t v_mask = svdup_n_u16((uint16_t)mask);\n\n    svuint16_t v_src1 = svld1(pg, src1);\n    svuint16_t v_src2 = svld1(pg, src2);\n\n    svuint16_t v_and = svand_x(pg, v_index, v_mask);\n    svbool_t cond = svcmpeq_n_u16(pg, v_and, 0);\n\n    svuint16_t v_result = svsel_u16(cond, v_src2, v_src1);\n\n    svst1(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svuint16_t v_index = svindex_u16(0, 1);\n    svuint16_t v_mask = svdup_n_u16(mask);\n\n    svuint16_t v_src1 = svld1(pg, &src1[0]);\n    svuint16_t v_src2 = svld1(pg, &src2[0]);\n\n    svuint16_t v_cond = svand_n_u16_z(pg, v_index, mask);\n    svuint16_t v_result = svsel_u16(svcmpne_n_u16(pg, v_cond, 0), v_src1, v_src2);\n\n    svst1(pg, &dst[0], v_result);\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b16(i, length);\n\n    svuint16_t v_src1 = svld1_u16(pg, &src1[i]);\n    svuint16_t v_src2 = svld1_u16(pg, &src2[i]);\n    svuint16_t v_dst;\n\n    svuint32_t v_mask = svdup_n_u32(mask);\n    svuint32_t v_index = svindex_u32(0, 1);\n    svbool_t cond = svcmpne_n_u32(pg, svand_x(pg, v_index, v_mask), 0);\n\n    v_dst = svsel_u16(cond, v_src1, v_src2);\n\n    svst1_u16(pg, &dst[i], v_dst);\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, (int16_t)length);\n    svuint16_t vmask = svdup_n_u32(mask);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svuint16_t vindex = svindex_u16(i, 1);\n        svbool_t vcond = svand_x(pg, svcmpne_n_u16(pg, svand_n_u16(pg, vindex, vmask), 0));\n\n        svuint16_t vsrc1 = svld1(vcond, &src1[i]);\n        svuint16_t vsrc2 = svld1(svnot_b_z(pg, vcond), &src2[i]);\n        svuint16_t vdst = svmov_x(pg, vsrc1, vsrc2);\n\n        svst1(pg, &dst[i], vdst);\n    }\n}\n```"}
{"task_id": "SimdBench_15_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_blend_simd(const uint16_t* src1, const uint16_t* src2, uint32_t mask, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svuint16_t v_src1 = svld1_u16(pg, src1);\n    svuint16_t v_src2 = svld1_u16(pg, src2);\n    svuint16_t v_index = svindex_u16(0, 1);\n    svuint16_t v_mask = svdup_n_u16(mask);\n    svuint16_t v_and = svand_x(pg, v_index, v_mask);\n    svbool_t cond = svcmpeq_x(pg, v_and, svdup_n_u16(0));\n    svuint16_t v_dst = svsel_x(pg, v_src1, v_src2, cond);\n    svst1_x(pg, dst, v_dst);\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v = svld1_u32(pg, src);\n    svuint32_t count = svcntw();\n    svuint32_t result = svcntp_b32(svcmpeq_n_u32(pg, v, count), count);\n    svst1_u32(pg, dst, result);\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v = svld1_u32(pg, src);\n\n    svuint32_t v1 = svcntw_b32(svdup_n_u32(1), v);\n    svuint32_t v2 = svcntw_b32(svdup_n_u32(2), v);\n    svuint32_t v4 = svcntw_b32(svdup_n_u32(4), v);\n    svuint32_t v8 = svcntw_b32(svdup_n_u32(8), v);\n    svuint32_t v16 = svcntw_b32(svdup_n_u32(16), v);\n\n    svuint32_t popcount = svadd_u32_x(pg, v1, v2);\n    popcount = svadd_u32_x(pg, popcount, v4);\n    popcount = svadd_u32_x(pg, popcount, v8);\n    popcount = svadd_u32_x(pg, popcount, v16);\n\n    svst1_u32(pg, dst, popcount);\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v = svld1_u32(pg, src);\n\n    svuint32_t v1 = svcntw_b32(svdup_n_u32(1), v);\n    svuint32_t v2 = svlsr_n_u32_z(pg, v, 1);\n    svuint32_t v3 = svand_u32_z(pg, v, v2);\n    svuint32_t v4 = svsub_n_u32_z(pg, v1, 1);\n    svuint32_t v5 = svadd_u32_z(pg, v3, v4);\n    svuint32_t v6 = svlsr_n_u32_z(pg, v5, 1);\n    svuint32_t v7 = svand_u32_z(pg, v5, v6);\n    svuint32_t v8 = svsub_n_u32_z(pg, v5, 1);\n    svuint32_t v9 = svadd_u32_z(pg, v7, v8);\n    svuint32_t v10 = svlsr_n_u32_z(pg, v9, 1);\n    svuint32_t v11 = svand_u32_z(pg, v9, v10);\n    svuint32_t v12 = svsub_n_u32_z(pg, v9, 1);\n    svuint32_t v13 = svadd_u32_z(pg, v11, v12);\n    svuint32_t v14 = svlsr_n_u32_z(pg, v13, 1);\n    svuint32_t v15 = svand_u32_z(pg, v13, v14);\n    svuint32_t v16 = svsub_n_u32_z(pg, v13, 1);\n    svuint32_t v17 = svadd_u32_z(pg, v15, v16);\n\n    svst1_u32(pg, dst, v17);\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, length);\n\n    svuint32_t v_src = svld1_u32(pg, &src[i]);\n    svuint32_t v_dst = svcntw_u32(pg, v_src);\n\n    svst1_u32(pg, &dst[i], v_dst);\n\n    i += svcntw();\n}\n```"}
{"task_id": "SimdBench_16_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid population_count_simd(const uint32_t* src, uint32_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v = svld1_u32(pg, src);\n\n    svuint32_t v1 = svcntw_b32(svdup_n_b32(1), v);\n    svuint32_t v2 = svlsr_n_u32_x(pg, v, 1) & svdup_n_u32(0x55555555);\n    svuint32_t v4 = svlsr_n_u32_x(pg, v, 2) & svdup_n_u32(0x33333333);\n    svuint32_t v8 = svlsr_n_u32_x(pg, v, 4) & svdup_n_u32(0x0F0F0F0F);\n    svuint32_t v16 = svlsr_n_u32_x(pg, v, 8) & svdup_n_u32(0x00FF00FF);\n    svuint32_t v32 = svlsr_n_u32_x(pg, v, 16) & svdup_n_u32(0x0000FFFF);\n\n    v = svadd_u32_x(pg, v, v1);\n    v = svadd_u32_x(pg, v, v2);\n    v = svadd_u32_x(pg, v, v4);\n    v = svadd_u32_x(pg, v, v8);\n    v = svadd_u32_x(pg, v, v16);\n    v = svadd_u32_x(pg, v, v32);\n\n    svst1_u32(pg, dst, v);\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdint.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svuint16_t v_src1 = svld1_u16(pg, src1);\n    svuint16_t v_src2 = svld1_u16(pg, src2);\n    svuint16_t v_result = svqadd_u16(pg, v_src1, v_src2);\n    svst1_u16(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, (int16_t)length);\n    svuint16_t v_src1 = svld1_u16(pg, src1);\n    svuint16_t v_src2 = svld1_u16(pg, src2);\n    svuint16_t v_result = svqadd_u16(pg, v_src1, v_src2);\n    svst1_u16(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, (int16_t)length);\n    svuint16_t v_src1 = svld1_u16(pg, src1);\n    svuint16_t v_src2 = svld1_u16(pg, src2);\n    svuint16_t v_result = svqadd_u16(pg, v_src1, v_src2);\n    svst1_u16(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svuint16_t v_src1 = svld1_u16(pg, src1);\n    svuint16_t v_src2 = svld1_u16(pg, src2);\n    svuint16_t v_result = svqadd_u16(pg, v_src1, v_src2);\n    svst1_u16(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_17_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <limits.h>\n\nvoid saturating_add_simd(const uint16_t* src1, const uint16_t* src2, uint16_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, (int16_t)length);\n    svuint16_t v_src1 = svld1_u16(pg, src1);\n    svuint16_t v_src2 = svld1_u16(pg, src2);\n    svuint16_t v_max = svdup_n_u16(UINT16_MAX);\n    svuint16_t v_sum = svadd_u16_x(pg, v_src1, v_src2);\n    v_sum = svmin_u16_x(pg, v_sum, v_max);\n    svst1_u16(pg, dst, v_sum);\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    svbool_t pg = svwhilelt_b64_s64(0, m);\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t sum = svdup_f64_z(pg, 0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a_val = svld1_f64(pg, &A[i * n + k]);\n                svfloat64_t b_val = svld1_f64(pg, &B[k * p + j]);\n                svbool_t in_range_a = svcmpge_f64(pg, a_val, svdup_f64(-100.0)) & svcmple_f64(pg, a_val, svdup_f64(100.0));\n                svbool_t in_range_b = svcmpge_f64(pg, b_val, svdup_f64(-100.0)) & svcmple_f64(pg, b_val, svdup_f64(100.0));\n                svbool_t in_range = in_range_a & in_range_b;\n                sum = svadd_f64_m(in_range, sum, svmul_f64_z(pg, a_val, b_val));\n            }\n            C[i * p + j] = svaddv_f64(pg, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t sum = svdup_f64(-0.0);\n            svbool_t pg = svwhilelt_b64(0, n);\n\n            size_t k = 0;\n            while (svptest_any(pg)) {\n                svfloat64_t a_vec = svld1(pg, &A[i * n + k]);\n                svfloat64_t b_vec = svld1(pg, &B[k * p + j]);\n\n                svbool_t mask_a = svcmpge(pg, a_vec, svdup_f64(-100.0)) & svcmple(pg, a_vec, svdup_f64(100.0));\n                svbool_t mask_b = svcmpge(pg, b_vec, svdup_f64(-100.0)) & svcmple(pg, b_vec, svdup_f64(100.0));\n                svbool_t mask = mask_a & mask_b;\n\n                sum = svadd_f64_m(mask, sum, svmul_f64_m(mask, a_vec, b_vec));\n\n                k += svcntp_b64(pg);\n                pg = svwhilelt_b64(k, n);\n            }\n\n            C[i * p + j] = svaddv(pg, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    svbool_t pg = svwhilelt_b64_s64(0, m);\n    svfloat64_t min_val = svdup_f64(-100.0);\n    svfloat64_t max_val = svdup_f64(100.0);\n\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n            svbool_t pg_local = svwhilelt_b64_s64(0, n);\n\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a_val = svld1_f64(pg_local, &A[i * n + k]);\n                svfloat64_t b_val = svld1_f64(pg_local, &B[k * p + j]);\n\n                svbool_t in_range_a = svcmge_f64(pg_local, a_val, min_val) & svcmle_f64(pg_local, a_val, max_val);\n                svbool_t in_range_b = svcmge_f64(pg_local, b_val, min_val) & svcmle_f64(pg_local, b_val, max_val);\n\n                svbool_t in_range = in_range_a & in_range_b;\n                sum = svadd_f64_m(in_range, sum, svmul_f64_m(in_range, a_val, b_val));\n            }\n\n            C[i * p + j] = svaddv_f64(pg, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    svbool_t pg = svwhilelt_b64_s64(0, m);\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t k = 0; k < p; ++k) {\n            svfloat64_t sum = svdup_f64(0.0);\n            size_t j = 0;\n            for (; j <= n - svcntd(); j += svcntd()) {\n                svfloat64_t a = svld1_f64(pg, &A[i * n + j]);\n                svfloat64_t b = svld1_f64(pg, &B[j * p + k]);\n                svbool_t mask_a = svcmpge_f64(pg, a, svdup_f64(-100.0)) & svcmpge_f64(pg, svdup_f64(100.0), a);\n                svbool_t mask_b = svcmpge_f64(pg, b, svdup_f64(-100.0)) & svcmpge_f64(pg, svdup_f64(100.0), b);\n                svbool_t mask = mask_a & mask_b;\n                sum = svadd_f64_m(mask, sum, svmul_f64_m(mask, a, b));\n            }\n            for (; j < n; ++j) {\n                double a = A[i * n + j];\n                double b = B[j * p + k];\n                if (a >= -100.0 && a <= 100.0 && b >= -100.0 && b <= 100.0) {\n                    sum = svadd_f64_x(pg, sum, svdup_f64(a * b));\n                }\n            }\n            C[i * p + k] = svaddv_f64(pg, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_18_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid range_matrix_mul_simd(const double* A, const double* B, double* C, size_t m, size_t n, size_t p) {\n    svbool_t pg = svwhilelt_b64_s64(0, m);\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t sum = svdup_f64_z(pg, 0.0);\n            for (size_t k = 0; k < n; ++k) {\n                double a_val = A[i * n + k];\n                double b_val = B[k * p + j];\n                if (a_val >= -100 && a_val <= 100 && b_val >= -100 && b_val <= 100) {\n                    sum = svmla_f64_m(pg, sum, svdup_f64_z(pg, a_val), svdup_f64_z(pg, b_val));\n                }\n            }\n            C[i * p + j] = svaddv_f64(pg, sum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (i = 0; i + svcntd() <= total_size; i += svcntd()) {\n        svint64_t va = svld1_s64(svptrue_b64(), &A[i]);\n        svint64_t vb = svld1_s64(svptrue_b64(), &B[i]);\n        svint64_t vc = svadd_s64_x(svptrue_b64(), va, vb);\n        svst1_s64(svptrue_b64(), &C[i], vc);\n    }\n\n    for (; i < total_size; ++i) {\n        C[i] = A[i] + B[i];\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (i = 0; i < total_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b64(i, total_size);\n        svint64_t va = svld1_s64(pg, &A[i]);\n        svint64_t vb = svld1_s64(pg, &B[i]);\n        svint64_t vc = svadd_s64_x(pg, va, vb);\n        svst1_s64(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    svbool_t pg = svwhilelt_b64_s64(0, total_size);\n\n    for (size_t i = 0; i < total_size; i += svcntd()) {\n        svint64_t va = svld1_s64(pg, &A[i]);\n        svint64_t vb = svld1_s64(pg, &B[i]);\n        svint64_t vc = svadd_s64_z(pg, va, vb);\n        svst1_s64(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (size_t i = 0; i < total_size; i += svcntd()) {\n        svbool_t pg = svwhilelt_b64(i, total_size);\n        svint64_t va = svld1_s64(pg, &A[i]);\n        svint64_t vb = svld1_s64(pg, &B[i]);\n        svint64_t vc = svadd_s64_x(pg, va, vb);\n        svst1_s64(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_19_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_add_3d_simd(const int64_t* A, const int64_t* B, int64_t* C, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (size_t i1 = 0; i1 < dim1; ++i1) {\n        for (size_t i2 = 0; i2 < dim2; ++i2) {\n            size_t offset = (i1 * dim2 + i2) * dim3;\n            const int64_t* a = A + offset;\n            const int64_t* b = B + offset;\n            int64_t* c = C + offset;\n\n            svbool_t pg = svwhilelt_b64_s64(i, total_size);\n\n            while (svptest_any(pg)) {\n                svint64_t va = svld1_s64(pg, a);\n                svint64_t vb = svld1_s64(pg, b);\n                svint64_t vc = svadd_s64_x(pg, va, vb);\n                svst1_s64(pg, c, vc);\n\n                a += svcntd();\n                b += svcntd();\n                c += svcntd();\n                i += svcntd();\n                pg = svwhilelt_b64_s64(i, total_size);\n            }\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src1 = svld1_f32(pg, src1);\n    svfloat32_t v_src2 = svld1_f32(pg, src2);\n    svfloat32_t v_result = svadd_f32_x(pg, v_src1, v_src2);\n    v_result = svrinta_f32_x(pg, v_result);\n    svst1_f32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svfloat32_t svsrc1, svsrc2, svresult;\n    svbool_t pg = svwhilelt_b32(0, length);\n\n    do {\n        svsrc1 = svld1(pg, &src1[0]);\n        svsrc2 = svld1(pg, &src2[0]);\n        svresult = svadd_f32_x(pg, svsrc1, svsrc2);\n        svresult = svrinta_f32_x(pg, svresult);\n        svst1(pg, &dst[0], svresult);\n        src1 += svcntw();\n        src2 += svcntw();\n        dst += svcntw();\n        length -= svcntw();\n        pg = svwhilelt_b32(0, length);\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t vsrc1 = svld1(pg, src1);\n    svfloat32_t vsrc2 = svld1(pg, src2);\n    svfloat32_t vadd = svadd_f32_x(pg, vsrc1, vsrc2);\n    svfloat32_t vround = svrndn_f32_x(pg, vadd);\n    svst1(pg, dst, vround);\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svfloat32_t vg1, vg2, vg3;\n    svbool_t pg = svwhilelt_b32(0, length);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        vg1 = svld1(pg, &src1[i]);\n        vg2 = svld1(pg, &src2[i]);\n        vg3 = svadd_f32_x(pg, vg1, vg2);\n        vg3 = svrinta_f32_x(pg, vg3);\n        svst1(pg, &dst[i], vg3);\n    }\n}\n```"}
{"task_id": "SimdBench_20_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_add_round_nearest_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svfloat32_t vg1, vg2, vg3;\n    svbool_t p0 = svwhilelt_b32(0, length);\n\n    do {\n        vg1 = svld1(p0, (float32_t*)&src1[0]);\n        vg2 = svld1(p0, (float32_t*)&src2[0]);\n        vg3 = svadd_f32_x(p0, vg1, vg2);\n        vg3 = svrinta_f32_x(p0, vg3);\n        svst1(p0, (float32_t*)&dst[0], vg3);\n        src1 += svcntp_b32(p0);\n        src2 += svcntp_b32(p0);\n        dst += svcntp_b32(p0);\n        length -= svcntp_b32(p0);\n        p0 = svwhilelt_b32(0, length);\n    } while (svptest_any(p0));\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svfloat32_t v_src1 = svld1_f32(pg, src1);\n    svfloat32_t v_src2 = svld1_f32(pg, src2);\n\n    svfloat32_t v_diff = svabsdiff_f32(pg, v_src1, v_src2);\n    svbool_t cond1 = svcmple_f32(pg, v_diff, 50.0f);\n\n    svbool_t cond2 = svwhilelt_b64(0, length / 2) & svcmple_f32(pg, svindex_u64(0, 2), length / 2);\n\n    svbool_t cond = cond1 & cond2;\n\n    svfloat32_t v_mul = svmul_f32_z(pg, v_src1, v_src2);\n    svfloat32_t v_rounded = svrinta_f32_x(pg, v_mul);\n\n    svfloat32_t v_result = svsel_f32(cond, v_rounded, -1.0f);\n\n    svst1_f32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src1 = svld1_f32(pg, src1);\n    svfloat32_t v_src2 = svld1_f32(pg, src2);\n    svfloat32_t v_abs_diff = svabs_f32_x(pg, v_src1, v_src2);\n    svbool_t cond1 = svcmple_f32(pg, v_abs_diff, 50.0f);\n    svbool_t cond2 = svwhilelt_b32(0, length / 2) & svcmpeq_n_u32(pg, svindex_u32(0, 1), 0);\n    svbool_t cond = cond1 & cond2;\n    svfloat32_t v_result = svsel_f32(cond, svmul_f32_x(pg, v_src1, v_src2), -1.0f);\n    v_result = svrinta_f32_x(pg, v_result);\n    svst1_f32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t i;\n    svfloat32_t v_src1, v_src2, v_dst, v_abs_diff, v_mul, v_rounded, v_cond, v_neg_one;\n    svbool_t pg = svwhilelt_b32(0, length);\n\n    v_neg_one = svdup_n_f32(-1.0f);\n\n    for (i = 0; i < length; i += svcntw()) {\n        v_src1 = svld1(pg, &src1[i]);\n        v_src2 = svld1(pg, &src2[i]);\n\n        v_abs_diff = svabs_f32(svsub_f32(pg, v_src1, v_src2));\n        v_cond = svcmple_f32(pg, v_abs_diff, svdup_n_f32(50.0f));\n\n        svbool_t pg_even = svwhilelt_b32(0, length - i);\n        pg_even = svsel_b(pg_even, svindex_u32(0, 2), svindex_u32(0, 1));\n\n        v_cond = svand_b_z(pg, v_cond, pg_even);\n\n        v_mul = svmul_f32_x(pg, v_src1, v_src2, v_cond);\n        v_rounded = svrinta_f32_x(pg, v_mul);\n\n        v_dst = svsel_f32(v_cond, v_rounded, v_neg_one);\n\n        svst1(pg, &dst[i], v_dst);\n\n        pg = svwhilelt_b32(i, length);\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, length);\n\n    do {\n        svfloat32_t v_src1 = svld1(pg, &src1[i]);\n        svfloat32_t v_src2 = svld1(pg, &src2[i]);\n        svfloat32_t v_diff = svabs_f32_x(pg, svsub_f32_x(pg, v_src1, v_src2));\n\n        svbool_t cond1 = svcmple_f32(pg, v_diff, 50.0f);\n        svbool_t cond2 = svwhilelt_b32(i & 1, 1);\n\n        svbool_t cond = svand_b_z(pg, cond1, cond2);\n\n        svfloat32_t v_result = svsel_f32(cond, svmul_f32_x(pg, v_src1, v_src2), svdup_f32(-1.0f));\n        v_result = svrinta_f32_x(pg, v_result);\n\n        svst1(pg, &dst[i], v_result);\n\n        i += svcntp_b32(pg);\n        pg = svwhilelt_b32(i, length);\n    } while (svptest_any(pg));\n\n    for (; i < length; ++i) {\n        if (fabsf(src1[i] - src2[i]) <= 50.0f && (i % 2 == 0)) {\n            dst[i] = ceilf(src1[i] * src2[i]);\n        } else {\n            dst[i] = -1.0f;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_21_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid vector_mul_round_up_simd(const float* src1, const float* src2, float* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svfloat32_t v_src1 = svld1_f32(pg, src1);\n    svfloat32_t v_src2 = svld1_f32(pg, src2);\n\n    svfloat32_t v_diff = svabsdiff_f32(pg, v_src1, v_src2);\n    svbool_t cond1 = svcmple_f32(pg, v_diff, 50.0f);\n\n    svbool_t cond2 = svwhilelt_b32(0, length / 2) & svcmpeq_n_u32(pg, svindex_u32(0, 1), 0);\n\n    svbool_t cond = cond1 & cond2;\n\n    svfloat32_t v_mul = svmul_f32_z(pg, v_src1, v_src2);\n    svfloat32_t v_result = svsel_f32(cond, svrinta_f32_x(pg, v_mul), svdup_f32(-1.0f));\n\n    svst1_f32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    svfloat64_t v_scalar = svdup_f64(scalar);\n\n    for (size_t i = 0; i < m; ++i) {\n        const double* row_start = mat + i * n;\n        double* dst_row_start = dst + i * n;\n        size_t j = 0;\n\n        for (; j <= n - svcntd(); j += svcntd()) {\n            svfloat64_t v_mat = svld1(svptrue_b64(), row_start + j);\n            svfloat64_t v_result = svmul_f64_z(svptrue_b64(), v_mat, v_scalar);\n            svst1(svptrue_b64(), dst_row_start + j, v_result);\n        }\n\n        for (; j < n; ++j) {\n            dst_row_start[j] = row_start[j] * scalar;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    svbool_t pg = svwhilelt_b64(0, total_elements);\n    svfloat64_t v_scalar = svdup_f64(scalar);\n\n    for (size_t i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v_mat = svld1(pg, &mat[i]);\n        svfloat64_t v_result = svmul_f64_x(pg, v_mat, v_scalar);\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    svbool_t pg = svwhilelt_b64(0, total_elements);\n    svfloat64_t v_scalar = svdup_f64(scalar);\n\n    for (size_t i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v_mat = svld1(pg, &mat[i]);\n        svfloat64_t v_result = svmul_f64_m(pg, v_mat, v_scalar);\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    svfloat64_t v_scalar = svdup_f64(scalar);\n\n    for (size_t i = 0; i < m; ++i) {\n        const double* row_start = mat + i * n;\n        double* dst_row_start = dst + i * n;\n        size_t j = 0;\n\n        for (; j <= n - svcntd(); j += svcntd()) {\n            svfloat64_t v_mat = svld1(svptrue_b64(), row_start + j);\n            svfloat64_t v_result = svmul_f64_z(svptrue_b64(), v_mat, v_scalar);\n            svst1(svptrue_b64(), dst_row_start + j, v_result);\n        }\n\n        for (; j < n; ++j) {\n            dst_row_start[j] = row_start[j] * scalar;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_22_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_scalar_mul_simd(const double* mat, double scalar, double* dst, size_t m, size_t n) {\n    svfloat64_t v_scalar = svdup_f64(scalar);\n\n    for (size_t i = 0; i < m; ++i) {\n        const double* row_mat = mat + i * n;\n        double* row_dst = dst + i * n;\n        size_t j = 0;\n\n        for (; j <= n - svcntd(); j += svcntd()) {\n            svfloat64_t v_mat = svld1(svptrue_b64(), row_mat + j);\n            svfloat64_t v_result = svmul_f64_m(svptrue_b64(), v_mat, v_scalar);\n            svst1(svptrue_b64(), row_dst + j, v_result);\n        }\n\n        for (; j < n; ++j) {\n            row_dst[j] = row_mat[j] * scalar;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vector_length = svcntw();\n\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        for (size_t j = 0; j < n; ++j) {\n            sum += mat[i * n + j] * mat[i * n + j];\n        }\n        float norm = sqrtf(sum);\n\n        for (size_t j = 0; j < n; j += vector_length) {\n            size_t chunk_size = (j + vector_length > n) ? n - j : vector_length;\n            svfloat32_t v = svld1(svptrue_b32(), &mat[i * n + j]);\n            svfloat32_t v_norm = svdup_f32(norm);\n            v = svdiv_f32_x(svptrue_b32(), v, v_norm);\n            svst1(svptrue_b32(), &mat[i * n + j], v);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vector_length = svcntw();\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        svfloat32_t v_sum = svdup_f32(0.0f);\n\n        for (size_t j = 0; j < n; j += vector_length) {\n            size_t chunk = (j + vector_length > n) ? n - j : vector_length;\n            svfloat32_t v_row = svld1(svptrue_b32(), &mat[i * n + j]);\n            v_sum = svmla_f32_x(svdup_b32(), v_sum, v_row, v_row);\n        }\n\n        sum = svaddv(svptrue_b32(), v_sum);\n        float norm = sqrtf(sum);\n\n        for (size_t j = 0; j < n; j += vector_length) {\n            size_t chunk = (j + vector_length > n) ? n - j : vector_length;\n            svfloat32_t v_row = svld1(svptrue_b32(), &mat[i * n + j]);\n            svfloat32_t v_norm = svdup_f32(norm);\n            v_row = svdiv_f32_x(svptrue_b32(), v_row, v_norm);\n            svst1(svptrue_b32(), &mat[i * n + j], v_row);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t i, j;\n    for (i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        svfloat32_t v_sum = svdup_f32(0.0f);\n\n        // Calculate the sum of squares for the current row\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t v = svld1(svptrue_b32(), &mat[i * n + j]);\n            v_sum = svmla_f32_x(svptrue_b32(), v_sum, v, v);\n        }\n\n        // Reduce the sum of squares\n        sum = svaddv_f32(svptrue_b32(), v_sum);\n        float norm = sqrtf(sum);\n\n        // Normalize the row\n        for (j = 0; j < n; j += svcntw()) {\n            svfloat32_t v = svld1(svptrue_b32(), &mat[i * n + j]);\n            v = svdiv_n_f32_x(svptrue_b32(), v, norm);\n            svst1(svptrue_b32(), &mat[i * n + j], v);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vlen = svcntw();\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        for (size_t j = 0; j < n; j += vlen) {\n            size_t chunk = (j + vlen > n) ? n - j : vlen;\n            svfloat32_t v = svld1(svptrue_b32(), &mat[i * n + j]);\n            svfloat32_t v_sq = svmul_f32_x(svdup_n_f32(v), svdup_n_f32(v));\n            sum += svaddv_f32(svptrue_b32(), v_sq);\n        }\n        float norm = sqrtf(sum);\n        for (size_t j = 0; j < n; j += vlen) {\n            size_t chunk = (j + vlen > n) ? n - j : vlen;\n            svfloat32_t v = svld1(svptrue_b32(), &mat[i * n + j]);\n            svfloat32_t v_norm = svmul_f32_x(svdup_n_f32(v), svdup_n_f32(1.0f / norm));\n            svst1(svptrue_b32(), &mat[i * n + j], v_norm);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_23_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_normalize_rows_simd(float* mat, size_t m, size_t n) {\n    size_t vl = svcntw();\n    for (size_t i = 0; i < m; ++i) {\n        float sum = 0.0f;\n        for (size_t j = 0; j < n; j += vl) {\n            size_t chunk = (j + vl > n) ? n - j : vl;\n            svfloat32_t v = svld1(svptrue_b32(), &mat[i * n + j]);\n            svfloat32_t v_sq = svmul_f32_x(svdup_f32(v), svdup_f32(v));\n            sum += svaddv_f32(svptrue_b32(), v_sq);\n        }\n        float norm = sqrtf(sum);\n        for (size_t j = 0; j < n; j += vl) {\n            size_t chunk = (j + vl > n) ? n - j : vl;\n            svfloat32_t v = svld1(svptrue_b32(), &mat[i * n + j]);\n            svfloat32_t v_norm = svmul_f32_x(svdup_f32(v), svdup_f32(norm));\n            svst1(svptrue_b32(), &mat[i * n + j], v_norm);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    svbool_t pg = svwhilelt_b64(0, p);\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t vsum = svdup_f64(0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t vmat1 = svld1(pg, &mat1[i * n + k]);\n                svfloat64_t vmat2 = svld1(pg, &mat2[k * p + j]);\n                vsum = svmla_f64_m(pg, vsum, vmat1, vmat2);\n            }\n            vsum = svrinta_f64_m(pg, vsum);\n            svst1(pg, &dst[i * p + j], vsum);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t result = svdup_f64(0.0);\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svfloat64_t va = svld1(svptrue_b64(), &mat1[i * n + k]);\n                svfloat64_t vb = svld1(svptrue_b64(), &mat2[k * p + j]);\n                result = svmla_f64_m(svptrue_b64(), result, va, vb);\n            }\n            double scalar_result = svaddv(svptrue_b64(), result);\n            dst[i * p + j] = nearbyint(scalar_result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    svbool_t pg = svwhilelt_b64_s64(0, p);\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t vsum = svdup_f64_z(svptrue_b64(), 0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t v1 = svld1_f64(pg, &mat1[i * n + k]);\n                svfloat64_t v2 = svld1_f64(pg, &mat2[k * p + j]);\n                vsum = svmla_f64_m(pg, vsum, v1, v2);\n            }\n            svfloat64_t vround = svrndn_f64_z(pg, vsum);\n            svst1_f64(pg, &dst[i * p + j], vround);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    svbool_t pg = svwhilelt_b64_s64(0, m);\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t sum = svdup_f64_z(pg, 0.0);\n            for (size_t k = 0; k < n; ++k) {\n                svfloat64_t a = svld1_f64(pg, &mat1[i * n + k]);\n                svfloat64_t b = svld1_f64(pg, &mat2[k * p + j]);\n                sum = svmla_f64_m(pg, sum, a, b);\n            }\n            svfloat64_t rounded = svrintn_f64_m(pg, sum);\n            svst1_f64(pg, &dst[i * p + j], rounded);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_24_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_mul_round_int_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n, size_t p) {\n    for (size_t i = 0; i < m; ++i) {\n        for (size_t j = 0; j < p; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n            for (size_t k = 0; k < n; k += svcntd()) {\n                svfloat64_t v1 = svld1(svptrue_b64(), &mat1[i * n + k]);\n                svfloat64_t v2 = svld1(svptrue_b64(), &mat2[k * p + j]);\n                sum = svmla_f64_m(svptrue_b64(), sum, v1, v2);\n            }\n            double result = svaddv_f64(svptrue_b64(), sum);\n            dst[i * p + j] = nearbyint(result);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    svfloat32_t vf_025 = svdup_n_f32(0.25f);\n    svfloat32_t vf_05 = svdup_n_f32(0.5f);\n    svfloat32_t vf_1 = svdup_n_f32(1.0f);\n\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svfloat32_t vf = svld1_gather_u32base_f32(pg, (const uint32_t*)src + i * cols, j);\n            svfloat32_t vf_round = svmla_f32_x(pg, vf_1, svadd_f32_x(pg, svmla_f32_x(pg, vf_05, vf, vf_025), vf_025), vf);\n            svst1_scatter_u32base_f32(pg, (uint32_t*)dst + j * rows, i, vf_round);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    svfloat32_t quarter = svdup_n_f32(0.25f);\n    svfloat32_t half = svdup_n_f32(0.5f);\n\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            svfloat32_t value = svdup_n_f32(src[i * cols + j]);\n            value = svmul_f32_x(svprioritize_f32(value, half), quarter);\n            value = svrnd_f32(value, half);\n            dst[j * rows + i] = svaddv_f32(svptrue_b32(), value);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    svfloat32_t quarter = svdup_n_f32(0.25f);\n    svfloat32_t half = svdup_n_f32(0.5f);\n\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svfloat32_t vec = svld1_gather_u32base_f32(pg, (const uint32_t*)(src + i * cols + j));\n            vec = svmla_f32_x(pg, vec, half, quarter);\n            vec = svrndn_f32_x(pg, vec);\n            vec = svmls_f32_x(pg, vec, half, quarter);\n            svst1_scatter_u32base_f32(pg, (uint32_t*)(dst + j * rows + i), vec);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    svfloat32_t quarter = svdup_n_f32(0.25f);\n    svfloat32_t half = svdup_n_f32(0.5f);\n\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            svfloat32_t value = svdup_n_f32(src[i * cols + j]);\n            value = svmla_f32_x(svptrue_b32(), value, half, quarter);\n            value = svrndn_f32_x(svptrue_b32(), value);\n            value = svmls_f32_x(svptrue_b32(), value, half, quarter);\n            svst1_f32(svptrue_b32(), &dst[j * rows + i], value);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_25_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_transpose_round_quarter_simd(const float* src, float* dst, size_t rows, size_t cols) {\n    svfloat32_t quarter = svdup_n_f32(0.25f);\n    svfloat32_t half = svdup_n_f32(0.5f);\n\n    for (size_t i = 0; i < rows; ++i) {\n        for (size_t j = 0; j < cols; ++j) {\n            svfloat32_t value = svld1(svptrue_b32(), &src[i * cols + j]);\n            value = svmul_f32_x(svptrue_b32(), value, quarter);\n            value = svrndn_f32_x(svptrue_b32(), value);\n            value = svmul_f32_x(svptrue_b32(), value, half);\n            svst1(svptrue_b32(), &dst[j * rows + i], value);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    svfloat32_t pg = svwhilelt_b32(0, total_size);\n\n    const float* t1 = tensor1;\n    const float* t2 = tensor2;\n    float* d = dst;\n\n    while (svptest_any(pg)) {\n        svfloat32_t vt1 = svld1(pg, t1);\n        svfloat32_t vt2 = svld1(pg, t2);\n        svfloat32_t vres = svsub_x(pg, vt1, vt2);\n        svint32_t vres_int = svrintz_x(pg, vres);\n        svfloat32_t vres_float = scvtf_x(pg, vres_int);\n        svst1(pg, d, vres_float);\n\n        t1 += svcntw();\n        t2 += svcntw();\n        d += svcntw();\n        pg = svwhilelt_b32(svcntw(), total_size - svcntw());\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    svfloat32_t pg = svwhilelt_b32(0, total_size);\n\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        svfloat32_t v1 = svld1(pg, &tensor1[i]);\n        svfloat32_t v2 = svld1(pg, &tensor2[i]);\n        svfloat32_t res = svsub_x(pg, v1, v2);\n        res = svrintz_x(pg, res);\n        svst1(pg, &dst[i], res);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    svfloat32_t pg = svwhilelt_b32(0, total_size);\n\n    const float* t1 = tensor1;\n    const float* t2 = tensor2;\n    float* d = dst;\n\n    while (svptest_any(pg)) {\n        svfloat32_t vt1 = svld1(pg, t1);\n        svfloat32_t vt2 = svld1(pg, t2);\n        svfloat32_t vres = svsub_x(pg, vt1, vt2);\n        svint32_t vres_int = svcvt_s32_x(pg, vres);\n        svfloat32_t vres_rounded = svcvt_f32_x(pg, vres_int);\n        svst1(pg, d, vres_rounded);\n\n        t1 += svcntw();\n        t2 += svcntw();\n        d += svcntw();\n        pg = svwhilelt_b32(svcntw(), total_size - svcntw());\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    size_t i = 0;\n\n    for (i = 0; i < total_size; i += svcntw()) {\n        svfloat32_t v1 = svld1(svptrue_b32(), &tensor1[i]);\n        svfloat32_t v2 = svld1(svptrue_b32(), &tensor2[i]);\n        svfloat32_t v_sub = svsub_f32_x(svptrue_b32(), v1, v2);\n        svint32_t v_round = svrintz_f32_x(svptrue_b32(), v_sub);\n        svst1(svptrue_b32(), &dst[i], v_round);\n    }\n\n    for (; i < total_size; ++i) {\n        float result = tensor1[i] - tensor2[i];\n        dst[i] = (result > 0) ? floorf(result) : ceilf(result);\n    }\n}\n```"}
{"task_id": "SimdBench_26_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor3d_sub_round_zero_simd(const float* tensor1, const float* tensor2, float* dst, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n    svfloat32_t pg = svwhilelt_b32(0, total_size);\n\n    const float* t1 = tensor1;\n    const float* t2 = tensor2;\n    float* d = dst;\n\n    while (svptest_any(pg)) {\n        svfloat32_t vt1 = svld1(pg, t1);\n        svfloat32_t vt2 = svld1(pg, t2);\n        svfloat32_t vsub = svsub_f32_x(pg, vt1, vt2);\n        svint32_t vrnd = svrintz_f32_x(pg, vsub);\n        svst1(pg, d, vrnd);\n\n        t1 += svcntw();\n        t2 += svcntw();\n        d += svcntw();\n        pg = svwhilelt_b32(svcntw(), total_size);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v1 = svld1_f64(svptrue_b64(), &mat1[i]);\n        svfloat64_t v2 = svld1_f64(svptrue_b64(), &mat2[i]);\n        svfloat64_t v_result = svmul_f64_z(svptrue_b64(), v1, v2);\n        svst1_f64(svptrue_b64(), &dst[i], v_result);\n    }\n\n    // Handle any remaining elements if the total number is not a multiple of the vector length\n    for (; i < total_elements; ++i) {\n        dst[i] = mat1[i] * mat2[i];\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v1 = svld1_f64(svptrue_b64(), &mat1[i]);\n        svfloat64_t v2 = svld1_f64(svptrue_b64(), &mat2[i]);\n        svfloat64_t v_res = svmul_f64_z(svptrue_b64(), v1, v2);\n        svst1_f64(svptrue_b64(), &dst[i], v_res);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v_mat1 = svld1_f64(svptrue_b64(), &mat1[i]);\n        svfloat64_t v_mat2 = svld1_f64(svptrue_b64(), &mat2[i]);\n        svfloat64_t v_dst = svmul_f64_z(svptrue_b64(), v_mat1, v_mat2);\n        svst1_f64(svptrue_b64(), &dst[i], v_dst);\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    svfloat64_t pg = svwhilelt_b64_s64(0, m * n);\n\n    for (i = 0; i < m; ++i) {\n        size_t idx = i * n;\n        for (j = 0; j < n; j += svcntd()) {\n            svfloat64_t v1 = svld1_f64(pg, &mat1[idx + j]);\n            svfloat64_t v2 = svld1_f64(pg, &mat2[idx + j]);\n            svfloat64_t v3 = svmul_f64_z(pg, v1, v2);\n            svst1_f64(pg, &dst[idx + j], v3);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_27_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_hadamard_product_simd(const double* mat1, const double* mat2, double* dst, size_t m, size_t n) {\n    size_t i, j;\n    svfloat64_t vmat1, vmat2, vdst;\n\n    for (i = 0; i < m; ++i) {\n        for (j = 0; j < n; j += svcntd()) {\n            vmat1 = svld1(svptrue_b64(), &mat1[i * n + j]);\n            vmat2 = svld1(svptrue_b64(), &mat2[i * n + j]);\n            vdst = svmul_f64_z(svptrue_b64(), vmat1, vmat2);\n            svst1(svptrue_b64(), &dst[i * n + j], vdst);\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    svfloat32_t vec_sv = svld1_f32(svptrue_b32(), vec);\n\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t sum = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svfloat32_t mat_sv = svld1_f32(svptrue_b32(), &mat[i * n + j]);\n            sum = svmla_f32_x(svptrue_b32(), sum, mat_sv, vec_sv);\n        }\n        dst[i] = svaddv_f32(svptrue_b32(), sum);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    svfloat32_t vec_sv = svld1_f32(svptrue_b32(), vec);\n\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t result = svdup_n_f32(0);\n\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svfloat32_t mat_sv = svld1_f32(svptrue_b32(), &mat[i * n + j]);\n            result = svmla_f32_x(svptrue_b32(), result, mat_sv, vec_sv);\n        }\n\n        dst[i] = svaddv_f32(svptrue_b32(), result);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    svfloat32_t vec_sv = svld1_f32(svptrue_b32(), vec);\n\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t result = svdup_f32(0.0f);\n\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svfloat32_t mat_sv = svld1_f32(svptrue_b32(), &mat[i * n + j]);\n            result = svmla_f32_x(svptrue_b32(), result, mat_sv, vec_sv);\n        }\n\n        dst[i] = svaddv_f32(svptrue_b32(), result);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    svfloat32_t vec_sv = svld1_f32(svptrue_b32(), vec);\n\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t dot_prod = svdup_f32(0.0f);\n        for (size_t j = 0; j < n; j += svcntw()) {\n            svfloat32_t mat_sv = svld1_f32(svptrue_b32(), &mat[i * n + j]);\n            dot_prod = svmla_f32_x(svptrue_b32(), dot_prod, mat_sv, vec_sv);\n        }\n        dst[i] = svaddv_f32(svptrue_b32(), dot_prod);\n    }\n}\n```"}
{"task_id": "SimdBench_28_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_vector_mul_simd(const float* mat, const float* vec, float* dst, size_t m, size_t n) {\n    svfloat32_t vec_sv = svld1_f32(svptrue_b32(), vec);\n\n    for (size_t i = 0; i < m; ++i) {\n        svfloat32_t result = svdup_f32(0.0f);\n\n        const float* mat_row = mat + i * n;\n        for (size_t j = 0; j < n; j += svcntd()) {\n            svfloat32_t mat_sv = svld1_f32(svptrue_b32(), mat_row + j);\n            result = svmla_f32_x(svptrue_b32(), result, vec_sv, mat_sv);\n        }\n\n        dst[i] = svaddv_f32(svptrue_b32(), result);\n    }\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    svfloat64_t vsum = svdup_f64(0.0);\n    svbool_t pg = svwhilelt_b64(0, total_elements);\n\n    for (size_t i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v = svld1(pg, &mat[i]);\n        vsum = svadd_f64_x(pg, vsum, v);\n    }\n\n    double sum = 0.0;\n    svst1_f64(pg, &sum, vsum);\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    svfloat64_t sum_vec = svdup_f64(0.0);\n    svbool_t pg = svwhilelt_b64(0, total_elements);\n\n    for (size_t i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t vec = svld1(pg, &mat[i]);\n        sum_vec = svadd_f64_x(pg, sum_vec, vec);\n    }\n\n    double sum = 0.0;\n    svst1_f64(pg, &sum, sum_vec);\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    svbool_t pg = svwhilelt_b64_s64(0, m * n);\n    svfloat64_t svsum = svdup_f64(0.0);\n    size_t i = 0;\n\n    for (size_t row = 0; row < m; ++row) {\n        for (size_t col = 0; col < n; ++col) {\n            svfloat64_t svval = svld1_f64(pg, &mat[i]);\n            svsum = svadd_f64_x(pg, svsum, svval);\n            i++;\n        }\n    }\n\n    double sum = svaddv_f64(pg, svsum);\n    return sum / (m * n);\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    svfloat64_t vsum = svdup_f64(0.0);\n    const double* end = mat + total_elements;\n\n    while (mat != end) {\n        svbool_t pg = svwhilelt_b64(mat, end);\n        svfloat64_t v = svld1_f64(pg, mat);\n        vsum = svadd_f64_m(pg, vsum, v);\n        mat += svcntd();\n    }\n\n    double sum = svaddv_f64(svptrue_b64(), vsum);\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_29_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble matrix_average_simd(const double* mat, size_t m, size_t n) {\n    size_t total_elements = m * n;\n    svfloat64_t vsum = svdup_f64(0.0);\n    svbool_t pg = svwhilelt_b64(0, total_elements);\n\n    for (size_t i = 0; i < total_elements; i += svcntd()) {\n        svfloat64_t v = svld1(pg, &mat[i]);\n        vsum = svadd_f64_m(pg, vsum, v);\n    }\n\n    double sum = 0.0;\n    svst1_f64(pg, &sum, vsum);\n\n    return sum / total_elements;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool direction = directions[i];\n        svbool_t pg = svwhilelt_b32(0, cols - 1);\n\n        svint32_t prev = svld1(pg, &row[0]);\n        svint32_t curr = svld1(pg, &row[1]);\n\n        if (direction) {\n            svbool_t cmp = svcmple_s32(pg, prev, curr);\n            if (!svptest_any(pg, cmp)) {\n                return false;\n            }\n        } else {\n            svbool_t cmp = svcmpge_s32(pg, prev, curr);\n            if (!svptest_any(pg, cmp)) {\n                return false;\n            }\n        }\n\n        for (size_t j = 1; j < cols - 1; ++j) {\n            prev = curr;\n            curr = svld1(pg, &row[j + 1]);\n\n            if (direction) {\n                svbool_t cmp = svcmple_s32(pg, prev, curr);\n                if (!svptest_any(pg, cmp)) {\n                    return false;\n                }\n            } else {\n                svbool_t cmp = svcmpge_s32(pg, prev, curr);\n                if (!svptest_any(pg, cmp)) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool direction = directions[i];\n        svbool_t pg = svwhilelt_b32(0, cols - 1);\n        svint32_t v0 = svld1_s32(pg, &row[0]);\n        svint32_t v1 = svld1_s32(pg, &row[1]);\n        svbool_t p_cmp;\n\n        if (direction) {\n            p_cmp = svcmple_s32(pg, v0, v1);\n        } else {\n            p_cmp = svcmpge_s32(pg, v0, v1);\n        }\n\n        if (svptest_any(pg, p_cmp)) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool direction = directions[i];\n        svbool_t pg = svwhilelt_b32(0, cols - 1);\n        svint32_t v = svld1_s32(pg, row);\n        svint32_t v_next = svld1_s32(pg, row + 1);\n\n        if (direction) {\n            if (!svptest_any(pg, svcmple_s32(pg, v, v_next))) {\n                return false;\n            }\n        } else {\n            if (!svptest_any(pg, svcmpge_s32(pg, v, v_next))) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool direction = directions[i];\n        size_t j = 0;\n\n        while (j < cols) {\n            svbool_t pg = svwhilelt_b32(j, cols);\n            svint32_t v = svld1_s32(pg, &row[j]);\n            svint32_t v_next = svld1_s32(pg, &row[j + 1]);\n\n            svbool_t cmp;\n            if (direction) {\n                cmp = svcmple_s32(pg, v, v_next);\n            } else {\n                cmp = svcmpge_s32(pg, v, v_next);\n            }\n\n            if (!svptest_any(pg, cmp)) {\n                return false;\n            }\n\n            j += svcntw();\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_30_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_sorted_verify_simd(const int* matrix, const bool* directions, size_t rows, size_t cols) {\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        bool direction = directions[i];\n        svbool_t pg = svwhilelt_b32(0, cols - 1);\n\n        svint32_t prev = svld1(pg, &row[0]);\n        svint32_t curr = svld1(pg, &row[1]);\n\n        if (direction) {\n            svbool_t cmp = svcmple_s32(pg, prev, curr);\n            if (!svptest_any(pg, cmp)) {\n                return false;\n            }\n        } else {\n            svbool_t cmp = svcmpge_s32(pg, prev, curr);\n            if (!svptest_any(pg, cmp)) {\n                return false;\n            }\n        }\n\n        for (size_t j = 1; j < cols - 1; ++j) {\n            prev = curr;\n            curr = svld1(pg, &row[j + 1]);\n\n            if (direction) {\n                svbool_t cmp = svcmple_s32(pg, prev, curr);\n                if (!svptest_any(pg, cmp)) {\n                    return false;\n                }\n            } else {\n                svbool_t cmp = svcmpge_s32(pg, prev, curr);\n                if (!svptest_any(pg, cmp)) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_base = svdup_n_s16(base);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v_src = svld1(pg, &src[i]);\n        svint16_t v_rem = svrem_n_s16(pg, v_src, base);\n        svint16_t v_result = svsub_s16_x(pg, v_src, v_rem);\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_base = svdup_n_s16(base);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v_src = svld1(pg, &src[i]);\n        svint16_t v_rem = svrem_s16(pg, v_src, v_base);\n        svint16_t v_result = svsub_s16(pg, v_src, v_rem);\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_base = svdup_n_s16(base);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v_src = svld1(pg, &src[i]);\n        svint16_t v_rem = svrem_s16(pg, v_src, v_base);\n        svint16_t v_result = svsub_s16_x(pg, v_src, v_rem);\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_base = svdup_n_s16(base);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v_src = svld1(pg, &src[i]);\n        svint16_t v_rem = svrem_s16(pg, v_src, v_base);\n        svint16_t v_result = svsub_s16(pg, v_src, v_rem);\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_31_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid nearest_multiple_simd(const int16_t* src, int16_t* dst, uint8_t base, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_base = svdup_n_s16(base);\n    svint16_t v_zero = svdup_n_s16(0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v_src = svld1(pg, &src[i]);\n        svint16_t v_rem = svrem_s16(pg, v_src, v_base);\n        svint16_t v_result = svsub_s16_x(pg, v_src, v_rem);\n        svst1(pg, &dst[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1_f64(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t row = svld1_f64(pg, matrix + i * cols);\n        svbool_t cmp = svcmpeq_f64(pg, row, vec);\n        if (svptest_any(pg, cmp)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1(pg, &vector[0]);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t row = svld1(pg, &matrix[i * cols]);\n        svbool_t cmp = svcmpeq_f64(pg, row, vec);\n        if (svptest_any(pg, cmp)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1(pg, &vector[0]);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg_row = svwhilelt_b64(0, cols);\n        svfloat64_t row = svld1(pg_row, &matrix[i * cols]);\n\n        svbool_t pg_cmp = svcmpeq_f64(pg, row, vec);\n        if (svptest_any(pg, pg_cmp)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1_f64(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg_row = svwhilelt_b64(0, cols);\n        svfloat64_t row = svld1_f64(pg_row, matrix + i * cols);\n\n        svbool_t pg_eq = svcmpeq_f64(pg, row, vec);\n        if (svptest_any(pg, pg_eq)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_32_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool matrix_has_row_simd(const double* matrix, const double* vector, size_t rows, size_t cols) {\n    svbool_t pg = svwhilelt_b64(0, cols);\n    svfloat64_t vec = svld1_f64(pg, vector);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg_row = svwhilelt_b64(0, cols);\n        svfloat64_t row = svld1_f64(pg_row, matrix + i * cols);\n\n        svbool_t pg_cmp = svcmpeq_f64(pg, row, vec);\n        if (svptest_any(pg, pg_cmp)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    svbool_t pg = svwhilelt_b8(0, total_elements);\n    svuint8_t vA = svld1_u8(pg, A);\n    svuint8_t vB = svld1_u8(pg, B);\n\n    svuint8_t vEq = sveor_u8_x(pg, vA, vB);\n    svbool_t eq_mask = sveq_u8(pg, vEq, svdup_u8(0));\n\n    count += svcntp_b8(eq_mask, pg);\n\n    A += svcntp_b8(pg, pg);\n    B += svcntp_b8(pg, pg);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    svbool_t pg = svwhilelt_b8(0, total_elements);\n    svuint8_t v_A = svld1_u8(pg, A);\n    svuint8_t v_B = svld1_u8(pg, B);\n\n    svuint8_t v_eq = sveor_z(svptrue_b8(), v_A, v_B);\n    svbool_t eq_mask = sveq_u8(v_A, v_B);\n\n    count += svcntp_b8(eq_mask, pg);\n\n    A += svcntp_b8(pg, pg);\n    B += svcntp_b8(pg, pg);\n\n    while (svptest_any(pg)) {\n        pg = svwhilelt_b8(0, total_elements - svcntp_b8(pg, pg));\n        v_A = svld1_u8(pg, A);\n        v_B = svld1_u8(pg, B);\n\n        v_eq = sveor_z(svptrue_b8(), v_A, v_B);\n        eq_mask = sveq_u8(v_A, v_B);\n\n        count += svcntp_b8(eq_mask, pg);\n\n        A += svcntp_b8(pg, pg);\n        B += svcntp_b8(pg, pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    svbool_t pg = svwhilelt_b8(0, total_elements);\n    svuint8_t v_A = svld1_u8(pg, A);\n    svuint8_t v_B = svld1_u8(pg, B);\n\n    svuint8_t eq = sveor_m(pg, v_A, v_B);\n    svbool_t eq_mask = sveq_m(pg, eq, svdup_n_u8(0));\n\n    count = svcntp_b8(eq_mask, count);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    svbool_t pg = svwhilelt_b8(0, total_elements);\n    svuint8_t va = svld1_u8(pg, A);\n    svuint8_t vb = svld1_u8(pg, B);\n\n    svuint8_t veq = sveor_u8_x(pg, va, vb);\n    svbool_t p_eq = svcmpeq_u8(pg, va, vb);\n\n    count = svcntp_b8(pg, p_eq);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_33_SVE", "completion": "```c\n#include <arm_sve.h>\n\nsize_t tensor_4d_equal_count_simd(const uint8_t* A, const uint8_t* B, const size_t dims[4]) {\n    size_t total_elements = dims[0] * dims[1] * dims[2] * dims[3];\n    size_t count = 0;\n\n    svbool_t pg = svwhilelt_b8(0, total_elements);\n    svuint8_t v_A = svld1_u8(pg, A);\n    svuint8_t v_B = svld1_u8(pg, B);\n\n    svuint8_t v_eq = sveor_m(pg, v_A, v_B);\n    svbool_t eq_mask = svcmpeq_u8(pg, v_A, v_B);\n\n    count += svcntp_b8(eq_mask, pg);\n\n    A += svcntp_b8(pg, pg);\n    B += svcntp_b8(pg, pg);\n\n    while (svptest_any(pg, pg)) {\n        pg = svwhilelt_b8(0, total_elements - svcntp_b8(pg, pg));\n        v_A = svld1_u8(pg, A);\n        v_B = svld1_u8(pg, B);\n\n        v_eq = sveor_m(pg, v_A, v_B);\n        eq_mask = svcmpeq_u8(pg, v_A, v_B);\n\n        count += svcntp_b8(eq_mask, pg);\n\n        A += svcntp_b8(pg, pg);\n        B += svcntp_b8(pg, pg);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_a = svdup_n_s64(a);\n\n    do {\n        svint64_t v_x = svld1_s64(pg, &x[0]);\n        svint64_t v_ax = svmla_s64(pg, svdup_n_s64(0), v_a, v_x);\n        svint64_t v_y = svld1_s64(pg, &y[0]);\n        v_y = svabs_s64(pg, v_y);\n        v_y = svsub_s64(pg, v_y, v_ax);\n        svst1_s64(pg, &y[0], v_y);\n\n        x += svcntd();\n        y += svcntd();\n    } while (svptest_any(pg = svwhilelt_b64(0, length - svcntd())));\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_a = svdup_n_s64(a);\n\n    do {\n        svint64_t v_x = svld1_s64(pg, &x[0]);\n        svint64_t v_ax = svmla_s64(pg, v_a, v_x);\n        svint64_t v_y = svld1_s64(pg, &y[0]);\n        v_y = svabs_s64(pg, v_y);\n        v_y = svsub_s64(pg, v_y, v_ax);\n        svst1_s64(pg, &y[0], v_y);\n\n        x += svcntd();\n        y += svcntd();\n    } while (svptest_any(pg, svwhilelt_b64(0, length - svcntd())));\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_a = svdup_n_s64(a);\n\n    while (svptest_any(pg)) {\n        svint64_t v_x = svld1_s64(pg, x);\n        svint64_t v_y = svld1_s64(pg, y);\n\n        svint64_t v_ax = svmul_n_s64(pg, v_x, v_a);\n        svint64_t v_abs_y = svabs_s64_x(pg, v_y);\n        svint64_t v_result = svsub_s64_x(pg, v_ax, v_abs_y);\n\n        svst1_s64(pg, y, v_result);\n\n        x += svcntp_b64(pg);\n        y += svcntp_b64(pg);\n        length -= svcntp_b64(pg);\n        pg = svwhilelt_b64(0, length);\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_a = svdup_n_s64(a);\n\n    while (svptest_any(pg)) {\n        svint64_t vx = svld1_s64(pg, x);\n        svint64_t vy = svld1_s64(pg, y);\n\n        svint64_t vax = svmul_x(pg, v_a, vx);\n        svint64_t vabs_y = svabs_s64_x(pg, vy);\n        svint64_t vresult = svsub_x(pg, vax, vabs_y);\n\n        svst1_s64(pg, y, vresult);\n\n        x += svcntp_b64(pg);\n        y += svcntp_b64(pg);\n        pg = svwhilelt_b64(y, length);\n    }\n}\n```"}
{"task_id": "SimdBench_34_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid axm_abs_simd(size_t length, const int64_t a, const int64_t *x, int64_t *y) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svint64_t v_a = svdup_n_s64(a);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint64_t v_x = svld1(pg, &x[i]);\n        svint64_t v_y = svld1(pg, &y[i]);\n\n        svint64_t v_ax = svmul_x(pg, v_a, v_x);\n        svint64_t v_abs_y = svabs_x(pg, v_y);\n        svint64_t v_result = svsub_x(pg, v_ax, v_abs_y);\n\n        svst1(pg, &y[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\n#include <arm_sve.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_min = svld1(pg, &vec[0]);\n    svint16_t v_max = svld1(pg, &vec[0]);\n\n    for (size_t i = svcntw(); i < length; i += svcntw()) {\n        svint16_t v = svld1(pg, &vec[i]);\n        v_min = svmin_s16_z(pg, v_min, v);\n        v_max = svmax_s16_z(pg, v_max, v);\n    }\n\n    int16_t min_values[16];\n    int16_t max_values[16];\n    svst1_s16(pg, min_values, v_min);\n    svst1_s16(pg, max_values, v_max);\n\n    int16_t min_num = min_values[0];\n    int16_t max_num = max_values[0];\n\n    for (size_t i = 1; i < svcntw(); ++i) {\n        if (min_values[i] < min_num) min_num = min_values[i];\n        if (max_values[i] > max_num) max_num = max_values[i];\n    }\n\n    return (MinMaxPair){min_num, max_num};\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\n#include <arm_sve.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_min = svld1(pg, &vec[0]);\n    svint16_t v_max = svld1(pg, &vec[0]);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svint16_t v = svld1(pg, &vec[i]);\n        v_min = svmin_s16_m(pg, v_min, v);\n        v_max = svmax_s16_m(pg, v_max, v);\n    }\n\n    int16_t min_val = svminv_s16(pg, v_min);\n    int16_t max_val = svmaxv_s16(pg, v_max);\n\n    return (MinMaxPair){min_val, max_val};\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\n#include <arm_sve.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svint16_t v_min = svdup_n_s16(INT16_MAX);\n    svint16_t v_max = svdup_n_s16(INT16_MIN);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v = svld1_s16(svptrue_b16(), &vec[i]);\n        v_min = svmin_s16_x(svptrue_b16(), v_min, v);\n        v_max = svmax_s16_x(svptrue_b16(), v_max, v);\n    }\n\n    int16_t min_values[SVCNTX_B16()];\n    int16_t max_values[SVCNTX_B16()];\n    svst1_s16(svptrue_b16(), min_values, v_min);\n    svst1_s16(svptrue_b16(), max_values, v_max);\n\n    int16_t min_num = INT16_MAX;\n    int16_t max_num = INT16_MIN;\n    for (size_t i = 0; i < SVCNTX_B16(); ++i) {\n        if (min_values[i] < min_num) min_num = min_values[i];\n        if (max_values[i] > max_num) max_num = max_values[i];\n    }\n\n    return (MinMaxPair){min_num, max_num};\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\n#include <arm_sve.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_min = svld1(pg, &vec[0]);\n    svint16_t v_max = svld1(pg, &vec[0]);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v = svld1(pg, &vec[i]);\n        v_min = svmin_s16_z(pg, v_min, v);\n        v_max = svmax_s16_z(pg, v_max, v);\n    }\n\n    int16_t min_num = svminv_s16(pg, v_min);\n    int16_t max_num = svmaxv_s16(pg, v_max);\n\n    return (MinMaxPair){min_num, max_num};\n}\n```"}
{"task_id": "SimdBench_35_SVE", "completion": "```c\n#include <arm_sve.h>\n\ntypedef struct {\n    int16_t min_num;\n    int16_t max_num;\n} MinMaxPair;\n\nMinMaxPair min_max_pair_simd(const int16_t* vec, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svint16_t v_min = svdup_n_s16(INT16_MAX);\n    svint16_t v_max = svdup_n_s16(INT16_MIN);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t v = svld1(pg, &vec[i]);\n        v_min = svmin_s16_x(pg, v_min, v);\n        v_max = svmax_s16_x(pg, v_max, v);\n    }\n\n    int16_t min_num = svminv_s16(pg, v_min);\n    int16_t max_num = svmaxv_s16(pg, v_max);\n\n    return (MinMaxPair){min_num, max_num};\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        size_t j = 0;\n\n        svbool_t pg = svwhilelt_b32(j, cols - 1);\n        svint32_t v = svld1_s32(pg, &row[j]);\n        svint32_t v_next = svld1_s32(pg, &row[j + 1]);\n\n        svbool_t p = svcmplt_s32(pg, v, v_next);\n        if (!svptest_any(svptrue_b32(), p)) {\n            return false;\n        }\n\n        j += svcntp_b32(pg);\n        if (j + svcntp_b32(svwhilelt_b32(j, cols - 1)) >= cols - 1) {\n            break;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        size_t j;\n\n        svbool_t pg = svwhilelt_b32(0, cols - 1);\n        svint32_t v = svld1_s32(pg, &row[0]);\n        svint32_t v_next = svld1_s32(pg, &row[1]);\n\n        svbool_t p = svcmplt(pg, v, v_next);\n        if (!svptest_any(svptrue_b32(), p)) {\n            return false;\n        }\n\n        for (j = 1; j < cols - svcntp_b32(pg, p); j += svcntd()) {\n            pg = svwhilelt_b32(j, cols - 1);\n            v = v_next;\n            v_next = svld1_s32(pg, &row[j + 1]);\n\n            p = svcmplt(pg, v, v_next);\n            if (!svptest_any(svptrue_b32(), p)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        size_t j;\n\n        svbool_t pg = svwhilelt_b32(0, cols - 1);\n        svint32_t v = svld1_s32(pg, &row[0]);\n        svint32_t v_next = svld1_s32(pg, &row[1]);\n\n        svbool_t p = svcmplt_s32(pg, v, v_next);\n        if (!svptest_any(svptrue_b32(), p)) {\n            return false;\n        }\n\n        for (j = 1; j < cols - 1; j += svcntw()) {\n            v = v_next;\n            v_next = svld1_s32(pg, &row[j + 1]);\n\n            p = svcmplt_s32(pg, v, v_next);\n            if (!svptest_any(svptrue_b32(), p)) {\n                return false;\n            }\n        }\n\n        for (; j < cols - 1; ++j) {\n            if (row[j] >= row[j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        size_t j = 0;\n\n        svbool_t pg = svwhilelt_b32(j, cols - 1);\n        svint32_t v = svld1_s32(pg, &row[j]);\n        svint32_t v_next = svld1_s32(pg, &row[j + 1]);\n\n        svbool_t p = svcmplt_s32(pg, v, v_next);\n        if (!svptest_any(svptrue_b32(), p)) {\n            return false;\n        }\n\n        j += svcntw();\n        if (j + svcntw() >= cols - 1) {\n            j = cols - 2;\n        }\n\n        while (++j < cols - 1) {\n            if (row[j] >= row[j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_36_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_rows_strictly_increasing_simd(const int* matrix, size_t rows, size_t cols) {\n    if (rows == 0 || cols == 0) return false;\n\n    for (size_t i = 0; i < rows; ++i) {\n        const int* row = matrix + i * cols;\n        size_t j = 0;\n\n        svbool_t pg = svwhilelt_b32(j, cols - 1);\n        svint32_t v = svld1_s32(pg, &row[j]);\n        svint32_t v_next = svld1_s32(pg, &row[j + 1]);\n\n        svbool_t cmp = svcmplt_s32(pg, v, v_next);\n        if (!svptest_any(pg, cmp)) {\n            return false;\n        }\n\n        j += svcntw();\n        if (j + svcntw() >= cols - 1) {\n            j = cols - 2;\n        }\n\n        while (++j < cols - 1) {\n            if (row[j] >= row[j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t total_blocks = num_blocks_row * num_blocks_col;\n\n    for (size_t block_idx = 1; block_idx < total_blocks; ++block_idx) {\n        size_t row_start = (block_idx / num_blocks_col) * block_size;\n        size_t col_start = (block_idx % num_blocks_col) * block_size;\n\n        for (size_t i = 0; i < block_size; ++i) {\n            const int* first_block_row = matrix + i * cols;\n            const int* current_block_row = matrix + (row_start + i) * cols + col_start;\n\n            svbool_t pg = svwhilelt_b32(0, block_size);\n            svint32_t first_block_vec = svld1(pg, first_block_row);\n            svint32_t current_block_vec = svld1(pg, current_block_row);\n\n            svbool_t cmp = svcmpeq_s32(pg, first_block_vec, current_block_vec);\n            if (!svptest_any(pg, cmp)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t block_elements = block_size * block_size;\n\n    const int* first_block = matrix;\n\n    for (size_t i = 1; i < num_blocks_row * num_blocks_col; ++i) {\n        const int* current_block = matrix + i * block_elements;\n\n        for (size_t j = 0; j < block_elements; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, block_elements);\n            svint32_t v_first = svld1(pg, &first_block[j]);\n            svint32_t v_current = svld1(pg, &current_block[j]);\n\n            if (svptest_any(pg, svcmpne_n_u32_x(pg, v_first, v_current))) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t block_elements = block_size * block_size;\n\n    const int* first_block = matrix;\n\n    for (size_t i = 1; i < num_blocks_row * num_blocks_col; ++i) {\n        const int* current_block = matrix + i * block_elements;\n\n        for (size_t j = 0; j < block_elements; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, block_elements);\n            svint32_t vec_first = svld1_s32(pg, &first_block[j]);\n            svint32_t vec_current = svld1_s32(pg, &current_block[j]);\n\n            if (svptest_any(pg, svcmpne_s32(pg, vec_first, vec_current))) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t block_elements = block_size * block_size;\n\n    for (size_t i = 1; i < num_blocks_row * num_blocks_col; ++i) {\n        const int* block_start = matrix + i * block_elements;\n        const int* first_block = matrix;\n\n        for (size_t j = 0; j < block_elements; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, block_elements);\n            svint32_t vec1 = svld1_s32(pg, first_block + j);\n            svint32_t vec2 = svld1_s32(pg, block_start + j);\n\n            if (svptest_any(pg, svcmpne_s32(pg, vec1, vec2))) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_37_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool matrix_blocks_equal_simd(const int* matrix, size_t block_size, size_t rows, size_t cols) {\n    if (block_size == 0 || rows % block_size != 0 || cols % block_size != 0) {\n        return false;\n    }\n\n    size_t num_blocks_row = rows / block_size;\n    size_t num_blocks_col = cols / block_size;\n    size_t block_elements = block_size * block_size;\n\n    const int* first_block = matrix;\n\n    for (size_t i = 1; i < num_blocks_row * num_blocks_col; ++i) {\n        const int* current_block = matrix + i * block_elements;\n\n        for (size_t j = 0; j < block_elements; j += svcntw()) {\n            svbool_t pg = svwhilelt_b32(j, block_elements);\n            svint32_t v_first = svld1_s32(pg, &first_block[j]);\n            svint32_t v_current = svld1_s32(pg, &current_block[j]);\n\n            if (svptest_any(pg, svcmpne_s32(pg, v_first, v_current))) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, block_size);\n    svfloat64_t first_block = svld1(pg, &vec[0]);\n\n    for (size_t i = block_size; i < full_blocks * block_size; i += block_size) {\n        svfloat64_t current_block = svld1(pg, &vec[i]);\n        svfloat64_t diff = svabsdiff_f64_x(pg, first_block, current_block);\n        svbool_t cmp = svcmple_f64(pg, diff, tolerance);\n        if (!svptest_any(pg, cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, block_size);\n    svfloat64_t first_block = svld1_f64(pg, vec);\n\n    for (size_t i = block_size; i < full_blocks * block_size; i += block_size) {\n        svfloat64_t current_block = svld1_f64(pg, vec + i);\n        svfloat64_t diff = svabsdiff_x(pg, first_block, current_block);\n        svbool_t cmp = svcmple_f64(pg, diff, tolerance);\n        if (!svptest_any(pg, cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, block_size);\n    svfloat64_t first_block = svld1(pg, vec);\n\n    for (size_t i = block_size; i < full_blocks * block_size; i += block_size) {\n        svfloat64_t current_block = svld1(pg, vec + i);\n        svfloat64_t diff = svabsdiff_x(pg, first_block, current_block);\n        svbool_t cmp = svcmple(pg, diff, tolerance);\n        if (!svptest_any(pg, cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == NULL || length == 0 || block_size == 0 || block_size > length) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks == 0) {\n        return false;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, block_size);\n    svfloat64_t first_block = svld1_f64(pg, vec);\n\n    for (size_t i = 1; i < full_blocks; ++i) {\n        svfloat64_t current_block = svld1_f64(pg, vec + i * block_size);\n        svfloat64_t diff = svabsdiff_f64(pg, first_block, current_block);\n        svbool_t mask = svcmple_f64(pg, diff, tolerance);\n\n        if (!svptest_any(svptrue_b64(), mask)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_38_SVE", "completion": "```c\n#include <arm_sve.h>\n\nbool vector_block_equal_simd(const double* vec, double tolerance, size_t length, size_t block_size) {\n    if (vec == nullptr || length == 0 || block_size == 0 || length < block_size) {\n        return false;\n    }\n\n    size_t full_blocks = length / block_size;\n    if (full_blocks < 2) {\n        return false;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, block_size);\n    svfloat64_t first_block = svld1(pg, vec);\n\n    for (size_t i = 1; i < full_blocks; ++i) {\n        svfloat64_t current_block = svld1(pg, vec + i * block_size);\n        svfloat64_t diff = svabsdiff_f64(pg, first_block, current_block);\n        svbool_t cmp = svcmple_f64(pg, diff, tolerance);\n        if (!svptest_any(pg, cmp)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <math.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t vector_length = svcntd();\n    size_t cols_chunk = cols / vector_length;\n    size_t cols_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t norm = svdup_f64(0.0);\n\n        for (size_t j = 0; j < cols_chunk; ++j) {\n            svfloat64_t chunk = svld1(svptrue_b64(), &matrix[i * cols + j * vector_length]);\n            norm = svmla_f64_x(svptrue_b64(), norm, chunk, chunk);\n        }\n\n        if (cols_remainder > 0) {\n            svfloat64_t chunk = svld1(svptrue_b64(), &matrix[i * cols + cols_chunk * vector_length]);\n            svbool_t pg = svwhilelt_b64(0, cols_remainder);\n            norm = svmla_f64_x(pg, norm, chunk, chunk);\n        }\n\n        double row_norm = 0.0;\n        svst1(svptrue_b64(), &row_norm, norm);\n        row_norm = sqrt(row_norm);\n\n        result[i] = row_norm > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    svbool_t pg = svwhilelt_b64_s64(0, rows);\n    size_t cols_vec = cols * sizeof(double);\n\n    for (size_t i = 0; i < rows; i += svcntd()) {\n        svfloat64_t vec_sum = svdup_f64(0.0);\n        svfloat64_t vec_threshold = svld1_f64(pg, &thresholds[i]);\n\n        for (size_t j = 0; j < cols; j++) {\n            svfloat64_t vec_row = svld1_f64(pg, &matrix[i * cols + j]);\n            vec_sum = svmla_f64_m(pg, vec_sum, vec_row, vec_row);\n        }\n\n        svbool_t cmp = svcmpeq_f64(pg, vec_sum, vec_threshold);\n        svst1_u8(pg, &result[i], svcmpgt_f64(pg, vec_sum, vec_threshold));\n\n        pg = svwhilelt_b64_s64(i + svcntd(), rows);\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t vector_length = svcntd();\n    size_t cols_chunk = cols / vector_length;\n    size_t cols_remainder = cols % vector_length;\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t vec_sum = svdup_f64(0.0);\n\n        const double* row_start = matrix + i * cols;\n        const double* row_end = row_start + cols;\n        const double* chunk_end = row_start + cols_chunk * vector_length;\n\n        for (const double* ptr = row_start; ptr < chunk_end; ptr += vector_length) {\n            svfloat64_t vec = svld1(svptrue_b64(), ptr);\n            vec_sum = svmla_f64_x(svdup_b64(), vec_sum, vec, vec);\n        }\n\n        if (cols_remainder > 0) {\n            svfloat64_t vec = svld1(svptrue_b64(), chunk_end);\n            vec_sum = svmla_f64_x(svptrue_b64(), vec_sum, vec, vec);\n        }\n\n        double row_sum = 0.0;\n        svst1(svptrue_b64(), &row_sum, vec_sum);\n\n        result[i] = (row_sum > thresholds[i]);\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    svbool_t pg = svwhilelt_b64_s64(0, rows);\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t vsum = svdup_f64(0.0);\n        svfloat64_t vthreshold = svdup_f64(thresholds[i]);\n\n        for (size_t j = 0; j < cols; j += svcntd()) {\n            svfloat64_t v = svld1(pg, &matrix[i * cols + j]);\n            vsum = svmla_f64_x(pg, vsum, v, v);\n        }\n\n        svfloat64_t vnorm = svsqrt_f64_x(pg, vsum);\n        svbool_t cmp = svcmpeq_f64(pg, vnorm, vthreshold);\n\n        result[i] = svptest_any(pg, cmp);\n    }\n}\n```"}
{"task_id": "SimdBench_39_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_row_norm_compare_simd(const double* matrix, const double* thresholds, size_t rows, size_t cols, bool* result) {\n    size_t cols_aligned = cols & ~(svcntd() - 1);\n\n    for (size_t i = 0; i < rows; ++i) {\n        svfloat64_t vsum = svdup_f64(0.0);\n        const double* row = matrix + i * cols;\n\n        size_t j;\n        for (j = 0; j < cols_aligned; j += svcntd()) {\n            svfloat64_t v = svld1(svptrue_b64(), row + j);\n            vsum = svadd_f64_x(svptrue_b64(), vsum, svmul_f64_x(svptrue_b64(), v, v));\n        }\n\n        double sum = 0.0;\n        svst1(svptrue_b64(), &sum, vsum);\n\n        for (; j < cols; ++j) {\n            sum += row[j] * row[j];\n        }\n\n        result[i] = sqrt(sum) > thresholds[i];\n    }\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t va = svld1_u32(pg, A);\n    svuint32_t vb = svld1_u32(pg, B);\n    svuint32_t vc = svorr_u32_z(pg, va, vb);\n    svst1_u32(pg, C, vc);\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t va = svld1_u32(pg, A);\n    svuint32_t vb = svld1_u32(pg, B);\n    svuint32_t vc = svorr_u32_z(pg, va, vb);\n    svst1_u32(pg, C, vc);\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t va = svld1_u32(pg, A);\n    svuint32_t vb = svld1_u32(pg, B);\n    svuint32_t vc = svorr_z(pg, va, vb);\n    svst1_u32(pg, C, vc);\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t va = svld1_u32(pg, A);\n    svuint32_t vb = svld1_u32(pg, B);\n    svuint32_t vc = svorr_u32_z(pg, va, vb);\n    svst1_u32(pg, C, vc);\n}\n```"}
{"task_id": "SimdBench_40_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bitwise_or_simd(const uint32_t* A, const uint32_t* B, uint32_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t va = svld1_u32(pg, A);\n    svuint32_t vb = svld1_u32(pg, B);\n    svuint32_t vc = svorr_u32_z(pg, va, vb);\n    svst1_u32(pg, C, vc);\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t vA = svld1_s8(pg, A);\n    svint8_t vB = svld1_s8(pg, B);\n\n    svint16_t vA16 = svunpklo_s16(vA);\n    svint16_t vB16 = svunpklo_s16(vB);\n\n    svint32_t vA32 = svmulh_s32(svunpklo_s32(vA16), svunpklo_s32(vA16));\n    svint32_t vB32 = svmulh_s32(svunpklo_s32(vB16), svunpklo_s32(vB16));\n    svint32_t vAB32 = svmulh_s32(svunpklo_s32(vA16), svunpklo_s32(vB16));\n\n    svint64_t vA64 = svunpklo_s64(vA32);\n    svint64_t vB64 = svunpklo_s64(vB32);\n    svint64_t vAB64 = svunpklo_s64(vAB32);\n\n    int64_t sumA = svaddv_s64(pg, vA64);\n    int64_t sumB = svaddv_s64(pg, vB64);\n    int64_t sumAB = svaddv_s64(pg, vAB64);\n\n    return (sumA + sumB - 2 * sumAB);\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t vA = svld1_s8(pg, A);\n    svint8_t vB = svld1_s8(pg, B);\n\n    svint16_t vA16 = svunpklo_s16(vA);\n    svint16_t vB16 = svunpklo_s16(vB);\n\n    svint32_t vA32 = svunpklo_s32(vA16);\n    svint32_t vB32 = svunpklo_s32(vB16);\n\n    svint32_t vA_sq = svmul_s32_x(pg, vA32, vA32);\n    svint32_t vB_sq = svmul_s32_x(pg, vB32, vB32);\n    svint32_t vAB = svmul_s32_x(pg, vA32, vB32);\n\n    svint32_t vSum_sq = svadd_s32_x(pg, vA_sq, vB_sq);\n    svint32_t vDiff = svsub_s32_x(pg, vSum_sq, vAB);\n\n    int64_t result = svaddv_s32(pg, vDiff);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t vA = svld1_s8(pg, &A[0]);\n    svint8_t vB = svld1_s8(pg, &B[0]);\n\n    svint16_t vA16 = svcvt_s16_s8_z(pg, vA);\n    svint16_t vB16 = svcvt_s16_s8_z(pg, vB);\n\n    svint32_t vA32 = svcvt_s32_s16_z(pg, vA16);\n    svint32_t vB32 = svcvt_s32_s16_z(pg, vB16);\n\n    svint32_t vA_sq = svmul_s32_z(pg, vA32, vA32);\n    svint32_t vB_sq = svmul_s32_z(pg, vB32, vB32);\n    svint32_t vAB = svmul_s32_z(pg, vA32, vB32);\n\n    svint32_t vSum_sq = svadd_s32_z(pg, vA_sq, vB_sq);\n    svint32_t vDiff = svsub_s32_z(pg, vSum_sq, vAB);\n\n    int64_t result = svaddv_s32(pg, vDiff);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t vA = svld1(pg, &A[0]);\n    svint8_t vB = svld1(pg, &B[0]);\n\n    svint16_t vA16 = svmovl_s8_s16(vA);\n    svint16_t vB16 = svmovl_s8_s16(vB);\n\n    svint32_t vA32 = svmovl_s16_s32(vA16);\n    svint32_t vB32 = svmovl_s16_s32(vB16);\n\n    svint32_t vSquareA = svmul_n_s32_x(pg, vA32, vA32);\n    svint32_t vSquareB = svmul_n_s32_x(pg, vB32, vB32);\n    svint32_t vProduct = svmul_n_s32_x(pg, vA32, vB32);\n\n    svint32_t vSumSquare = svadd_s32_x(pg, vSquareA, vSquareB);\n    svint32_t vDiff = svsub_s32_x(pg, vSumSquare, vProduct);\n\n    int64_t result = svaddv_s32_x(pg, vDiff);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_41_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint64_t squarediff_simd(const int8_t * A, const int8_t * B, size_t length) {\n    svbool_t pg = svwhilelt_b8(0, length);\n    svint8_t vA = svld1_s8(pg, &A[0]);\n    svint8_t vB = svld1_s8(pg, &B[0]);\n\n    svint16_t vA16 = svxtl_s8(pg, vA);\n    svint16_t vB16 = svxtl_s8(pg, vB);\n\n    svint32_t vA32 = svmulh_s16(pg, vA16, vA16);\n    svint32_t vB32 = svmulh_s16(pg, vB16, vB16);\n    svint32_t vAB32 = svmulh_s16(pg, vA16, vB16);\n\n    svint64_t vA64 = svpmull_s32(pg, vA32, vA32);\n    svint64_t vB64 = svpmull_s32(pg, vB32, vB32);\n    svint64_t vAB64 = svpmull_s32(pg, vAB32, vAB32);\n\n    svint64_t vSumA = svaddv_s64(pg, vA64);\n    svint64_t vSumB = svaddv_s64(pg, vB64);\n    svint64_t vSumAB = svaddv_s64(pg, vAB64);\n\n    int64_t sumA = svaddv_s64(svptrue_b64(), vSumA);\n    int64_t sumB = svaddv_s64(svptrue_b64(), vSumB);\n    int64_t sumAB = svaddv_s64(svptrue_b64(), vSumAB);\n\n    return (sumA + sumB - sumAB);\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint64_t va = svld1_u64(pg, &A[0]);\n    svuint64_t vb = svld1_u64(pg, &B[0]);\n    svuint64_t vc = svand_u64_z(pg, va, svnot_u64_z(pg, vb));\n    svst1_u64(pg, &C[0], vc);\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint64_t va = svld1_u64(pg, &A[0]);\n    svuint64_t vb = svld1_u64(pg, &B[0]);\n    svuint64_t vc = svand_u64_z(pg, va, svnot_u64_z(pg, vb));\n    svst1_u64(pg, &C[0], vc);\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint64_t va = svld1_u64(pg, A);\n    svuint64_t vb = svld1_u64(pg, B);\n    svuint64_t vc = svand_u64_z(pg, va, svnot_u64_z(pg, vb));\n    svst1_u64(pg, C, vc);\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint64_t va = svld1_u64(pg, &A[0]);\n    svuint64_t vb = svld1_u64(pg, &B[0]);\n    svuint64_t vc = svand_u64_z(pg, va, svnot_u64_z(pg, vb));\n    svst1_u64(pg, &C[0], vc);\n}\n```"}
{"task_id": "SimdBench_42_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_clear_simd(const uint64_t* A, const uint64_t* B, uint64_t* C, size_t length) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b64(i, length);\n\n    do {\n        svuint64_t va = svld1(pg, &A[i]);\n        svuint64_t vb = svld1(pg, &B[i]);\n        svuint64_t vc = svand_x(pg, va, svnot_x(pg, vb));\n        svst1(pg, &C[i], vc);\n\n        i += svcntd();\n        pg = svwhilelt_b64(i, length);\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t v_A = svld1_s8(pg, A);\n    svint8_t v_B = svld1_s8(pg, B);\n\n    svbool_t pos_mask = svcmpgt_s8(pg, v_A, 0);\n    pos_mask = svand_z(pg, pos_mask, svcmpgt_s8(pg, v_B, 0));\n\n    svbool_t neg_mask = svcmpgt_s8(pg, svneg_s8_x(pg, v_A), 0);\n    neg_mask = svand_z(pg, neg_mask, svcmpgt_s8(pg, svneg_s8_x(pg, v_B), 0));\n\n    svint8_t result = svdup_n_s8(0);\n    result = sv_sel(pg, result, svdup_n_s8(1), pos_mask);\n    result = sv_sel(pg, result, svdup_n_s8(-1), neg_mask);\n\n    svst1_s8(pg, C, result);\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t vA = svld1_s8(pg, A);\n    svint8_t vB = svld1_s8(pg, B);\n\n    svbool_t pos_mask = svcmpgt_s8(pg, vA, 0);\n    svbool_t neg_mask = svcmpgt_s8(pg, 0, vA);\n\n    pos_mask = svand_b_z(pg, pos_mask, svcmpgt_s8(pg, vB, 0));\n    neg_mask = svand_b_z(pg, neg_mask, svcmpgt_s8(pg, 0, vB));\n\n    svint8_t result = svdup_n_s8(0);\n    result = svsel_s8(pos_mask, result, svdup_n_s8(1));\n    result = svsel_s8(neg_mask, result, svdup_n_s8(-1));\n\n    svst1_s8(pg, C, result);\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t v_A = svld1_s8(pg, A);\n    svint8_t v_B = svld1_s8(pg, B);\n\n    svint8_t v_pos = svcmpgt_s8(pg, v_A, 0);\n    svint8_t v_neg = svcmpgt_s8(pg, 0, v_A);\n    svint8_t v_pos_B = svcmpgt_s8(pg, v_B, 0);\n    svint8_t v_neg_B = svcmpgt_s8(pg, 0, v_B);\n\n    svint8_t v_both_pos = svand_z(pg, v_pos, v_pos_B);\n    svint8_t v_both_neg = svand_z(pg, v_neg, v_neg_B);\n\n    svint8_t v_result = svadd_z(pg, svdup_n_s8(0), svsel_s8(v_both_pos, svdup_n_s8(1), svsel_s8(v_both_neg, svdup_n_s8(-1), svdup_n_s8(0))));\n\n    svst1_s8(pg, C, v_result);\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t vA = svld1_s8(pg, A);\n    svint8_t vB = svld1_s8(pg, B);\n\n    svint8_t vPos = svcmpgt_s8(pg, vA, 0);\n    svint8_t vNeg = svcmpgt_s8(pg, 0, vA);\n    svint8_t vPosB = svcmpgt_s8(pg, vB, 0);\n    svint8_t vNegB = svcmpgt_s8(pg, 0, vB);\n\n    svint8_t vPosRes = svand_z(pg, vPos, vPosB);\n    svint8_t vNegRes = svand_z(pg, vNeg, vNegB);\n\n    svint8_t vRes = svsel_s8(svcmpeq_s8(pg, vPosRes, 1), svdup_n_s8(1), svdup_n_s8(0));\n    vRes = svsel_s8(svcmpeq_s8(pg, vNegRes, 1), svdup_n_s8(-1), vRes);\n\n    svst1_s8(pg, C, vRes);\n}\n```"}
{"task_id": "SimdBench_43_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_three_valued_logic_simd(const int8_t* A, const int8_t* B, int8_t* C, size_t length) {\n    svbool_t pg = svwhilelt_b8_s64(0, length);\n    svint8_t v_A = svld1_s8(pg, A);\n    svint8_t v_B = svld1_s8(pg, B);\n\n    svint8_t v_pos = svcmpgt_s8(pg, v_A, 0);\n    svint8_t v_neg = svcmpgt_s8(pg, 0, v_A);\n    svint8_t v_pos_B = svcmpgt_s8(pg, v_B, 0);\n    svint8_t v_neg_B = svcmpgt_s8(pg, 0, v_B);\n\n    svint8_t v_both_pos = svand_z(pg, v_pos, v_pos_B);\n    svint8_t v_both_neg = svand_z(pg, v_neg, v_neg_B);\n\n    svint8_t v_result = svsel_s8(v_both_pos, svdup_n_s8(1), svsel_s8(v_both_neg, svdup_n_s8(-1), svdup_n_s8(0)));\n\n    svst1_s8(pg, C, v_result);\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t i = 0;\n\n    svbool_t pg = svwhilelt_b16(i, mid);\n    svuint16_t va = svld1_u16(pg, &A[i]);\n    svuint16_t vb = svld1_u16(pg, &B[i]);\n    svuint16_t vc = svxor_u16_z(pg, va, vb);\n    svst1_u16(pg, &C[i], vc);\n    i += svcntw();\n\n    pg = svwhilelt_b16(i, mid + 1);\n    va = svld1_u16(pg, &A[i]);\n    svst1_u16(pg, &C[i], va);\n    i += svcntw();\n\n    pg = svwhilelt_b16(i, length);\n    va = svld1_u16(pg, &A[i]);\n    vb = svld1_u16(pg, &B[i]);\n    vc = svand_u16_z(pg, va, vb);\n    svst1_u16(pg, &C[i], vc);\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t i = 0;\n\n    svbool_t pg = svwhilelt_b16(i, mid);\n    svuint16_t vA = svld1_u16(pg, &A[i]);\n    svuint16_t vB = svld1_u16(pg, &B[i]);\n    svuint16_t vC = sveor_x_u16_z(pg, vA, vB);\n    svst1_u16(pg, &C[i], vC);\n    i += svcntw();\n\n    pg = svwhilelt_b16(i, mid);\n    vA = svld1_u16(pg, &A[i]);\n    vB = svld1_u16(pg, &B[i]);\n    vC = svand_z(pg, vA, vB);\n    svst1_u16(pg, &C[i], vC);\n    i += svcntw();\n\n    C[mid] = A[mid];\n\n    pg = svwhilelt_b16(i, length);\n    vA = svld1_u16(pg, &A[i]);\n    vB = svld1_u16(pg, &B[i]);\n    vC = svand_z(pg, vA, vB);\n    svst1_u16(pg, &C[i], vC);\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t i = 0;\n\n    svbool_t pg = svwhilelt_b16(i, mid);\n    svuint16_t vA = svld1(pg, &A[i]);\n    svuint16_t vB = svld1(pg, &B[i]);\n    svuint16_t vC_xor = sveor_x(pg, vA, vB);\n    svst1(pg, &C[i], vC_xor);\n\n    pg = svwhilelt_b16(i, length);\n    vA = svld1(pg, &A[i]);\n    vB = svld1(pg, &B[i]);\n    svuint16_t vC_and = svand_x(pg, vA, vB);\n    svst1(pg, &C[i], vC_and);\n\n    C[mid] = A[mid];\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t i = 0;\n\n    svbool_t pg = svwhilelt_b16(i, mid);\n    svuint16_t v_a = svld1_u16(pg, &A[i]);\n    svuint16_t v_b = svld1_u16(pg, &B[i]);\n    svuint16_t v_c_xor = svxor_n_u16_m(pg, v_a, v_b);\n    svst1_u16(pg, &C[i], v_c_xor);\n    i += svcntd();\n\n    C[mid] = A[mid];\n    i = mid + 1;\n\n    pg = svwhilelt_b16(i, length);\n    v_a = svld1_u16(pg, &A[i]);\n    v_b = svld1_u16(pg, &B[i]);\n    svuint16_t v_c_and = svand_u16_m(pg, v_a, v_b);\n    svst1_u16(pg, &C[i], v_c_and);\n}\n```"}
{"task_id": "SimdBench_44_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_op_simd(const uint16_t* A, const uint16_t* B, uint16_t* C, size_t length) {\n    size_t mid = length / 2;\n    size_t i = 0;\n\n    svbool_t pg = svwhilelt_b16(i, length);\n\n    for (i = 0; i < mid; i += svcntw()) {\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = sveor_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n\n    C[mid] = A[mid];\n\n    for (i = mid + 1; i < length; i += svcntw()) {\n        svbool_t pg = svwhilelt_b16(i, length);\n        svuint16_t va = svld1(pg, &A[i]);\n        svuint16_t vb = svld1(pg, &B[i]);\n        svuint16_t vc = svand_x(pg, va, vb);\n        svst1(pg, &C[i], vc);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n\n        svfloat32_t vA = svld1(pg, &A[i]);\n        svfloat32_t vB = svld1(pg, &B[i]);\n        svfloat32_t vC = svld1(pg, &C[i]);\n        svfloat32_t vD = svld1(pg, &D[i]);\n\n        svbool_t vCond1 = svld1sb_u32(pg, &cond1[i]);\n        svbool_t vCond2 = svld1sb_u32(pg, &cond2[i]);\n\n        svfloat32_t vOut = svsel_f32(svand_z(pg, vCond1, vCond2), vA,\n                           svsel_f32(vCond1, vB,\n                           svsel_f32(vCond2, vC, vD)));\n\n        svst1(pg, &out[i], vOut);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n\n        svfloat32_t vA = svld1(pg, &A[i]);\n        svfloat32_t vB = svld1(pg, &B[i]);\n        svfloat32_t vC = svld1(pg, &C[i]);\n        svfloat32_t vD = svld1(pg, &D[i]);\n\n        svbool_t vCond1 = svld1(pg, &cond1[i]);\n        svbool_t vCond2 = svld1(pg, &cond2[i]);\n\n        svfloat32_t vOut = svsel_f32(svand_z(pg, vCond1, vCond2), vA,\n                           svsel_f32(vCond1, vB,\n                           svsel_f32(vCond2, vC, vD)));\n\n        svst1(pg, &out[i], vOut);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n\n        svfloat32_t vA = svld1(pg, &A[i]);\n        svfloat32_t vB = svld1(pg, &B[i]);\n        svfloat32_t vC = svld1(pg, &C[i]);\n        svfloat32_t vD = svld1(pg, &D[i]);\n\n        svbool_t vCond1 = svld1sb(pg, &cond1[i]);\n        svbool_t vCond2 = svld1sb(pg, &cond2[i]);\n\n        svfloat32_t vOut = svsel_f32(svand_z(pg, vCond1, vCond2), vA, svsel_f32(vCond1, vB, svsel_f32(vCond2, vC, vD)));\n\n        svst1(pg, &out[i], vOut);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    svbool_t pg = svwhilelt_b64_s64(0, total_size);\n    svfloat32_t vA, vB, vC, vD;\n    svbool_t vCond1, vCond2;\n\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        vA = svld1_f32(pg, &A[i]);\n        vB = svld1_f32(pg, &B[i]);\n        vC = svld1_f32(pg, &C[i]);\n        vD = svld1_f32(pg, &D[i]);\n\n        vCond1 = svld1_u8(pg, (uint8_t *)&cond1[i]);\n        vCond2 = svld1_u8(pg, (uint8_t *)&cond2[i]);\n\n        svbool_t cond1_true = svcmpne_n_u8(pg, vCond1, 0);\n        svbool_t cond2_true = svcmpne_n_u8(pg, vCond2, 0);\n\n        svbool_t both_true = svand_z(pg, cond1_true, cond2_true);\n        svbool_t cond1_true_cond2_false = svand_z(pg, cond1_true, svnot_z(pg, cond2_true));\n        svbool_t cond1_false_cond2_true = svand_z(pg, svnot_z(pg, cond1_true), cond2_true);\n        svbool_t both_false = svand_z(pg, svnot_z(pg, cond1_true), svnot_z(pg, cond2_true));\n\n        svfloat32_t result = svsel_f32(both_true, vA,\n                            svsel_f32(cond1_true_cond2_false, vB,\n                            svsel_f32(cond1_false_cond2_true, vC,\n                            svsel_f32(both_false, vD, vD))));\n\n        svst1_f32(pg, &out[i], result);\n\n        pg = svwhilelt_b64_s64(i + svcntw(), total_size);\n    }\n}\n```"}
{"task_id": "SimdBench_45_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_multi_select_simd(const float* A, const float* B, const float* C, const float* D, const bool* cond1, const bool* cond2, float* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n\n        svfloat32_t vA = svld1(pg, &A[i]);\n        svfloat32_t vB = svld1(pg, &B[i]);\n        svfloat32_t vC = svld1(pg, &C[i]);\n        svfloat32_t vD = svld1(pg, &D[i]);\n\n        svbool_t vCond1 = svld1(pg, &cond1[i]);\n        svbool_t vCond2 = svld1(pg, &cond2[i]);\n\n        svfloat32_t vOut = svsel_f32(svand_z(pg, vCond1, vCond2), vA, svsel_f32(vCond1, vB, svsel_f32(vCond2, vC, vD)));\n\n        svst1(pg, &out[i], vOut);\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    svbool_t pg = svwhilelt_b32(0, total_size);\n    svuint32_t vA = svld1_u32(pg, A);\n\n    svuint32_t vCount = svcntw_b32(svdup_n_b32(1), vA);\n\n    svst1_u8(pg, out, vCount);\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    svbool_t pg = svwhilelt_b32(0, total_size);\n    svuint32_t vA = svld1_u32(pg, A);\n\n    svuint32_t vCount = svcntw_b32(svdup_n_b32(1), vA);\n    svuint8_t vCount_u8 = svqxtnb_u32(vCount);\n\n    svst1_u8(pg, out, vCount_u8);\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    for (size_t i = 0; i < total_size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_size);\n        svuint32_t v = svld1_u32(pg, &A[i]);\n\n        svuint32_t v1 = svcntp_b32(svdup_n_u32(1), v);\n        svuint32_t v2 = svcntp_b32(svdup_n_u32(2), v);\n        svuint32_t v4 = svcntp_b32(svdup_n_u32(4), v);\n        svuint32_t v8 = svcntp_b32(svdup_n_u32(8), v);\n        svuint32_t v16 = svcntp_b32(svdup_n_u32(16), v);\n\n        svuint32_t count = svadd_u32_x(pg, v1, svadd_u32_x(pg, v2, svadd_u32_x(pg, v4, svadd_u32_x(pg, v8, v16))));\n\n        svst1_u8(pg, &out[i], svreinterpret_u8_u32(count));\n    }\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    svbool_t pg = svwhilelt_b32(0, total_size);\n    svuint32_t vA = svld1_u32(pg, A);\n\n    svuint32_t vCount = svcntw();\n    svuint8_t vCount8 = svqxtnb_u8(vCount);\n\n    svst1_u8(pg, out, vCount8);\n}\n```"}
{"task_id": "SimdBench_46_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_bit_count_simd(const uint32_t* A, uint8_t* out, size_t dim1, size_t dim2, size_t dim3) {\n    size_t total_size = dim1 * dim2 * dim3;\n\n    svbool_t pg = svwhilelt_b32(0, total_size);\n    svuint32_t vA = svld1_u32(pg, A);\n\n    svuint32_t vCount = svcntw_b32(svdup_n_u32(0), vA);\n\n    svst1_u8(pg, out, vCount);\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_elements);\n\n        svint32_t vA = svld1_s32(pg, &A[i]);\n        svint32_t vB = svabs_s32_x(pg, vA);\n\n        svbool_t cond = svcmpne_n_s32(pg, svmod_n_s32_x(pg, vA, 3), 0);\n        vB = svsel_s32(cond, vA, vB);\n\n        svst1_s32(pg, &B[i], vB);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_elements);\n        svint32_t vA = svld1_s32(pg, &A[i]);\n        svint32_t vB = svabs_s32_x(pg, vA);\n\n        svbool_t cond = svcmpne_n_s32(pg, svmod_n_s32_x(pg, vA, 3), 0);\n        vB = svsel_s32(cond, vA, vB);\n\n        svst1_s32(pg, &B[i], vB);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_elements);\n\n        svint32_t vA = svld1_s32(pg, &A[i]);\n        svint32_t vB = svabs_s32_x(pg, vA);\n\n        svbool_t cond = svcmpne_n_s32(pg, svmod_n_s32(pg, vA, 3), 0);\n        vB = svsel_s32(cond, vA, vB);\n\n        svst1_s32(pg, &B[i], vB);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_elements);\n        svint32_t vA = svld1_s32(pg, &A[i]);\n        svint32_t vB = svabs_s32_x(pg, vA);\n\n        svbool_t cond = svcmpne_n_s32(pg, svmod_n_s32_x(pg, vA, 3), 0);\n        vB = svsel_s32(cond, vA, vB);\n\n        svst1_s32(pg, &B[i], vB);\n    }\n}\n```"}
{"task_id": "SimdBench_47_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_abs_simd(const int* A, int* B, size_t rows, size_t cols) {\n    size_t total_elements = rows * cols;\n    size_t i;\n\n    for (i = 0; i < total_elements; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, total_elements);\n        svint32_t vA = svld1_s32(pg, &A[i]);\n        svint32_t vB = svabs_s32_x(pg, vA);\n\n        svbool_t cond = svcmpne_n_s32(pg, svmod_n_s32_x(pg, vA, 3), 0);\n        vB = svsel_s32(cond, vA, vB);\n\n        svst1_s32(pg, &B[i], vB);\n    }\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint32_t v_mask = svdup_n_u32(0xF);\n    svuint32_t v_condition = svand_u32_z(pg, v_src, v_mask);\n    svbool_t v_cond_pg = svcmpeq_n_u32(pg, v_condition, 0xF);\n    svuint32_t v_rotated = svrshl_u32_x(pg, v_src, svdup_n_u32(rotate_bits));\n    svuint32_t v_negated = svnot_u32_z(pg, v_src);\n    svuint32_t v_result = svsel_u32(v_cond_pg, v_rotated, v_negated);\n    svst1_u32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint32_t v_mask = svdup_n_u32(0xF);\n    svuint32_t v_condition = svand_u32_z(pg, v_src, v_mask);\n    svbool_t v_pred = svcmpeq_n_u32(pg, v_condition, 0xF);\n    svuint32_t v_rotated = svrshl_u32_x(pg, v_src, svdup_n_u32(rotate_bits));\n    svuint32_t v_negated = svnot_u32_z(pg, v_src);\n    svuint32_t v_result = svsel_u32(v_pred, v_rotated, v_negated);\n    svst1_u32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint32_t v_mask = svdup_n_u32(0xF);\n    svuint32_t v_condition = svand_u32_z(pg, v_src, v_mask);\n    svbool_t v_pred = svcmpne_n_u32(pg, v_condition, svdup_n_u32(0xF));\n    svuint32_t v_rotated = svrshl_u32_x(pg, v_src, svdup_n_u32(rotate_bits));\n    svuint32_t v_negated = svnot_u32_z(pg, v_src);\n    svuint32_t v_result = svsel_u32(v_pred, v_rotated, v_negated);\n    svst1_u32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint32_t v_mask = svdup_n_u32(0xF);\n    svuint32_t v_condition = svand_u32_z(pg, v_src, v_mask);\n    svbool_t v_pred = svcmpeq_n_u32(pg, v_condition, 0xF);\n    svuint32_t v_rotated = svrshl_u32_x(pg, v_src, svdup_n_u32(rotate_bits));\n    svuint32_t v_negated = svnot_u32_z(pg, v_src);\n    svuint32_t v_result = svsel_u32(v_pred, v_rotated, v_negated);\n    svst1_u32(pg, dst, v_result);\n}\n```"}
{"task_id": "SimdBench_48_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid matrix_conditional_bit_rotate_simd(const uint32_t* src, uint32_t* dst, uint8_t rotate_bits, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint32_t v_dst;\n\n    svuint32_t mask = svdup_n_u32(0xF);\n    svuint32_t condition = svand_u32_z(pg, v_src, mask);\n    svbool_t cond = svcmpeq_n_u32(pg, condition, 0xF);\n\n    svuint32_t rotated = svrshl_u32_x(pg, v_src, rotate_bits);\n    svuint32_t negated = svnot_u32_z(pg, v_src);\n\n    v_dst = svsel_u32(cond, rotated, negated);\n\n    svst1_u32(pg, dst, v_dst);\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    svfloat32_t v_epsilon = svdup_n_f32(epsilon);\n    svfloat32_t v_neg_epsilon = svdup_n_f32(-epsilon);\n    svbool_t pg = svwhilelt_b32(0, (int32_t)length);\n\n    do {\n        svfloat32_t v_a = svld1(pg, (float32_t*)&A[0]);\n        svfloat32_t v_b = svld1(pg, (float32_t*)&B[0]);\n        svfloat32_t v_diff = svsub_f32_x(pg, v_a, v_b);\n\n        svbool_t cmp_gt = svcmpgt(pg, v_diff, v_epsilon);\n        svbool_t cmp_lt = svcmplt(pg, v_diff, v_neg_epsilon);\n\n        svint8_t v_out = svcreate3_s8(cmp_gt, 1, cmp_lt, -1, svnot_b_z(pg, svorr_b_z(pg, cmp_gt, cmp_lt)), 0);\n\n        svst1_s8(pg, (int8_t*)&out[0], v_out);\n\n        A += svcntd();\n        B += svcntd();\n        out += svcntd();\n    } while (svptest_any(pg, pg));\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    svfloat32_t v_epsilon = svdup_n_f32(epsilon);\n    svfloat32_t v_neg_epsilon = svdup_n_f32(-epsilon);\n    svbool_t pg = svwhilelt_b32(0, length);\n\n    do {\n        svfloat32_t v_a = svld1(pg, &A[0]);\n        svfloat32_t v_b = svld1(pg, &B[0]);\n        svfloat32_t v_diff = svsub_f32_x(pg, v_a, v_b);\n\n        svbool_t cmp_gt = svcmpgt(pg, v_diff, v_epsilon);\n        svbool_t cmp_lt = svcmplt(pg, v_diff, v_neg_epsilon);\n\n        svint8_t v_out = svadd_n_s8_x(pg, svdup_n_s8(0), 0);\n        v_out = svsel_s8(cmp_gt, v_out, svdup_n_s8(1));\n        v_out = svsel_s8(cmp_lt, v_out, svdup_n_s8(-1));\n\n        svst1_s8(pg, &out[0], v_out);\n\n        A += svcntd();\n        B += svcntd();\n        out += svcntd();\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    svfloat32_t v_epsilon = svdup_n_f32(epsilon);\n    svfloat32_t v_neg_epsilon = svdup_n_f32(-epsilon);\n    svbool_t pg = svwhilelt_b32(0, length);\n\n    do {\n        svfloat32_t v_a = svld1_f32(pg, &A[0]);\n        svfloat32_t v_b = svld1_f32(pg, &B[0]);\n        svfloat32_t v_diff = svsub_f32_x(pg, v_a, v_b);\n\n        svbool_t v_cmp_gt = svcmpgt_f32(pg, v_diff, v_epsilon);\n        svbool_t v_cmp_lt = svcmplt_f32(pg, v_diff, v_neg_epsilon);\n\n        svint8_t v_one = svdup_n_s8(1);\n        svint8_t v_neg_one = svdup_n_s8(-1);\n        svint8_t v_zero = svdup_n_s8(0);\n\n        svint8_t v_out = svsel_s8(v_cmp_gt, v_one, svsel_s8(v_cmp_lt, v_neg_one, v_zero));\n\n        svst1_s8(pg, &out[0], v_out);\n\n        A += svcntp_b32(pg);\n        B += svcntp_b32(pg);\n        out += svcntp_b32(pg);\n    } while (svptest_any(pg, pg));\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    svfloat32_t epsilon_vec = svdup_n_f32(epsilon);\n    svfloat32_t neg_epsilon_vec = svdup_n_f32(-epsilon);\n    svfloat32_t zero_vec = svdup_n_f32(0.0f);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svfloat32_t a_vec = svld1(svptrue_b32(), &A[i]);\n        svfloat32_t b_vec = svld1(svptrue_b32(), &B[i]);\n        svfloat32_t diff_vec = svsub_f32_x(svptrue_b32(), a_vec, b_vec);\n\n        svbool_t gt_epsilon = svcmpgt(svptrue_b32(), diff_vec, epsilon_vec);\n        svbool_t lt_neg_epsilon = svcmplt(svptrue_b32(), diff_vec, neg_epsilon_vec);\n        svbool_t within_epsilon = svnot_z(svptrue_b32(), svorr_z(svptrue_b32(), gt_epsilon, lt_neg_epsilon));\n\n        svint8_t result_vec = svsel_s8(gt_epsilon, svdup_n_s8(1), svsel_s8(lt_neg_epsilon, svdup_n_s8(-1), svdup_n_s8(0)));\n\n        svst1(svptrue_b8(), &out[i], result_vec);\n    }\n}\n```"}
{"task_id": "SimdBench_49_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid tensor_ternary_compare_simd(const float* A, const float* B, int8_t* out, float epsilon, size_t length) {\n    svfloat32_t v_epsilon = svdup_n_f32(epsilon);\n    svfloat32_t v_neg_epsilon = svdup_n_f32(-epsilon);\n    svbool_t pg = svwhilelt_b32(0, length);\n\n    do {\n        svfloat32_t v_a = svld1(pg, &A[0]);\n        svfloat32_t v_b = svld1(pg, &B[0]);\n        svfloat32_t v_diff = svsub_f32_x(pg, v_a, v_b);\n\n        svbool_t p_gt = svcmpgt(pg, v_diff, v_epsilon);\n        svbool_t p_lt = svcmplt(pg, v_diff, v_neg_epsilon);\n\n        svint8_t v_out = svdup_n_s8(0);\n        v_out = sv_sel(v_out, svdup_n_s8(1), p_gt);\n        v_out = sv_sel(v_out, svdup_n_s8(-1), p_lt);\n\n        svst1_s8(pg, &out[0], v_out);\n\n        A += svcntw();\n        B += svcntw();\n        out += svcntw();\n    } while (svptest_any(pg, pg));\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <limits.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    svfloat32_t v_max = svdup_n_f32(INT32_MAX);\n    svfloat32_t v_min = svdup_n_f32(INT32_MIN);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_A = svld1(svptrue_b32(), &A[i]);\n\n        // Clamp the values\n        v_A = svmax_f32_z(svptrue_b32(), v_A, v_min);\n        v_A = svmin_f32_z(svptrue_b32(), v_A, v_max);\n\n        // Convert to int32_t\n        svint32_t v_B = svcvt_s32_f32_z(svptrue_b32(), v_A);\n\n        // Store the result\n        svst1(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <limits.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    svfloat32_t v_max = svdup_f32(INT32_MAX);\n    svfloat32_t v_min = svdup_f32(INT32_MIN);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_A = svld1(svptrue_b32(), &A[i]);\n\n        // Clamp the values\n        v_A = svmax_f32_z(svptrue_b32(), v_A, v_min);\n        v_A = svmin_f32_z(svptrue_b32(), v_A, v_max);\n\n        // Convert to int32_t\n        svint32_t v_B = svcvt_s32_f32_z(svptrue_b32(), v_A);\n\n        // Store the result\n        svst1(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <limits.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    svfloat32_t v_max = svdup_n_f32(INT32_MAX);\n    svfloat32_t v_min = svdup_n_f32(INT32_MIN);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_A = svld1(svptrue_b32(), &A[i]);\n\n        // Clamp the values\n        v_A = svmax_f32_z(svptrue_b32(), v_A, v_min);\n        v_A = svmin_f32_z(svptrue_b32(), v_A, v_max);\n\n        // Convert to int32_t\n        svint32_t v_B = svcvt_s32_f32_z(svptrue_b32(), v_A);\n\n        // Store the result\n        svst1(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <limits.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    svfloat32_t v_max = svdup_n_f32(INT32_MAX);\n    svfloat32_t v_min = svdup_n_f32(INT32_MIN);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_A = svld1(svptrue_b32(), &A[i]);\n\n        // Clamp the values\n        v_A = svmax_f32_z(svptrue_b32(), v_A, v_min);\n        v_A = svmin_f32_z(svptrue_b32(), v_A, v_max);\n\n        // Convert to int32_t\n        svint32_t v_B = svcvt_s32_f32_z(svptrue_b32(), v_A);\n\n        // Store the result\n        svst1(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_50_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <limits.h>\n\nvoid float_to_int_saturate_simd(const float* A, int32_t* B, size_t size) {\n    svfloat32_t v_max = svdup_n_f32(INT32_MAX);\n    svfloat32_t v_min = svdup_n_f32(INT32_MIN);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_A = svld1(svptrue_b32(), &A[i]);\n\n        v_A = svmax_f32_z(svptrue_b32(), v_A, v_min);\n        v_A = svmin_f32_z(svptrue_b32(), v_A, v_max);\n\n        svint32_t v_B = svcvt_s32_f32_z(svptrue_b32(), v_A);\n        svst1(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    svfloat32_t vscale = svdup_n_f32((float)scale);\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    do {\n        svint32_t vA = svld1(pg, &A[svcntp_b32(pg)]);\n        svfloat32_t vB = svcvt_f32_s32_x(pg, vA);\n        vB = svmul_f32_x(pg, vB, vscale);\n        svst1(pg, &B[svcntp_b32(pg)], vB);\n        size -= svcntp_b32(pg);\n    } while (svptest_any(pg, pg));\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    svfloat32_t vscale = svdup_n_f32(scale);\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    do {\n        svint32_t vA = svld1_s32(pg, &A[0]);\n        svfloat32_t vB = svcvt_f32_s32_x(pg, vA);\n        vB = svmul_f32_x(pg, vB, vscale);\n        svst1_f32(pg, &B[0], vB);\n    } while (svptest_any(pg, pg));\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    svfloat32_t vscale = svdup_n_f32(scale);\n    const int32_t* a = A;\n    float* b = B;\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vA = svld1(svptrue_b32(), a);\n        svfloat32_t vB = svcvt_f32_s32_x(svptrue_b32(), vA);\n        vB = svmul_f32_x(svptrue_b32(), vB, vscale);\n        svst1(svptrue_b32(), b, vB);\n        a += svcntw();\n        b += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    svfloat32_t vscale = svdup_n_f32((float)scale);\n    svbool_t pg = svwhilelt_b32(0, size);\n\n    do {\n        svint32_t vA = svld1(pg, (const int32_t*)&A[svcntp_b32(pg)]);\n        svfloat32_t vB = svcvt_f32_s32_x(pg, vA);\n        vB = svmul_f32_x(pg, vB, vscale);\n        svst1(pg, (float*)&B[svcntp_b32(pg)], vB);\n        size -= svcntp_b32(pg);\n        A += svcntp_b32(pg);\n        B += svcntp_b32(pg);\n        pg = svwhilelt_b32(0, size);\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_51_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_scaled_simd(const int32_t* A, int8_t scale, float* B, size_t size) {\n    svfloat32_t vscale = svdup_n_f32((float)scale);\n    const int32_t* a = A;\n    float* b = B;\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svint32_t vA = svld1_s32(svptrue_b32(), a);\n        svfloat32_t vB = svcvt_f32_s32_x(svptrue_b32(), vA);\n        vB = svmul_f32_x(svptrue_b32(), vB, vscale);\n        svst1_f32(svptrue_b32(), b, vB);\n        a += svcntw();\n        b += svcntw();\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    svfloat32_t vA, vB, vResult;\n    svint32_t vC;\n    size_t i;\n\n    for (i = 0; i < size; i += svcntw()) {\n        vA = svld1(svptrue_b32(), &A[i]);\n        vB = svld1(svptrue_b32(), &B[i]);\n        vResult = svdiv_f32_x(svptrue_b32(), vA, vB);\n        vC = svcvt_s32_f32_x(svptrue_b32(), vResult);\n        svst1(svptrue_b32(), &C[i], vC);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    svfloat32_t vA, vB, vResult;\n    svint32_t vC;\n    size_t i;\n\n    for (i = 0; i < size; i += svcntw()) {\n        vA = svld1(svptrue_b32(), &A[i]);\n        vB = svld1(svptrue_b32(), &B[i]);\n        vResult = svdiv_x(svptrue_b32(), vA, vB);\n        vC = svcvt_neon_s32_x(svptrue_b32(), vResult);\n        svst1(svptrue_b32(), &C[i], vC);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    svfloat32_t vg_A, vg_B, vg_result;\n    svint32_t vg_C;\n    size_t i;\n\n    for (i = 0; i < size; i += svcntw()) {\n        svbool_t vg_active = svwhilelt_b32(i, size);\n\n        vg_A = svld1_f32(vg_active, &A[i]);\n        vg_B = svld1_f32(vg_active, &B[i]);\n\n        vg_result = svdiv_f32_x(vg_active, vg_A, vg_B);\n        vg_C = svrintn_f32_s32_x(vg_active, vg_result);\n\n        svst1_s32(vg_active, &C[i], vg_C);\n    }\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svfloat32_t vA = svld1_f32(pg, A);\n    svfloat32_t vB = svld1_f32(pg, B);\n    svfloat32_t vDiv = svdiv_f32_x(pg, vA, vB);\n    svint32_t vRound = svrintn_f32_x(pg, vDiv);\n    svst1_s32(pg, C, vRound);\n}\n```"}
{"task_id": "SimdBench_52_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid float_div_round_simd(const float* A, const float* B, int32_t* C, size_t size) {\n    svfloat32_t vA, vB, vResult;\n    svint32_t vC;\n    size_t i;\n\n    for (i = 0; i < size; i += svcntw()) {\n        vA = svld1(svptrue_b32(), &A[i]);\n        vB = svld1(svptrue_b32(), &B[i]);\n        vResult = svdiv_f32_x(svptrue_b32(), vA, vB);\n        vC = svcvt_neon_s32_f32(vResult);\n        svst1(svptrue_b32(), &C[i], vC);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b64(0, size);\n    svfloat64_t v_max = svdup_f64(FLT_MAX);\n    svfloat64_t v_min = svdup_f64(-FLT_MAX);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t v_A = svld1(pg, &A[i]);\n        svfloat64_t v_B = svmin_f64_x(pg, v_A, v_max);\n        v_B = svmax_f64_x(pg, v_B, v_min);\n        svfloat32_t v_B_f32 = svcvt_f32_f64_x(pg, v_B);\n        svst1(pg, &B[i], v_B_f32);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b64(0, size);\n    svfloat64_t v_max = svdup_f64(FLT_MAX);\n    svfloat64_t v_min = svdup_f64(-FLT_MAX);\n\n    while (svptest_any(pg)) {\n        svfloat64_t v_A = svld1_f64(pg, &A[svcntp_b64(pg, 0)]);\n        svfloat64_t v_clamped = svmax_f64_z(pg, v_A, v_min);\n        v_clamped = svmin_f64_z(pg, v_clamped, v_max);\n        svfloat32_t v_B = svcvt_f32_f64_z(pg, v_clamped);\n        svst1_f32(pg, &B[svcntp_b32(pg, 0)], v_B);\n\n        size -= svcntp_b64(pg, 0);\n        A += svcntp_b64(pg, 0);\n        B += svcntp_b32(pg, 0);\n        pg = svwhilelt_b64(0, size);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b64(0, size);\n    svfloat64_t v_max = svdup_f64(FLT_MAX);\n    svfloat64_t v_min = svdup_f64(-FLT_MAX);\n\n    do {\n        svfloat64_t vd = svld1(pg, &A[0]);\n        vd = svmax_f64_x(pg, vd, v_min);\n        vd = svmin_f64_x(pg, vd, v_max);\n        svfloat32_t vf = svcvt_f32_f64_x(pg, vd);\n        svst1(pg, &B[0], vf);\n        A += svcntd();\n        B += svcntw();\n    } while ((size -= svcntd()) > 0);\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b64(0, size);\n    svfloat64_t vmax = svdup_f64(FLT_MAX);\n    svfloat64_t vmin = svdup_f64(-FLT_MAX);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svfloat64_t v = svld1(pg, &A[i]);\n        v = svmax_f64_z(pg, v, vmin);\n        v = svmin_f64_z(pg, v, vmax);\n        svfloat32_t vf = svcvt_f32_f64_z(pg, v);\n        svst1(pg, &B[i], vf);\n    }\n}\n```"}
{"task_id": "SimdBench_53_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <float.h>\n\nvoid double_to_float_saturate_simd(const double* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b64(0, size);\n    svfloat64_t v_max = svdup_f64(FLT_MAX);\n    svfloat64_t v_min = svdup_f64(-FLT_MAX);\n\n    while (svptest_any(pg)) {\n        svfloat64_t v_A = svld1_f64(pg, &A[svcntd()]);\n        v_A = svmax_f64_z(pg, v_A, v_min);\n        v_A = svmin_f64_z(pg, v_A, v_max);\n        svfloat32_t v_B = svcvt_f32_f64_z(pg, v_A);\n        svst1_f32(pg, &B[svcntd()], v_B);\n\n        size -= svcntd();\n        A += svcntd();\n        B += svcntd();\n        pg = svwhilelt_b64(0, size);\n    }\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    svbool_t pg = svwhilelt_b16(0, size);\n    svint16_t vA = svld1_s16(pg, &A[0]);\n    svint32_t vB = svcvt_s32_s16_z(pg, vA);\n    svst1_s32(pg, &B[0], vB);\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    svbool_t pg = svwhilelt_b16(0, size);\n    svint16_t vA = svld1_s16(pg, &A[0]);\n    svint32_t vB = svcvt_s32_s16_x(pg, vA);\n    svst1_s32(pg, &B[0], vB);\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint16_t vA = svld1_s16(pg, &A[0]);\n    svint32_t vB = svcvt_s32_s16_x(pg, vA);\n    svst1_s32(pg, &B[0], vB);\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    svbool_t pg = svwhilelt_b16(0, size);\n    svint16_t vA = svld1_s16(pg, &A[0]);\n    svint32_t vB = svcvt_s32_s16_x(pg, vA);\n    svst1_s32(pg, &B[0], vB);\n}\n```"}
{"task_id": "SimdBench_54_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int16_to_int32_simd(const int16_t* A, int32_t* B, size_t size) {\n    svbool_t pg = svwhilelt_b16(0, size);\n    svint16_t vA = svld1_s16(pg, &A[0]);\n    svint32_t vB = svcvt_s32_s16_x(pg, vA);\n    svst1_s32(pg, &B[0], vB);\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svfloat32_t v_min_val = svdup_n_f32(min_val);\n    svfloat32_t v_max_val = svdup_n_f32(max_val);\n    svfloat32_t v_range = svsub_f32_x(svdup_f32(), v_min_val, v_max_val);\n    svfloat32_t v_zero = svdup_n_f32(0.0f);\n    svfloat32_t v_one = svdup_n_f32(1.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n\n        svfloat32_t v_A = svld1_f32(pg, &A[i]);\n        svint32_t v_control = svld1_s32(pg, &control[i]);\n\n        svbool_t p_pos = svcmpgt_n_s32(pg, v_control, 0);\n        svfloat32_t v_norm = svsub_f32_x(pg, v_A, v_min_val);\n        v_norm = svdiv_f32_x(pg, v_norm, v_range);\n        v_norm = svmax_f32_x(pg, v_norm, v_zero);\n        v_norm = svmin_f32_x(pg, v_norm, v_one);\n\n        svfloat32_t v_B = svsel_f32(p_pos, v_norm, v_A);\n        svst1_f32(pg, &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svfloat32_t v_min_val = svdup_n_f32(min_val);\n    svfloat32_t v_max_val = svdup_n_f32(max_val);\n    svfloat32_t v_range = svsub_f32_x(svdup_f32(), v_min_val, v_max_val);\n    svfloat32_t v_zero = svdup_n_f32(0.0f);\n    svfloat32_t v_one = svdup_n_f32(1.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_a = svld1(svptrue_b32(), &A[i]);\n        svint32_t v_control = svld1(svptrue_b32(), &control[i]);\n\n        svbool_t v_mask = svcmple_s32(svdup_s32(), v_control, 0);\n        svfloat32_t v_norm = svsub_f32_x(svdup_f32(), v_a, v_min_val);\n        v_norm = svdiv_f32_x(svdup_f32(), v_norm, v_range);\n        v_norm = svmax_f32_x(svdup_f32(), v_norm, v_zero);\n        v_norm = svmin_f32_x(svdup_f32(), v_norm, v_one);\n\n        svfloat32_t v_result = svsel_f32(v_mask, v_a, v_norm);\n        svst1(svptrue_b32(), &B[i], v_result);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svfloat32_t v_min_val = svdup_n_f32(min_val);\n    svfloat32_t v_max_val = svdup_n_f32(max_val);\n    svfloat32_t v_range = svsub_f32_x(svdup_f32(), v_min_val, v_max_val);\n    svfloat32_t v_zero = svdup_n_f32(0.0f);\n    svfloat32_t v_one = svdup_n_f32(1.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_A = svld1(svptrue_b32(), &A[i]);\n        svint32_t v_control = svld1(svptrue_b32(), &control[i]);\n\n        svbool_t p_positive = svcmple_s32(svdup_s32(0), v_control);\n        svfloat32_t v_normalized = svsub_f32_x(svptrue_b32(), v_A, v_min_val);\n        v_normalized = svmul_f32_x(svptrue_b32(), v_normalized, svrecpe_f32(v_range));\n        v_normalized = svmax_f32_x(svptrue_b32(), v_normalized, v_zero);\n        v_normalized = svmin_f32_x(svptrue_b32(), v_normalized, v_one);\n\n        svfloat32_t v_B = svsel_f32(p_positive, v_normalized, v_A);\n        svst1(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svfloat32_t vmin_val = svdup_n_f32(min_val);\n    svfloat32_t vmax_val = svdup_n_f32(max_val);\n    svfloat32_t vrange = svsub_f32_x(svdup_f32(), vmin_val, vmax_val);\n    svfloat32_t vzero = svdup_n_f32(0.0f);\n    svfloat32_t vone = svdup_n_f32(1.0f);\n\n    for (size_t i = 0; i < size; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, size);\n        svfloat32_t vA = svld1_f32(pg, &A[i]);\n        svint32_t vcontrol = svld1_s32(pg, &control[i]);\n\n        svbool_t pcontrol = svcmple_s32(pg, vcontrol, 0);\n        svfloat32_t vB = svsel_f32(pcontrol, vA, svdiv_f32_x(pg, svsub_f32_x(pg, vA, vmin_val), vrange));\n\n        vB = svmax_f32_x(pg, vB, vzero);\n        vB = svmin_f32_x(pg, vB, vone);\n\n        svst1_f32(pg, &B[i], vB);\n    }\n}\n```"}
{"task_id": "SimdBench_55_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_normalize_simd(const float* A, const int32_t* control, float* B, size_t size, float min_val, float max_val) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svfloat32_t v_min_val = svdup_n_f32(min_val);\n    svfloat32_t v_max_val = svdup_n_f32(max_val);\n    svfloat32_t v_range = svsub_f32_x(pg, v_max_val, v_min_val);\n    svfloat32_t v_zero = svdup_n_f32(0.0f);\n    svfloat32_t v_one = svdup_n_f32(1.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svfloat32_t v_A = svld1(pg, &A[i]);\n        svint32_t v_control = svld1(pg, &control[i]);\n\n        svbool_t p_pos = svcmple_s32(pg, svdup_n_s32(0), v_control);\n        svfloat32_t v_B = svsel_f32(p_pos, svsub_f32_x(pg, v_A, v_min_val), v_A);\n        v_B = svsel_f32(p_pos, svdiv_f32_x(pg, v_B, v_range), v_B);\n        v_B = svmax_f32_x(pg, v_B, v_zero);\n        v_B = svmin_f32_x(pg, v_B, v_one);\n\n        svst1(pg, &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svuint32_t vA = svld1_u32(pg, A);\n    svfloat32_t vB = svcvt_f32_u32_x(pg, vA);\n    vB = svsqrt_f32_x(pg, vB);\n    svst1_f32(pg, B, vB);\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svuint32_t vA = svld1_u32(pg, A);\n    svfloat32_t vB = svcvt_f32_u32_x(pg, vA);\n    vB = svsqrt_f32_x(pg, vB);\n    svst1_f32(pg, B, vB);\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svuint32_t vA = svld1_u32(pg, A);\n    svfloat32_t vB = svcvt_f32_u32_x(pg, vA);\n    vB = svsqrt_f32_x(pg, vB);\n    svst1_f32(pg, B, vB);\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svuint32_t vA = svld1_u32(pg, A);\n    svfloat32_t vB = svcvt_f32_u32_x(pg, vA);\n    vB = svsqrt_f32_x(pg, vB);\n    svst1_f32(pg, B, vB);\n}\n```"}
{"task_id": "SimdBench_56_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_to_float_sqrt_simd(const uint32_t* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svuint32_t vA = svld1_u32(pg, A);\n    svfloat32_t vB = svcvt_f32_u32_x(pg, vA);\n    vB = svsqrt_f32_x(pg, vB);\n    svst1_f32(pg, B, vB);\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svuint32_t vA = svld1_u32(pg, A);\n    svfloat32_t vB = svreinterpret_f32(vA);\n    svst1_f32(pg, B, vB);\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t i = 0;\n    for (; i <= (size - svcntw()); i += svcntw()) {\n        svuint32_t v_A = svld1_u32(svptrue_b32(), &A[i]);\n        svfloat32_t v_B = svreinterpret_f32_u32(v_A);\n        svst1_f32(svptrue_b32(), &B[i], v_B);\n    }\n\n    for (; i < size; ++i) {\n        svuint32_t v_A = svld1_u32(svptrue_b32(), &A[i]);\n        svfloat32_t v_B = svreinterpret_f32_u32(v_A);\n        svst1_f32(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svuint32_t vA = svld1_u32(pg, A);\n    svfloat32_t vB = svreinterpret_f32_u32(vA);\n    svst1_f32(pg, B, vB);\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, size);\n\n    do {\n        svuint32_t vA = svld1_u32(pg, &A[i]);\n        svfloat32_t vB = svreinterpret_f32_u32(vA);\n        svst1_f32(pg, &B[i], vB);\n        i += svcntw();\n        pg = svwhilelt_b32(i, size);\n    } while (svptest_any(pg));\n}\n```"}
{"task_id": "SimdBench_57_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid int_bits_to_float_simd(const uint32_t* A, float* B, size_t size) {\n    size_t i = 0;\n    for (; i <= (size - svcntw()); i += svcntw()) {\n        svuint32_t v_A = svld1_u32(svptrue_b32(), &A[i]);\n        svfloat32_t v_B = svreinterpret_f32_u32(v_A);\n        svst1_f32(svptrue_b32(), &B[i], v_B);\n    }\n\n    for (; i < size; ++i) {\n        svuint32_t v_A = svld1_u32(svptrue_b32(), &A[i]);\n        svfloat32_t v_B = svreinterpret_f32_u32(v_A);\n        svst1_f32(svptrue_b32(), &B[i], v_B);\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint32_t v_A = svld1_s32(pg, &A[0]);\n    svbool_t v_cond = svld1_u8(pg, (uint8_t*)&cond[0]);\n    svfloat32_t v_diff = svdup_f32(0.0f);\n\n    svint32_t v_A_prev = svext_s32(v_A, v_A, 1);\n    svfloat32_t v_diff_calc = svcvt_f32_s32_x(pg, svsub_s32_x(pg, v_A, v_A_prev));\n    v_diff = svsel_f32(v_cond, v_diff_calc, v_diff);\n\n    svst1_f32(pg, &diff[0], v_diff);\n\n    diff[0] = 0.0f;\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint32_t prev = svdup_n_s32(0);\n    svfloat32_t zero = svdup_n_f32(0.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t p = svwhilelt_b32(i, size);\n        svint32_t curr = svld1(p, &A[i]);\n        svbool_t cond_p = svld1(p, &cond[i]);\n\n        svint32_t diff_int = svsub_z(p, curr, prev);\n        svfloat32_t diff_float = svcvt_f32_s32_z(p, diff_int);\n\n        diff_float = svsel_f32(cond_p, diff_float, zero);\n        svst1(p, &diff[i], diff_float);\n\n        prev = svsel_s32(p, curr, prev);\n    }\n\n    diff[0] = 0.0f;\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint32_t v_A = svld1_s32(pg, &A[0]);\n    svbool_t v_cond = svld1_b8(pg, &cond[0]);\n    svfloat_t v_diff = svld1_f32(pg, &diff[0]);\n\n    svint32_t v_A_prev = sveor_s32_x(pg, v_A, v_A);\n    v_A_prev = svsub_s32_x(pg, v_A, v_A_prev);\n\n    svfloat_t v_diff_prev = svcvt_f32_s32_x(pg, v_A_prev);\n    v_diff = svsel_f32(v_cond, v_diff_prev, v_diff);\n\n    svst1_f32(pg, &diff[0], v_diff);\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint32_t v_A = svld1_s32(pg, &A[0]);\n    svbool_t v_cond = svld1_u8(pg, &cond[0]);\n    svfloat32_t v_diff = svld1_f32(pg, &diff[0]);\n\n    diff[0] = 0.0f;\n    for (size_t i = 1; i < size; i += svcntw()) {\n        pg = svwhilelt_b32(i, size);\n        svint32_t v_A_next = svld1_s32(pg, &A[i]);\n        svint32_t v_A_prev = svld1_s32(pg, &A[i - 1]);\n        svint32_t v_diff_int = svsub_z(pg, v_A_next, v_A_prev);\n        svfloat32_t v_diff_float = svcvt_f32_s32_z(pg, v_diff_int);\n\n        v_cond = svld1_u8(pg, &cond[i]);\n        v_diff_float = svsel_f32(v_cond, v_diff_float, svdup_f32(0.0f));\n\n        svst1_f32(pg, &diff[i], v_diff_float);\n    }\n}\n```"}
{"task_id": "SimdBench_58_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid conditional_diff_simd(const int32_t* A, const bool* cond, float* diff, size_t size) {\n    svbool_t pg = svwhilelt_b32(0, size);\n    svint32_t prev = svdup_n_s32(0);\n    svfloat32_t zero = svdup_n_f32(0.0f);\n\n    for (size_t i = 0; i < size; i += svcntw()) {\n        svbool_t p = svwhilelt_b32(i, size);\n        svint32_t vec_A = svld1(p, &A[i]);\n        svbool_t vec_cond = svld1(p, &cond[i]);\n\n        svint32_t diff = svsub_z(p, vec_A, prev);\n        prev = vec_A;\n\n        svfloat32_t diff_float = svcvt_f32_s32_z(p, diff);\n        diff_float = svsel_f32(vec_cond, diff_float, zero);\n\n        svst1(p, &diff[i], diff_float);\n    }\n\n    diff[0] = 0.0f;\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint64_t v_dst = svmovl_x(pg, v_src);\n    v_dst = svorr_x(pg, v_dst, svdup_n_u64(0xFFFFFFFF00000000));\n    svst1_x(pg, dst, v_dst);\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint64_t v_dst = svmovl_x(pg, v_src);\n    svuint64_t v_mask = svdup_n_u64(0xFFFFFFFF00000000);\n    v_dst = svorr_x(pg, v_dst, v_mask);\n    svst1_x(pg, dst, v_dst);\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint64_t v_dst = svmovl_sve_x(pg, v_src);\n    v_dst = svorr_n_u64_x(pg, v_dst, 0xFFFFFFFF00000000);\n    svst1_u64(pg, dst, v_dst);\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint64_t v_dst = svextw_x(pg, v_src);\n    v_dst = svorr_x(pg, v_dst, svdup_n_u64(0xFFFFFFFF00000000));\n    svst1_u64(pg, dst, v_dst);\n}\n```"}
{"task_id": "SimdBench_59_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid widening_uint_simd(const uint32_t* src, uint64_t* dst, size_t length) {\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint32_t v_src = svld1_u32(pg, src);\n    svuint64_t v_dst = sveor_x(pg, svmovl_x(pg, v_src), svdup_n_u64(0xFFFFFFFF00000000));\n    svst1_u64(pg, dst, v_dst);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t vindex = svld1_s16(pg, &index[i]);\n        svuint64_t gather_idx = svdup_n_u64(0);\n        gather_idx = svadd_x(pg, gather_idx, svcvt_u64_f64(svdup_f64(i)));\n        gather_idx = svadd_x(pg, gather_idx, svcvt_u64_s16(vindex));\n\n        svfloat64_t vdata = svld1_gather_u64index_f64(pg, vec, gather_idx);\n        vsum = svadd_f64_x(pg, vsum, vdata);\n\n        pg = svwhilelt_b16(i + svcntw(), length);\n    }\n\n    return svaddv(pg, vsum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t vindex = svld1(pg, &index[i]);\n        svuint64_t gather_idx = svindex_u64(pg, svadd_n_u64(pg, svmul_n_u64(pg, svcvt_u64_f64_x(pg, vindex), sizeof(double)), (uint64_t)vec));\n        svfloat64_t vdata = svld1_gather_u64base(pg, (const uint64_t*)vec, gather_idx);\n        vsum = svadd_f64_x(pg, vsum, vdata);\n        pg = svwhilelt_b16(i + svcntw(), length);\n    }\n\n    return svaddv(pg, vsum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t vindex = svld1_s16(pg, &index[i]);\n        svuint64_t gather_idx = svindex_u64(pg, (uint64_t)vec);\n        svfloat64_t vvec = svld1_gather_u64index_f64(pg, vec, gather_idx);\n        vsum = svadd_f64_m(pg, vsum, vvec);\n    }\n\n    return svaddv_f64(pg, vsum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t vindex = svld1(pg, &index[i]);\n        svuint64_t gather_idx = svdup_n_u64(0);\n        gather_idx = svadd_x(pg, gather_idx, svcvt_u64_f64(svdup_f64((double)i)));\n        gather_idx = svadd_x(pg, gather_idx, svcvt_u64_f64(svdup_f64((double)vindex)));\n\n        svfloat64_t vdata = svld1_gather_u64index_f64(pg, vec, gather_idx);\n        vsum = svadd_f64_x(pg, vsum, vdata);\n\n        pg = svwhilelt_b16(i + svcntw(), length);\n    }\n\n    return svaddv(svptrue_b64(), vsum);\n}\n```"}
{"task_id": "SimdBench_60_SVE", "completion": "```c\n#include <arm_sve.h>\n\ndouble indexed_sum_simd(const double* vec, const int16_t* index, size_t length) {\n    svbool_t pg = svwhilelt_b16(0, length);\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < length; i += svcntw()) {\n        svint16_t vindex = svld1(pg, &index[i]);\n        svuint64_t gather_idx = svcvt_u64_f64(svdup_f64(0));\n        gather_idx = svadd_x(pg, gather_idx, svcvt_u64_s64(svcvt_s64_s16(vindex)));\n\n        svfloat64_t vvec = svld1_gather_u64base_f64(pg, vec, gather_idx);\n        vsum = svadd_f64_x(pg, vsum, vvec);\n\n        pg = svwhilelt_b16(i + svcntw(), length);\n    }\n\n    return svaddv(pg, vsum);\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t kernel_flat_size = kernel_size * kernel_size;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n\n                    svfloat64_t input_val = svld1_f64(&input[input_idx]);\n                    svfloat64_t kernel_val = svld1_f64(&kernel[kernel_idx]);\n\n                    sum = svmla_f64_m(sum, input_val, kernel_val);\n                }\n            }\n\n            double result = svaddv_f64(sum);\n            result = (result > 0) ? result : 0;\n            output[i * output_size + j] = result;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t kernel_flat_size = kernel_size * kernel_size;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n            svbool_t pg = svwhilelt_b64(0, kernel_flat_size);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n\n                    svfloat64_t input_val = svld1_f64(pg, &input[input_idx]);\n                    svfloat64_t kernel_val = svld1_f64(pg, &kernel[kernel_idx]);\n\n                    sum = svmla_f64_m(pg, sum, input_val, kernel_val);\n                }\n            }\n\n            double result = svaddv_f64(pg, sum);\n            result = result > 0.0 ? result : 0.0;\n            output[i * output_size + j] = result;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t kernel_flat_size = kernel_size * kernel_size;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n            svbool_t pg = svwhilelt_b64(0, kernel_flat_size);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n\n                    svfloat64_t input_val = svld1_f64(pg, &input[input_idx]);\n                    svfloat64_t kernel_val = svld1_f64(pg, &kernel[kernel_idx]);\n\n                    sum = svmla_f64_m(pg, sum, input_val, kernel_val);\n                }\n            }\n\n            double result = svaddv_f64(pg, sum);\n            result = (result > 0) ? result : 0;\n            output[i * output_size + j] = result;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double* output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t kernel_flat_size = kernel_size * kernel_size;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n\n                    svfloat64_t input_val = svld1_f64(&input[input_idx]);\n                    svfloat64_t kernel_val = svld1_f64(&kernel[kernel_idx]);\n\n                    sum = svmla_f64_x(svdup_f64(sum), input_val, kernel_val);\n                }\n            }\n\n            double result = svaddv_f64(sum);\n            result = (result > 0) ? result : 0; // ReLU activation\n            output[i * output_size + j] = result;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_61_SVE", "completion": "```c\n#include <arm_sve.h>\n\nvoid simple_conv2d_simd(const double* input, const double* kernel, double * output, size_t input_size, size_t kernel_size) {\n    size_t output_size = input_size - kernel_size + 1;\n    size_t kernel_flat_size = kernel_size * kernel_size;\n\n    for (size_t i = 0; i < output_size; ++i) {\n        for (size_t j = 0; j < output_size; ++j) {\n            svfloat64_t sum = svdup_f64(0.0);\n            svbool_t pg = svwhilelt_b64(0, kernel_flat_size);\n\n            for (size_t k = 0; k < kernel_size; ++k) {\n                for (size_t l = 0; l < kernel_size; ++l) {\n                    size_t input_idx = (i + k) * input_size + (j + l);\n                    size_t kernel_idx = k * kernel_size + l;\n\n                    svfloat64_t input_val = svld1_f64(pg, &input[input_idx]);\n                    svfloat64_t kernel_val = svld1_f64(pg, &kernel[kernel_idx]);\n\n                    sum = svmla_f64_m(pg, sum, input_val, kernel_val);\n                }\n            }\n\n            double result = svaddv_f64(pg, sum);\n            result = (result > 0) ? result : 0; // ReLU activation\n            output[i * output_size + j] = result;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t v = svld1_f64(pg, &numbers[0]);\n    svfloat64_t v_shifted = svext_f64(v, v, svlen_f64(v) - 1);\n    svfloat64_t diff = svabsdiff_f64(pg, v, v_shifted);\n    svbool_t mask = svcmplt_f64(pg, diff, threshold);\n\n    while (svptest_any(pg, mask)) {\n        return true;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstddef>\n#include <vector>\n\nbool has_close_elements_simd(const std::vector<double>& numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t v = svld1_f64(pg, &numbers[0]);\n    svfloat64_t v_shifted = svExt(v, v, sizeof(double));\n    svfloat64_t diff = svabsdiff_x(pg, v, v_shifted);\n    svbool_t pf = svcmplt(pg, diff, threshold);\n\n    return svptest_any(pg, pf);\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t v = svld1_f64(pg, &numbers[0]);\n    svfloat64_t v_shifted = svld1_f64(pg, &numbers[1]);\n\n    svfloat64_t diff = svabsdiff_f64(pg, v, v_shifted);\n    svbool_t mask = svcmplt(pg, diff, threshold);\n\n    bool result = svptest_any(svptrue_b64(), mask);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nbool has_close_elements_simd(const std::vector<double>& numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t v = svld1_f64(pg, &numbers[0]);\n    svfloat64_t v_shifted = svext_f64(v, v, 1);\n    svfloat64_t diff = svabsdiff_f64(pg, v, v_shifted);\n    svbool_t mask = svcmplt(pg, diff, threshold);\n\n    bool result = svptest_any(svptrue_b64(), mask);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_62_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nbool has_close_elements_simd(const std::vector<double> &numbers, double threshold) {\n    size_t n = numbers.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t v = svld1_f64(pg, &numbers[0]);\n    svfloat64_t v_shifted = svld1_f64(pg, &numbers[1]);\n\n    svfloat64_t diff = svabsdiff_x(pg, v, v_shifted);\n    svbool_t mask = svcmplt(pg, diff, threshold);\n\n    bool result = svptest_any(svptrue_b64(), mask);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    constexpr int vector_length = svcntw();\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, operations.size());\n\n    svint32_t balance = svdup_n_s32(pg, 0);\n    svint32_t below_zero = svdup_n_s32(pg, 0);\n\n    for (; svptest_any(pg); pg = svwhilelt_b32(i, operations.size())) {\n        svint32_t chunk = svld1(pg, &operations[i]);\n        balance = svadd_s32_x(pg, balance, chunk);\n        below_zero = svorr_s32_x(pg, below_zero, svcmplt_s32(pg, balance, 0));\n        i += vector_length;\n    }\n\n    return svptest_any(svcmpne_s32(pg, below_zero, 0));\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    const int vector_length = svcntw();\n    int balance = 0;\n\n    for (size_t i = 0; i < operations.size(); i += vector_length) {\n        svint32_t v_operations = svld1_s32(&operations[i]);\n        svint32_t v_balance = svdup_n_s32(balance);\n\n        v_balance = svadd_s32_x(svptrue_b32(), v_balance, v_operations);\n\n        svbool_t below_zero = svcmplt_s32(svptrue_b32(), v_balance, 0);\n\n        if (svptest_any(svptrue_b32(), below_zero)) {\n            return true;\n        }\n\n        balance = svlastb_s32(svptrue_b32(), v_balance);\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    constexpr int vector_length = svcntw();\n    size_t i;\n    svbool_t pg = svwhilelt_b32(0, operations.size());\n    svint32_t balance = svdup_n_s32(pg, 0);\n    svint32_t op_vector;\n\n    for (i = 0; i < operations.size(); i += vector_length) {\n        op_vector = svld1(pg, &operations[i]);\n        balance = svadd_s32_x(pg, balance, op_vector);\n        if (svminv_s32(pg, balance) < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    int balance = 0;\n    svbool_t pg = svwhilelt_b64(0, operations.size());\n    svint32_t v_balance = svdup_n_s32(0);\n    svint32_t v_operations = svld1(pg, operations.data());\n\n    svbool_t pf = svcmplt_s32(pg, v_balance, 0);\n    if (svptest_any(pg, pf)) {\n        return true;\n    }\n\n    v_balance = svadd_s32_x(pg, v_balance, v_operations);\n    pf = svcmplt_s32(pg, v_balance, 0);\n\n    while (svptest_any(pg, pf)) {\n        return true;\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_63_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_zero_simd(std::vector<int> operations) {\n    int balance = 0;\n    svbool_t pg = svwhilelt_b64_s64(0, operations.size());\n    svint64_t vbalance = svdup_s64_x(pg, balance);\n    svint64_t voperations = svld1_s64(pg, &operations[0]);\n    svbool_t pn = svcmpge_n_s64(pg, vbalance, 0);\n\n    while (svptest_any(pg, pn)) {\n        vbalance = svadd_s64_x(pg, vbalance, voperations);\n        pn = svcmpge_n_s64(pg, vbalance, 0);\n        svint64_t vindex = svadd_s64_x(pg, svindex_s64(0, 1), svdup_s64_x(pg, 1));\n        voperations = svld1_gather_s64index_s64(pg, &operations[0], vindex);\n    }\n\n    return !svptest_any(pg, svcmpge_n_s64(pg, vbalance, 0));\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n\n    for (size_t i = 0; i < n; ++i) {\n        sum += numbers[i];\n    }\n\n    double mean = sum / n;\n\n    svfloat64_t vmean = svdup_f64(mean);\n    svbool_t pg = svwhilelt_b64(0, n);\n\n    double mad_sum = 0.0;\n    size_t i = 0;\n\n    while (svptest_any(pg)) {\n        svfloat64_t vx = svld1(pg, &numbers[i]);\n        svfloat64_t vdiff = svabsdiff_f64(pg, vx, vmean);\n        mad_sum += svaddv(pg, vdiff);\n        i += svcntp(pg);\n        pg = svwhilelt_b64(i, n);\n    }\n\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n\n    for (size_t i = 0; i < n; ++i) {\n        sum += numbers[i];\n    }\n\n    double mean = sum / n;\n\n    svfloat64_t vmean = svdup_f64(mean);\n    svbool_t pg = svwhilelt_b64(0, n);\n\n    svfloat64_t vsum = svdup_f64(0.0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t v = svld1(pg, &numbers[i]);\n        svfloat64_t vdiff = svabs_f64_x(pg, v, vmean);\n        vsum = svadd_f64_x(pg, vsum, vdiff);\n    }\n\n    double mad = svaddv(pg, vsum) / n;\n    return mad;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n\n    // Calculate the mean\n    for (size_t i = 0; i < n; ++i) {\n        sum += numbers[i];\n    }\n    double mean = sum / n;\n\n    // Calculate the absolute deviations from the mean using SVE\n    svfloat64_t vmean = svdup_f64(mean);\n    svfloat64_t vsum = svdup_f64(0.0);\n    size_t i = 0;\n\n    for (; i <= n - svcntd(); i += svcntd()) {\n        svfloat64_t vx = svld1(svptrue_b64(), &numbers[i]);\n        svfloat64_t vdiff = svabsdiff_n_f64(vx, vmean);\n        vsum = svadd_f64_x(svptrue_b64(), vsum, vdiff);\n    }\n\n    // Handle remaining elements\n    for (; i < n; ++i) {\n        vsum = svadd_f64_x(svptrue_b64(), vsum, svabsdiff_n_f64(svld1(svptrue_b64(), &numbers[i]), vmean));\n    }\n\n    // Reduce the sum of absolute deviations\n    double mad_sum = 0.0;\n    svbool_t pg = svwhilelt_b64(0, svcntd());\n    do {\n        mad_sum += svaddv(pg, vsum);\n        vsum = svadd_f64_x(pg, vsum, vsum);\n        pg = svwhilelt_b64(i, svcntd());\n    } while (svptest_any(pg));\n\n    // Calculate the mean absolute deviation\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n\n    for (size_t i = 0; i < n; ++i) {\n        sum += numbers[i];\n    }\n\n    double mean = sum / n;\n\n    svfloat64_t vmean = svdup_f64(mean);\n    svbool_t pg = svwhilelt_b64(0, n);\n\n    double mad_sum = 0.0;\n    size_t i = 0;\n\n    while (svptest_any(pg)) {\n        svfloat64_t vx = svld1(pg, &numbers[i]);\n        svfloat64_t vdiff = svabs_f64_x(pg, vx, vmean);\n        mad_sum += svaddv(pg, vdiff);\n        i += svcntd();\n        pg = svwhilelt_b64(i, n);\n    }\n\n    return mad_sum / n;\n}\n```"}
{"task_id": "SimdBench_64_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\ndouble mean_absolute_deviation_simd(std::vector<double> numbers) {\n    size_t n = numbers.size();\n    double sum = 0.0;\n\n    for (size_t i = 0; i < n; ++i) {\n        sum += numbers[i];\n    }\n\n    double mean = sum / n;\n    double mad = 0.0;\n\n    svfloat64_t vmean = svdup_f64(mean);\n    svbool_t pg = svwhilelt_b64(0, n);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svfloat64_t vx = svld1(pg, &numbers[i]);\n        svfloat64_t vdiff = svabs_f64_x(pg, vx, vmean);\n        mad += svaddv_x(pg, vdiff);\n    }\n\n    mad /= n;\n    return mad;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimiter) {\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    size_t i = 0;\n    size_t j = 0;\n\n    while (i < n) {\n        size_t vl = svcntw();\n        size_t chunk = (n - i < vl) ? n - i : vl;\n\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v_numbers = svld1_s32(pg, &numbers[i]);\n        svst1_s32(pg, &result[j], v_numbers);\n\n        i += chunk;\n        j += chunk;\n\n        if (i < n) {\n            svint32_t v_delimiter = svdup_n_s32(delimiter);\n            svst1_s32(pg, &result[j], v_delimiter);\n            j += chunk;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    size_t i = 0;\n    size_t j = 0;\n\n    while (i < n) {\n        size_t vl = svcntw();\n        size_t chunk = (n - i < vl) ? n - i : vl;\n\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        svint32_t v_numbers = svld1(pg, &numbers[i]);\n        svint32_t v_delimeter = svdup_n_s32(delimeter);\n\n        svst1(pg, &result[j], v_numbers);\n        j += chunk;\n\n        if (j < 2 * n - 1) {\n            svst1(pg, &result[j], v_delimeter);\n            j += chunk;\n        }\n\n        i += chunk;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimiter) {\n    size_t n = numbers.size();\n    std::vector<int> result((n * 2) - 1);\n\n    size_t i = 0;\n    size_t j = 0;\n\n    while (i < n) {\n        size_t chunk_size = svcntw();\n        size_t remaining = n - i;\n        size_t chunk = remaining < chunk_size ? remaining : chunk_size;\n\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v_numbers = svld1(pg, &numbers[i]);\n        svint32_t v_delimiter = svdup_n_s32(delimiter);\n\n        for (size_t k = 0; k < chunk; ++k) {\n            result[j++] = numbers[i++];\n            if (i < n) result[j++] = delimiter;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    size_t i = 0;\n    size_t j = 0;\n\n    while (i < n) {\n        size_t vl = svcntw();\n        size_t chunk = (n - i > vl) ? vl : n - i;\n\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        svint32_t v_numbers = svld1(pg, &numbers[i]);\n        svint32_t v_delimeter = svdup_n_s32(delimeter);\n\n        svst1(pg, &result[j], v_numbers);\n        j += chunk;\n\n        if (j < 2 * n - 1) {\n            svst1(pg, &result[j], v_delimeter);\n            j += chunk;\n        }\n\n        i += chunk;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_65_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> intersperse_simd(std::vector<int> numbers, int delimeter) {\n    size_t n = numbers.size();\n    std::vector<int> result(2 * n - 1);\n\n    size_t i = 0;\n    size_t j = 0;\n\n    while (i < n) {\n        size_t vl = svcntw();\n        size_t chunk = (n - i < vl) ? n - i : vl;\n\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        svint32_t v_numbers = svld1_s32(pg, &numbers[i]);\n        svint32_t v_delimeter = svdup_n_s32(delimeter);\n\n        svst1_s32(pg, &result[j], v_numbers);\n        j += chunk;\n\n        if (j < 2 * n - 1) {\n            svst1_s32(pg, &result[j], v_delimeter);\n            j += chunk;\n        }\n\n        i += chunk;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    if (numbers.empty()) {\n        return {0, 1};\n    }\n\n    svbool_t pg = svwhilelt_b16(0, numbers.size());\n    svint16_t v = svld1_s16(pg, &numbers[0]);\n\n    svint64_t sum = svaddv_s16_x(pg, v);\n    svint64_t product = svpmul_x(pg, v);\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    if (numbers.empty()) {\n        return {0, 1};\n    }\n\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= numbers.size(); i += vector_length) {\n        svint16_t v = svld1_s16(&numbers[i]);\n        svint64_t v_sum = svpmull_s16(v);\n        svint64_t v_product = svpmull_s16(v);\n\n        sum += svaddv_s64(svptrue_b64(), v_sum);\n        product *= svmla_s64(svdup_s64(1), v_product);\n    }\n\n    for (; i < numbers.size(); ++i) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    if (numbers.empty()) {\n        return {0, 1};\n    }\n\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    size_t n = numbers.size();\n    svbool_t pg = svwhilelt_b16(0, n);\n\n    svint16_t v_numbers = svld1(pg, &numbers[0]);\n    svint64_t v_sum = svaddv_s32(svcvt_s32_s16(svdup_s16_x(pg, 0)));\n    svint64_t v_product = svaddv_s32(svcvt_s32_s16(svdup_s16_x(pg, 1)));\n\n    do {\n        svint16_t chunk = svld1(pg, &numbers[0]);\n        v_sum = svadd_s64_x(pg, v_sum, svcvt_s64_s32(svaddv_s32(svcvt_s32_s16(chunk))));\n        v_product = svmla_s64_x(pg, v_product, svcvt_s64_s32(svaddv_s32(svcvt_s32_s16(chunk))), svcvt_s64_s32(svaddv_s32(svcvt_s32_s16(chunk))));\n        numbers = numbers.subspan(svcntw());\n    } while (svptest_any(pg, svwhilelt_b16(0, n)));\n\n    sum = svaddv_s64(pg, v_sum);\n    product = svaddv_s64(pg, v_product);\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    if (numbers.empty()) {\n        return {0, 1};\n    }\n\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    size_t n = numbers.size();\n    svbool_t pg = svwhilelt_b16(0, n);\n    svint16_t v = svld1_s16(pg, &numbers[0]);\n\n    svint64_t vsum = svaddv_s16_x(pg, v);\n    svint64_t vprod = svpmul_x(pg, v);\n\n    sum = svaddv_x(pg, vsum);\n    product = svpmul_x(pg, vprod);\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_66_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int64_t> sum_product_simd(std::vector<int16_t> numbers) {\n    if (numbers.empty()) {\n        return {0, 1};\n    }\n\n    int64_t sum = 0;\n    int64_t product = 1;\n\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= numbers.size(); i += vector_length) {\n        svint16_t v = svld1(svptrue_b16(), &numbers[i]);\n        svint64_t v_sum = svpmull_x(svptrue_b16(), v, svdup_n_s16(1));\n        svint64_t v_product = svpmull_x(svptrue_b16(), v, svdup_n_s16(1));\n\n        sum += svaddv(svptrue_b64(), v_sum);\n        product *= svaddv(svptrue_b64(), v_product);\n    }\n\n    for (; i < numbers.size(); ++i) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return {sum, product};\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &numbers[0]);\n    svint32_t max_v = svdup_n_s32(INT32_MIN);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        max_v = svmax_s32_x(pg, max_v, v);\n        svst1_s32(pg, &result[i], max_v);\n        pg = svwhilelt_b32(i, n);\n        v = svld1_s32(pg, &numbers[i]);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n#include <cstring>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &numbers[0]);\n    svint32_t max_v = svdup_s32(numbers[0]);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        max_v = svmax_s32_m(pg, max_v, v);\n        svst1_s32(pg, &result[i], max_v);\n\n        pg = svwhilelt_b32(i + svcntd(), n);\n        if (svptest_any(svptrue_b32(), pg)) {\n            v = svld1_s32(pg, &numbers[i + svcntd()]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &numbers[0]);\n    svint32_t max_v = svdup_s32(-INT32_MAX);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        max_v = svmax_s32_m(pg, max_v, v);\n        svst1_s32(pg, &result[i], max_v);\n        pg = svwhilelt_b32(i, n);\n        v = svld1_s32(pg, &numbers[i]);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &numbers[0]);\n    svint32_t max_v = svdup_s32(numbers[0]);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        max_v = svmax_s32_m(pg, max_v, v);\n        svst1_s32(pg, &result[i], max_v);\n\n        pg = svwhilelt_b32(i + svcntd(), n);\n        if (svptest_any(svptrue_b32(), pg)) {\n            v = svld1_s32(pg, &numbers[i + svcntd()]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_67_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> rolling_max_simd(std::vector<int> numbers) {\n    size_t n = numbers.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1(pg, &numbers[0]);\n    svint32_t max_v = v;\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        max_v = svmax_s32_x(pg, max_v, v);\n        svst1(pg, &result[i], max_v);\n        pg = svwhilelt_b64(i, n);\n        v = svld1(pg, &numbers[i]);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, '0');\n\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint8_t va = svld1_u8(pg, (uint8_t*)a.c_str());\n    svuint8_t vb = svld1_u8(pg, (uint8_t*)b.c_str());\n    svuint8_t vc = sveor_z(pg, va, vb);\n    svst1_u8(pg, (uint8_t*)result.c_str(), vc);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, '0');\n\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint8_t va = svld1_u8(pg, (uint8_t*)a.c_str());\n    svuint8_t vb = svld1_u8(pg, (uint8_t*)b.c_str());\n    svuint8_t vc = sveor_z(pg, va, vb);\n    svst1_u8(pg, (uint8_t*)result.c_str(), vc);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <string>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, '0');\n\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint8_t va = svld1_u8(pg, (uint8_t*)a.c_str());\n    svuint8_t vb = svld1_u8(pg, (uint8_t*)b.c_str());\n    svuint8_t vc = sveor_xor_u8_z(pg, va, vb);\n    svst1_u8(pg, (uint8_t*)result.data(), vc);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, '0');\n\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint8_t va = svld1_u8(pg, a.data());\n    svuint8_t vb = svld1_u8(pg, b.data());\n    svuint8_t vc = svxor_u8_z(pg, va, vb);\n    svst1_u8(pg, result.data(), vc);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_68_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string string_xor_simd(std::string a, std::string b) {\n    size_t length = a.length();\n    std::string result(length, '0');\n\n    svbool_t pg = svwhilelt_b32(0, length);\n    svuint8_t va = svld1_u8(pg, a.data());\n    svuint8_t vb = svld1_u8(pg, b.data());\n    svuint8_t vc = sveor_z(pg, va, vb);\n    svst1_u8(pg, result.data(), vc);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    std::string longest = strings[0];\n    size_t max_length = longest.length();\n\n    size_t n = strings.size();\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t v_index = svindex_u64(0, 1);\n\n    do {\n        svuint64_t v_lengths = svdup_u64(0);\n        svuint8_t v_chars = svdup_u8(0);\n\n        for (size_t i = 0; i < svcntd(); ++i) {\n            size_t index = svget64_u64(v_index, i);\n            if (index < n) {\n                const std::string &str = strings[index];\n                size_t length = str.length();\n                svset64_u64(v_lengths, i, length);\n\n                for (size_t j = 0; j < length; ++j) {\n                    svset8_u8(v_chars, i * length + j, str[j]);\n                }\n            }\n        }\n\n        svuint64_t v_max_length = svdup_u64(max_length);\n        svbool_t p_greater = svcmplt_u64(pg, v_max_length, v_lengths);\n\n        if (svptest_any(pg, p_greater)) {\n            size_t index = svmin_part_u64(p_greater);\n            max_length = strings[index].length();\n            longest = strings[index];\n        }\n\n        pg = svwhilelt_b64(v_index, n);\n        v_index = svadd_n_u64(pg, v_index, svcntd());\n    } while (svptest_any(pg, pg));\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <vector>\n#include <cstring>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    std::string longest = strings[0];\n    size_t max_length = longest.length();\n\n    for (size_t i = 1; i < strings.size(); ++i) {\n        const std::string &current = strings[i];\n        size_t current_length = current.length();\n\n        if (current_length > max_length) {\n            longest = current;\n            max_length = current_length;\n        }\n    }\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return {};\n    }\n\n    std::string longest = strings[0];\n    size_t max_length = longest.length();\n\n    size_t n = strings.size();\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t idx = svindex_u64(0, 1);\n\n    while (svptest_any(pg, pg)) {\n        svuint64_t lengths = svdup_n_u64(0);\n        svuint64_t max_len_vec = svdup_n_u64(max_length);\n\n        for (size_t i = 0; i < svcntw(); ++i) {\n            size_t index = svget64_u64(idx, i);\n            if (index < n) {\n                lengths = svset_u64(lengths, i, strings[index].length());\n            }\n        }\n\n        svbool_t pmax = svcmpgt(pg, lengths, max_len_vec);\n        if (svptest_any(pg, pmax)) {\n            size_t new_max_index = svminpart_u64(pmax, idx);\n            max_length = strings[new_max_index].length();\n            longest = strings[new_max_index];\n        }\n\n        pg = svwhilelt_b64(svadd_n_u64(idx, svcntw()), n);\n        idx = svadd_n_u64(idx, svcntw());\n    }\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    std::string longest = strings[0];\n    size_t max_length = longest.length();\n\n    size_t n = strings.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    for (size_t i = 0; svptest_any(pg); i += svcntp_b32(pg), pg = svwhilelt_b32(i, n)) {\n        svuint32_t idx = svadd_n_u32(pg, i);\n        svuint32_t lengths = svdup_n_u32(0);\n\n        for (size_t j = 0; j < svcntp_b32(pg); ++j) {\n            size_t index = svget32_u32(idx, j);\n            lengths = svset32_u32(lengths, j, strings[index].length());\n        }\n\n        svbool_t p_max = svcmpgt(pg, lengths, max_length);\n        if (svptest_any(p_max)) {\n            size_t max_idx = svminpart_u32(p_max, idx);\n            max_length = strings[max_idx].length();\n            longest = strings[max_idx];\n        }\n    }\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_69_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <vector>\n#include <cstring>\n\nstd::string longest_simd(const std::vector<std::string> &strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    std::string longest = strings[0];\n    size_t max_length = longest.length();\n\n    for (size_t i = 1; i < strings.size(); ++i) {\n        size_t length = strings[i].length();\n        if (length > max_length) {\n            max_length = length;\n            longest = strings[i];\n        }\n    }\n\n    return longest;\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    svbool_t pg = svwhilelt_b64_s64(0, 1);\n    svuint64_t va = svdup_u64_z(pg, a);\n    svuint64_t vb = svdup_u64_z(pg, b);\n\n    while (svptest_any(pg, svcmpne_n_u64(pg, vb, 0))) {\n        svuint64_t temp = svmin_u64_z(pg, va, vb);\n        vb = svsub_z(pg, va, vb);\n        va = temp;\n    }\n\n    return svmaxv_u64(pg, va);\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    while (svcntp_b64(svptrue_b64(), b) != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    while (true) {\n        if (b == 0) return a;\n        a = b;\n        b = a % b;\n    }\n}\n```"}
{"task_id": "SimdBench_70_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t greatest_common_divisor_simd(uint64_t a, uint64_t b) {\n    while (b != 0) {\n        uint64_t temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest1 = 0.0f, closest2 = 0.0f;\n\n    svfloat32_t v_numbers = svld1(svptrue_b32(), numbers.data());\n    svfloat32_t v_min_diff = svdup_f32(min_diff);\n    svfloat32_t v_closest1 = svdup_f32(closest1);\n    svfloat32_t v_closest2 = svdup_f32(closest2);\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat32_t v_current = svdup_f32(numbers[i]);\n        svfloat32_t v_diff = svabs_f32(svsub_f32(v_numbers, v_current));\n        svbool_t p_mask = svcmplt(v_min_diff, v_diff);\n\n        if (svptest_any(svptrue_b32(), p_mask)) {\n            v_min_diff = svsel(p_mask, v_diff, v_min_diff);\n            v_closest1 = svsel(p_mask, v_current, v_closest1);\n            v_closest2 = svsel(p_mask, v_numbers, v_closest2);\n        }\n    }\n\n    closest1 = svminv_f32(svptrue_b32(), v_closest1);\n    closest2 = svmaxv_f32(svptrue_b32(), v_closest2);\n\n    return {closest1, closest2};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    if (n < 2) return {};\n\n    float min_diff = std::numeric_limits<float>::max();\n    float closest1 = 0.0f, closest2 = 0.0f;\n\n    svfloat32_t v_numbers = svld1(svptrue_b32(), numbers.data());\n    svfloat32_t v_min_diff = svdup_f32(min_diff);\n    svfloat32_t v_closest1 = svdup_f32(closest1);\n    svfloat32_t v_closest2 = svdup_f32(closest2);\n\n    for (size_t i = 0; i < n; i++) {\n        svfloat32_t v_num = svdup_f32(numbers[i]);\n        svfloat32_t v_diff = svabs_f32_x(svptrue_b32(), v_numbers, v_num);\n        svbool_t p_min = svcmplt(svptrue_b32(), v_diff, v_min_diff);\n\n        if (svptest_any(svptrue_b32(), p_min)) {\n            v_min_diff = svmin_f32_x(svptrue_b32(), v_diff, v_min_diff);\n            v_closest1 = svsel_f32(p_min, v_num, v_closest1);\n            v_closest2 = svsel_f32(p_min, v_numbers, v_closest2);\n        }\n    }\n\n    closest1 = svminv_f32(svptrue_b32(), v_closest1);\n    closest2 = svminv_f32(svptrue_b32(), v_closest2);\n\n    if (closest1 > closest2) {\n        std::swap(closest1, closest2);\n    }\n\n    return {closest1, closest2};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest1 = 0.0f, closest2 = 0.0f;\n\n    svfloat32_t v_numbers = svld1(svptrue_b32(), numbers.data());\n    svfloat32_t v_min_diff = svdup_f32(min_diff);\n    svfloat32_t v_closest1 = svdup_f32(closest1);\n    svfloat32_t v_closest2 = svdup_f32(closest2);\n\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            svfloat32_t v_diff = svdup_f32(diff);\n\n            svbool_t mask = svcmplt(v_diff, v_min_diff);\n            if (svptest_any(svptrue_b32(), mask)) {\n                v_min_diff = v_diff;\n                v_closest1 = svdup_f32(std::min(numbers[i], numbers[j]));\n                v_closest2 = svdup_f32(std::max(numbers[i], numbers[j]));\n            }\n        }\n    }\n\n    closest1 = svlastb(svptrue_b32(), v_closest1);\n    closest2 = svlastb(svptrue_b32(), v_closest2);\n\n    return {closest1, closest2};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_diff = std::numeric_limits<float>::max();\n    float closest1 = 0.0f, closest2 = 0.0f;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t v = svld1(svptrue_b32(), &numbers[i]);\n        svfloat32_t v_next = svld1(svptrue_b32(), &numbers[i + 1]);\n\n        svfloat32_t diff = svabs_f32_x(svptrue_b32(), svsub_f32_x(svptrue_b32(), v, v_next));\n        svbool_t mask = svcmplt(svptrue_b32(), diff, svdup_n_f32(min_diff));\n\n        if (svptest_any(svptrue_b32(), mask)) {\n            min_diff = svminv_f32(mask, diff);\n            closest1 = svminv_f32(mask, v);\n            closest2 = svminv_f32(mask, v_next);\n        }\n    }\n\n    for (size_t i = 0; i < n; ++i) {\n        for (size_t j = i + 1; j < n; ++j) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest1 = std::min(numbers[i], numbers[j]);\n                closest2 = std::max(numbers[i], numbers[j]);\n            }\n        }\n    }\n\n    return {closest1, closest2};\n}\n```"}
{"task_id": "SimdBench_71_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits>\n#include <cmath>\n\nstd::vector<float> find_closest_elements_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    if (n < 2) return {};\n\n    float min_diff = std::numeric_limits<float>::max();\n    float closest1 = 0.0f, closest2 = 0.0f;\n\n    svfloat32_t v_numbers = svld1(svptrue_b32(), numbers.data());\n    svfloat32_t v_min_diff = svdup_f32(min_diff);\n    svfloat32_t v_closest1 = svdup_f32(closest1);\n    svfloat32_t v_closest2 = svdup_f32(closest2);\n\n    for (size_t i = 0; i < n; ++i) {\n        svfloat32_t v_current = svdup_f32(numbers[i]);\n        for (size_t j = i + 1; j < n; ++j) {\n            svfloat32_t v_next = svdup_f32(numbers[j]);\n            svfloat32_t v_diff = svabs_f32(svsub_f32(v_current, v_next));\n\n            svbool_t cmp = svcmplt(v_min_diff, v_diff);\n            if (svptest_any(svptrue_b32(), cmp)) {\n                v_min_diff = v_diff;\n                v_closest1 = v_current;\n                v_closest2 = v_next;\n            }\n        }\n    }\n\n    closest1 = svminv_f32(svptrue_b32(), v_closest1);\n    closest2 = svmaxv_f32(svptrue_b32(), v_closest2);\n\n    return {closest1, closest2};\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    if (n < 2) return numbers;\n\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    svfloat32_t vmin = svdup_n_f32(min_val);\n    svfloat32_t vrange = svdup_n_f32(range);\n    svfloat32_t vone = svdup_n_f32(1.0f);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vnum = svld1(svptrue_b32(), &numbers[i]);\n        vnum = svsub_f32_x(svptrue_b32(), vnum, vmin);\n        vnum = svdiv_f32_x(svptrue_b32(), vnum, vrange);\n        svst1(svptrue_b32(), &numbers[i], vnum);\n    }\n\n    return numbers;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    svfloat32_t vmin = svdup_n_f32(min_val);\n    svfloat32_t vrange = svdup_n_f32(range);\n    svfloat32_t vone = svdup_n_f32(1.0f);\n\n    std::vector<float> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        svfloat32_t vnum = svld1(pg, &numbers[i]);\n        svfloat32_t vsub = svsub_x(pg, vnum, vmin);\n        svfloat32_t vdiv = svdiv_x(pg, vsub, vrange);\n\n        svst1(pg, &result[i], vdiv);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    svfloat32_t vmin = svdup_n_f32(min_val);\n    svfloat32_t vrange = svdup_n_f32(range);\n\n    std::vector<float> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vnum = svld1(svptrue_b32(), &numbers[i]);\n        svfloat32_t vsub = svsub_f32_x(svptrue_b32(), vnum, vmin);\n        svfloat32_t vdiv = svdiv_f32_x(svptrue_b32(), vsub, vrange);\n        svst1(svptrue_b32(), &result[i], vdiv);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    svfloat32_t vmin = svdup_n_f32(min_val);\n    svfloat32_t vrange = svdup_n_f32(range);\n    svfloat32_t vone = svdup_n_f32(1.0f);\n\n    std::vector<float> result(n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vnum = svld1(svptrue_b32(), &numbers[i]);\n        svfloat32_t vsub = svsub_f32_x(svptrue_b32(), vnum, vmin);\n        svfloat32_t vdiv = svdiv_f32_x(svptrue_b32(), vsub, vrange);\n        svst1(svptrue_b32(), &result[i], vdiv);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_72_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> rescale_to_unit_simd(std::vector<float> numbers) {\n    size_t n = numbers.size();\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n\n    svfloat32_t vmin = svdup_n_f32(min_val);\n    svfloat32_t vrange = svdup_n_f32(range);\n\n    std::vector<float> result(n);\n    size_t i = 0;\n\n    for (; i <= n - svcntd(); i += svcntd()) {\n        svfloat32_t vnum = svld1(svptrue_b32(), &numbers[i]);\n        svfloat32_t vsub = svsub_f32_x(svptrue_b32(), vnum, vmin);\n        svfloat32_t vdiv = svdiv_f32_x(svptrue_b32(), vsub, vrange);\n        svst1(svptrue_b32(), &result[i], vdiv);\n    }\n\n    for (; i < n; ++i) {\n        result[i] = (numbers[i] - min_val) / range;\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    svbool_t pg = svptrue_b64();\n    svuint64_t vn = svdup_u64(n);\n    svuint64_t divisors = svindex_u64(0, 1);\n\n    svuint64_t remainders = svrem_u64_x(pg, vn, divisors);\n    svbool_t zero_remainders = svcmpeq_u64(pg, remainders, 0);\n\n    uint64_t max_divisor = 0;\n    while (svptest_any(pg, zero_remainders)) {\n        max_divisor = svmaxv_u64_x(pg, svsel_u64(zero_remainders, divisors, svdup_u64(0)));\n        divisors = svadd_u64_x(pg, divisors, svdup_u64(1));\n        remainders = svrem_u64_x(pg, vn, divisors);\n        zero_remainders = svcmpeq_u64(pg, remainders, 0);\n    }\n\n    return max_divisor;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64_s64(0, n / 2 + 1);\n    svuint64_t v = svindex_u64_s64(0, 1);\n\n    svuint64_t divisors = svdiv_n_u64_z(pg, n, v);\n    svuint64_t remainders = svrem_n_u64_z(pg, n, v);\n\n    svbool_t zero_remainders = svcmpne_n_u64(pg, remainders, 0);\n    svuint64_t max_divisor = svmaxv_u64_s64(zero_remainders, divisors);\n\n    return svlastb_u64(zero_remainders) ? max_divisor : 1;\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64_s64(0, n / 2 + 1);\n    svuint64_t v = svindex_u64_z(pg, 1);\n\n    svuint64_t divisors = svrem_n_u64_z(pg, n, v);\n    svuint64_t zero_divisors = sveor_m(pg, divisors, divisors);\n\n    size_t max_index = svmax_index_u64(pg, zero_divisors);\n\n    return svget1_u64(svindex_u64_z(pg, max_index + 1));\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svuint64_t v = svindex_u64(0, 1);\n    svuint64_t rem = svrem_n_u64_z(pg, v, n);\n    svuint64_t zero = svdup_n_u64(0);\n    svbool_t mask = svcmpne_u64(pg, rem, zero);\n    svuint64_t max_div = svmax_m_u64_z(pg, mask, v);\n    return svmaxv_u64(pg, max_div);\n}\n```"}
{"task_id": "SimdBench_73_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t largest_divisor_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64(0, n / 2 + 1);\n    svuint64_t v = svindex_u64(0, 1);\n\n    svuint64_t rem = svrem_n_u64_z(pg, v, n);\n    svuint64_t zero = svdup_n_u64(0);\n    svbool_t mask = svcmpne_u64(pg, rem, zero);\n\n    svuint64_t max_div = svmax_m_u64_z(pg, mask, v);\n\n    return svmaxv_u64(pg, max_div);\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svdup_n_s32(2);\n    svint32_t i = svindex_s32(0, 1);\n\n    while (svptest_any(pg, pg)) {\n        svint32_t div = svdiv_n_s32_x(pg, n, v);\n        svint32_t mul = svmul_n_s32_x(pg, div, v);\n        svbool_t is_factor = sveq_s32_x(pg, mul, n);\n\n        if (svptest_any(pg, is_factor)) {\n            factors.push_back(svlastb_s32(is_factor));\n            n /= svlastb_s32(is_factor);\n            v = svadd_n_s32_x(pg, v, svdup_n_s32(1));\n        } else {\n            v = svadd_n_s32_x(pg, v, svdup_n_s32(1));\n        }\n\n        pg = svwhilelt_b32(v, n);\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svdup_n_s32(2);\n    svint32_t i = svindex_s32(0, 1);\n\n    while (svptest_any(pg, pg)) {\n        svint32_t div = svdiv_n_s32_x(pg, n, v);\n        svint32_t mul = svmul_n_s32_x(pg, div, v);\n        svint32_t rem = svsub_s32_x(pg, n, mul);\n\n        svbool_t is_factor = svcmpne_s32(pg, rem, 0);\n        if (svptest_any(pg, is_factor)) {\n            svint32_t factor = svsel_s32(is_factor, v, svdup_n_s32(-1));\n            for (int j = 0; j < svcntw(); ++j) {\n                if (svptest_any_s32(svasr_s32_x(pg, factor, j), svdup_n_s32(-1))) {\n                    factors.push_back(svget1_s32(factor));\n                    n /= svget1_s32(factor);\n                }\n            }\n        }\n\n        v = svadd_s32_x(pg, v, svdup_n_s32(1));\n        i = svadd_s32_x(pg, i, svdup_n_s32(1));\n        pg = svwhilelt_b32(i, svdup_n_s32(std::sqrt(n)) + 1);\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svdup_n_s32(2);\n    svint32_t i = svindex_s32(0, 1);\n\n    while (svptest_any(pg, svcmpne_n_s32(pg, svdiv_n_s32_x(pg, n, v), 0))) {\n        svbool_t p = svcmpne_n_s32(pg, svmod_n_s32_x(pg, n, v), 0);\n        if (svptest_any(p, p)) {\n            v = svadd_s32_x(pg, v, svdup_n_s32(1));\n        } else {\n            while (n % svget32_s32(v) == 0) {\n                factors.push_back(svget32_s32(v));\n                n /= svget32_s32(v);\n            }\n            v = svadd_s32_x(pg, v, svdup_n_s32(1));\n        }\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t v = svdup_u32(2);\n    svuint32_t i = svindex_u32(0, 1);\n\n    while (svptest_any(pg, svcmpne_n_u32(pg, svmod_n_u32_x(pg, n, v), 0))) {\n        svbool_t p = svcmpne_n_u32(pg, svmod_n_u32_x(pg, n, v), 0);\n        v = svadd_u32_x(pg, v, svsel_u32(p, svdup_u32(1), svdup_u32(0)));\n        i = svadd_u32_x(pg, i, svdup_u32(1));\n        pg = svwhilelt_b32(i, svdup_u32(std::sqrt(n) + 1));\n    }\n\n    int factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            factors.push_back(factor);\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_74_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize_simd(int n) {\n    std::vector<int> factors;\n    if (n <= 1) return factors;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t v = svindex_u64(0, 1);\n\n    while (svptest_any(pg, svcmpne_n_u64(pg, svmod_n_u64(pg, v, n), 0))) {\n        svuint64_t divisor = svdiv_n_u64(pg, n, v);\n        svbool_t is_factor = svcmpne_n_u64(pg, svmod_n_u64(pg, n, divisor), 0);\n\n        if (svptest_any(pg, is_factor)) {\n            n = svdiv_n_u64_x(pg, n, divisor);\n            for (int i = 0; i < svcntp_b64(pg, is_factor); ++i) {\n                factors.push_back(divisor[i]);\n            }\n        }\n\n        v = svadd_n_u64_x(pg, v, 1);\n        pg = svwhilelt_b64(v, svdup_n_u64(std::sqrt(n) + 1));\n    }\n\n    if (n > 1) {\n        factors.push_back(n);\n    }\n\n    return factors;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    std::vector<float> result;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= l.size(); i += vector_length) {\n        svfloat32_t v = svld1(svptrue_b32(), &l[i]);\n        svbool_t mask = svcmpge(v, 0.0f);\n        svfloat32_t positive_v = svsel(mask, v, svdup_f32(0.0f));\n\n        float temp[vector_length];\n        svst1(svptrue_b32(), temp, positive_v);\n\n        for (size_t j = 0; j < vector_length; ++j) {\n            if (temp[j] > 0.0f) {\n                result.push_back(temp[j]);\n            }\n        }\n    }\n\n    for (; i < l.size(); ++i) {\n        if (l[i] > 0.0f) {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    std::vector<float> result;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= l.size(); i += vector_length) {\n        svfloat32_t v = svld1(svptrue_b32(), &l[i]);\n        svbool_t mask = svcmpge(v, 0.0f);\n        svfloat32_t positive_v = svsel(mask, v, svdup_f32(0.0f));\n        svst1(mask, &l[i], positive_v);\n\n        for (size_t j = 0; j < vector_length; ++j) {\n            if (l[i + j] > 0.0f) {\n                result.push_back(l[i + j]);\n            }\n        }\n    }\n\n    for (; i < l.size(); ++i) {\n        if (l[i] > 0.0f) {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    std::vector<float> result;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i <= l.size() - vector_length; i += vector_length) {\n        svfloat32_t v = svld1(svptrue_b32(), &l[i]);\n        svbool_t mask = svcmpge(v, 0.0f);\n        svfloat32_t positive_v = svsel(mask, v, svdup_f32(0.0f));\n        svst1(mask, &l[i], positive_v);\n\n        for (size_t j = 0; j < vector_length; ++j) {\n            if (l[i + j] > 0.0f) {\n                result.push_back(l[i + j]);\n            }\n        }\n    }\n\n    for (; i < l.size(); ++i) {\n        if (l[i] > 0.0f) {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    std::vector<float> result;\n    size_t vl = svcntw();\n    size_t i = 0;\n\n    for (; i + vl <= l.size(); i += vl) {\n        svfloat32_t v = svld1(svptrue_b32(), &l[i]);\n        svfloat32_t positive_mask = svcmpge(v, 0.0f);\n        svbool_t pred = svcmpeq(positive_mask, 0);\n\n        svfloat32_t positive_values = svsel(pred, v, svdup_f32(0.0f));\n        svst1(svptrue_b32(), &l[i], positive_values);\n\n        for (size_t j = 0; j < vl; ++j) {\n            if (l[i + j] > 0) {\n                result.push_back(l[i + j]);\n            }\n        }\n    }\n\n    for (; i < l.size(); ++i) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_75_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<float> get_positive_simd(const std::vector<float> & l) {\n    std::vector<float> result;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= l.size(); i += vector_length) {\n        svfloat32_t v = svld1(svptrue_b32(), &l[i]);\n        svbool_t mask = svcmpge(v, 0.0f);\n        svfloat32_t positive_v = svsel(mask, v, svdup_f32(0.0f));\n\n        float temp[vector_length];\n        svst1(svptrue_b32(), temp, positive_v);\n\n        for (size_t j = 0; j < vector_length; ++j) {\n            if (temp[j] > 0.0f) {\n                result.push_back(temp[j]);\n            }\n        }\n    }\n\n    for (; i < l.size(); ++i) {\n        if (l[i] > 0.0f) {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    svbool_t pg = svwhilelt_b64(i, sv_sqrt(n));\n\n    do {\n        svint64_t vn = svdup_n_s64(n);\n        svint64_t vi = svindex_s64(i, 1);\n        svbool_t p = svcmpeq_s64(pg, svrem_n_s64(pg, vn, vi), svdup_n_s64(0));\n        if (svptest_any(pg, p)) return false;\n        i += svcntw();\n        pg = svwhilelt_b64(i, sv_sqrt(n));\n    } while (svptest_any(pg, pg));\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n#include <math.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t sqrt_n = (int64_t)sqrt(n);\n    svbool_t pg = svwhilelt_b64(0, sqrt_n);\n\n    svint64_t v = svindex_s64(0, 1);\n    svint64_t base = svdup_n_s64(5);\n    svint64_t step = svdup_n_s64(6);\n    svint64_t factors = svadd_s64_x(pg, base, svmla_s64_x(pg, step, v));\n\n    svbool_t any_divisible = svcmpne_n_u64(pg, svrem_n_s64_x(pg, n, factors), 0);\n\n    return !svptest_any(pg, any_divisible);\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    svbool_t pg = svwhilelt_b64(i, sv_sqrt(n));\n\n    do {\n        svint64_t vn = svdup_n_s64(n);\n        svint64_t vi = svindex_s64(i, 1);\n        svint64_t rem = svrem_n_s64(pg, vn, vi);\n        svbool_t any_zero = svcmpeq_s64(pg, rem, 0);\n\n        if (svptest_any(svptrue_b64(), any_zero)) {\n            return false;\n        }\n\n        i += svcntw();\n        pg = svwhilelt_b64(i, sv_sqrt(n));\n    } while (svptest_any(svptrue_b64(), pg));\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t i = 5;\n    svbool_t pg = svwhilelt_b64_s64(i, sv_sqrt(n));\n\n    do {\n        svint64_t v = svindex_s64(i, 1);\n        svbool_t is_divisible = svcmpne_n_s64_x(pg, svrem_n_s64_z(pg, v, n), 0);\n        if (svptest_any(pg, is_divisible)) return false;\n        i += 6;\n        pg = svwhilelt_b64_s64(i, sv_sqrt(n));\n    } while (svptest_any(pg, pg));\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_76_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n#include <math.h>\n\nbool is_prime_simd(int64_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int64_t sqrt_n = (int64_t)sqrt(n);\n    svbool_t pg = svwhilelt_b64(0, sqrt_n);\n\n    svint64_t v = svindex_s64(0, 1);\n    v = svadd_s64_x(pg, v, 5);\n    v = svsub_s64_x(pg, v, 1);\n\n    svbool_t any_divisible = svcmpne_n_u64(pg, svrem_n_s64_z(pg, n, v), 0);\n\n    return !svptest_any(svptrue_b64(), any_divisible);\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string result(len, ' ');\n\n    bool has_letter = false;\n    for (size_t i = 0; i < len; ++i) {\n        if (std::isalpha(s[i])) {\n            has_letter = true;\n            break;\n        }\n    }\n\n    if (!has_letter) {\n        std::reverse_copy(s.begin(), s.end(), result.begin());\n        return result;\n    }\n\n    size_t i = 0;\n    for (; i <= len - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b64(i, len);\n        svuint8_t sv_s = svld1_u8(pg, &s[i]);\n        svuint8_t sv_lower = svdup_n_u8('a');\n        svuint8_t sv_upper = svdup_n_u8('A');\n        svuint8_t sv_diff = svsub_n_u8_x(pg, 'a', 'A');\n\n        svbool_t sv_is_lower = svcmge_u8(pg, sv_s, sv_lower);\n        svbool_t sv_is_upper = svcmge_u8(pg, sv_upper, sv_s);\n        svbool_t sv_is_alpha = svand_z(pg, sv_is_lower, sv_is_upper);\n\n        svuint8_t sv_result = svadd_z(pg, sv_s, sv_diff);\n        sv_result = svsel_u8(sv_is_alpha, sv_result, sv_s);\n\n        svst1_u8(pg, &result[i], sv_result);\n    }\n\n    for (; i < len; ++i) {\n        if (std::isalpha(s[i])) {\n            result[i] = std::isupper(s[i]) ? std::tolower(s[i]) : std::toupper(s[i]);\n        } else {\n            result[i] = s[i];\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string result(len, ' ');\n\n    bool hasLetter = false;\n    for (size_t i = 0; i < len; ++i) {\n        if (std::isalpha(s[i])) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (!hasLetter) {\n        std::reverse_copy(s.begin(), s.end(), result.begin());\n        return result;\n    }\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    const svuint8_t sv_a = svdup_n_u8('a');\n    const svuint8_t sv_z = svdup_n_u8('z');\n    const svuint8_t sv_A = svdup_n_u8('A');\n    const svuint8_t sv_Z = svdup_n_u8('Z');\n    const svint8_t diff = svdup_n_s8('a' - 'A');\n\n    for (size_t i = 0; i < len; i += svcntw()) {\n        svuint8_t sv_chars = svld1(pg, &s[i]);\n        svbool_t is_lower = svcmge_u8(pg, sv_chars, sv_a) & svcmle_u8(pg, sv_chars, sv_z);\n        svbool_t is_upper = svcmge_u8(pg, sv_chars, sv_A) & svcmle_u8(pg, sv_chars, sv_Z);\n\n        svuint8_t sv_result = sv_chars;\n        sv_result = svsel_u8(pg, is_lower, svsub_n_u8_x(pg, sv_chars, diff), sv_result);\n        sv_result = svsel_u8(pg, is_upper, svadd_n_u8_x(pg, sv_chars, diff), sv_result);\n\n        svst1(pg, &result[i], sv_result);\n\n        pg = svwhilelt_b64(i + svcntw(), len);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string result(len, ' ');\n\n    bool hasLetter = false;\n    for (size_t i = 0; i < len; ++i) {\n        if (std::isalpha(s[i])) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (!hasLetter) {\n        std::reverse_copy(s.begin(), s.end(), result.begin());\n        return result;\n    }\n\n    svbool_t pg = svwhilelt_b32(0, len);\n    svuint8_t sv_s = svld1_u8(pg, (const uint8_t *)s.data());\n    svuint8_t sv_result = svdup_n_u8(0);\n\n    svbool_t is_lower = svcmpeq_n_u8(pg, sv_s, 'a');\n    svbool_t is_upper = svcmpeq_n_u8(pg, sv_s, 'A');\n\n    for (size_t i = 'a'; i <= 'z'; ++i) {\n        is_lower = svorr_z(pg, is_lower, svcmpeq_n_u8(pg, sv_s, i));\n    }\n\n    for (size_t i = 'A'; i <= 'Z'; ++i) {\n        is_upper = svorr_z(pg, is_upper, svcmpeq_n_u8(pg, sv_s, i));\n    }\n\n    sv_result = svsel_u8(is_lower, svsub_n_u8(pg, sv_s, 32), sv_s);\n    sv_result = svsel_u8(is_upper, svadd_n_u8(pg, sv_s, 32), sv_result);\n\n    svst1_u8(pg, (uint8_t *)result.data(), sv_result);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string result(len, ' ');\n\n    bool hasLetter = false;\n    for (size_t i = 0; i < len; ++i) {\n        if (std::isalpha(s[i])) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (!hasLetter) {\n        std::reverse_copy(s.begin(), s.end(), result.begin());\n        return result;\n    }\n\n    svbool_t pg = svwhilelt_b32(0, len);\n    svuint8_t sv_s = svld1_u8(pg, (const uint8_t*)s.data());\n    svuint8_t sv_result = svdup_n_u8(0);\n\n    svbool_t is_lower = svcmpeq_n_u8(pg, sv_s, 'a' <= sv_s && sv_s <= 'z');\n    svbool_t is_upper = svcmpeq_n_u8(pg, sv_s, 'A' <= sv_s && sv_s <= 'Z');\n\n    sv_result = svsel_u8(is_lower, svsub_n_u8(pg, sv_s, 32), sv_s);\n    sv_result = svsel_u8(is_upper, svadd_n_u8(pg, sv_s, 32), sv_result);\n\n    svst1_u8(pg, (uint8_t*)result.data(), sv_result);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_77_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n#include <algorithm>\n\nstd::string solve_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string result(len, ' ');\n\n    bool has_letter = false;\n    for (size_t i = 0; i < len; ++i) {\n        if (isalpha(s[i])) {\n            has_letter = true;\n            break;\n        }\n    }\n\n    if (!has_letter) {\n        std::reverse_copy(s.begin(), s.end(), result.begin());\n        return result;\n    }\n\n    size_t i = 0;\n    for (; i <= len - svcntb(); i += svcntb()) {\n        svbool_t pg = svwhilelt_b64(i, len);\n\n        svuint8_t sv_s = svld1_u8(pg, &s[i]);\n        svbool_t is_lower = svcmpeq_n_u8(pg, sv_s, 'a') <= svcmpeq_n_u8(pg, sv_s, 'z');\n        svbool_t is_upper = svcmpeq_n_u8(pg, sv_s, 'A') <= svcmpeq_n_u8(pg, sv_s, 'Z');\n\n        svuint8_t sv_result = sv_s;\n        sv_result = svsel_u8(pg, sv_result, svsub_n_u8_x(pg, sv_s, 32), is_lower);\n        sv_result = svsel_u8(pg, sv_result, svadd_n_u8_x(pg, sv_s, 32), is_upper);\n\n        svst1_u8(pg, &result[i], sv_result);\n    }\n\n    for (; i < len; ++i) {\n        if (islower(s[i])) {\n            result[i] = toupper(s[i]);\n        } else if (isupper(s[i])) {\n            result[i] = tolower(s[i]);\n        } else {\n            result[i] = s[i];\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> sorted_thirds;\n\n    for (size_t i = 2; i < n; i += 3) {\n        sorted_thirds.push_back(l[i]);\n    }\n\n    std::sort(sorted_thirds.begin(), sorted_thirds.end());\n\n    size_t sorted_index = 0;\n    for (size_t i = 2; i < n; i += 3) {\n        l[i] = sorted_thirds[sorted_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> l_prime = l;\n    std::vector<int> divisible_by_three;\n\n    for (size_t i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            divisible_by_three.push_back(l[i]);\n        }\n    }\n\n    std::sort(divisible_by_three.begin(), divisible_by_three.end());\n\n    size_t index = 0;\n    for (size_t i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            l_prime[i] = divisible_by_three[index++];\n        }\n    }\n\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> l_prime(n);\n    std::vector<int> divisible_by_three;\n\n    for (size_t i = 0; i < n; ++i) {\n        if ((i + 1) % 3 == 0) {\n            divisible_by_three.push_back(l[i]);\n        }\n    }\n\n    std::sort(divisible_by_three.begin(), divisible_by_three.end());\n\n    size_t idx = 0;\n    for (size_t i = 0; i < n; ++i) {\n        if ((i + 1) % 3 == 0) {\n            l_prime[i] = divisible_by_three[idx++];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> l_prime = l;\n    std::vector<int> divisible_by_three;\n\n    for (size_t i = 2; i < n; i += 3) {\n        divisible_by_three.push_back(l[i]);\n    }\n\n    std::sort(divisible_by_three.begin(), divisible_by_three.end());\n\n    size_t index = 0;\n    for (size_t i = 2; i < n; i += 3) {\n        l_prime[i] = divisible_by_three[index++];\n    }\n\n    return l_prime;\n}\n```"}
{"task_id": "SimdBench_78_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> sorted_third;\n\n    for (size_t i = 2; i < n; i += 3) {\n        sorted_third.push_back(l[i]);\n    }\n\n    std::sort(sorted_third.begin(), sorted_third.end());\n\n    size_t sorted_index = 0;\n    for (size_t i = 2; i < n; i += 3) {\n        l[i] = sorted_third[sorted_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t n = l.size();\n    svfloat32_t max_vec = svdup_f32(-INFINITY);\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec = svld1(pg, &l[i]);\n        max_vec = svmax_f32_m(pg, max_vec, vec);\n        pg = svwhilelt_b32(i, n);\n    }\n\n    float max_val = -INFINITY;\n    for (size_t i = 0; i < svcntw(); ++i) {\n        float val = svget1(max_vec, i);\n        if (val > max_val) {\n            max_val = val;\n        }\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t n = l.size();\n    svfloat32_t max_vec = svdup_f32(-INFINITY);\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec = svld1(pg, &l[i]);\n        max_vec = svmax_f32_m(pg, max_vec, vec);\n        pg = svwhilelt_b32(i, n);\n    }\n\n    float max_val = -INFINITY;\n    for (size_t i = 0; i < svcntw(); ++i) {\n        float val = svget1(max_vec, i);\n        if (val > max_val) {\n            max_val = val;\n        }\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t n = l.size();\n    svfloat32_t max_vec = svdup_f32(-INFINITY);\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec = svld1(pg, &l[i]);\n        max_vec = svmax_f32_m(pg, max_vec, vec);\n        pg = svwhilelt_b32(i + svcntw(), n);\n    }\n\n    float max_val = -INFINITY;\n    for (size_t i = 0; i < svcntw(); ++i) {\n        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t n = l.size();\n    svfloat32_t max_vec = svdup_f32(-__builtin_inff());\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t vec = svld1(pg, &l[i]);\n        max_vec = svmax_f32_m(pg, max_vec, vec);\n        pg = svwhilelt_b32(i + svcntw(), n);\n    }\n\n    float max_val = svmaxv_f32(pg, max_vec);\n    return max_val;\n}\n```"}
{"task_id": "SimdBench_79_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nfloat max_element_simd(std::vector<float> l) {\n    size_t n = l.size();\n    svfloat32_t max_val = svdup_f32(-__builtin_inff());\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svfloat32_t v = svld1(pg, &l[i]);\n        max_val = svmax_f32_m(pg, max_val, v);\n        pg = svwhilelt_b32(i + svcntw(), n);\n    }\n\n    return svmaxv_f32(max_val);\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t numbers = svindex_u32(0, 1);\n\n    do {\n        svbool_t divisible_by_11 = svcmpne_n_u32(pg, svmod_n_u32(pg, numbers, 11), 0);\n        svbool_t divisible_by_13 = svcmpne_n_u32(pg, svmod_n_u32(pg, numbers, 13), 0);\n        svbool_t divisible_by_11_or_13 = svorr_z(pg, divisible_by_11, divisible_by_13);\n\n        svuint32_t digits = svcmpne_n_u32(pg, svmod_n_u32(pg, numbers, 10), 7);\n        svuint32_t sevens = svand_z(pg, divisible_by_11_or_13, digits);\n\n        count += svcntp_b32(pg, sevens);\n\n        numbers = svadd_n_u32_x(pg, numbers, 1);\n        pg = svwhilelt_b32(numbers, n);\n    } while (svptest_any(pg));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t v = svindex_u32(0, 1);\n\n    do {\n        svuint32_t divisible_by_11 = svcmpne_n_u32(pg, svrem_n_u32(pg, v, 11), 0);\n        svuint32_t divisible_by_13 = svcmpne_n_u32(pg, svrem_n_u32(pg, v, 13), 0);\n        svuint32_t divisible_by_11_or_13 = svor_z(pg, divisible_by_11, divisible_by_13);\n\n        svuint32_t digits = svqadd_n_u32_x(pg, v, 0);\n        svuint32_t sevens = svcmpne_n_u32(pg, svrem_n_u32(pg, digits, 10), 7);\n\n        count += svcntp_b32(pg, svand_z(pg, divisible_by_11_or_13, sevens));\n\n        v = svadd_n_u32_x(pg, v, svcntp_b32(pg, pg));\n        pg = svwhilelt_b32(n, v);\n    } while (svptest_any(pg, pg));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t v = svindex_u32(0, 1);\n\n    do {\n        svuint32_t nums = svadd_x(pg, v, svdup_n_u32(1));\n        svbool_t divisible_by_11 = svcmpne_n_u32(pg, svmul_n_u32(pg, nums, 11), 0);\n        svbool_t divisible_by_13 = svcmpne_n_u32(pg, svmul_n_u32(pg, nums, 13), 0);\n        svbool_t divisible = svorr_z(pg, divisible_by_11, divisible_by_13);\n\n        svuint32_t digits = svdiv_n_u32_x(pg, nums, svdup_n_u32(10));\n        svbool_t is_seven = svcmpne_n_u32(pg, digits, 7);\n\n        count += svcntp_b32(pg, svand_z(pg, divisible, is_seven));\n\n        v = svadd_x(pg, v, svdup_n_u32(svcntp_b32(pg, pg)));\n        pg = svwhilelt_b32(v, n);\n    } while (svptest_any(pg, pg));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t v = svindex_u64(0, 1);\n\n    do {\n        svuint64_t div11 = svdiv_n_u64_x(pg, v, 11);\n        svuint64_t div13 = svdiv_n_u64_x(pg, v, 13);\n        svuint64_t rem11 = svrem_n_u64_x(pg, v, 11);\n        svuint64_t rem13 = svrem_n_u64_x(pg, v, 13);\n\n        svbool_t cond11 = svcmpne_n_u64(pg, rem11, 0);\n        svbool_t cond13 = svcmpne_n_u64(pg, rem13, 0);\n\n        svuint64_t ones11 = svdup_n_u64(pg, 1);\n        svuint64_t ones13 = svdup_n_u64(pg, 1);\n\n        svuint64_t mask11 = svsel_u64(cond11, ones11, svdup_n_u64(pg, 0));\n        svuint64_t mask13 = svsel_u64(cond13, ones13, svdup_n_u64(pg, 0));\n\n        svuint64_t mask = svor_u64_z(pg, mask11, mask13);\n\n        count += svcntp_b64(pg, mask);\n\n        v = svadd_n_u64_x(pg, v, 1);\n        pg = svwhilelt_b64(n, v);\n    } while (svptest_any(pg));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_80_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint fizz_buzz_simd(int n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t numbers = svindex_u32(0, 1);\n\n    do {\n        svuint32_t divisible_by_11 = svmod_n_u32_z(pg, numbers, 11);\n        svuint32_t divisible_by_13 = svmod_n_u32_z(pg, numbers, 13);\n        svbool_t mask = svor_z(pg, divisible_by_11, divisible_by_13);\n\n        svuint32_t digits = svcmpne_n_u32(pg, svmod_n_u32_x(pg, numbers, 10), 7);\n        count += svcntp_b32(pg, svand_z(pg, mask, digits));\n\n        numbers = svadd_n_u32_x(pg, numbers, 1);\n        pg = svwhilelt_b32(numbers, n);\n    } while (svptest_any(pg));\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_indices[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_indices[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_indices[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_indices[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_81_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nstd::vector<float> sort_even_simd(std::vector<float> l) {\n    size_t n = l.size();\n    std::vector<float> even_indices;\n\n    for (size_t i = 0; i < n; i += 2) {\n        even_indices.push_back(l[i]);\n    }\n\n    std::sort(even_indices.begin(), even_indices.end());\n\n    size_t even_index = 0;\n    for (size_t i = 0; i < n; i += 2) {\n        l[i] = even_indices[even_index++];\n    }\n\n    return l;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) return false;\n\n    for (int i = 0; i < n - 2; ++i) {\n        svint32_t vi = svdup_n_s32(l[i]);\n\n        for (int j = i + 1; j < n - 1; ++j) {\n            svint32_t vj = svdup_n_s32(l[j]);\n            svint32_t vij = svadd_s32_x(svptrue_b32(), vi, vj);\n\n            int k = j + 1;\n            while (k < n) {\n                svint32_t vk = svld1_s32(&l[k]);\n                svint32_t vsum = svadd_s32_x(svptrue_b32(), vij, vk);\n                svbool_t cmp = svcmpne_n_s32(svptrue_b32(), vsum, 0);\n\n                if (svptest_any(svptrue_b32(), cmp)) {\n                    return true;\n                }\n\n                k += svcntw();\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) return false;\n\n    for (int i = 0; i < n - 2; i++) {\n        svint32_t vi = svdup_n_s32(l[i]);\n\n        for (int j = i + 1; j < n - 1; j++) {\n            svint32_t vj = svdup_n_s32(l[j]);\n            svint32_t vij = svadd_s32_z(svptrue_b32(), vi, vj);\n\n            int k = j + 1;\n            while (k < n) {\n                svint32_t vk = svld1_s32(&l[k]);\n                svint32_t vsum = svadd_s32_z(svptrue_b32(), vij, vk);\n                svbool_t cmp = svcmpne_n_s32(svptrue_b32(), vsum, 0);\n\n                if (svptest_any(svptrue_b32(), cmp)) {\n                    return true;\n                }\n\n                k += svcntw();\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) return false;\n\n    for (int i = 0; i < n - 2; i++) {\n        svint32_t vi = svdup_n_s32(l[i]);\n        for (int j = i + 1; j < n - 1; j++) {\n            svint32_t vj = svdup_n_s32(l[j]);\n            svint32_t vij = svadd_s32_x(svptrue_b32(), vi, vj);\n            for (int k = j + 1; k < n; k++) {\n                svint32_t vk = svdup_n_s32(l[k]);\n                svint32_t vijk = svadd_s32_x(svptrue_b32(), vij, vk);\n                if (svptest_any(svptrue_b32(), svcmpne_n_s32(svptrue_b32(), vijk, 0))) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) return false;\n\n    for (int i = 0; i < n - 2; i++) {\n        svint32_t vi = svdup_n_s32(l[i]);\n        for (int j = i + 1; j < n - 1; j++) {\n            svint32_t vj = svdup_n_s32(l[j]);\n            svint32_t vij = svadd_s32_x(svptrue_b32(), vi, vj);\n            for (int k = j + 1; k < n; k++) {\n                svint32_t vk = svdup_n_s32(l[k]);\n                svint32_t vijk = svadd_s32_x(svptrue_b32(), vij, vk);\n                svbool_t cmp = svcmpne_n_s32(svptrue_b32(), vijk, 0);\n                if (svptest_any(svptrue_b32(), cmp)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_82_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool triples_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 3) return false;\n\n    for (int i = 0; i < n - 2; i++) {\n        svint32_t vi = svdup_n_s32(l[i]);\n\n        for (int j = i + 1; j < n - 1; j++) {\n            svint32_t vj = svdup_n_s32(l[j]);\n            svint32_t vij = svadd_s32_z(svptrue_b32(), vi, vj);\n\n            int k = j + 1;\n            while (k < n) {\n                svint32_t vk = svld1_s32(&l[k]);\n                svint32_t vsum = svadd_s32_z(svptrue_b32(), vij, vk);\n                svbool_t cmp = svcmpne_s32(vsum, 0);\n\n                if (svptest_any(svptrue_b32(), cmp)) {\n                    return true;\n                }\n\n                k += svcntw();\n            }\n        }\n    }\n\n    return false;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n    svint32_t incr = svadd_n_s32_x(pg, v, 1);\n    svst1_s32(pg, &result[0], incr);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n    svint32_t incr = svadd_n_s32_x(pg, v, 1);\n    svst1_s32(pg, &result[0], incr);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n    v = svadd_n_s32_x(pg, v, 1);\n    svst1_s32(pg, &result[0], v);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n    svint32_t incremented = svadd_n_s32(pg, v, 1);\n    svst1_s32(pg, &result[0], incremented);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_83_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> incr_list_simd(std::vector<int> l) {\n    size_t n = l.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n    v = svadd_n_s32_x(pg, v, 1);\n    svst1_s32(pg, &result[0], v);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t vi = svdup_n_s32(-l[i]);\n        svint32_t sum = svadd_s32_x(pg, v, vi);\n        svbool_t check = svcmpne_s32(pg, sum, 0);\n        if (svptest_any(pg, check)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n\n    for (int i = 0; i < n; ++i) {\n        svint32_t vi = svdup_n_s32(-l[i]);\n        svint32_t sum = svadd_s32_x(pg, v, vi);\n        svbool_t check = svcmpne_s32(pg, sum, 0);\n        if (svptest_any(pg, check)) {\n            return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1_s32(pg, &l[i]);\n        svint32_t neg_v = svneg_s32_x(pg, v);\n\n        for (int j = i + 1; j < n; ++j) {\n            svbool_t pg_j = svwhilelt_b32(j, n);\n            svint32_t v_j = svld1_s32(pg_j, &l[j]);\n            svbool_t match = svcmpeq_s32(pg_j, v_j, neg_v);\n\n            if (svptest_any(pg_j, match)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1_s32(pg, &l[i]);\n        svint32_t neg_v = svneg_s32_x(pg, v);\n\n        for (int j = i + 1; j < n; ++j) {\n            svbool_t pg_j = svwhilelt_b32(j, n);\n            svint32_t v_j = svld1_s32(pg_j, &l[j]);\n            svbool_t cmp = svcmpne_n_s32(pg_j, v_j, 0);\n\n            if (svptest_any(pg_j, cmp)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_84_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool pairs_sum_to_zero_simd(std::vector<int> l) {\n    size_t n = l.size();\n    if (n < 2) return false;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &l[0]);\n\n    for (size_t i = 0; i < n; ++i) {\n        svint32_t vi = svdup_n_s32(-l[i]);\n        svbool_t p = svcmpeq_s32(pg, v, vi);\n        if (svptest_any(pg, p)) {\n            size_t index = svmin_index_u64(pg, svptrue_b64(), svwhilelt_u64(0, n));\n            if (index != i) return true;\n        }\n    }\n    return false;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <string>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n    if (x == 0) return \"0\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x /= base;\n        result = std::to_string(remainder) + result;\n    }\n\n    // Use SVE to convert the string to the desired base representation\n    const int vector_length = 8; // Example vector length\n    svbool_t pg = svwhilelt_b64(0, svcntw());\n    svint64_t sv_x = svdup_n_s64(x);\n    svint8_t sv_base = svdup_n_s8(base);\n    svint64_t sv_remainder = svdivr_n_s64_x(pg, sv_x, sv_base);\n\n    while (svptest_any(pg, svcmpeq_n_s64(pg, sv_x, 0))) {\n        sv_remainder = svmod_s64_x(pg, sv_x, sv_base);\n        sv_x = svdiv_s64_x(pg, sv_x, sv_base);\n        // Convert sv_remainder to string and prepend to result\n        for (int i = 0; i < vector_length; ++i) {\n            if (svptest_any(pg, svcmpeq_n_s64(pg, sv_x, 0))) {\n                result = std::to_string(svget1_s64(pg, sv_remainder)) + result;\n            }\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstdint>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n\n    const int max_digits = 64;\n    char result[max_digits];\n    int index = max_digits - 1;\n    result[index] = '\\0';\n    index--;\n\n    svbool_t pg = svwhilelt_b64(index, 0);\n    svint64_t sv_x = svdup_n_s64(x);\n    svint64_t sv_base = svdup_n_s64(base);\n\n    while (svptest_any(pg)) {\n        svint64_t sv_quotient = svdiv_x(pg, sv_x, sv_base);\n        svint64_t sv_remainder = svmls_x(pg, sv_x, sv_base, sv_quotient);\n\n        sv_x = sv_quotient;\n\n        svuint8_t sv_digit = svadd_n_u8(pg, svreinterpret_u8(sv_remainder), '0');\n        svst1_u8(pg, &result[index], sv_digit);\n\n        index -= svcntp_b64(pg);\n        pg = svwhilelt_b64(index, 0);\n    }\n\n    return std::string(&result[index + 1]);\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstdint>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x = x / base;\n        result = std::to_string(remainder) + result;\n    }\n\n    // Use SVE to process the result string in parallel\n    const int vector_length = svcntw();\n    svbool_t pg = svwhilelt_b64(0, vector_length);\n\n    svint8_t sv_result = svdup_n_s8('0');\n    for (size_t i = 0; i < result.size(); i += vector_length) {\n        size_t chunk_size = std::min(vector_length, static_cast<int>(result.size() - i));\n        svbool_t pg_chunk = svwhilelt_b64(0, chunk_size);\n\n        svint8_t sv_chunk = svld1(pg_chunk, reinterpret_cast<const int8_t*>(&result[i]));\n        sv_result = svsel_s8(pg_chunk, sv_chunk, sv_result);\n    }\n\n    // Convert the SVE result back to a string\n    for (size_t i = 0; i < result.size(); i++) {\n        result[i] = svget1_s8(sv_result, i);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstdint>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n\n    const int max_digits = 64;\n    char result[max_digits];\n    int index = max_digits - 1;\n    result[index] = '\\0';\n\n    svbool_t pg = svwhilelt_b64(0, max_digits);\n    svint64_t sv_x = svdup_n_s64(x);\n    svint64_t sv_base = svdup_n_s64(base);\n    svint64_t sv_digits = svdup_n_s64(0);\n\n    while (svptest_any(pg, svcmpeq_n_s64(pg, sv_x, 0))) {\n        svint64_t sv_rem = svrem_n_s64_z(pg, sv_x, base);\n        sv_x = svdiv_n_s64_z(pg, sv_x, base);\n        sv_digits = svadd_n_s64_z(pg, sv_digits, svlsl_n_s64(pg, sv_rem, index - svcntw()));\n        index--;\n    }\n\n    for (int i = index + 1; i < max_digits; ++i) {\n        result[i] = '0' + sv_digits[i];\n    }\n\n    return std::string(result + index + 1);\n}\n```"}
{"task_id": "SimdBench_85_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstdint>\n\nstd::string change_base_simd(int64_t x, int8_t base) {\n    if (base < 2 || base > 9) return \"\";\n\n    std::string result = \"\";\n    while (x > 0) {\n        int64_t remainder = x % base;\n        x = x / base;\n        result = std::to_string(remainder) + result;\n    }\n    return result;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    size_t length = text.length();\n    if (length == 0) return true;\n\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint8_t vec = svld1_u8(pg, text.data());\n    svuint8_t rev_vec = svrev_u8_x4(pg, vec);\n\n    svbool_t cmp = svcmpeq_u8(pg, vec, rev_vec);\n    return svptest_any(pg, cmp);\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    const char* str = text.c_str();\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        size_t chunk_size = j - i + 1;\n        svbool_t pg = svwhilelt_b32(i, j);\n\n        svuint8_t vi = svld1_u8(pg, &str[i]);\n        svuint8_t vj = svld1_u8(pg, &str[j - chunk_size + 1]);\n\n        svbool_t pne = svcmpne_n_u8(pg, vi, vj);\n\n        if (svptest_any(pg, pne)) {\n            return false;\n        }\n\n        i += svcntp_b32(pg);\n        j -= svcntp_b32(pg);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    const char* str = text.c_str();\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        size_t chunk_size = j - i + 1;\n        svbool_t pg = svwhilelt_b32(i, j);\n\n        svuint8_t sv_i = svdup_u8(str[i]);\n        svuint8_t sv_j = svdup_u8(str[j]);\n\n        svbool_t cmp = svcmpeq_u8(pg, sv_i, sv_j);\n\n        if (!svptest_any(pg, cmp)) {\n            return false;\n        }\n\n        i++;\n        j--;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    const char* str = text.c_str();\n    size_t i = 0;\n    size_t j = len - 1;\n\n    while (i < j) {\n        size_t chunk_size = svcntw();\n        size_t remaining = j - i + 1;\n        size_t chunks = remaining / chunk_size;\n\n        for (size_t k = 0; k < chunks; ++k) {\n            svbool_t pg = svwhilelt_b32(i, j);\n            svuint8_t vi = svld1_u8(pg, &str[i]);\n            svuint8_t vj = svld1_u8(pg, &str[j - chunk_size + 1]);\n            svuint8_t vrev_j = svrev_u8_x(pg, vj);\n\n            svbool_t pne = svcmpne_n_u8(pg, vi, vrev_j);\n            if (svptest_any(pg, pne)) {\n                return false;\n            }\n\n            i += chunk_size;\n            j -= chunk_size;\n        }\n\n        size_t remaining_chars = remaining % chunk_size;\n        if (remaining_chars > 0) {\n            for (size_t k = 0; k < remaining_chars; ++k) {\n                if (str[i + k] != str[j - k]) {\n                    return false;\n                }\n            }\n            i += remaining_chars;\n            j -= remaining_chars;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_86_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool is_palindrome_simd(std::string text) {\n    size_t len = text.length();\n    if (len == 0) return true;\n\n    svbool_t pg = svwhilelt_b64(0, (int64_t)len);\n    svuint8_t sv_text = svld1(pg, (uint8_t*)text.data());\n    svuint8_t sv_rev_text = svrev_u8_x(pg, sv_text);\n\n    svbool_t cmp = svcmpeq(pg, sv_text, sv_rev_text);\n    return svptest_any(pg, cmp);\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), '\\0');\n    size_t i = 0;\n\n    while (i < s.length()) {\n        svbool_t pg = svwhilelt_b32(i, s.length());\n        svuint8_t sv_s = svld1_u8(pg, &s[i]);\n        svuint8_t sv_decoded = svsub_n_u8_x(pg, sv_s, 5);\n        svuint8_t sv_adjusted = svadd_n_u8_x(pg, sv_decoded, 'a');\n        svuint8_t sv_mod = svmod_u8(pg, sv_adjusted, 26);\n        svuint8_t sv_final = svadd_n_u8_x(pg, sv_mod, 'a');\n        svst1_u8(pg, &out[i], sv_final);\n        i += svcntw();\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), '\\0');\n    size_t i = 0;\n    size_t vl = svcntw();\n\n    for (; i <= s.length() - vl; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, s.length());\n        svuint8_t chars = svld1_u8(pg, &s[i]);\n        svuint8_t decoded = svsub_n_u8_x(pg, chars, 5);\n        svuint8_t adjusted = svadd_n_u8_x(pg, decoded, 'a');\n        svuint8_t mod = svmod_n_u8_x(pg, adjusted, 26);\n        svst1_u8(pg, &out[i], mod);\n    }\n\n    for (; i < s.length(); ++i) {\n        int w = ((int)s[i] - 5 - (int)'a') % 26 + (int)'a';\n        out[i] = (char)w;\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    size_t i = 0;\n    size_t vector_length = svcntw();\n\n    for (; i <= s.length() - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, s.length());\n\n        svuint8_t chars = svld1_u8(pg, &s[i]);\n        svuint8_t decoded = svsub_n_u8_x(pg, chars, 5);\n\n        svuint8_t base_a = svdup_n_u8('a');\n        svuint8_t adjusted = svsub_u8_x(pg, decoded, base_a);\n        svuint8_t mod_26 = svmod_u8_x(pg, adjusted, 26);\n        svuint8_t final = svadd_u8_x(pg, mod_26, base_a);\n\n        svst1_u8(pg, &out[i], final);\n    }\n\n    for (; i < s.length(); ++i) {\n        int w = ((int)s[i] - 5 - (int)'a') % 26 + (int)'a';\n        out[i] = (char)w;\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), ' ');\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b64(i, s.length());\n\n    svuint8_t encoded_chars = svld1_u8(pg, (uint8_t*)s.data() + i);\n    svuint8_t decoded_chars = svsub_n_u8_x(pg, encoded_chars, 5);\n\n    svuint8_t base_a = svdup_n_u8('a');\n    svuint8_t mod_26 = svmod_u8_x(pg, svsub_u8_x(pg, decoded_chars, base_a), 26);\n    svuint8_t result_chars = svadd_u8_x(pg, mod_26, base_a);\n\n    svst1_u8(pg, (uint8_t*)out.data() + i, result_chars);\n    i += svcntw();\n\n    while (svptest_any(pg)) {\n        pg = svwhilelt_b64(i, s.length());\n\n        encoded_chars = svld1_u8(pg, (uint8_t*)s.data() + i);\n        decoded_chars = svsub_n_u8_x(pg, encoded_chars, 5);\n\n        mod_26 = svmod_u8_x(pg, svsub_u8_x(pg, decoded_chars, base_a), 26);\n        result_chars = svadd_u8_x(pg, mod_26, base_a);\n\n        svst1_u8(pg, (uint8_t*)out.data() + i, result_chars);\n        i += svcntw();\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_87_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string decode_shift_simd(std::string s) {\n    std::string out(s.length(), '\\0');\n    const int vector_length = svcntw();\n    const int shift = 5;\n\n    for (size_t i = 0; i < s.length(); i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, s.length());\n\n        svuint8_t vec_in = svld1_u8(pg, &s[i]);\n        svuint8_t vec_out = svsub_n_u8_x(pg, vec_in, shift);\n\n        svuint8_t vec_base = svdup_n_u8('a');\n        svuint8_t vec_mod = svlsl_n_u8_x(pg, svsub_x(pg, vec_out, vec_base), 26);\n        vec_out = svadd_x(pg, vec_mod, vec_base);\n\n        svst1_u8(pg, &out[i], vec_out);\n    }\n\n    return out;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    int n = l.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vt = svdup_n_s32(t);\n    svint32_t vl = svld1(pg, l.data());\n    svbool_t cmp = svcmplt(pg, vl, vt);\n    return svptest_any(pg, cmp);\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    int n = l.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vt = svdup_n_s32(t);\n    svint32_t vl = svld1(pg, l.data());\n    svbool_t p = svcmplt(pg, vl, vt);\n    return svptest_any(svptrue_b32(), p);\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t n = l.size();\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svint32_t vt = svdup_n_s32(t);\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svint32_t vl = svld1(pg, &l[i]);\n        svbool_t p = svcmplt(pg, vl, vt);\n        if (svptest_any(pg, svnot_z(pg, p))) {\n            return false;\n        }\n    }\n    return true;\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    svbool_t pg = svwhilelt_b64_s64(0, l.size());\n    svint32_t vt = svdup_n_s32(t);\n    svint32_t vl;\n    int i = 0;\n\n    while (svptest_any(pg)) {\n        svint32_t v = svld1_gather_u32index_s32(pg, &l[i], svindex_s64(0, 1));\n        vl = svmax_s32_x(pg, vl, v);\n        i += svcntp_b64(pg);\n        pg = svwhilelt_b64_s64(i, l.size());\n    }\n\n    return svptest_any(svcmplt_s32(pg, vl, vt));\n}\n```"}
{"task_id": "SimdBench_88_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool below_threshold_simd(std::vector<int> l, int t) {\n    size_t vector_length = svcntw();\n    size_t i;\n    bool all_below_threshold = true;\n\n    for (i = 0; i <= l.size() - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, static_cast<int>(l.size()));\n        svint32_t v = svld1_s32(pg, &l[i]);\n        svint32_t vt = svdup_n_s32(t);\n        svbool_t cmp = svcmplt_s32(pg, v, vt);\n        if (!svptest_any(pg, cmp)) {\n            all_below_threshold = false;\n            break;\n        }\n    }\n\n    for (; i < l.size(); ++i) {\n        if (l[i] >= t) {\n            all_below_threshold = false;\n            break;\n        }\n    }\n\n    return all_below_threshold;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    int balance = 0;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= brackets.size(); i += vector_length) {\n        svbool_t pg = svwhilelt_b64(i, brackets.size());\n        svuint8_t chars = svld1_u8(pg, &brackets[i]);\n\n        svbool_t is_open = svcmpne_n_u8(pg, chars, '<');\n        svbool_t is_close = svcmpne_n_u8(pg, chars, '>');\n\n        int open_count = svcntp_b64(pg, is_open);\n        int close_count = svcntp_b64(pg, is_close);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) return false;\n    }\n\n    for (; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++balance;\n        } else if (brackets[i] == '>') {\n            --balance;\n        }\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0) return true;\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    constexpr size_t vector_length = svcntw();\n\n    int balance = 0;\n    for (size_t i = 0; i < len; i += vector_length) {\n        svbool_t pg_local = svwhilelt_b64(i, svmin_u64(i + vector_length, len));\n\n        svuint8_t chars = svld1_u8(pg_local, &brackets[i]);\n        svbool_t is_open = svcmpne_n_u8(pg_local, chars, '<');\n        svbool_t is_close = svcmpne_n_u8(pg_local, chars, '>');\n\n        int open_count = svcntp_b64(pg_local, is_open);\n        int close_count = svcntp_b64(pg_local, is_close);\n\n        balance += open_count - close_count;\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    const char* str = brackets.c_str();\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_str = svld1_u8(pg, str);\n\n    svint8_t sv_open = svcmpne_n_u8(pg, sv_str, '<');\n    svint8_t sv_close = svcmpne_n_u8(pg, sv_str, '>');\n\n    int open_count = svcntp_b64(svptrue_b64(), sv_open);\n    int close_count = svcntp_b64(svptrue_b64(), sv_close);\n\n    return open_count == close_count;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    int balance = 0;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i <= brackets.size() - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, brackets.size());\n        svuint8_t chars = svld1_u8(pg, &brackets[i]);\n\n        svbool_t is_open = svcmpne_n_u8(pg, chars, '<');\n        svbool_t is_close = svcmpne_n_u8(pg, chars, '>');\n\n        int open_count = svcntp_b32(pg, is_open);\n        int close_count = svcntp_b32(pg, is_close);\n\n        balance += open_count - close_count;\n\n        if (balance < 0) return false;\n    }\n\n    for (; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++balance;\n        } else if (brackets[i] == '>') {\n            --balance;\n        }\n        if (balance < 0) return false;\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_89_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0) return true;\n\n    constexpr size_t vector_length = svcntw();\n    size_t i = 0;\n    int balance = 0;\n\n    for (; i <= len - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svint8_t chars = svld1_s8(pg, &brackets[i]);\n\n        svint8_t open = svcmpne_n_s8(pg, chars, '<');\n        svint8_t close = svcmpne_n_s8(pg, chars, '>');\n\n        int open_count = svcntp_b32(pg, open);\n        int close_count = svcntp_b32(pg, close);\n\n        balance += open_count - close_count;\n        if (balance < 0) return false;\n    }\n\n    for (; i < len; ++i) {\n        if (brackets[i] == '<') {\n            ++balance;\n        } else if (brackets[i] == '>') {\n            --balance;\n            if (balance < 0) return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0 || len % svcntb() != 0) {\n        return false;\n    }\n\n    constexpr size_t vector_length = 128; // Example vector length\n    svbool_t pg = svwhilelt_b64(0, len);\n    svint8_t vec = svld1_s8(pg, brackets.data());\n\n    svint8_t open_bracket = svdup_n_s8('(');\n    svint8_t close_bracket = svdup_n_s8(')');\n\n    svint8_t open_count = svcmpne_s8(pg, vec, open_bracket);\n    svint8_t close_count = svcmpne_s8(pg, vec, close_bracket);\n\n    int32_t total_open = svaddv_s32(svpmul_s32(svreinterpret_s32(open_count), svdup_n_s32(1)));\n    int32_t total_close = svaddv_s32(svpmul_s32(svreinterpret_s32(close_count), svdup_n_s32(1)));\n\n    return total_open == total_close;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0) return true;\n\n    svbool_t pg = svwhilelt_b32(0, (int32_t)len);\n    svint8_t vec = svld1_s8(pg, (int8_t*)brackets.c_str());\n\n    svint8_t open = svdup_n_s8('(');\n    svint8_t close = svdup_n_s8(')');\n\n    svint32_t balance = svcreate1_s32(0);\n\n    while (svptest_any(pg, pg)) {\n        svint8_t eq_open = sveor_z(svptrue_b8(), open, vec);\n        svint8_t eq_close = sveor_z(svptrue_b8(), close, vec);\n\n        svint32_t open_count = svcntp_b8(svptrue_b8(), eq_open);\n        svint32_t close_count = svcntp_b8(svptrue_b8(), eq_close);\n\n        balance = svadd_s32_x(pg, balance, open_count);\n        balance = svsub_s32_x(pg, balance, close_count);\n\n        if (svminv_s32(pg, balance) < 0) return false;\n\n        vec = svld1_s8(pg, (int8_t*)brackets.c_str() + svcntp_b32(pg, pg));\n    }\n\n    return svminv_s32(svptrue_b32(), balance) == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0) return true;\n\n    svbool_t pg = svwhilelt_b32(0, (int32_t)len);\n    svint8_t open = svdup_n_s8(0, pg);\n    svint8_t close = svdup_n_s8(0, pg);\n\n    for (size_t i = 0; i < len; i += svcntw()) {\n        svbool_t pf = svwhilelt_b32(i, (int32_t)(i + svcntw()));\n        svint8_t chunk = svld1(pf, (int8_t *)&brackets[i]);\n\n        open = svadd_s8_z(pf, open, svcmpne_n_s8(pf, chunk, ')'));\n        close = svadd_s8_z(pf, close, svcmpne_n_s8(pf, chunk, '('));\n\n        if (svptest_any(pf, svcmplt_s8(pf, open, close))) {\n            return false;\n        }\n    }\n\n    return svaddv_s32(svptrue_b32(), svcvt_s32_s8_z(svptrue_b32(), open)) == svaddv_s32(svptrue_b32(), svcvt_s32_s8_z(svptrue_b32(), close));\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0) return true;\n\n    constexpr size_t vector_length = svcntw();\n    size_t i = 0;\n    int balance = 0;\n\n    for (; i <= len - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b64(i, len);\n        svint8_t vec = svld1_s8(pg, (int8_t*)brackets.data() + i);\n\n        svint8_t open = svcmpne_n_s8(pg, vec, ')');\n        svint8_t close = svcmpne_n_s8(pg, vec, '(');\n\n        int open_count = svcntp_b64(pg, open);\n        int close_count = svcntp_b64(pg, close);\n\n        balance += open_count - close_count;\n        if (balance < 0) return false;\n    }\n\n    for (; i < len; ++i) {\n        if (brackets[i] == '(') {\n            ++balance;\n        } else if (brackets[i] == ')') {\n            --balance;\n            if (balance < 0) return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_90_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool correct_bracketing_simd(std::string brackets) {\n    size_t len = brackets.length();\n    if (len == 0) return true;\n\n    constexpr size_t vector_length = svcntw();\n    size_t i = 0;\n    int balance = 0;\n\n    for (; i <= len - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, len);\n        svint8_t vec = svld1_s8(pg, &brackets[i]);\n\n        svint8_t open = svdup_n_s8('(');\n        svint8_t close = svdup_n_s8(')');\n\n        svint8_t open_mask = sveor_m(pg, open, vec);\n        svint8_t close_mask = sveor_m(pg, close, vec);\n\n        int open_count = svcntp_b8(pg, open_mask);\n        int close_count = svcntp_b8(pg, close_mask);\n\n        balance += open_count - close_count;\n        if (balance < 0) return false;\n    }\n\n    for (; i < len; ++i) {\n        if (brackets[i] == '(') {\n            ++balance;\n        } else if (brackets[i] == ')') {\n            --balance;\n            if (balance < 0) return false;\n        }\n    }\n\n    return balance == 0;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size() - 1;\n    std::vector<float> result(n);\n\n    svfloat32_t vg, vn;\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    int i = 0;\n    do {\n        svfloat32_t coeff = svld1(pg, &xs[i]);\n        vn = svindex_s32(i, 1);\n        vg = svdup_f32(1.0f);\n        svfloat32_t derivative = svmla_f32_x(pg, coeff, vn, vg);\n        svst1(pg, &result[i], derivative);\n        i += svcntp_b32(pg);\n        pg = svwhilelt_b32(i, n);\n    } while (svptest_any(pg));\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size() - 1;\n    std::vector<float> result(n);\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t vx = svld1_f64(pg, &xs[1]);\n    svfloat64_t vn = svindex_f64(1, 1);\n    svfloat64_t vres = svmul_f64_x(pg, vx, vn);\n    svst1_f64(pg, &result[0], vres);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size() - 1;\n    std::vector<float> result(n);\n\n    svfloat32_t vg, vn;\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    int i = 0;\n    do {\n        svfloat32_t coeff = svld1(pg, &xs[i]);\n        vn = svindex_s32(i, 1);\n        vg = svdup_f32(1.0f);\n        svfloat32_t power = svpow_f32(vn, vg);\n        svfloat32_t derivative = svmul_f32(coeff, power);\n        svst1(pg, &result[i], derivative);\n        i += svcntp_b32(pg);\n        pg = svwhilelt_b32(i, n);\n    } while (svptest_any(pg));\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size();\n    std::vector<float> result(n - 1);\n\n    svbool_t pg = svwhilelt_b64(0, n - 1);\n    svfloat64_t vx = svld1_f64(pg, &xs[0]);\n    svfloat64_t vr = svmul_x(pg, vx, svindex_s64(0, 1));\n\n    svst1_f64(pg, &result[0], vr);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_91_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<float> derivative_simd(std::vector<float> xs) {\n    size_t n = xs.size() - 1;\n    std::vector<float> result(n);\n\n    svfloat32_t vg, vn;\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    int i = 0;\n    do {\n        svfloat32_t coeff = svld1(pg, &xs[i]);\n        vn = svindex_s32(i, 1);\n        vg = svdup_f32(1.0f);\n        svfloat32_t power = svdup_f32(1.0f);\n\n        for (int j = 1; j <= i; j++) {\n            power = svmul_f32_x(pg, power, vn);\n        }\n\n        svfloat32_t derivative = svmul_f32_x(pg, coeff, power);\n        svst1(pg, &result[i], derivative);\n\n        i += svcntd();\n        pg = svwhilelt_b32(i, n);\n    } while (svptest_any(svptrue_b32(), pg));\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cctype>\n\nint vowels_count_simd(std::string s) {\n    const char *str = s.c_str();\n    size_t len = s.length();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_str = svld1_u8(pg, (uint8_t *)str);\n\n    svbool_t is_vowel = svcmpne_n_u8(pg, sv_str, 'a') & svcmpne_n_u8(pg, sv_str, 'e') &\n                        svcmpne_n_u8(pg, sv_str, 'i') & svcmpne_n_u8(pg, sv_str, 'o') &\n                        svcmpne_n_u8(pg, sv_str, 'u');\n\n    svbool_t is_y = svcmpne_n_u8(pg, sv_str, 'y');\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y') {\n        is_vowel = svorr_z(pg, is_vowel, is_y);\n    }\n\n    count = svcntp_b64(pg, is_vowel);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cctype>\n\nint vowels_count_simd(std::string s) {\n    int count = 0;\n    size_t len = s.length();\n    svbool_t pg = svwhilelt_b32(0, len);\n\n    svuint8_t sv_s = svld1_u8(pg, (uint8_t*)s.c_str());\n    svuint8_t sv_vowels = svdup_n_u8(0);\n\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'a'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'e'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'i'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'o'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'u'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'A'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'E'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'I'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'O'));\n    sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, 'U'));\n\n    if (s.back() == 'y' || s.back() == 'Y') {\n        sv_vowels = svorr_n_u8_z(sv_vowels, svcmpne_n_u8(pg, sv_s, s.back()));\n    }\n\n    count = svcntp_b32(pg, sv_vowels);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <algorithm>\n\nint vowels_count_simd(std::string s) {\n    size_t len = s.length();\n    const char *str = s.c_str();\n\n    svbool_t pg = svwhilelt_b8(0, len);\n    svuint8_t sv_str = svld1_u8(pg, str);\n\n    svbool_t is_vowel = svcmpne_n_u8(pg, sv_str, 'a') &\n                        svcmpne_n_u8(pg, sv_str, 'e') &\n                        svcmpne_n_u8(pg, sv_str, 'i') &\n                        svcmpne_n_u8(pg, sv_str, 'o') &\n                        svcmpne_n_u8(pg, sv_str, 'u') &\n                        svcmpne_n_u8(pg, sv_str, 'A') &\n                        svcmpne_n_u8(pg, sv_str, 'E') &\n                        svcmpne_n_u8(pg, sv_str, 'I') &\n                        svcmpne_n_u8(pg, sv_str, 'O') &\n                        svcmpne_n_u8(pg, sv_str, 'U');\n\n    int count = svcntp_b8(pg, is_vowel);\n\n    if (s.back() == 'y' || s.back() == 'Y') {\n        count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <algorithm>\n\nint vowels_count_simd(std::string s) {\n    size_t len = s.length();\n    const char *str = s.c_str();\n\n    svbool_t pg = svwhilelt_b8(0, (int8_t)len);\n    svuint8_t sv_str = svld1_u8(pg, (const uint8_t *)str);\n\n    svbool_t is_vowel = svcmpne_n_u8(pg, sv_str, 'a') &\n                        svcmpne_n_u8(pg, sv_str, 'e') &\n                        svcmpne_n_u8(pg, sv_str, 'i') &\n                        svcmpne_n_u8(pg, sv_str, 'o') &\n                        svcmpne_n_u8(pg, sv_str, 'u') &\n                        svcmpne_n_u8(pg, sv_str, 'A') &\n                        svcmpne_n_u8(pg, sv_str, 'E') &\n                        svcmpne_n_u8(pg, sv_str, 'I') &\n                        svcmpne_n_u8(pg, sv_str, 'O') &\n                        svcmpne_n_u8(pg, sv_str, 'U');\n\n    int count = svcntp_b8(pg, is_vowel);\n\n    if (len > 0 && (s[len - 1] == 'y' || s[len - 1] == 'Y')) {\n        count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_92_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <iostream>\n\nint vowels_count_simd(std::string s) {\n    const char *str = s.c_str();\n    size_t len = s.length();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t vowels = svdup_n_u8(0);\n    vowels = svorr_n_u8_x(pg, vowels, 'a');\n    vowels = svorr_n_u8_x(pg, vowels, 'e');\n    vowels = svorr_n_u8_x(pg, vowels, 'i');\n    vowels = svorr_n_u8_x(pg, vowels, 'o');\n    vowels = svorr_n_u8_x(pg, vowels, 'u');\n    vowels = svorr_n_u8_x(pg, vowels, 'A');\n    vowels = svorr_n_u8_x(pg, vowels, 'E');\n    vowels = svorr_n_u8_x(pg, vowels, 'I');\n    vowels = svorr_n_u8_x(pg, vowels, 'O');\n    vowels = svorr_n_u8_x(pg, vowels, 'U');\n\n    for (size_t i = 0; i < len; i += svcntw()) {\n        svbool_t pg = svwhilelt_b64(i, len);\n        svuint8_t chunk = svld1_u8(pg, &str[i]);\n        svbool_t is_vowel = svcmpne_n_u8(pg, chunk, 0);\n        is_vowel = svand_z(pg, is_vowel, svcmpeq_n_u8(pg, svand_z(pg, chunk, vowels), chunk));\n        count += svcntp_b64(pg, is_vowel);\n    }\n\n    if (s.back() == 'y' || s.back() == 'Y') {\n        count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint digitSum_simd(std::string s) {\n    int sum = 0;\n    size_t len = s.length();\n    const char* str = s.c_str();\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_chars = svld1_u8(pg, (uint8_t*)str);\n\n    svbool_t is_upper = svcmpge_n_u8(pg, sv_chars, 'A') & svcmple_n_u8(pg, sv_chars, 'Z');\n    svuint8_t upper_chars = svsel_u8(is_upper, sv_chars, svdup_n_u8(0));\n\n    svint32_t ascii_sums = svpmull_n_u32(svpmull_n_u8(upper_chars, 1), 1);\n    sum = svaddv_n_u32(pg, ascii_sums);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <string>\n\nint digitSum_simd(std::string s) {\n    int sum = 0;\n    size_t len = s.length();\n    const char* str = s.c_str();\n\n    svbool_t pg = svwhilelt_b8(0, len);\n    svuint8_t vec = svld1_u8(pg, str);\n\n    svbool_t p_upper = svcmpge_n_u8(pg, vec, 'A') & svcmpge_n_u8(pg, 'Z', vec);\n    svuint8_t upper_chars = svsel_u8(p_upper, vec, svdup_n_u8(0));\n\n    sum = svaddv_n_u32(pg, svcvt_u32_u8(upper_chars));\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nint digitSum_simd(std::string s) {\n    int sum = 0;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i <= s.size() - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b8(i, s.size());\n        svuint8_t v = svld1_u8(pg, &s[i]);\n        svuint8_t upper = svcmpge_n_u8(pg, v, 'A');\n        svuint8_t lower = svcmpgt_n_u8(pg, 'Z', v);\n        svbool_t is_upper = svand_z(pg, upper, lower);\n        svuint8_t ascii_values = svadd_n_u8_z(is_upper, v, 0);\n        sum += svaddv_u32(svpmull_n_u32_z(is_upper, ascii_values, 0));\n    }\n\n    for (; i < s.size(); ++i) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint digitSum_simd(std::string s) {\n    size_t len = s.length();\n    const char* str = s.c_str();\n    int sum = 0;\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t v = svld1_u8(pg, (uint8_t*)str);\n\n    svbool_t p = svcmpge_n_u8(pg, v, 'A') & svcmpge_n_u8(pg, 'Z', v);\n    svuint8_t upper = svsel_u8(p, v, svdup_n_u8(0));\n\n    sum = svaddv_n_u32(pg, svcvt_u32_f32(svcvt_f32_u8(upper)));\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_93_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint digitSum_simd(std::string s) {\n    size_t len = s.length();\n    const char* str = s.c_str();\n    int sum = 0;\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_chars = svld1_u8(pg, (uint8_t*)str);\n\n    svbool_t is_upper = svcmpge_n_u8(pg, sv_chars, 'A') & svcmple_n_u8(pg, sv_chars, 'Z');\n    svuint8_t upper_chars = svsel_u8(is_upper, sv_chars, svdup_n_u8(0));\n\n    sum = svaddv_n_u32(pg, svasr_n_u32_x(pg, svreinterpret_u32_u8(upper_chars), 0));\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    size_t n = arr.size();\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n\n    size_t vl = svcntw();\n    size_t i = 0;\n\n    for (; i <= n - vl; i += vl) {\n        svbool_t pg = svwhilelt_b64(i, n);\n        svint32_t v = svld1_s32(pg, &arr[i]);\n        svint32_t even_mask = svand_n_s32_x(pg, v, 1);\n        svbool_t even_pg = sveor_m(pg, even_mask, svdup_n_s32(0));\n\n        int32_t min_val = svminv_s32(even_pg, v);\n        if (min_val < smallest_value) {\n            smallest_value = min_val;\n            smallest_index = i + svmin_index_s32(even_pg, v);\n        }\n    }\n\n    for (; i < n; ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_value) {\n            smallest_value = arr[i];\n            smallest_index = i;\n        }\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_value, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    size_t n = arr.size();\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t indices = svindex_s32(0, 1);\n\n    while (svptest_any(pg)) {\n        svint32_t even_mask = svcmpge_n_s32(pg, v, 0);\n        svint32_t even_values = svsel_s32(even_mask, v, svdup_n_s32(-1));\n\n        svint32_t min_even = svmin_s32_x(pg, even_values, even_values);\n        int min_even_value = svminv_s32(pg, min_even);\n\n        if (min_even_value < smallest_value && min_even_value != -1) {\n            smallest_value = min_even_value;\n            smallest_index = svminv_u32(pg, svmin_u32_x(pg, svadd_s32_x(pg, indices, svdup_n_s32(0)), svdup_n_u32(UINT32_MAX)));\n        }\n\n        pg = svwhilelt_b64(svcntp_b64(pg), n);\n        v = svld1_s32(pg, &arr[svcntp_b64(pg)]);\n        indices = svadd_s32_x(pg, indices, svdup_n_s32(svcntp_b64(pg)));\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_value, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    int smallest_even = INT_MAX;\n    int smallest_index = -1;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= arr.size(); i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, arr.size());\n        svint32_t v = svld1_s32(pg, &arr[i]);\n\n        svint32_t even_mask = svcmpne_n_s32(pg, svand_n_s32_z(pg, v, 1), 0);\n        svint32_t min_even = svmin_s32_x(pg, svsel_s32(even_mask, v, svdup_n_s32(INT_MAX)));\n\n        int temp_min_even = svminv_s32(pg, min_even);\n        if (temp_min_even < smallest_even) {\n            smallest_even = temp_min_even;\n            smallest_index = i + svmin_index(min_even);\n        }\n    }\n\n    for (; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_even, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    int smallest_even = INT_MAX;\n    int smallest_index = -1;\n    svbool_t pg = svwhilelt_b32(0, arr.size());\n\n    svint32_t v = svld1_s32(pg, arr.data());\n    svint32_t even_mask = svcmpne_n_s32(pg, svand_n_s32(pg, v, 1), 0);\n\n    while (svptest_any(pg, svcmpeq_n_s32(pg, svmin_s32_x(pg, v), smallest_even))) {\n        int idx = svmin_index_s32(pg, v);\n        if (arr[idx] % 2 == 0 && (arr[idx] < smallest_even || (arr[idx] == smallest_even && idx < smallest_index))) {\n            smallest_even = arr[idx];\n            smallest_index = idx;\n        }\n        pg = svwhilelt_b32(idx + svcntp_b32(pg), arr.size());\n        v = svld1_s32(pg, arr.data() + idx + svcntp_b32(pg));\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_even, smallest_index};\n}\n```"}
{"task_id": "SimdBench_94_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> pluck_simd(std::vector<int> arr) {\n    if (arr.empty()) return {};\n\n    size_t n = arr.size();\n    int smallest_even = INT_MAX;\n    int smallest_index = -1;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t indices = svindex_s32(0, 1);\n\n    svint32_t even_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v, 1), 0);\n    svint32_t even_values = svsel_s32(even_mask, v, svdup_n_s32(INT_MAX));\n\n    svint32_t min_even = svmin_s32_x(pg, even_values);\n    int min_even_scalar = svminv_s32(pg, min_even);\n\n    while (svptest_any(pg, svcmplt_s32(pg, min_even_scalar, smallest_even))) {\n        smallest_even = min_even_scalar;\n        svint32_t min_indices = svsel_s32(svcmpeq_s32(pg, even_values, smallest_even), indices, svdup_n_s32(INT_MAX));\n        smallest_index = svminv_s32(pg, min_indices);\n\n        pg = svwhilelt_b32(smallest_index + 1, n);\n        v = svld1_s32(pg, &arr[smallest_index + 1]);\n        indices = svindex_s32(smallest_index + 1, 1);\n\n        even_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v, 1), 0);\n        even_values = svsel_s32(even_mask, v, svdup_n_s32(INT_MAX));\n        min_even = svmin_s32_x(pg, even_values);\n        min_even_scalar = svminv_s32(pg, min_even);\n    }\n\n    if (smallest_index == -1) return {};\n    return {smallest_even, smallest_index};\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    int max_value = -1;\n    int n = lst.size();\n\n    // Determine the vector length for SVE\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v_lst = svld1_s32(pg, &lst[0]);\n\n    // Count the frequency of each element\n    for (int i = 0; i < n; i++) {\n        int current = lst[i];\n        svint32_t v_current = svdup_n_s32(current);\n        svbool_t p_true = svcmpne_s32(pg, v_lst, v_current);\n        int count = svcntp_b64(pg, p_true);\n\n        if (count >= current) {\n            max_value = std::max(max_value, current);\n        }\n    }\n\n    return max_value;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    int max_value = -1;\n    int n = lst.size();\n\n    // Determine the vector length\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n\n    // Count occurrences of each element\n    for (int i = 0; i < n; i++) {\n        int current = lst[i];\n        int count = std::count(lst.begin(), lst.end(), current);\n\n        if (count >= current && current > max_value) {\n            max_value = current;\n        }\n    }\n\n    return max_value;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    int max_freq = -1;\n    int n = lst.size();\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n\n    svint32_t max_val = svdup_n_s32(-1);\n    svint32_t freq = svdup_n_s32(0);\n\n    do {\n        svint32_t count = svdup_n_s32(0);\n        svint32_t current = svdup_s32(v);\n\n        svbool_t pf = svwhilelt_b64(0, n);\n        do {\n            svint32_t eq = sveor_z(svptrue_b32(), svext(current, v, pf), svext(v, current, pf));\n            count = svadd_s32_x(pg, count, eq);\n        } while (svptest_any(pg, pf));\n\n        svbool_t pf_max = svcmpge_s32(pg, count, current);\n        max_val = svsel_s32(pf_max, current, max_val);\n        freq = svsel_s32(pf_max, count, freq);\n    } while (svptest_any(pg, pg));\n\n    max_freq = svmaxv_s32(pg, max_val);\n\n    if (max_freq == -1 || svcntp_b64(pg, svcmpgt_s32(pg, freq, max_freq)) == 0) {\n        return -1;\n    }\n\n    return max_freq;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    int max_freq = -1;\n    int n = lst.size();\n\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n\n    svint32_t max_val = svdup_n_s32(-1);\n    svint32_t freq = svdup_n_s32(0);\n\n    for (int i = 0; i < n; i += svcntw()) {\n        svint32_t current = svld1(pg, &lst[i]);\n        svint32_t count = svdup_n_s32(0);\n\n        for (int j = 0; j < n; j += svcntw()) {\n            svint32_t compare = svld1(pg, &lst[j]);\n            count = svadd_s32_x(pg, count, sveor_m(pg, sveq_m(pg, current, compare), svdup_n_s32(1)));\n        }\n\n        svbool_t mask = svcmpeq_s32(pg, count, current);\n        svint32_t temp_max = svmax_s32_x(pg, max_val, svsel_s32(mask, current, max_val));\n        max_val = svmax_s32_x(pg, max_val, temp_max);\n    }\n\n    max_freq = svmaxv_s32(pg, max_val);\n\n    return max_freq;\n}\n```"}
{"task_id": "SimdBench_95_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nint search_simd(std::vector<int> lst) {\n    int max_freq = -1;\n    int n = lst.size();\n\n    // Find the maximum value in the vector\n    int max_val = *std::max_element(lst.begin(), lst.end());\n\n    // Create a frequency array\n    std::vector<int> freq(max_val + 1, 0);\n\n    // Count frequencies using SVE\n    for (int i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v = svld1_s32(pg, &lst[i]);\n        svint32_t inc = svdup_n_s32(1);\n        svint32_t indices = svadd_n_u32_x(pg, svindex_u32(0, 1), i);\n        svst1_s32(pg, &freq[0], svadd_s32_x(pg, svld1_gather_s32index_s32(pg, &freq[0], indices), inc));\n    }\n\n    // Find the greatest integer that meets the criteria\n    for (int i = 1; i <= max_val; ++i) {\n        if (freq[i] >= i && freq[i] > max_freq) {\n            max_freq = i;\n        }\n    }\n\n    return max_freq;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    size_t n = q.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    svint32_t v = svld1_s32(pg, &q[0]);\n    int32_t sum = svaddv_s32(pg, v);\n\n    if (sum > w) {\n        return false;\n    }\n\n    for (size_t i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    int n = q.size();\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n\n    svint32_t v = svld1_s32(pg, &q[0]);\n    svint32_t rev_v = svrev_s32(v, pg);\n\n    svbool_t balanced = svcmpeq_s32(pg, v, rev_v);\n    if (!svptest_any(pg, balanced)) {\n        return false;\n    }\n\n    svint32_t sum = svaddv_s32(pg, v);\n    int total_sum = svaddv_s32(svptrue_b32(), sum);\n\n    return total_sum <= w;\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    int n = q.size();\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n\n    // Check if the vector is palindromic\n    bool balanced = true;\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - i - 1]) {\n            balanced = false;\n            break;\n        }\n    }\n\n    // Calculate the sum of elements using SVE\n    svint32_t v = svld1_s32(pg, &q[0]);\n    svint32_t sum = svaddv_s32_x(pg, v);\n\n    // Reduce the sum across the vector\n    int total_sum = 0;\n    svst1_s32(pg, &total_sum, sum);\n\n    return balanced && (total_sum <= w);\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    int n = q.size();\n    if (n == 0) return false;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &q[0]);\n    svint32_t vr = svrev_s32(v, pg);\n\n    bool balanced = svptest_any(pg, sveor_m(pg, sveq_s32(v, vr), sveq_s32(v, vr)));\n\n    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += q[i];\n    }\n\n    return balanced && (sum <= w);\n}\n```"}
{"task_id": "SimdBench_96_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool will_it_fly_simd(std::vector<int> q, int w) {\n    int n = q.size();\n    svbool_t pg = svwhilelt_b64(0, n);\n\n    svint32_t v = svld1_s32(pg, &q[0]);\n    svint32_t rev_v = svrev_s32(v, pg);\n\n    svbool_t balanced = svcmpeq_s32(pg, v, rev_v);\n    if (!svptest_any(pg, balanced)) {\n        return false;\n    }\n\n    svint32_t sum = svaddv_s32(pg, v);\n    int total_sum = svaddv_s32(svptrue_b32(), sum);\n\n    return total_sum <= w;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n\n    svbool_t pg = svwhilelt_b32(0, n / 2);\n    svint32_t v_arr_start = svld1(pg, arr.data());\n    svint32_t v_arr_end = svld1(pg, arr.data() + n - svcntd() * svlen(v_arr_start));\n\n    while (svptest_any(pg, pg)) {\n        svint32_t v_diff = sveor_z(pg, v_arr_start, v_arr_end);\n        changes += svcntp_b32(pg, v_diff);\n\n        pg = svwhilelt_b32(svcntd() * svlen(v_arr_start), n / 2);\n        v_arr_start = svld1(pg, arr.data() + svcntd() * svlen(v_arr_start));\n        v_arr_end = svld1(pg, arr.data() + n - (svcntd() * svlen(v_arr_start) + svcntd() * svlen(v_arr_start)));\n    }\n\n    for (size_t i = n / 2 * 2; i < n; ++i) {\n        if (arr[i] != arr[n - i - 1]) {\n            ++changes;\n        }\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n\n    for (size_t i = 0; i < n / 2; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n / 2);\n        svint32_t vi = svindex_s32(i, 1);\n\n        svint32_t v1 = svld1_s32(pg, &arr[i]);\n        svint32_t v2 = svld1_s32(pg, &arr[n - i - 1]);\n\n        svbool_t p = svcmpeq_s32(pg, v1, v2);\n        changes += svcntp_b32(pg, p);\n    }\n\n    return (n / 2) - changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n\n    for (size_t i = 0; i < n / 2; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n / 2);\n        svint32_t vi = svindex_s32(i, 1);\n\n        svint32_t v1 = svld1_s32(pg, &arr[i]);\n        svint32_t v2 = svld1_s32(pg, &arr[n - i - 1]);\n\n        svbool_t p = svcmpeq_s32(pg, v1, v2);\n        changes += svcntp_b32(pg, svnot_z(pg, p));\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    int changes = 0;\n\n    for (size_t i = 0; i < n / 2; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n / 2);\n        svint32_t vi = svindex_s32(i, 1);\n\n        svint32_t v1 = svld1_s32(pg, &arr[i]);\n        svint32_t v2 = svld1_s32(pg, &arr[n - i - 1]);\n\n        svbool_t p = svcmpeq_s32(pg, v1, v2);\n        changes += svcntp_b32(pg, p);\n    }\n\n    return (n / 2) - changes;\n}\n```"}
{"task_id": "SimdBench_97_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nint smallest_change_simd(std::vector<int> arr) {\n    size_t n = arr.size();\n    size_t half_n = n / 2;\n    int changes = 0;\n\n    for (size_t i = 0; i < half_n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, half_n);\n        svint32_t vi = svld1_s32(pg, &arr[i]);\n        svint32_t vj = svld1_s32(pg, &arr[n - i - 1]);\n\n        svbool_t pne = svcmpne_s32(pg, vi, vj);\n        changes += svcntp_b32(pg, pne);\n    }\n\n    if (n % 2 != 0) {\n        changes += (arr[half_n] != arr[half_n]);\n    }\n\n    return changes;\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    for (const auto &str : lst1) {\n        total_chars_lst1 += str.length();\n    }\n\n    for (const auto &str : lst2) {\n        total_chars_lst2 += str.length();\n    }\n\n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else if (total_chars_lst2 < total_chars_lst1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    for (const auto& str : lst1) {\n        total_chars_lst1 += str.length();\n    }\n\n    for (const auto& str : lst2) {\n        total_chars_lst2 += str.length();\n    }\n\n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else if (total_chars_lst2 < total_chars_lst1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    for (const auto &str : lst1) {\n        total_chars_lst1 += str.length();\n    }\n\n    for (const auto &str : lst2) {\n        total_chars_lst2 += str.length();\n    }\n\n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else if (total_chars_lst2 < total_chars_lst1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> & lst1, const std::vector<std::string> & lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    for (const auto &str : lst1) {\n        total_chars_lst1 += str.length();\n    }\n\n    for (const auto &str : lst2) {\n        total_chars_lst2 += str.length();\n    }\n\n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_98_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> total_match_simd(const std::vector<std::string> &lst1, const std::vector<std::string> &lst2) {\n    size_t total_chars_lst1 = 0;\n    size_t total_chars_lst2 = 0;\n\n    for (const auto &str : lst1) {\n        total_chars_lst1 += str.length();\n    }\n\n    for (const auto &str : lst2) {\n        total_chars_lst2 += str.length();\n    }\n\n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1 && x != 1) return false;\n    if (x == 1) return true;\n\n    svbool_t pg = svwhilelt_b64(1, x);\n    svuint64_t vn = svdup_u64(n);\n    svuint64_t vx = svdup_u64(x);\n    svuint64_t power = svdup_u64(1);\n\n    while (svptest_any(pg, svcmpeq_u64(pg, vx, svmla_sve_u64_x(pg, vn, power, power)))) {\n        power = svmla_sve_u64_x(pg, vn, power, power);\n        pg = svwhilelt_b64(pg, x);\n    }\n\n    return svptest_any(pg, svcmpeq_u64(pg, vx, power));\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 1 && n == 1) return false;\n    if (n == 1) return false;\n\n    svbool_t pg = svptrue_b64();\n    svuint64_t vn = svdup_u64(n);\n    svuint64_t vx = svdup_u64(x);\n    svuint64_t v1 = svdup_u64(1);\n    svuint64_t power = svdup_u64(1);\n\n    while (true) {\n        power = svmla_x(pg, power, vn, power);\n        svbool_t cmp = svcmpeq_x(pg, power, vx);\n        if (svptest_any(pg, cmp)) {\n            return true;\n        }\n        if (svcmpeq_x(pg, power, v1)) {\n            return false;\n        }\n    }\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1 && x != 1) return false;\n    if (x == 1) return true;\n\n    svbool_t pg = svwhilelt_b64(1, x);\n    svuint64_t vn = svdup_u64(n);\n    svuint64_t vx = svdup_u64(1);\n    svuint64_t pow = svdup_u64(1);\n\n    while (svptest_any(pg, svcmpeq_u64(pg, vx, x))) {\n        pow = svmul_u64_x(pg, pow, vn);\n        vx = svadd_u64_x(pg, vx, svdup_u64(1));\n        pg = svwhilelt_b64(vx, x);\n    }\n\n    return svptest_any(pg, svcmpeq_u64(pg, pow, x));\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (n == 1 && x != 1) return false;\n    if (x == 1) return true;\n\n    svbool_t pg = svwhilelt_b64_s64(0, x);\n    svuint64_t vn = svdup_u64_z(pg, n);\n    svuint64_t vx = svdup_u64_z(pg, x);\n    svuint64_t power = svdup_u64_z(pg, 1);\n\n    while (svptest_any(pg, svcmpeq_n_u64(pg, power, x))) {\n        power = svmul_z(pg, power, vn);\n    }\n\n    return svptest_any(pg, svcmpeq_n_u64(pg, power, x));\n}\n```"}
{"task_id": "SimdBench_99_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_simple_power_simd(uint64_t x, uint64_t n) {\n    if (x == 1 && n == 1) return false;\n    if (n == 1) return x == 1;\n\n    svbool_t pg = svwhilelt_b64_s64(0, x);\n    svuint64_t vn = svdup_u64_z(pg, n);\n    svuint64_t vx = svdup_u64_z(pg, x);\n    svuint64_t power = svdup_u64_z(pg, 1);\n\n    while (svptest_any(pg, svcmpeq_n_u64(pg, power, x))) {\n        power = svmul_x(pg, power, vn);\n    }\n\n    return svptest_any(pg, svcmpeq_n_u64(pg, power, x));\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint hex_key_simd(const std::string &num) {\n    const char *hexChars = num.c_str();\n    size_t length = num.length();\n\n    svbool_t pg = svwhilelt_b64(0, length);\n    svuint8_t sv_hex = svld1_u8(pg, (uint8_t *)hexChars);\n\n    svuint8_t sv_prime_mask = svdup_n_u8(0);\n    sv_prime_mask = svorr_n_u8_z(sv_prime_mask, '2');\n    sv_prime_mask = svorr_n_u8_z(sv_prime_mask, '3');\n    sv_prime_mask = svorr_n_u8_z(sv_prime_mask, '5');\n    sv_prime_mask = svorr_n_u8_z(sv_prime_mask, '7');\n    sv_prime_mask = svorr_n_u8_z(sv_prime_mask, 'B');\n    sv_prime_mask = svorr_n_u8_z(sv_prime_mask, 'D');\n\n    svbool_t sv_is_prime = svcmpeq_u8(sv_prime_mask, sv_hex);\n    uint64_t count = svcntp_b64(svptrue_b64(), sv_is_prime);\n\n    return static_cast<int>(count);\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint hex_key_simd(const std::string &num) {\n    size_t len = num.length();\n    const char *str = num.c_str();\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t vec = svld1_u8(pg, str);\n\n    svuint8_t prime_mask = svdup_n_u8(0b00000000);\n    prime_mask = svorr_n_u8_x(pg, prime_mask, '2');\n    prime_mask = svorr_n_u8_x(pg, prime_mask, '3');\n    prime_mask = svorr_n_u8_x(pg, prime_mask, '5');\n    prime_mask = svorr_n_u8_x(pg, prime_mask, '7');\n    prime_mask = svorr_n_u8_x(pg, prime_mask, 'B');\n    prime_mask = svorr_n_u8_x(pg, prime_mask, 'D');\n\n    svuint8_t matches = svcmpne_u8(pg, vec, prime_mask);\n    svuint8_t count = svcntp_b8(svptrue_b8(), matches);\n\n    return svaddv_x(svptrue_b8(), count);\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint hex_key_simd(const std::string &num) {\n    size_t vector_length = svcntw();\n    size_t len = num.length();\n    int count = 0;\n\n    for (size_t i = 0; i < len; i += vector_length) {\n        size_t chunk_size = std::min(vector_length, len - i);\n        svbool_t pg = svwhilelt_b32(0, chunk_size);\n\n        // Load chunk of characters\n        svuint8_t chunk = svld1_u8(pg, &num[i]);\n\n        // Create a vector with prime hex digits\n        svuint8_t primes = svdup_n_u8(0);\n        primes = svinsr_u8(primes, 0, '2');\n        primes = svinsr_u8(primes, 1, '3');\n        primes = svinsr_u8(primes, 2, '5');\n        primes = svinsr_u8(primes, 3, '7');\n        primes = svinsr_u8(primes, 4, 'B');\n        primes = svinsr_u8(primes, 5, 'D');\n\n        // Compare chunk with primes\n        svbool_t matches = svcmpeq_u8(pg, chunk, primes);\n\n        // Count matches\n        count += svcntp_b8(svptrue_b8(), matches);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint hex_key_simd(const std::string &num) {\n    size_t len = num.length();\n    const char *str = num.c_str();\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_chars = svld1_u8(pg, (const uint8_t *)str);\n\n    svuint8_t sv_primes = svdup_n_u8(0);\n    sv_primes = svorr_n_u8_z(sv_primes, '2');\n    sv_primes = svorr_n_u8_z(sv_primes, '3');\n    sv_primes = svorr_n_u8_z(sv_primes, '5');\n    sv_primes = svorr_n_u8_z(sv_primes, '7');\n    sv_primes = svorr_n_u8_z(sv_primes, 'B');\n    sv_primes = svorr_n_u8_z(sv_primes, 'D');\n\n    svbool_t sv_mask = svcmpeq_u8(pg, sv_chars, sv_primes);\n    int count = svcntp_b64(pg, sv_mask);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_100_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint hex_key_simd(const std::string &num) {\n    size_t vector_length = svcntw();\n    size_t len = num.length();\n    int count = 0;\n\n    for (size_t i = 0; i < len; i += vector_length) {\n        size_t chunk_size = std::min(vector_length, len - i);\n        svbool_t pg = svwhilelt_b32(0, chunk_size);\n\n        svuint8_t chars = svld1_u8(pg, &num[i]);\n\n        svuint8_t is_prime = svcmpne_n_u8(pg, chars, '2') |\n                             svcmpne_n_u8(pg, chars, '3') |\n                             svcmpne_n_u8(pg, chars, '5') |\n                             svcmpne_n_u8(pg, chars, '7') |\n                             svcmpne_n_u8(pg, chars, 'B') |\n                             svcmpne_n_u8(pg, chars, 'D');\n\n        count += svcntp_b8(pg, is_prime);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_happy_simd(const std::string &s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    const char *str = s.c_str();\n    size_t len = s.length();\n    size_t i = 0;\n\n    while (i <= len - 3) {\n        size_t vl = svcntw() * 3;\n        svbool_t pg = svwhilelt_b32(i, len - 2);\n\n        svuint8_t v0 = svld1_u8(pg, &str[i]);\n        svuint8_t v1 = svld1_u8(pg, &str[i + 1]);\n        svuint8_t v2 = svld1_u8(pg, &str[i + 2]);\n\n        svbool_t eq01 = svcmpeq_u8(pg, v0, v1);\n        svbool_t eq12 = svcmpeq_u8(pg, v1, v2);\n        svbool_t eq02 = svcmpeq_u8(pg, v0, v2);\n\n        svbool_t any_eq = svor_z(pg, eq01, svor_z(pg, eq12, eq02));\n\n        if (svptest_any(pg, any_eq)) {\n            return false;\n        }\n\n        i += vl / 3;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_happy_simd(const std::string &s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    const char *str = s.c_str();\n    size_t len = s.length();\n    svbool_t pg = svwhilelt_b64(0, len - 2);\n\n    svuint8_t sv_str = svld1_u8(pg, &str[0]);\n    svuint8_t sv_str_next = svld1_u8(pg, &str[1]);\n    svuint8_t sv_str_next_next = svld1_u8(pg, &str[2]);\n\n    svbool_t distinct1 = svcmpne_n_u8(pg, sv_str, sv_str_next);\n    svbool_t distinct2 = svcmpne_n_u8(pg, sv_str, sv_str_next_next);\n    svbool_t distinct3 = svcmpne_n_u8(pg, sv_str_next, sv_str_next_next);\n\n    svbool_t all_distinct = svand_z(pg, distinct1, distinct2);\n    all_distinct = svand_z(pg, all_distinct, distinct3);\n\n    return svptest_any(pg, all_distinct);\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_happy_simd(const std::string &s) {\n    size_t len = s.length();\n    if (len < 3) return false;\n\n    const char *str = s.c_str();\n    svbool_t pg = svwhilelt_b64(0, len - 2);\n\n    svuint8_t v0 = svld1(svptrue_b8(), (uint8_t *)str);\n    svuint8_t v1 = svld1(svptrue_b8(), (uint8_t *)str + 1);\n    svuint8_t v2 = svld1(svptrue_b8(), (uint8_t *)str + 2);\n\n    svbool_t distinct = svcmpne_n_u8(pg, v0, v1) & svcmpne_n_u8(pg, v1, v2) & svcmpne_n_u8(pg, v0, v2);\n\n    return svptest_any(pg, distinct);\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_happy_simd(const std::string &s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    const char *str = s.c_str();\n    size_t len = s.length();\n    svbool_t pg = svwhilelt_b64(0, len - 2);\n\n    svuint8_t vec1 = svld1_u8(pg, &str[0]);\n    svuint8_t vec2 = svld1_u8(pg, &str[1]);\n    svuint8_t vec3 = svld1_u8(pg, &str[2]);\n\n    svbool_t distinct = svcmpne_u8(pg, vec1, vec2) & svcmpne_u8(pg, vec2, vec3) & svcmpne_u8(pg, vec1, vec3);\n\n    return svptest_any(pg, distinct);\n}\n```"}
{"task_id": "SimdBench_101_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nbool is_happy_simd(const std::string &s) {\n    size_t len = s.length();\n    if (len < 3) return false;\n\n    constexpr size_t vector_length = 128 / 8; // Assuming SVE vector length of 128 bits\n    svbool_t pg = svwhilelt_b64(0, (int64_t)(len - 2));\n\n    svuint8_t sv_s = svld1_u8(pg, (uint8_t*)s.c_str());\n    svuint8_t sv_s_next = svld1_u8(pg, (uint8_t*)s.c_str() + 1);\n    svuint8_t sv_s_next2 = svld1_u8(pg, (uint8_t*)s.c_str() + 2);\n\n    svbool_t sv_cmp1 = svcmpne_u8(pg, sv_s, sv_s_next);\n    svbool_t sv_cmp2 = svcmpne_u8(pg, sv_s_next, sv_s_next2);\n    svbool_t sv_cmp3 = svcmpne_u8(pg, sv_s, sv_s_next2);\n\n    svbool_t sv_all_distinct = svand_z(pg, sv_cmp1, svand_z(pg, sv_cmp2, sv_cmp3));\n\n    if (!svptest_any(pg, sv_all_distinct)) {\n        return false;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str) {\n    int length = str.length();\n\n    svbool_t pg = svwhilelt_b64(0, (int64_t)length);\n    svint64_t v = svindex_s64(0, 1);\n    v = svadd_s64_x(pg, v, 1);\n\n    int64_t result = svaddv_s64(pg, v);\n\n    return is_prime(result);\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string &str) {\n    const int len = str.length();\n\n    svbool_t pg = svwhilelt_b64(0, (int64_t)len);\n    svint64_t v = svadd_n_x(pg, svindex_x(64, 0), 1);\n\n    int64_t result = svaddv_x(pg, v);\n\n    return is_prime(result);\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string & str) {\n    const int len = str.length();\n\n    // Use SVE to check if the length is a prime number\n    svbool_t pg = svwhilelt_b64(0, (int64_t)len);\n    svint64_t v = svindex_s64(0, 1);\n    v = svadd_s64_x(pg, v, 1);\n\n    // Check if the length is a prime number\n    return is_prime(len);\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string &str) {\n    const int len = str.length();\n\n    // Use SVE to count the length of the string in parallel\n    svbool_t pg = svwhilelt_b64(0, (int64_t)len);\n    svint64_t vindex = svindex_s64(0, 1);\n    svint64_t vlen = svadd_n_s64_x(pg, vindex, len);\n\n    // Reduce the vector to get the maximum length\n    int64_t max_len = svmaxv_s64(pg, vlen);\n\n    return is_prime(max_len);\n}\n```"}
{"task_id": "SimdBench_102_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length_simd(const std::string &str) {\n    int len = str.length();\n\n    // Use SVE to check if the length is a prime number\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint64_t v = svindex_u64(0, 1);\n    v = svadd_n_u64_x(pg, v, 1);\n\n    // Check if any of the values in the vector are prime\n    bool result = false;\n    for (int i = 0; i < svcntw(); ++i) {\n        if (is_prime(svget1(v, i))) {\n            result = true;\n            break;\n        }\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    constexpr int bit_length = 64;\n    char result[bit_length + 1] = {0};\n    int index = bit_length - 1;\n\n    svbool_t pg = svwhilelt_b64(0, bit_length);\n    svuint64_t sv_sum = svdup_u64(sum);\n    svuint64_t sv_mask = svdup_u64(1);\n\n    do {\n        svuint64_t sv_bit = svand_x(pg, sv_sum, sv_mask);\n        svuint64_t sv_char = svadd_x(pg, sv_bit, svdup_u64('0'));\n        result[index--] = (char)svlastb_u64(pg, sv_char);\n        sv_sum = svlsr_x(pg, sv_sum, 1);\n        pg = svwhilelt_b64(index, bit_length);\n    } while (svptest_any(pg));\n\n    return std::string(result + index + 1);\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    std::string binary_result = \"\";\n    while (sum > 0) {\n        binary_result = (sum % 2 == 0 ? \"0\" : \"1\") + binary_result;\n        sum /= 2;\n    }\n\n    return binary_result;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    std::string binary_result = \"\";\n    while (sum > 0) {\n        binary_result = (sum % 2 == 0 ? \"0\" : \"1\") + binary_result;\n        sum /= 2;\n    }\n\n    return binary_result.empty() ? \"0\" : binary_result;\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N != 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    constexpr int bit_size = 64;\n    svbool_t pg = svwhilelt_b64(0, bit_size);\n    svuint64_t vector = svdup_n_u64(pg, sum);\n    svuint64_t mask = svdup_n_u64(pg, 1);\n\n    std::string binary_result;\n    for (int i = bit_size - 1; i >= 0; --i) {\n        svuint64_t bit = svand_x(pg, vector, svlsl_n_u64(pg, mask, i));\n        svbool_t is_set = svcmpne_n_u64(pg, bit, 0);\n        if (svptest_any(pg, is_set)) {\n            binary_result += '1';\n        } else {\n            binary_result += '0';\n        }\n    }\n\n    // Remove leading zeros\n    auto pos = binary_result.find('1');\n    if (pos != std::string::npos) {\n        return binary_result.substr(pos);\n    }\n    return \"0\";\n}\n```"}
{"task_id": "SimdBench_103_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <string>\n\nstd::string solve_simd(uint64_t N) {\n    uint64_t sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n\n    std::string binary = \"\";\n    while (sum > 0) {\n        binary = (sum % 2 == 0 ? \"0\" : \"1\") + binary;\n        sum /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n    svint32_t even_mask = svdup_n_s32(1);\n    svint32_t odd_indices = svindex_s32(0, 1);\n    svbool_t odd_pg = svcmpne_n_s32(pg, odd_indices, 0);\n    svint32_t even_elements = svand_z(pg, v, even_mask);\n    even_elements = svsel_s32(odd_pg, even_elements, svdup_n_s32(0));\n    sum = svaddv_s32(odd_pg, even_elements);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n    svbool_t odd_indices = svwhilelt_b64(1, n);\n    svint32_t odd_elements = svsel_s32(odd_indices, v, svdup_n_s32(0));\n    svbool_t even_elements = svcmpeq_n_s32(pg, odd_elements, svdup_n_s32(0));\n    sum = svaddv_s32(even_elements);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t vector_length = svcntw();\n    size_t i = 1;\n\n    for (; i + vector_length <= lst.size(); i += vector_length) {\n        svbool_t pg = svwhilelt_b64(i, lst.size());\n        svint32_t v = svld1_s32(pg, &lst[i]);\n        svint32_t even_mask = svdup_n_s32(1);\n        svbool_t even_pg = svcmpeq_s32(svand_x(pg, v, even_mask), 0);\n        svint32_t even_vals = svsel_s32(even_pg, v, svdup_n_s32(0));\n        sum += svaddv_s32(even_pg, even_vals);\n        i++;\n    }\n\n    for (; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n    svint32_t odd_indices = svindex_s32(0, 1);\n    svbool_t odd_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, odd_indices, 1), 0);\n    svint32_t even_elements = svsel_s32(odd_mask, v, svdup_n_s32(0));\n    sum = svaddv_s32(odd_mask, even_elements);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_104_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_simd(std::vector<int> lst) {\n    int sum = 0;\n    size_t n = lst.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n    svint32_t odd_indices = svindex_s32(0, 1);\n    svbool_t odd_mask = svcmpge_n_s32(pg, odd_indices, 1);\n    svint32_t even_elements = svand_z(pg, v, svdup_n_s32(1));\n    even_elements = svsel_s32(odd_mask, even_elements, svdup_n_s32(0));\n    sum = svaddv_s32(odd_mask, even_elements);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string encrypted(len, ' ');\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_input = svld1_u8(pg, (uint8_t*)s.c_str());\n\n    svuint8_t sv_shifted = svadd_n_u8_x(pg, sv_input, 4);\n\n    svst1_u8(pg, (uint8_t*)encrypted.c_str(), sv_shifted);\n\n    return encrypted;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string encrypted(len, ' ');\n\n    size_t vl = svcntw() * 4; // Vector length in bytes\n    size_t i = 0;\n\n    for (; i <= len - vl; i += vl) {\n        svbool_t pg = svwhilelt_b32(i, len);\n\n        svuint8_t sv_input = svld1_u8(pg, (const uint8_t *)&s[i]);\n        svuint8_t sv_encrypted = svadd_n_u8_x(pg, sv_input, 4); // Shift by 4\n\n        svst1_u8(pg, (uint8_t *)&encrypted[i], sv_encrypted);\n    }\n\n    for (; i < len; ++i) {\n        encrypted[i] = s[i] + 4; // Shift by 4\n    }\n\n    return encrypted;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string encrypted(len, ' ');\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_input = svld1_u8(pg, (const uint8_t*)s.c_str());\n\n    svuint8_t sv_offset = svdup_n_u8(4);\n    svuint8_t sv_encrypted = svadd_u8_z(pg, sv_input, sv_offset);\n\n    svst1_u8(pg, (uint8_t*)encrypted.data(), sv_encrypted);\n\n    return encrypted;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string encrypted(len, ' ');\n\n    svbool_t pg = svwhilelt_b32(0, len);\n    svuint8_t input = svld1_u8(pg, (uint8_t*)s.c_str());\n\n    // Shift each character by 8 places (2 * 2 + 2)\n    svuint8_t shifted = svadd_n_u8_x(pg, input, 8);\n\n    // Handle wrap-around for characters beyond 'z'\n    svuint8_t base_a = svdup_n_u8('a');\n    svuint8_t base_z = svdup_n_u8('z' + 1);\n    svbool_t is_greater_than_z = svcmplt(pg, base_z, shifted);\n    shifted = svsel_u8(is_greater_than_z, svsub_n_u8_x(pg, shifted, 26), shifted);\n\n    svst1_u8(pg, (uint8_t*)encrypted.c_str(), shifted);\n\n    return encrypted;\n}\n```"}
{"task_id": "SimdBench_105_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cstring>\n\nstd::string encrypt_simd(const std::string &s) {\n    size_t len = s.length();\n    std::string encrypted(len, '\\0');\n\n    svbool_t pg = svwhilelt_b32(0, len);\n    svuint8_t sv_input = svld1_u8(pg, (uint8_t*)s.c_str());\n\n    // Shift characters by 4 positions\n    sv_input = svadd_n_u8_x(pg, sv_input, 4);\n\n    // Wrap around if character overflows 'z'\n    svuint8_t sv_z = svdup_n_u8('z');\n    svbool_t overflow = svcmgt_u8(pg, sv_input, sv_z);\n    sv_input = svsel_u8(overflow, svsub_n_u8_x(pg, sv_input, 26), sv_input);\n\n    // Store the result back to the encrypted string\n    svst1_u8(pg, (uint8_t*)encrypted.data(), sv_input);\n\n    return encrypted;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n\nstd::string encode_simd(const std::string &message) {\n    std::string encoded(message.size(), '\\0');\n    size_t i = 0;\n\n    for (; i <= message.size() - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, message.size());\n\n        svuint8_t chars = svld1_u8(pg, &message[i]);\n        svuint8_t encoded_chars = svdup_n_u8(0);\n\n        svbool_t is_lower = svcmpeq_n_u8(pg, chars, 'a');\n        svbool_t is_upper = svcmpeq_n_u8(pg, chars, 'A');\n\n        encoded_chars = svsel_u8(pg, encoded_chars, svadd_n_u8(pg, chars, 2), svcmpeq_n_u8(pg, chars, 'a') | svcmpeq_n_u8(pg, chars, 'e') | svcmpeq_n_u8(pg, chars, 'i') | svcmpeq_n_u8(pg, chars, 'o') | svcmpeq_n_u8(pg, chars, 'u'));\n        encoded_chars = svsel_u8(pg, encoded_chars, svadd_n_u8(pg, chars, 2), svcmpeq_n_u8(pg, chars, 'A') | svcmpeq_n_u8(pg, chars, 'E') | svcmpeq_n_u8(pg, chars, 'I') | svcmpeq_n_u8(pg, chars, 'O') | svcmpeq_n_u8(pg, chars, 'U'));\n\n        encoded_chars = svsel_u8(pg, encoded_chars, svsub_n_u8(pg, chars, 32), is_lower);\n        encoded_chars = svsel_u8(pg, encoded_chars, svadd_n_u8(pg, chars, 32), is_upper);\n\n        svst1_u8(pg, &encoded[i], encoded_chars);\n    }\n\n    for (; i < message.size(); ++i) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                c += 2;\n            }\n            encoded[i] = std::toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                c += 2;\n            }\n            encoded[i] = std::tolower(c);\n        }\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n\nstd::string encode_simd(const std::string &message) {\n    std::string encoded(message.size(), ' ');\n    size_t i = 0;\n\n    for (; i <= message.size() - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, message.size());\n\n        svuint8_t chars = svld1_u8(pg, &message[i]);\n        svuint8_t encoded_chars = svdup_n_u8(0);\n\n        svbool_t is_lower = svcmpeq_n_u8(pg, chars, 'a');\n        svbool_t is_upper = svcmpeq_n_u8(pg, chars, 'A');\n\n        is_lower = svorr_z(pg, is_lower, svcmpeq_n_u8(pg, chars, 'e'));\n        is_upper = svorr_z(pg, is_upper, svcmpeq_n_u8(pg, chars, 'E'));\n\n        is_lower = svorr_z(pg, is_lower, svcmpeq_n_u8(pg, chars, 'i'));\n        is_upper = svorr_z(pg, is_upper, svcmpeq_n_u8(pg, chars, 'I'));\n\n        is_lower = svorr_z(pg, is_lower, svcmpeq_n_u8(pg, chars, 'o'));\n        is_upper = svorr_z(pg, is_upper, svcmpeq_n_u8(pg, chars, 'O'));\n\n        is_lower = svorr_z(pg, is_lower, svcmpeq_n_u8(pg, chars, 'u'));\n        is_upper = svorr_z(pg, is_upper, svcmpeq_n_u8(pg, chars, 'U'));\n\n        svbool_t is_vowel = svorr_z(pg, is_lower, is_upper);\n\n        encoded_chars = svsel_u8(is_vowel, svadd_n_u8_x(pg, chars, 2), chars);\n\n        svbool_t is_lowercase = svcmpeq_n_u8(pg, chars, 'a');\n        is_lowercase = svorr_z(pg, is_lowercase, svcmpeq_n_u8(pg, chars, 'b'));\n\n        svbool_t is_uppercase = svcmpeq_n_u8(pg, chars, 'A');\n        is_uppercase = svorr_z(pg, is_uppercase, svcmpeq_n_u8(pg, chars, 'B'));\n\n        encoded_chars = svsel_u8(is_lowercase, svsub_n_u8_x(pg, chars, 32), encoded_chars);\n        encoded_chars = svsel_u8(is_uppercase, svadd_n_u8_x(pg, chars, 32), encoded_chars);\n\n        svst1_u8(pg, &encoded[i], encoded_chars);\n    }\n\n    for (; i < message.size(); ++i) {\n        char ch = message[i];\n        if (std::islower(ch)) {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                ch = ch + 2;\n            }\n            encoded[i] = std::toupper(ch);\n        } else if (std::isupper(ch)) {\n            if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n                ch = ch + 2;\n            }\n            encoded[i] = std::tolower(ch);\n        }\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n\nstd::string encode_simd(const std::string &message) {\n    size_t len = message.length();\n    std::string encoded(len, ' ');\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_message = svld1_u8(pg, (uint8_t *)message.c_str());\n    svuint8_t sv_encoded = svdup_n_u8(pg, ' ');\n\n    // Swap case\n    svbool_t is_lower = svcmpeq_n_u8(pg, sv_message, svdup_n_u8(pg, ' '), 'a' <= sv_message && sv_message <= 'z');\n    svbool_t is_upper = svcmpeq_n_u8(pg, sv_message, svdup_n_u8(pg, ' '), 'A' <= sv_message && sv_message <= 'Z');\n    sv_encoded = svsel_u8(is_lower, svsub_n_u8(pg, sv_message, 32), sv_encoded);\n    sv_encoded = svsel_u8(is_upper, svadd_n_u8(pg, sv_message, 32), sv_encoded);\n\n    // Replace vowels\n    svbool_t is_a = svcmpeq_n_u8(pg, sv_encoded, 'a');\n    svbool_t is_e = svcmpeq_n_u8(pg, sv_encoded, 'e');\n    svbool_t is_i = svcmpeq_n_u8(pg, sv_encoded, 'i');\n    svbool_t is_o = svcmpeq_n_u8(pg, sv_encoded, 'o');\n    svbool_t is_u = svcmpeq_n_u8(pg, sv_encoded, 'u');\n    svbool_t is_A = svcmpeq_n_u8(pg, sv_encoded, 'A');\n    svbool_t is_E = svcmpeq_n_u8(pg, sv_encoded, 'E');\n    svbool_t is_I = svcmpeq_n_u8(pg, sv_encoded, 'I');\n    svbool_t is_O = svcmpeq_n_u8(pg, sv_encoded, 'O');\n    svbool_t is_U = svcmpeq_n_u8(pg, sv_encoded, 'U');\n\n    sv_encoded = svsel_u8(is_a, svdup_n_u8(pg, 'c'), sv_encoded);\n    sv_encoded = svsel_u8(is_e, svdup_n_u8(pg, 'g'), sv_encoded);\n    sv_encoded = svsel_u8(is_i, svdup_n_u8(pg, 'k'), sv_encoded);\n    sv_encoded = svsel_u8(is_o, svdup_n_u8(pg, 'q'), sv_encoded);\n    sv_encoded = svsel_u8(is_u, svdup_n_u8(pg, 'w'), sv_encoded);\n    sv_encoded = svsel_u8(is_A, svdup_n_u8(pg, 'C'), sv_encoded);\n    sv_encoded = svsel_u8(is_E, svdup_n_u8(pg, 'G'), sv_encoded);\n    sv_encoded = svsel_u8(is_I, svdup_n_u8(pg, 'K'), sv_encoded);\n    sv_encoded = svsel_u8(is_O, svdup_n_u8(pg, 'Q'), sv_encoded);\n    sv_encoded = svsel_u8(is_U, svdup_n_u8(pg, 'W'), sv_encoded);\n\n    svst1_u8(pg, (uint8_t *)encoded.data(), sv_encoded);\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n\nstd::string encode_simd(const std::string &message) {\n    std::string encoded(message.size(), ' ');\n    size_t vl = svcntw();\n\n    for (size_t i = 0; i < message.size(); i += vl) {\n        svbool_t pg = svwhilelt_b32(i, message.size());\n\n        svuint8_t chars = svld1_u8(pg, &message[i]);\n        svbool_t is_lower = svcmpeq_n_u8(pg, chars, ' ');\n        svbool_t is_upper = svcmpeq_n_u8(pg, chars, ' ');\n\n        for (char c = 'a'; c <= 'z'; ++c) {\n            is_lower = svorr_z(pg, is_lower, svcmpeq_n_u8(pg, chars, c));\n            is_upper = svorr_z(pg, is_upper, svcmpeq_n_u8(pg, chars, c - 'a' + 'A'));\n        }\n\n        svuint8_t swapped_case = svsel_u8(is_lower, svsub_n_u8_x(pg, chars, 32), chars);\n        swapped_case = svsel_u8(is_upper, svadd_n_u8_x(pg, chars, 32), swapped_case);\n\n        svbool_t is_vowel = svcmpeq_n_u8(pg, chars, 'a') | svcmpeq_n_u8(pg, chars, 'e') |\n                            svcmpeq_n_u8(pg, chars, 'i') | svcmpeq_n_u8(pg, chars, 'o') |\n                            svcmpeq_n_u8(pg, chars, 'u') | svcmpeq_n_u8(pg, chars, 'A') |\n                            svcmpeq_n_u8(pg, chars, 'E') | svcmpeq_n_u8(pg, chars, 'I') |\n                            svcmpeq_n_u8(pg, chars, 'O') | svcmpeq_n_u8(pg, chars, 'U');\n\n        svuint8_t replaced_vowels = svsel_u8(is_vowel, svadd_n_u8_x(pg, chars, 2), swapped_case);\n\n        svst1_u8(pg, &encoded[i], replaced_vowels);\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_106_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <string>\n#include <cctype>\n\nstd::string encode_simd(const std::string &message) {\n    std::string encoded(message.size(), '\\0');\n    size_t i = 0;\n\n    while (i < message.size()) {\n        svbool_t pg = svwhilelt_b32(i, message.size());\n        svuint8_t chars = svld1_u8(pg, (uint8_t *)&message[i]);\n\n        svbool_t is_lower = svcmpeq_n_u8(pg, chars, 'a');\n        svbool_t is_upper = svcmpeq_n_u8(pg, chars, 'A');\n\n        svuint8_t lower = svadd_n_u8(pg, chars, 32);\n        svuint8_t upper = svsub_n_u8(pg, chars, 32);\n\n        chars = svsel_u8(is_lower, pg, lower, chars);\n        chars = svsel_u8(is_upper, pg, upper, chars);\n\n        svbool_t is_vowel = svcmpeq_n_u8(pg, chars, 'a') | svcmpeq_n_u8(pg, chars, 'e') |\n                            svcmpeq_n_u8(pg, chars, 'i') | svcmpeq_n_u8(pg, chars, 'o') |\n                            svcmpeq_n_u8(pg, chars, 'u') | svcmpeq_n_u8(pg, chars, 'A') |\n                            svcmpeq_n_u8(pg, chars, 'E') | svcmpeq_n_u8(pg, chars, 'I') |\n                            svcmpeq_n_u8(pg, chars, 'O') | svcmpeq_n_u8(pg, chars, 'U');\n\n        svuint8_t replaced_vowels = svadd_n_u8(pg, chars, 2);\n        chars = svsel_u8(is_vowel, pg, replaced_vowels, chars);\n\n        svst1_u8(pg, (uint8_t *)&encoded[i], chars);\n        i += svcntp_b32(pg);\n    }\n\n    return encoded;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cctype>\n#include <map>\n#include <string>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t len = key.length();\n\n        for (size_t i = 0; i < len; i += svcntw()) {\n            svbool_t pg = svwhilelt_b32(i, len);\n            svuint8_t chars = svld1_u8(pg, &key[i]);\n\n            svbool_t is_lower = svcmpge_n_u8(pg, chars, 'a') & svcmpge_n_u8(pg, 'z', chars);\n            svbool_t is_upper = svcmpge_n_u8(pg, chars, 'A') & svcmpge_n_u8(pg, 'Z', chars);\n\n            if (!svptest_any(pg, is_lower)) all_lower = false;\n            if (!svptest_any(pg, is_upper)) all_upper = false;\n\n            if (!all_lower && !all_upper) return false;\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cctype>\n#include <map>\n#include <string>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t vector_length = svcntw();\n\n        for (size_t i = 0; i < key.length(); i += vector_length) {\n            size_t chunk_size = std::min(vector_length, key.length() - i);\n            svbool_t pg = svwhilelt_b32(0, chunk_size);\n\n            svuint8_t vec = svld1_u8(pg, &key[i]);\n            svuint8_t lower = svcmpge_n_u8(pg, vec, 'a');\n            svuint8_t upper = svcmpge_n_u8(pg, vec, 'A');\n            lower = svand_z(pg, lower, svcmpge_n_u8(pg, 'z', vec));\n            upper = svand_z(pg, upper, svcmpge_n_u8(pg, 'Z', vec));\n\n            if (!svptest_any(pg, lower)) all_lower = false;\n            if (!svptest_any(pg, upper)) all_upper = false;\n\n            if (!all_lower && !all_upper) return false;\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cctype>\n#include <map>\n#include <string>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t vector_length = svcntw();\n\n        for (size_t i = 0; i < key.length(); i += vector_length) {\n            size_t chunk_size = std::min(vector_length, key.length() - i);\n            svbool_t pg = svwhilelt_b32(0, chunk_size);\n\n            svuint8_t vec = svld1_u8(pg, &key[i]);\n            svuint8_t lower = svdup_n_u8(std::tolower(key[i]));\n            svuint8_t upper = svdup_n_u8(std::toupper(key[i]));\n\n            svbool_t is_lower = svcmpeq_u8(pg, vec, lower);\n            svbool_t is_upper = svcmpeq_u8(pg, vec, upper);\n\n            if (!svptest_any(pg, is_lower)) all_lower = false;\n            if (!svptest_any(pg, is_upper)) all_upper = false;\n\n            if (!all_lower && !all_upper) return false;\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cctype>\n#include <map>\n#include <string>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t len = key.length();\n\n        for (size_t i = 0; i < len; i += svcntw()) {\n            svbool_t pg = svwhilelt_b32(i, len);\n            svuint8_t chars = svld1_u8(pg, &key[i]);\n\n            svbool_t is_lower = svcmpeq_n_u8(pg, chars, svdup_n_u8(' '));\n            svbool_t is_upper = svcmpeq_n_u8(pg, chars, svdup_n_u8(' '));\n\n            for (size_t j = i; j < i + svcntw(); ++j) {\n                if (j >= len) break;\n                if (std::islower(key[j])) {\n                    all_upper = false;\n                } else if (std::isupper(key[j])) {\n                    all_lower = false;\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_107_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cctype>\n#include <map>\n#include <string>\n\nbool check_map_case_simd(std::map<std::string, std::string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        size_t vector_length = svcntw();\n\n        for (size_t i = 0; i < key.length(); i += vector_length) {\n            size_t chunk_size = std::min(vector_length, key.length() - i);\n            svbool_t pg = svwhilelt_b32(0, chunk_size);\n\n            svuint8_t chars = svld1_u8(pg, &key[i]);\n            svuint8_t lower = svcmpge_n_u8(pg, chars, 'a');\n            svuint8_t upper = svcmpge_n_u8(pg, chars, 'A');\n            lower = svand_z(pg, lower, svcmpge_n_u8(pg, 'z', chars));\n            upper = svand_z(pg, upper, svcmpge_n_u8(pg, 'Z', chars));\n\n            if (!svptest_any(pg, lower)) all_lower = false;\n            if (!svptest_any(pg, upper)) all_upper = false;\n\n            if (!all_lower && !all_upper) return false;\n        }\n    }\n\n    return all_lower || all_upper;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svint64_t numbers = svindex_s64(0, 1);\n\n    for (int i = 2; i < n; ++i) {\n        svbool_t is_prime = svdup_b_z(true, svcntw());\n\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                is_prime = svdup_b_z(false, svcntw());\n                break;\n            }\n        }\n\n        svint64_t prime_numbers = svsel_s64(is_prime, svdup_s64_z(i, svcntw()), svdup_s64_z(0, svcntw()));\n        svbool_t pg_prime = svcmpne_s64(pg, prime_numbers, svdup_s64_z(0, svcntw()));\n\n        while (svptest_any(pg_prime, pg_prime)) {\n            int prime = svmin_s64_x(pg_prime, prime_numbers);\n            primes.push_back(prime);\n            pg_prime = svwhilelt_b64_s64(prime, n);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    if (n < 2) return {};\n\n    std::vector<int> primes;\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t numbers = svindex_s32(0, 1);\n\n    while (svptest_any(pg)) {\n        svint32_t candidate = svadd_n_s32(pg, numbers, 2);\n        svbool_t is_prime = svdup_b_z(true, svcntw());\n\n        for (int i = 2; i <= sqrt(n); ++i) {\n            svint32_t divisor = svdup_n_s32(i);\n            svbool_t divisible = svmul_x(pg, candidate, svdiv_n_s32_x(pg, candidate, divisor)) == divisor;\n            is_prime = svand_z(pg, is_prime, svnot_z(pg, divisible));\n        }\n\n        svint32_t prime_candidates = svsel_s32(is_prime, candidate, svdup_n_s32(-1));\n        int32_t prime_count = svcntp_b32(pg, is_prime);\n\n        for (int i = 0; i < prime_count; ++i) {\n            primes.push_back(prime_candidates[i]);\n        }\n\n        numbers = svadd_n_s32_x(pg, numbers, svcntw());\n        pg = svwhilelt_b32(numbers, n);\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t numbers = svindex_s32(0, 1);\n\n    svbool_t is_prime = svdup_b_z(pg, true);\n\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (is_prime[i]) {\n            svint32_t multiples = svmla_s32_x(pg, numbers, i, -i);\n            is_prime = svand_z(pg, is_prime, svcmpne_n_s32(pg, multiples % i, 0));\n        }\n    }\n\n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svint64_t numbers = svindex_s64(0, 1);\n\n    for (int i = 2; i < n; ++i) {\n        svbool_t is_prime = svdup_b_z(pg, true);\n\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                is_prime = svclr_b_z(pg, is_prime, svcmpne_n_s64(pg, numbers, j));\n            }\n        }\n\n        if (svptest_any(pg, is_prime)) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_108_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> count_up_to_simd(int n) {\n    std::vector<int> primes;\n    if (n < 2) return primes;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t numbers = svindex_s64(0, 1);\n\n    svbool_t is_prime = svdup_b_z(pg, true);\n\n    for (svint64_t i = svadd_n_s64_x(pg, numbers, 2); svcntp_b64(pg, is_prime); i = svadd_n_s64_x(pg, i, 1)) {\n        svbool_t factor_pg = svwhilelt_b64(2, svsqrt_s64_x(pg, i));\n        svint64_t factor = svindex_s64(2, 1);\n\n        svbool_t not_prime = svdup_b_z(factor_pg, false);\n\n        for (; svcntp_b64(factor_pg, not_prime) == 0; factor = svadd_n_s64_x(factor_pg, factor, 1)) {\n            if (svcmpne_n_s64(pg, svmod_s64_x(pg, i, factor), 0)) {\n                not_prime = svdup_b_z(factor_pg, true);\n            }\n        }\n\n        is_prime = svand_z(pg, is_prime, svcmpne_n_s64(pg, svmod_s64_x(pg, i, factor), 0));\n\n        svint64_t prime_numbers = svsel_s64(is_prime, i, svdup_n_s64(-1));\n\n        for (size_t j = 0; j < svcntd(); ++j) {\n            int64_t prime = svget64_s64(prime_numbers, j);\n            if (prime != -1) {\n                primes.push_back(prime);\n            }\n        }\n    }\n\n    return primes;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint count_upper_simd(const std::string &s) {\n    size_t len = s.length();\n    const char *str = s.c_str();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t vowels = svdup_n_u8('A');\n    vowels = svorr_z(svptrue_b8(), vowels, svdup_n_u8('E'));\n    vowels = svorr_z(svptrue_b8(), vowels, svdup_n_u8('I'));\n    vowels = svorr_z(svptrue_b8(), vowels, svdup_n_u8('O'));\n    vowels = svorr_z(svptrue_b8(), vowels, svdup_n_u8('U'));\n\n    for (size_t i = 0; i < len; i += svcntw()) {\n        svbool_t pg_even = svwhilelt_b64(i, len);\n        svuint8_t chars = svld1(pg_even, (const uint8_t *)str + i);\n        svbool_t is_vowel = svcmpeq(pg_even, chars, vowels);\n        svbool_t is_upper = svcmpge(pg_even, chars, svdup_n_u8('A')) & svcmpge(pg_even, svdup_n_u8('Z'), chars);\n        svbool_t is_even_index = svcmpge(pg_even, svindex_u64(0, 1), svdup_n_u64(i) & 1);\n        svbool_t is_valid = is_vowel & is_upper & is_even_index;\n        count += svcntp_b64(pg_even, is_valid);\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint count_upper_simd(const std::string &s) {\n    size_t len = s.length();\n    const char *str = s.c_str();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t sv_str = svld1_u8(pg, str);\n\n    svbool_t even_indices = svwhilelt_b64(0, len / 2) & svcmpeq_n_u64(pg, svindex_u64(0, 2), 0);\n    svbool_t is_upper_vowel = svcmpeq_n_u8(pg, sv_str, 'A') |\n                              svcmpeq_n_u8(pg, sv_str, 'E') |\n                              svcmpeq_n_u8(pg, sv_str, 'I') |\n                              svcmpeq_n_u8(pg, sv_str, 'O') |\n                              svcmpeq_n_u8(pg, sv_str, 'U');\n\n    svbool_t valid_vowels = even_indices & is_upper_vowel;\n    count = svcntp_b64(pg, valid_vowels);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint count_upper_simd(const std::string &s) {\n    size_t len = s.length();\n    const char *str = s.c_str();\n\n    svbool_t pg = svwhilelt_b64(0, len);\n    svuint8_t v = svld1_u8(pg, str);\n\n    svbool_t even_indices = svwhilelt_b64(0, len / 2) & svcmpeq_n_u64(pg, svindex_u64(0, 2), 0);\n    svbool_t is_upper_vowel = svcmpeq_n_u8(pg, v, 'A') | svcmpeq_n_u8(pg, v, 'E') | svcmpeq_n_u8(pg, v, 'I') | svcmpeq_n_u8(pg, v, 'O') | svcmpeq_n_u8(pg, v, 'U');\n\n    svbool_t valid_positions = even_indices & is_upper_vowel;\n    int count = svcntp_b64(pg, valid_positions);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint count_upper_simd(const std::string &s) {\n    size_t n = s.length();\n    const char *str = s.c_str();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint8_t sv_str = svld1_u8(pg, (const uint8_t *)str);\n\n    svbool_t even_indices = svcmpge_n_u64(pg, svindex_u64(0, 1), 1);\n    svbool_t is_upper_vowel = svcmpeq_n_u8(pg, sv_str, 'A') |\n                              svcmpeq_n_u8(pg, sv_str, 'E') |\n                              svcmpeq_n_u8(pg, sv_str, 'I') |\n                              svcmpeq_n_u8(pg, sv_str, 'O') |\n                              svcmpeq_n_u8(pg, sv_str, 'U');\n\n    is_upper_vowel = svand_z(pg, is_upper_vowel, even_indices);\n\n    count = svcntp_b64(pg, is_upper_vowel);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_109_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstring>\n\nint count_upper_simd(const std::string &s) {\n    size_t len = s.length();\n    const char *str = s.c_str();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b8(0, len);\n    svuint8_t vowels = svdup_n_u8('A');\n    vowels = svorr_n_u8_x(pg, vowels, 'E');\n    vowels = svorr_n_u8_x(pg, vowels, 'I');\n    vowels = svorr_n_u8_x(pg, vowels, 'O');\n    vowels = svorr_n_u8_x(pg, vowels, 'U');\n\n    for (size_t i = 0; i < len; i += svcntb()) {\n        svbool_t pg_even = svwhilelt_b8(i, len);\n        svuint8_t chars = svld1_u8(pg_even, &str[i]);\n        svbool_t is_vowel = svcmpeq_u8(pg_even, chars, vowels);\n        svbool_t is_upper = svcmpge_u8(pg_even, chars, 'A') & svcmple_u8(pg_even, chars, 'Z');\n        svbool_t is_even_index = svwhilelt_b8(i / 2, (len + 1) / 2);\n        svbool_t valid = is_vowel & is_upper & is_even_index;\n        count += svcntp_b8(pg_even, valid);\n        i += svcntb() - 1;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vindex = svindex_s32(0, 1);\n    svint32_t vn = svdup_n_s32(n);\n    svint32_t vodd_even = svadd_n_s32_x(pg, vn, n % 2 == 0 ? 2 : 1);\n\n    svst1_s32(pg, pile.data(), svadd_s32_x(pg, vn, svadd_s32_m(pg, vindex, vodd_even)));\n\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vindex = svindex_s32(0, 1);\n    svint32_t vn = svdup_n_s32(n);\n    svint32_t vinc = svadd_n_s32_x(pg, vn, 2 - (n & 1));\n    svint32_t vresult = svadd_s32_x(pg, vn, vinc);\n    svst1_s32(pg, pile.data(), vresult);\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t vindex = svindex_s64(0, 1);\n    svint64_t vn = svdup_n_s64(n);\n    svint64_t vodd_even = svadd_n_s64_x(pg, vn, 1);\n    svint64_t vresult = svsel_s64(svcmpeq_n_s64(pg, vn % 2, 1), svadd_n_s64_x(pg, vn, 1), svadd_n_s64_x(pg, vn, 2));\n    svst1_s64(pg, pile.data(), vresult);\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vindex = svindex_s32(0, 1);\n    svint32_t vn = svdup_n_s32(n);\n    svint32_t vodd_even = svadd_n_s32_x(pg, vn, n % 2 == 0 ? 2 : 1);\n\n    svst1_s32(pg, pile.data(), svadd_s32_x(pg, vn, vodd_even));\n\n    return pile;\n}\n```"}
{"task_id": "SimdBench_110_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nstd::vector<int> make_a_pile_simd(int n) {\n    std::vector<int> pile(n);\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t vindex = svindex_s64(0, 1);\n    svint64_t vn = svdup_n_s64(n);\n    svint64_t vodd_even = svadd_n_s64_x(pg, vn, 1);\n    svint64_t vresult = svsel_s64(svcmpeq_n_s64(pg, vn % 2, 1), svadd_s64_x(pg, vn, 1), vodd_even);\n    svst1_s64(pg, pile.data(), vresult);\n    return pile;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    int64_t count = m - n + 1;\n    svint64_t vg = svindex_s64(0, 1);\n    svint64_t start_seq = svadd_n_s64_x(svptrue_b64(), vg, n);\n    svint64_t end_seq = svadd_n_s64_x(svptrue_b64(), vg, m);\n    svint64_t seq = svadd_s64_x(svptrue_b64(), start_seq, end_seq);\n    svint64_t sum = svaddv_s64_x(svptrue_b64(), seq);\n\n    int64_t total_sum = svaddv_s64(svptrue_b64(), sum);\n    int64_t avg = std::floor(total_sum / (2.0 * count));\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    int64_t count = m - n + 1;\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b64(n, m + 1);\n    svint64_t vn = svindex_s64(0, 1);\n    vn = svadd_s64_x(pg, vn, n);\n\n    svint64_t sum_vec = svaddv_s64(pg, vn);\n    sum = svaddv(pg, sum_vec);\n\n    int64_t avg = std::floor(static_cast<double>(sum) / count);\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    int64_t count = m - n + 1;\n    svint64_t vn = svdup_n_s64(n);\n    svint64_t vm = svdup_n_s64(m);\n    svint64_t vcount = svdup_n_s64(count);\n\n    svint64_t vsum = svadd_s64_x(svptrue_b64(), vn, svsub_s64_x(svptrue_b64(), vm, vn));\n    vsum = svmla_s64_x(svptrue_b64(), vsum, svsub_s64_x(svptrue_b64(), vm, vn), svdup_n_s64(count - 2));\n\n    int64_t sum = svaddv_s64(svptrue_b64(), vsum);\n    int64_t avg = std::floor(static_cast<double>(sum) / count);\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    int64_t count = m - n + 1;\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b64(n, m + 1);\n    svint64_t vn = svindex_s64(n, 1);\n    svint64_t vm = svadd_n_s64_x(pg, vn, 0);\n\n    sum = svaddv_s64_x(pg, vm);\n\n    int64_t avg = std::floor(static_cast<double>(sum) / count);\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_111_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <string>\n\nstd::string rounded_avg_simd(int64_t n, int64_t m) {\n    if (n > m) return \"-1\";\n\n    int64_t count = m - n + 1;\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b64(n, m + 1);\n    svint64_t vn = svindex_s64(0, 1);\n    vn = svadd_n_s64_x(pg, vn, n);\n\n    svint64_t sum_vec = svaddv_s64(pg, vn);\n    sum = svaddv(pg, sum_vec);\n\n    int64_t avg = std::floor(static_cast<double>(sum) / count);\n\n    std::string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vindex = svindex_s32(0, 1);\n    svint32_t vfactorial = svdup_n_s32(1);\n    svint32_t vsum = svdup_n_s32(1);\n    svint32_t vmod = svdup_n_s32(10000);\n\n    for (int i = 1; i <= n; ++i) {\n        svbool_t pgi = svwhilelt_b32(i, n);\n        svint32_t vi = svdup_n_s32(i);\n        svint32_t vi_plus_one = svadd_n_s32_x(pgi, vi, 1);\n\n        svbool_t is_even = svcmpne_n_s32(pgi, svand_n_s32_x(pgi, vi, 1), 0);\n        svint32_t vfactorial_next = svmul_s32_x(pgi, vfactorial, vi_plus_one);\n        svint32_t vsum_next = svadd_s32_x(pgi, vsum, vi_plus_one);\n\n        vfactorial = svsel_s32(is_even, vfactorial_next, vfactorial);\n        vsum = svsel_s32(is_even, vsum, vsum_next);\n\n        svint32_t vresult = svsel_s32(is_even, svrem_n_s32_x(pgi, vfactorial, vmod), vsum);\n        svst1_s32(pgi, &result[i], vresult);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vindex = svindex_s32(0, 1);\n    svint32_t vone = svdup_n_s32(1);\n    svint32_t vfactorial = svdup_n_s32(1);\n    svint32_t vsum = svdup_n_s32(1);\n    svint32_t vmod = svdup_n_s32(10000);\n\n    for (int i = 0; i < n; i += svcntw()) {\n        svint32_t vi = svadd_n_s32_x(pg, vindex, i);\n        svbool_t even = svcmpge_n_s32(pg, vi, 2);\n\n        svint32_t vfact = svwhilelt_b32_s32(vone, vi);\n        vfactorial = svmul_s32_x(pg, vfactorial, vfact);\n        vfactorial = svmod_s32_x(pg, vfactorial, vmod);\n\n        svint32_t vadd = svadd_s32_x(pg, vsum, vi);\n        vsum = svadd_s32_x(pg, vsum, vadd);\n\n        svint32_t vresult = svsel_s32(even, vfactorial, vsum);\n        svst1_s32(pg, &result[i], vresult);\n\n        pg = svwhilelt_b32(i, n);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vindex = svindex_s32(0, 1);\n\n    svint32_t vfactorial = svdup_n_s32(1);\n    svint32_t vsum = svdup_n_s32(1);\n\n    for (int i = 1; i <= n; ++i) {\n        svbool_t pgi = svwhilelt_b32(i, n);\n        svint32_t vi = svadd_n_s32(pgi, vindex, i);\n\n        svbool_t peven = svcmpge_n_s32(pgi, svmod_n_s32(pgi, vi, 2), 0);\n        svbool_t podd = svcmplt_n_s32(pgi, svmod_n_s32(pgi, vi, 2), 1);\n\n        vfactorial = svsel_s32(peven, svmul_s32_x(pgi, vfactorial, vi), vfactorial);\n        vsum = svsel_s32(podd, svadd_s32_x(pgi, vsum, vi), vsum);\n\n        svint32_t vresult = svsel_s32(peven, svmod_n_s32(pgi, vfactorial, 10000), vsum);\n\n        svst1_s32(pgi, &result[i], vresult);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t vindex = svindex_s32(0, 1);\n\n    svint32_t vfactorial = svdup_n_s32(1);\n    svint32_t vsum = svdup_n_s32(1);\n\n    for (int i = 1; i <= n; ++i) {\n        svbool_t is_even = svcmpeq_n_s32(pg, vindex, i % 2 == 0 ? i : -1);\n        svint32_t vi = svadd_n_s32_x(pg, vindex, 1);\n\n        vfactorial = svwhilelt_b32(0, i) ? svmul_s32_x(pg, vfactorial, vi) : vfactorial;\n        vsum = svadd_n_s32_x(pg, vsum, vi);\n\n        svint32_t vresult = svsel_s32(is_even, svrem_n_s32_x(pg, vfactorial, 10000), vsum);\n        result[i - 1] = svlastb_s32(pg, vresult);\n\n        pg = svwhilelt_b32(i, n);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_112_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> func_simd(int n) {\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t indices = svindex_s32(0, 1);\n\n    svint32_t even_mask = svcmpge_n_s32(pg, indices, 2);\n    svint32_t odd_mask = svcmplt_n_s32(pg, indices, 2);\n\n    svint32_t factorials = svdup_n_s32(1);\n    svint32_t sums = svdup_n_s32(1);\n\n    for (int i = 1; svptest_any(pg, svcmplt_n_s32(pg, indices, n)); ++i, indices = svadd_n_s32_x(pg, indices, 1)) {\n        svbool_t even = svcmpge_n_s32(pg, indices, 2);\n        svbool_t odd = svcmplt_n_s32(pg, indices, 2);\n\n        factorials = svmul_s32_x(even, factorials, svadd_n_s32_x(even, indices, 1));\n        factorials = svmod_n_s32_x(even, factorials, 10000);\n\n        sums = svadd_s32_x(odd, sums, svadd_n_s32_x(odd, indices, 1));\n\n        svint32_t temp = svsel_s32(even, factorials, sums);\n        svst1_s32(pg, &result[i], temp);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t sv_i = svindex_u32(0, 1);\n\n    do {\n        uint32_t i = svlastb_u32(pg, sv_i);\n        int num = i + 1;\n        int original_num = num;\n        int reversed_num = 0;\n\n        while (num > 0) {\n            int digit = num % 10;\n            reversed_num = reversed_num * 10 + digit;\n            num /= 10;\n        }\n\n        if (original_num == reversed_num) {\n            if (original_num % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n\n        pg = svwhilelt_b32(sv_i, n);\n        sv_i = svadd_n_u32_x(pg, sv_i, 1);\n    } while (svptest_any(pg));\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t v = svindex_u32(0, 1);\n\n    svuint32_t div = svdiv_n_u32(pg, v, 10);\n    svuint32_t rem = svrem_n_u32(pg, v, 10);\n    svuint32_t rev = svrem_n_u32(pg, v, 10);\n\n    while (svptest_any(pg, svcmpne_n_u32(pg, div, 0))) {\n        rev = svadd_n_u32_x(pg, svmul_n_u32_x(pg, rev, 10), rem);\n        v = div;\n        div = svdiv_n_u32(pg, v, 10);\n        rem = svrem_n_u32(pg, v, 10);\n    }\n\n    svbool_t is_palindrome = svcmpeq_n_u32(pg, v, rev);\n    svbool_t is_even = svext_x(pg, svcmpne_n_u32(pg, svand_n_u32_x(pg, v, 1), 0));\n    svbool_t is_odd = svnot_x(pg, is_even);\n\n    int even_count = svcntp_b32(pg, svand_z(pg, is_palindrome, is_even));\n    int odd_count = svcntp_b32(pg, svand_z(pg, is_palindrome, is_odd));\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t v = svindex_u64(0, 1);\n\n    while (svptest_any(pg)) {\n        svuint64_t num = svadd_x(pg, v, svdup_n_u64(1));\n        svbool_t is_even = svcmpne_n_u64(pg, svand_x(pg, num, svdup_n_u64(1)), 0);\n        svbool_t is_odd = svcmpeq_n_u64(pg, svand_x(pg, num, svdup_n_u64(1)), 1);\n\n        svbool_t is_palindrome = svcreate2_b64(svcmpne_n_u64(pg, num, 0));\n\n        for (size_t i = 0; i < svcntd(); ++i) {\n            uint64_t current_num = svget1(num, i);\n            uint64_t reversed_num = 0;\n            uint64_t temp = current_num;\n\n            while (temp != 0) {\n                reversed_num = reversed_num * 10 + temp % 10;\n                temp /= 10;\n            }\n\n            if (current_num == reversed_num) {\n                is_palindrome = svinsert_b64(is_palindrome, i, true);\n            }\n        }\n\n        even_count += svcntp_b64(pg, svand_b_z(pg, is_palindrome, is_even));\n        odd_count += svcntp_b64(pg, svand_b_z(pg, is_palindrome, is_odd));\n\n        v = svadd_x(pg, v, svdup_n_u64(svcntd()));\n        pg = svwhilelt_b64(0, n);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t v = svindex_u64(0, 1);\n\n    int even_count = 0;\n    int odd_count = 0;\n\n    while (svptest_any(pg)) {\n        svuint64_t num = svadd_n_u64(pg, v, 1);\n        svuint64_t rev = 0;\n        svuint64_t temp = num;\n\n        while (svptest_any(svwhilelt_b64(0, temp))) {\n            svuint64_t digit = svmod_n_u64(pg, temp, 10);\n            rev = svadd_n_u64(pg, svmls_n_u64(pg, rev, 10), digit);\n            temp = svdiv_n_u64(pg, temp, 10);\n        }\n\n        svbool_t is_palindrome = svcmpne_n_u64(pg, num, rev);\n        svbool_t is_even = svcmpne_n_u64(pg, svand_n_u64_x(pg, num, 1), 0);\n\n        even_count += svcntp_b64(pg, svand_z(pg, is_palindrome, is_even));\n        odd_count += svcntp_b64(pg, svand_z(pg, is_palindrome, svnot_z(pg, is_even)));\n\n        v = svadd_n_u64_m(pg, v, svcntp_b64(pg, pg));\n        pg = svwhilelt_b64(v, n);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_113_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> even_odd_palindrome_simd(int n) {\n    svbool_t pg = svwhilelt_b32(0, n);\n    svuint32_t v = svindex_u32(0, 1);\n\n    int even_count = 0;\n    int odd_count = 0;\n\n    while (svptest_any(pg)) {\n        svuint32_t num = svadd_n_u32(pg, v, 1);\n        svuint32_t rev = 0;\n        svuint32_t temp = num;\n\n        while (svptest_any(svwhilelt_b32(0, temp))) {\n            svuint32_t digit = svmod_n_u32(pg, temp, 10);\n            rev = svadd_n_u32(pg, svmls_n_u32(pg, rev, 10), digit);\n            temp = svdiv_n_u32(pg, temp, 10);\n        }\n\n        svbool_t is_palindrome = svcmpne_n_u32(pg, num, rev);\n        svbool_t is_even = svcmpne_n_u32(pg, svand_n_u32_x(pg, num, 1), 0);\n\n        even_count += svcntp_b32(pg, svand_z(pg, is_palindrome, is_even));\n        odd_count += svcntp_b32(pg, svand_z(pg, is_palindrome, svnot_z(pg, is_even)));\n\n        v = svadd_n_u32_x(pg, v, svcntp_b32(pg, pg));\n        pg = svwhilelt_b32(v, n);\n    }\n\n    return {even_count, odd_count};\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nint count_nums_simd(std::vector<int> n) {\n    size_t vector_length = svcntw();\n    size_t i = 0;\n    int count = 0;\n\n    for (; i + vector_length <= n.size(); i += vector_length) {\n        svbool_t pg = svwhilelt_b32(i, n.size());\n        svint32_t v = svld1_s32(pg, &n[i]);\n\n        svint32_t abs_v = svabs_s32_x(pg, v);\n        svint32_t digit_sum = svadd_n_s32_x(pg, svdiv_n_s32_x(pg, abs_v, 10), svmod_n_s32_x(pg, abs_v, 10));\n        digit_sum = svadd_n_s32_x(pg, digit_sum, svdiv_n_s32_x(pg, svsub_s32_x(pg, abs_v, svmul_n_s32_x(pg, svdiv_n_s32_x(pg, abs_v, 10), 10)), 10));\n\n        svbool_t mask = svcmplt_s32(pg, digit_sum, 1);\n        count += svcntp_b32(pg, mask);\n    }\n\n    for (; i < n.size(); ++i) {\n        int num = n[i];\n        int sum = 0;\n        bool negative = num < 0;\n        if (negative) num = -num;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (negative) sum -= sum * 2;\n        if (sum > 0) count++;\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (i = 0; i <= n.size() - vector_length; i += vector_length) {\n        svbool_t pg = svwhilelt_b64(i, n.size());\n        svint32_t v = svld1_s32(pg, &n[i]);\n\n        // Calculate absolute values\n        svint32_t abs_v = svabs_s32_x(pg, v);\n\n        // Initialize sum of digits\n        svint32_t sum_digits = svdup_n_s32(0);\n\n        // Sum digits\n        while (svpmn_s32(pg, abs_v, 0)) {\n            svint32_t digits = svmod_n_s32(abs_v, 10);\n            sum_digits = svadd_s32_x(pg, sum_digits, digits);\n            abs_v = svdiv_n_s32_x(pg, abs_v, 10);\n        }\n\n        // Check if sum of digits is greater than 0\n        svbool_t pg_gt_zero = svcmpgt_n_s32(pg, sum_digits, 0);\n\n        // Count elements with sum of digits greater than 0\n        count += svcntp_b64(pg_gt_zero);\n    }\n\n    // Handle remaining elements\n    for (; i < n.size(); ++i) {\n        int num = n[i];\n        int sum_digits = 0;\n        int abs_num = abs(num);\n\n        while (abs_num > 0) {\n            sum_digits += abs_num % 10;\n            abs_num /= 10;\n        }\n\n        if (sum_digits > 0) {\n            count++;\n        }\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b32(0, n.size());\n    svint32_t v = svld1_s32(pg, &n[0]);\n\n    svint32_t sum_digits = svdup_n_s32(0);\n    svbool_t pg_pos = svcmge_s32(pg, v, 0);\n    svbool_t pg_neg = svcmgt_s32(pg, 0, v);\n\n    svint32_t abs_v = svabs_s32_x(pg, v);\n    svint32_t digits = svdiv_n_s32_x(pg, abs_v, 10);\n    sum_digits = svadd_s32_x(pg, sum_digits, digits);\n    sum_digits = svadd_s32_x(pg, sum_digits, svmod_n_s32_x(pg, abs_v, 10));\n\n    sum_digits = svsub_s32_z(pg_neg, sum_digits, svdup_n_s32(2));\n\n    svbool_t pg_sum_pos = svcmgt_s32(pg, sum_digits, 0);\n    count = svcntp_b32(pg_sum_pos);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b32(0, n.size());\n    svint32_t v = svld1_s32(pg, n.data());\n    svint32_t sum_digits = svdup_n_s32(0);\n\n    while (svptest_any(pg)) {\n        svint32_t abs_v = svabs_s32_x(pg, v);\n        svint32_t digits = svdiv_n_s32_x(pg, abs_v, 10);\n        sum_digits = svadd_s32_x(pg, sum_digits, digits);\n        sum_digits = svadd_s32_x(pg, sum_digits, svmod_n_s32_x(pg, abs_v, 10));\n        svint32_t mask = svcmpgt_s32(pg, sum_digits, 0);\n        count += svcntp_b32(pg, mask);\n        pg = svwhilelt_b32(svcntw(), n.size());\n        v = svld1_s32(pg, n.data() + svcntw());\n    }\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_114_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint count_nums_simd(std::vector<int> n) {\n    int count = 0;\n    svbool_t pg = svwhilelt_b64_s64(0, n.size());\n    svint32_t v = svld1_s32(pg, n.data());\n    svint32_t sum_digits = svdup_n_s32(0);\n\n    while (svptest_any(pg)) {\n        svint32_t abs_v = svabs_x(pg, v, sum_digits);\n        svint32_t digits = svdiv_n_s32(pg, abs_v, 10);\n        sum_digits = svadd_s32_x(pg, sum_digits, digits);\n        v = svdiv_n_s32(pg, v, 10);\n    }\n\n    svbool_t pg_sum = svcmpgt_n_s32(pg, sum_digits, 0);\n    count = svcntp_b64(pg_sum);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int N = arr.size();\n    svbool_t pg = svwhilelt_b64(0, N);\n\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t min_v = svdup_n_s32(INT32_MAX);\n    svint32_t max_v = svdup_n_s32(INT32_MIN);\n\n    for (int i = 0; i < N; ++i) {\n        min_v = svmin_s32_m(pg, min_v, v);\n        max_v = svmax_s32_m(pg, max_v, v);\n        v = svrshl_s32(v, v, 1);\n    }\n\n    int min_val = svminv_s32(pg, min_v);\n    int max_val = svmaxv_s32(pg, max_v);\n\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n\n    return (sorted_arr[0] == min_val) && (sorted_arr[N-1] == max_val);\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int N = arr.size();\n    svbool_t pg = svwhilelt_b64(0, N);\n\n    svint32_t v = svld1_s32(pg, arr.data());\n    svint32_t min_v = svmin_s32_x(pg, v, v);\n\n    for (int i = 1; i < N; ++i) {\n        svint32_t shifted_v = svld1_s32(pg, arr.data() + i);\n        min_v = svmin_s32_x(pg, min_v, shifted_v);\n    }\n\n    svint32_t sorted_v = svcreate1_s32_x(pg, arr[0]);\n    for (int i = 1; i < N; ++i) {\n        sorted_v = svmax_s32_x(pg, sorted_v, svcreate1_s32_x(pg, arr[i]));\n    }\n\n    return svptest_any(pg, svcmpeq_s32(pg, min_v, sorted_v));\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int N = arr.size();\n    svbool_t pg = svwhilelt_b64(0, N);\n\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t min_v = svdup_n_s32(arr[0]);\n    svint32_t max_v = svdup_n_s32(arr[0]);\n\n    for (int i = 1; i < N; ++i) {\n        svint32_t current = svld1_s32(pg, &arr[i]);\n        min_v = svmin_n_s32_m(pg, min_v, current);\n        max_v = svmax_n_s32_m(pg, max_v, current);\n    }\n\n    svbool_t sorted = svcmpeq_s32(pg, v, min_v) & svcmpeq_s32(pg, v, max_v);\n\n    return svptest_any(pg, sorted);\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <algorithm>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int N = arr.size();\n    svbool_t pg = svwhilelt_b32(0, N);\n\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t min_v = svdup_s32(arr[0]);\n    svint32_t max_v = svdup_s32(arr[0]);\n\n    for (int i = 1; i < N; ++i) {\n        min_v = svmin_s32_m(pg, min_v, v);\n        max_v = svmax_s32_m(pg, max_v, v);\n        v = svld1_s32(pg, &arr[i]);\n    }\n\n    int min_val = svminv_s32(pg, min_v);\n    int max_val = svmaxv_s32(pg, max_v);\n\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n\n    return (sorted_arr[0] == min_val && sorted_arr[N-1] == max_val);\n}\n```"}
{"task_id": "SimdBench_115_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool move_one_ball_simd(std::vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int N = arr.size();\n    svbool_t pg = svwhilelt_b64(0, N);\n\n    svint32_t v = svld1_s32(pg, arr.data());\n    svint32_t min_v = svmin_s32_x(pg, v, v);\n\n    for (int i = 1; i < N; ++i) {\n        svint32_t shifted_v = svExt(v, v, pg);\n        svint32_t curr_min = svmin_s32_x(pg, shifted_v, shifted_v);\n        if (svptest_any(pg, svcmpgt_s32(pg, curr_min, min_v))) {\n            return false;\n        }\n        min_v = curr_min;\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    size_t m = lst2.size();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v1 = svld1_s32(pg, lst1.data());\n    svbool_t even_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v1, 1), 0);\n\n    if (svptest_any(pg, even_mask)) {\n        pg = svwhilelt_b32(0, m);\n        svint32_t v2 = svld1_s32(pg, lst2.data());\n        svbool_t odd_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v2, 1), 1);\n\n        if (svptest_any(pg, odd_mask)) {\n            return \"YES\";\n        }\n    }\n\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    size_t m = lst2.size();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v1 = svld1_s32(pg, lst1.data());\n    svbool_t even_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v1, 1), 0);\n\n    if (svptest_any(pg, even_mask)) {\n        pg = svwhilelt_b32(0, m);\n        svint32_t v2 = svld1_s32(pg, lst2.data());\n        svbool_t odd_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v2, 1), 1);\n\n        if (svptest_any(pg, odd_mask)) {\n            return \"YES\";\n        }\n    }\n\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    size_t m = lst2.size();\n\n    bool lst1_all_even = true;\n    bool lst2_has_even = false;\n\n    for (size_t i = 0; i < n; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v1 = svld1_s32(pg, &lst1[i]);\n        svbool_t even_mask = svcmpne_n_s32(pg, svand_n_s32(pg, v1, 1), 0);\n        if (!svptest_any(pg, even_mask)) {\n            lst1_all_even = false;\n            break;\n        }\n    }\n\n    for (size_t i = 0; i < m; i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, m);\n        svint32_t v2 = svld1_s32(pg, &lst2[i]);\n        svbool_t even_mask = svcmpne_n_s32(pg, svand_n_s32(pg, v2, 1), 0);\n        if (svptest_any(pg, even_mask)) {\n            lst2_has_even = true;\n            break;\n        }\n    }\n\n    if (lst1_all_even) {\n        return \"YES\";\n    } else if (lst2_has_even) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    size_t m = lst2.size();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v1 = svld1_s32(pg, lst1.data());\n    svbool_t even_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v1, 1), 0);\n\n    if (svptest_any(pg, even_mask)) {\n        pg = svwhilelt_b32(0, m);\n        svint32_t v2 = svld1_s32(pg, lst2.data());\n        svbool_t even_mask2 = svcmpne_n_s32(pg, svand_n_s32_x(pg, v2, 1), 0);\n\n        if (svptest_any(pg, even_mask2)) {\n            return \"YES\";\n        }\n    }\n\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_116_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::string myexchange_simd(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    size_t n = lst1.size();\n    size_t m = lst2.size();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v1 = svld1_s32(pg, lst1.data());\n    svbool_t even_mask = svcmpne_n_s32(pg, svand_n_s32_x(pg, v1, 1), 0);\n\n    if (svptest_any(pg, even_mask)) {\n        pg = svwhilelt_b32(0, m);\n        svint32_t v2 = svld1_s32(pg, lst2.data());\n        svbool_t even_mask2 = svcmpne_n_s32(pg, svand_n_s32_x(pg, v2, 1), 0);\n\n        if (svptest_any(pg, even_mask2)) {\n            return \"YES\";\n        }\n    }\n\n    return \"NO\";\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> &lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto &str : lst) {\n        size_t length = str.length();\n        svbool_t pg = svwhilelt_b64(0, length);\n        svuint8_t digits = svld1_u8(pg, (const uint8_t *)str.c_str());\n\n        svbool_t is_odd = svcmpne_n_u8(pg, digits % 2, 0);\n        uint64_t odd_count = svcntp_b64(is_odd, pg);\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t length = str.length();\n        svbool_t pg = svwhilelt_b64(0, length);\n        svuint8_t digits = svld1_u8(pg, str.data());\n\n        svuint8_t odd_mask = svdup_n_u8('1' - '0');\n        svuint8_t even_mask = svdup_n_u8('0' - '0');\n        svuint8_t is_odd = svcmpne_n_u8(pg, svand_z(pg, digits, svdup_n_u8(1)), odd_mask);\n\n        uint64_t odd_count = svcntp_b64(pg, is_odd);\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t length = str.length();\n        svbool_t pg = svwhilelt_b32(0, length);\n        svuint8_t digits = svld1_u8(pg, (uint8_t*)str.c_str());\n\n        svbool_t is_odd = svcmpne_n_u8(pg, svand_n_u8(pg, digits, 1), 0);\n        uint64_t odd_count = svcntp_b32(pg, is_odd);\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto& str : lst) {\n        size_t length = str.length();\n        svbool_t pg = svwhilelt_b32(0, length);\n        svuint8_t sv_str = svld1_u8(pg, str.data());\n\n        svuint8_t odd_digits = svadd_n_u8_x(pg, sv_str, '0');\n        odd_digits = svand_n_u8_x(pg, odd_digits, 1);\n        uint32_t odd_count = svcntp_b32(pg, odd_digits);\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_117_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> odd_count_simd(const std::vector<std::string> & lst) {\n    std::vector<std::string> result;\n    result.reserve(lst.size());\n\n    for (const auto &str : lst) {\n        size_t length = str.length();\n        svbool_t pg = svwhilelt_b8(0, length);\n        svuint8_t digits = svld1_u8(pg, str.data());\n\n        svuint8_t odd_mask = svdup_n_u8(1);\n        svuint8_t is_odd = svand_u8_z(pg, digits, odd_mask);\n        uint64_t odd_count = svcntp_b8(pg, is_odd);\n\n        std::string output = \"the number of odd elements \";\n        output += std::to_string(odd_count);\n        output += \"n the str\";\n        output += std::to_string(odd_count);\n        output += \"ng \";\n        output += std::to_string(odd_count);\n        output += \" of the \";\n        output += std::to_string(odd_count);\n        output += \"nput.\";\n\n        result.push_back(output);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    int64_t min_sum = LLONG_MAX;\n    int64_t current_sum = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t v = svld1_s64(pg, &nums[0]);\n    svint64_t min_v = svdup_n_s64(LLONG_MAX);\n    svint64_t current_v = svdup_n_s64(0);\n\n    do {\n        current_v = svadd_s64_x(pg, current_v, v);\n        min_v = svmin_s64_x(pg, min_v, current_v);\n        v = svld1_gather_s64index_s64(pg, &nums[0], svindex_s64(0, 1));\n    } while (svptest_any(pg, svwhilelt_b64(svcntw(), n)));\n\n    min_sum = svminv_s64(pg, min_v);\n    current_sum = svminv_s64(pg, current_v);\n\n    if (current_sum < min_sum) {\n        min_sum = current_sum;\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    int64_t min_sum = INT64_MAX;\n    int64_t current_sum = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t v_nums = svld1_s64(pg, &nums[0]);\n    svint64_t v_current_sum = svdup_n_s64(0);\n    svint64_t v_min_sum = svdup_n_s64(INT64_MAX);\n\n    while (svptest_any(pg)) {\n        v_current_sum = svadd_s64_x(pg, v_current_sum, v_nums);\n        v_min_sum = svmin_s64_x(pg, v_min_sum, v_current_sum);\n\n        if (svptest_any(pg)) {\n            v_nums = svld1_s64(pg, &nums[svcntp_b64(pg)]);\n        }\n    }\n\n    min_sum = svminv_s64(pg, v_min_sum);\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    int64_t min_sum = LLONG_MAX;\n    int64_t current_sum = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t v_nums = svld1_s64(pg, &nums[0]);\n    svint64_t v_current_sum = svdup_s64(0);\n    svint64_t v_min_sum = svdup_s64(LLONG_MAX);\n\n    while (svptest_any(pg)) {\n        v_current_sum = svadd_s64_x(pg, v_current_sum, v_nums);\n        v_min_sum = svmin_s64_x(pg, v_min_sum, v_current_sum);\n\n        if (svptest_any(svcmplt_s64(pg, v_current_sum, 0))) {\n            v_current_sum = svsel_s64(svcmplt_s64(pg, v_current_sum, 0), svdup_s64(0), v_current_sum);\n        }\n\n        pg = svwhilelt_b64(svcntw(), n);\n        v_nums = svld1_s64(pg, &nums[svcntw()]);\n    }\n\n    min_sum = svminv_s64(pg, v_min_sum);\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    int64_t min_sum = LLONG_MAX;\n    int64_t current_sum = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t v_nums = svld1_s64(pg, &nums[0]);\n    svint64_t v_current_sum = svdup_s64(0);\n    svint64_t v_min_sum = svdup_s64(LLONG_MAX);\n\n    while (svptest_any(pg, pg)) {\n        v_current_sum = svadd_s64_x(pg, v_current_sum, v_nums);\n        v_min_sum = svmin_s64_x(pg, v_min_sum, v_current_sum);\n\n        svint64_t v_temp = svld1_s64(pg, &nums[svcntp_b64(pg)]);\n        v_nums = svadd_s64_x(pg, v_nums, v_temp);\n\n        pg = svwhilelt_b64(svcntp_b64(pg), n);\n    }\n\n    min_sum = svminv_s64(pg, v_min_sum);\n    current_sum = svaddv_s64(pg, v_current_sum);\n\n    if (current_sum < min_sum) {\n        min_sum = current_sum;\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_118_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nint64_t minSubArraySum_simd(const std::vector<int64_t>& nums) {\n    size_t n = nums.size();\n    if (n == 0) return 0;\n\n    const int64_t* data = nums.data();\n    int64_t min_sum = LLONG_MAX;\n    int64_t current_sum = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint64_t v = svld1_s64(pg, &data[0]);\n    svint64_t min_v = svdup_n_s64(LLONG_MAX);\n    svint64_t current_v = svdup_n_s64(0);\n\n    do {\n        current_v = svadd_s64_x(pg, current_v, v);\n        min_v = svmin_s64_x(pg, min_v, current_v);\n        v = svld1_s64(pg, &data[svcntp_b64(pg, 0)]);\n    } while (svptest_any(pg, svwhilelt_b64(svcntp_b64(pg, 0), n)));\n\n    min_sum = svminv_s64(pg, min_v);\n\n    current_sum = 0;\n    for (size_t i = svcntw(); i < n; ++i) {\n        current_sum += nums[i];\n        if (current_sum < min_sum) {\n            min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg = svwhilelt_b64(i, rows);\n        svuint8_t water = svld1(pg, &grid[i][0]);\n        svuint8_t bucket = svdup_n_u8(capacity);\n        svuint8_t remaining = svqsub_u8_x(pg, water, bucket);\n\n        while (svptest_any(pg, svcmpeq_n_u8(pg, remaining, 0))) {\n            total_buckets++;\n            remaining = svqsub_u8_x(pg, remaining, bucket);\n        }\n\n        if (svptest_any(pg, svcmpeq_n_u8(pg, remaining, 0))) {\n            total_buckets++;\n        }\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg = svwhilelt_b64(0, cols);\n        svuint8_t water = svld1_u8(pg, &grid[i][0]);\n        svuint8_t bucket = svdup_n_u8(capacity);\n\n        svuint8_t remaining = svqsub_u8_x(pg, water, bucket);\n        svuint8_t needed_buckets = svdiv_n_u8_x(pg, water, bucket);\n\n        total_buckets += svaddv_x(pg, needed_buckets);\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg = svwhilelt_b32(0, cols);\n        svint32_t v_capacity = svdup_n_s32(capacity);\n        svint32_t v_water = svld1(pg, &grid[i][0]);\n        svint32_t v_buckets = svdiv_n_s32_x(pg, v_water, v_capacity);\n        total_buckets += svaddv(pg, v_buckets);\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg = svwhilelt_b32(0, cols);\n        svint32_t v = svld1(pg, &grid[i][0]);\n        int local_buckets = 0;\n\n        while (svptest_any(pg, svcmpeq_n_s32(pg, v, 0))) {\n            svint32_t water = svadd_n_s32_m(pg, v, -capacity);\n            svint32_t mask = svcmpge_n_s32(pg, water, 0);\n            v = svsel_s32(mask, water, v);\n            local_buckets += svcntp_b32(pg, mask);\n        }\n\n        total_buckets += local_buckets;\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_119_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint max_fill_simd(const std::vector<std::vector<int>> &grid, int capacity) {\n    size_t rows = grid.size();\n    size_t cols = grid[0].size();\n    int total_buckets = 0;\n\n    for (size_t i = 0; i < rows; ++i) {\n        svbool_t pg = svwhilelt_b64(0, cols);\n        svuint8_t sv_row = svld1_u8(pg, &grid[i][0]);\n        svuint8_t sv_capacity = svdup_n_u8(capacity);\n\n        svuint8_t sv_buckets = svdiv_n_u8_z(pg, sv_row, sv_capacity);\n        svuint8_t sv_remainder = svrem_n_u8_z(pg, sv_row, sv_capacity);\n        svuint8_t sv_needed_buckets = svadd_n_u8_z(pg, sv_buckets, svcmpne_n_u8(pg, sv_remainder, 0));\n\n        total_buckets += svaddv_u8(pg, sv_needed_buckets);\n    }\n\n    return total_buckets;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b16(0, n);\n    svint16_t v = svld1_vnum_s16(pg, &lst[0]);\n\n    svbool_t even_pos = svcreate_b16(0, 1);\n    even_pos = svwhilelt_b16(0, n / 2);\n\n    svint16_t odd_vals = svand_z_s16_s16(v, 1);\n    odd_vals = svsel_s16(even_pos, odd_vals, svdup_n_s16(0));\n\n    sum = svaddv_s16(svptrue_b16(), odd_vals);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b16(0, n);\n    svint16_t v = svld1_s16(pg, &lst[0]);\n    svint16_t even_pos_mask = svcreate2_s16(0x0001, 0x0000);\n    svbool_t even_pos = svcmpne_s16(pg, even_pos_mask, 0);\n\n    svint16_t odd_mask = svdup_n_s16(1);\n    svbool_t is_odd = svcmpne_s16(pg, svand_x(pg, v, odd_mask), 0);\n\n    svbool_t filter = svand_z(pg, even_pos, is_odd);\n    svint16_t filtered_vals = svsel_s16(filter, v, svdup_n_s16(0));\n\n    sum = svaddv_s16(filter, filtered_vals);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b16(0, n);\n    svint16_t v = svld1(pg, &lst[0]);\n\n    svbool_t even_pos = svcmpge_n_u16(pg, svindex_u16(0, 1));\n    svint16_t odd_vals = svand_z(pg, v, 1);\n    svint16_t even_odd_vals = svsel_s16(even_pos, odd_vals, svdup_n_s16(0));\n\n    sum = svaddv(svptrue_b64(), svpmul_x(svptrue_b64(), even_odd_vals, even_odd_vals));\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b16(0, n);\n    svint16_t v = svld1_s16(pg, &lst[0]);\n\n    svbool_t even_pos = svcmpge_n_u16(pg, svindex_u16(0, 1), 1);\n    svbool_t odd_val = svcmpge_n_u16(pg, svabs_s16_x(pg, v, v), 1);\n\n    svbool_t mask = svmov_b_not_b_z(pg, svand_z(pg, even_pos, odd_val));\n\n    svint16_t odd_elements = svsel_s16(mask, v, svdup_n_s16(0));\n    sum = svaddv_s16(mask, odd_elements);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_120_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint64_t solution_simd(const std::vector<int16_t>& lst) {\n    size_t n = lst.size();\n    int64_t sum = 0;\n\n    svbool_t pg = svwhilelt_b16(0, n);\n    svint16_t v = svld1_vnum_s16(pg, &lst[0], n);\n\n    svbool_t even_pos = svcmpne_n_u16(pg, svindex_u16(0, 1), 1);\n    svbool_t odd_val = svcmpne_n_u16(pg, svand_n_u16(pg, v, 1), 0);\n\n    svbool_t mask = svand_z(pg, even_pos, odd_val);\n    svint16_t odd_elems = svsel_s16(mask, v, svdup_n_s16(0));\n\n    sum = svaddv_s16(mask, odd_elems);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    svbool_t pg = svwhilelt_b64(0, k);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t mask = svdup_n_s32(99);\n    svint32_t filtered = svsel_s32(svcmple_s32(pg, v, mask), v, svdup_n_s32(0));\n    sum = svaddv_s32(pg, filtered);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    svbool_t pg = svwhilelt_b64(0, k);\n    svint32_t v = svld1_s32(pg, arr.data());\n    svint32_t mask = svdup_n_s32(pg, 99);\n    svint32_t filtered = svsel_s32(svcmple_s32(pg, v, mask), v, svdup_n_s32(pg, 0));\n    sum = svaddv_s32(pg, filtered);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    svbool_t pg = svwhilelt_b64(0, k);\n    svint32_t v = svld1_s32(pg, arr.data());\n    svint32_t v_abs = svabs_s32_x(pg, v);\n    svbool_t mask = svcmplt_n_u32(pg, svcmpge_n_u32(pg, v_abs, 10, 100));\n    sum = svaddv_s32_x(pg, svsel_s32(mask, v, svdup_n_s32(0)));\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, k);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t v_two_digits = svand_n_s32_z(pg, v, ~0xFFFFFF00);\n    sum = svaddv_s32(pg, v_two_digits);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_121_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nint add_elements_simd(std::vector<int> arr, int k) {\n    int sum = 0;\n    svbool_t pg = svwhilelt_b32(0, k);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t one = svdup_n_s32(100);\n    svint32_t two = svdup_n_s32(10);\n    svint32_t ten = svdup_n_s32(10);\n    svint32_t hundred = svdup_n_s32(100);\n    svint32_t mask = svcmpge(svabs_s32(v), one) & svcmpge(svabs_s32(v), two);\n    svint32_t masked_v = svand_z(pg, v, svcmpge(svabs_s32(v), ten) & svcmpge(svabs_s32(v), hundred));\n    sum = svaddv_s32(pg, masked_v);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) return true;\n\n    const int *data = lst.data();\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    svint32_t v = svld1_s32(pg, &data[0]);\n    svint32_t prev = svdup_n_s32(lst[0]);\n    svbool_t sorted = svcmpge_s32(pg, v, prev);\n    svbool_t duplicate = svcmpeq_s32(pg, v, prev);\n\n    for (size_t i = 1; i < n; i += svcntw()) {\n        pg = svwhilelt_b32(i, n);\n        v = svld1_s32(pg, &data[i]);\n        sorted = svand_z(pg, sorted, svcmpge_s32(pg, v, prev));\n        duplicate = svand_z(pg, duplicate, svcmpeq_s32(pg, v, prev));\n        prev = v;\n    }\n\n    return svptest_any(pg, sorted) && !svptest_any(pg, duplicate);\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) return true;\n\n    const int *data = lst.data();\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n\n    svint32_t v = svld1_s32(pg, data);\n    svint32_t v_next = svld1_s32(pg, data + 1);\n\n    svbool_t cmp = svcmpeq_s32(pg, v, v_next);\n    if (svcntp_b64(pg, cmp) > 1) return false;\n\n    cmp = svcmpge_s32(pg, v, v_next);\n    if (svptest_any(pg, cmp)) return false;\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) return true;\n\n    const int *data = lst.data();\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    svint32_t prev = svld1(pg, &data[0]);\n    int i = svcntw();\n\n    while (svptest_any(pg, pg)) {\n        svint32_t curr = svld1(pg, &data[i]);\n        svbool_t cmp = svcmple_s32(pg, prev, curr);\n        if (!svptest_any(pg, cmp)) return false;\n\n        svbool_t eq = svcmpeq_s32(pg, prev, curr);\n        if (svcntp_b32(pg, eq) > 1) return false;\n\n        prev = curr;\n        i += svcntw();\n        pg = svwhilelt_b32(i, n);\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) return true;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n    svint32_t v_next = svld1_s32(pg, &lst[1]);\n\n    svbool_t p_gt = svcmpeq_s32(pg, v, v_next);\n    svbool_t p_eq = svcmpgt_s32(pg, v, v_next);\n\n    if (svptest_any(pg, svorr_z(pg, p_gt, p_eq))) {\n        return false;\n    }\n\n    for (size_t i = 1; i < n - 1; i++) {\n        pg = svwhilelt_b64(i, n - 1);\n        v = svld1_s32(pg, &lst[i]);\n        v_next = svld1_s32(pg, &lst[i + 1]);\n\n        p_gt = svcmpeq_s32(pg, v, v_next);\n        p_eq = svcmpgt_s32(pg, v, v_next);\n\n        if (svptest_any(pg, svorr_z(pg, p_gt, p_eq))) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```"}
{"task_id": "SimdBench_122_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nbool is_sorted_simd(const std::vector<int> & lst) {\n    size_t n = lst.size();\n    if (n <= 1) return true;\n\n    const int *data = lst.data();\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    svint32_t v0 = svld1_s32(pg, &data[0]);\n    svint32_t v1 = svld1_s32(pg, &data[1]);\n\n    svbool_t cmp = svcmpeq_s32(pg, v0, v1);\n    if (svptest_any(pg, cmp)) return false;\n\n    svbool_t sorted = svcmpeq_s32(pg, svsub_n_s32_x(pg, v1, v0, 1), svdup_n_s32(0));\n    return svptest_any(pg, sorted);\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nint prod_signs_simd(const std::vector<int>& arr) {\n    if (arr.empty()) return -32768;\n\n    constexpr int VL = svcntw();\n    int sign_product = 1;\n    int sum_magnitudes = 0;\n\n    for (size_t i = 0; i < arr.size(); i += VL) {\n        svbool_t pg = svwhilelt_b32(i, arr.size());\n        svint32_t v = svld1_s32(pg, &arr[i]);\n\n        svint32_t signs = svcmpge_s32(pg, v, 0);\n        svint32_t magnitudes = svabs_s32_x(pg, v);\n\n        sign_product *= svpmul_x(pg, signs);\n        sum_magnitudes += svaddv_s32_x(pg, magnitudes);\n    }\n\n    return sign_product * sum_magnitudes;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nint prod_signs_simd(const std::vector<int> &arr) {\n    if (arr.empty()) return -32768;\n\n    int sign_product = 1;\n    int sum_magnitudes = 0;\n\n    size_t vector_length = svcntw();\n    size_t i = 0;\n\n    for (; i + vector_length <= arr.size(); i += vector_length) {\n        svint32_t v = svld1_s32(svptrue_b32(), &arr[i]);\n        svint32_t signs = svcmpge_s32(svptrue_b32(), v, 0);\n        svint32_t magnitudes = svabs_s32(svptrue_b32(), v);\n\n        sign_product *= svpmul_x(svptrue_b32(), signs);\n        sum_magnitudes += svaddv_s32(svptrue_b32(), magnitudes);\n    }\n\n    for (; i < arr.size(); ++i) {\n        int num = arr[i];\n        sign_product *= (num > 0) - (num < 0);\n        sum_magnitudes += std::abs(num);\n    }\n\n    return sign_product * sum_magnitudes;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nint prod_signs_simd(const std::vector<int> &arr) {\n    if (arr.empty()) return -32768;\n\n    size_t n = arr.size();\n    int sign_product = 1;\n    int sum_magnitudes = 0;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n\n    svint32_t signs = svcmpge_s32(pg, v, 0);\n    svint32_t magnitudes = svabs_s32_x(pg, v);\n\n    sign_product = svpmul_x(pg, signs);\n    sum_magnitudes = svaddv_s32_x(pg, magnitudes);\n\n    return sign_product * sum_magnitudes;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nint prod_signs_simd(const std::vector<int>& arr) {\n    if (arr.empty()) return -32768;\n\n    size_t n = arr.size();\n    svbool_t pg = svwhilelt_b32(0, n);\n\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t abs_v = svabs_s32_x(pg, v);\n    svint32_t sign_v = svcmpge_s32(pg, v, 0);\n    sign_v = svsub_n_s32_x(pg, sign_v, svcmpgt_s32(pg, v, 0));\n\n    int32_t sum_abs = svaddv_s32(pg, abs_v);\n    int32_t prod_sign = svminv_s32(pg, sign_v);\n\n    return sum_abs * prod_sign;\n}\n```"}
{"task_id": "SimdBench_123_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nint prod_signs_simd(const std::vector<int>& arr) {\n    if (arr.empty()) return -32768;\n\n    size_t n = arr.size();\n    int sign_product = 1;\n    int sum_magnitudes = 0;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n\n    svint32_t abs_v = svabs_s32_x(pg, v);\n    svint32_t sign_v = svcmpgt_s32(pg, v, 0);\n    sign_v = svsub_n_s32_x(pg, sign_v, svcmpgt_s32(pg, svneg_s32_x(pg, v), 0));\n\n    sum_magnitudes = svaddv_s32(pg, abs_v);\n    sign_product = svminv_s32(pg, sign_v);\n\n    while (svptest_any(pg, svwhilelt_b32(svcntw(), n))) {\n        svint32_t v = svld1_s32(pg, &arr[svcntw()]);\n\n        svint32_t abs_v = svabs_s32_x(pg, v);\n        svint32_t sign_v = svcmpgt_s32(pg, v, 0);\n        sign_v = svsub_n_s32_x(pg, sign_v, svcmpgt_s32(pg, svneg_s32_x(pg, v), 0));\n\n        sum_magnitudes = svaddv_s32(pg, abs_v);\n        sign_product = svminv_s32(pg, sign_v);\n\n        pg = svwhilelt_b32(svcntw(), n);\n    }\n\n    return sign_product * sum_magnitudes;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            std::vector<int> currentPath = {grid[i][j]};\n            svint32_t currentPathVec = svdup_n_s32(grid[i][j]);\n            svbool_t pg = svwhilelt_b32(0, k - 1);\n\n            while (svptest_any(pg, pg)) {\n                int step = svminpos_u32(pg);\n                int minVal = INT_MAX;\n\n                if (i > 0) minVal = std::min(minVal, grid[i - 1][j]);\n                if (i < N - 1) minVal = std::min(minVal, grid[i + 1][j]);\n                if (j > 0) minVal = std::min(minVal, grid[i][j - 1]);\n                if (j < N - 1) minVal = std::min(minVal, grid[i][j + 1]);\n\n                currentPath.push_back(minVal);\n                currentPathVec = svext_s32(currentPathVec, svdup_n_s32(minVal), svindex_u32(step + 1, 1));\n                pg = svwhilelt_b32(step + 1, k - 1);\n            }\n\n            if (currentPath < minPath) {\n                minPath = currentPath;\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            svbool_t pg = svwhilelt_b64_s64(0, k);\n            std::vector<int> currentPath(k, 0);\n            currentPath[0] = grid[i][j];\n\n            for (int step = 1; step < k; ++step) {\n                int minVal = INT_MAX;\n                for (int di = -1; di <= 1; ++di) {\n                    for (int dj = -1; dj <= 1; ++dj) {\n                        if (abs(di) != abs(dj) && i + di >= 0 && i + di < N && j + dj >= 0 && j + dj < N) {\n                            minVal = std::min(minVal, grid[i + di][j + dj]);\n                        }\n                    }\n                }\n                currentPath[step] = minVal;\n                i += (minVal == grid[i + 1][j]) ? 1 : (minVal == grid[i - 1][j]) ? -1 : 0;\n                j += (minVal == grid[i][j + 1]) ? 1 : (minVal == grid[i][j - 1]) ? -1 : 0;\n            }\n\n            if (std::lexicographical_compare(currentPath.begin(), currentPath.end(), minPath.begin(), minPath.end())) {\n                minPath = currentPath;\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            svbool_t pg = svwhilelt_b32(0, k);\n            std::vector<int> currentPath(k, 0);\n            currentPath[0] = grid[i][j];\n\n            for (int step = 1; step < k; ++step) {\n                int minVal = INT_MAX;\n                for (int di = -1; di <= 1; ++di) {\n                    for (int dj = -1; dj <= 1; ++dj) {\n                        if (abs(di) == abs(dj)) continue;\n                        int ni = i + di * step;\n                        int nj = j + dj * step;\n                        if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                            minVal = std::min(minVal, grid[ni][nj]);\n                        }\n                    }\n                }\n                currentPath[step] = minVal;\n            }\n\n            if (currentPath < minPath) {\n                minPath = currentPath;\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            svbool_t pg = svwhilelt_b64(0, k);\n            svint32_t currentPath = svdup_n_s32(pg, grid[i][j]);\n            int x = i, y = j;\n\n            for (int step = 1; step < k; ++step) {\n                int minVal = INT_MAX;\n                int nextX = x, nextY = y;\n\n                for (int dx = -1; dx <= 1; ++dx) {\n                    for (int dy = -1; dy <= 1; ++dy) {\n                        if (abs(dx) == abs(dy)) continue;\n                        int newX = x + dx, newY = y + dy;\n                        if (newX >= 0 && newX < N && newY >= 0 && newY < N && grid[newX][newY] < minVal) {\n                            minVal = grid[newX][newY];\n                            nextX = newX;\n                            nextY = newY;\n                        }\n                    }\n                }\n\n                currentPath = svext_s32(currentPath, svdup_n_s32(pg, minVal), step);\n                x = nextX;\n                y = nextY;\n            }\n\n            if (svptest_any(pg, svcmplt_s32(pg, currentPath, svld1_s32(pg, &minPath[0])))) {\n                minPath.assign((int*)&currentPath, (int*)&currentPath + k);\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_124_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n#include <algorithm>\n\nstd::vector<int> minPath_simd(const std::vector<std::vector<int>> &grid, int k) {\n    int N = grid.size();\n    std::vector<int> minPath(k, INT_MAX);\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            svbool_t pg = svwhilelt_b64_s64(0, k);\n            svint64_t currentPath = svdup_n_s64(grid[i][j]);\n            int x = i, y = j;\n\n            for (int step = 1; step < k; ++step) {\n                int minVal = INT_MAX;\n                int nextX = -1, nextY = -1;\n\n                if (x > 0 && grid[x-1][y] < minVal) {\n                    minVal = grid[x-1][y];\n                    nextX = x-1; nextY = y;\n                }\n                if (y > 0 && grid[x][y-1] < minVal) {\n                    minVal = grid[x][y-1];\n                    nextX = x; nextY = y-1;\n                }\n                if (x < N-1 && grid[x+1][y] < minVal) {\n                    minVal = grid[x+1][y];\n                    nextX = x+1; nextY = y;\n                }\n                if (y < N-1 && grid[x][y+1] < minVal) {\n                    minVal = grid[x][y+1];\n                    nextX = x; nextY = y+1;\n                }\n\n                currentPath = svinsr_n_s64(currentPath, pg, step, minVal);\n                x = nextX;\n                y = nextY;\n            }\n\n            if (svptest_any_s64(pg, svcmple_s64(pg, currentPath, svld1_s64(pg, &minPath[0])))) {\n                minPath.assign((int*)&currentPath, (int*)&currentPath + k);\n            }\n        }\n    }\n\n    return minPath;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t digits_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t v = svdup_n_u64(1);\n    svuint64_t digits = svdup_n_u64(0);\n    svuint64_t odds = svdup_n_u64(0);\n    svuint64_t tens = svdup_n_u64(10);\n\n    while (svptest_any(pg)) {\n        svuint64_t rem = svrem_x(pg, svdup_n_u64(n), tens);\n        svuint64_t quo = svdiv_x(pg, svdup_n_u64(n), tens);\n        digits = svadd_x(pg, digits, rem);\n        odds = svsel_u64(svcmpeq_n_u64(pg, svand_n_u64(pg, rem, svdup_n_u64(1)), 1), odds, svmul_x(pg, odds, rem));\n        n = svdup_n_u64(quo);\n        pg = svwhilelt_b64(0, n);\n    }\n\n    return svaddv_x(pg, odds);\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t digits_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64_s64(0, 10);\n    svuint64_t sv_n = svdup_u64_z(pg, n);\n    svuint64_t sv_10 = svdup_u64_z(pg, 10);\n    svuint64_t sv_rem = svrem_u64_z(pg, sv_n, sv_10);\n    svuint64_t sv_odd = svand_u64_z(pg, sv_rem, svdup_u64_z(pg, 1));\n    svbool_t sv_odd_mask = svcmpeq_u64(pg, sv_odd, svdup_u64_z(pg, 1));\n    svuint64_t sv_product = svdup_u64_z(pg, 1);\n    svuint64_t sv_one = svdup_u64_z(pg, 1);\n\n    while (svptest_any(pg, sv_odd_mask)) {\n        sv_product = svmla_u64_z(pg, sv_product, sv_rem, sv_one);\n        sv_n = svdiv_u64_z(pg, sv_n, sv_10);\n        sv_rem = svrem_u64_z(pg, sv_n, sv_10);\n        sv_odd = svand_u64_z(pg, sv_rem, svdup_u64_z(pg, 1));\n        sv_odd_mask = svcmpeq_u64(pg, sv_odd, svdup_u64_z(pg, 1));\n    }\n\n    return svaddv_u64(pg, sv_product);\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t digits_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64(0, n);\n    svuint64_t v = svdup_n_u64(1);\n    svuint64_t digits = svdup_n_u64(0);\n    svuint64_t powers = svdup_n_u64(1);\n\n    while (svptest_any(pg, svcmpne_n_u64(pg, n, 0))) {\n        svuint64_t rem = svrem_n_u64_x(pg, n, 10);\n        svuint64_t quo = svdiv_n_u64_x(pg, n, 10);\n        svuint64_t odd_mask = svcmpgt_n_u64(pg, svand_n_u64_x(pg, rem, 1), 0);\n\n        digits = svsel_u64(odd_mask, svmla_n_u64_x(pg, digits, powers, rem), digits);\n        powers = svmla_n_u64_x(pg, powers, powers, svdup_n_u64(10));\n        n = quo;\n        pg = svwhilelt_b64(0, n);\n    }\n\n    return svaddv_u64(pg, digits);\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t digits_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svuint64_t v = svdup_u64_z(pg, 1);\n    svuint64_t powers_of_ten = svindex_u64_z(pg, 0);\n    svuint64_t digits = svlsr_n_u64_z(pg, svmod_x_u64_z(pg, n, svlsl_n_u64_z(pg, v, powers_of_ten)), 60);\n    svbool_t odd_digits = svcmpne_n_u64(pg, svand_n_u64_z(pg, digits, 1), 1);\n    uint64_t product = 1;\n    if (svptest_any(pg, odd_digits)) {\n        product = svdup_u64_z(odd_digits, 1);\n        svuint64_t odd_digits_val = svsel_u64(odd_digits, digits, svdup_u64_z(odd_digits, 1));\n        product = svpmul_x(pg, odd_digits, product, odd_digits_val);\n    } else {\n        product = 0;\n    }\n    return product;\n}\n```"}
{"task_id": "SimdBench_125_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t digits_simd(uint64_t n) {\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svuint64_t v = svdup_u64_z(pg, 1);\n    svuint64_t powersOfTen = svdup_u64_z(pg, 1);\n    uint64_t product = 1;\n    bool hasOdd = false;\n\n    while (svptest_any(pg, pg)) {\n        svuint64_t digit = svmod_x(pg, n, svdup_u64_z(pg, 10));\n        n = svdiv_x(pg, n, svdup_u64_z(pg, 10));\n        pg = svwhilelt_b64_s64(0, n);\n\n        svbool_t isOdd = svcmpne_n_u64(pg, svmod_x(pg, digit, svdup_u64_z(pg, 2)), 0);\n        if (svptest_any(pg, isOdd)) {\n            hasOdd = true;\n            product *= svdup_u64_z(pg, svaddv_x(pg, digit));\n        }\n\n        powersOfTen = svmul_x(pg, powersOfTen, svdup_u64_z(pg, 10));\n    }\n\n    return hasOdd ? product : 0;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    uint64_t sum = 0;\n\n    svfloat32_t v_ceil, v_square;\n    svuint64_t v_sum = svdup_u64(0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        svfloat32_t v = svld1(pg, &lst[i]);\n        v_ceil = svrintz_x(pg, v);\n        v_square = svmul_x(pg, v_ceil, v_ceil);\n        v_sum = svadd_x(pg, v_sum, svreinterpret_u64(v_square));\n    }\n\n    sum = svaddv(svptrue_b64(), v_sum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    uint64_t sum = 0;\n\n    svfloat32_t v, v_ceil, v_sq;\n    svuint64_t v_sum = svdup_u64(0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        v = svld1(pg, &lst[i]);\n        v_ceil = svrintz_x(pg, v);\n        v_sq = svmul_x(pg, v_ceil, v_ceil);\n        v_sum = svadd_x(pg, v_sum, svreinterpret_u64_f32(v_sq));\n    }\n\n    sum = svaddv(svptrue_b64(), v_sum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    uint64_t sum = 0;\n\n    svfloat32_t v, v_ceil, v_sq;\n    svuint64_t v_sum = svdup_u64(0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        v = svld1(pg, &lst[i]);\n        v_ceil = svrintz_x(pg, v);\n        v_sq = svmul_x(pg, v_ceil, v_ceil);\n        v_sum = svadd_x(pg, v_sum, svreinterpret_u64_f32(v_sq));\n    }\n\n    sum = svaddv(svptrue_b64(), v_sum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    uint64_t sum = 0;\n\n    svfloat32_t v, v_ceil, v_sq;\n    svuint64_t v_sum = svdup_u64(0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        v = svld1(pg, &lst[i]);\n        v_ceil = svrintz_x(pg, v);\n        v_sq = svmul_x(pg, v_ceil, v_ceil);\n        v_sum = svadd_x(pg, v_sum, svreinterpret_u64_f32(v_sq));\n    }\n\n    sum = svaddv(svptrue_b64(), v_sum);\n    return sum;\n}\n```"}
{"task_id": "SimdBench_126_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t sum_squares_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    uint64_t sum = 0;\n\n    svfloat32_t vg, v0;\n    svint32_t vi32;\n    svuint64_t sum_vec = svdup_u64(0);\n\n    for (size_t i = 0; i < n; i += svcntd()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n\n        v0 = svld1_f32(pg, &lst[i]);\n        vg = svceil_x(pg, v0);\n        vi32 = svcvt_s32_f32_x(pg, vg);\n\n        svint64_t vi64 = svextw_x(pg, vi32);\n        svuint64_t square = svmul_x(pg, vi64, vi64);\n\n        sum_vec = svadd_u64_x(pg, sum_vec, square);\n    }\n\n    sum = svaddv_x(svptrue_b64(), sum_vec);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    svbool_t pg = svwhilelt_b64(0, n - 1);\n    svint32_t v = svld1(pg, &arr[0]);\n    svint32_t v_prev = svld1(pg, &arr[1]);\n\n    svbool_t p = svcmpeq(pg, v, v_prev);\n    svint32_t idx = svindex_s64(0, 1);\n\n    while (svptest_any(pg, p)) {\n        pg = svwhilelt_b64(svcntp_b64(pg, p), n - 1);\n        v = svld1(pg, &arr[svcntp_b64(pg, p)]);\n        v_prev = svld1(pg, &arr[svcntp_b64(pg, p) + 1]);\n        p = svcmpeq(pg, v, v_prev);\n        idx = svindex_s64(svcntp_b64(pg, p), 1);\n    }\n\n    int max_idx = -1;\n    for (size_t i = 1; i < n; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            max_idx = i;\n        }\n    }\n\n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    svbool_t pg = svwhilelt_b64(0, n - 1);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t prev = svdup_n_s32(arr[0]);\n    svbool_t ptrue = svptrue_b64();\n    int max_index = -1;\n\n    for (size_t i = 1; i < n; ++i) {\n        svbool_t cond = svcmpeq_s32(ptrue, v, prev);\n        if (svptest_any(ptrue, cond)) {\n            max_index = i - 1;\n        }\n        prev = v;\n        v = svld1_s32(pg, &arr[i]);\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    svbool_t pg = svwhilelt_b64(0, n - 1);\n    svint32_t v = svld1(pg, &arr[0]);\n    svint32_t v_prev = svld1(pg, &arr[1]);\n\n    svbool_t p = svcmpge_n_u32(pg, v, v_prev);\n    int max_index = -1;\n\n    while (svptest_any(pg, p)) {\n        max_index = svmax_s32_x(pg, p, svindex_s32(0, 1));\n        pg = svwhilelt_b64(max_index + 1, n - 1);\n        v = svld1(pg, &arr[max_index + 1]);\n        v_prev = svld1(pg, &arr[max_index + 2]);\n        p = svcmpge_n_u32(pg, v, v_prev);\n    }\n\n    return max_index;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> & arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    svbool_t pg = svwhilelt_b64(0, n - 1);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t v_prev = svld1_s32(pg, &arr[1]);\n\n    svbool_t p = svcmpeq_s32(pg, v, v_prev);\n    while (svptest_any(pg, p)) {\n        svint32_t v_next = svld1_s32(pg, &arr[svcntp_b64(pg, p) + 1]);\n        v_prev = v;\n        v = v_next;\n        p = svcmpeq_s32(pg, v, v_prev);\n    }\n\n    size_t index = svlastb_u64(pg, p);\n    return (index == 0) ? -1 : index;\n}\n```"}
{"task_id": "SimdBench_127_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint can_arrange_simd(const std::vector<int> &arr) {\n    size_t n = arr.size();\n    if (n < 2) return -1;\n\n    svbool_t pg = svwhilelt_b64(0, n - 1);\n    svint32_t v = svld1_s32(pg, &arr[0]);\n    svint32_t prev = svdup_n_s32(-1);\n    svint32_t idx = svindex_s32(0, 1);\n\n    int max_idx = -1;\n\n    while (svptest_any(pg, pg)) {\n        svint32_t current = svdup_s32(svlastb_s32(pg, v));\n        svbool_t cmp = svcmple_s32(pg, current, prev);\n\n        if (svptest_any(pg, cmp)) {\n            max_idx = svlastb_u32(pg, idx);\n        }\n\n        prev = current;\n        idx = svadd_n_u32_x(pg, idx, 1);\n        v = svld1_s32(pg, &arr[svcntp_b64(pg, pg)]);\n        pg = svwhilelt_b64(svcntp_b64(pg, pg), n - 1);\n    }\n\n    return max_idx;\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n#include <algorithm>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) return {0, 0};\n\n    constexpr int vector_length = 128 / sizeof(int);\n    svbool_t pg = svwhilelt_b32(0, lst.size());\n    svint32_t v = svld1_s32(pg, &lst[0]);\n\n    svint32_t max_neg = svdup_n_s32(INT32_MIN);\n    svint32_t min_pos = svdup_n_s32(INT32_MAX);\n\n    svbool_t is_neg = svcmplt_n_s32(pg, v, 0);\n    svbool_t is_pos = svcmpgt_n_s32(pg, v, 0);\n\n    max_neg = svsel_s32(is_neg, svmax_s32_x(pg, max_neg, v), max_neg);\n    min_pos = svsel_s32(is_pos, svmin_s32_x(pg, min_pos, v), min_pos);\n\n    int max_neg_val = svmaxv_s32(pg, max_neg);\n    int min_pos_val = svminv_s32(pg, min_pos);\n\n    if (max_neg_val < 0) max_neg_val = 0;\n    if (min_pos_val > 0) min_pos_val = 0;\n\n    return {max_neg_val, min_pos_val};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) return {0, 0};\n\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    bool has_negative = false;\n    bool has_positive = false;\n\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b32(i, lst.size());\n\n    svint32_t v_largest_negative = svdup_n_s32(pg, INT_MIN);\n    svint32_t v_smallest_positive = svdup_n_s32(pg, INT_MAX);\n    svbool_t pn = svpfalse_b();\n    svbool_t pp = svpfalse_b();\n\n    while (svptest_any(pg)) {\n        svint32_t v = svld1(pg, &lst[i]);\n        svbool_t pneg = svcmplt_s32(pg, v, 0);\n        svbool_t ppos = svcmpge_s32(pg, v, 1);\n\n        v_largest_negative = svmax_s32_m(pneg, v_largest_negative, v);\n        v_smallest_positive = svmin_s32_m(ppos, v_smallest_positive, v);\n\n        pn = svlor_b_z(pn, pneg);\n        pp = svlor_b_z(pp, ppos);\n\n        i += svcntp_b32(pg);\n        pg = svwhilelt_b32(i, lst.size());\n    }\n\n    if (svptest_any(pn)) {\n        largest_negative = svmaxv_s32(v_largest_negative);\n        has_negative = true;\n    }\n\n    if (svptest_any(pp)) {\n        smallest_positive = svminv_s32(v_smallest_positive);\n        has_positive = true;\n    }\n\n    if (!has_negative) largest_negative = 0;\n    if (!has_positive) smallest_positive = 0;\n\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <limits.h>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) return {0, 0};\n\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    bool has_negative = false;\n    bool has_positive = false;\n\n    size_t i = 0;\n    svbool_t pg = svwhilelt_b64(i, lst.size());\n\n    do {\n        svint32_t v = svld1(pg, &lst[i]);\n        svbool_t is_negative = svcmplt_s32(pg, v, 0);\n        svbool_t is_positive = svcmpgt_s32(pg, v, 0);\n\n        if (svptest_any(pg, is_negative)) {\n            has_negative = true;\n            int32_t max_neg = svmaxv_s32(pg, svsel_s32(is_negative, v, svdup_n_s32(INT_MIN)));\n            if (max_neg > largest_negative) largest_negative = max_neg;\n        }\n\n        if (svptest_any(pg, is_positive)) {\n            has_positive = true;\n            int32_t min_pos = svminv_s32(pg, svsel_s32(is_positive, v, svdup_n_s32(INT_MAX)));\n            if (min_pos < smallest_positive) smallest_positive = min_pos;\n        }\n\n        i += svcntw();\n        pg = svwhilelt_b64(i, lst.size());\n    } while (svptest_any(pg));\n\n    if (!has_negative) largest_negative = 0;\n    if (!has_positive) smallest_positive = 0;\n\n    return {largest_negative, smallest_positive};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n#include <limits>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) return {0, 0};\n\n    const int32_t* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, data);\n\n    svint32_t max_neg = svdup_n_s32(std::numeric_limits<int32_t>::min());\n    svint32_t min_pos = svdup_n_s32(std::numeric_limits<int32_t>::max());\n\n    svbool_t is_neg = svcmplt_s32(pg, v, 0);\n    svbool_t is_pos = svcmpgt_s32(pg, v, 0);\n\n    max_neg = svsel_s32(is_neg, svmax_s32_x(pg, v, max_neg), max_neg);\n    min_pos = svsel_s32(is_pos, svmin_s32_x(pg, v, min_pos), min_pos);\n\n    int32_t max_neg_scalar = svmaxv_s32(pg, max_neg);\n    int32_t min_pos_scalar = svminv_s32(pg, min_pos);\n\n    if (max_neg_scalar == std::numeric_limits<int32_t>::min()) max_neg_scalar = 0;\n    if (min_pos_scalar == std::numeric_limits<int32_t>::max()) min_pos_scalar = 0;\n\n    return {max_neg_scalar, min_pos_scalar};\n}\n```"}
{"task_id": "SimdBench_128_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdint>\n\nstd::vector<int> largest_smallest_integers_simd(const std::vector<int>& lst) {\n    if (lst.empty()) return {0, 0};\n\n    const int32_t* data = lst.data();\n    size_t n = lst.size();\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, data);\n\n    svint32_t max_neg = svdup_n_s32(INT32_MIN);\n    svint32_t min_pos = svdup_n_s32(INT32_MAX);\n\n    svbool_t is_neg = svcmplt_s32(pg, v, 0);\n    svbool_t is_pos = svcmpgt_s32(pg, v, 0);\n\n    max_neg = svsel_s32(is_neg, svmax_s32_x(pg, max_neg, v), max_neg);\n    min_pos = svsel_s32(is_pos, svmin_s32_x(pg, min_pos, v), min_pos);\n\n    int32_t max_neg_val = svmaxv_s32(pg, max_neg);\n    int32_t min_pos_val = svminv_s32(pg, min_pos);\n\n    if (max_neg_val == INT32_MIN) max_neg_val = 0;\n    if (min_pos_val == INT32_MAX) min_pos_val = 0;\n\n    return {max_neg_val, min_pos_val};\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    // Use SVE to parallelize the multiplication of factorials\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svuint64_t vn = svindex_u64_s64(0, 1);\n    svuint64_t vfactorial = svdup_n_u64_s64(1);\n    svuint64_t vresult = svdup_n_u64_s64(1);\n\n    while (svptest_any(pg)) {\n        svuint64_t vi = svadd_x(pg, vn, svindex_u64_s64(0, 1));\n        vfactorial = svmul_x(pg, vfactorial, vi);\n        vresult = svmul_x(pg, vresult, vfactorial);\n        vn = svadd_x(pg, vn, svdup_n_u64_s64(1));\n        pg = svwhilelt_b64_s64(vn, n);\n    }\n\n    result = svaddv(pg, vresult);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    // Use SVE to parallelize the multiplication of factorials\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svuint64_t vn = svindex_u64_s64(0, 1);\n    svuint64_t vfactorial = svdup_n_u64_s64(1);\n    svuint64_t vresult = svdup_n_u64_s64(1);\n\n    while (svptest_any(pg)) {\n        svuint64_t vi = svadd_n_u64_z(pg, vn, 1);\n        vfactorial = svmul_z(pg, vfactorial, vi);\n        vresult = svmul_z(pg, vresult, vfactorial);\n        vn = svadd_z(pg, vn, 1);\n        pg = svwhilelt_b64_s64(vn, n);\n    }\n\n    result = svaddv(pg, vresult);\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    // Use SVE to parallelize the multiplication of factorials\n    svbool_t pg = svwhilelt_b64(1, n);\n    svuint64_t vn = svindex_u64(1, 1);\n    svuint64_t vfactorial = svdup_u64(1);\n    svuint64_t vresult = svdup_u64(1);\n\n    while (svptest_any(pg, svcmpge_n_u64(pg, vn, n))) {\n        vfactorial = svmul_x(pg, vfactorial, vn);\n        vresult = svmul_x(pg, vresult, vfactorial);\n        vn = svadd_n_u64(pg, vn, 1);\n        pg = svwhilelt_b64(vn, n);\n    }\n\n    result = svaddv(pg, vresult);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    // Use SVE to parallelize the multiplication of factorials\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svuint64_t sv_result = svdup_u64_z(pg, 1);\n    svuint64_t sv_factorial = svdup_u64_z(pg, 1);\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        sv_factorial = svmul_z(pg, sv_factorial, svdup_u64_z(pg, i));\n        sv_result = svmul_z(pg, sv_result, sv_factorial);\n    }\n\n    result = svaddv_u64(pg, sv_result);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_129_SVE", "completion": "```c\n#include <arm_sve.h>\n\nuint64_t special_factorial_simd(uint64_t n) {\n    uint64_t result = 1;\n    uint64_t factorial = 1;\n\n    for (uint64_t i = 1; i <= n; ++i) {\n        factorial *= i;\n        result *= factorial;\n    }\n\n    // Use SVE to parallelize the multiplication of factorials\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    svuint64_t vn = svindex_u64_s64(0, 1);\n    svuint64_t vfactorial = svdup_n_u64_s64(1);\n    svuint64_t vresult = svdup_n_u64_s64(1);\n\n    while (svptest_any(pg)) {\n        svuint64_t vi = svadd_n_u64_s64(vn, 1);\n        vfactorial = svmul_u64_s64(vfactorial, vi);\n        vresult = svmul_u64_s64(vresult, vfactorial);\n        vn = vi;\n        pg = svwhilelt_b64_s64(vn, n);\n    }\n\n    result = svaddv_u64_s64(pg, vresult);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int>& lst) {\n    size_t vector_length = lst.size();\n    int sum = 0;\n\n    svbool_t pg = svwhilelt_b32(0, vector_length);\n    svint32_t v = svld1_s32(pg, &lst[0]);\n    svint32_t indices = svindex_s32(0, 1);\n\n    svbool_t multiples_of_3 = svcmpne_n_s32(pg, svmod_n_s32(pg, indices, 3), 0);\n    svbool_t multiples_of_4 = svcmpne_n_s32(pg, svmod_n_s32(pg, indices, 4), 0);\n    svbool_t multiples_of_3_and_4 = svand_z(pg, multiples_of_3, multiples_of_4);\n\n    svint32_t squared = svmla_n_s32_x(pg, v, v, v);\n    svint32_t cubed = svmla_n_s32_x(pg, v, svmla_n_s32_x(pg, v, v, v), v);\n\n    svint32_t result = svsel_s32(multiples_of_3, squared, v);\n    result = svsel_s32(multiples_of_3_and_4, cubed, result);\n\n    sum = svaddv_s32(pg, result);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> &lst) {\n    size_t n = lst.size();\n    int sum = 0;\n\n    svbool_t pg_mul3 = svwhilelt_b64(0, n);\n    svbool_t pg_mul4 = svwhilelt_b64(0, n);\n\n    svint32_t v_idx = svindex_s32(0, 1);\n    svint32_t v_mul3 = svcmpge_n_s32(pg_mul3, svmod_n_s32(pg_mul3, v_idx, 3), 0);\n    svint32_t v_mul4 = svcmpge_n_s32(pg_mul4, svmod_n_s32(pg_mul4, v_idx, 4), 0);\n\n    svint32_t v_data = svld1(pg_mul3, lst.data());\n    svint32_t v_sqr = svmul_n_s32_x(pg_mul3, v_data, v_data);\n    svint32_t v_cube = svmul_n_s32_x(pg_mul4, svmul_n_s32_x(pg_mul4, v_data, v_data), v_data);\n\n    svint32_t v_result = svsel_s32(svand_b_z(pg_mul3, svcmpeq_n_s32(pg_mul3, svmod_n_s32(pg_mul3, v_idx, 4), 0)), v_sqr, v_data);\n    v_result = svsel_s32(svand_b_z(pg_mul4, svcmpne_n_s32(pg_mul4, svmod_n_s32(pg_mul4, v_idx, 3), 0)), v_cube, v_result);\n\n    sum = svaddv_s32(pg_mul3, v_result);\n\n    for (size_t i = n; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> &lst) {\n    size_t vector_length = lst.size();\n    size_t i = 0;\n    int sum = 0;\n\n    svbool_t pg_mul3 = svwhilelt_b32(i, vector_length);\n    svbool_t pg_mul4 = svwhilelt_b32(i, vector_length);\n\n    for (; i < vector_length; i += svcntw()) {\n        svint32_t v = svld1(pg_mul3, &lst[i]);\n        svint32_t indices = svindex_s32(i, 1);\n\n        svbool_t is_mul3 = svcmpne_n_s32(pg_mul3, svmul_n_s32(pg_mul3, indices, 3), 0);\n        svbool_t is_mul4 = svcmpne_n_s32(pg_mul4, svmul_n_s32(pg_mul4, indices, 4), 0);\n\n        svint32_t squared = svmul_s32_x(pg_mul3, v, v);\n        svint32_t cubed = svmul_s32_x(pg_mul4, svmul_s32_x(pg_mul4, v, v), v);\n\n        svint32_t result = svsel_s32(is_mul3, squared, v);\n        result = svsel_s32(is_mul4, cubed, result);\n\n        sum += svaddv(pg_mul3, result);\n\n        pg_mul3 = svwhilelt_b32(i + svcntw(), vector_length);\n        pg_mul4 = svwhilelt_b32(i + svcntw(), vector_length);\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> &lst) {\n    size_t n = lst.size();\n    int sum = 0;\n\n    svbool_t pg_mul3 = svwhilelt_b64(0, n);\n    svbool_t pg_mul4 = svwhilelt_b64(0, n);\n\n    svint32_t v_lst = svld1(pg_mul3, &lst[0]);\n    svint32_t v_idx = svindex_s32(0, 1);\n\n    svint32_t v_mul3 = svmul_n_s32(pg_mul3, v_idx, 3);\n    svint32_t v_mul4 = svmul_n_s32(pg_mul4, v_idx, 4);\n\n    svbool_t pg_mul3_mask = svcmpne_s32(pg_mul3, v_mul3, 0);\n    svbool_t pg_mul4_mask = svcmpne_s32(pg_mul4, v_mul4, 0);\n\n    svint32_t v_sqr = svmul_s32_x(pg_mul3_mask, v_lst, v_lst);\n    svint32_t v_cube = svmla_s32_x(pg_mul4_mask, v_lst, v_lst, v_lst);\n\n    svint32_t v_result = svsel_s32(pg_mul3_mask, v_sqr, v_lst);\n    v_result = svsel_s32(pg_mul4_mask, v_cube, v_result);\n\n    sum = svaddv(pg_mul3, v_result);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_130_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n\nint sum_squares_simd(const std::vector<int> &lst) {\n    size_t n = lst.size();\n    int sum = 0;\n\n    svbool_t pg_mul3 = svwhilelt_b64(0, n);\n    svint32_t v_mul3 = svld1_s32(pg_mul3, &lst[0]);\n    svint32_t v_idx_mul3 = svindex_s32(0, 1);\n    svbool_t pg_mul3_mask = svcmpge_n_u32(pg_mul3, svmod_n_s32(pg_mul3, v_idx_mul3, 3), 0);\n    v_mul3 = svsel_s32(pg_mul3_mask, svmul_n_s32(pg_mul3, v_mul3, v_mul3), v_mul3);\n    sum += svaddv_s32(pg_mul3, v_mul3);\n\n    svbool_t pg_mul4 = svwhilelt_b64(0, n);\n    svint32_t v_mul4 = svld1_s32(pg_mul4, &lst[0]);\n    svint32_t v_idx_mul4 = svindex_s32(0, 1);\n    svbool_t pg_mul4_mask = svcmpge_n_u32(pg_mul4, svmod_n_s32(pg_mul4, v_idx_mul4, 4), 0);\n    pg_mul4_mask = svand_z(pg_mul4_mask, svcmpne_n_u32(pg_mul4, svmod_n_s32(pg_mul4, v_idx_mul4, 3), 0));\n    v_mul4 = svsel_s32(pg_mul4_mask, svmla_n_s32(pg_mul4, v_mul4, v_mul4, v_mul4), v_mul4);\n    sum += svaddv_s32(pg_mul4, v_mul4);\n\n    for (size_t i = 0; i < n; ++i) {\n        if (i % 3 != 0 && i % 4 != 0) {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nint specialFilter_simd(const std::vector<int>& nums) {\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &nums[0]);\n\n    svbool_t p_greater_than_10 = svcmpgt_s32(pg, v, 10);\n\n    svint32_t first_digit = svabs_x(pg, v, svdiv_n_s32(pg, v, 10));\n    svint32_t last_digit = svabs_x(pg, v, svmod_n_s32(pg, v, 10));\n\n    svbool_t p_odd_first_digit = svcmpne_n_s32(pg, svmod_n_s32(pg, first_digit, 2), 0);\n    svbool_t p_odd_last_digit = svcmpne_n_s32(pg, svmod_n_s32(pg, last_digit, 2), 0);\n\n    svbool_t p_valid = svand_b_z(pg, p_greater_than_10, svand_b_z(pg, p_odd_first_digit, p_odd_last_digit));\n\n    count = svcntp_b64(pg, p_valid);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nint specialFilter_simd(const std::vector<int> &nums) {\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &nums[0]);\n\n    svbool_t pg_gt_10 = svcmpgt_n_s32(pg, v, 10);\n\n    svint32_t abs_v = svabs_s32_x(pg, v);\n    svint32_t first_digit = svlsr_n_s32_x(pg, abs_v, svcntp_b32(pg, abs_v) - 1);\n    svint32_t last_digit = svmod_n_s32_x(pg, abs_v, 10);\n\n    svbool_t pg_odd_first = svcmpne_n_s32(pg, svmod_n_s32_x(pg, first_digit, 2), 0);\n    svbool_t pg_odd_last = svcmpne_n_s32(pg, svmod_n_s32_x(pg, last_digit, 2), 0);\n\n    svbool_t pg_odd_both = svand_z(pg, pg_odd_first, pg_odd_last);\n    svbool_t pg_final = svand_z(pg, pg_gt_10, pg_odd_both);\n\n    count = svcntp_b32(pg_final, pg_final);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nint specialFilter_simd(const std::vector<int>& nums) {\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &nums[0]);\n\n    svbool_t pg_gt_10 = svcmpgt_n_s32(pg, v, 10);\n\n    svint32_t abs_v = svabs_s32_x(pg, v);\n    svint32_t first_digit = svlsr_n_s32_x(pg, abs_v, svcntp_b32(pg, abs_v) - 1);\n    svint32_t last_digit = svand_n_s32_x(pg, abs_v, 9);\n\n    svbool_t pg_odd_first = svcmpne_n_s32(pg, svand_n_s32_x(pg, first_digit, 1), 0);\n    svbool_t pg_odd_last = svcmpne_n_s32(pg, svand_n_s32_x(pg, last_digit, 1), 0);\n\n    svbool_t pg_odd_both = svand_b_z(pg, pg_odd_first, pg_odd_last);\n    svbool_t pg_final = svand_b_z(pg, pg_gt_10, pg_odd_both);\n\n    count = svcntp_b32(pg_final, pg_final);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nint specialFilter_simd(const std::vector<int> &nums) {\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svint32_t v = svld1_s32(pg, &nums[0]);\n\n    svbool_t mask_greater_than_10 = svcmpgt_n_s32(pg, v, 10);\n\n    svint32_t abs_v = svabs_x(pg, v, v);\n    svint32_t first_digit = svdiv_n_s32_x(pg, abs_v, 10);\n    svint32_t last_digit = svmod_n_s32_x(pg, abs_v, 10);\n\n    svbool_t mask_first_digit_odd = svcmpne_n_s32(pg, svmod_n_s32_x(pg, first_digit, 2), 0);\n    svbool_t mask_last_digit_odd = svcmpne_n_s32(pg, svmod_n_s32_x(pg, last_digit, 2), 0);\n\n    svbool_t mask_both_odd = svand_z(pg, mask_first_digit_odd, mask_last_digit_odd);\n    svbool_t mask_final = svand_z(pg, mask_greater_than_10, mask_both_odd);\n\n    count = svcntp_b64(pg, mask_final);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_131_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cmath>\n\nint specialFilter_simd(const std::vector<int> &nums) {\n    size_t n = nums.size();\n    int count = 0;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v = svld1_s32(pg, &nums[0]);\n\n    svbool_t pgt10 = svcmpgt_n_s32(pg, v, 10);\n    svint32_t abs_v = svabs_s32_x(pg, v);\n\n    svbool_t pfirst_odd = svcmpgt_n_s32(pgt10, svlsr_n_s32_x(pgt10, abs_v, svcntw()), 0);\n    svbool_t plast_odd = svcmpgt_n_s32(pgt10, svand_n_s32_x(pgt10, abs_v, 1), 0);\n\n    svbool_t pspecial = svand_z(pg, pfirst_odd, plast_odd);\n\n    count = svcntp_b32(pg, pspecial);\n\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdint.h>\n#include <stdlib.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    uint64_t count = 0;\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            svuint64_t vec_a = svdup_u64(a[i] + a[j]);\n            svbool_t pg = svwhilelt_b64(j + 1, n);\n            for (uint64_t k = j + 1; k < n; ++k) {\n                svuint64_t vec_b = svld1(pg, &a[k]);\n                svuint64_t sum = svadd_u64_z(pg, vec_a, vec_b);\n                svbool_t mask = svcmpne_n_u64(pg, svmod_u64_x(pg, sum, 3), 0);\n                count += svcntp_b64(pg, mask);\n            }\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdint.h>\n#include <stdlib.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n    for (uint64_t i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    uint64_t count = 0;\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            svbool_t pg = svwhilelt_b64(j + 1, n);\n            svuint64_t vk = svindex_u64(j + 1, 1);\n            svuint64_t va_k = svld1_u64(pg, &a[j + 1]);\n            svuint64_t va_i = svdup_n_u64(a[i]);\n            svuint64_t va_j = svdup_n_u64(a[j]);\n            svuint64_t sum = svadd_u64_z(pg, va_i, svadd_u64_z(pg, va_j, va_k));\n            svbool_t mask = svcmpne_n_u64(pg, svmod_n_u64_z(pg, sum, 3), 0);\n            count += svcntp_b64(mask);\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdint.h>\n#include <stdlib.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    uint64_t count = 0;\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            svuint64_t v_a_j = svdup_n_u64(a[j]);\n            svuint64_t v_a_i = svdup_n_u64(a[i]);\n            svbool_t pg = svwhilelt_b64(j + 1, n);\n\n            svuint64_t v_k = svindex_u64(j + 1, 1);\n            svuint64_t v_a_k = svld1_gather_u64index(pg, a, v_k);\n\n            svuint64_t v_sum = svadd_u64_z(pg, v_a_i, svadd_u64_z(pg, v_a_j, v_a_k));\n            svbool_t mask = svcmpeq_n_u64(pg, svmod_n_u64_z(pg, v_sum, 3), 0);\n\n            count += svcntp_b64(mask);\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdint.h>\n#include <stdlib.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    uint64_t count = 0;\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            svuint64_t v_a_j = svdup_u64(a[j]);\n            svuint64_t v_sum_ij = svadd_u64_x(svdup_u64(a[i]), v_a_j);\n\n            for (uint64_t k = j + 1; k < n; ++k) {\n                svuint64_t v_a_k = svdup_u64(a[k]);\n                svuint64_t v_sum_ijk = svadd_u64_x(v_sum_ij, v_a_k);\n\n                svbool_t pg = svcmpeq_n_u64(svdup_u64(0), svmod_u64(v_sum_ijk, 3));\n                if (svptest_any(svptrue_b64(), pg)) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_132_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdint.h>\n#include <stdlib.h>\n\nuint64_t get_max_triples_simd(uint64_t n) {\n    uint64_t *a = (uint64_t *)malloc(n * sizeof(uint64_t));\n    for (uint64_t i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    uint64_t count = 0;\n    for (uint64_t i = 0; i < n - 2; ++i) {\n        for (uint64_t j = i + 1; j < n - 1; ++j) {\n            svuint64_t v_ak = svld1_u64(svptrue_b64(), &a[j + 1]);\n            svuint64_t v_sum = svadd_n_u64_x(svptrue_b64(), v_ak, a[i] + a[j]);\n            svbool_t pg = svcmpeq_n_u64(svptrue_b64(), svmod_n_u64_x(svptrue_b64(), v_sum, 3), 0);\n            count += svcntp_b64(svptrue_b64(), pg);\n        }\n    }\n\n    free(a);\n    return count;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svwhilelt_b32(0, n);\n    int32_t values[] = {n};\n    svint32_t vn = svld1(pg, &values);\n    svbool_t p = svcmpne_n_u32(pg, vn, 0);\n\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    int64_t i = 2;\n    svbool_t is_prime = svdup_b_z(true, svcntw());\n\n    while (svptest_any(pg)) {\n        if (n % i == 0) {\n            is_prime = svdup_b_z(false, svcntw());\n            break;\n        }\n        i++;\n        pg = svwhilelt_b64_s64(i, n);\n    }\n\n    if (svptest_any(is_prime)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svwhilelt_b32(0, n);\n    int result = is_prime(n) ? x : y;\n    return result;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n#include <stdbool.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svwhilelt_b32(0, n);\n    int32_t values[] = {n};\n    svint32_t vn = svld1(pg, values);\n    svbool_t p = svcmpne_n_s32(pg, vn, 0);\n\n    bool prime = is_prime(n);\n    return prime ? x : y;\n}\n```"}
{"task_id": "SimdBench_133_SVE", "completion": "```c\n#include <arm_sve.h>\n\nint x_or_y_simd(int n, int x, int y) {\n    svbool_t pg = svwhilelt_b64_s64(0, n);\n    int64_t i = 2;\n    svbool_t is_prime = svdup_b_z(true, pg);\n\n    while (svptest_any(pg, is_prime)) {\n        svint64_t vn = svdup_n_s64(n);\n        svint64_t vi = svdup_n_s64(i);\n        svint64_t rem = svrem_n_s64(pg, vn, i);\n        is_prime = svcmpne_s64(pg, rem, 0);\n        i++;\n        pg = svwhilelt_b64_s64(i, n);\n    }\n\n    if (svptest_any(pg, is_prime)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cstdint>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float>& lst) {\n    if (lst.empty()) return 0;\n\n    svbool_t pg = svwhilelt_b64(0, lst.size());\n    svfloat64_t v = svld1_f64(pg, lst.data());\n\n    svbool_t is_odd = svcmpge_n_f64(pg, v, 0.0);\n    is_odd = svand_z(pg, is_odd, svcmpeq_n_f64(pg, svmod_n_f64(pg, v, 2.0), 1.0));\n\n    svfloat64_t squares = svmul_x(pg, v, v);\n    squares = svsel_f64(is_odd, squares, svdup_f64(0.0));\n\n    uint64_t sum = 0;\n    svfloat64_t accum = svdup_f64(0.0);\n    accum = svaddv_f64(pg, accum, squares);\n    sum = svaddv(pg, accum);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float>& lst) {\n    size_t n = lst.size();\n    if (n == 0) return 0;\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svfloat32_t v = svld1_f32(pg, &lst[0]);\n\n    svbool_t is_odd = svcmpge_n_f32(pg, v, 0.0f) & svcmplt_n_f32(pg, v, 1.0f);\n    svfloat32_t odd_values = svsel_f32(is_odd, v, svdup_f32(0.0f));\n\n    svfloat32_t squared_values = svmul_x(pg, odd_values, odd_values);\n    uint64_t sum_squares = svaddv_u64(svreinterpret_u64_f32(squared_values));\n\n    return sum_squares;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    size_t n = lst.size();\n    if (n == 0) return 0;\n\n    svbool_t pg = svwhilelt_b64(0, n);\n    svfloat64_t v = svld1_f64(pg, &lst[0]);\n\n    svfloat64_t odd_mask = svcmpge_f64(pg, v, svdup_f64(0.0));\n    odd_mask = svand_z(pg, odd_mask, svcmpeq_f64(pg, svmod_f64(pg, v, svdup_f64(2.0)), svdup_f64(1.0)));\n\n    v = svsel_f64(odd_mask, v, svdup_f64(0.0));\n    v = svmul_f64_x(pg, v, v);\n\n    uint64_t sum = 0;\n    svst1_f64(pg, &sum, v);\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    if (lst.empty()) return 0;\n\n    svbool_t pg = svwhilelt_b64(0, lst.size());\n    svfloat64_t v = svld1_f64(pg, &lst[0]);\n\n    svbool_t is_odd = svcmpge_f64(pg, v, 0.0);\n    is_odd = svand_z(pg, is_odd, svcmpeq_f64(pg, svmod_x(pg, v, svdup_n_f64(2.0)), 1.0));\n\n    svfloat64_t squared = svmul_x(pg, v, v);\n    svfloat64_t sum = svaddv_f64(pg, svsel_f64(is_odd, squared, svdup_f64(0.0)));\n\n    return static_cast<uint64_t>(svaddv_f64(svptrue_b64(), sum));\n}\n```"}
{"task_id": "SimdBench_134_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <cmath>\n#include <vector>\n\nuint64_t double_the_difference_simd(const std::vector<float> & lst) {\n    if (lst.empty()) return 0;\n\n    const int64_t vector_length = svcntw();\n    uint64_t sum = 0;\n    svfloat32_t v, v_sq, v_odd, v_mask;\n    svbool_t pg = svwhilelt_b32(0, lst.size());\n\n    for (size_t i = 0; i < lst.size(); i += vector_length) {\n        svfloat32_t vi = svld1(pg, &lst[i]);\n        svbool_t is_odd = svcmpne_n_f32(pg, vi, svfloor_x(pg, vi));\n        svbool_t is_positive = svcmple_n_f32(pg, vi, 0.0f);\n        svbool_t is_integer = svcmpne_n_f32(pg, vi, svfloor_x(pg, vi));\n\n        svbool_t valid = svmul_x(pg, is_odd, is_positive);\n        valid = svmul_x(pg, valid, is_integer);\n\n        v = svsel_f32(valid, vi, svdup_f32(0.0f));\n        v_sq = svmul_x(pg, v, v);\n        v_odd = svsel_f32(valid, v_sq, svdup_f32(0.0f));\n\n        sum += svaddv(svcvt_f64_f32(pg, v_odd));\n\n        pg = svwhilelt_b32(i + vector_length, lst.size());\n    }\n\n    return sum;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v_game = svld1(pg, game.data());\n    svint32_t v_guess = svld1(pg, guess.data());\n\n    svint32_t v_diff = svabsdiff_s32(pg, v_game, v_guess);\n\n    svst1(pg, result.data(), v_diff);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v_game = svld1(pg, game.data());\n    svint32_t v_guess = svld1(pg, guess.data());\n\n    svint32_t v_diff = svsub_n_x(pg, v_game, v_guess);\n    svint32_t v_abs_diff = svabs_x(pg, v_diff);\n\n    svst1(pg, result.data(), v_abs_diff);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstdlib>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v_game = svld1_s32(pg, &game[0]);\n    svint32_t v_guess = svld1_s32(pg, &guess[0]);\n\n    svint32_t v_diff = svabsdiff_s32(pg, v_game, v_guess);\n\n    svst1_s32(pg, &result[0], v_diff);\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```cpp\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    size_t i = 0;\n    for (; i <= n - svcntw(); i += svcntw()) {\n        svbool_t pg = svwhilelt_b32(i, n);\n        svint32_t v_game = svld1_s32(pg, &game[i]);\n        svint32_t v_guess = svld1_s32(pg, &guess[i]);\n        svint32_t v_diff = svabsdiff_s32(pg, v_game, v_guess);\n        svst1_s32(pg, &result[i], v_diff);\n    }\n\n    for (; i < n; ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n\n    return result;\n}\n```"}
{"task_id": "SimdBench_135_SVE", "completion": "```c++\n#include <arm_sve.h>\n#include <vector>\n#include <cstddef>\n\nstd::vector<int> compare_simd(const std::vector<int>& game, const std::vector<int>& guess) {\n    size_t n = game.size();\n    std::vector<int> result(n);\n\n    svbool_t pg = svwhilelt_b32(0, n);\n    svint32_t v_game = svld1_s32(pg, &game[0]);\n    svint32_t v_guess = svld1_s32(pg, &guess[0]);\n    svint32_t v_diff = svabsdiff_n_s32(pg, v_game, v_guess);\n\n    svst1_s32(pg, &result[0], v_diff);\n\n    return result;\n}\n```"}
